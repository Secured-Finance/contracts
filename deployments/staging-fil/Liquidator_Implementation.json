{
  "address": "0x920487D3C337f3Fe9DE4f4F0528454BcA4cAFd6d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_nativeToken",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_lendingMarketController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenVault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CallerNotOperator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInputs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOperationExecution",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "NotAllowedAccess",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "values",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "TransactionFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receivedAmount",
          "type": "uint256"
        }
      ],
      "name": "OperationExecuteForCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "collateralCcy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receivedCollateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "debtCcy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtMaturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receivedDebtAmount",
          "type": "uint256"
        }
      ],
      "name": "OperationExecuteForDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "TransactionExecuted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collateralMaturities",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_collateralCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "_collateralMaturities",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32",
          "name": "_debtCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_debtMaturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "_poolFee",
          "type": "uint24"
        }
      ],
      "name": "executeForcedRepayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_collateralCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "_collateralMaturities",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32",
          "name": "_debtCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_debtMaturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "_poolFee",
          "type": "uint24"
        }
      ],
      "name": "executeLiquidationCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_collateralCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_receivedCollateralAmount",
          "type": "uint256"
        }
      ],
      "name": "executeOperationForCollateral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_collateralCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_receivedCollateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_debtCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_debtMaturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_receivedDebtAmount",
          "type": "uint256"
        }
      ],
      "name": "executeOperationForDebt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "executeTransaction",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_data",
          "type": "bytes[]"
        }
      ],
      "name": "executeTransactions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingMarketController",
      "outputs": [
        {
          "internalType": "contract ILendingMarketController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFee",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "removeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenVault",
      "outputs": [
        {
          "internalType": "contract ITokenVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8e9c0dce349455c78b0d994d46abe5a76f366f27bf6956e99eceef53fda4972c",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x920487D3C337f3Fe9DE4f4F0528454BcA4cAFd6d",
    "transactionIndex": 0,
    "gasUsed": "114567189",
    "logsBloom": "0xaf81509798088038288489212c88c064cc0e604c04a05100b481040090484c098312a90050048118009e9844644a405028881001120194e0802adc0c4b246000641175010165a0123450101820170208709f0c2a00360010108830101612508228222c04121024464086018480042c08040d89cc58180483250d4419ca1424c4c005301a309c0c81005014c100080f1b800a03201041c010047006012288404006213183021400840200e50801340040fc0040cc5380c8c90272143834056111980ab66660102c425d02a1070d472c0a0310e2e1b69d620d068018010007e058605082224331381c2310229a80c2005b0889551060c014340200885914c4805c",
    "blockHash": "0xd7081179170032166a897cc60e010199b79e5b3aad0a8428a1a6c37163afd7f8",
    "transactionHash": "0x8e9c0dce349455c78b0d994d46abe5a76f366f27bf6956e99eceef53fda4972c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1678068,
        "transactionHash": "0x8e9c0dce349455c78b0d994d46abe5a76f366f27bf6956e99eceef53fda4972c",
        "address": "0x920487D3C337f3Fe9DE4f4F0528454BcA4cAFd6d",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dba767f3dff3835bef5de1edee91a9901402ab21",
          "0x000000000000000000000000dba767f3dff3835bef5de1edee91a9901402ab21"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd7081179170032166a897cc60e010199b79e5b3aad0a8428a1a6c37163afd7f8"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1678068,
        "transactionHash": "0x8e9c0dce349455c78b0d994d46abe5a76f366f27bf6956e99eceef53fda4972c",
        "address": "0x920487D3C337f3Fe9DE4f4F0528454BcA4cAFd6d",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
          "0x000000000000000000000000dba767f3dff3835bef5de1edee91a9901402ab21",
          "0x000000000000000000000000dba767f3dff3835bef5de1edee91a9901402ab21"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xd7081179170032166a897cc60e010199b79e5b3aad0a8428a1a6c37163afd7f8"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1678068,
        "transactionHash": "0x8e9c0dce349455c78b0d994d46abe5a76f366f27bf6956e99eceef53fda4972c",
        "address": "0x920487D3C337f3Fe9DE4f4F0528454BcA4cAFd6d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dba767f3dff3835bef5de1edee91a9901402ab21"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xd7081179170032166a897cc60e010199b79e5b3aad0a8428a1a6c37163afd7f8"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1678068,
        "transactionHash": "0x8e9c0dce349455c78b0d994d46abe5a76f366f27bf6956e99eceef53fda4972c",
        "address": "0x920487D3C337f3Fe9DE4f4F0528454BcA4cAFd6d",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 3,
        "blockHash": "0xd7081179170032166a897cc60e010199b79e5b3aad0a8428a1a6c37163afd7f8"
      }
    ],
    "blockNumber": 1678068,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7446494c00000000000000000000000000000000000000000000000000000000",
    "0x679022Ae22bb940B8a2b3630E73F72396e283200",
    "0x451614966B3C6966c7C33094Fe68F0C82eF405A9"
  ],
  "numDeployments": 1,
  "solcInputHash": "f3aa1cfa8e4de6a118da5c4500d93b3f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_nativeToken\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_lendingMarketController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerNotOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInputs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOperationExecution\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotAllowedAccess\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"values\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TransactionFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"}],\"name\":\"OperationExecuteForCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralCcy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedCollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"debtCcy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtMaturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedDebtAmount\",\"type\":\"uint256\"}],\"name\":\"OperationExecuteForDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TransactionExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralMaturities\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_collateralCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"_collateralMaturities\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"_debtCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_debtMaturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_poolFee\",\"type\":\"uint24\"}],\"name\":\"executeForcedRepayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_collateralCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"_collateralMaturities\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"_debtCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_debtMaturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_poolFee\",\"type\":\"uint24\"}],\"name\":\"executeLiquidationCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_collateralCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_receivedCollateralAmount\",\"type\":\"uint256\"}],\"name\":\"executeOperationForCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_collateralCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_receivedCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_debtCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_debtMaturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_receivedDebtAmount\",\"type\":\"uint256\"}],\"name\":\"executeOperationForDebt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"executeTransactions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingMarketController\",\"outputs\":[{\"internalType\":\"contract ILendingMarketController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenVault\",\"outputs\":[{\"internalType\":\"contract ITokenVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addOperator(address)\":{\"params\":{\"admin\":\"The address of the new admin\"}},\"deposit(bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\"}},\"executeForcedRepayment(bytes32,uint256[],bytes32,uint256,address,address,uint24)\":{\"details\":\"In this liquidation call, Uniswap V2 is used for swapping when poolFee is 0. Otherwise, Uniswap V3 is used.\",\"params\":{\"_collateralCcy\":\"Currency name of the collateral in bytes32\",\"_collateralMaturities\":\"Maturities of the collateral\",\"_debtCcy\":\"Currency name of the debt in bytes32\",\"_debtMaturity\":\"Maturity of the debt\",\"_poolFee\":\"Pool fee\",\"_uniswapRouter\":\"Address of the Uniswap router\",\"_user\":\"Address of the user\"}},\"executeLiquidationCall(bytes32,uint256[],bytes32,uint256,address,address,uint24)\":{\"details\":\"In this liquidation call, Uniswap V2 is used for swapping when poolFee is 0. Otherwise, Uniswap V3 is used.\",\"params\":{\"_collateralCcy\":\"Currency name of the collateral in bytes32\",\"_collateralMaturities\":\"Maturities of the collateral\",\"_debtCcy\":\"Currency name of the debt in bytes32\",\"_debtMaturity\":\"Maturity of the debt\",\"_poolFee\":\"Pool fee\",\"_uniswapRouter\":\"Address of the Uniswap router\",\"_user\":\"Address of the user\"}},\"executeOperationForCollateral(address,address,bytes32,uint256)\":{\"params\":{\"_collateralCcy\":\"Currency name of the collateral in bytes32\",\"_liquidator\":\"Address of the liquidator\",\"_receivedCollateralAmount\":\"Amount of the received collateral*\",\"_user\":\"Address of the user\"}},\"executeOperationForDebt(address,address,bytes32,uint256,bytes32,uint256,uint256)\":{\"params\":{\"_collateralCcy\":\"Currency name of the collateral in bytes32\",\"_debtCcy\":\"Currency name of the debt in bytes32\",\"_debtMaturity\":\"Maturity of the debt\",\"_liquidator\":\"Address of the liquidator\",\"_receivedCollateralAmount\":\"Amount of the received collateral\",\"_receivedDebtAmount\":\"Amount of the received debt*\",\"_user\":\"Address of the user\"}},\"executeTransaction(address,bytes)\":{\"details\":\"Executes an arbitrary transaction.\",\"params\":{\"_data\":\"Encoded function data to be executed\",\"_target\":\"Address to be called\"}},\"executeTransactions(address[],uint256[],bytes[])\":{\"details\":\"Executes arbitrary transactions.\",\"params\":{\"_data\":\"Encoded function data to be executed\",\"_targets\":\"Array of Addresses to be called\",\"_values\":\"Array of values to be sent to _targets addresses\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeOperator(address)\":{\"params\":{\"admin\":\"The address of the admin to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"params\":{\"account\":\"The address of the account to revoke the role from\",\"role\":\"The role to be revoked\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`.\",\"params\":{\"account\":\"The address of the account to revoke the role from\",\"role\":\"The role to be revoked\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addOperator(address)\":{\"notice\":\"Adds a new admin as Operator\"},\"deposit(bytes32,uint256)\":{\"notice\":\"Deposits funds by the caller into the token vault.\"},\"executeForcedRepayment(bytes32,uint256[],bytes32,uint256,address,address,uint24)\":{\"notice\":\"Executes the forced repayment.\"},\"executeLiquidationCall(bytes32,uint256[],bytes32,uint256,address,address,uint24)\":{\"notice\":\"Executes the liquidation call.\"},\"executeOperationForCollateral(address,address,bytes32,uint256)\":{\"notice\":\"Executes the operation for collateral as a callback from the lending market controller.\"},\"executeOperationForDebt(address,address,bytes32,uint256,bytes32,uint256,uint256)\":{\"notice\":\"Executes the operation for debt as a callback from the lending market controller.\"},\"removeOperator(address)\":{\"notice\":\"Removes an admin as Operator\"},\"renounceRole(bytes32,address)\":{\"notice\":\"Revokes `role` from the calling account. This function is disabled by overriding it with a revert.\"},\"withdraw(bytes32,uint256)\":{\"notice\":\"Withdraws funds by the caller from the token vault.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/liquidation/Liquidator.sol\":\"Liquidator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/dependencies/openzeppelin/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xbc9ec150e13091594dfd8b1cd6016c962f3b1c681072f3c3fa989fdfa587d42f\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) ||\\n                (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(\\n            !_initializing && _initialized < version,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xb13e7a56a0af42137a3e04dccb39c6bd4233d5e5c324197af9d71c3f7af5359c\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data\\n    ) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44e8974f420f05be7bf27220ef8e694d803a281eb0824a2c0d8960d864780bdf\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfa76bf4fcc900c3a9ddff36dc639af871c463d9e0f69320d33cd916ab3f8efec\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/external/liquidation/Liquidator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {ISwapRouter as ISwapRouterV3} from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport {IUniswapV2Router01 as ISwapRouterV2} from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\\\";\\nimport {IERC20} from \\\"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport {Initializable} from \\\"../../dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\n\\n// libraries\\nimport {TransferHelper} from \\\"../../protocol/libraries/TransferHelper.sol\\\";\\n// interfaces\\nimport {ILendingMarketController} from \\\"../../protocol/interfaces/ILendingMarketController.sol\\\";\\nimport {ITokenVault} from \\\"../../protocol/interfaces/ITokenVault.sol\\\";\\nimport {ILiquidationReceiver} from \\\"../../protocol/interfaces/ILiquidationReceiver.sol\\\";\\n// mixins\\nimport {MixinAccessControl} from \\\"../../protocol/mixins/MixinAccessControl.sol\\\";\\nimport {MixinWallet} from \\\"../../protocol/mixins/MixinWallet.sol\\\";\\n\\ncontract Liquidator is ILiquidationReceiver, MixinAccessControl, MixinWallet, Initializable {\\n    address public immutable nativeToken;\\n    ILendingMarketController public immutable lendingMarketController;\\n    ITokenVault public immutable tokenVault;\\n\\n    address public uniswapRouter;\\n    uint24 public poolFee;\\n    uint256[] public collateralMaturities;\\n\\n    modifier onlyLendingMarketController() {\\n        require(_msgSender() == address(lendingMarketController), \\\"Invalid caller\\\");\\n        _;\\n    }\\n\\n    constructor(bytes32 _nativeToken, address _lendingMarketController, address _tokenVault) {\\n        lendingMarketController = ILendingMarketController(_lendingMarketController);\\n        tokenVault = ITokenVault(_tokenVault);\\n        nativeToken = tokenVault.getTokenAddress(_nativeToken);\\n        initialize();\\n    }\\n\\n    function initialize() public initializer {\\n        MixinAccessControl._setupInitialRoles(msg.sender);\\n        MixinWallet._initialize(msg.sender, nativeToken);\\n    }\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @notice Executes the liquidation call.\\n     * @dev In this liquidation call, Uniswap V2 is used for swapping when poolFee is 0.\\n     * Otherwise, Uniswap V3 is used.\\n     *\\n     * @param _collateralCcy Currency name of the collateral in bytes32\\n     * @param _collateralMaturities Maturities of the collateral\\n     * @param _debtCcy Currency name of the debt in bytes32\\n     * @param _debtMaturity Maturity of the debt\\n     * @param _user Address of the user\\n     * @param _uniswapRouter Address of the Uniswap router\\n     * @param _poolFee Pool fee\\n     */\\n    function executeLiquidationCall(\\n        bytes32 _collateralCcy,\\n        uint256[] calldata _collateralMaturities,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity,\\n        address _user,\\n        address _uniswapRouter,\\n        uint24 _poolFee\\n    ) external onlyOperator {\\n        collateralMaturities = _collateralMaturities;\\n        uniswapRouter = _uniswapRouter;\\n        poolFee = _poolFee;\\n        lendingMarketController.executeLiquidationCall(\\n            _collateralCcy,\\n            _debtCcy,\\n            _debtMaturity,\\n            _user\\n        );\\n    }\\n\\n    /**\\n     * @notice Executes the forced repayment.\\n     * @dev In this liquidation call, Uniswap V2 is used for swapping when poolFee is 0.\\n     * Otherwise, Uniswap V3 is used.\\n     *\\n     * @param _collateralCcy Currency name of the collateral in bytes32\\n     * @param _collateralMaturities Maturities of the collateral\\n     * @param _debtCcy Currency name of the debt in bytes32\\n     * @param _debtMaturity Maturity of the debt\\n     * @param _user Address of the user\\n     * @param _uniswapRouter Address of the Uniswap router\\n     * @param _poolFee Pool fee\\n     */\\n    function executeForcedRepayment(\\n        bytes32 _collateralCcy,\\n        uint256[] calldata _collateralMaturities,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity,\\n        address _user,\\n        address _uniswapRouter,\\n        uint24 _poolFee\\n    ) external onlyOperator {\\n        collateralMaturities = _collateralMaturities;\\n        uniswapRouter = _uniswapRouter;\\n        poolFee = _poolFee;\\n        lendingMarketController.executeForcedRepayment(\\n            _collateralCcy,\\n            _debtCcy,\\n            _debtMaturity,\\n            _user\\n        );\\n    }\\n\\n    /**\\n     * @notice Executes the operation for collateral as a callback from the lending market controller.\\n     * @param _liquidator Address of the liquidator\\n     * @param _user Address of the user\\n     * @param _collateralCcy Currency name of the collateral in bytes32\\n     * @param _receivedCollateralAmount Amount of the received collateral\\n     **/\\n    function executeOperationForCollateral(\\n        address _liquidator,\\n        address _user,\\n        bytes32 _collateralCcy,\\n        uint256 _receivedCollateralAmount\\n    ) external override onlyLendingMarketController returns (bool) {\\n        for (uint256 i; i < collateralMaturities.length; i++) {\\n            (, int256 fvAmount) = lendingMarketController.getPosition(\\n                _collateralCcy,\\n                collateralMaturities[i],\\n                address(this)\\n            );\\n\\n            if (fvAmount > 0) {\\n                lendingMarketController.unwindPosition(_collateralCcy, collateralMaturities[i]);\\n            }\\n        }\\n\\n        tokenVault.withdraw(_collateralCcy, _receivedCollateralAmount);\\n\\n        emit OperationExecuteForCollateral(\\n            _liquidator,\\n            _user,\\n            _collateralCcy,\\n            _receivedCollateralAmount\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Executes the operation for debt as a callback from the lending market controller.\\n     * @param _liquidator Address of the liquidator\\n     * @param _user Address of the user\\n     * @param _collateralCcy Currency name of the collateral in bytes32\\n     * @param _receivedCollateralAmount Amount of the received collateral\\n     * @param _debtCcy Currency name of the debt in bytes32\\n     * @param _debtMaturity Maturity of the debt\\n     * @param _receivedDebtAmount Amount of the received debt\\n     **/\\n    function executeOperationForDebt(\\n        address _liquidator,\\n        address _user,\\n        bytes32 _collateralCcy,\\n        uint256 _receivedCollateralAmount,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity,\\n        uint256 _receivedDebtAmount\\n    ) external override onlyLendingMarketController returns (bool) {\\n        address collateralCcyAddr = tokenVault.getTokenAddress(_collateralCcy);\\n        address debtCcyAddr = tokenVault.getTokenAddress(_debtCcy);\\n\\n        // Actual amount of collateral might be less than the received amount because\\n        // unwinding the position depends on market prices if ZC Bonds are used as collateral.\\n        // In this case, we need to check the actual balance of the collateral token to be used in the swap.\\n        uint256 collateralTokenBalance = collateralCcyAddr == nativeToken\\n            ? address(this).balance\\n            : IERC20(collateralCcyAddr).balanceOf(address(this));\\n        uint amountIn = _receivedCollateralAmount > collateralTokenBalance\\n            ? collateralTokenBalance\\n            : _receivedCollateralAmount;\\n\\n        if (collateralCcyAddr != debtCcyAddr && _receivedDebtAmount != 0 && amountIn != 0) {\\n            if (poolFee == 0) {\\n                _executeSwapWithV2(\\n                    collateralCcyAddr,\\n                    debtCcyAddr,\\n                    amountIn,\\n                    collateralCcyAddr == nativeToken,\\n                    debtCcyAddr == nativeToken\\n                );\\n            } else {\\n                _executeSwapWithV3(\\n                    collateralCcyAddr,\\n                    debtCcyAddr,\\n                    amountIn,\\n                    poolFee,\\n                    collateralCcyAddr == nativeToken\\n                );\\n            }\\n        }\\n\\n        uint256 debtTokenBalance;\\n\\n        if (debtCcyAddr == nativeToken) {\\n            debtTokenBalance = address(this).balance;\\n        } else {\\n            debtTokenBalance = IERC20(debtCcyAddr).balanceOf(address(this));\\n            TransferHelper.safeApprove(debtCcyAddr, address(tokenVault), debtTokenBalance);\\n        }\\n\\n        if (debtTokenBalance != 0) {\\n            tokenVault.deposit(_debtCcy, debtTokenBalance);\\n\\n            // If debt is expired, it is under the repayment phase. In this case, we don't need to unwind the position.\\n            // Instead, repayment will be executed on the protocol side using the liquidator's deposit.\\n            if (_debtMaturity >= block.timestamp) {\\n                lendingMarketController.unwindPosition(_debtCcy, _debtMaturity);\\n            }\\n        }\\n\\n        emit OperationExecuteForDebt(\\n            _liquidator,\\n            _user,\\n            _collateralCcy,\\n            _receivedCollateralAmount,\\n            _debtCcy,\\n            _debtMaturity,\\n            _receivedDebtAmount\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Deposits funds by the caller into the token vault.\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to deposit\\n     */\\n    function deposit(bytes32 _ccy, uint256 _amount) external payable onlyOwner {\\n        _deposit(tokenVault, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws funds by the caller from the token vault.\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to deposit\\n     */\\n    function withdraw(bytes32 _ccy, uint256 _amount) external onlyOwner {\\n        _withdraw(tokenVault, _ccy, _amount);\\n    }\\n\\n    function _executeSwapWithV3(\\n        address _collateralCcy,\\n        address _debtCcy,\\n        uint256 _amountIn,\\n        uint24 _poolFee,\\n        bool _isNativeCurrency\\n    ) internal {\\n        uint256 ethAmount;\\n        if (_isNativeCurrency) {\\n            ethAmount = _amountIn;\\n        } else {\\n            TransferHelper.safeApprove(_collateralCcy, uniswapRouter, _amountIn);\\n        }\\n\\n        ISwapRouterV3.ExactInputSingleParams memory params = ISwapRouterV3.ExactInputSingleParams({\\n            tokenIn: _collateralCcy,\\n            tokenOut: _debtCcy,\\n            fee: _poolFee,\\n            recipient: address(this),\\n            deadline: block.timestamp,\\n            amountIn: _amountIn,\\n            amountOutMinimum: 0,\\n            sqrtPriceLimitX96: 0\\n        });\\n\\n        ISwapRouterV3(uniswapRouter).exactInputSingle{value: ethAmount}(params);\\n    }\\n\\n    function _executeSwapWithV2(\\n        address _collateralCcy,\\n        address _debtCcy,\\n        uint256 _amountIn,\\n        bool _isCollateralInNativeCurrency,\\n        bool _isDebtInNativeCurrency\\n    ) internal {\\n        uint256 amountOutMinimum = 0;\\n        address[] memory path = new address[](2);\\n        path[0] = _collateralCcy;\\n        path[1] = _debtCcy;\\n\\n        if (_isCollateralInNativeCurrency) {\\n            ISwapRouterV2(uniswapRouter).swapExactETHForTokens{value: _amountIn}(\\n                amountOutMinimum,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        } else {\\n            TransferHelper.safeApprove(_collateralCcy, address(uniswapRouter), _amountIn);\\n\\n            if (_isDebtInNativeCurrency) {\\n                ISwapRouterV2(uniswapRouter).swapExactTokensForETH(\\n                    _amountIn,\\n                    amountOutMinimum,\\n                    path,\\n                    address(this),\\n                    block.timestamp\\n                );\\n            } else {\\n                ISwapRouterV2(uniswapRouter).swapExactTokensForTokens(\\n                    _amountIn,\\n                    amountOutMinimum,\\n                    path,\\n                    address(this),\\n                    block.timestamp\\n                );\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x966928cb084e574c08fc8c407091013f327b9aa059788efdff6738cd78283dc0\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {ZCTokenInfo, TerminationCurrencyCache} from \\\"../storages/LendingMarketControllerStorage.sol\\\";\\n\\ninterface ILendingMarketController {\\n    error InvalidMaturity();\\n    error InvalidCurrency();\\n    error MarketTerminated();\\n    error NotTerminated();\\n    error AlreadyInitialized();\\n\\n    struct AdditionalFunds {\\n        bytes32 ccy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 lentAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct CalculatedTotalFunds {\\n        uint256 plusDepositAmountInAdditionalFundsCcy;\\n        uint256 minusDepositAmountInAdditionalFundsCcy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 collateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct CalculatedFunds {\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 collateralAmount;\\n        uint256 unallocatedCollateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct GetOrderEstimationParams {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        address user;\\n        ProtocolTypes.Side side;\\n        uint256 amount;\\n        uint256 unitPrice;\\n        uint256 additionalDepositAmount;\\n        bool ignoreBorrowedAmount;\\n    }\\n\\n    function isValidMaturity(bytes32 _ccy, uint256 _maturity) external view returns (bool);\\n\\n    function isTerminated() external view returns (bool);\\n\\n    function isRedemptionRequired(address _user) external view returns (bool);\\n\\n    function getMarketBasePeriod() external view returns (uint256);\\n\\n    function getTerminationDate() external view returns (uint256);\\n\\n    function getTerminationCurrencyCache(\\n        bytes32 _ccy\\n    ) external view returns (TerminationCurrencyCache memory);\\n\\n    function getTerminationCollateralRatio(bytes32 _ccy) external view returns (uint256);\\n\\n    function getMinDebtUnitPrice(bytes32 _ccy) external view returns (uint256);\\n\\n    function getCurrentMinDebtUnitPrice(\\n        bytes32 _ccy,\\n        uint256 _maturity\\n    ) external view returns (uint256);\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarket(bytes32 ccy) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy) external view returns (address);\\n\\n    function getOrderBookId(bytes32 _ccy, uint256 _maturity) external view returns (uint8);\\n\\n    function getPendingOrderAmount(bytes32 _ccy, uint256 _maturity) external view returns (uint256);\\n\\n    function getOrderEstimation(\\n        GetOrderEstimationParams calldata params\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV,\\n            uint256 orderFeeInFV,\\n            uint256 placedAmount,\\n            uint256 coverage,\\n            bool isInsufficientDepositAmount\\n        );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getOrderBookIds(bytes32 ccy) external view returns (uint8[] memory);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInBaseCurrency(\\n        address user\\n    ) external view returns (int256 totalPresentValue);\\n\\n    function getGenesisValue(\\n        bytes32 ccy,\\n        address user\\n    ) external view returns (int256 amount, int256 amountInPV, int256 amountInFV);\\n\\n    function getPosition(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) external view returns (int256 presentValue, int256 futureValue);\\n\\n    function getZCToken(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getZCTokenInfo(address zcToken) external view returns (ZCTokenInfo memory);\\n\\n    function getWithdrawableZCTokenAmount(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        address user\\n    ) external view returns (uint256 amount);\\n\\n    function calculateFunds(\\n        bytes32 ccy,\\n        address user,\\n        uint256 liquidationThresholdRate\\n    ) external view returns (CalculatedFunds memory funds);\\n\\n    function calculateTotalFundsInBaseCurrency(\\n        address user,\\n        AdditionalFunds calldata _additionalFunds,\\n        uint256 liquidationThresholdRate\\n    ) external view returns (CalculatedTotalFunds memory calculatedFunds);\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor,\\n        uint256 orderFeeRate,\\n        uint256 circuitBreakerLimitRange,\\n        uint256 minDebtUnitPrice\\n    ) external;\\n\\n    function createOrderBook(bytes32 ccy, uint256 openingDate, uint256 preOpeningDate) external;\\n\\n    function executeOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecuteOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function depositWithPermitAndExecuteOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external returns (bool);\\n\\n    function executePreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecutesPreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function depositWithPermitAndExecutePreOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice,\\n        uint256 _deadline,\\n        uint8 _permitV,\\n        bytes32 _permitR,\\n        bytes32 _permitS\\n    ) external returns (bool);\\n\\n    function unwindPosition(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function executeItayoseCall(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function executeRedemption(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeRepayment(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeEmergencySettlement() external returns (bool);\\n\\n    function executeLiquidationCall(\\n        bytes32 collateralCcy,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        address user\\n    ) external returns (bool);\\n\\n    function executeForcedRepayment(\\n        bytes32 _collateralCcy,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity,\\n        address _user\\n    ) external returns (bool);\\n\\n    function cancelOrder(bytes32 ccy, uint256 maturity, uint48 orderId) external returns (bool);\\n\\n    function rotateOrderBooks(bytes32 ccy) external;\\n\\n    function executeEmergencyTermination() external;\\n\\n    function pauseLendingMarket(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarket(bytes32 ccy) external returns (bool);\\n\\n    function cleanUpAllFunds(address user) external returns (bool);\\n\\n    function cleanUpFunds(bytes32 ccy, address user) external returns (uint256 activeOrderCount);\\n\\n    function updateMinDebtUnitPrice(bytes32 _ccy, uint256 _minDebtUnitPrice) external;\\n\\n    function withdrawZCToken(bytes32 _ccy, uint256 _maturity, uint256 _amount) external;\\n\\n    function depositZCToken(bytes32 _ccy, uint256 _maturity, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x9463424c1df184681606f105eefb17eea71e17cecf0f93e3fd29fb91def06cd5\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/ILiquidationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface ILiquidationReceiver {\\n    error InvalidOperationExecution();\\n\\n    event OperationExecuteForCollateral(\\n        address liquidator,\\n        address user,\\n        bytes32 ccy,\\n        uint256 receivedAmount\\n    );\\n    event OperationExecuteForDebt(\\n        address liquidator,\\n        address user,\\n        bytes32 collateralCcy,\\n        uint256 receivedCollateralAmount,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        uint256 receivedDebtAmount\\n    );\\n\\n    function executeOperationForCollateral(\\n        address liquidator,\\n        address user,\\n        bytes32 ccy,\\n        uint256 receivedAmount\\n    ) external returns (bool);\\n\\n    function executeOperationForDebt(\\n        address liquidator,\\n        address user,\\n        bytes32 collateralCcy,\\n        uint256 receivedCollateralAmount,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        uint256 receivedDebtAmount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x182c08b2fa683f981fd1a5e77b720670d3c1766c24bac51bfee3c9d7e925603c\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/INativeToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface INativeToken is IERC20 {\\n    event Deposit(address user, uint256 amount);\\n    event Withdrawal(address user, uint256 amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x421a18a404723799ac6878c4f710de9e71b2f90877d027a18c8bc42950796b70\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\n\\ninterface ITokenVault {\\n    error UnregisteredCurrency();\\n    error InvalidCurrency();\\n    error InvalidToken();\\n    error InvalidAmount(bytes32 ccy, uint256 amount, uint256 msgValue);\\n    error AmountIsZero();\\n    error CallerNotBaseCurrency(address caller);\\n    error MarketTerminated();\\n    error RedemptionIsRequired();\\n\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount, address caller);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress, bool isCollateral);\\n    event CurrencyUpdated(bytes32 ccy, bool isCollateral);\\n\\n    function isCovered(\\n        address user,\\n        bytes32 ccy\\n    ) external view returns (bool isEnoughCollateral, bool isEnoughDepositInOrderCcy);\\n\\n    function isCollateral(bytes32 ccy) external view returns (bool);\\n\\n    function isCollateral(bytes32[] calldata ccys) external view returns (bool[] memory);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getTokenAddress(bytes32 ccy) external view returns (address);\\n\\n    function getCollateralCurrencies() external view returns (bytes32[] memory);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256);\\n\\n    function getWithdrawableCollateral(bytes32 ccy, address user) external view returns (uint256);\\n\\n    function getCoverage(address user) external view returns (uint256);\\n\\n    function getTotalUnusedCollateralAmount(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address user) external view returns (uint256);\\n\\n    function getCollateralDetail(\\n        address user\\n    )\\n        external\\n        view\\n        returns (uint256 totalCollateral, uint256 totalUsedCollateral, uint256 totalDeposit);\\n\\n    function getCollateralAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowableAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getLiquidationAmount(\\n        address user,\\n        bytes32 liquidationCcy,\\n        uint256 liquidationAmountMaximum\\n    ) external view returns (uint256 liquidationAmount, uint256 protocolFee, uint256 liquidatorFee);\\n\\n    function getTotalDepositAmount(bytes32 ccy) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function calculateCoverage(\\n        address user,\\n        ILendingMarketController.AdditionalFunds memory funds\\n    ) external view returns (uint256 coverage, bool isInsufficientDepositAmount);\\n\\n    function calculateLiquidationFees(\\n        uint256 liquidationAmount\\n    ) external view returns (uint256 protocolFee, uint256 liquidatorFee);\\n\\n    function registerCurrency(bytes32 ccy, address tokenAddress, bool isCollateral) external;\\n\\n    function updateCurrency(bytes32 ccy, bool isCollateral) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositTo(bytes32 ccy, uint256 amount, address onBehalfOf) external payable;\\n\\n    function depositFrom(address user, bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositWithPermitTo(\\n        bytes32 ccy,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    function depositWithPermitFrom(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addDepositAmount(address user, bytes32 ccy, uint256 amount) external;\\n\\n    function removeDepositAmount(address user, bytes32 ccy, uint256 amount) external;\\n\\n    function cleanUpUsedCurrencies(address user, bytes32 ccy) external;\\n\\n    function executeForcedReset(address user, bytes32 ccy) external returns (uint256 removedAmount);\\n\\n    function transferFrom(\\n        bytes32 ccy,\\n        address sender,\\n        address receiver,\\n        uint256 amount\\n    ) external returns (uint256 untransferredAmount);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function getLiquidationThresholdRate() external view returns (uint256 rate);\\n}\\n\",\"keccak256\":\"0x0d46845175ea03d23c7c2b614483e8c8d26f54f817666ee5e40136737dea490d\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {INativeToken} from \\\"../interfaces/INativeToken.sol\\\";\\nimport {TransferHelperStorage as Storage} from \\\"../storages/libraries/TransferHelperStorage.sol\\\";\\n\\nlibrary TransferHelper {\\n    function initialize(address _nativeToken) internal {\\n        require(Storage.slot().nativeToken == address(0), \\\"TransferHelper: Already initialized\\\");\\n        Storage.slot().nativeToken = _nativeToken;\\n    }\\n\\n    function nativeToken() internal view returns (address) {\\n        return Storage.slot().nativeToken;\\n    }\\n\\n    function isNative(address _token) internal view returns (bool) {\\n        return _token == Storage.slot().nativeToken;\\n    }\\n\\n    function depositAssets(\\n        address _token,\\n        address _payer,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == Storage.slot().nativeToken) {\\n            convertToWrappedToken(_receiver, _amount);\\n        } else {\\n            safeTransferFrom(_token, _payer, _receiver, _amount);\\n        }\\n    }\\n\\n    function withdrawAssets(address _token, address _receiver, uint256 _amount) internal {\\n        if (address(_token) == Storage.slot().nativeToken) {\\n            convertFromWrappedToken(_receiver, _amount);\\n        } else {\\n            safeTransfer(_token, _receiver, _amount);\\n        }\\n    }\\n\\n    function convertToWrappedToken(address _receiver, uint256 _amount) internal {\\n        require(address(this).balance >= _amount, \\\"TransferHelper: Insufficient balance\\\");\\n\\n        INativeToken(Storage.slot().nativeToken).deposit{value: _amount}();\\n        safeTransfer(Storage.slot().nativeToken, _receiver, _amount);\\n    }\\n\\n    function convertFromWrappedToken(address _receiver, uint256 _amount) internal {\\n        uint256 balance = INativeToken(Storage.slot().nativeToken).balanceOf(address(this));\\n        require(balance >= _amount, \\\"TransferHelper: Insufficient balance\\\");\\n\\n        if (balance > 0) {\\n            INativeToken(Storage.slot().nativeToken).withdraw(_amount);\\n            safeTransferETH(_receiver, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer helper from UniswapV2 Router\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    /**\\n     * There are many non-compliant ERC20 tokens... this can handle most, adapted from UniSwap V2\\n     * Im trying to make it a habit to put external calls last (reentrancy)\\n     * You can put this in an internal function if you like.\\n     */\\n    function safeTransfer(address token, address to, uint256 amount) internal {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // 0xa9059cbb = bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n            abi.encodeWithSelector(0xa9059cbb, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FAILED\\\"\\n        ); // ERC20 Transfer failed\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x97dfaed51a29cfeea6deb451a2f7d66adfa16ac2574c7fdafc79a3f002812cdd\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/mixins/MixinAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {AccessControl} from \\\"../utils/AccessControl.sol\\\";\\n\\n/**\\n * @notice Implements functions to add  role-based access control mechanisms.\\n */\\ncontract MixinAccessControl is AccessControl {\\n    error CallerNotOperator();\\n    error NotAllowedAccess(bytes32 role, address account);\\n\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    /**\\n     * @dev Throws if called by any account other than the admin.\\n     */\\n    modifier onlyOperator() {\\n        if (!hasRole(OPERATOR_ROLE, msg.sender)) revert CallerNotOperator();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the roles.\\n     * @param _admin The address of the admin role\\n     */\\n    function _setupInitialRoles(address _admin) internal {\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _grantRole(OPERATOR_ROLE, _admin);\\n    }\\n\\n    /**\\n     * @notice Adds a new admin as Operator\\n     * @param admin The address of the new admin\\n     */\\n    function addOperator(address admin) external {\\n        super.grantRole(OPERATOR_ROLE, admin);\\n    }\\n\\n    /**\\n     * @notice Removes an admin as Operator\\n     * @param admin The address of the admin to remove\\n     */\\n    function removeOperator(address admin) external {\\n        revokeRole(OPERATOR_ROLE, admin);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     * @param role The role to be revoked\\n     * @param account The address of the account to revoke the role from\\n     */\\n    function revokeRole(bytes32 role, address account) public override {\\n        if (account == msg.sender) revert NotAllowedAccess(role, account);\\n\\n        super.revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Revokes `role` from the calling account. This function is disabled by overriding it with a revert.\\n     * @param role The role to be revoked\\n     * @param account The address of the account to revoke the role from\\n     */\\n    function renounceRole(bytes32 role, address account) public pure override {\\n        revert NotAllowedAccess(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x3f53b204b9e2c8cb571fce0f537f8663a4952efbf19ce237a63d007acc6421ff\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/mixins/MixinWallet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// interfaces\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\n// libraries\\nimport {TransferHelper} from \\\"../libraries/TransferHelper.sol\\\";\\n// utils\\nimport {Ownable} from \\\"../utils/Ownable.sol\\\";\\n\\n/**\\n * @notice Implements functions to make a contract a wallet, i.e. withdraw and deposit funds.\\n *\\n * The _initialize function of this contract is expected to be called in an inheriting contract's intializer or constructor.\\n *\\n */\\nabstract contract MixinWallet is Ownable {\\n    error TransactionFailed(address target, uint256 values, bytes data);\\n    error InvalidInputs();\\n\\n    event TransactionExecuted(address from, address target, uint256 value, bytes data);\\n\\n    function _initialize(address _owner, address _nativeToken) internal {\\n        _transferOwnership(_owner);\\n        TransferHelper.initialize(_nativeToken);\\n    }\\n\\n    /**\\n     * @dev Executes an arbitrary transaction.\\n     * @param _target Address to be called\\n     * @param _data Encoded function data to be executed\\n     */\\n    function executeTransaction(address _target, bytes calldata _data) public payable onlyOwner {\\n        _executeTransaction(_target, msg.value, _data);\\n    }\\n\\n    /**\\n     * @dev Executes arbitrary transactions.\\n     * @param _targets Array of Addresses to be called\\n     * @param _values Array of values to be sent to _targets addresses\\n     * @param _data Encoded function data to be executed\\n     */\\n    function executeTransactions(\\n        address[] calldata _targets,\\n        uint256[] calldata _values,\\n        bytes[] calldata _data\\n    ) external onlyOwner {\\n        if (\\n            _targets.length == 0 ||\\n            _targets.length != _data.length ||\\n            _targets.length != _values.length\\n        ) {\\n            revert InvalidInputs();\\n        }\\n\\n        for (uint256 i; i < _targets.length; i++) {\\n            _executeTransaction(_targets[i], _values[i], _data[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Executes an arbitrary transaction.\\n     * Internal function without access restriction.\\n     * @param _target Address to be called\\n     * @param _value Value to be sent to _targets address\\n     * @param _data Encoded function data to be executed\\n     */\\n    function _executeTransaction(address _target, uint256 _value, bytes memory _data) internal {\\n        (bool success, ) = _target.call{value: _value}(_data);\\n        if (!success) revert TransactionFailed(_target, _value, _data);\\n\\n        emit TransactionExecuted(msg.sender, _target, _value, _data);\\n    }\\n\\n    /**\\n     * @dev Deposits funds by the caller into the token vault.\\n     * Internal function without access restriction.\\n     * @param _tokenVault TokenVault contract instance\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to deposit\\n     */\\n    function _deposit(ITokenVault _tokenVault, bytes32 _ccy, uint256 _amount) internal {\\n        address tokenAddress = _tokenVault.getTokenAddress(_ccy);\\n        if (!TransferHelper.isNative(tokenAddress)) {\\n            TransferHelper.safeTransferFrom(tokenAddress, msg.sender, address(this), _amount);\\n            TransferHelper.safeApprove(tokenAddress, address(_tokenVault), _amount);\\n        }\\n        _tokenVault.deposit{value: msg.value}(_ccy, _amount);\\n    }\\n\\n    /**\\n     * @dev Withdraws funds by the caller from the token vault.\\n     * Internal function without access restriction.\\n     * @param _tokenVault TokenVault contract instance\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to deposit\\n     */\\n    function _withdraw(ITokenVault _tokenVault, bytes32 _ccy, uint256 _amount) internal {\\n        _tokenVault.withdraw(_ccy, _amount);\\n\\n        address tokenAddress = _tokenVault.getTokenAddress(_ccy);\\n        if (TransferHelper.isNative(tokenAddress)) {\\n            TransferHelper.safeTransferETH(msg.sender, _amount);\\n        } else {\\n            TransferHelper.safeTransfer(tokenAddress, msg.sender, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ea6f9aacd16eb52b5b095d838ea5d2e8e8a3e38b29be33882a94cd794ad08c4\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/LendingMarketControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct ObservationPeriodLog {\\n    uint256 totalAmount;\\n    uint256 totalFutureValue;\\n}\\n\\nstruct TerminationCurrencyCache {\\n    int256 price;\\n    uint8 decimals;\\n}\\n\\nstruct ZCTokenInfo {\\n    bytes32 ccy;\\n    uint256 maturity;\\n}\\n\\nlibrary LendingMarketControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.lendingMarketController\\\")) - 1);\\n\\n    struct Storage {\\n        uint256 marketBasePeriod;\\n        uint256 terminationDate;\\n        mapping(bytes32 ccy => TerminationCurrencyCache currency) terminationCurrencyCaches;\\n        mapping(bytes32 ccy => uint256 ratio) terminationCollateralRatios;\\n        mapping(bytes32 ccy => uint8[] orderBookIds) orderBookIdLists;\\n        mapping(bytes32 ccy => address lendingMarket) lendingMarkets;\\n        mapping(bytes32 ccy => address futureValueVault) futureValueVaults;\\n        mapping(bytes32 ccy => uint256 unitPrice) minDebtUnitPrices;\\n        mapping(bytes32 ccy => uint256 genesisDate) genesisDates;\\n        mapping(bytes32 ccy => mapping(uint256 maturity => uint256 amount)) pendingOrderAmounts;\\n        // Order book id history to get order book id from maturity\\n        mapping(bytes32 ccy => mapping(uint256 maturity => uint8 orderBookIds)) maturityOrderBookIds;\\n        // List of maturity that the user has open orders or positions\\n        mapping(bytes32 ccy => mapping(address user => EnumerableSet.UintSet maturities)) usedMaturities;\\n        // Observation period logs that is used for auto-rolls\\n        mapping(bytes32 ccy => mapping(uint256 maturity => ObservationPeriodLog log)) observationPeriodLogs;\\n        // List of currency that the user has open orders or positions\\n        mapping(address user => EnumerableSet.Bytes32Set currency) usedCurrencies;\\n        mapping(address user => bool isRedeemed) isRedeemed;\\n        mapping(bytes32 ccy => mapping(uint256 maturity => address token)) zcTokens;\\n        mapping(address token => ZCTokenInfo) zcTokenInfo;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8811a19e2f51e3fc813292c1ff80d2f24e7951c3c377da84c5f005a8197b07f\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/libraries/TransferHelperStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary TransferHelperStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.transferHelper\\\")) - 1);\\n\\n    struct Storage {\\n        address nativeToken;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8b1860e468280ebdccca0a4276fd31b58e0a84addb320f5d62372d644173f72\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/utils/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nstruct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n}\\n\\nlibrary AccessControlStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.accessControl\\\")) - 1);\\n\\n    struct Storage {\\n        mapping(bytes32 role => RoleData roleData) roles;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x08de1e22d35fffead0a9c9cc6a1ef53441513d5ba080a5361dd48e5cc5d794c0\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/utils/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary OwnableStorage {\\n    bytes32 internal constant STORAGE_SLOT = bytes32(uint256(keccak256(\\\"sf.storage.ownable\\\")) - 1);\\n\\n    struct Storage {\\n        address owner;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98130c4c3d0014744b194e179bd65b8b7e73cac9cd33a470d194072e1a06b94e\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0x409169980b48b1bd32af609ac7b90f5c29e064cbec3d83d81767d72192ba07a2\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/utils/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../dependencies/openzeppelin/access/IAccessControl.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/Context.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/Strings.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/introspection/ERC165.sol\\\";\\nimport \\\"../storages/utils/AccessControlStorage.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return AccessControlStorage.slot().roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return AccessControlStorage.slot().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(\\n        bytes32 role,\\n        address account\\n    ) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(\\n        bytes32 role,\\n        address account\\n    ) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        AccessControlStorage.slot().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            AccessControlStorage.slot().roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            AccessControlStorage.slot().roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac33e516f59b08a69d11a73b73ce2dd13856dee8b9bf969069f513d072da130\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/Context.sol\\\";\\nimport \\\"../storages/utils/OwnableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return OwnableStorage.slot().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = OwnableStorage.slot().owner;\\n        OwnableStorage.slot().owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd735ea20ce4e86d574ab372eb79a46510c7be3b12b62f3948bb68dd2bea710ff\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200347f3803806200347f8339810160408190526200003491620004d9565b6001600160a01b0382811660a052811660c0819052604051630b12e44160e41b81526004810185905263b12e441090602401602060405180830381865afa15801562000084573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000aa91906200051a565b6001600160a01b0316608052620000c0620000c9565b50505062000561565b600054610100900460ff1615808015620000ea5750600054600160ff909116105b80620001065750303b15801562000106575060005460ff166001145b6200016f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000193576000805461ff0019166101001790555b6200019e33620001fc565b620001b2336080516200023560201b60201c565b8015620001f9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b620002096000826200024f565b620001f97f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929826200024f565b6200024082620002e6565b6200024b8162000357565b5050565b6200025b8282620003f4565b6200024b5760016200026c6200042c565b6000848152602091825260408082206001600160a01b038616835290925220805460ff1916911515919091179055620002a23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620002f26200045c565b546001600160a01b0316905081620003096200045c565b80546001600160a01b0319166001600160a01b03928316179055604051838216918316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000620003636200048c565b546001600160a01b031614620003c85760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a20416c726561647920696e697469616c696044820152621e995960ea1b606482015260840162000166565b80620003d36200048c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6000620004006200042c565b6000848152602091825260408082206001600160a01b0386168352909252205460ff1690505b92915050565b6000806200042660017f35e4a72724550e3953b041d501f29ff9ff417812c2917a203d9c4833b9d1d6f96200053f565b6000806200042660017f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa6200053f565b6000806200042660017f6f969d660e14559aec53d066903ba87981d0679d31bf1d3793a220e70e02808b6200053f565b80516001600160a01b0381168114620004d457600080fd5b919050565b600080600060608486031215620004ef57600080fd5b835192506200050160208501620004bc565b91506200051160408501620004bc565b90509250925092565b6000602082840312156200052d57600080fd5b6200053882620004bc565b9392505050565b818103818111156200042657634e487b7160e01b600052601160045260246000fd5b60805160a05160c051612e626200061d600039600081816103680152818161060d01528181610797015281816109e501528181610cbe01528181610d5501528181611046015261108e0152600081816104e1015281816107c201528181610839015281816108fe01528181610b9401528181610c3f01528181611116015261153701526000818161053501528181610dc601528181610ed001528181610f0501528181610f5c01528181610f9801526113b70152612e626000f3fe6080604052600436106101bb5760003560e01c8063715018a6116100ec578063a217fddf1161008a578063d547741f11610064578063d547741f14610503578063e1758bd814610523578063f2fde38b14610557578063f5b541a61461057757600080fd5b8063a217fddf1461049a578063ac8a584a146104af578063b0ab6f9b146104cf57600080fd5b80638da5cb5b116100c65780638da5cb5b1461042557806391d148541461043a5780639870d7fe1461045a5780639c0d7f451461047a57600080fd5b8063715018a6146103d5578063735de9f7146103ea5780638129fc1c1461041057600080fd5b80632f2ff15d1161015957806348e568d81161013357806348e568d8146103365780635bc789d9146103565780636ca0f814146103a2578063713a670c146103b557600080fd5b80632f2ff15d146102d65780633045d938146102f657806336568abe1461031657600080fd5b806312e8eaef1161019557806312e8eaef146102555780631de26e16146102755780631f47d9c214610288578063248a9ca3146102a857600080fd5b806301ffc9a7146101c7578063040cf020146101fc578063089fe6aa1461021e57600080fd5b366101c257005b600080fd5b3480156101d357600080fd5b506101e76101e2366004612616565b610599565b60405190151581526020015b60405180910390f35b34801561020857600080fd5b5061021c610217366004612640565b6105d0565b005b34801561022a57600080fd5b5060005461024190600160b01b900462ffffff1681565b60405162ffffff90911681526020016101f3565b34801561026157600080fd5b5061021c6102703660046126ae565b610637565b61021c610283366004612640565b610763565b34801561029457600080fd5b506101e76102a336600461275d565b6107bd565b3480156102b457600080fd5b506102c86102c33660046127a3565b610aa7565b6040519081526020016101f3565b3480156102e257600080fd5b5061021c6102f13660046127bc565b610ac5565b34801561030257600080fd5b5061021c6103113660046127ec565b610ae6565b34801561032257600080fd5b5061021c6103313660046127bc565b610c0f565b34801561034257600080fd5b506101e761035136600461288d565b610c3a565b34801561036257600080fd5b5061038a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101f3565b61021c6103b03660046128ef565b61121c565b3480156103c157600080fd5b506102c86103d03660046127a3565b61128c565b3480156103e157600080fd5b5061021c6112ad565b3480156103f657600080fd5b5060005461038a906201000090046001600160a01b031681565b34801561041c57600080fd5b5061021c6112e8565b34801561043157600080fd5b5061038a611424565b34801561044657600080fd5b506101e76104553660046127bc565b61143d565b34801561046657600080fd5b5061021c610475366004612974565b611471565b34801561048657600080fd5b5061021c6104953660046127ec565b611489565b3480156104a657600080fd5b506102c8600081565b3480156104bb57600080fd5b5061021c6104ca366004612974565b611568565b3480156104db57600080fd5b5061038a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561050f57600080fd5b5061021c61051e3660046127bc565b61157c565b34801561052f57600080fd5b5061038a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561056357600080fd5b5061021c610572366004612974565b6115c1565b34801561058357600080fd5b506102c8600080516020612e0d83398151915281565b60006001600160e01b03198216637965db0b60e01b14806105ca57506301ffc9a760e01b6001600160e01b03198316145b92915050565b336105d9611424565b6001600160a01b0316146106085760405162461bcd60e51b81526004016105ff90612991565b60405180910390fd5b6106337f0000000000000000000000000000000000000000000000000000000000000000838361165e565b5050565b33610640611424565b6001600160a01b0316146106665760405162461bcd60e51b81526004016105ff90612991565b8415806106735750848114155b8061067e5750848314155b1561069c576040516379a67d5b60e11b815260040160405180910390fd5b60005b8581101561075a576107488787838181106106bc576106bc6129c6565b90506020020160208101906106d19190612974565b8686848181106106e3576106e36129c6565b905060200201358585858181106106fc576106fc6129c6565b905060200281019061070e91906129dc565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061175a92505050565b8061075281612a39565b91505061069f565b50505050505050565b3361076c611424565b6001600160a01b0316146107925760405162461bcd60e51b81526004016105ff90612991565b6106337f00000000000000000000000000000000000000000000000000000000000000008383611822565b6000337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146108285760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21031b0b63632b960911b60448201526064016105ff565b60005b6001548110156109c85760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663062ea294866001858154811061087a5761087a6129c6565b6000918252602090912001546040516001600160e01b031960e085901b168152600481019290925260248201523060448201526064016040805180830381865afa1580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f09190612a52565b91505060008113156109b5577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166301cf2235866001858154811061093f5761093f6129c6565b90600052602060002001546040518363ffffffff1660e01b8152600401610970929190918252602082015260400190565b6020604051808303816000875af115801561098f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b39190612a76565b505b50806109c081612a39565b91505061082b565b506040516220678160e51b815260048101849052602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063040cf02090604401600060405180830381600087803b158015610a3157600080fd5b505af1158015610a45573d6000803e3d6000fd5b5050604080516001600160a01b03808a16825288166020820152908101869052606081018590527f920143480d6d619178c021ba207b55dd95f0516faec09146dac8ab44acdeaab39250608001905060405180910390a1506001949350505050565b6000610ab1611912565b600092835260205250604090206001015490565b610ace82610aa7565b610ad781611940565b610ae1838361194a565b505050565b610afe600080516020612e0d8339815191523361143d565b610b1b5760405163a5523ee560e01b815260040160405180910390fd5b610b27600188886125b6565b506000805462010000600160c81b031916620100006001600160a01b038581169190910262ffffff60b01b191691909117600160b01b62ffffff8516021790915560405163c11333b160e01b8152600481018a9052602481018790526044810186905284821660648201527f00000000000000000000000000000000000000000000000000000000000000009091169063c11333b1906084015b6020604051808303816000875af1158015610be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c049190612a76565b505050505050505050565b604051631eb5512b60e31b8152600481018390526001600160a01b03821660248201526044016105ff565b6000337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610ca55760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21031b0b63632b960911b60448201526064016105ff565b604051630b12e44160e41b8152600481018790526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b12e441090602401602060405180830381865afa158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d319190612a98565b604051630b12e44160e41b8152600481018790529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b12e441090602401602060405180830381865afa158015610d9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc09190612a98565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614610e6a576040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015610e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e659190612ab5565b610e6c565b475b90506000818911610e7d5788610e7f565b815b9050826001600160a01b0316846001600160a01b031614158015610ea257508515155b8015610ead57508015155b15610f945760008054600160b01b900462ffffff169003610f4257610f3d8484837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886001600160a01b0316147f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886001600160a01b0316146119c1565b610f94565b610f94848483600060169054906101000a900462ffffff167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316896001600160a01b031614611c14565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b031603610fd657504761106b565b6040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa15801561101a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103e9190612ab5565b905061106b847f000000000000000000000000000000000000000000000000000000000000000083611d3d565b801561118d57604051630ef1370b60e11b8152600481018a9052602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631de26e1690604401600060405180830381600087803b1580156110da57600080fd5b505af11580156110ee573d6000803e3d6000fd5b5050505042881061118d576040516301cf223560e01b8152600481018a9052602481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906301cf2235906044016020604051808303816000875af1158015611167573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118b9190612a76565b505b7feb1a490f30116662c782ae6a8256a6864e8697875d95dd18c9b4bfd068af34c18d8d8d8d8d8d8d60405161120197969594939291906001600160a01b03978816815295909616602086015260408501939093526060840191909152608083015260a082015260c081019190915260e00190565b60405180910390a15060019c9b505050505050505050505050565b33611225611424565b6001600160a01b03161461124b5760405162461bcd60e51b81526004016105ff90612991565b610ae1833484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061175a92505050565b6001818154811061129c57600080fd5b600091825260209091200154905081565b336112b6611424565b6001600160a01b0316146112dc5760405162461bcd60e51b81526004016105ff90612991565b6112e66000611e58565b565b600054610100900460ff16158080156113085750600054600160ff909116105b806113225750303b158015611322575060005460ff166001145b6113855760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105ff565b6000805460ff1916600117905580156113a8576000805461ff0019166101001790555b6113b133611ec5565b6113db337f0000000000000000000000000000000000000000000000000000000000000000611ee8565b8015611421576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b600061142e611efa565b546001600160a01b0316919050565b6000611447611912565b6000938452602090815260408085206001600160a01b039490941685529290525090205460ff1690565b611421600080516020612e0d83398151915282610ac5565b6114a1600080516020612e0d8339815191523361143d565b6114be5760405163a5523ee560e01b815260040160405180910390fd5b6114ca600188886125b6565b506000805462010000600160c81b031916620100006001600160a01b038581169190910262ffffff60b01b191691909117600160b01b62ffffff85160217909155604051638469973f60e01b8152600481018a9052602481018790526044810186905284821660648201527f000000000000000000000000000000000000000000000000000000000000000090911690638469973f90608401610bc1565b611421600080516020612e0d833981519152825b336001600160a01b038216036115b757604051631eb5512b60e31b8152600481018390526001600160a01b03821660248201526044016105ff565b6106338282611f28565b336115ca611424565b6001600160a01b0316146115f05760405162461bcd60e51b81526004016105ff90612991565b6001600160a01b0381166116555760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105ff565b61142181611e58565b6040516220678160e51b815260048101839052602481018290526001600160a01b0384169063040cf02090604401600060405180830381600087803b1580156116a657600080fd5b505af11580156116ba573d6000803e3d6000fd5b5050604051630b12e44160e41b815260048101859052600092506001600160a01b038616915063b12e441090602401602060405180830381865afa158015611706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172a9190612a98565b905061173581611f44565b15611749576117443383611f65565b611754565b61175481338461202e565b50505050565b6000836001600160a01b031683836040516117759190612af2565b60006040518083038185875af1925050503d80600081146117b2576040519150601f19603f3d011682016040523d82523d6000602084013e6117b7565b606091505b50509050806117df57838383604051634048f65560e11b81526004016105ff93929190612b3a565b7f9b9454e35c96c025dbfe5fc6ac29b7e4595138f5bd9b8a84c26ef3b16660e0a0338585856040516118149493929190612b6a565b60405180910390a150505050565b604051630b12e44160e41b8152600481018390526000906001600160a01b0385169063b12e441090602401602060405180830381865afa15801561186a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188e9190612a98565b905061189981611f44565b6118b4576118a981333085612142565b6118b4818584611d3d565b604051630ef1370b60e11b815260048101849052602481018390526001600160a01b03851690631de26e169034906044016000604051808303818588803b1580156118fe57600080fd5b505af1158015610c04573d6000803e3d6000fd5b6000806105ca60017f35e4a72724550e3953b041d501f29ff9ff417812c2917a203d9c4833b9d1d6f9612ba7565b6114218133612272565b611954828261143d565b610633576001611962611912565b6000848152602091825260408082206001600160a01b0386168084529352808220805460ff1916941515949094179093559151339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6040805160028082526060820183526000928392919060208301908036833701905050905086816000815181106119fa576119fa6129c6565b60200260200101906001600160a01b031690816001600160a01b0316815250508581600181518110611a2e57611a2e6129c6565b60200260200101906001600160a01b031690816001600160a01b0316815250508315611ade57600054604051637ff36ab560e01b8152620100009091046001600160a01b031690637ff36ab5908790611a91908690869030904290600401612c14565b60006040518083038185885af1158015611aaf573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052611ad89190810190612c49565b5061075a565b600054611afc9088906201000090046001600160a01b031687611d3d565b8215611b86576000546040516318cbafe560e01b8152620100009091046001600160a01b0316906318cbafe590611b3f9088908690869030904290600401612d07565b6000604051808303816000875af1158015611b5e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ad89190810190612c49565b6000546040516338ed173960e01b8152620100009091046001600160a01b0316906338ed173990611bc39088908690869030904290600401612d07565b6000604051808303816000875af1158015611be2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c0a9190810190612c49565b5050505050505050565b60008115611c23575082611c41565b600054611c419087906201000090046001600160a01b031686611d3d565b60408051610100810182526001600160a01b0388811682528781166020830190815262ffffff8781168486019081523060608601908152426080870190815260a087018c8152600060c0890181815260e08a0182815291549a5163414bf38960e01b81528a518a166004820152975189166024890152945190951660448701529151861660648601525160848501525160a48401525160c483015251821660e48201529192620100009004169063414bf3899084906101040160206040518083038185885af1158015611d18573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611c0a9190612ab5565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691611d999190612af2565b6000604051808303816000865af19150503d8060008114611dd6576040519150601f19603f3d011682016040523d82523d6000602084013e611ddb565b606091505b5091509150818015611e05575080511580611e05575080806020019051810190611e059190612a76565b611e515760405162461bcd60e51b815260206004820152601e60248201527f5472616e7366657248656c7065723a20415050524f56455f4641494c4544000060448201526064016105ff565b5050505050565b6000611e62611efa565b546001600160a01b0316905081611e77611efa565b80546001600160a01b0319166001600160a01b03928316179055604051838216918316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611ed060008261194a565b611421600080516020612e0d8339815191528261194a565b611ef182611e58565b610633816122d6565b6000806105ca60017f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa612ba7565b611f3182610aa7565b611f3a81611940565b610ae1838361236d565b6000611f4e6123e5565b546001600160a01b03928316921691909114919050565b604080516000808252602082019092526001600160a01b038416908390604051611f8f9190612af2565b60006040518083038185875af1925050503d8060008114611fcc576040519150601f19603f3d011682016040523d82523d6000602084013e611fd1565b606091505b5050905080610ae15760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b60648201526084016105ff565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161208a9190612af2565b6000604051808303816000865af19150503d80600081146120c7576040519150601f19603f3d011682016040523d82523d6000602084013e6120cc565b606091505b50915091508180156120f65750805115806120f65750808060200190518101906120f69190612a76565b611e515760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016105ff565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916121a69190612af2565b6000604051808303816000865af19150503d80600081146121e3576040519150601f19603f3d011682016040523d82523d6000602084013e6121e8565b606091505b50915091508180156122125750805115806122125750808060200190518101906122129190612a76565b61226a5760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416044820152631253115160e21b60648201526084016105ff565b505050505050565b61227c828261143d565b61063357612294816001600160a01b03166014612413565b61229f836020612413565b6040516020016122b0929190612d43565b60408051601f198184030181529082905262461bcd60e51b82526105ff91600401612db8565b60006122e06123e5565b546001600160a01b0316146123435760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a20416c726561647920696e697469616c696044820152621e995960ea1b60648201526084016105ff565b8061234c6123e5565b80546001600160a01b0319166001600160a01b039290921691909117905550565b612377828261143d565b15610633576000612386611912565b6000848152602091825260408082206001600160a01b0386168084529352808220805460ff1916941515949094179093559151339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000806105ca60017f6f969d660e14559aec53d066903ba87981d0679d31bf1d3793a220e70e02808b612ba7565b60606000612422836002612dcb565b61242d906002612de2565b67ffffffffffffffff81111561244557612445612bba565b6040519080825280601f01601f19166020018201604052801561246f576020820181803683370190505b509050600360fc1b8160008151811061248a5761248a6129c6565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106124b9576124b96129c6565b60200101906001600160f81b031916908160001a90535060006124dd846002612dcb565b6124e8906001612de2565b90505b6001811115612560576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061251c5761251c6129c6565b1a60f81b828281518110612532576125326129c6565b60200101906001600160f81b031916908160001a90535060049490941c9361255981612df5565b90506124eb565b5083156125af5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105ff565b9392505050565b8280548282559060005260206000209081019282156125f1579160200282015b828111156125f15782358255916020019190600101906125d6565b506125fd929150612601565b5090565b5b808211156125fd5760008155600101612602565b60006020828403121561262857600080fd5b81356001600160e01b0319811681146125af57600080fd5b6000806040838503121561265357600080fd5b50508035926020909101359150565b60008083601f84011261267457600080fd5b50813567ffffffffffffffff81111561268c57600080fd5b6020830191508360208260051b85010111156126a757600080fd5b9250929050565b600080600080600080606087890312156126c757600080fd5b863567ffffffffffffffff808211156126df57600080fd5b6126eb8a838b01612662565b9098509650602089013591508082111561270457600080fd5b6127108a838b01612662565b9096509450604089013591508082111561272957600080fd5b5061273689828a01612662565b979a9699509497509295939492505050565b6001600160a01b038116811461142157600080fd5b6000806000806080858703121561277357600080fd5b843561277e81612748565b9350602085013561278e81612748565b93969395505050506040820135916060013590565b6000602082840312156127b557600080fd5b5035919050565b600080604083850312156127cf57600080fd5b8235915060208301356127e181612748565b809150509250929050565b60008060008060008060008060e0898b03121561280857600080fd5b88359750602089013567ffffffffffffffff81111561282657600080fd5b6128328b828c01612662565b9098509650506040890135945060608901359350608089013561285481612748565b925060a089013561286481612748565b915060c089013562ffffff8116811461287c57600080fd5b809150509295985092959890939650565b600080600080600080600060e0888a0312156128a857600080fd5b87356128b381612748565b965060208801356128c381612748565b96999698505050506040850135946060810135946080820135945060a0820135935060c0909101359150565b60008060006040848603121561290457600080fd5b833561290f81612748565b9250602084013567ffffffffffffffff8082111561292c57600080fd5b818601915086601f83011261294057600080fd5b81358181111561294f57600080fd5b87602082850101111561296157600080fd5b6020830194508093505050509250925092565b60006020828403121561298657600080fd5b81356125af81612748565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126129f357600080fd5b83018035915067ffffffffffffffff821115612a0e57600080fd5b6020019150368190038213156126a757600080fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612a4b57612a4b612a23565b5060010190565b60008060408385031215612a6557600080fd5b505080516020909101519092909150565b600060208284031215612a8857600080fd5b815180151581146125af57600080fd5b600060208284031215612aaa57600080fd5b81516125af81612748565b600060208284031215612ac757600080fd5b5051919050565b60005b83811015612ae9578181015183820152602001612ad1565b50506000910152565b60008251612b04818460208701612ace565b9190910192915050565b60008151808452612b26816020860160208601612ace565b601f01601f19169290920160200192915050565b60018060a01b0384168152826020820152606060408201526000612b616060830184612b0e565b95945050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612b9d90830184612b0e565b9695505050505050565b818103818111156105ca576105ca612a23565b634e487b7160e01b600052604160045260246000fd5b600081518084526020808501945080840160005b83811015612c095781516001600160a01b031687529582019590820190600101612be4565b509495945050505050565b848152608060208201526000612c2d6080830186612bd0565b6001600160a01b03949094166040830152506060015292915050565b60006020808385031215612c5c57600080fd5b825167ffffffffffffffff80821115612c7457600080fd5b818501915085601f830112612c8857600080fd5b815181811115612c9a57612c9a612bba565b8060051b604051601f19603f83011681018181108582111715612cbf57612cbf612bba565b604052918252848201925083810185019188831115612cdd57600080fd5b938501935b82851015612cfb57845184529385019392850192612ce2565b98975050505050505050565b85815284602082015260a060408201526000612d2660a0830186612bd0565b6001600160a01b0394909416606083015250608001529392505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612d7b816017850160208801612ace565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612dac816028840160208801612ace565b01602801949350505050565b6020815260006125af6020830184612b0e565b80820281158282048414176105ca576105ca612a23565b808201808211156105ca576105ca612a23565b600081612e0457612e04612a23565b50600019019056fe97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929a26469706673582212200c5bfb0696e04a705f0de593c3873e6662bddd24776aa54f473c3e6d409a8d7e64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106101bb5760003560e01c8063715018a6116100ec578063a217fddf1161008a578063d547741f11610064578063d547741f14610503578063e1758bd814610523578063f2fde38b14610557578063f5b541a61461057757600080fd5b8063a217fddf1461049a578063ac8a584a146104af578063b0ab6f9b146104cf57600080fd5b80638da5cb5b116100c65780638da5cb5b1461042557806391d148541461043a5780639870d7fe1461045a5780639c0d7f451461047a57600080fd5b8063715018a6146103d5578063735de9f7146103ea5780638129fc1c1461041057600080fd5b80632f2ff15d1161015957806348e568d81161013357806348e568d8146103365780635bc789d9146103565780636ca0f814146103a2578063713a670c146103b557600080fd5b80632f2ff15d146102d65780633045d938146102f657806336568abe1461031657600080fd5b806312e8eaef1161019557806312e8eaef146102555780631de26e16146102755780631f47d9c214610288578063248a9ca3146102a857600080fd5b806301ffc9a7146101c7578063040cf020146101fc578063089fe6aa1461021e57600080fd5b366101c257005b600080fd5b3480156101d357600080fd5b506101e76101e2366004612616565b610599565b60405190151581526020015b60405180910390f35b34801561020857600080fd5b5061021c610217366004612640565b6105d0565b005b34801561022a57600080fd5b5060005461024190600160b01b900462ffffff1681565b60405162ffffff90911681526020016101f3565b34801561026157600080fd5b5061021c6102703660046126ae565b610637565b61021c610283366004612640565b610763565b34801561029457600080fd5b506101e76102a336600461275d565b6107bd565b3480156102b457600080fd5b506102c86102c33660046127a3565b610aa7565b6040519081526020016101f3565b3480156102e257600080fd5b5061021c6102f13660046127bc565b610ac5565b34801561030257600080fd5b5061021c6103113660046127ec565b610ae6565b34801561032257600080fd5b5061021c6103313660046127bc565b610c0f565b34801561034257600080fd5b506101e761035136600461288d565b610c3a565b34801561036257600080fd5b5061038a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101f3565b61021c6103b03660046128ef565b61121c565b3480156103c157600080fd5b506102c86103d03660046127a3565b61128c565b3480156103e157600080fd5b5061021c6112ad565b3480156103f657600080fd5b5060005461038a906201000090046001600160a01b031681565b34801561041c57600080fd5b5061021c6112e8565b34801561043157600080fd5b5061038a611424565b34801561044657600080fd5b506101e76104553660046127bc565b61143d565b34801561046657600080fd5b5061021c610475366004612974565b611471565b34801561048657600080fd5b5061021c6104953660046127ec565b611489565b3480156104a657600080fd5b506102c8600081565b3480156104bb57600080fd5b5061021c6104ca366004612974565b611568565b3480156104db57600080fd5b5061038a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561050f57600080fd5b5061021c61051e3660046127bc565b61157c565b34801561052f57600080fd5b5061038a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561056357600080fd5b5061021c610572366004612974565b6115c1565b34801561058357600080fd5b506102c8600080516020612e0d83398151915281565b60006001600160e01b03198216637965db0b60e01b14806105ca57506301ffc9a760e01b6001600160e01b03198316145b92915050565b336105d9611424565b6001600160a01b0316146106085760405162461bcd60e51b81526004016105ff90612991565b60405180910390fd5b6106337f0000000000000000000000000000000000000000000000000000000000000000838361165e565b5050565b33610640611424565b6001600160a01b0316146106665760405162461bcd60e51b81526004016105ff90612991565b8415806106735750848114155b8061067e5750848314155b1561069c576040516379a67d5b60e11b815260040160405180910390fd5b60005b8581101561075a576107488787838181106106bc576106bc6129c6565b90506020020160208101906106d19190612974565b8686848181106106e3576106e36129c6565b905060200201358585858181106106fc576106fc6129c6565b905060200281019061070e91906129dc565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061175a92505050565b8061075281612a39565b91505061069f565b50505050505050565b3361076c611424565b6001600160a01b0316146107925760405162461bcd60e51b81526004016105ff90612991565b6106337f00000000000000000000000000000000000000000000000000000000000000008383611822565b6000337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146108285760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21031b0b63632b960911b60448201526064016105ff565b60005b6001548110156109c85760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663062ea294866001858154811061087a5761087a6129c6565b6000918252602090912001546040516001600160e01b031960e085901b168152600481019290925260248201523060448201526064016040805180830381865afa1580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f09190612a52565b91505060008113156109b5577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166301cf2235866001858154811061093f5761093f6129c6565b90600052602060002001546040518363ffffffff1660e01b8152600401610970929190918252602082015260400190565b6020604051808303816000875af115801561098f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b39190612a76565b505b50806109c081612a39565b91505061082b565b506040516220678160e51b815260048101849052602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063040cf02090604401600060405180830381600087803b158015610a3157600080fd5b505af1158015610a45573d6000803e3d6000fd5b5050604080516001600160a01b03808a16825288166020820152908101869052606081018590527f920143480d6d619178c021ba207b55dd95f0516faec09146dac8ab44acdeaab39250608001905060405180910390a1506001949350505050565b6000610ab1611912565b600092835260205250604090206001015490565b610ace82610aa7565b610ad781611940565b610ae1838361194a565b505050565b610afe600080516020612e0d8339815191523361143d565b610b1b5760405163a5523ee560e01b815260040160405180910390fd5b610b27600188886125b6565b506000805462010000600160c81b031916620100006001600160a01b038581169190910262ffffff60b01b191691909117600160b01b62ffffff8516021790915560405163c11333b160e01b8152600481018a9052602481018790526044810186905284821660648201527f00000000000000000000000000000000000000000000000000000000000000009091169063c11333b1906084015b6020604051808303816000875af1158015610be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c049190612a76565b505050505050505050565b604051631eb5512b60e31b8152600481018390526001600160a01b03821660248201526044016105ff565b6000337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610ca55760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21031b0b63632b960911b60448201526064016105ff565b604051630b12e44160e41b8152600481018790526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b12e441090602401602060405180830381865afa158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d319190612a98565b604051630b12e44160e41b8152600481018790529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b12e441090602401602060405180830381865afa158015610d9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc09190612a98565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614610e6a576040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015610e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e659190612ab5565b610e6c565b475b90506000818911610e7d5788610e7f565b815b9050826001600160a01b0316846001600160a01b031614158015610ea257508515155b8015610ead57508015155b15610f945760008054600160b01b900462ffffff169003610f4257610f3d8484837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886001600160a01b0316147f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886001600160a01b0316146119c1565b610f94565b610f94848483600060169054906101000a900462ffffff167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316896001600160a01b031614611c14565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b031603610fd657504761106b565b6040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa15801561101a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103e9190612ab5565b905061106b847f000000000000000000000000000000000000000000000000000000000000000083611d3d565b801561118d57604051630ef1370b60e11b8152600481018a9052602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631de26e1690604401600060405180830381600087803b1580156110da57600080fd5b505af11580156110ee573d6000803e3d6000fd5b5050505042881061118d576040516301cf223560e01b8152600481018a9052602481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906301cf2235906044016020604051808303816000875af1158015611167573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118b9190612a76565b505b7feb1a490f30116662c782ae6a8256a6864e8697875d95dd18c9b4bfd068af34c18d8d8d8d8d8d8d60405161120197969594939291906001600160a01b03978816815295909616602086015260408501939093526060840191909152608083015260a082015260c081019190915260e00190565b60405180910390a15060019c9b505050505050505050505050565b33611225611424565b6001600160a01b03161461124b5760405162461bcd60e51b81526004016105ff90612991565b610ae1833484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061175a92505050565b6001818154811061129c57600080fd5b600091825260209091200154905081565b336112b6611424565b6001600160a01b0316146112dc5760405162461bcd60e51b81526004016105ff90612991565b6112e66000611e58565b565b600054610100900460ff16158080156113085750600054600160ff909116105b806113225750303b158015611322575060005460ff166001145b6113855760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105ff565b6000805460ff1916600117905580156113a8576000805461ff0019166101001790555b6113b133611ec5565b6113db337f0000000000000000000000000000000000000000000000000000000000000000611ee8565b8015611421576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b600061142e611efa565b546001600160a01b0316919050565b6000611447611912565b6000938452602090815260408085206001600160a01b039490941685529290525090205460ff1690565b611421600080516020612e0d83398151915282610ac5565b6114a1600080516020612e0d8339815191523361143d565b6114be5760405163a5523ee560e01b815260040160405180910390fd5b6114ca600188886125b6565b506000805462010000600160c81b031916620100006001600160a01b038581169190910262ffffff60b01b191691909117600160b01b62ffffff85160217909155604051638469973f60e01b8152600481018a9052602481018790526044810186905284821660648201527f000000000000000000000000000000000000000000000000000000000000000090911690638469973f90608401610bc1565b611421600080516020612e0d833981519152825b336001600160a01b038216036115b757604051631eb5512b60e31b8152600481018390526001600160a01b03821660248201526044016105ff565b6106338282611f28565b336115ca611424565b6001600160a01b0316146115f05760405162461bcd60e51b81526004016105ff90612991565b6001600160a01b0381166116555760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105ff565b61142181611e58565b6040516220678160e51b815260048101839052602481018290526001600160a01b0384169063040cf02090604401600060405180830381600087803b1580156116a657600080fd5b505af11580156116ba573d6000803e3d6000fd5b5050604051630b12e44160e41b815260048101859052600092506001600160a01b038616915063b12e441090602401602060405180830381865afa158015611706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172a9190612a98565b905061173581611f44565b15611749576117443383611f65565b611754565b61175481338461202e565b50505050565b6000836001600160a01b031683836040516117759190612af2565b60006040518083038185875af1925050503d80600081146117b2576040519150601f19603f3d011682016040523d82523d6000602084013e6117b7565b606091505b50509050806117df57838383604051634048f65560e11b81526004016105ff93929190612b3a565b7f9b9454e35c96c025dbfe5fc6ac29b7e4595138f5bd9b8a84c26ef3b16660e0a0338585856040516118149493929190612b6a565b60405180910390a150505050565b604051630b12e44160e41b8152600481018390526000906001600160a01b0385169063b12e441090602401602060405180830381865afa15801561186a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188e9190612a98565b905061189981611f44565b6118b4576118a981333085612142565b6118b4818584611d3d565b604051630ef1370b60e11b815260048101849052602481018390526001600160a01b03851690631de26e169034906044016000604051808303818588803b1580156118fe57600080fd5b505af1158015610c04573d6000803e3d6000fd5b6000806105ca60017f35e4a72724550e3953b041d501f29ff9ff417812c2917a203d9c4833b9d1d6f9612ba7565b6114218133612272565b611954828261143d565b610633576001611962611912565b6000848152602091825260408082206001600160a01b0386168084529352808220805460ff1916941515949094179093559151339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6040805160028082526060820183526000928392919060208301908036833701905050905086816000815181106119fa576119fa6129c6565b60200260200101906001600160a01b031690816001600160a01b0316815250508581600181518110611a2e57611a2e6129c6565b60200260200101906001600160a01b031690816001600160a01b0316815250508315611ade57600054604051637ff36ab560e01b8152620100009091046001600160a01b031690637ff36ab5908790611a91908690869030904290600401612c14565b60006040518083038185885af1158015611aaf573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052611ad89190810190612c49565b5061075a565b600054611afc9088906201000090046001600160a01b031687611d3d565b8215611b86576000546040516318cbafe560e01b8152620100009091046001600160a01b0316906318cbafe590611b3f9088908690869030904290600401612d07565b6000604051808303816000875af1158015611b5e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ad89190810190612c49565b6000546040516338ed173960e01b8152620100009091046001600160a01b0316906338ed173990611bc39088908690869030904290600401612d07565b6000604051808303816000875af1158015611be2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c0a9190810190612c49565b5050505050505050565b60008115611c23575082611c41565b600054611c419087906201000090046001600160a01b031686611d3d565b60408051610100810182526001600160a01b0388811682528781166020830190815262ffffff8781168486019081523060608601908152426080870190815260a087018c8152600060c0890181815260e08a0182815291549a5163414bf38960e01b81528a518a166004820152975189166024890152945190951660448701529151861660648601525160848501525160a48401525160c483015251821660e48201529192620100009004169063414bf3899084906101040160206040518083038185885af1158015611d18573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611c0a9190612ab5565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691611d999190612af2565b6000604051808303816000865af19150503d8060008114611dd6576040519150601f19603f3d011682016040523d82523d6000602084013e611ddb565b606091505b5091509150818015611e05575080511580611e05575080806020019051810190611e059190612a76565b611e515760405162461bcd60e51b815260206004820152601e60248201527f5472616e7366657248656c7065723a20415050524f56455f4641494c4544000060448201526064016105ff565b5050505050565b6000611e62611efa565b546001600160a01b0316905081611e77611efa565b80546001600160a01b0319166001600160a01b03928316179055604051838216918316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611ed060008261194a565b611421600080516020612e0d8339815191528261194a565b611ef182611e58565b610633816122d6565b6000806105ca60017f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa612ba7565b611f3182610aa7565b611f3a81611940565b610ae1838361236d565b6000611f4e6123e5565b546001600160a01b03928316921691909114919050565b604080516000808252602082019092526001600160a01b038416908390604051611f8f9190612af2565b60006040518083038185875af1925050503d8060008114611fcc576040519150601f19603f3d011682016040523d82523d6000602084013e611fd1565b606091505b5050905080610ae15760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b60648201526084016105ff565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161208a9190612af2565b6000604051808303816000865af19150503d80600081146120c7576040519150601f19603f3d011682016040523d82523d6000602084013e6120cc565b606091505b50915091508180156120f65750805115806120f65750808060200190518101906120f69190612a76565b611e515760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016105ff565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916121a69190612af2565b6000604051808303816000865af19150503d80600081146121e3576040519150601f19603f3d011682016040523d82523d6000602084013e6121e8565b606091505b50915091508180156122125750805115806122125750808060200190518101906122129190612a76565b61226a5760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416044820152631253115160e21b60648201526084016105ff565b505050505050565b61227c828261143d565b61063357612294816001600160a01b03166014612413565b61229f836020612413565b6040516020016122b0929190612d43565b60408051601f198184030181529082905262461bcd60e51b82526105ff91600401612db8565b60006122e06123e5565b546001600160a01b0316146123435760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a20416c726561647920696e697469616c696044820152621e995960ea1b60648201526084016105ff565b8061234c6123e5565b80546001600160a01b0319166001600160a01b039290921691909117905550565b612377828261143d565b15610633576000612386611912565b6000848152602091825260408082206001600160a01b0386168084529352808220805460ff1916941515949094179093559151339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000806105ca60017f6f969d660e14559aec53d066903ba87981d0679d31bf1d3793a220e70e02808b612ba7565b60606000612422836002612dcb565b61242d906002612de2565b67ffffffffffffffff81111561244557612445612bba565b6040519080825280601f01601f19166020018201604052801561246f576020820181803683370190505b509050600360fc1b8160008151811061248a5761248a6129c6565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106124b9576124b96129c6565b60200101906001600160f81b031916908160001a90535060006124dd846002612dcb565b6124e8906001612de2565b90505b6001811115612560576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061251c5761251c6129c6565b1a60f81b828281518110612532576125326129c6565b60200101906001600160f81b031916908160001a90535060049490941c9361255981612df5565b90506124eb565b5083156125af5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105ff565b9392505050565b8280548282559060005260206000209081019282156125f1579160200282015b828111156125f15782358255916020019190600101906125d6565b506125fd929150612601565b5090565b5b808211156125fd5760008155600101612602565b60006020828403121561262857600080fd5b81356001600160e01b0319811681146125af57600080fd5b6000806040838503121561265357600080fd5b50508035926020909101359150565b60008083601f84011261267457600080fd5b50813567ffffffffffffffff81111561268c57600080fd5b6020830191508360208260051b85010111156126a757600080fd5b9250929050565b600080600080600080606087890312156126c757600080fd5b863567ffffffffffffffff808211156126df57600080fd5b6126eb8a838b01612662565b9098509650602089013591508082111561270457600080fd5b6127108a838b01612662565b9096509450604089013591508082111561272957600080fd5b5061273689828a01612662565b979a9699509497509295939492505050565b6001600160a01b038116811461142157600080fd5b6000806000806080858703121561277357600080fd5b843561277e81612748565b9350602085013561278e81612748565b93969395505050506040820135916060013590565b6000602082840312156127b557600080fd5b5035919050565b600080604083850312156127cf57600080fd5b8235915060208301356127e181612748565b809150509250929050565b60008060008060008060008060e0898b03121561280857600080fd5b88359750602089013567ffffffffffffffff81111561282657600080fd5b6128328b828c01612662565b9098509650506040890135945060608901359350608089013561285481612748565b925060a089013561286481612748565b915060c089013562ffffff8116811461287c57600080fd5b809150509295985092959890939650565b600080600080600080600060e0888a0312156128a857600080fd5b87356128b381612748565b965060208801356128c381612748565b96999698505050506040850135946060810135946080820135945060a0820135935060c0909101359150565b60008060006040848603121561290457600080fd5b833561290f81612748565b9250602084013567ffffffffffffffff8082111561292c57600080fd5b818601915086601f83011261294057600080fd5b81358181111561294f57600080fd5b87602082850101111561296157600080fd5b6020830194508093505050509250925092565b60006020828403121561298657600080fd5b81356125af81612748565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126129f357600080fd5b83018035915067ffffffffffffffff821115612a0e57600080fd5b6020019150368190038213156126a757600080fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612a4b57612a4b612a23565b5060010190565b60008060408385031215612a6557600080fd5b505080516020909101519092909150565b600060208284031215612a8857600080fd5b815180151581146125af57600080fd5b600060208284031215612aaa57600080fd5b81516125af81612748565b600060208284031215612ac757600080fd5b5051919050565b60005b83811015612ae9578181015183820152602001612ad1565b50506000910152565b60008251612b04818460208701612ace565b9190910192915050565b60008151808452612b26816020860160208601612ace565b601f01601f19169290920160200192915050565b60018060a01b0384168152826020820152606060408201526000612b616060830184612b0e565b95945050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612b9d90830184612b0e565b9695505050505050565b818103818111156105ca576105ca612a23565b634e487b7160e01b600052604160045260246000fd5b600081518084526020808501945080840160005b83811015612c095781516001600160a01b031687529582019590820190600101612be4565b509495945050505050565b848152608060208201526000612c2d6080830186612bd0565b6001600160a01b03949094166040830152506060015292915050565b60006020808385031215612c5c57600080fd5b825167ffffffffffffffff80821115612c7457600080fd5b818501915085601f830112612c8857600080fd5b815181811115612c9a57612c9a612bba565b8060051b604051601f19603f83011681018181108582111715612cbf57612cbf612bba565b604052918252848201925083810185019188831115612cdd57600080fd5b938501935b82851015612cfb57845184529385019392850192612ce2565b98975050505050505050565b85815284602082015260a060408201526000612d2660a0830186612bd0565b6001600160a01b0394909416606083015250608001529392505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612d7b816017850160208801612ace565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612dac816028840160208801612ace565b01602801949350505050565b6020815260006125af6020830184612b0e565b80820281158282048414176105ca576105ca612a23565b808201808211156105ca576105ca612a23565b600081612e0457612e04612a23565b50600019019056fe97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929a26469706673582212200c5bfb0696e04a705f0de593c3873e6662bddd24776aa54f473c3e6d409a8d7e64736f6c63430008130033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addOperator(address)": {
        "params": {
          "admin": "The address of the new admin"
        }
      },
      "deposit(bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32"
        }
      },
      "executeForcedRepayment(bytes32,uint256[],bytes32,uint256,address,address,uint24)": {
        "details": "In this liquidation call, Uniswap V2 is used for swapping when poolFee is 0. Otherwise, Uniswap V3 is used.",
        "params": {
          "_collateralCcy": "Currency name of the collateral in bytes32",
          "_collateralMaturities": "Maturities of the collateral",
          "_debtCcy": "Currency name of the debt in bytes32",
          "_debtMaturity": "Maturity of the debt",
          "_poolFee": "Pool fee",
          "_uniswapRouter": "Address of the Uniswap router",
          "_user": "Address of the user"
        }
      },
      "executeLiquidationCall(bytes32,uint256[],bytes32,uint256,address,address,uint24)": {
        "details": "In this liquidation call, Uniswap V2 is used for swapping when poolFee is 0. Otherwise, Uniswap V3 is used.",
        "params": {
          "_collateralCcy": "Currency name of the collateral in bytes32",
          "_collateralMaturities": "Maturities of the collateral",
          "_debtCcy": "Currency name of the debt in bytes32",
          "_debtMaturity": "Maturity of the debt",
          "_poolFee": "Pool fee",
          "_uniswapRouter": "Address of the Uniswap router",
          "_user": "Address of the user"
        }
      },
      "executeOperationForCollateral(address,address,bytes32,uint256)": {
        "params": {
          "_collateralCcy": "Currency name of the collateral in bytes32",
          "_liquidator": "Address of the liquidator",
          "_receivedCollateralAmount": "Amount of the received collateral*",
          "_user": "Address of the user"
        }
      },
      "executeOperationForDebt(address,address,bytes32,uint256,bytes32,uint256,uint256)": {
        "params": {
          "_collateralCcy": "Currency name of the collateral in bytes32",
          "_debtCcy": "Currency name of the debt in bytes32",
          "_debtMaturity": "Maturity of the debt",
          "_liquidator": "Address of the liquidator",
          "_receivedCollateralAmount": "Amount of the received collateral",
          "_receivedDebtAmount": "Amount of the received debt*",
          "_user": "Address of the user"
        }
      },
      "executeTransaction(address,bytes)": {
        "details": "Executes an arbitrary transaction.",
        "params": {
          "_data": "Encoded function data to be executed",
          "_target": "Address to be called"
        }
      },
      "executeTransactions(address[],uint256[],bytes[])": {
        "details": "Executes arbitrary transactions.",
        "params": {
          "_data": "Encoded function data to be executed",
          "_targets": "Array of Addresses to be called",
          "_values": "Array of values to be sent to _targets addresses"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeOperator(address)": {
        "params": {
          "admin": "The address of the admin to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "params": {
          "account": "The address of the account to revoke the role from",
          "role": "The role to be revoked"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`.",
        "params": {
          "account": "The address of the account to revoke the role from",
          "role": "The role to be revoked"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addOperator(address)": {
        "notice": "Adds a new admin as Operator"
      },
      "deposit(bytes32,uint256)": {
        "notice": "Deposits funds by the caller into the token vault."
      },
      "executeForcedRepayment(bytes32,uint256[],bytes32,uint256,address,address,uint24)": {
        "notice": "Executes the forced repayment."
      },
      "executeLiquidationCall(bytes32,uint256[],bytes32,uint256,address,address,uint24)": {
        "notice": "Executes the liquidation call."
      },
      "executeOperationForCollateral(address,address,bytes32,uint256)": {
        "notice": "Executes the operation for collateral as a callback from the lending market controller."
      },
      "executeOperationForDebt(address,address,bytes32,uint256,bytes32,uint256,uint256)": {
        "notice": "Executes the operation for debt as a callback from the lending market controller."
      },
      "removeOperator(address)": {
        "notice": "Removes an admin as Operator"
      },
      "renounceRole(bytes32,address)": {
        "notice": "Revokes `role` from the calling account. This function is disabled by overriding it with a revert."
      },
      "withdraw(bytes32,uint256)": {
        "notice": "Withdraws funds by the caller from the token vault."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1618,
        "contract": "contracts/external/liquidation/Liquidator.sol:Liquidator",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1621,
        "contract": "contracts/external/liquidation/Liquidator.sol:Liquidator",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7787,
        "contract": "contracts/external/liquidation/Liquidator.sol:Liquidator",
        "label": "uniswapRouter",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7789,
        "contract": "contracts/external/liquidation/Liquidator.sol:Liquidator",
        "label": "poolFee",
        "offset": 22,
        "slot": "0",
        "type": "t_uint24"
      },
      {
        "astId": 7792,
        "contract": "contracts/external/liquidation/Liquidator.sol:Liquidator",
        "label": "collateralMaturities",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}