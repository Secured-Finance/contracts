{
  "address": "0x62E09A147445AF26EDB7a67F51AE11E09eD37407",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralAggregator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currencyController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH9",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidateIndependent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PositionDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PositionWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromCounterparty",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toCounterparty",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RebalanceBetween",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RebalanceFrom",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RebalanceTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH9",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ccy",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralAggregator",
      "outputs": [
        {
          "internalType": "contract ICollateralAggregator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currencyController",
      "outputs": [
        {
          "internalType": "contract ICurrencyController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_counterparty",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getIndependentCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getIndependentCollateralInETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_partyA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_partyB",
          "type": "address"
        }
      ],
      "name": "getLockedCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLockedCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_partyA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_partyB",
          "type": "address"
        }
      ],
      "name": "getLockedCollateralInETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLockedCollateralInETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountETH",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidationLeftETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fromParty",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toParty",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountETH",
          "type": "uint256"
        }
      ],
      "name": "rebalanceBetween",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_counterparty",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountETH",
          "type": "uint256"
        }
      ],
      "name": "rebalanceFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_counterparty",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountETH",
          "type": "uint256"
        }
      ],
      "name": "rebalanceTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_counterparty",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9f8677bddbe372eca22e6e596832b401775820e6a19330a6c1dad7e4a7ba9769",
  "receipt": {
    "to": null,
    "from": "0x57AB42d4fa756b6956b0cAf986a5f53bA90D9e28",
    "contractAddress": "0x62E09A147445AF26EDB7a67F51AE11E09eD37407",
    "transactionIndex": 1,
    "gasUsed": "2624828",
    "logsBloom": "0x
    "blockHash": "0xb9bba92b0cc24037eacfb388dcfc54528590aec175f9d00d8897c943836d486a",
    "transactionHash": "0x9f8677bddbe372eca22e6e596832b401775820e6a19330a6c1dad7e4a7ba9769",
    "logs": [],
    "blockNumber": 12164682,
    "cumulativeGasUsed": "2676600",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4554480000000000000000000000000000000000000000000000000000000000",
    "0x088E36970FC2222b244c0480671171e7E7C3a9eA",
    "0x74B405Ec5dC45e5c7ea9d581D4A3907e60B724d4",
    "0x8682Fa83785B7F51A14101122CCb1DCb4A247B80",
    "0x088E36970FC2222b244c0480671171e7E7C3a9eA"
  ],
  "numDeployments": 1,
  "solcInputHash": "48d264388c4204a72ee447cb1af8bee3",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currencyController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH9\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidateIndependent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PositionDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PositionWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromCounterparty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toCounterparty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RebalanceBetween\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RebalanceFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RebalanceTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ccy\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralAggregator\",\"outputs\":[{\"internalType\":\"contract ICollateralAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyController\",\"outputs\":[{\"internalType\":\"contract ICurrencyController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_counterparty\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getIndependentCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getIndependentCollateralInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partyA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_partyB\",\"type\":\"address\"}],\"name\":\"getLockedCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLockedCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partyA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_partyB\",\"type\":\"address\"}],\"name\":\"getLockedCollateralInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLockedCollateralInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountETH\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationLeftETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fromParty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toParty\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountETH\",\"type\":\"uint256\"}],\"name\":\"rebalanceBetween\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_counterparty\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountETH\",\"type\":\"uint256\"}],\"name\":\"rebalanceFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_counterparty\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountETH\",\"type\":\"uint256\"}],\"name\":\"rebalanceTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_counterparty\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Contract constructor function.\"},\"deposit(address,uint256)\":{\"details\":\"Deposit collateral funds into bilateral position against counterparty\",\"params\":{\"_counterparty\":\"Counterparty address in bilateral position\"}},\"deposit(uint256)\":{\"details\":\"Trigers to deposit funds by the msg.sender into collateral book\",\"params\":{\"_amount\":\"Number of funds to deposit\"}},\"getIndependentCollateral(address)\":{\"params\":{\"_user\":\"Address of collateral user\"}},\"getIndependentCollateralInETH(address)\":{\"params\":{\"_user\":\"Address of collateral user\"}},\"getLockedCollateral(address)\":{\"params\":{\"_user\":\"Address of collateral user\"}},\"getLockedCollateral(address,address)\":{\"params\":{\"_partyA\":\"First counterparty address\",\"_partyB\":\"Second counterparty address.\"}},\"getLockedCollateralInETH(address)\":{\"params\":{\"_user\":\"Address of collateral user\"}},\"getLockedCollateralInETH(address,address)\":{\"params\":{\"_partyA\":\"First counterparty address\",\"_partyB\":\"Second counterparty address.\"}},\"liquidate(address,address,uint256)\":{\"details\":\"Liquidates collateral from bilateral position between parties returns the amount of ETH to be liquidated in other vault if all available funds have been liquidated here\",\"params\":{\"_amountETH\":\"Liquidation amount in ETH\",\"_from\":\"Address for liquidating collateral from\",\"_to\":\"Address for sending collateral to\"}},\"rebalanceBetween(address,address,address,uint256)\":{\"details\":\"Rebalances collateral between 2 different bilateral positions, as it's executed by collateral aggregator function returns the amount of ETH left to rebalance for other collateral vaults\",\"params\":{\"_amountETH\":\"Amount of funds in ETH required to rebalance\",\"_fromParty\":\"Counterparty address to rebalance from\",\"_toParty\":\"Counterparty address to rebalance to\",\"_user\":\"Main user address to rebalance collateral from\"},\"returns\":{\"_0\":\"Amount of funds in ETH left to rebalance for other vault\"}},\"rebalanceFrom(address,address,uint256)\":{\"details\":\"Rebalances collateral from bilateral position to user's book, as it's executed by collateral aggregator function returns the amount of ETH left to rebalance for other collateral vaults\",\"params\":{\"_amountETH\":\"Amount of funds in ETH required to rebalance\",\"_counterparty\":\"Counterparty address in bilateral position\",\"_user\":\"Main user address to rebalance collateral from\"},\"returns\":{\"_0\":\"Amount of funds in ETH left to rebalance for other vault\"}},\"rebalanceTo(address,address,uint256)\":{\"details\":\"Rebalances collateral from user's book to bilateral position, as it's executed by collateral aggregator function returns the amount of ETH left to rebalance for other collateral vaults\",\"params\":{\"_amountETH\":\"Amount of funds in ETH required to rebalance\",\"_counterparty\":\"Counterparty address in bilateral position\",\"_user\":\"Main user address to rebalance collateral from\"},\"returns\":{\"_0\":\"Amount of funds in ETH left to rebalance for other vault\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"Number of funds to withdraw.\"}},\"withdrawFrom(address,uint256)\":{\"params\":{\"_amount\":\"Number of funds to withdraw.\",\"_counterparty\":\"Counterparty address.\"}}},\"title\":\"CollateralVault is the main implementation contract for storing and keeping user's collateral This contract allows users to deposit and withdraw their funds to fulfill their collateral obligations against different trades. CollateralVault is working with ETH or ERC20 token with specified on deployment `tokenAddress`. CollateralAggregator uses independent Collateral vaults for rebalancing collateral between global books and bilateral positions, and liquidating collateral while performing single or multi-deal liquidation.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":\"sets contract deployer as owner of this contract and links with collateral aggregator and currency controller contracts\",\"deposit(address,uint256)\":{\"notice\":\"payable function increases locked collateral by msg.value\"},\"getIndependentCollateral(address)\":{\"notice\":\"Returns independent collateral from `_user` collateral book\"},\"getIndependentCollateralInETH(address)\":{\"notice\":\"Returns independent collateral from `_user` collateral book converted to ETH\"},\"getLockedCollateral(address)\":{\"notice\":\"Returns locked collateral by `_user` in collateral book\"},\"getLockedCollateral(address,address)\":{\"notice\":\"Returns locked collateral by counterparties in a bilateral position in native `ccy`\"},\"getLockedCollateralInETH(address)\":{\"notice\":\"Returns locked collateral by `_user` in collateral book converted to ETH\"},\"getLockedCollateralInETH(address,address)\":{\"notice\":\"Returns locked collateral by counterparties in a bilateral position converted to ETH\"},\"liquidate(address,address,uint256)\":{\"notice\":\"Trigers only be Loan contract\"},\"withdraw(uint256)\":{\"notice\":\"Trigers to withdraw funds by the msg.sender from non-locked funds\"},\"withdrawFrom(address,uint256)\":{\"notice\":\"Trigers to withdraw funds from bilateral position between msg.sender and _counterparty\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CollateralVault.sol\":\"CollateralVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/CollateralVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/ICollateralAggregatorV2.sol\\\";\\nimport \\\"./interfaces/ICurrencyController.sol\\\";\\nimport \\\"./interfaces/ICollateralVault.sol\\\";\\nimport \\\"./libraries/SafeTransfer.sol\\\";\\nimport \\\"./libraries/CollateralPosition.sol\\\";\\n\\n/**\\n * @title CollateralVault is the main implementation contract for storing and keeping user's collateral\\n *\\n * This contract allows users to deposit and withdraw their funds to fulfill\\n * their collateral obligations against different trades.\\n *\\n * CollateralVault is working with ETH or ERC20 token with specified on deployment `tokenAddress`.\\n *\\n * CollateralAggregator uses independent Collateral vaults for rebalancing collateral\\n * between global books and bilateral positions, and liquidating collateral while performing\\n * single or multi-deal liquidation.\\n *\\n */\\ncontract CollateralVault is ICollateralVault, SafeTransfer {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using CollateralPosition for CollateralPosition.Position;\\n\\n    struct Book {\\n        uint256 independentAmount;\\n        uint256 lockedCollateral;\\n    }\\n\\n    // Linked contract addresses\\n    ICollateralAggregator public collateralAggregator;\\n    ICurrencyController public currencyController;\\n\\n    address public override owner;\\n    address public override tokenAddress;\\n    bytes32 public override ccy;\\n\\n    // Mapping for all deposits of users collateral\\n    mapping(address => Book) private books;\\n\\n    // Mapping for bilateral collateral positions between 2 counterparties.\\n    mapping(bytes32 => CollateralPosition.Position) private _positions;\\n\\n    /**\\n     * @dev Modifier to check if user registered on collateral aggregator\\n     */\\n    modifier registeredUserOnly() {\\n        require(\\n            collateralAggregator.checkRegisteredUser(msg.sender),\\n            \\\"NON_REGISTERED_USER\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check if msg.sender is a collateral aggregator contract\\n     */\\n    modifier aggregatorOnly() {\\n        require(msg.sender == address(collateralAggregator), \\\"INVALID_ACCEESS\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract constructor function.\\n     *\\n     * @notice sets contract deployer as owner of this contract and links\\n     * with collateral aggregator and currency controller contracts\\n     */\\n    constructor(\\n        bytes32 _ccy,\\n        address _tokenAddress,\\n        address _collateralAggregator,\\n        address _currencyController,\\n        address _WETH9\\n    ) public SafeTransfer(_WETH9) {\\n        owner = msg.sender;\\n        tokenAddress = _tokenAddress;\\n        ccy = _ccy;\\n\\n        collateralAggregator = ICollateralAggregator(_collateralAggregator);\\n        currencyController = ICurrencyController(_currencyController);\\n\\n        require(\\n            currencyController.isCollateral(_ccy),\\n            \\\"COLLATERAL_ASSET_NOT_SUPPORTED\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Trigers to deposit funds by the msg.sender into collateral book\\n     * @param _amount Number of funds to deposit\\n     */\\n    function deposit(uint256 _amount)\\n        public\\n        payable\\n        override\\n        registeredUserOnly\\n    {\\n        require(_amount > 0, \\\"INVALID_AMOUNT\\\");\\n        _depositAssets(tokenAddress, msg.sender, address(this), _amount);\\n\\n        Book storage book = books[msg.sender];\\n        book.independentAmount = book.independentAmount.add(_amount);\\n\\n        _afterTransfer();\\n\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @dev Deposit collateral funds into bilateral position against counterparty\\n     * @param _counterparty Counterparty address in bilateral position\\n     * @notice payable function increases locked collateral by msg.value\\n     */\\n    function deposit(address _counterparty, uint256 _amount)\\n        public\\n        override\\n        registeredUserOnly\\n    {\\n        require(_amount > 0, \\\"INVALID_AMOUNT\\\");\\n        _depositAssets(tokenAddress, msg.sender, address(this), _amount);\\n\\n        CollateralPosition.deposit(\\n            _positions,\\n            msg.sender,\\n            _counterparty,\\n            _amount\\n        );\\n\\n        Book storage book = books[msg.sender];\\n        book.lockedCollateral = book.lockedCollateral.add(_amount);\\n\\n        _afterTransfer(_counterparty);\\n\\n        emit PositionDeposit(msg.sender, _counterparty, _amount);\\n    }\\n\\n    struct RebalanceLocalVars {\\n        int256 exchangeRate;\\n        uint256 target;\\n        uint256 rebalanceAmount;\\n        uint256 left;\\n    }\\n\\n    /**\\n     * @dev Rebalances collateral from user's book to bilateral position,\\n     * as it's executed by collateral aggregator function returns the\\n     * amount of ETH left to rebalance for other collateral vaults\\n     *\\n     * @param _user Main user address to rebalance collateral from\\n     * @param _counterparty Counterparty address in bilateral position\\n     * @param _amountETH Amount of funds in ETH required to rebalance\\n     *\\n     * @return Amount of funds in ETH left to rebalance for other vault\\n     */\\n    function rebalanceTo(\\n        address _user,\\n        address _counterparty,\\n        uint256 _amountETH\\n    ) external override aggregatorOnly returns (uint256) {\\n        RebalanceLocalVars memory vars;\\n        vars.exchangeRate = currencyController.getLastETHPrice(ccy);\\n        vars.target = _amountETH.mul(1e18).div(uint256(vars.exchangeRate));\\n\\n        Book storage book = books[_user];\\n        vars.rebalanceAmount = book.independentAmount >= vars.target\\n            ? vars.target\\n            : book.independentAmount;\\n\\n        if (vars.rebalanceAmount > 0) {\\n            book.independentAmount = book.independentAmount.sub(\\n                vars.rebalanceAmount\\n            );\\n            book.lockedCollateral = book.lockedCollateral.add(\\n                vars.rebalanceAmount\\n            );\\n\\n            CollateralPosition.deposit(\\n                _positions,\\n                _user,\\n                _counterparty,\\n                vars.rebalanceAmount\\n            );\\n            _afterTransfer(_user, _counterparty);\\n\\n            emit RebalanceTo(_user, _counterparty, vars.rebalanceAmount);\\n        }\\n\\n        vars.left = vars.target.sub(vars.rebalanceAmount);\\n\\n        return vars.left.mul(uint256(vars.exchangeRate)).div(1e18);\\n    }\\n\\n    /**\\n     * @dev Rebalances collateral from bilateral position to user's book,\\n     * as it's executed by collateral aggregator function returns the\\n     * amount of ETH left to rebalance for other collateral vaults\\n     *\\n     * @param _user Main user address to rebalance collateral from\\n     * @param _counterparty Counterparty address in bilateral position\\n     * @param _amountETH Amount of funds in ETH required to rebalance\\n     *\\n     * @return Amount of funds in ETH left to rebalance for other vault\\n     */\\n    function rebalanceFrom(\\n        address _user,\\n        address _counterparty,\\n        uint256 _amountETH\\n    ) external override aggregatorOnly returns (uint256) {\\n        RebalanceLocalVars memory vars;\\n\\n        vars.exchangeRate = currencyController.getLastETHPrice(ccy);\\n        vars.target = _amountETH.mul(1e18).div(uint256(vars.exchangeRate));\\n        vars.rebalanceAmount = CollateralPosition.withdraw(\\n            _positions,\\n            _user,\\n            _counterparty,\\n            vars.target\\n        );\\n\\n        if (vars.rebalanceAmount > 0) {\\n            Book storage book = books[_user];\\n            book.lockedCollateral = book.lockedCollateral.sub(\\n                vars.rebalanceAmount\\n            );\\n            book.independentAmount = book.independentAmount.add(\\n                vars.rebalanceAmount\\n            );\\n\\n            _afterTransfer(_user, _counterparty);\\n\\n            emit RebalanceFrom(_user, _counterparty, vars.rebalanceAmount);\\n        }\\n\\n        vars.left = vars.target.sub(vars.rebalanceAmount);\\n\\n        return vars.left.mul(uint256(vars.exchangeRate)).div(1e18);\\n    }\\n\\n    /**\\n     * @dev Rebalances collateral between 2 different bilateral positions,\\n     * as it's executed by collateral aggregator function returns the\\n     * amount of ETH left to rebalance for other collateral vaults\\n     *\\n     * @param _user Main user address to rebalance collateral from\\n     * @param _fromParty Counterparty address to rebalance from\\n     * @param _toParty Counterparty address to rebalance to\\n     * @param _amountETH Amount of funds in ETH required to rebalance\\n     *\\n     * @return Amount of funds in ETH left to rebalance for other vault\\n     */\\n    function rebalanceBetween(\\n        address _user,\\n        address _fromParty,\\n        address _toParty,\\n        uint256 _amountETH\\n    ) external override aggregatorOnly returns (uint256) {\\n        RebalanceLocalVars memory vars;\\n\\n        vars.exchangeRate = currencyController.getLastETHPrice(ccy);\\n        vars.target = _amountETH.mul(1e18).div(uint256(vars.exchangeRate));\\n        vars.rebalanceAmount = CollateralPosition.rebalance(\\n            _positions,\\n            _user,\\n            _fromParty,\\n            _toParty,\\n            vars.target\\n        );\\n        vars.left = vars.target.sub(vars.rebalanceAmount);\\n\\n        _afterTransfer(_user, _fromParty);\\n        _afterTransfer(_user, _toParty);\\n\\n        emit RebalanceBetween(\\n            _user,\\n            _fromParty,\\n            _toParty,\\n            vars.rebalanceAmount\\n        );\\n\\n        return vars.left.mul(uint256(vars.exchangeRate)).div(1e18);\\n    }\\n\\n    /**\\n     * @dev Liquidates collateral from bilateral position between parties\\n     * returns the amount of ETH to be liquidated in other vault\\n     * if all available funds have been liquidated here\\n     *\\n     * @param _from Address for liquidating collateral from\\n     * @param _to Address for sending collateral to\\n     * @param _amountETH Liquidation amount in ETH\\n     *\\n     * @notice Trigers only be Loan contract\\n     */\\n    function liquidate(\\n        address _from,\\n        address _to,\\n        uint256 _amountETH\\n    ) external override aggregatorOnly returns (uint256 liquidationLeftETH) {\\n        int256 exchangeRate = currencyController.getLastETHPrice(ccy);\\n        uint256 liquidationTarget = _amountETH.mul(1e18).div(\\n            uint256(exchangeRate)\\n        );\\n        uint256 liquidated = CollateralPosition.liquidate(\\n            _positions,\\n            _from,\\n            _to,\\n            liquidationTarget\\n        );\\n\\n        Book storage book = books[_from];\\n        book.lockedCollateral = book.lockedCollateral.sub(liquidated);\\n\\n        book = books[_to];\\n        book.lockedCollateral = book.lockedCollateral.add(liquidated);\\n\\n        if (liquidated > 0) {\\n            _afterTransfer(_from, _to);\\n            emit Liquidate(_from, _to, liquidated);\\n        }\\n\\n        uint256 liquidationLeft = liquidationTarget.sub(liquidated);\\n\\n        if (liquidationLeft > 0) {\\n            uint256 independentLiquidation = _tryLiquidateIndependentCollateral(\\n                _from,\\n                _to,\\n                liquidationLeft\\n            );\\n            liquidationLeft = liquidationLeft.sub(independentLiquidation);\\n        }\\n\\n        liquidationLeftETH = liquidationLeft.mul(uint256(exchangeRate)).div(\\n            1e18\\n        );\\n    }\\n\\n    function _tryLiquidateIndependentCollateral(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal returns (uint256 liquidated) {\\n        uint256 maxWidthdrawETH = collateralAggregator\\n            .getMaxCollateralBookWidthdraw(_from);\\n        uint256 maxLiquidation = currencyController.convertFromETH(\\n            ccy,\\n            maxWidthdrawETH\\n        );\\n\\n        liquidated = _amount > maxLiquidation ? maxLiquidation : _amount;\\n\\n        Book storage book = books[_from];\\n        book.independentAmount = book.independentAmount.sub(liquidated);\\n\\n        book = books[_to];\\n        book.lockedCollateral = book.lockedCollateral.add(liquidated);\\n\\n        CollateralPosition.deposit(_positions, _to, _from, liquidated);\\n\\n        emit LiquidateIndependent(_from, _to, liquidated);\\n    }\\n\\n    /**\\n     * @notice Trigers to withdraw funds by the msg.sender from non-locked funds\\n     * @param _amount Number of funds to withdraw.\\n     */\\n    function withdraw(uint256 _amount) public override registeredUserOnly {\\n        // fix according to collateral aggregator\\n        require(_amount > 0, \\\"INVALID_AMOUNT\\\");\\n\\n        address user = msg.sender;\\n        uint256 maxWidthdrawETH = collateralAggregator\\n            .getMaxCollateralBookWidthdraw(user);\\n        uint256 maxWidthdraw = currencyController.convertFromETH(\\n            ccy,\\n            maxWidthdrawETH\\n        );\\n        uint256 withdrawAmt = _amount > maxWidthdraw ? maxWidthdraw : _amount;\\n\\n        Book storage book = books[user];\\n        book.independentAmount = book.independentAmount.sub(withdrawAmt);\\n\\n        _withdrawAssets(tokenAddress, msg.sender, withdrawAmt);\\n        _afterTransfer();\\n\\n        emit Withdraw(msg.sender, withdrawAmt);\\n    }\\n\\n    /**\\n     * @notice Trigers to withdraw funds from bilateral position between\\n     * msg.sender and _counterparty\\n     *\\n     * @param _counterparty Counterparty address.\\n     * @param _amount Number of funds to withdraw.\\n     */\\n    function withdrawFrom(address _counterparty, uint256 _amount)\\n        public\\n        override\\n        registeredUserOnly\\n    {\\n        require(_amount > 0, \\\"INVALID_AMOUNT\\\");\\n        address user = msg.sender;\\n\\n        (uint256 maxWidthdrawETH, ) = collateralAggregator\\n            .getMaxCollateralWidthdraw(user, _counterparty);\\n        uint256 maxWidthdraw = currencyController.convertFromETH(\\n            ccy,\\n            maxWidthdrawETH\\n        );\\n\\n        uint256 targetWithdraw = _amount > maxWidthdraw\\n            ? maxWidthdraw\\n            : _amount;\\n        uint256 withdrawn = CollateralPosition.withdraw(\\n            _positions,\\n            user,\\n            _counterparty,\\n            targetWithdraw\\n        );\\n\\n        Book storage book = books[user];\\n        book.lockedCollateral = book.lockedCollateral.sub(withdrawn);\\n\\n        _withdrawAssets(tokenAddress, msg.sender, withdrawn);\\n        _afterTransfer(_counterparty);\\n\\n        emit PositionWithdraw(user, _counterparty, withdrawn);\\n    }\\n\\n    /**\\n     * @notice Returns independent collateral from `_user` collateral book\\n     *\\n     * @param _user Address of collateral user\\n     */\\n    function getIndependentCollateral(address _user)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return books[_user].independentAmount;\\n    }\\n\\n    /**\\n     * @notice Returns independent collateral from `_user` collateral book converted to ETH\\n     *\\n     * @param _user Address of collateral user\\n     */\\n    function getIndependentCollateralInETH(address _user)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 amount = books[_user].independentAmount;\\n\\n        return currencyController.convertToETH(ccy, amount);\\n    }\\n\\n    /**\\n     * @notice Returns locked collateral by `_user` in collateral book\\n     *\\n     * @param _user Address of collateral user\\n     */\\n    function getLockedCollateral(address _user)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return books[_user].lockedCollateral;\\n    }\\n\\n    /**\\n     * @notice Returns locked collateral by `_user` in collateral book converted to ETH\\n     *\\n     * @param _user Address of collateral user\\n     */\\n    function getLockedCollateralInETH(address _user)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 amount = books[_user].lockedCollateral;\\n\\n        return currencyController.convertToETH(ccy, amount);\\n    }\\n\\n    /**\\n     * @notice Returns locked collateral by counterparties\\n     * in a bilateral position in native `ccy`\\n     *\\n     * @param _partyA First counterparty address\\n     * @param _partyB Second counterparty address.\\n     */\\n    function getLockedCollateral(address _partyA, address _partyB)\\n        public\\n        view\\n        override\\n        returns (uint256, uint256)\\n    {\\n        return CollateralPosition.get(_positions, _partyA, _partyB);\\n    }\\n\\n    /**\\n     * @notice Returns locked collateral by counterparties\\n     * in a bilateral position converted to ETH\\n     *\\n     * @param _partyA First counterparty address\\n     * @param _partyB Second counterparty address.\\n     */\\n    function getLockedCollateralInETH(address _partyA, address _partyB)\\n        public\\n        view\\n        override\\n        returns (uint256, uint256)\\n    {\\n        (uint256 lockedA, uint256 lockedB) = CollateralPosition.get(\\n            _positions,\\n            _partyA,\\n            _partyB\\n        );\\n\\n        uint256[] memory ethAmounts = new uint256[](2);\\n        ethAmounts[0] = lockedA;\\n        ethAmounts[1] = lockedB;\\n\\n        ethAmounts = currencyController.convertBulkToETH(ccy, ethAmounts);\\n\\n        return (ethAmounts[0], ethAmounts[1]);\\n    }\\n\\n    function _afterTransfer() internal {\\n        if (\\n            books[msg.sender].independentAmount > 0 ||\\n            books[msg.sender].lockedCollateral > 0\\n        ) {\\n            collateralAggregator.enterVault(msg.sender);\\n        } else {\\n            collateralAggregator.exitVault(msg.sender);\\n        }\\n    }\\n\\n    function _afterTransfer(address _counterparty) internal {\\n        _afterTransfer(msg.sender, _counterparty);\\n    }\\n\\n    function _afterTransfer(address _user, address _counterparty) internal {\\n        (uint256 locked0, uint256 locked1) = CollateralPosition.get(\\n            _positions,\\n            _user,\\n            _counterparty\\n        );\\n\\n        if (locked0 > 0) {\\n            collateralAggregator.enterVault(_user);\\n        }\\n\\n        if (locked1 > 0) {\\n            collateralAggregator.enterVault(_counterparty);\\n        }\\n\\n        if (locked0 > 0 || locked1 > 0) {\\n            collateralAggregator.enterVault(_user, _counterparty);\\n        } else {\\n            collateralAggregator.exitVault(_user, _counterparty);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x147de0b7c8c2575bcb916d5abf10610a9d1ea7f9ef3f66618e582a944aba197f\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralAggregatorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICollateralAggregator {\\n    event Register(address indexed addr);\\n    event Release(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    );\\n    event ReleaseUnsettled(address indexed party, bytes32 ccy, uint256 amount);\\n    event SettleCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event UpdatePV(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    );\\n    event UseCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    );\\n    event UseUnsettledCollateral(\\n        address indexed party,\\n        bytes32 ccy,\\n        uint256 amount\\n    );\\n\\n    function checkRegisteredUser(address addr) external view returns (bool);\\n\\n    function enterVault(address _user) external;\\n\\n    function enterVault(address _party0, address _party1) external;\\n\\n    function exitVault(address _user) external;\\n\\n    function exitVault(address _party0, address _party1) external;\\n\\n    function getCcyExposures(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getCoverage(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getExposedCurrencies(address partyA, address partyB)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getMaxCollateralBookWidthdraw(address _user)\\n        external\\n        view\\n        returns (uint256 maxWithdraw);\\n\\n    function getMaxCollateralWidthdraw(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getNetAndTotalPV(address _party0, address _party1)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getRebalanceCollateralAmounts(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getTotalUnsettledExp(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getUnsettledCoverage(address _user)\\n        external\\n        view\\n        returns (uint256 coverage);\\n\\n    function isCovered(\\n        address _party0,\\n        address _party1,\\n        bytes32 _ccy,\\n        uint256 _party0PV,\\n        uint256 _party1PV,\\n        bool _isSettled\\n    ) external view returns (bool, bool);\\n\\n    function isCoveredUnsettled(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) external view returns (bool);\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        uint256 liquidationInETH\\n    ) external;\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        bytes32 ccy,\\n        uint256 liquidationAmount,\\n        bool isSettled\\n    ) external;\\n\\n    function register() external;\\n\\n    function register(\\n        string[] memory _addresses, \\n        uint256[] memory _chainIds\\n    ) external;\\n\\n    function releaseCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function releaseUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function settleCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external;\\n\\n    function updatePV(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    ) external;\\n\\n    function useCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function useUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function getUsedVaults(address user)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function getUsedVaults(address party0, address party1)\\n        external\\n        view\\n        returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x65d1b2bb163eb495c39444bc0316fdf5ea9eb158c31b22bdd94d7d9e7760d373\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface ICollateralVault {\\n    event Deposit(address user, uint256 amount);\\n    event PositionDeposit(address user, address counterparty, uint256 amount);\\n    event RebalanceBetween(\\n        address user,\\n        address fromCounterparty,\\n        address toCounterparty,\\n        uint256 amount\\n    );\\n    event RebalanceFrom(address user, address counterparty, uint256 amount);\\n    event RebalanceTo(address user, address counterparty, uint256 amount);\\n    event Withdraw(address from, uint256 amount);\\n    event PositionWithdraw(address from, address counterparty, uint256 amount);\\n    event Liquidate(address from, address to, uint256 amount);\\n    event LiquidateIndependent(address from, address to, uint256 amount);\\n\\n    function ccy() external view returns (bytes32);\\n\\n    function tokenAddress() external view returns (address);\\n\\n    function deposit(address _counterparty, uint256 _amount) external;\\n\\n    function deposit(uint256 _amount) external payable;\\n\\n    function getIndependentCollateral(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getIndependentCollateralInETH(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLockedCollateral(address _partyA, address _partyB)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getLockedCollateral(address _user) external view returns (uint256);\\n\\n    function getLockedCollateralInETH(address _partyA, address _partyB)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getLockedCollateralInETH(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function liquidate(\\n        address _from,\\n        address _to,\\n        uint256 _amountETH\\n    ) external returns (uint256 liquidationLeftETH);\\n\\n    function owner() external view returns (address);\\n\\n    function rebalanceBetween(\\n        address _user,\\n        address _fromParty,\\n        address _toParty,\\n        uint256 _amountETH\\n    ) external returns (uint256);\\n\\n    function rebalanceFrom(\\n        address _user,\\n        address _counterparty,\\n        uint256 _amountETH\\n    ) external returns (uint256);\\n\\n    function rebalanceTo(\\n        address _user,\\n        address _counterparty,\\n        uint256 _amountETH\\n    ) external returns (uint256);\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function withdrawFrom(address _counterparty, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x8854f6fa27c201972268b3386339dcc978cdef75247b8b3662dd21290d6ca6ba\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n *\\n * Currency controller contract copies the logic of FXRatesAggregator contract, and\\n * will replace that contract in connection with Collateral Aggregator\\n */\\ninterface ICurrencyController {\\n    event CcyAdded(\\n        bytes32 indexed ccy,\\n        string name,\\n        uint16 chainId,\\n        uint256 haircut\\n    );\\n    event CcyCollateralUpdate(bytes32 indexed ccy, bool isCollateral);\\n    event CcySupportUpdate(bytes32 indexed ccy, bool isSupported);\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n    event MinMarginUpdated(bytes32 indexed ccy, uint256 minMargin);\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n    event PriceFeedAdded(\\n        bytes32 ccy,\\n        string secondCcy,\\n        address indexed priceFeed\\n    );\\n    event PriceFeedRemoved(\\n        bytes32 ccy,\\n        string secondCcy,\\n        address indexed priceFeed\\n    );\\n\\n    function convertBulkToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function currencies(bytes32)\\n        external\\n        view\\n        returns (\\n            bool isSupported,\\n            string memory name,\\n            uint16 chainId\\n        );\\n\\n    function ethDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getMinMargin(bytes32 _ccy) external view returns (uint256);\\n\\n    function haircuts(bytes32) external view returns (uint256);\\n\\n    function isCollateral(bytes32) external view returns (bool);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function last_ccy_index() external view returns (uint8);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function minMargins(bytes32) external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function setOwner(address _owner) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        uint16 _chainId,\\n        address _ethPriceFeed,\\n        uint256 _haircut\\n    ) external returns (bool);\\n\\n    function supportedCurrencies() external view returns (uint8);\\n\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut)\\n        external\\n        returns (bool);\\n\\n    function updateCollateralSupport(bytes32 _ccy, bool _isSupported)\\n        external\\n        returns (bool);\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported)\\n        external\\n        returns (bool);\\n\\n    function updateMinMargin(bytes32 _ccy, uint256 _minMargin)\\n        external\\n        returns (bool);\\n\\n    function usdDecimals(bytes32) external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xfe21b4283f1cfc907ade17b20e68c80e5e4800f4ffaa7bec74ef245fe497cb3a\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH9 is IERC20 {\\n    event Deposit(address user, uint256 amount);\\n    event Withdrawal(address user, uint256 amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x98bf56986f6a85c672ef86d92870227b3d9004c47bc5fc156ab25ba6368e7acb\",\"license\":\"MIT\"},\"contracts/libraries/AddressPacking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nlibrary AddressPacking {\\n    /**\\n     * @dev Packs two addresses into one hash to reduce the number of arguments\\n     * @param addr0 First address\\n     * @param addr1 Second address\\n     * @return Boolean to identify if addresses were flipped\\n     */\\n    function pack(address addr0, address addr1)\\n        internal\\n        pure\\n        returns (bytes32, bool)\\n    {\\n        require(addr0 != addr1, \\\"Identical addresses\\\");\\n        (address _addr0, address _addr1) = addr0 < addr1\\n            ? (addr0, addr1)\\n            : (addr1, addr0);\\n        require(_addr0 != address(0), \\\"Invalid address\\\");\\n\\n        if (_addr0 != addr0) {\\n            return (keccak256(abi.encode(_addr0, _addr1)), true);\\n        } else {\\n            return (keccak256(abi.encode(_addr0, _addr1)), false);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe567a45d9e5739f3e89da206f5041692c8c7a2f9a837d23fa9e50117b81e773\",\"license\":\"MIT\"},\"contracts/libraries/CollateralPosition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./AddressPacking.sol\\\";\\n\\nlibrary CollateralPosition {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Position structure used for keeping track of collateral\\n     * amounts locked by counterparties in bilateral relations\\n     */\\n    struct Position {\\n        uint256 lockedCollateralA;\\n        uint256 lockedCollateralB;\\n    }\\n\\n    function _handleFlippedCase(\\n        CollateralPosition.Position memory position,\\n        bool flipped\\n    ) internal pure returns (CollateralPosition.Position memory) {\\n        if (flipped) {\\n            uint256 locked = position.lockedCollateralA;\\n\\n            position.lockedCollateralA = position.lockedCollateralB;\\n            position.lockedCollateralB = locked;\\n        }\\n\\n        return position;\\n    }\\n\\n    /**\\n     * @dev Returns the bilateral collateral position between 2 counterparties\\n     * @param self The mapping with all bilateral collateral positions\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     */\\n    function get(\\n        mapping(bytes32 => CollateralPosition.Position) storage self,\\n        address party0,\\n        address party1\\n    ) internal view returns (uint256, uint256) {\\n        (bytes32 packedAddrs, bool flipped) = AddressPacking.pack(\\n            party0,\\n            party1\\n        );\\n        CollateralPosition.Position memory position = self[packedAddrs];\\n        position = _handleFlippedCase(position, flipped);\\n\\n        return (position.lockedCollateralA, position.lockedCollateralB);\\n    }\\n\\n    /**\\n     * @dev Adds deposited amount into bilateral position from one party\\n     * @param self The mapping with all bilateral collateral positions\\n     * @param depositor Address of user depositing funds\\n     * @param counterparty Counterparty address\\n     * @param amount Number of funds deposited by user\\n     */\\n    function deposit(\\n        mapping(bytes32 => CollateralPosition.Position) storage self,\\n        address depositor,\\n        address counterparty,\\n        uint256 amount\\n    ) internal {\\n        (bytes32 packedAddrs, bool flipped) = AddressPacking.pack(\\n            depositor,\\n            counterparty\\n        );\\n        CollateralPosition.Position storage position = self[packedAddrs];\\n\\n        if (!flipped) {\\n            position.lockedCollateralA = position.lockedCollateralA.add(amount);\\n        } else {\\n            position.lockedCollateralB = position.lockedCollateralB.add(amount);\\n        }\\n    }\\n\\n    // /**\\n    // * @dev Adds deposited amounts into bilateral position,\\n    // * helpful during rebalancing from books of both parties\\n    // * @param self The mapping with all bilateral collateral positions\\n    // * @param party0 First counterparty address\\n    // * @param party1 Second counterparty address\\n    // * @param amount0 Number of funds deposited by first counterparty\\n    // * @param amount1 Number of funds deposited by second counterparty\\n    // */\\n    // function deposit(\\n    //     mapping(bytes32 => CollateralPosition.Position) storage self,\\n    //     address party0,\\n    //     address party1,\\n    //     uint256 amount0,\\n    //     uint256 amount1\\n    // ) internal {\\n    //     (bytes32 packedAddrs, bool flipped) = AddressPacking.pack(party0, party1);\\n    //     CollateralPosition.Position storage position = self[packedAddrs];\\n\\n    //     position.lockedCollateralA = flipped ? position.lockedCollateralA.add(amount1) : position.lockedCollateralA.add(amount0);\\n    //     position.lockedCollateralB = flipped ? position.lockedCollateralB.add(amount0) : position.lockedCollateralB.add(amount1);\\n    // }\\n\\n    /**\\n     * @dev Removes withdrawn amounts from bilateral position for one party\\n     * @param self The mapping with all bilateral collateral positions\\n     * @param user Address of user withdrawing funds\\n     * @param counterparty Counterparty address\\n     * @param amount Number of funds withdrawn by user\\n     * @notice Returns the number of funds withdrawn by user\\n     */\\n    function withdraw(\\n        mapping(bytes32 => CollateralPosition.Position) storage self,\\n        address user,\\n        address counterparty,\\n        uint256 amount\\n    ) internal returns (uint256 maxWithdraw) {\\n        (bytes32 packedAddrs, bool flipped) = AddressPacking.pack(\\n            user,\\n            counterparty\\n        );\\n        CollateralPosition.Position storage position = self[packedAddrs];\\n\\n        if (!flipped) {\\n            maxWithdraw = position.lockedCollateralA >= amount\\n                ? amount\\n                : position.lockedCollateralA;\\n            position.lockedCollateralA = position.lockedCollateralA.sub(\\n                maxWithdraw\\n            );\\n        } else {\\n            maxWithdraw = position.lockedCollateralB >= amount\\n                ? amount\\n                : position.lockedCollateralB;\\n            position.lockedCollateralB = position.lockedCollateralB.sub(\\n                maxWithdraw\\n            );\\n        }\\n    }\\n\\n    // /**\\n    // * @dev Removes withdrawn amounts from bilateral position for both parties\\n    // * @param self The mapping with all bilateral collateral positions\\n    // * @param party0 First counterparty address\\n    // * @param party1 Second counterparty address\\n    // * @param amount0 Number of funds withdrawn by first counterparty\\n    // * @param amount1 Number of funds withdrawn by second counterparty\\n    // */\\n    // function withdraw(\\n    //     mapping(bytes32 => CollateralPosition.Position) storage self,\\n    //     address party0,\\n    //     address party1,\\n    //     uint256 amount0,\\n    //     uint256 amount1\\n    // ) internal {\\n    //     (bytes32 packedAddrs, bool flipped) = AddressPacking.pack(party0, party1);\\n    //     CollateralPosition.Position storage position = self[packedAddrs];\\n\\n    //     position.lockedCollateralA = flipped ? position.lockedCollateralA.sub(amount1) : position.lockedCollateralA.sub(amount0);\\n    //     position.lockedCollateralB = flipped ? position.lockedCollateralB.sub(amount0) : position.lockedCollateralB.sub(amount1);\\n    // }\\n\\n    /**\\n     * @dev Liquidates required amount from one party to another inside position\\n     * @param self The mapping with all bilateral collateral positions\\n     * @param from Address for liquidating collateral from\\n     * @param to Address for sending collateral to\\n     * @param amount Number of funds to liquidate\\n     */\\n    function liquidate(\\n        mapping(bytes32 => CollateralPosition.Position) storage self,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal returns (uint256 liquidated) {\\n        (bytes32 packedAddrs, bool flipped) = AddressPacking.pack(from, to);\\n        CollateralPosition.Position storage position = self[packedAddrs];\\n\\n        if (!flipped) {\\n            liquidated = position.lockedCollateralA >= amount\\n                ? amount\\n                : position.lockedCollateralA;\\n            position.lockedCollateralA = position.lockedCollateralA.sub(\\n                liquidated\\n            );\\n            position.lockedCollateralB = position.lockedCollateralB.add(\\n                liquidated\\n            );\\n        } else {\\n            liquidated = position.lockedCollateralB >= amount\\n                ? amount\\n                : position.lockedCollateralB;\\n            position.lockedCollateralB = position.lockedCollateralB.sub(\\n                liquidated\\n            );\\n            position.lockedCollateralA = position.lockedCollateralA.add(\\n                liquidated\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Rebalances required amount between 2 bilateral positions\\n     * @param self The mapping with all bilateral collateral positions\\n     * @param user Address of main party to rebalance funds between counterparties for\\n     * @param fromParty Counterparty address for rebalancing collateral from\\n     * @param toParty Counterparty address for rebalancing collateral to\\n     * @param amount Number of funds to rebalance\\n     */\\n    function rebalance(\\n        mapping(bytes32 => CollateralPosition.Position) storage self,\\n        address user,\\n        address fromParty,\\n        address toParty,\\n        uint256 amount\\n    ) internal returns (uint256 rebalanced) {\\n        // max checks\\n        (bytes32 packedAddr, bool flipped) = AddressPacking.pack(\\n            user,\\n            fromParty\\n        );\\n        CollateralPosition.Position storage position = self[packedAddr];\\n\\n        if (!flipped) {\\n            rebalanced = position.lockedCollateralA >= amount\\n                ? amount\\n                : position.lockedCollateralA;\\n            position.lockedCollateralA = position.lockedCollateralA.sub(\\n                rebalanced\\n            );\\n        } else {\\n            rebalanced = position.lockedCollateralB >= amount\\n                ? amount\\n                : position.lockedCollateralB;\\n            position.lockedCollateralB = position.lockedCollateralB.sub(\\n                rebalanced\\n            );\\n        }\\n\\n        (packedAddr, flipped) = AddressPacking.pack(user, toParty);\\n        position = self[packedAddr];\\n\\n        if (!flipped) {\\n            position.lockedCollateralA = position.lockedCollateralA.add(\\n                rebalanced\\n            );\\n        } else {\\n            position.lockedCollateralB = position.lockedCollateralB.add(\\n                rebalanced\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Clears the state of bilateral position\\n     * @param self The mapping with all bilateral collateral positions\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     */\\n    function clear(\\n        mapping(bytes32 => CollateralPosition.Position) storage self,\\n        address party0,\\n        address party1\\n    ) internal {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(party0, party1);\\n        delete self[packedAddrs];\\n    }\\n}\\n\",\"keccak256\":\"0x1634e4ad9c0a248c232a53682e210e21d01ce1ef82bbb17f70d7caa0261ff93c\",\"license\":\"MIT\"},\"contracts/libraries/SafeTransfer.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\nimport \\\"../interfaces/IWETH9.sol\\\";\\n\\nabstract contract SafeTransfer {\\n    address public immutable WETH9;\\n\\n    constructor(address _WETH9) public {\\n        WETH9 = _WETH9;\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == WETH9, \\\"Not WETH9\\\");\\n    }\\n\\n    function _depositAssets(\\n        address _token,\\n        address _payer,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == WETH9 && address(this).balance >= _amount) {\\n            _wrapWETH(_receiver, _amount);\\n        } else if (_receiver == address(this)) {\\n            _safeTransferFrom(_token, _payer, _amount);\\n        } else {\\n            _safeTransferFrom(_token, _payer, _receiver, _amount);\\n        }\\n    }\\n\\n    function _withdrawAssets(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == WETH9) {\\n            _unwrapWETH(_receiver, _amount);\\n        } else {\\n            _safeTransfer(_token, _receiver, _amount);\\n        }\\n    }\\n\\n    function _wrapWETH(address _receiver, uint256 _amount) internal {\\n        _amount = msg.value;\\n\\n        IWETH9(WETH9).deposit{value: _amount}();\\n        IWETH9(WETH9).transfer(_receiver, _amount);\\n    }\\n\\n    function _unwrapWETH(address _receiver, uint256 _amount) internal {\\n        uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));\\n        require(balanceWETH9 >= _amount, \\\"Insufficient WETH9\\\");\\n\\n        if (balanceWETH9 > 0) {\\n            IWETH9(WETH9).withdraw(_amount);\\n            _safeTransferETH(_receiver, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer helper from UniswapV2 Router\\n    function _safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    /**\\n     * There are many non-compliant ERC20 tokens... this can handle most, adapted from UniSwap V2\\n     * Im trying to make it a habit to put external calls last (reentrancy)\\n     * You can put this in an internal function if you like.\\n     */\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // 0xa9059cbb = bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n            abi.encodeWithSelector(0xa9059cbb, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        ); // ERC20 Transfer failed\\n    }\\n\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        uint256 amount\\n    ) internal virtual {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // 0x23b872dd = bytes4(keccak256(\\\"transferFrom(address,address,uint256)\\\"))\\n            abi.encodeWithSelector(0x23b872dd, from, address(this), amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        ); // ERC20 TransferFrom failed\\n    }\\n\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function _safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x7f2e2be6c3f7fc10d452696a661c9591d903a4e8ce42a23db4a4c1686f842b36\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002e0d38038062002e0d833981810160405260a08110156200003757600080fd5b5080516020808301516040808501516060808701516080978801519182901b6001600160601b03191690975260028054336001600160a01b0319918216179091556003805482166001600160a01b0380881691909117909155600488815560008054841683871617905560018054909316828b1617928390558551632ecaefc560e11b815290810189905294519798959793969294911692635d95df8a92602480840193919291829003018186803b158015620000f357600080fd5b505afa15801562000108573d6000803e3d6000fd5b505050506040513d60208110156200011f57600080fd5b505162000173576040805162461bcd60e51b815260206004820152601e60248201527f434f4c4c41544552414c5f41535345545f4e4f545f535550504f525445440000604482015290519081900360640190fd5b505050505060805160601c612c54620001b9600039806101335280610ddc5280611f4252806120f152806124a4528061258f528061278f52806128035250612c546000f3fe6080604052600436106101235760003560e01c80639d76ea58116100a0578063d1eb9ea411610064578063d1eb9ea4146104a7578063d49ab22c146104da578063d98e91851461050d578063e361cdb014610540578063e5a148131461055557610193565b80639d76ea58146103ea578063a5f7379f146103ff578063b108daa614610414578063b6b55f2514610457578063bb8eaa3c1461047457610193565b80634aa4a4fc116100e75780634aa4a4fc146102df578063788169af146103105780638da5cb5b146103595780639470b0bd1461036e57806398c9e43a146103a757610193565b806326c01303146101985780632e1a7d4d146101ed57806340f895ea1461021757806347e7ef241461026b57806348cb13d4146102a457610193565b3661019357336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610191576040805162461bcd60e51b81526020600482015260096024820152684e6f7420574554483960b81b604482015290519081900360640190fd5b005b600080fd5b3480156101a457600080fd5b506101db600480360360608110156101bb57600080fd5b506001600160a01b0381358116916020810135909116906040013561056a565b60408051918252519081900360200190f35b3480156101f957600080fd5b506101916004803603602081101561021057600080fd5b5035610773565b34801561022357600080fd5b506102526004803603604081101561023a57600080fd5b506001600160a01b0381358116916020013516610a19565b6040805192835260208301919091528051918290030190f35b34801561027757600080fd5b506101916004803603604081101561028e57600080fd5b506001600160a01b038135169060200135610a34565b3480156102b057600080fd5b50610252600480360360408110156102c757600080fd5b506001600160a01b0381358116916020013516610bd6565b3480156102eb57600080fd5b506102f4610dda565b604080516001600160a01b039092168252519081900360200190f35b34801561031c57600080fd5b506101db6004803603608081101561033357600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135610dfe565b34801561036557600080fd5b506102f4610fb2565b34801561037a57600080fd5b506101916004803603604081101561039157600080fd5b506001600160a01b038135169060200135610fc1565b3480156103b357600080fd5b506101db600480360360608110156103ca57600080fd5b506001600160a01b03813581169160208101359091169060400135611293565b3480156103f657600080fd5b506102f461147f565b34801561040b57600080fd5b506101db61148e565b34801561042057600080fd5b506101db6004803603606081101561043757600080fd5b506001600160a01b03813581169160208101359091169060400135611494565b6101916004803603602081101561046d57600080fd5b5035611691565b34801561048057600080fd5b506101db6004803603602081101561049757600080fd5b50356001600160a01b0316611811565b3480156104b357600080fd5b506101db600480360360208110156104ca57600080fd5b50356001600160a01b03166118ad565b3480156104e657600080fd5b506101db600480360360208110156104fd57600080fd5b50356001600160a01b03166118c8565b34801561051957600080fd5b506101db6004803603602081101561053057600080fd5b50356001600160a01b03166118e6565b34801561054c57600080fd5b506102f461194b565b34801561056157600080fd5b506102f461195a565b600080546001600160a01b031633146105bc576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4143434545535360881b604482015290519081900360640190fd5b6001546004805460408051630ba1ffe760e11b815292830191909152516000926001600160a01b031691631743ffce916024808301926020929190829003018186803b15801561060b57600080fd5b505afa15801561061f573d6000803e3d6000fd5b505050506040513d602081101561063557600080fd5b5051905060006106578261065186670de0b6b3a7640000611969565b906119cb565b905060006106686006888885611a32565b6001600160a01b03881660009081526005602052604090206001810154919250906106939083611ade565b6001918201556001600160a01b0387166000908152600560205260409020908101546106bf9083611b3b565b6001820155811561071f576106d48888611b95565b604080516001600160a01b03808b1682528916602082015280820184905290517faef3faf684172084346f7dc2cc3bb1328d1cc23caec12dd9a82d4a4e56c00b179181900360600190a15b600061072b8484611ade565b905080156107505760006107408a8a84611d73565b905061074c8282611ade565b9150505b610766670de0b6b3a76400006106518388611969565b9998505050505050505050565b6000546040805163221c053f60e01b815233600482015290516001600160a01b039092169163221c053f91602480820192602092909190829003018186803b1580156107be57600080fd5b505afa1580156107d2573d6000803e3d6000fd5b505050506040513d60208110156107e857600080fd5b5051610831576040805162461bcd60e51b81526020600482015260136024820152722727a72fa922a3a4a9aa22a922a22faaa9a2a960691b604482015290519081900360640190fd5b60008111610877576040805162461bcd60e51b815260206004820152600e60248201526d1253959053125117d05353d5539560921b604482015290519081900360640190fd5b6000805460408051636b06fabd60e11b8152336004820181905291519193926001600160a01b03169163d60df57a91602480820192602092909190829003018186803b1580156108c657600080fd5b505afa1580156108da573d6000803e3d6000fd5b505050506040513d60208110156108f057600080fd5b505160015460048054604080516306d062ad60e01b81529283019190915260248201849052519293506000926001600160a01b03909216916306d062ad91604480820192602092909190829003018186803b15801561094e57600080fd5b505afa158015610962573d6000803e3d6000fd5b505050506040513d602081101561097857600080fd5b50519050600081851161098b578461098d565b815b6001600160a01b03851660009081526005602052604090208054919250906109b59083611ade565b81556003546109ce906001600160a01b03163384611f40565b6109d6611f99565b604080513381526020810184905281517f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364929181900390910190a1505050505050565b600080610a286006858561208d565b915091505b9250929050565b6000546040805163221c053f60e01b815233600482015290516001600160a01b039092169163221c053f91602480820192602092909190829003018186803b158015610a7f57600080fd5b505afa158015610a93573d6000803e3d6000fd5b505050506040513d6020811015610aa957600080fd5b5051610af2576040805162461bcd60e51b81526020600482015260136024820152722727a72fa922a3a4a9aa22a922a22faaa9a2a960691b604482015290519081900360640190fd5b60008111610b38576040805162461bcd60e51b815260206004820152600e60248201526d1253959053125117d05353d5539560921b604482015290519081900360640190fd5b600354610b50906001600160a01b03163330846120ef565b610b5d600633848461216c565b3360009081526005602052604090206001810154610b7b9083611b3b565b6001820155610b89836121c2565b604080513381526001600160a01b038516602082015280820184905290517f9721b956489a518f6d0a682e2456129cc27982178d1f92f57e5dec7b4282e2bc9181900360600190a1505050565b600080600080610be86006878761208d565b6040805160028082526060808301845294965092945091906020830190803683370190505090508281600081518110610c1d57fe5b6020026020010181815250508181600181518110610c3757fe5b602090810291909101810191909152600154600480546040805163cc106de160e01b8152928301828152602484019182528651604485015286516001600160a01b039095169563cc106de19593948894929392606490910191858101910280838360005b83811015610cb3578181015183820152602001610c9b565b50505050905001935050505060006040518083038186803b158015610cd757600080fd5b505afa158015610ceb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610d1457600080fd5b8101908080516040519392919084640100000000821115610d3457600080fd5b908301906020820185811115610d4957600080fd5b8251866020820283011164010000000082111715610d6657600080fd5b82525081516020918201928201910280838360005b83811015610d93578181015183820152602001610d7b565b50505050905001604052505050905080600081518110610daf57fe5b602002602001015181600181518110610dc457fe5b6020026020010151945094505050509250929050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080546001600160a01b03163314610e50576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4143434545535360881b604482015290519081900360640190fd5b610e58612b74565b6001546004805460408051630ba1ffe760e11b815292830191909152516001600160a01b0390921691631743ffce91602480820192602092909190829003018186803b158015610ea757600080fd5b505afa158015610ebb573d6000803e3d6000fd5b505050506040513d6020811015610ed157600080fd5b5051808252610eec9061065185670de0b6b3a7640000611969565b60208201819052610f05906006908890889088906121cf565b604082018190526020820151610f1a91611ade565b6060820152610f298686611b95565b610f338685611b95565b60408082015181516001600160a01b03808a1682528089166020830152871681840152606081019190915290517f3f353462d6e0e00e5d479a8e53bbacf36843f1eb1e577d15d107ebefe5cd533e9181900360800190a180516060820151610fa891670de0b6b3a76400009161065191611969565b9695505050505050565b6002546001600160a01b031681565b6000546040805163221c053f60e01b815233600482015290516001600160a01b039092169163221c053f91602480820192602092909190829003018186803b15801561100c57600080fd5b505afa158015611020573d6000803e3d6000fd5b505050506040513d602081101561103657600080fd5b505161107f576040805162461bcd60e51b81526020600482015260136024820152722727a72fa922a3a4a9aa22a922a22faaa9a2a960691b604482015290519081900360640190fd5b600081116110c5576040805162461bcd60e51b815260206004820152600e60248201526d1253959053125117d05353d5539560921b604482015290519081900360640190fd5b6000805460408051635a0c753d60e11b815233600482018190526001600160a01b0387811660248401528351919594169263b418ea7a9260448082019391829003018186803b15801561111757600080fd5b505afa15801561112b573d6000803e3d6000fd5b505050506040513d604081101561114157600080fd5b505160015460048054604080516306d062ad60e01b81529283019190915260248201849052519293506000926001600160a01b03909216916306d062ad91604480820192602092909190829003018186803b15801561119f57600080fd5b505afa1580156111b3573d6000803e3d6000fd5b505050506040513d60208110156111c957600080fd5b5051905060008185116111dc57846111de565b815b905060006111ef60068689856122a6565b6001600160a01b038616600090815260056020526040902060018101549192509061121a9083611ade565b6001820155600354611236906001600160a01b03163384611f40565b61123f886121c2565b604080516001600160a01b0380891682528a16602082015280820184905290517f256d352c9624d670977a706659e9ef3cfa4ca71dd1cc609e23245dd857e16c3f9181900360600190a15050505050505050565b600080546001600160a01b031633146112e5576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4143434545535360881b604482015290519081900360640190fd5b6112ed612b74565b6001546004805460408051630ba1ffe760e11b815292830191909152516001600160a01b0390921691631743ffce91602480820192602092909190829003018186803b15801561133c57600080fd5b505afa158015611350573d6000803e3d6000fd5b505050506040513d602081101561136657600080fd5b50518082526113819061065185670de0b6b3a7640000611969565b6020820181905261139890600690879087906122a6565b6040820181905215611442576001600160a01b038516600090815260056020526040908190209082015160018201546113d091611ade565b6001820155604082015181546113e591611b3b565b81556113f18686611b95565b60408083015181516001600160a01b03808a168252881660208201528083019190915290517f628c86b641d0481cc9ad4f394a1c56153ac2e181c46a5da991068574adb524019181900360600190a1505b6040810151602082015161145591611ade565b60608201819052815161147691670de0b6b3a7640000916106519190611969565b95945050505050565b6003546001600160a01b031681565b60045481565b600080546001600160a01b031633146114e6576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4143434545535360881b604482015290519081900360640190fd5b6114ee612b74565b6001546004805460408051630ba1ffe760e11b815292830191909152516001600160a01b0390921691631743ffce91602480820192602092909190829003018186803b15801561153d57600080fd5b505afa158015611551573d6000803e3d6000fd5b505050506040513d602081101561156757600080fd5b50518082526115829061065185670de0b6b3a7640000611969565b60208083019182526001600160a01b03871660009081526005909152604090209051815410156115b35780546115b9565b81602001515b604083018190521561165d57604082015181546115d591611ade565b8155604082015160018201546115ea91611b3b565b816001018190555061160360068787856040015161216c565b61160d8686611b95565b60408083015181516001600160a01b03808a168252881660208201528083019190915290517fe3d9367ba2bfd4023910a3324b74e17931c8b3a005b5fac91b462449e48eea7e9181900360600190a15b6040820151602083015161167091611ade565b606083018190528251610fa891670de0b6b3a7640000916106519190611969565b6000546040805163221c053f60e01b815233600482015290516001600160a01b039092169163221c053f91602480820192602092909190829003018186803b1580156116dc57600080fd5b505afa1580156116f0573d6000803e3d6000fd5b505050506040513d602081101561170657600080fd5b505161174f576040805162461bcd60e51b81526020600482015260136024820152722727a72fa922a3a4a9aa22a922a22faaa9a2a960691b604482015290519081900360640190fd5b60008111611795576040805162461bcd60e51b815260206004820152600e60248201526d1253959053125117d05353d5539560921b604482015290519081900360640190fd5b6003546117ad906001600160a01b03163330846120ef565b33600090815260056020526040902080546117c89083611b3b565b81556117d2611f99565b604080513381526020810184905281517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c929181900390910190a15050565b6001600160a01b03808216600090815260056020908152604080832060019081015490546004805484516344a6ecdd60e01b815291820152602481018390529251949591949116926344a6ecdd9260448082019391829003018186803b15801561187a57600080fd5b505afa15801561188e573d6000803e3d6000fd5b505050506040513d60208110156118a457600080fd5b50519392505050565b6001600160a01b031660009081526005602052604090205490565b6001600160a01b031660009081526005602052604090206001015490565b6001600160a01b038082166000908152600560209081526040808320546001546004805484516344a6ecdd60e01b815291820152602481018390529251949591949116926344a6ecdd9260448082019391829003018186803b15801561187a57600080fd5b6000546001600160a01b031681565b6001546001600160a01b031681565b600082611978575060006119c5565b8282028284828161198557fe5b04146119c25760405162461bcd60e51b8152600401808060200182810382526021815260200180612bb76021913960400191505060405180910390fd5b90505b92915050565b6000808211611a21576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611a2a57fe5b049392505050565b6000806000611a41868661232f565b600082815260208a905260409020919350915081611a95578054851115611a69578054611a6b565b845b8154909450611a7a9085611ade565b81556001810154611a8b9085611b3b565b6001820155611ad3565b8481600101541015611aab578060010154611aad565b845b6001820154909450611abf9085611ade565b60018201558054611ad09085611b3b565b81555b505050949350505050565b600082821115611b35576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000828201838110156119c2576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600080611ba46006858561208d565b90925090508115611c1357600080546040805163066e64fb60e31b81526001600160a01b0388811660048301529151919092169263337327d8926024808201939182900301818387803b158015611bfa57600080fd5b505af1158015611c0e573d6000803e3d6000fd5b505050505b8015611c7d57600080546040805163066e64fb60e31b81526001600160a01b0387811660048301529151919092169263337327d8926024808201939182900301818387803b158015611c6457600080fd5b505af1158015611c78573d6000803e3d6000fd5b505050505b6000821180611c8c5750600081115b15611d0157600080546040805163b3fb2e4b60e01b81526001600160a01b03888116600483015287811660248301529151919092169263b3fb2e4b926044808201939182900301818387803b158015611ce457600080fd5b505af1158015611cf8573d6000803e3d6000fd5b50505050611d6d565b6000805460408051631130807d60e21b81526001600160a01b0388811660048301528781166024830152915191909216926344c201f4926044808201939182900301818387803b158015611d5457600080fd5b505af1158015611d68573d6000803e3d6000fd5b505050505b50505050565b6000805460408051636b06fabd60e11b81526001600160a01b03878116600483015291518493929092169163d60df57a91602480820192602092909190829003018186803b158015611dc457600080fd5b505afa158015611dd8573d6000803e3d6000fd5b505050506040513d6020811015611dee57600080fd5b505160015460048054604080516306d062ad60e01b81529283019190915260248201849052519293506000926001600160a01b03909216916306d062ad91604480820192602092909190829003018186803b158015611e4c57600080fd5b505afa158015611e60573d6000803e3d6000fd5b505050506040513d6020811015611e7657600080fd5b50519050808411611e875783611e89565b805b6001600160a01b0387166000908152600560205260409020805491945090611eb19085611ade565b90556001600160a01b03851660009081526005602052604090206001810154611eda9085611b3b565b6001820155611eec600687898761216c565b604080516001600160a01b03808a1682528816602082015280820186905290517f2b70e0aa79138aba60947feefd37a911a99cccef16f61d352f5dd814f1ebb1c79181900360600190a15050509392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415611f8957611f8482826124a0565b611f94565b611f94838383612615565b505050565b33600090815260056020526040902054151580611fc757503360009081526005602052604090206001015415155b1561203057600080546040805163066e64fb60e31b815233600482015290516001600160a01b039092169263337327d89260248084019382900301818387803b15801561201357600080fd5b505af1158015612027573d6000803e3d6000fd5b5050505061208b565b60008054604080516301ce3a7f60e21b815233600482015290516001600160a01b0390921692630738e9fc9260248084019382900301818387803b15801561207757600080fd5b505af1158015611d6d573d6000803e3d6000fd5b565b60008060008061209d868661232f565b915091506120a9612b9c565b506000828152602088815260409182902082518084019093528054835260010154908201526120d88183612769565b805160209091015190999098509650505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161480156121305750804710155b156121445761213f828261278a565b611d6d565b6001600160a01b0382163014156121605761213f8484836128a2565b611d6d84848484612924565b600080612179858561232f565b60008281526020899052604090209193509150816121a457805461219d9085611b3b565b81556121b9565b60018101546121b39085611b3b565b60018201555b50505050505050565b6121cc3382611b95565b50565b60008060006121de878761232f565b600082815260208b90526040902091935091508161221e578054851115612206578054612208565b845b81549094506122179085611ade565b815561224e565b8481600101541015612234578060010154612236565b845b60018201549094506122489085611ade565b60018201555b612258888761232f565b600082815260208c905260409020919450925090508161228557805461227e9085611b3b565b815561229a565b60018101546122949085611b3b565b60018201555b50505095945050505050565b60008060006122b5868661232f565b600082815260208a9052604090209193509150816122f55780548511156122dd5780546122df565b845b81549094506122ee9085611ade565b8155611ad3565b848160010154101561230b57806001015461230d565b845b600182015490945061231f9085611ade565b6001820155505050949350505050565b600080826001600160a01b0316846001600160a01b0316141561238f576040805162461bcd60e51b81526020600482015260136024820152724964656e746963616c2061646472657373657360681b604482015290519081900360640190fd5b600080846001600160a01b0316866001600160a01b0316106123b25784866123b5565b85855b90925090506001600160a01b038216612407576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015290519081900360640190fd5b856001600160a01b0316826001600160a01b03161461246057604080516001600160a01b039384166020808301919091529390921682820152805180830382018152606090920190528051910120915060019050610a2d565b604080516001600160a01b039384166020808301919091529390921682820152805180830382018152606090920190528051910120915060009050610a2d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561250f57600080fd5b505afa158015612523573d6000803e3d6000fd5b505050506040513d602081101561253957600080fd5b5051905081811015612587576040805162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e7420574554483960701b604482015290519081900360640190fd5b8015611f94577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156125f357600080fd5b505af1158015612607573d6000803e3d6000fd5b50505050611f948383612a81565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b178152925182516000946060949389169392918291908083835b602083106126925780518252601f199092019160209182019101612673565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146126f4576040519150601f19603f3d011682016040523d82523d6000602084013e6126f9565b606091505b5091509150818015612727575080511580612727575080806020019051602081101561272457600080fd5b50515b6127625760405162461bcd60e51b8152600401808060200182810382526024815260200180612bfb6024913960400191505060405180910390fd5b5050505050565b612771612b9c565b81156127835782516020840180518552525b5090919050565b3490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156127e857600080fd5b505af11580156127fc573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561287857600080fd5b505af115801561288c573d6000803e3d6000fd5b505050506040513d6020811015611d6d57600080fd5b604080516001600160a01b038481166024830152306044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17815292518251600094606094938916939291829190808383602083106126925780518252601f199092019160209182019101612673565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17815292518251600094606094938a169392918291908083835b602083106129a95780518252601f19909201916020918201910161298a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612a0b576040519150601f19603f3d011682016040523d82523d6000602084013e612a10565b606091505b5091509150818015612a3e575080511580612a3e5750808060200190516020811015612a3b57600080fd5b50515b612a795760405162461bcd60e51b8152600401808060200182810382526024815260200180612bfb6024913960400191505060405180910390fd5b505050505050565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b60208310612acd5780518252601f199092019160209182019101612aae565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612b2f576040519150601f19603f3d011682016040523d82523d6000602084013e612b34565b606091505b5050905080611f945760405162461bcd60e51b8152600401808060200182810382526023815260200180612bd86023913960400191505060405180910390fd5b6040518060800160405280600081526020016000815260200160008152602001600081525090565b60405180604001604052806000815260200160008152509056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a2646970667358221220d9af8713b707347a1188fc5eefe0ae22286341f031801b7a8647732aaae4b44a64736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106101235760003560e01c80639d76ea58116100a0578063d1eb9ea411610064578063d1eb9ea4146104a7578063d49ab22c146104da578063d98e91851461050d578063e361cdb014610540578063e5a148131461055557610193565b80639d76ea58146103ea578063a5f7379f146103ff578063b108daa614610414578063b6b55f2514610457578063bb8eaa3c1461047457610193565b80634aa4a4fc116100e75780634aa4a4fc146102df578063788169af146103105780638da5cb5b146103595780639470b0bd1461036e57806398c9e43a146103a757610193565b806326c01303146101985780632e1a7d4d146101ed57806340f895ea1461021757806347e7ef241461026b57806348cb13d4146102a457610193565b3661019357336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610191576040805162461bcd60e51b81526020600482015260096024820152684e6f7420574554483960b81b604482015290519081900360640190fd5b005b600080fd5b3480156101a457600080fd5b506101db600480360360608110156101bb57600080fd5b506001600160a01b0381358116916020810135909116906040013561056a565b60408051918252519081900360200190f35b3480156101f957600080fd5b506101916004803603602081101561021057600080fd5b5035610773565b34801561022357600080fd5b506102526004803603604081101561023a57600080fd5b506001600160a01b0381358116916020013516610a19565b6040805192835260208301919091528051918290030190f35b34801561027757600080fd5b506101916004803603604081101561028e57600080fd5b506001600160a01b038135169060200135610a34565b3480156102b057600080fd5b50610252600480360360408110156102c757600080fd5b506001600160a01b0381358116916020013516610bd6565b3480156102eb57600080fd5b506102f4610dda565b604080516001600160a01b039092168252519081900360200190f35b34801561031c57600080fd5b506101db6004803603608081101561033357600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135610dfe565b34801561036557600080fd5b506102f4610fb2565b34801561037a57600080fd5b506101916004803603604081101561039157600080fd5b506001600160a01b038135169060200135610fc1565b3480156103b357600080fd5b506101db600480360360608110156103ca57600080fd5b506001600160a01b03813581169160208101359091169060400135611293565b3480156103f657600080fd5b506102f461147f565b34801561040b57600080fd5b506101db61148e565b34801561042057600080fd5b506101db6004803603606081101561043757600080fd5b506001600160a01b03813581169160208101359091169060400135611494565b6101916004803603602081101561046d57600080fd5b5035611691565b34801561048057600080fd5b506101db6004803603602081101561049757600080fd5b50356001600160a01b0316611811565b3480156104b357600080fd5b506101db600480360360208110156104ca57600080fd5b50356001600160a01b03166118ad565b3480156104e657600080fd5b506101db600480360360208110156104fd57600080fd5b50356001600160a01b03166118c8565b34801561051957600080fd5b506101db6004803603602081101561053057600080fd5b50356001600160a01b03166118e6565b34801561054c57600080fd5b506102f461194b565b34801561056157600080fd5b506102f461195a565b600080546001600160a01b031633146105bc576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4143434545535360881b604482015290519081900360640190fd5b6001546004805460408051630ba1ffe760e11b815292830191909152516000926001600160a01b031691631743ffce916024808301926020929190829003018186803b15801561060b57600080fd5b505afa15801561061f573d6000803e3d6000fd5b505050506040513d602081101561063557600080fd5b5051905060006106578261065186670de0b6b3a7640000611969565b906119cb565b905060006106686006888885611a32565b6001600160a01b03881660009081526005602052604090206001810154919250906106939083611ade565b6001918201556001600160a01b0387166000908152600560205260409020908101546106bf9083611b3b565b6001820155811561071f576106d48888611b95565b604080516001600160a01b03808b1682528916602082015280820184905290517faef3faf684172084346f7dc2cc3bb1328d1cc23caec12dd9a82d4a4e56c00b179181900360600190a15b600061072b8484611ade565b905080156107505760006107408a8a84611d73565b905061074c8282611ade565b9150505b610766670de0b6b3a76400006106518388611969565b9998505050505050505050565b6000546040805163221c053f60e01b815233600482015290516001600160a01b039092169163221c053f91602480820192602092909190829003018186803b1580156107be57600080fd5b505afa1580156107d2573d6000803e3d6000fd5b505050506040513d60208110156107e857600080fd5b5051610831576040805162461bcd60e51b81526020600482015260136024820152722727a72fa922a3a4a9aa22a922a22faaa9a2a960691b604482015290519081900360640190fd5b60008111610877576040805162461bcd60e51b815260206004820152600e60248201526d1253959053125117d05353d5539560921b604482015290519081900360640190fd5b6000805460408051636b06fabd60e11b8152336004820181905291519193926001600160a01b03169163d60df57a91602480820192602092909190829003018186803b1580156108c657600080fd5b505afa1580156108da573d6000803e3d6000fd5b505050506040513d60208110156108f057600080fd5b505160015460048054604080516306d062ad60e01b81529283019190915260248201849052519293506000926001600160a01b03909216916306d062ad91604480820192602092909190829003018186803b15801561094e57600080fd5b505afa158015610962573d6000803e3d6000fd5b505050506040513d602081101561097857600080fd5b50519050600081851161098b578461098d565b815b6001600160a01b03851660009081526005602052604090208054919250906109b59083611ade565b81556003546109ce906001600160a01b03163384611f40565b6109d6611f99565b604080513381526020810184905281517f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364929181900390910190a1505050505050565b600080610a286006858561208d565b915091505b9250929050565b6000546040805163221c053f60e01b815233600482015290516001600160a01b039092169163221c053f91602480820192602092909190829003018186803b158015610a7f57600080fd5b505afa158015610a93573d6000803e3d6000fd5b505050506040513d6020811015610aa957600080fd5b5051610af2576040805162461bcd60e51b81526020600482015260136024820152722727a72fa922a3a4a9aa22a922a22faaa9a2a960691b604482015290519081900360640190fd5b60008111610b38576040805162461bcd60e51b815260206004820152600e60248201526d1253959053125117d05353d5539560921b604482015290519081900360640190fd5b600354610b50906001600160a01b03163330846120ef565b610b5d600633848461216c565b3360009081526005602052604090206001810154610b7b9083611b3b565b6001820155610b89836121c2565b604080513381526001600160a01b038516602082015280820184905290517f9721b956489a518f6d0a682e2456129cc27982178d1f92f57e5dec7b4282e2bc9181900360600190a1505050565b600080600080610be86006878761208d565b6040805160028082526060808301845294965092945091906020830190803683370190505090508281600081518110610c1d57fe5b6020026020010181815250508181600181518110610c3757fe5b602090810291909101810191909152600154600480546040805163cc106de160e01b8152928301828152602484019182528651604485015286516001600160a01b039095169563cc106de19593948894929392606490910191858101910280838360005b83811015610cb3578181015183820152602001610c9b565b50505050905001935050505060006040518083038186803b158015610cd757600080fd5b505afa158015610ceb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610d1457600080fd5b8101908080516040519392919084640100000000821115610d3457600080fd5b908301906020820185811115610d4957600080fd5b8251866020820283011164010000000082111715610d6657600080fd5b82525081516020918201928201910280838360005b83811015610d93578181015183820152602001610d7b565b50505050905001604052505050905080600081518110610daf57fe5b602002602001015181600181518110610dc457fe5b6020026020010151945094505050509250929050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080546001600160a01b03163314610e50576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4143434545535360881b604482015290519081900360640190fd5b610e58612b74565b6001546004805460408051630ba1ffe760e11b815292830191909152516001600160a01b0390921691631743ffce91602480820192602092909190829003018186803b158015610ea757600080fd5b505afa158015610ebb573d6000803e3d6000fd5b505050506040513d6020811015610ed157600080fd5b5051808252610eec9061065185670de0b6b3a7640000611969565b60208201819052610f05906006908890889088906121cf565b604082018190526020820151610f1a91611ade565b6060820152610f298686611b95565b610f338685611b95565b60408082015181516001600160a01b03808a1682528089166020830152871681840152606081019190915290517f3f353462d6e0e00e5d479a8e53bbacf36843f1eb1e577d15d107ebefe5cd533e9181900360800190a180516060820151610fa891670de0b6b3a76400009161065191611969565b9695505050505050565b6002546001600160a01b031681565b6000546040805163221c053f60e01b815233600482015290516001600160a01b039092169163221c053f91602480820192602092909190829003018186803b15801561100c57600080fd5b505afa158015611020573d6000803e3d6000fd5b505050506040513d602081101561103657600080fd5b505161107f576040805162461bcd60e51b81526020600482015260136024820152722727a72fa922a3a4a9aa22a922a22faaa9a2a960691b604482015290519081900360640190fd5b600081116110c5576040805162461bcd60e51b815260206004820152600e60248201526d1253959053125117d05353d5539560921b604482015290519081900360640190fd5b6000805460408051635a0c753d60e11b815233600482018190526001600160a01b0387811660248401528351919594169263b418ea7a9260448082019391829003018186803b15801561111757600080fd5b505afa15801561112b573d6000803e3d6000fd5b505050506040513d604081101561114157600080fd5b505160015460048054604080516306d062ad60e01b81529283019190915260248201849052519293506000926001600160a01b03909216916306d062ad91604480820192602092909190829003018186803b15801561119f57600080fd5b505afa1580156111b3573d6000803e3d6000fd5b505050506040513d60208110156111c957600080fd5b5051905060008185116111dc57846111de565b815b905060006111ef60068689856122a6565b6001600160a01b038616600090815260056020526040902060018101549192509061121a9083611ade565b6001820155600354611236906001600160a01b03163384611f40565b61123f886121c2565b604080516001600160a01b0380891682528a16602082015280820184905290517f256d352c9624d670977a706659e9ef3cfa4ca71dd1cc609e23245dd857e16c3f9181900360600190a15050505050505050565b600080546001600160a01b031633146112e5576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4143434545535360881b604482015290519081900360640190fd5b6112ed612b74565b6001546004805460408051630ba1ffe760e11b815292830191909152516001600160a01b0390921691631743ffce91602480820192602092909190829003018186803b15801561133c57600080fd5b505afa158015611350573d6000803e3d6000fd5b505050506040513d602081101561136657600080fd5b50518082526113819061065185670de0b6b3a7640000611969565b6020820181905261139890600690879087906122a6565b6040820181905215611442576001600160a01b038516600090815260056020526040908190209082015160018201546113d091611ade565b6001820155604082015181546113e591611b3b565b81556113f18686611b95565b60408083015181516001600160a01b03808a168252881660208201528083019190915290517f628c86b641d0481cc9ad4f394a1c56153ac2e181c46a5da991068574adb524019181900360600190a1505b6040810151602082015161145591611ade565b60608201819052815161147691670de0b6b3a7640000916106519190611969565b95945050505050565b6003546001600160a01b031681565b60045481565b600080546001600160a01b031633146114e6576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4143434545535360881b604482015290519081900360640190fd5b6114ee612b74565b6001546004805460408051630ba1ffe760e11b815292830191909152516001600160a01b0390921691631743ffce91602480820192602092909190829003018186803b15801561153d57600080fd5b505afa158015611551573d6000803e3d6000fd5b505050506040513d602081101561156757600080fd5b50518082526115829061065185670de0b6b3a7640000611969565b60208083019182526001600160a01b03871660009081526005909152604090209051815410156115b35780546115b9565b81602001515b604083018190521561165d57604082015181546115d591611ade565b8155604082015160018201546115ea91611b3b565b816001018190555061160360068787856040015161216c565b61160d8686611b95565b60408083015181516001600160a01b03808a168252881660208201528083019190915290517fe3d9367ba2bfd4023910a3324b74e17931c8b3a005b5fac91b462449e48eea7e9181900360600190a15b6040820151602083015161167091611ade565b606083018190528251610fa891670de0b6b3a7640000916106519190611969565b6000546040805163221c053f60e01b815233600482015290516001600160a01b039092169163221c053f91602480820192602092909190829003018186803b1580156116dc57600080fd5b505afa1580156116f0573d6000803e3d6000fd5b505050506040513d602081101561170657600080fd5b505161174f576040805162461bcd60e51b81526020600482015260136024820152722727a72fa922a3a4a9aa22a922a22faaa9a2a960691b604482015290519081900360640190fd5b60008111611795576040805162461bcd60e51b815260206004820152600e60248201526d1253959053125117d05353d5539560921b604482015290519081900360640190fd5b6003546117ad906001600160a01b03163330846120ef565b33600090815260056020526040902080546117c89083611b3b565b81556117d2611f99565b604080513381526020810184905281517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c929181900390910190a15050565b6001600160a01b03808216600090815260056020908152604080832060019081015490546004805484516344a6ecdd60e01b815291820152602481018390529251949591949116926344a6ecdd9260448082019391829003018186803b15801561187a57600080fd5b505afa15801561188e573d6000803e3d6000fd5b505050506040513d60208110156118a457600080fd5b50519392505050565b6001600160a01b031660009081526005602052604090205490565b6001600160a01b031660009081526005602052604090206001015490565b6001600160a01b038082166000908152600560209081526040808320546001546004805484516344a6ecdd60e01b815291820152602481018390529251949591949116926344a6ecdd9260448082019391829003018186803b15801561187a57600080fd5b6000546001600160a01b031681565b6001546001600160a01b031681565b600082611978575060006119c5565b8282028284828161198557fe5b04146119c25760405162461bcd60e51b8152600401808060200182810382526021815260200180612bb76021913960400191505060405180910390fd5b90505b92915050565b6000808211611a21576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611a2a57fe5b049392505050565b6000806000611a41868661232f565b600082815260208a905260409020919350915081611a95578054851115611a69578054611a6b565b845b8154909450611a7a9085611ade565b81556001810154611a8b9085611b3b565b6001820155611ad3565b8481600101541015611aab578060010154611aad565b845b6001820154909450611abf9085611ade565b60018201558054611ad09085611b3b565b81555b505050949350505050565b600082821115611b35576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000828201838110156119c2576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600080611ba46006858561208d565b90925090508115611c1357600080546040805163066e64fb60e31b81526001600160a01b0388811660048301529151919092169263337327d8926024808201939182900301818387803b158015611bfa57600080fd5b505af1158015611c0e573d6000803e3d6000fd5b505050505b8015611c7d57600080546040805163066e64fb60e31b81526001600160a01b0387811660048301529151919092169263337327d8926024808201939182900301818387803b158015611c6457600080fd5b505af1158015611c78573d6000803e3d6000fd5b505050505b6000821180611c8c5750600081115b15611d0157600080546040805163b3fb2e4b60e01b81526001600160a01b03888116600483015287811660248301529151919092169263b3fb2e4b926044808201939182900301818387803b158015611ce457600080fd5b505af1158015611cf8573d6000803e3d6000fd5b50505050611d6d565b6000805460408051631130807d60e21b81526001600160a01b0388811660048301528781166024830152915191909216926344c201f4926044808201939182900301818387803b158015611d5457600080fd5b505af1158015611d68573d6000803e3d6000fd5b505050505b50505050565b6000805460408051636b06fabd60e11b81526001600160a01b03878116600483015291518493929092169163d60df57a91602480820192602092909190829003018186803b158015611dc457600080fd5b505afa158015611dd8573d6000803e3d6000fd5b505050506040513d6020811015611dee57600080fd5b505160015460048054604080516306d062ad60e01b81529283019190915260248201849052519293506000926001600160a01b03909216916306d062ad91604480820192602092909190829003018186803b158015611e4c57600080fd5b505afa158015611e60573d6000803e3d6000fd5b505050506040513d6020811015611e7657600080fd5b50519050808411611e875783611e89565b805b6001600160a01b0387166000908152600560205260409020805491945090611eb19085611ade565b90556001600160a01b03851660009081526005602052604090206001810154611eda9085611b3b565b6001820155611eec600687898761216c565b604080516001600160a01b03808a1682528816602082015280820186905290517f2b70e0aa79138aba60947feefd37a911a99cccef16f61d352f5dd814f1ebb1c79181900360600190a15050509392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415611f8957611f8482826124a0565b611f94565b611f94838383612615565b505050565b33600090815260056020526040902054151580611fc757503360009081526005602052604090206001015415155b1561203057600080546040805163066e64fb60e31b815233600482015290516001600160a01b039092169263337327d89260248084019382900301818387803b15801561201357600080fd5b505af1158015612027573d6000803e3d6000fd5b5050505061208b565b60008054604080516301ce3a7f60e21b815233600482015290516001600160a01b0390921692630738e9fc9260248084019382900301818387803b15801561207757600080fd5b505af1158015611d6d573d6000803e3d6000fd5b565b60008060008061209d868661232f565b915091506120a9612b9c565b506000828152602088815260409182902082518084019093528054835260010154908201526120d88183612769565b805160209091015190999098509650505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161480156121305750804710155b156121445761213f828261278a565b611d6d565b6001600160a01b0382163014156121605761213f8484836128a2565b611d6d84848484612924565b600080612179858561232f565b60008281526020899052604090209193509150816121a457805461219d9085611b3b565b81556121b9565b60018101546121b39085611b3b565b60018201555b50505050505050565b6121cc3382611b95565b50565b60008060006121de878761232f565b600082815260208b90526040902091935091508161221e578054851115612206578054612208565b845b81549094506122179085611ade565b815561224e565b8481600101541015612234578060010154612236565b845b60018201549094506122489085611ade565b60018201555b612258888761232f565b600082815260208c905260409020919450925090508161228557805461227e9085611b3b565b815561229a565b60018101546122949085611b3b565b60018201555b50505095945050505050565b60008060006122b5868661232f565b600082815260208a9052604090209193509150816122f55780548511156122dd5780546122df565b845b81549094506122ee9085611ade565b8155611ad3565b848160010154101561230b57806001015461230d565b845b600182015490945061231f9085611ade565b6001820155505050949350505050565b600080826001600160a01b0316846001600160a01b0316141561238f576040805162461bcd60e51b81526020600482015260136024820152724964656e746963616c2061646472657373657360681b604482015290519081900360640190fd5b600080846001600160a01b0316866001600160a01b0316106123b25784866123b5565b85855b90925090506001600160a01b038216612407576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015290519081900360640190fd5b856001600160a01b0316826001600160a01b03161461246057604080516001600160a01b039384166020808301919091529390921682820152805180830382018152606090920190528051910120915060019050610a2d565b604080516001600160a01b039384166020808301919091529390921682820152805180830382018152606090920190528051910120915060009050610a2d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561250f57600080fd5b505afa158015612523573d6000803e3d6000fd5b505050506040513d602081101561253957600080fd5b5051905081811015612587576040805162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e7420574554483960701b604482015290519081900360640190fd5b8015611f94577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156125f357600080fd5b505af1158015612607573d6000803e3d6000fd5b50505050611f948383612a81565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b178152925182516000946060949389169392918291908083835b602083106126925780518252601f199092019160209182019101612673565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146126f4576040519150601f19603f3d011682016040523d82523d6000602084013e6126f9565b606091505b5091509150818015612727575080511580612727575080806020019051602081101561272457600080fd5b50515b6127625760405162461bcd60e51b8152600401808060200182810382526024815260200180612bfb6024913960400191505060405180910390fd5b5050505050565b612771612b9c565b81156127835782516020840180518552525b5090919050565b3490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156127e857600080fd5b505af11580156127fc573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561287857600080fd5b505af115801561288c573d6000803e3d6000fd5b505050506040513d6020811015611d6d57600080fd5b604080516001600160a01b038481166024830152306044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17815292518251600094606094938916939291829190808383602083106126925780518252601f199092019160209182019101612673565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17815292518251600094606094938a169392918291908083835b602083106129a95780518252601f19909201916020918201910161298a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612a0b576040519150601f19603f3d011682016040523d82523d6000602084013e612a10565b606091505b5091509150818015612a3e575080511580612a3e5750808060200190516020811015612a3b57600080fd5b50515b612a795760405162461bcd60e51b8152600401808060200182810382526024815260200180612bfb6024913960400191505060405180910390fd5b505050505050565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b60208310612acd5780518252601f199092019160209182019101612aae565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612b2f576040519150601f19603f3d011682016040523d82523d6000602084013e612b34565b606091505b5050905080611f945760405162461bcd60e51b8152600401808060200182810382526023815260200180612bd86023913960400191505060405180910390fd5b6040518060800160405280600081526020016000815260200160008152602001600081525090565b60405180604001604052806000815260200160008152509056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a2646970667358221220d9af8713b707347a1188fc5eefe0ae22286341f031801b7a8647732aaae4b44a64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Contract constructor function."
      },
      "deposit(address,uint256)": {
        "details": "Deposit collateral funds into bilateral position against counterparty",
        "params": {
          "_counterparty": "Counterparty address in bilateral position"
        }
      },
      "deposit(uint256)": {
        "details": "Trigers to deposit funds by the msg.sender into collateral book",
        "params": {
          "_amount": "Number of funds to deposit"
        }
      },
      "getIndependentCollateral(address)": {
        "params": {
          "_user": "Address of collateral user"
        }
      },
      "getIndependentCollateralInETH(address)": {
        "params": {
          "_user": "Address of collateral user"
        }
      },
      "getLockedCollateral(address)": {
        "params": {
          "_user": "Address of collateral user"
        }
      },
      "getLockedCollateral(address,address)": {
        "params": {
          "_partyA": "First counterparty address",
          "_partyB": "Second counterparty address."
        }
      },
      "getLockedCollateralInETH(address)": {
        "params": {
          "_user": "Address of collateral user"
        }
      },
      "getLockedCollateralInETH(address,address)": {
        "params": {
          "_partyA": "First counterparty address",
          "_partyB": "Second counterparty address."
        }
      },
      "liquidate(address,address,uint256)": {
        "details": "Liquidates collateral from bilateral position between parties returns the amount of ETH to be liquidated in other vault if all available funds have been liquidated here",
        "params": {
          "_amountETH": "Liquidation amount in ETH",
          "_from": "Address for liquidating collateral from",
          "_to": "Address for sending collateral to"
        }
      },
      "rebalanceBetween(address,address,address,uint256)": {
        "details": "Rebalances collateral between 2 different bilateral positions, as it's executed by collateral aggregator function returns the amount of ETH left to rebalance for other collateral vaults",
        "params": {
          "_amountETH": "Amount of funds in ETH required to rebalance",
          "_fromParty": "Counterparty address to rebalance from",
          "_toParty": "Counterparty address to rebalance to",
          "_user": "Main user address to rebalance collateral from"
        },
        "returns": {
          "_0": "Amount of funds in ETH left to rebalance for other vault"
        }
      },
      "rebalanceFrom(address,address,uint256)": {
        "details": "Rebalances collateral from bilateral position to user's book, as it's executed by collateral aggregator function returns the amount of ETH left to rebalance for other collateral vaults",
        "params": {
          "_amountETH": "Amount of funds in ETH required to rebalance",
          "_counterparty": "Counterparty address in bilateral position",
          "_user": "Main user address to rebalance collateral from"
        },
        "returns": {
          "_0": "Amount of funds in ETH left to rebalance for other vault"
        }
      },
      "rebalanceTo(address,address,uint256)": {
        "details": "Rebalances collateral from user's book to bilateral position, as it's executed by collateral aggregator function returns the amount of ETH left to rebalance for other collateral vaults",
        "params": {
          "_amountETH": "Amount of funds in ETH required to rebalance",
          "_counterparty": "Counterparty address in bilateral position",
          "_user": "Main user address to rebalance collateral from"
        },
        "returns": {
          "_0": "Amount of funds in ETH left to rebalance for other vault"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "Number of funds to withdraw."
        }
      },
      "withdrawFrom(address,uint256)": {
        "params": {
          "_amount": "Number of funds to withdraw.",
          "_counterparty": "Counterparty address."
        }
      }
    },
    "title": "CollateralVault is the main implementation contract for storing and keeping user's collateral This contract allows users to deposit and withdraw their funds to fulfill their collateral obligations against different trades. CollateralVault is working with ETH or ERC20 token with specified on deployment `tokenAddress`. CollateralAggregator uses independent Collateral vaults for rebalancing collateral between global books and bilateral positions, and liquidating collateral while performing single or multi-deal liquidation.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": "sets contract deployer as owner of this contract and links with collateral aggregator and currency controller contracts",
      "deposit(address,uint256)": {
        "notice": "payable function increases locked collateral by msg.value"
      },
      "getIndependentCollateral(address)": {
        "notice": "Returns independent collateral from `_user` collateral book"
      },
      "getIndependentCollateralInETH(address)": {
        "notice": "Returns independent collateral from `_user` collateral book converted to ETH"
      },
      "getLockedCollateral(address)": {
        "notice": "Returns locked collateral by `_user` in collateral book"
      },
      "getLockedCollateral(address,address)": {
        "notice": "Returns locked collateral by counterparties in a bilateral position in native `ccy`"
      },
      "getLockedCollateralInETH(address)": {
        "notice": "Returns locked collateral by `_user` in collateral book converted to ETH"
      },
      "getLockedCollateralInETH(address,address)": {
        "notice": "Returns locked collateral by counterparties in a bilateral position converted to ETH"
      },
      "liquidate(address,address,uint256)": {
        "notice": "Trigers only be Loan contract"
      },
      "withdraw(uint256)": {
        "notice": "Trigers to withdraw funds by the msg.sender from non-locked funds"
      },
      "withdrawFrom(address,uint256)": {
        "notice": "Trigers to withdraw funds from bilateral position between msg.sender and _counterparty"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10431,
        "contract": "contracts/CollateralVault.sol:CollateralVault",
        "label": "collateralAggregator",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ICollateralAggregator)20605"
      },
      {
        "astId": 10433,
        "contract": "contracts/CollateralVault.sol:CollateralVault",
        "label": "currencyController",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICurrencyController)21317"
      },
      {
        "astId": 10436,
        "contract": "contracts/CollateralVault.sol:CollateralVault",
        "label": "owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10439,
        "contract": "contracts/CollateralVault.sol:CollateralVault",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10442,
        "contract": "contracts/CollateralVault.sol:CollateralVault",
        "label": "ccy",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 10446,
        "contract": "contracts/CollateralVault.sol:CollateralVault",
        "label": "books",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Book)10429_storage)"
      },
      {
        "astId": 10450,
        "contract": "contracts/CollateralVault.sol:CollateralVault",
        "label": "_positions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(Position)24891_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICollateralAggregator)20605": {
        "encoding": "inplace",
        "label": "contract ICollateralAggregator",
        "numberOfBytes": "20"
      },
      "t_contract(ICurrencyController)21317": {
        "encoding": "inplace",
        "label": "contract ICurrencyController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Book)10429_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CollateralVault.Book)",
        "numberOfBytes": "32",
        "value": "t_struct(Book)10429_storage"
      },
      "t_mapping(t_bytes32,t_struct(Position)24891_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct CollateralPosition.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)24891_storage"
      },
      "t_struct(Book)10429_storage": {
        "encoding": "inplace",
        "label": "struct CollateralVault.Book",
        "members": [
          {
            "astId": 10426,
            "contract": "contracts/CollateralVault.sol:CollateralVault",
            "label": "independentAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10428,
            "contract": "contracts/CollateralVault.sol:CollateralVault",
            "label": "lockedCollateral",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Position)24891_storage": {
        "encoding": "inplace",
        "label": "struct CollateralPosition.Position",
        "members": [
          {
            "astId": 24888,
            "contract": "contracts/CollateralVault.sol:CollateralVault",
            "label": "lockedCollateralA",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 24890,
            "contract": "contracts/CollateralVault.sol:CollateralVault",
            "label": "lockedCollateralB",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}