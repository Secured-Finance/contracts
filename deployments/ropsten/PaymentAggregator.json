{
  "address": "0xbf5c6641ab47307F48Ca74644011B8a76e37241b",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "timeSlot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "year",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "month",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment1",
          "type": "uint256"
        }
      ],
      "name": "RegisterPayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "timeSlot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "year",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "month",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment1",
          "type": "uint256"
        }
      ],
      "name": "RemovePayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "timeSlot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "year",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "month",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "txHash",
          "type": "bytes32"
        }
      ],
      "name": "SettlePayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "closeOutNetting",
          "type": "address"
        }
      ],
      "name": "UpdateCloseOutNetting",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "closeOutNetting",
          "type": "address"
        }
      ],
      "name": "UpdateMarkToMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "timeSlot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "year",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "month",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "txHash",
          "type": "bytes32"
        }
      ],
      "name": "VerifyPayment",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "addPaymentAggregatorUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "slotPosition",
          "type": "bytes32"
        }
      ],
      "name": "getDealsFromSlot",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "year",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "month",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        }
      ],
      "name": "getTimeSlotByDate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalPayment0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalPayment1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "netPayment",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "flipped",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "paymentProof",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "verificationParty",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isSettled",
              "type": "bool"
            }
          ],
          "internalType": "struct TimeSlot.Slot",
          "name": "timeSlot",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "getTimeSlotBySlotId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalPayment0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalPayment1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "netPayment",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "flipped",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "paymentProof",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "verificationParty",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isSettled",
              "type": "bool"
            }
          ],
          "internalType": "struct TimeSlot.Slot",
          "name": "timeSlot",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isPaymentAggregatorUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "isSettled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "timestamps",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "payments0",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "payments1",
          "type": "uint256[]"
        }
      ],
      "name": "registerPayments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "removePaymentAggregatorUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "timestamps",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "payments0",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "payments1",
          "type": "uint256[]"
        }
      ],
      "name": "removePayments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "setCloseOutNetting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "setMarkToMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "txHash",
          "type": "bytes32"
        }
      ],
      "name": "settlePayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settlementWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "txHash",
          "type": "bytes32"
        }
      ],
      "name": "verifyPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc6ab7dacb16c7942cffbe4340058c68e4c92972f7f4a366b6ce315a0e9db7ac3",
  "receipt": {
    "to": null,
    "from": "0x57AB42d4fa756b6956b0cAf986a5f53bA90D9e28",
    "contractAddress": "0xbf5c6641ab47307F48Ca74644011B8a76e37241b",
    "transactionIndex": 37,
    "gasUsed": "1978699",
    "logsBloom": "0x
    "blockHash": "0x9bde23d6479c5dd5aefc42766f991776b45b23f50fc37ab3972219e0ee39be7d",
    "transactionHash": "0xc6ab7dacb16c7942cffbe4340058c68e4c92972f7f4a366b6ce315a0e9db7ac3",
    "logs": [],
    "blockNumber": 12164574,
    "cumulativeGasUsed": "2900846",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "48d264388c4204a72ee447cb1af8bee3",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"timeSlot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment1\",\"type\":\"uint256\"}],\"name\":\"RegisterPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"timeSlot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment1\",\"type\":\"uint256\"}],\"name\":\"RemovePayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"timeSlot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"SettlePayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"closeOutNetting\",\"type\":\"address\"}],\"name\":\"UpdateCloseOutNetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"closeOutNetting\",\"type\":\"address\"}],\"name\":\"UpdateMarkToMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"timeSlot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"VerifyPayment\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addPaymentAggregatorUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"slotPosition\",\"type\":\"bytes32\"}],\"name\":\"getDealsFromSlot\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"getTimeSlotByDate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalPayment0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPayment1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"netPayment\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flipped\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"paymentProof\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"verificationParty\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"}],\"internalType\":\"struct TimeSlot.Slot\",\"name\":\"timeSlot\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"getTimeSlotBySlotId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalPayment0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPayment1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"netPayment\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flipped\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"paymentProof\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"verificationParty\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"}],\"internalType\":\"struct TimeSlot.Slot\",\"name\":\"timeSlot\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isPaymentAggregatorUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isSettled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"timestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"payments0\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"payments1\",\"type\":\"uint256[]\"}],\"name\":\"registerPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removePaymentAggregatorUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"timestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"payments0\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"payments1\",\"type\":\"uint256[]\"}],\"name\":\"removePayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setCloseOutNetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setMarkToMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"settlePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"verifyPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPaymentAggregatorUser(address)\":{\"details\":\"Trigers to add contract address to payment aggregator users address set\",\"params\":{\"_user\":\"Payment aggregator user smart contract address\"}},\"constructor\":{\"details\":\"Contract constructor function.\"},\"getTimeSlotByDate(address,address,bytes32,uint256,uint256,uint256)\":{\"details\":\"Returns the time slot between parties using slot id.\",\"params\":{\"ccy\":\"Main payment settlement currency\",\"party0\":\"First counterparty address\",\"party1\":\"Second counterparty address\"}},\"getTimeSlotBySlotId(address,address,bytes32,bytes32)\":{\"details\":\"Returns the time slot between parties using slot id.\",\"params\":{\"ccy\":\"Main payment settlement currency\",\"party0\":\"First counterparty address\",\"party1\":\"Second counterparty address\",\"slot\":\"TimeSlot position\"}},\"isPaymentAggregatorUser(address)\":{\"details\":\"Trigers to check if provided `addr` is a payment aggregator user from address set\",\"params\":{\"_user\":\"Contract address to check if it's a payment aggregator user\"}},\"isSettled(address,address,bytes32,uint256)\":{\"details\":\"Triggers settlement status of the time slot\",\"params\":{\"ccy\":\"Main payment settlement currency\",\"party0\":\"First counterparty address\",\"party1\":\"Second counterparty address\",\"timestamp\":\"TimeSlot timestamp\"},\"returns\":{\"status\":\"Boolean if slot was settled\"}},\"registerPayments(address,address,bytes32,bytes32,uint256[],uint256[],uint256[])\":{\"details\":\"Triggered to add new payments for a deal\",\"params\":{\"ccy\":\"Main settlement currency in a deal\",\"dealId\":\"Deal unique ID with prefix\",\"party0\":\"First counterparty address\",\"party1\":\"Second counterparty address\",\"payments0\":\"Array of cashflows owed by the first party\",\"payments1\":\"Array of cashflows owed by the second party\",\"timestamps\":\"Array of timestamps for timeslot identification\"}},\"removePaymentAggregatorUser(address)\":{\"details\":\"Trigers to remove payment aggregator user from address set\",\"params\":{\"_user\":\"Payment aggregator user smart contract address\"}},\"removePayments(address,address,bytes32,bytes32,uint256[],uint256[],uint256[])\":{\"details\":\"Triggered to remove existing payments for a deal\",\"params\":{\"ccy\":\"Main settlement currency in a deal\",\"dealId\":\"Deal unique ID with prefix\",\"party0\":\"First counterparty address\",\"party1\":\"Second counterparty address\",\"payments0\":\"Array of cashflows owed by the first party\",\"payments1\":\"Array of cashflows owed by the second party\",\"timestamps\":\"Array of timestamps for timeslot identification\"}},\"setCloseOutNetting(address)\":{\"details\":\"Trigers to set close out netting smart contract\",\"params\":{\"_contract\":\"CloseOutNetting smart contract address\"}},\"setMarkToMarket(address)\":{\"details\":\"Trigers to set mark to market smart contract\",\"params\":{\"_contract\":\"MarkToMarket smart contract address\"}},\"settlePayment(address,address,bytes32,uint256,bytes32)\":{\"details\":\"External function to settle payment using timestamp to identify TimeSlot.\",\"params\":{\"ccy\":\"Main payment settlement currency\",\"counterparty\":\"Counterparty address\",\"timestamp\":\"Main timestamp for TimeSlot\",\"txHash\":\"Main payment settlement currency\",\"verifier\":\"Payment settlement verifier address\"}},\"verifyPayment(address,address,bytes32,uint256,uint256,bytes32)\":{\"details\":\"External function to verify payment by msg.sender, uses timestamp to identify TimeSlot.\",\"params\":{\"ccy\":\"Main payment settlement currency\",\"counterparty\":\"Counterparty address\",\"payment\":\"Main payment settlement currency\",\"timestamp\":\"Main timestamp for TimeSlot\",\"txHash\":\"Main payment settlement currency\",\"verifier\":\"Payment verifier address\"}}},\"title\":\"Payment Aggregator contract is used to aggregate payments between counterparties in bilateral relationships. Those payments are defined per counterparties addresses (packed into one bytes32), main settlement currency and payment date. Contract linked to all product based contracts like Loan, Swap, etc.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPaymentAggregatorUser(address)\":{\"notice\":\"Trigers only be contract ownerReverts on saving 0x0 address\"},\"constructor\":\"sets contract deployer as owner of this contract\",\"removePaymentAggregatorUser(address)\":{\"notice\":\"Trigers only be contract ownerReverts on removing non-existing payment aggregator user\"},\"setCloseOutNetting(address)\":{\"notice\":\"Trigers only be contract ownerReverts on saving 0x0 address\"},\"setMarkToMarket(address)\":{\"notice\":\"Trigers only be contract ownerReverts on saving 0x0 address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PaymentAggregator.sol\":\"PaymentAggregator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/PaymentAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./ProtocolTypes.sol\\\";\\nimport \\\"./libraries/TimeSlot.sol\\\";\\nimport \\\"./libraries/AddressPacking.sol\\\";\\nimport \\\"./libraries/BokkyPooBahsDateTimeLibrary.sol\\\";\\nimport \\\"./interfaces/ICloseOutNetting.sol\\\";\\nimport \\\"./interfaces/IMarkToMarket.sol\\\";\\nimport \\\"./interfaces/IPaymentAggregator.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title Payment Aggregator contract is used to aggregate payments\\n * between counterparties in bilateral relationships. Those payments\\n * are defined per counterparties addresses (packed into one bytes32),\\n * main settlement currency and payment date.\\n *\\n * Contract linked to all product based contracts like Loan, Swap, etc.\\n */\\ncontract PaymentAggregator is IPaymentAggregator, ProtocolTypes {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using TimeSlot for TimeSlot.Slot;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    address public override owner;\\n    uint256 public override settlementWindow = 2;\\n    uint256 constant MAXPAYNUM = 6;\\n\\n    // Linked contract addresses\\n    EnumerableSet.AddressSet private paymentAggregatorUsers;\\n    ICloseOutNetting private closeOutNetting;\\n    IMarkToMarket private markToMarket;\\n\\n    // Mapping structure for storing TimeSlots\\n    mapping(bytes32 => mapping(bytes32 => mapping(bytes32 => TimeSlot.Slot))) _timeSlots;\\n    mapping(bytes32 => mapping(bytes32 => mapping(bytes32 => EnumerableSet.Bytes32Set)))\\n        private deals;\\n\\n    /**\\n     * @dev Modifier to make a function callable only by contract owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check if msg.sender is payment aggregator user\\n     */\\n    modifier acceptedContract() {\\n        require(\\n            paymentAggregatorUsers.contains(msg.sender),\\n            \\\"not allowed to use payment aggregator\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by passing contract address checks.\\n     */\\n    modifier onlyContractAddr(address addr) {\\n        require(addr != address(0), \\\"INVALID_ADDRESS\\\");\\n        require(addr.isContract(), \\\"NOT_CONTRACT\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract constructor function.\\n     *\\n     * @notice sets contract deployer as owner of this contract\\n     */\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Trigers to add contract address to payment aggregator users address set\\n     * @param _user Payment aggregator user smart contract address\\n     *\\n     * @notice Trigers only be contract owner\\n     * @notice Reverts on saving 0x0 address\\n     */\\n    function addPaymentAggregatorUser(address _user)\\n        public\\n        override\\n        onlyOwner\\n        returns (bool)\\n    {\\n        require(_user != address(0), \\\"Zero address\\\");\\n        require(_user.isContract(), \\\"Can't add non-contract address\\\");\\n        require(\\n            !paymentAggregatorUsers.contains(_user),\\n            \\\"Can't add existing address\\\"\\n        );\\n        return paymentAggregatorUsers.add(_user);\\n    }\\n\\n    /**\\n     * @dev Trigers to remove payment aggregator user from address set\\n     * @param _user Payment aggregator user smart contract address\\n     *\\n     * @notice Trigers only be contract owner\\n     * @notice Reverts on removing non-existing payment aggregator user\\n     */\\n    function removePaymentAggregatorUser(address _user)\\n        public\\n        override\\n        onlyOwner\\n        returns (bool)\\n    {\\n        require(\\n            paymentAggregatorUsers.contains(_user),\\n            \\\"Can't remove non-existing user\\\"\\n        );\\n        return paymentAggregatorUsers.remove(_user);\\n    }\\n\\n    /**\\n     * @dev Trigers to check if provided `addr` is a payment aggregator user from address set\\n     * @param _user Contract address to check if it's a payment aggregator user\\n     *\\n     */\\n    function isPaymentAggregatorUser(address _user)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return paymentAggregatorUsers.contains(_user);\\n    }\\n\\n    /**\\n     * @dev Trigers to set close out netting smart contract\\n     * @param _contract CloseOutNetting smart contract address\\n     *\\n     * @notice Trigers only be contract owner\\n     * @notice Reverts on saving 0x0 address\\n     */\\n    function setCloseOutNetting(address _contract)\\n        public\\n        onlyOwner\\n        onlyContractAddr(_contract)\\n    {\\n        emit UpdateCloseOutNetting(address(closeOutNetting), _contract);\\n        closeOutNetting = ICloseOutNetting(_contract);\\n    }\\n\\n    /**\\n     * @dev Trigers to set mark to market smart contract\\n     * @param _contract MarkToMarket smart contract address\\n     *\\n     * @notice Trigers only be contract owner\\n     * @notice Reverts on saving 0x0 address\\n     */\\n    function setMarkToMarket(address _contract)\\n        public\\n        onlyOwner\\n        onlyContractAddr(_contract)\\n    {\\n        emit UpdateMarkToMarket(address(markToMarket), _contract);\\n        markToMarket = IMarkToMarket(_contract);\\n    }\\n\\n    struct TimeSlotPaymentsLocalVars {\\n        bytes32 packedAddrs;\\n        bool flipped;\\n        uint256 totalPayment0;\\n        uint256 totalPayment1;\\n        bytes32 slotPosition;\\n        uint256 year;\\n        uint256 month;\\n        uint256 day;\\n    }\\n\\n    /**\\n     * @dev Triggered to add new payments for a deal\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main settlement currency in a deal\\n     * @param dealId Deal unique ID with prefix\\n     * @param timestamps Array of timestamps for timeslot identification\\n     * @param payments0 Array of cashflows owed by the first party\\n     * @param payments1 Array of cashflows owed by the second party\\n     */\\n    function registerPayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 dealId,\\n        uint256[] memory timestamps,\\n        uint256[] memory payments0,\\n        uint256[] memory payments1\\n    ) external override acceptedContract {\\n        TimeSlotPaymentsLocalVars memory vars;\\n        (vars.packedAddrs, ) = AddressPacking.pack(party0, party1);\\n\\n        for (uint256 i = 0; i < timestamps.length; i++) {\\n            if (timestamps[i] == 0) continue;\\n\\n            (vars.year, vars.month, vars.day) = BokkyPooBahsDateTimeLibrary\\n                .timestampToDate(timestamps[i]);\\n            vars.slotPosition = TimeSlot.position(\\n                vars.year,\\n                vars.month,\\n                vars.day\\n            );\\n            deals[vars.packedAddrs][ccy][vars.slotPosition].add(dealId);\\n\\n            if (payments0[i] > 0) {\\n                vars.totalPayment0 = vars.totalPayment0.add(payments0[i]);\\n            }\\n\\n            if (payments1[i] > 0) {\\n                vars.totalPayment1 = vars.totalPayment1.add(payments1[i]);\\n            }\\n\\n            TimeSlot.addPayment(\\n                _timeSlots,\\n                party0,\\n                party1,\\n                ccy,\\n                vars.slotPosition,\\n                payments0[i],\\n                payments1[i]\\n            );\\n\\n            emit RegisterPayment(\\n                party0,\\n                party1,\\n                ccy,\\n                vars.slotPosition,\\n                vars.year,\\n                vars.month,\\n                vars.day,\\n                payments0[i],\\n                payments1[i]\\n            );\\n        }\\n\\n        closeOutNetting.addPayments(\\n            party0,\\n            party1,\\n            ccy,\\n            vars.totalPayment0,\\n            vars.totalPayment1\\n        );\\n    }\\n\\n    struct PaymentSettlementLocalVars {\\n        bytes32 packedAddrs;\\n        bool flipped;\\n        bytes32 slotPosition;\\n        uint256 payment;\\n        address verifier;\\n        bytes32 txHash;\\n        uint256 year;\\n        uint256 month;\\n        uint256 day;\\n    }\\n\\n    /**\\n     * @dev External function to verify payment by msg.sender, uses timestamp to identify TimeSlot.\\n     * @param verifier Payment verifier address\\n     * @param counterparty Counterparty address\\n     * @param ccy Main payment settlement currency\\n     * @param timestamp Main timestamp for TimeSlot\\n     * @param payment Main payment settlement currency\\n     * @param txHash Main payment settlement currency\\n     */\\n    function verifyPayment(\\n        address verifier,\\n        address counterparty,\\n        bytes32 ccy,\\n        uint256 timestamp,\\n        uint256 payment,\\n        bytes32 txHash\\n    ) external override {\\n        require(_checkSettlementWindow(timestamp), \\\"OUT OF SETTLEMENT WINDOW\\\");\\n        PaymentSettlementLocalVars memory vars;\\n\\n        vars.payment = payment;\\n        vars.txHash = txHash;\\n        vars.verifier = verifier;\\n\\n        (vars.year, vars.month, vars.day) = BokkyPooBahsDateTimeLibrary\\n            .timestampToDate(timestamp);\\n        vars.slotPosition = TimeSlot.position(vars.year, vars.month, vars.day);\\n\\n        TimeSlot.verifyPayment(\\n            _timeSlots,\\n            verifier,\\n            counterparty,\\n            ccy,\\n            vars.slotPosition,\\n            vars.payment,\\n            vars.txHash\\n        );\\n\\n        emit VerifyPayment(\\n            verifier,\\n            counterparty,\\n            ccy,\\n            vars.slotPosition,\\n            vars.year,\\n            vars.month,\\n            vars.day,\\n            payment,\\n            txHash\\n        );\\n    }\\n\\n    /**\\n     * @dev External function to settle payment using timestamp to identify TimeSlot.\\n     * @param verifier Payment settlement verifier address\\n     * @param counterparty Counterparty address\\n     * @param ccy Main payment settlement currency\\n     * @param timestamp Main timestamp for TimeSlot\\n     * @param txHash Main payment settlement currency\\n     */\\n    function settlePayment(\\n        address verifier,\\n        address counterparty,\\n        bytes32 ccy,\\n        uint256 timestamp,\\n        bytes32 txHash\\n    ) external override {\\n        require(_checkSettlementWindow(timestamp), \\\"OUT OF SETTLEMENT WINDOW\\\");\\n        PaymentSettlementLocalVars memory vars;\\n\\n        vars.txHash = txHash;\\n        vars.verifier = verifier;\\n\\n        (vars.year, vars.month, vars.day) = BokkyPooBahsDateTimeLibrary\\n            .timestampToDate(timestamp);\\n        vars.slotPosition = TimeSlot.position(vars.year, vars.month, vars.day);\\n\\n        TimeSlot.Slot memory timeSlot = TimeSlot.get(\\n            _timeSlots,\\n            verifier,\\n            counterparty,\\n            ccy,\\n            vars.year,\\n            vars.month,\\n            vars.day\\n        );\\n\\n        TimeSlot.settlePayment(\\n            _timeSlots,\\n            verifier,\\n            counterparty,\\n            ccy,\\n            vars.slotPosition,\\n            vars.txHash\\n        );\\n\\n        bytes32[] memory dealIds = getDealsFromSlot(\\n            verifier,\\n            counterparty,\\n            ccy,\\n            vars.slotPosition\\n        );\\n        markToMarket.updatePVs(dealIds);\\n\\n        closeOutNetting.removePayments(\\n            verifier,\\n            counterparty,\\n            ccy,\\n            timeSlot.totalPayment0,\\n            timeSlot.totalPayment1\\n        );\\n\\n        emit SettlePayment(\\n            verifier,\\n            counterparty,\\n            ccy,\\n            vars.slotPosition,\\n            vars.year,\\n            vars.month,\\n            vars.day,\\n            txHash\\n        );\\n    }\\n\\n    /**\\n     * @dev Triggered to remove existing payments for a deal\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main settlement currency in a deal\\n     * @param dealId Deal unique ID with prefix\\n     * @param timestamps Array of timestamps for timeslot identification\\n     * @param payments0 Array of cashflows owed by the first party\\n     * @param payments1 Array of cashflows owed by the second party\\n     */\\n    function removePayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 dealId,\\n        uint256[] calldata timestamps,\\n        uint256[] calldata payments0,\\n        uint256[] calldata payments1\\n    ) external override acceptedContract {\\n        TimeSlotPaymentsLocalVars memory vars;\\n        (vars.packedAddrs, ) = AddressPacking.pack(party0, party1);\\n\\n        for (uint256 i = 0; i < timestamps.length; i++) {\\n            if (timestamps[i] == 0) continue;\\n\\n            (vars.year, vars.month, vars.day) = BokkyPooBahsDateTimeLibrary\\n                .timestampToDate(timestamps[i]);\\n            vars.slotPosition = TimeSlot.position(\\n                vars.year,\\n                vars.month,\\n                vars.day\\n            );\\n\\n            require(\\n                deals[vars.packedAddrs][ccy][vars.slotPosition].remove(dealId),\\n                \\\"NON_REGISTERED_DEAL\\\"\\n            );\\n\\n            vars.totalPayment0 = vars.totalPayment0.add(payments0[i]);\\n            vars.totalPayment1 = vars.totalPayment1.add(payments1[i]);\\n\\n            TimeSlot.removePayment(\\n                _timeSlots,\\n                party0,\\n                party1,\\n                ccy,\\n                vars.slotPosition,\\n                payments0[i],\\n                payments1[i]\\n            );\\n\\n            emit RemovePayment(\\n                party0,\\n                party1,\\n                ccy,\\n                vars.slotPosition,\\n                vars.year,\\n                vars.month,\\n                vars.day,\\n                payments0[i],\\n                payments1[i]\\n            );\\n        }\\n\\n        closeOutNetting.removePayments(\\n            party0,\\n            party1,\\n            ccy,\\n            vars.totalPayment0,\\n            vars.totalPayment1\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the time slot between parties using slot id.\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main payment settlement currency\\n     */\\n    function getTimeSlotByDate(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) public view returns (TimeSlot.Slot memory timeSlot) {\\n        timeSlot = TimeSlot.get(\\n            _timeSlots,\\n            party0,\\n            party1,\\n            ccy,\\n            year,\\n            month,\\n            day\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the time slot between parties using slot id.\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main payment settlement currency\\n     * @param slot TimeSlot position\\n     */\\n    function getTimeSlotBySlotId(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 slot\\n    ) public view returns (TimeSlot.Slot memory timeSlot) {\\n        timeSlot = TimeSlot.getBySlotId(_timeSlots, party0, party1, ccy, slot);\\n    }\\n\\n    /**\\n     * @dev Internal function to get TimeSlot position after adding days\\n     * @param timestamp Timestamp to add days\\n     * @param numSeconds number of seconds to add\\n     * @return Updated timestamp and TimeSlot position\\n     */\\n    function _slotPositionPlusDays(uint256 timestamp, uint256 numSeconds)\\n        internal\\n        pure\\n        returns (bytes32, uint256)\\n    {\\n        uint256 numDays = numSeconds.div(86400);\\n        timestamp = BokkyPooBahsDateTimeLibrary.addDays(timestamp, numDays);\\n        (uint256 year, uint256 month, uint256 day) = BokkyPooBahsDateTimeLibrary\\n            .timestampToDate(timestamp);\\n        bytes32 slotPosition = TimeSlot.position(year, month, day);\\n\\n        return (slotPosition, timestamp);\\n    }\\n\\n    /**\\n     * @dev Internal function to get TimeSlot position\\n     * @param timestamp Timestamp for conversion\\n     * @return TimeSlot position\\n     */\\n    function _slotPosition(uint256 timestamp) internal pure returns (bytes32) {\\n        (uint256 year, uint256 month, uint256 day) = BokkyPooBahsDateTimeLibrary\\n            .timestampToDate(timestamp);\\n        bytes32 slotPosition = TimeSlot.position(year, month, day);\\n\\n        return slotPosition;\\n    }\\n\\n    /**\\n     * @dev Triggers settlement status of the time slot\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main payment settlement currency\\n     * @param timestamp TimeSlot timestamp\\n     * @return status Boolean if slot was settled\\n     */\\n    function isSettled(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 timestamp\\n    ) external view override returns (bool status) {\\n        (uint256 year, uint256 month, uint256 day) = BokkyPooBahsDateTimeLibrary\\n            .timestampToDate(timestamp);\\n        bytes32 slotPosition = TimeSlot.position(year, month, day);\\n\\n        status = TimeSlot.isSettled(\\n            _timeSlots,\\n            party0,\\n            party1,\\n            ccy,\\n            slotPosition\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function to check if settlement payment is within available timeline\\n     * @param targetTime target time for settlement of time slot\\n     * @return Boolean if slot within the settlement window\\n     */\\n    function _checkSettlementWindow(uint256 targetTime)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        uint256 time = block.timestamp;\\n        uint256 delta = BokkyPooBahsDateTimeLibrary.diffDays(time, targetTime);\\n\\n        return !(delta > settlementWindow);\\n    }\\n\\n    function getDealsFromSlot(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 slotPosition\\n    ) public view override returns (bytes32[] memory) {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(party0, party1);\\n        EnumerableSet.Bytes32Set storage set = deals[packedAddrs][ccy][\\n            slotPosition\\n        ];\\n\\n        uint256 numDeals = set.length();\\n        bytes32[] memory dealIds = new bytes32[](numDeals);\\n\\n        for (uint256 i = 0; i < numDeals; i++) {\\n            bytes32 deal = set.at(i);\\n            dealIds[i] = deal;\\n        }\\n\\n        return dealIds;\\n    }\\n}\\n\",\"keccak256\":\"0xd531f7bfdf3eddb5d84462bbf13b0698d22a07f395a612f7c0563fd835a7e6e3\",\"license\":\"MIT\"},\"contracts/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\ncontract ProtocolTypes {\\n    // Constant values\\n    uint8 internal constant NUMCCY = 3;\\n    uint8 internal constant NUMTERM = 6;\\n    uint8 internal constant NUMDF = 7; // number of discount factors\\n    uint256 internal constant BP = 10000; // basis point\\n\\n    uint256 internal constant PCT = 10000; // percentage point in basis\\n    uint256 internal constant PENALTYLEVEL = 1000; // 10% settlement failure penalty\\n    uint256 internal constant MKTMAKELEVEL = 2000; // 20% for market making\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Loan common types\\n    enum LoanState {\\n        REGISTERED,\\n        WORKING,\\n        DUE,\\n        PAST_DUE,\\n        CLOSED,\\n        TERMINATED\\n    }\\n    enum DFTERM {\\n        _3m,\\n        _6m,\\n        _1y,\\n        _2y,\\n        _3y,\\n        _4y,\\n        _5y\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n\\n    // FXMarket common types\\n    enum CcyPair {\\n        FILETH,\\n        FILUSDC,\\n        ETHUSDC,\\n        BTCUSDC,\\n        BTCETH,\\n        BTCFIL\\n    }\\n    enum FXSide {\\n        BID,\\n        OFFER\\n    }\\n\\n    enum PaymentFrequency {\\n        ANNUAL,\\n        SEMI_ANNUAL,\\n        QUARTERLY,\\n        MONTHLY,\\n        FORWARD\\n    }\\n}\\n\",\"keccak256\":\"0x72de205a94aefa6e5b79074f603b8056535f99918af5112343156e79b7eadd83\",\"license\":\"MIT\"},\"contracts/interfaces/ICloseOutNetting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICloseOutNetting {\\n    event AddCloseOutPayments(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event RemoveCloseOutPayments(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event SettleCloseOut(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 netPayment,\\n        bytes32 txHash\\n    );\\n    event UpdateCollateralAggregator(\\n        address indexed prevAddr,\\n        address indexed addr\\n    );\\n    event UpdatePaymentAggregator(\\n        address indexed prevAddr,\\n        address indexed addr\\n    );\\n    event VerifyCloseOut(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 netPayment,\\n        bytes32 txHash\\n    );\\n\\n    function addPayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) external;\\n\\n    function checkDefault(address _party) external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function removePayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) external;\\n\\n    function updateCollateralAggregator(address addr) external;\\n\\n    function updatePaymentAggregator(address addr) external;\\n}\\n\",\"keccak256\":\"0xeb4b3924998cc8a39f908259c7f3367a9352c440a85cbdecb1bd2f262f02ebab\",\"license\":\"MIT\"},\"contracts/interfaces/IMarkToMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IMarkToMarket {\\n    function updatePV(bytes32 dealId) external;\\n\\n    function updatePVs(bytes32[] memory dealIds) external;\\n}\\n\",\"keccak256\":\"0x12c4c499ec5de5155b58fd7e0396e88f629406ff3d3c44b4ecd7680c878b9b6e\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nstruct Slot {\\n    uint256 totalPayment0;\\n    uint256 totalPayment1;\\n    uint256 netPayment;\\n    bool flipped;\\n    bytes32 paymentProof;\\n    address verificationParty;\\n    bool isSettled;\\n}\\n\\ninterface IPaymentAggregator {\\n    event UpdateCloseOutNetting(\\n        address indexed prevContract,\\n        address indexed closeOutNetting\\n    );\\n    event UpdateMarkToMarket(\\n        address indexed prevContract,\\n        address indexed closeOutNetting\\n    );\\n\\n    event RegisterPayment(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event VerifyPayment(\\n        address indexed verifier,\\n        address indexed counterparty,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment,\\n        bytes32 txHash\\n    );\\n    event SettlePayment(\\n        address indexed verifier,\\n        address indexed counterparty,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        bytes32 txHash\\n    );\\n    event RemovePayment(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n\\n    function addPaymentAggregatorUser(address _user) external returns (bool);\\n\\n    function isPaymentAggregatorUser(address _user)\\n        external\\n        view\\n        returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function registerPayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 dealId,\\n        uint256[] memory timestamps,\\n        uint256[] memory payments0,\\n        uint256[] memory payments1\\n    ) external;\\n\\n    function removePaymentAggregatorUser(address _user) external returns (bool);\\n\\n    function removePayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 dealId,\\n        uint256[] calldata timestamps,\\n        uint256[] calldata payments0,\\n        uint256[] calldata payments1\\n    ) external;\\n\\n    function settlePayment(\\n        address verifier,\\n        address counterparty,\\n        bytes32 ccy,\\n        uint256 timestamp,\\n        bytes32 txHash\\n    ) external;\\n\\n    function verifyPayment(\\n        address verifier,\\n        address counterparty,\\n        bytes32 ccy,\\n        uint256 timestamp,\\n        uint256 payment,\\n        bytes32 txHash\\n    ) external;\\n\\n    function isSettled(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 timestamp\\n    ) external view returns (bool status);\\n\\n    function getDealsFromSlot(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 slotPosition\\n    ) external view returns (bytes32[] memory);\\n\\n    // function getTimeSlotByDate(\\n    //     address party0,\\n    //     address party1,\\n    //     bytes32 ccy,\\n    //     uint256 year,\\n    //     uint256 month,\\n    //     uint256 day\\n    // ) external view returns (Slot memory timeSlot);\\n\\n    // function getTimeSlotBySlotId(\\n    //     address party0,\\n    //     address party1,\\n    //     bytes32 ccy,\\n    //     bytes32 slot\\n    // ) external view returns (Slot memory timeSlot);\\n\\n    function settlementWindow() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x26b01bf1c8f14e441ca8a531af8574cc4e551bcf347b09bcad8f160f3cb48bd0\",\"license\":\"MIT\"},\"contracts/libraries/AddressPacking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nlibrary AddressPacking {\\n    /**\\n     * @dev Packs two addresses into one hash to reduce the number of arguments\\n     * @param addr0 First address\\n     * @param addr1 Second address\\n     * @return Boolean to identify if addresses were flipped\\n     */\\n    function pack(address addr0, address addr1)\\n        internal\\n        pure\\n        returns (bytes32, bool)\\n    {\\n        require(addr0 != addr1, \\\"Identical addresses\\\");\\n        (address _addr0, address _addr1) = addr0 < addr1\\n            ? (addr0, addr1)\\n            : (addr1, addr0);\\n        require(_addr0 != address(0), \\\"Invalid address\\\");\\n\\n        if (_addr0 != addr0) {\\n            return (keccak256(abi.encode(_addr0, _addr1)), true);\\n        } else {\\n            return (keccak256(abi.encode(_addr0, _addr1)), false);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe567a45d9e5739f3e89da206f5041692c8c7a2f9a837d23fa9e50117b81e773\",\"license\":\"MIT\"},\"contracts/libraries/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n\\n    function timestampFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            hour *\\n            SECONDS_PER_HOUR +\\n            minute *\\n            SECONDS_PER_MINUTE +\\n            second;\\n    }\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint256 daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isValidDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isLeapYear(uint256 timestamp)\\n        internal\\n        pure\\n        returns (bool leapYear)\\n    {\\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n\\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n\\n    function getDaysInMonth(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        (uint256 year, uint256 month, ) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n\\n    function _getDaysInMonth(uint256 year, uint256 month)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        if (\\n            month == 1 ||\\n            month == 3 ||\\n            month == 5 ||\\n            month == 7 ||\\n            month == 8 ||\\n            month == 10 ||\\n            month == 12\\n        ) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 dayOfWeek)\\n    {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n\\n    function getMinute(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 minute)\\n    {\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    function getSecond(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 second)\\n    {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        year += _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = ((month - 1) % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        year -= _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        uint256 yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = (yearMonth % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _years)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint256 fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint256 toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n\\n    function diffMonths(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _months)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint256 fromYear, uint256 fromMonth, ) = _daysToDate(\\n            fromTimestamp / SECONDS_PER_DAY\\n        );\\n        (uint256 toYear, uint256 toMonth, ) = _daysToDate(\\n            toTimestamp / SECONDS_PER_DAY\\n        );\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n\\n    function diffDays(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _days)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n\\n    function diffHours(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _hours)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n\\n    function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _minutes)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n\\n    function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _seconds)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x70d42cd72420c6f792ca3f69e51657ab93eb8b948f0b503d0fd26e2c7a05976e\",\"license\":\"MIT\"},\"contracts/libraries/TimeSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./BokkyPooBahsDateTimeLibrary.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./AddressPacking.sol\\\";\\n\\nlibrary TimeSlot {\\n    using BokkyPooBahsDateTimeLibrary for uint256;\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Slot keeps track of total payments to be settled per one day\\n     * by two counterparties per currency, net payment and\\n     * an indicator if parties obligations are flipped\\n     */\\n    struct Slot {\\n        uint256 totalPayment0;\\n        uint256 totalPayment1;\\n        uint256 netPayment;\\n        bool flipped;\\n        bytes32 paymentProof;\\n        address verificationParty;\\n        bool isSettled;\\n    }\\n\\n    /**\\n     * @dev Computes the time slot position in the mapping by preconfigured time\\n     * @param year Year in which to find a timeslot\\n     * @param month Month in which to find a timeslot\\n     * @param day Day in which to find a timeslot\\n     */\\n    function position(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(year, month, day));\\n    }\\n\\n    /**\\n     * @dev Returns the time slot information from the mapping and preconfigured time\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main currency for the time slot\\n     * @param year Year in which to find a timeslot\\n     * @param month Month in which to find a timeslot\\n     * @param day Day in which to find a timeslot\\n     */\\n    function get(\\n        mapping(bytes32 => mapping(bytes32 => mapping(bytes32 => TimeSlot.Slot)))\\n            storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal view returns (TimeSlot.Slot memory) {\\n        return\\n            getBySlotId(\\n                self,\\n                party0,\\n                party1,\\n                ccy,\\n                keccak256(abi.encodePacked(year, month, day))\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the time slot information from the mapping\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main currency for the time slot\\n     * @param slotId Time slot identifier\\n     */\\n    function getBySlotId(\\n        mapping(bytes32 => mapping(bytes32 => mapping(bytes32 => TimeSlot.Slot)))\\n            storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 slotId\\n    ) internal view returns (TimeSlot.Slot memory) {\\n        (bytes32 addr, bool flipped) = AddressPacking.pack(party0, party1);\\n        TimeSlot.Slot memory timeSlot = self[addr][ccy][slotId];\\n        if (flipped) {\\n            uint256 oldPayment0 = timeSlot.totalPayment0;\\n            uint256 oldPayment1 = timeSlot.totalPayment1;\\n            timeSlot.totalPayment0 = oldPayment1;\\n            timeSlot.totalPayment1 = oldPayment0;\\n        }\\n\\n        if (timeSlot.totalPayment1 > timeSlot.totalPayment0) {\\n            timeSlot.netPayment = timeSlot.totalPayment1.sub(\\n                timeSlot.totalPayment0\\n            );\\n            timeSlot.flipped = true;\\n        } else {\\n            timeSlot.netPayment = timeSlot.totalPayment0.sub(\\n                timeSlot.totalPayment1\\n            );\\n            timeSlot.flipped = false;\\n        }\\n\\n        return timeSlot;\\n    }\\n\\n    /**\\n     * @dev Adds payment into the time slot with provided information\\n     * @param self The mapping with all time slots\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main currency for the time slot\\n     * @param slot Time slot identifier to be updated\\n     * @param payment0 Payment obligated to the first counterparty\\n     * @param payment1 Payment obligated to the second counterparty\\n     */\\n    function addPayment(\\n        mapping(bytes32 => mapping(bytes32 => mapping(bytes32 => TimeSlot.Slot)))\\n            storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 slot,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) internal {\\n        (bytes32 packedAddrs, bool flipped) = AddressPacking.pack(\\n            party0,\\n            party1\\n        );\\n        TimeSlot.Slot storage timeSlot = self[packedAddrs][ccy][slot];\\n        require(!timeSlot.isSettled, \\\"TIMESLOT SETTLED ALREADY\\\");\\n\\n        timeSlot.totalPayment0 = flipped\\n            ? timeSlot.totalPayment0.add(payment1)\\n            : timeSlot.totalPayment0.add(payment0);\\n        timeSlot.totalPayment1 = flipped\\n            ? timeSlot.totalPayment1.add(payment0)\\n            : timeSlot.totalPayment1.add(payment1);\\n    }\\n\\n    /**\\n     * @dev Removes payment from the time slot with provided information\\n     * @param self The mapping with all time slots\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main currency for the time slot\\n     * @param slot Time slot identifier to be updated\\n     * @param payment0 Payment amount to remove for the first counterparty\\n     * @param payment1 Payment amount to remove for the second counterparty\\n     */\\n    function removePayment(\\n        mapping(bytes32 => mapping(bytes32 => mapping(bytes32 => TimeSlot.Slot)))\\n            storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 slot,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) internal {\\n        (bytes32 packedAddrs, bool flipped) = AddressPacking.pack(\\n            party0,\\n            party1\\n        );\\n        TimeSlot.Slot storage timeSlot = self[packedAddrs][ccy][slot];\\n        if (timeSlot.isSettled) return;\\n\\n        timeSlot.totalPayment0 = flipped\\n            ? timeSlot.totalPayment0.sub(payment1)\\n            : timeSlot.totalPayment0.sub(payment0);\\n        timeSlot.totalPayment1 = flipped\\n            ? timeSlot.totalPayment1.sub(payment0)\\n            : timeSlot.totalPayment1.sub(payment1);\\n    }\\n\\n    /**\\n     * @dev Verifies the net payment for time slot\\n     * @param self The mapping with all time slots\\n     * @param verifier Payment verifier address\\n     * @param counterparty Verifier's counterparty address\\n     * @param ccy Main currency for the time slot\\n     * @param slot Time slot identifier to be verified\\n     * @param payment Net payment amount\\n     * @param txHash Transaction hash to signal successfull payment\\n     */\\n    function verifyPayment(\\n        mapping(bytes32 => mapping(bytes32 => mapping(bytes32 => TimeSlot.Slot)))\\n            storage self,\\n        address verifier,\\n        address counterparty,\\n        bytes32 ccy,\\n        bytes32 slot,\\n        uint256 payment,\\n        bytes32 txHash\\n    ) internal {\\n        (bytes32 addr, bool flipped) = AddressPacking.pack(\\n            verifier,\\n            counterparty\\n        );\\n        TimeSlot.Slot storage timeSlot = self[addr][ccy][slot];\\n        require(!timeSlot.isSettled, \\\"TIMESLOT SETTLED ALREADY\\\");\\n        uint256 netPayment;\\n\\n        if (flipped) {\\n            require(\\n                timeSlot.totalPayment1 > timeSlot.totalPayment0,\\n                \\\"Incorrect verification party\\\"\\n            );\\n            netPayment = timeSlot.totalPayment1.sub(timeSlot.totalPayment0);\\n        } else {\\n            require(\\n                timeSlot.totalPayment0 > timeSlot.totalPayment1,\\n                \\\"Incorrect verification party\\\"\\n            );\\n            netPayment = timeSlot.totalPayment0.sub(timeSlot.totalPayment1);\\n        }\\n\\n        require(netPayment == payment, \\\"Incorrect settlement amount\\\");\\n\\n        timeSlot.paymentProof = txHash;\\n        timeSlot.verificationParty = verifier;\\n    }\\n\\n    /**\\n     * @dev Settles the net payment for time slot\\n     * @param self The mapping with all time slots\\n     * @param verifier Settlement verifier address\\n     * @param counterparty Verifier's counterparty address\\n     * @param ccy Main currency for the time slot\\n     * @param slot Time slot identifier to be settled\\n     * @param txHash Transaction hash to signal successfull settlement of payment\\n     */\\n    function settlePayment(\\n        mapping(bytes32 => mapping(bytes32 => mapping(bytes32 => TimeSlot.Slot)))\\n            storage self,\\n        address verifier,\\n        address counterparty,\\n        bytes32 ccy,\\n        bytes32 slot,\\n        bytes32 txHash\\n    ) internal {\\n        (bytes32 addr, ) = AddressPacking.pack(verifier, counterparty);\\n        TimeSlot.Slot storage timeSlot = self[addr][ccy][slot];\\n        require(!timeSlot.isSettled, \\\"TIMESLOT SETTLED ALREADY\\\");\\n        require(timeSlot.paymentProof == txHash, \\\"INCORRECT_TX_HASH\\\");\\n        require(\\n            verifier != timeSlot.verificationParty,\\n            \\\"INCORRECT_COUNTERPARTY\\\"\\n        );\\n        timeSlot.isSettled = true;\\n    }\\n\\n    /**\\n     * @dev Clears the time slot, triggered only when the timeslot has empty payments for both parties and 0 net payment\\n     * @param self The mapping with all time slots\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main currency for the time slot\\n     * @param slot TimeSlot identifier to be cleared\\n     */\\n    function clear(\\n        mapping(bytes32 => mapping(bytes32 => mapping(bytes32 => TimeSlot.Slot)))\\n            storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 slot\\n    ) internal {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(party0, party1);\\n        delete self[packedAddrs][ccy][slot];\\n    }\\n\\n    /**\\n     * @dev Verifies if TimeSlot was settled\\n     * @param self The mapping with all time slots\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main currency for the time slot\\n     * @param slot TimeSlot identifier to be cleared\\n     * @return Boolean of settlement status\\n     */\\n    function isSettled(\\n        mapping(bytes32 => mapping(bytes32 => mapping(bytes32 => TimeSlot.Slot)))\\n            storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 slot\\n    ) internal view returns (bool) {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(party0, party1);\\n        return self[packedAddrs][ccy][slot].isSettled;\\n    }\\n}\\n\",\"keccak256\":\"0x8fe6aeec64ae5278452dc6604e3c09198b2550c88f9317e56eb9636f88801a3d\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600260015534801561001557600080fd5b50600080546001600160a01b03191633179055612206806100376000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063b4a7bdf911610066578063b4a7bdf9146101ff578063b73cdacd14610214578063dff7f74414610227578063ee0474c21461023a576100f5565b80638da5cb5b146101b1578063955c8736146101c6578063a0a65e40146101d9578063b116a259146101ec576100f5565b8063393b6e17116100d3578063393b6e171461015857806375dc0d211461016b57806381dc26c71461017e578063891e37211461019e576100f5565b806306710fff146100fa578063117979f41461010f5780632eb4602314610138575b600080fd5b61010d6101083660046119d1565b61024d565b005b61012261011d3660046119d1565b61031f565b60405161012f9190611d2d565b60405180910390f35b61014b6101463660046119ec565b610332565b60405161012f9190611ce9565b61010d610166366004611afe565b6103fd565b610122610179366004611bb9565b6106bc565b61019161018c3660046119ec565b6106fb565b60405161012f9190612159565b61010d6101ac3660046119d1565b61071a565b6101b96107e3565b60405161012f9190611c8a565b61010d6101d4366004611c1e565b6107f2565b61010d6101e7366004611bce565b6108fc565b6101916101fa366004611c1e565b610b01565b610207610b24565b60405161012f91906121af565b61010d610222366004611a2f565b610b2a565b6101226102353660046119d1565b610dd9565b6101226102483660046119d1565b610e23565b6000546001600160a01b0316331461026457600080fd5b806001600160a01b0381166102945760405162461bcd60e51b815260040161028b90611dd2565b60405180910390fd5b6102a6816001600160a01b0316610ec2565b6102c25760405162461bcd60e51b815260040161028b906120fc565b6005546040516001600160a01b038085169216907ff378eee4e3430742e191ff7fea453b7eeba44c869e8b2f2ba2653b129b7b864390600090a350600580546001600160a01b0319166001600160a01b0392909216919091179055565b600061032c600283610ec8565b92915050565b606060006103408686610ee4565b5060008181526007602090815260408083208884528252808320878452909152812091925061036e82610ff2565b905060608167ffffffffffffffff8111801561038957600080fd5b506040519080825280602002602001820160405280156103b3578160200160208202803683370190505b50905060005b828110156103f05760006103cd8583610ffd565b9050808383815181106103dc57fe5b6020908102919091010152506001016103b9565b5098975050505050505050565b610408600233610ec8565b6104245760405162461bcd60e51b815260040161028b90612023565b61042c611810565b6104368888610ee4565b50815260005b845181101561063f5784818151811061045157fe5b60200260200101516000141561046657610637565b61048285828151811061047557fe5b6020026020010151611009565b60e0850181905260c0850182905260a085018390526104a2929190611028565b60808301908152825160009081526007602090815260408083208b8452825280832093518352929052206104d6908761105e565b5060008482815181106104e557fe5b602002602001015111156105235761051d84828151811061050257fe5b6020026020010151836040015161106a90919063ffffffff16565b60408301525b600083828151811061053157fe5b6020026020010151111561056f5761056983828151811061054e57fe5b6020026020010151836060015161106a90919063ffffffff16565b60608301525b6105a960068a8a8a866080015189878151811061058857fe5b602002602001015189888151811061059c57fe5b602002602001015161108f565b876001600160a01b0316896001600160a01b03167f7e5ab2f9d27f1d9cb69c5757129eba9a1250928ade66885dc5caec90c4b7641b8985608001518660a001518760c001518860e001518b89815181106105ff57fe5b60200260200101518b8a8151811061061357fe5b602002602001015160405161062e9796959493929190611d60565b60405180910390a35b60010161043c565b50600480546040808401516060850151915163ca2da52960e01b81526001600160a01b039093169363ca2da52993610680938e938e938e9391929101611cb8565b600060405180830381600087803b15801561069a57600080fd5b505af11580156106ae573d6000803e3d6000fd5b505050505050505050505050565b6000806000806106cb85611009565b92509250925060006106de848484611028565b90506106ee60068a8a8a8561114b565b9998505050505050505050565b61070361185d565b61071160068686868661118f565b95945050505050565b6000546001600160a01b0316331461073157600080fd5b806001600160a01b0381166107585760405162461bcd60e51b815260040161028b90611dd2565b61076a816001600160a01b0316610ec2565b6107865760405162461bcd60e51b815260040161028b906120fc565b6004546040516001600160a01b038085169216907fe6834f0ea4acfb5ea8ca76f27d2246c6359d96899ec53f5c4bc96e56dcd146ce90600090a350600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031681565b6107fb8361129f565b6108175760405162461bcd60e51b815260040161028b90611fec565b61081f611899565b6060810183905260a081018290526001600160a01b038716608082015261084584611009565b610100840181905260e0840182905260c08401839052610866929190611028565b81604001818152505061088b6006888888856040015186606001518760a001516112ba565b856001600160a01b0316876001600160a01b03167fcb48cecc076f9cad1de25f21319ce962ff151d316749e31680b49ed5e2c6fa538784604001518560c001518660e001518761010001518a8a6040516108eb9796959493929190611d60565b60405180910390a350505050505050565b6109058261129f565b6109215760405162461bcd60e51b815260040161028b90611fec565b610929611899565b60a081018290526001600160a01b038616608082015261094883611009565b610100840181905260e0840182905260c08401839052610969929190611028565b604082015261097661185d565b61099360068888888660c001518760e001518861010001516113e6565b90506109ac600688888886604001518760a00151611425565b60606109be8888888660400151610332565b60055460405163134a0f5760e21b81529192506001600160a01b031690634d283d5c906109ef908490600401611ce9565b600060405180830381600087803b158015610a0957600080fd5b505af1158015610a1d573d6000803e3d6000fd5b505060048054855160208701516040516308c9165b60e41b81526001600160a01b039093169550638c9165b09450610a5f938e938e938e939092909101611cb8565b600060405180830381600087803b158015610a7957600080fd5b505af1158015610a8d573d6000803e3d6000fd5b50505050866001600160a01b0316886001600160a01b03167f60d5560fb6dcb96ba7b9e138a06d94234a893a7e79def188502193bf71bc46638886604001518760c001518860e001518961010001518b604051610aef96959493929190611d38565b60405180910390a35050505050505050565b610b0961185d565b610b1960068888888888886113e6565b979650505050505050565b60015481565b610b35600233610ec8565b610b515760405162461bcd60e51b815260040161028b90612023565b610b59611810565b610b638b8b610ee4565b50815260005b86811015610d4857878782818110610b7d57fe5b9050602002013560001415610b9157610d40565b610bac888883818110610ba057fe5b90506020020135611009565b60e0850181905260c0850182905260a08501839052610bcc929190611028565b60808301908152825160009081526007602090815260408083208e845282528083209351835292905220610c00908a6114f1565b610c1c5760405162461bcd60e51b815260040161028b90612068565b610c45868683818110610c2b57fe5b90506020020135836040015161106a90919063ffffffff16565b6040830152610c73848483818110610c5957fe5b90506020020135836060015161106a90919063ffffffff16565b826060018181525050610cb460068d8d8d86608001518b8b88818110610c9557fe5b905060200201358a8a89818110610ca857fe5b905060200201356114fd565b8a6001600160a01b03168c6001600160a01b03167fc90213e03f0aa26b07d0e75565000d17a8ff1134595b78597d0f4c3cf51aee208c85608001518660a001518760c001518860e001518d8d8a818110610d0a57fe5b905060200201358c8c8b818110610d1d57fe5b90506020020135604051610d379796959493929190611d60565b60405180910390a35b600101610b69565b50600460009054906101000a90046001600160a01b03166001600160a01b0316638c9165b08c8c8c856040015186606001516040518663ffffffff1660e01b8152600401610d9a959493929190611cb8565b600060405180830381600087803b158015610db457600080fd5b505af1158015610dc8573d6000803e3d6000fd5b505050505050505050505050505050565b600080546001600160a01b03163314610df157600080fd5b610dfc600283610ec8565b610e185760405162461bcd60e51b815260040161028b90611f7e565b61032c60028361159c565b600080546001600160a01b03163314610e3b57600080fd5b6001600160a01b038216610e615760405162461bcd60e51b815260040161028b90611ef6565b610e73826001600160a01b0316610ec2565b610e8f5760405162461bcd60e51b815260040161028b90611f47565b610e9a600283610ec8565b15610eb75760405162461bcd60e51b815260040161028b906120c5565b61032c6002836115b1565b3b151590565b6000610edd836001600160a01b0384166115c6565b9392505050565b600080826001600160a01b0316846001600160a01b03161415610f195760405162461bcd60e51b815260040161028b90611dfb565b600080846001600160a01b0316866001600160a01b031610610f3c578486610f3f565b85855b90925090506001600160a01b038216610f6a5760405162461bcd60e51b815260040161028b90611e28565b856001600160a01b0316826001600160a01b031614610fb9578181604051602001610f96929190611c9e565b604051602081830303815290604052805190602001206001935093505050610feb565b8181604051602001610fcc929190611c9e565b6040516020818303038152906040528051906020012060009350935050505b9250929050565b600061032c826115de565b6000610edd83836115e2565b6000808061101b620151808504611627565b9196909550909350915050565b600083838360405160200161103f93929190611c74565b6040516020818303038152906040528051906020012090509392505050565b6000610edd83836116bd565b600082820183811015610edd5760405162461bcd60e51b815260040161028b90611e88565b60008061109c8888610ee4565b600082815260208c815260408083208b845282528083208a84529091529020600581015492945090925090600160a01b900460ff16156110ee5760405162461bcd60e51b815260040161028b90611e51565b816111045780546110ff908661106a565b611110565b8054611110908561106a565b81558161112b576001810154611126908561106a565b61113a565b600181015461113a908661106a565b600190910155505050505050505050565b6000806111588686610ee4565b5060009081526020978852604080822095825294885284812093815292909652502060050154600160a01b900460ff169392505050565b61119761185d565b6000806111a48787610ee4565b915091506111b061185d565b506000828152602089815260408083208884528252808320878452825291829020825160e08101845281548152600182015492810192909252600281015492820192909252600382015460ff90811615156060830152600483015460808301526005909201546001600160a01b03811660a0830152600160a01b9004909116151560c082015281156112485780516020820180518352525b805160208201511115611276578051602082015161126591611707565b604082015260016060820152611293565b6020810151815161128691611707565b6040820152600060608201525b98975050505050505050565b600042816112ad828561172f565b6001541015949350505050565b6000806112c78888610ee4565b600082815260208c815260408083208b845282528083208a84529091529020600581015492945090925090600160a01b900460ff16156113195760405162461bcd60e51b815260040161028b90611e51565b6000821561135c5781546001830154116113455760405162461bcd60e51b815260040161028b90611fb5565b8154600183015461135591611707565b9050611393565b60018201548254116113805760405162461bcd60e51b815260040161028b90611fb5565b6001820154825461139091611707565b90505b8581146113b25760405162461bcd60e51b815260040161028b90612122565b506004810193909355505060050180546001600160a01b0319166001600160a01b0396909616959095179094555050505050565b6113ee61185d565b6112938888888888888860405160200161140a93929190611c74565b6040516020818303038152906040528051906020012061118f565b60006114318686610ee4565b5060008181526020898152604080832088845282528083208784529091529020600581015491925090600160a01b900460ff16156114815760405162461bcd60e51b815260040161028b90611e51565b828160040154146114a45760405162461bcd60e51b815260040161028b90611f1c565b60058101546001600160a01b03888116911614156114d45760405162461bcd60e51b815260040161028b90612095565b600501805460ff60a01b1916600160a01b17905550505050505050565b6000610edd838361174a565b60008061150a8888610ee4565b600082815260208c815260408083208b845282528083208a84529091529020600581015492945090925090600160a01b900460ff161561154c57505050611593565b8161156257805461155d9086611707565b61156e565b805461156e9085611707565b8155816115845760018101546111269085611707565b600181015461113a9086611707565b50505050505050565b6000610edd836001600160a01b03841661174a565b6000610edd836001600160a01b0384166116bd565b60009081526001919091016020526040902054151590565b5490565b815460009082106116055760405162461bcd60e51b815260040161028b90611d90565b82600001828154811061161457fe5b9060005260206000200154905092915050565b60008080836226496581018262023ab1600483020590506004600362023ab18302010590910390600062164b09610fa0600185010205905060046105b58202058303601f019250600061098f846050028161167e57fe5b0590506000605061098f83020585039050600b820560301994909401606402929092018301996002600c90940290910392909201975095509350505050565b60006116c983836115c6565b6116ff5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561032c565b50600061032c565b6000828211156117295760405162461bcd60e51b815260040161028b90611ebf565b50900390565b60008183111561173e57600080fd5b50620151809190030490565b60008181526001830160205260408120548015611806578354600019808301919081019060009087908390811061177d57fe5b906000526020600020015490508087600001848154811061179a57fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806117ca57fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061032c565b600091505061032c565b604051806101000160405280600080191681526020016000151581526020016000815260200160008152602001600080191681526020016000815260200160008152602001600081525090565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b80356001600160a01b038116811461032c57600080fd5b60008083601f84011261190d578182fd5b50813567ffffffffffffffff811115611924578182fd5b6020830191508360208083028501011115610feb57600080fd5b600082601f83011261194e578081fd5b813567ffffffffffffffff80821115611965578283fd5b602080830260405182828201018181108582111715611982578687fd5b6040528481529450818501925085820181870183018810156119a357600080fd5b600091505b848210156119c65780358452928201926001919091019082016119a8565b505050505092915050565b6000602082840312156119e2578081fd5b610edd83836118e5565b60008060008060808587031215611a01578283fd5b611a0b86866118e5565b9350611a1a86602087016118e5565b93969395505050506040820135916060013590565b60008060008060008060008060008060e08b8d031215611a4d578586fd5b611a578c8c6118e5565b9950611a668c60208d016118e5565b985060408b0135975060608b0135965060808b013567ffffffffffffffff80821115611a90578788fd5b611a9c8e838f016118fc565b909850965060a08d0135915080821115611ab4578586fd5b611ac08e838f016118fc565b909650945060c08d0135915080821115611ad8578384fd5b50611ae58d828e016118fc565b915080935050809150509295989b9194979a5092959850565b600080600080600080600060e0888a031215611b18578283fd5b611b2289896118e5565b9650611b318960208a016118e5565b95506040880135945060608801359350608088013567ffffffffffffffff80821115611b5b578485fd5b611b678b838c0161193e565b945060a08a0135915080821115611b7c578384fd5b611b888b838c0161193e565b935060c08a0135915080821115611b9d578283fd5b50611baa8a828b0161193e565b91505092959891949750929550565b60008060008060808587031215611a01578384fd5b600080600080600060a08688031215611be5578081fd5b8535611bf0816121b8565b94506020860135611c00816121b8565b94979496505050506040830135926060810135926080909101359150565b60008060008060008060c08789031215611c36578182fd5b611c4088886118e5565b9550611c4f88602089016118e5565b95989597505050506040840135936060810135936080820135935060a0909101359150565b9283526020830191909152604082015260600190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b6020808252825182820181905260009190848201906040850190845b81811015611d2157835183529284019291840191600101611d05565b50909695505050505050565b901515815260200190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252600f908201526e494e56414c49445f4144445245535360881b604082015260600190565b6020808252601390820152724964656e746963616c2061646472657373657360681b604082015260600190565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b60208082526018908201527f54494d45534c4f5420534554544c454420414c52454144590000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252600c908201526b5a65726f206164647265737360a01b604082015260600190565b6020808252601190820152700929c869ea4a48a86a8bea8b0be9082a69607b1b604082015260600190565b6020808252601e908201527f43616e277420616464206e6f6e2d636f6e747261637420616464726573730000604082015260600190565b6020808252601e908201527f43616e27742072656d6f7665206e6f6e2d6578697374696e6720757365720000604082015260600190565b6020808252601c908201527f496e636f727265637420766572696669636174696f6e20706172747900000000604082015260600190565b60208082526018908201527f4f5554204f4620534554544c454d454e542057494e444f570000000000000000604082015260600190565b60208082526025908201527f6e6f7420616c6c6f77656420746f20757365207061796d656e7420616767726560408201526433b0ba37b960d91b606082015260800190565b6020808252601390820152721393d397d49151d254d51154915117d1115053606a1b604082015260600190565b602080825260169082015275494e434f52524543545f434f554e544552504152545960501b604082015260600190565b6020808252601a908201527f43616e277420616464206578697374696e672061646472657373000000000000604082015260600190565b6020808252600c908201526b1393d517d0d3d395149050d560a21b604082015260600190565b6020808252601b908201527f496e636f727265637420736574746c656d656e7420616d6f756e740000000000604082015260600190565b8151815260208083015190820152604080830151908201526060808301511515908201526080808301519082015260a0808301516001600160a01b03169082015260c09182015115159181019190915260e00190565b90815260200190565b6001600160a01b03811681146121cd57600080fd5b5056fea264697066735822122094a0e208989d5ce766b430b6a858cee84d63ddf3a5531bd57b2d7fd46964ecd664736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063b4a7bdf911610066578063b4a7bdf9146101ff578063b73cdacd14610214578063dff7f74414610227578063ee0474c21461023a576100f5565b80638da5cb5b146101b1578063955c8736146101c6578063a0a65e40146101d9578063b116a259146101ec576100f5565b8063393b6e17116100d3578063393b6e171461015857806375dc0d211461016b57806381dc26c71461017e578063891e37211461019e576100f5565b806306710fff146100fa578063117979f41461010f5780632eb4602314610138575b600080fd5b61010d6101083660046119d1565b61024d565b005b61012261011d3660046119d1565b61031f565b60405161012f9190611d2d565b60405180910390f35b61014b6101463660046119ec565b610332565b60405161012f9190611ce9565b61010d610166366004611afe565b6103fd565b610122610179366004611bb9565b6106bc565b61019161018c3660046119ec565b6106fb565b60405161012f9190612159565b61010d6101ac3660046119d1565b61071a565b6101b96107e3565b60405161012f9190611c8a565b61010d6101d4366004611c1e565b6107f2565b61010d6101e7366004611bce565b6108fc565b6101916101fa366004611c1e565b610b01565b610207610b24565b60405161012f91906121af565b61010d610222366004611a2f565b610b2a565b6101226102353660046119d1565b610dd9565b6101226102483660046119d1565b610e23565b6000546001600160a01b0316331461026457600080fd5b806001600160a01b0381166102945760405162461bcd60e51b815260040161028b90611dd2565b60405180910390fd5b6102a6816001600160a01b0316610ec2565b6102c25760405162461bcd60e51b815260040161028b906120fc565b6005546040516001600160a01b038085169216907ff378eee4e3430742e191ff7fea453b7eeba44c869e8b2f2ba2653b129b7b864390600090a350600580546001600160a01b0319166001600160a01b0392909216919091179055565b600061032c600283610ec8565b92915050565b606060006103408686610ee4565b5060008181526007602090815260408083208884528252808320878452909152812091925061036e82610ff2565b905060608167ffffffffffffffff8111801561038957600080fd5b506040519080825280602002602001820160405280156103b3578160200160208202803683370190505b50905060005b828110156103f05760006103cd8583610ffd565b9050808383815181106103dc57fe5b6020908102919091010152506001016103b9565b5098975050505050505050565b610408600233610ec8565b6104245760405162461bcd60e51b815260040161028b90612023565b61042c611810565b6104368888610ee4565b50815260005b845181101561063f5784818151811061045157fe5b60200260200101516000141561046657610637565b61048285828151811061047557fe5b6020026020010151611009565b60e0850181905260c0850182905260a085018390526104a2929190611028565b60808301908152825160009081526007602090815260408083208b8452825280832093518352929052206104d6908761105e565b5060008482815181106104e557fe5b602002602001015111156105235761051d84828151811061050257fe5b6020026020010151836040015161106a90919063ffffffff16565b60408301525b600083828151811061053157fe5b6020026020010151111561056f5761056983828151811061054e57fe5b6020026020010151836060015161106a90919063ffffffff16565b60608301525b6105a960068a8a8a866080015189878151811061058857fe5b602002602001015189888151811061059c57fe5b602002602001015161108f565b876001600160a01b0316896001600160a01b03167f7e5ab2f9d27f1d9cb69c5757129eba9a1250928ade66885dc5caec90c4b7641b8985608001518660a001518760c001518860e001518b89815181106105ff57fe5b60200260200101518b8a8151811061061357fe5b602002602001015160405161062e9796959493929190611d60565b60405180910390a35b60010161043c565b50600480546040808401516060850151915163ca2da52960e01b81526001600160a01b039093169363ca2da52993610680938e938e938e9391929101611cb8565b600060405180830381600087803b15801561069a57600080fd5b505af11580156106ae573d6000803e3d6000fd5b505050505050505050505050565b6000806000806106cb85611009565b92509250925060006106de848484611028565b90506106ee60068a8a8a8561114b565b9998505050505050505050565b61070361185d565b61071160068686868661118f565b95945050505050565b6000546001600160a01b0316331461073157600080fd5b806001600160a01b0381166107585760405162461bcd60e51b815260040161028b90611dd2565b61076a816001600160a01b0316610ec2565b6107865760405162461bcd60e51b815260040161028b906120fc565b6004546040516001600160a01b038085169216907fe6834f0ea4acfb5ea8ca76f27d2246c6359d96899ec53f5c4bc96e56dcd146ce90600090a350600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031681565b6107fb8361129f565b6108175760405162461bcd60e51b815260040161028b90611fec565b61081f611899565b6060810183905260a081018290526001600160a01b038716608082015261084584611009565b610100840181905260e0840182905260c08401839052610866929190611028565b81604001818152505061088b6006888888856040015186606001518760a001516112ba565b856001600160a01b0316876001600160a01b03167fcb48cecc076f9cad1de25f21319ce962ff151d316749e31680b49ed5e2c6fa538784604001518560c001518660e001518761010001518a8a6040516108eb9796959493929190611d60565b60405180910390a350505050505050565b6109058261129f565b6109215760405162461bcd60e51b815260040161028b90611fec565b610929611899565b60a081018290526001600160a01b038616608082015261094883611009565b610100840181905260e0840182905260c08401839052610969929190611028565b604082015261097661185d565b61099360068888888660c001518760e001518861010001516113e6565b90506109ac600688888886604001518760a00151611425565b60606109be8888888660400151610332565b60055460405163134a0f5760e21b81529192506001600160a01b031690634d283d5c906109ef908490600401611ce9565b600060405180830381600087803b158015610a0957600080fd5b505af1158015610a1d573d6000803e3d6000fd5b505060048054855160208701516040516308c9165b60e41b81526001600160a01b039093169550638c9165b09450610a5f938e938e938e939092909101611cb8565b600060405180830381600087803b158015610a7957600080fd5b505af1158015610a8d573d6000803e3d6000fd5b50505050866001600160a01b0316886001600160a01b03167f60d5560fb6dcb96ba7b9e138a06d94234a893a7e79def188502193bf71bc46638886604001518760c001518860e001518961010001518b604051610aef96959493929190611d38565b60405180910390a35050505050505050565b610b0961185d565b610b1960068888888888886113e6565b979650505050505050565b60015481565b610b35600233610ec8565b610b515760405162461bcd60e51b815260040161028b90612023565b610b59611810565b610b638b8b610ee4565b50815260005b86811015610d4857878782818110610b7d57fe5b9050602002013560001415610b9157610d40565b610bac888883818110610ba057fe5b90506020020135611009565b60e0850181905260c0850182905260a08501839052610bcc929190611028565b60808301908152825160009081526007602090815260408083208e845282528083209351835292905220610c00908a6114f1565b610c1c5760405162461bcd60e51b815260040161028b90612068565b610c45868683818110610c2b57fe5b90506020020135836040015161106a90919063ffffffff16565b6040830152610c73848483818110610c5957fe5b90506020020135836060015161106a90919063ffffffff16565b826060018181525050610cb460068d8d8d86608001518b8b88818110610c9557fe5b905060200201358a8a89818110610ca857fe5b905060200201356114fd565b8a6001600160a01b03168c6001600160a01b03167fc90213e03f0aa26b07d0e75565000d17a8ff1134595b78597d0f4c3cf51aee208c85608001518660a001518760c001518860e001518d8d8a818110610d0a57fe5b905060200201358c8c8b818110610d1d57fe5b90506020020135604051610d379796959493929190611d60565b60405180910390a35b600101610b69565b50600460009054906101000a90046001600160a01b03166001600160a01b0316638c9165b08c8c8c856040015186606001516040518663ffffffff1660e01b8152600401610d9a959493929190611cb8565b600060405180830381600087803b158015610db457600080fd5b505af1158015610dc8573d6000803e3d6000fd5b505050505050505050505050505050565b600080546001600160a01b03163314610df157600080fd5b610dfc600283610ec8565b610e185760405162461bcd60e51b815260040161028b90611f7e565b61032c60028361159c565b600080546001600160a01b03163314610e3b57600080fd5b6001600160a01b038216610e615760405162461bcd60e51b815260040161028b90611ef6565b610e73826001600160a01b0316610ec2565b610e8f5760405162461bcd60e51b815260040161028b90611f47565b610e9a600283610ec8565b15610eb75760405162461bcd60e51b815260040161028b906120c5565b61032c6002836115b1565b3b151590565b6000610edd836001600160a01b0384166115c6565b9392505050565b600080826001600160a01b0316846001600160a01b03161415610f195760405162461bcd60e51b815260040161028b90611dfb565b600080846001600160a01b0316866001600160a01b031610610f3c578486610f3f565b85855b90925090506001600160a01b038216610f6a5760405162461bcd60e51b815260040161028b90611e28565b856001600160a01b0316826001600160a01b031614610fb9578181604051602001610f96929190611c9e565b604051602081830303815290604052805190602001206001935093505050610feb565b8181604051602001610fcc929190611c9e565b6040516020818303038152906040528051906020012060009350935050505b9250929050565b600061032c826115de565b6000610edd83836115e2565b6000808061101b620151808504611627565b9196909550909350915050565b600083838360405160200161103f93929190611c74565b6040516020818303038152906040528051906020012090509392505050565b6000610edd83836116bd565b600082820183811015610edd5760405162461bcd60e51b815260040161028b90611e88565b60008061109c8888610ee4565b600082815260208c815260408083208b845282528083208a84529091529020600581015492945090925090600160a01b900460ff16156110ee5760405162461bcd60e51b815260040161028b90611e51565b816111045780546110ff908661106a565b611110565b8054611110908561106a565b81558161112b576001810154611126908561106a565b61113a565b600181015461113a908661106a565b600190910155505050505050505050565b6000806111588686610ee4565b5060009081526020978852604080822095825294885284812093815292909652502060050154600160a01b900460ff169392505050565b61119761185d565b6000806111a48787610ee4565b915091506111b061185d565b506000828152602089815260408083208884528252808320878452825291829020825160e08101845281548152600182015492810192909252600281015492820192909252600382015460ff90811615156060830152600483015460808301526005909201546001600160a01b03811660a0830152600160a01b9004909116151560c082015281156112485780516020820180518352525b805160208201511115611276578051602082015161126591611707565b604082015260016060820152611293565b6020810151815161128691611707565b6040820152600060608201525b98975050505050505050565b600042816112ad828561172f565b6001541015949350505050565b6000806112c78888610ee4565b600082815260208c815260408083208b845282528083208a84529091529020600581015492945090925090600160a01b900460ff16156113195760405162461bcd60e51b815260040161028b90611e51565b6000821561135c5781546001830154116113455760405162461bcd60e51b815260040161028b90611fb5565b8154600183015461135591611707565b9050611393565b60018201548254116113805760405162461bcd60e51b815260040161028b90611fb5565b6001820154825461139091611707565b90505b8581146113b25760405162461bcd60e51b815260040161028b90612122565b506004810193909355505060050180546001600160a01b0319166001600160a01b0396909616959095179094555050505050565b6113ee61185d565b6112938888888888888860405160200161140a93929190611c74565b6040516020818303038152906040528051906020012061118f565b60006114318686610ee4565b5060008181526020898152604080832088845282528083208784529091529020600581015491925090600160a01b900460ff16156114815760405162461bcd60e51b815260040161028b90611e51565b828160040154146114a45760405162461bcd60e51b815260040161028b90611f1c565b60058101546001600160a01b03888116911614156114d45760405162461bcd60e51b815260040161028b90612095565b600501805460ff60a01b1916600160a01b17905550505050505050565b6000610edd838361174a565b60008061150a8888610ee4565b600082815260208c815260408083208b845282528083208a84529091529020600581015492945090925090600160a01b900460ff161561154c57505050611593565b8161156257805461155d9086611707565b61156e565b805461156e9085611707565b8155816115845760018101546111269085611707565b600181015461113a9086611707565b50505050505050565b6000610edd836001600160a01b03841661174a565b6000610edd836001600160a01b0384166116bd565b60009081526001919091016020526040902054151590565b5490565b815460009082106116055760405162461bcd60e51b815260040161028b90611d90565b82600001828154811061161457fe5b9060005260206000200154905092915050565b60008080836226496581018262023ab1600483020590506004600362023ab18302010590910390600062164b09610fa0600185010205905060046105b58202058303601f019250600061098f846050028161167e57fe5b0590506000605061098f83020585039050600b820560301994909401606402929092018301996002600c90940290910392909201975095509350505050565b60006116c983836115c6565b6116ff5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561032c565b50600061032c565b6000828211156117295760405162461bcd60e51b815260040161028b90611ebf565b50900390565b60008183111561173e57600080fd5b50620151809190030490565b60008181526001830160205260408120548015611806578354600019808301919081019060009087908390811061177d57fe5b906000526020600020015490508087600001848154811061179a57fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806117ca57fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061032c565b600091505061032c565b604051806101000160405280600080191681526020016000151581526020016000815260200160008152602001600080191681526020016000815260200160008152602001600081525090565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b80356001600160a01b038116811461032c57600080fd5b60008083601f84011261190d578182fd5b50813567ffffffffffffffff811115611924578182fd5b6020830191508360208083028501011115610feb57600080fd5b600082601f83011261194e578081fd5b813567ffffffffffffffff80821115611965578283fd5b602080830260405182828201018181108582111715611982578687fd5b6040528481529450818501925085820181870183018810156119a357600080fd5b600091505b848210156119c65780358452928201926001919091019082016119a8565b505050505092915050565b6000602082840312156119e2578081fd5b610edd83836118e5565b60008060008060808587031215611a01578283fd5b611a0b86866118e5565b9350611a1a86602087016118e5565b93969395505050506040820135916060013590565b60008060008060008060008060008060e08b8d031215611a4d578586fd5b611a578c8c6118e5565b9950611a668c60208d016118e5565b985060408b0135975060608b0135965060808b013567ffffffffffffffff80821115611a90578788fd5b611a9c8e838f016118fc565b909850965060a08d0135915080821115611ab4578586fd5b611ac08e838f016118fc565b909650945060c08d0135915080821115611ad8578384fd5b50611ae58d828e016118fc565b915080935050809150509295989b9194979a5092959850565b600080600080600080600060e0888a031215611b18578283fd5b611b2289896118e5565b9650611b318960208a016118e5565b95506040880135945060608801359350608088013567ffffffffffffffff80821115611b5b578485fd5b611b678b838c0161193e565b945060a08a0135915080821115611b7c578384fd5b611b888b838c0161193e565b935060c08a0135915080821115611b9d578283fd5b50611baa8a828b0161193e565b91505092959891949750929550565b60008060008060808587031215611a01578384fd5b600080600080600060a08688031215611be5578081fd5b8535611bf0816121b8565b94506020860135611c00816121b8565b94979496505050506040830135926060810135926080909101359150565b60008060008060008060c08789031215611c36578182fd5b611c4088886118e5565b9550611c4f88602089016118e5565b95989597505050506040840135936060810135936080820135935060a0909101359150565b9283526020830191909152604082015260600190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b6020808252825182820181905260009190848201906040850190845b81811015611d2157835183529284019291840191600101611d05565b50909695505050505050565b901515815260200190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252600f908201526e494e56414c49445f4144445245535360881b604082015260600190565b6020808252601390820152724964656e746963616c2061646472657373657360681b604082015260600190565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b60208082526018908201527f54494d45534c4f5420534554544c454420414c52454144590000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252600c908201526b5a65726f206164647265737360a01b604082015260600190565b6020808252601190820152700929c869ea4a48a86a8bea8b0be9082a69607b1b604082015260600190565b6020808252601e908201527f43616e277420616464206e6f6e2d636f6e747261637420616464726573730000604082015260600190565b6020808252601e908201527f43616e27742072656d6f7665206e6f6e2d6578697374696e6720757365720000604082015260600190565b6020808252601c908201527f496e636f727265637420766572696669636174696f6e20706172747900000000604082015260600190565b60208082526018908201527f4f5554204f4620534554544c454d454e542057494e444f570000000000000000604082015260600190565b60208082526025908201527f6e6f7420616c6c6f77656420746f20757365207061796d656e7420616767726560408201526433b0ba37b960d91b606082015260800190565b6020808252601390820152721393d397d49151d254d51154915117d1115053606a1b604082015260600190565b602080825260169082015275494e434f52524543545f434f554e544552504152545960501b604082015260600190565b6020808252601a908201527f43616e277420616464206578697374696e672061646472657373000000000000604082015260600190565b6020808252600c908201526b1393d517d0d3d395149050d560a21b604082015260600190565b6020808252601b908201527f496e636f727265637420736574746c656d656e7420616d6f756e740000000000604082015260600190565b8151815260208083015190820152604080830151908201526060808301511515908201526080808301519082015260a0808301516001600160a01b03169082015260c09182015115159181019190915260e00190565b90815260200190565b6001600160a01b03811681146121cd57600080fd5b5056fea264697066735822122094a0e208989d5ce766b430b6a858cee84d63ddf3a5531bd57b2d7fd46964ecd664736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addPaymentAggregatorUser(address)": {
        "details": "Trigers to add contract address to payment aggregator users address set",
        "params": {
          "_user": "Payment aggregator user smart contract address"
        }
      },
      "constructor": {
        "details": "Contract constructor function."
      },
      "getTimeSlotByDate(address,address,bytes32,uint256,uint256,uint256)": {
        "details": "Returns the time slot between parties using slot id.",
        "params": {
          "ccy": "Main payment settlement currency",
          "party0": "First counterparty address",
          "party1": "Second counterparty address"
        }
      },
      "getTimeSlotBySlotId(address,address,bytes32,bytes32)": {
        "details": "Returns the time slot between parties using slot id.",
        "params": {
          "ccy": "Main payment settlement currency",
          "party0": "First counterparty address",
          "party1": "Second counterparty address",
          "slot": "TimeSlot position"
        }
      },
      "isPaymentAggregatorUser(address)": {
        "details": "Trigers to check if provided `addr` is a payment aggregator user from address set",
        "params": {
          "_user": "Contract address to check if it's a payment aggregator user"
        }
      },
      "isSettled(address,address,bytes32,uint256)": {
        "details": "Triggers settlement status of the time slot",
        "params": {
          "ccy": "Main payment settlement currency",
          "party0": "First counterparty address",
          "party1": "Second counterparty address",
          "timestamp": "TimeSlot timestamp"
        },
        "returns": {
          "status": "Boolean if slot was settled"
        }
      },
      "registerPayments(address,address,bytes32,bytes32,uint256[],uint256[],uint256[])": {
        "details": "Triggered to add new payments for a deal",
        "params": {
          "ccy": "Main settlement currency in a deal",
          "dealId": "Deal unique ID with prefix",
          "party0": "First counterparty address",
          "party1": "Second counterparty address",
          "payments0": "Array of cashflows owed by the first party",
          "payments1": "Array of cashflows owed by the second party",
          "timestamps": "Array of timestamps for timeslot identification"
        }
      },
      "removePaymentAggregatorUser(address)": {
        "details": "Trigers to remove payment aggregator user from address set",
        "params": {
          "_user": "Payment aggregator user smart contract address"
        }
      },
      "removePayments(address,address,bytes32,bytes32,uint256[],uint256[],uint256[])": {
        "details": "Triggered to remove existing payments for a deal",
        "params": {
          "ccy": "Main settlement currency in a deal",
          "dealId": "Deal unique ID with prefix",
          "party0": "First counterparty address",
          "party1": "Second counterparty address",
          "payments0": "Array of cashflows owed by the first party",
          "payments1": "Array of cashflows owed by the second party",
          "timestamps": "Array of timestamps for timeslot identification"
        }
      },
      "setCloseOutNetting(address)": {
        "details": "Trigers to set close out netting smart contract",
        "params": {
          "_contract": "CloseOutNetting smart contract address"
        }
      },
      "setMarkToMarket(address)": {
        "details": "Trigers to set mark to market smart contract",
        "params": {
          "_contract": "MarkToMarket smart contract address"
        }
      },
      "settlePayment(address,address,bytes32,uint256,bytes32)": {
        "details": "External function to settle payment using timestamp to identify TimeSlot.",
        "params": {
          "ccy": "Main payment settlement currency",
          "counterparty": "Counterparty address",
          "timestamp": "Main timestamp for TimeSlot",
          "txHash": "Main payment settlement currency",
          "verifier": "Payment settlement verifier address"
        }
      },
      "verifyPayment(address,address,bytes32,uint256,uint256,bytes32)": {
        "details": "External function to verify payment by msg.sender, uses timestamp to identify TimeSlot.",
        "params": {
          "ccy": "Main payment settlement currency",
          "counterparty": "Counterparty address",
          "payment": "Main payment settlement currency",
          "timestamp": "Main timestamp for TimeSlot",
          "txHash": "Main payment settlement currency",
          "verifier": "Payment verifier address"
        }
      }
    },
    "title": "Payment Aggregator contract is used to aggregate payments between counterparties in bilateral relationships. Those payments are defined per counterparties addresses (packed into one bytes32), main settlement currency and payment date. Contract linked to all product based contracts like Loan, Swap, etc.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPaymentAggregatorUser(address)": {
        "notice": "Trigers only be contract ownerReverts on saving 0x0 address"
      },
      "constructor": "sets contract deployer as owner of this contract",
      "removePaymentAggregatorUser(address)": {
        "notice": "Trigers only be contract ownerReverts on removing non-existing payment aggregator user"
      },
      "setCloseOutNetting(address)": {
        "notice": "Trigers only be contract ownerReverts on saving 0x0 address"
      },
      "setMarkToMarket(address)": {
        "notice": "Trigers only be contract ownerReverts on saving 0x0 address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17624,
        "contract": "contracts/PaymentAggregator.sol:PaymentAggregator",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17628,
        "contract": "contracts/PaymentAggregator.sol:PaymentAggregator",
        "label": "settlementWindow",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 17633,
        "contract": "contracts/PaymentAggregator.sol:PaymentAggregator",
        "label": "paymentAggregatorUsers",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)1812_storage"
      },
      {
        "astId": 17635,
        "contract": "contracts/PaymentAggregator.sol:PaymentAggregator",
        "label": "closeOutNetting",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ICloseOutNetting)19824"
      },
      {
        "astId": 17637,
        "contract": "contracts/PaymentAggregator.sol:PaymentAggregator",
        "label": "markToMarket",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IMarkToMarket)22011"
      },
      {
        "astId": 17645,
        "contract": "contracts/PaymentAggregator.sol:PaymentAggregator",
        "label": "_timeSlots",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_bytes32,t_struct(Slot)31691_storage)))"
      },
      {
        "astId": 17653,
        "contract": "contracts/PaymentAggregator.sol:PaymentAggregator",
        "label": "deals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_bytes32,t_struct(Bytes32Set)1727_storage)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICloseOutNetting)19824": {
        "encoding": "inplace",
        "label": "contract ICloseOutNetting",
        "numberOfBytes": "20"
      },
      "t_contract(IMarkToMarket)22011": {
        "encoding": "inplace",
        "label": "contract IMarkToMarket",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_bytes32,t_struct(Bytes32Set)1727_storage)))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => mapping(bytes32 => struct EnumerableSet.Bytes32Set)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_struct(Bytes32Set)1727_storage))"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_bytes32,t_struct(Slot)31691_storage)))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => mapping(bytes32 => struct TimeSlot.Slot)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_struct(Slot)31691_storage))"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_struct(Bytes32Set)1727_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => struct EnumerableSet.Bytes32Set))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(Bytes32Set)1727_storage)"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_struct(Slot)31691_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => struct TimeSlot.Slot))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(Slot)31691_storage)"
      },
      "t_mapping(t_bytes32,t_struct(Bytes32Set)1727_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)1727_storage"
      },
      "t_mapping(t_bytes32,t_struct(Slot)31691_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct TimeSlot.Slot)",
        "numberOfBytes": "32",
        "value": "t_struct(Slot)31691_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1812_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1811,
            "contract": "contracts/PaymentAggregator.sol:PaymentAggregator",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1547_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)1727_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 1726,
            "contract": "contracts/PaymentAggregator.sol:PaymentAggregator",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1547_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1547_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1542,
            "contract": "contracts/PaymentAggregator.sol:PaymentAggregator",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1546,
            "contract": "contracts/PaymentAggregator.sol:PaymentAggregator",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Slot)31691_storage": {
        "encoding": "inplace",
        "label": "struct TimeSlot.Slot",
        "members": [
          {
            "astId": 31678,
            "contract": "contracts/PaymentAggregator.sol:PaymentAggregator",
            "label": "totalPayment0",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 31680,
            "contract": "contracts/PaymentAggregator.sol:PaymentAggregator",
            "label": "totalPayment1",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 31682,
            "contract": "contracts/PaymentAggregator.sol:PaymentAggregator",
            "label": "netPayment",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 31684,
            "contract": "contracts/PaymentAggregator.sol:PaymentAggregator",
            "label": "flipped",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 31686,
            "contract": "contracts/PaymentAggregator.sol:PaymentAggregator",
            "label": "paymentProof",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 31688,
            "contract": "contracts/PaymentAggregator.sol:PaymentAggregator",
            "label": "verificationParty",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 31690,
            "contract": "contracts/PaymentAggregator.sol:PaymentAggregator",
            "label": "isSettled",
            "offset": 20,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}