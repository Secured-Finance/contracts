{
  "address": "0xbc7595aFc5B13FC336014754E3b9567f0D0cc2e5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidationAgent",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        }
      ],
      "name": "DealAddedToLiquidationQueue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        }
      ],
      "name": "DealRemovedFromLiquidationQueue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "LinkedContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidationAgent",
          "type": "address"
        }
      ],
      "name": "LiquidationAgentAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidationAgent",
          "type": "address"
        }
      ],
      "name": "LiquidationAgentRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldOffset",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newOffset",
          "type": "uint256"
        }
      ],
      "name": "OffsetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        }
      ],
      "name": "addDealToLiquidationQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidationAgent",
          "type": "address"
        }
      ],
      "name": "addLiquidationAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "linkContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "dealIds",
          "type": "bytes32[]"
        }
      ],
      "name": "liquidateDeals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        }
      ],
      "name": "liquidateDeals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        }
      ],
      "name": "removeDealFromLiquidationQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidationAgent",
          "type": "address"
        }
      ],
      "name": "removeLiquidationAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setCollateralAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setCurrencyController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setProductAddressResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "updateLiquidationOffset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "updateOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x83f823f244c365c99f9668a453725b82d10f69f8e5b39ab82a4976b20b35723f",
  "receipt": {
    "to": null,
    "from": "0x57AB42d4fa756b6956b0cAf986a5f53bA90D9e28",
    "contractAddress": "0xbc7595aFc5B13FC336014754E3b9567f0D0cc2e5",
    "transactionIndex": 1,
    "gasUsed": "1389207",
    "logsBloom": "0x
    "blockHash": "0xbe1f63a92610a3cff9acf6d5d777b3a7c52e1017675075b083b68ccf875f0229",
    "transactionHash": "0x83f823f244c365c99f9668a453725b82d10f69f8e5b39ab82a4976b20b35723f",
    "logs": [],
    "blockNumber": 12164697,
    "cumulativeGasUsed": "1443933",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x57AB42d4fa756b6956b0cAf986a5f53bA90D9e28",
    10
  ],
  "numDeployments": 1,
  "solcInputHash": "48d264388c4204a72ee447cb1af8bee3",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidationAgent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"}],\"name\":\"DealAddedToLiquidationQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"}],\"name\":\"DealRemovedFromLiquidationQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"LinkedContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidationAgent\",\"type\":\"address\"}],\"name\":\"LiquidationAgentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidationAgent\",\"type\":\"address\"}],\"name\":\"LiquidationAgentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldOffset\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOffset\",\"type\":\"uint256\"}],\"name\":\"OffsetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"}],\"name\":\"addDealToLiquidationQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidationAgent\",\"type\":\"address\"}],\"name\":\"addLiquidationAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"linkContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"dealIds\",\"type\":\"bytes32[]\"}],\"name\":\"liquidateDeals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"}],\"name\":\"liquidateDeals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"}],\"name\":\"removeDealFromLiquidationQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidationAgent\",\"type\":\"address\"}],\"name\":\"removeLiquidationAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setCollateralAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setCurrencyController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setProductAddressResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"updateLiquidationOffset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidationAgent(address)\":{\"details\":\"Adds liquidation agent address into the set.\",\"params\":{\"_liquidationAgent\":\"Liquidation agent address\"}},\"constructor\":{\"details\":\"Contract constructor function.\"},\"linkContract(address)\":{\"details\":\"Triggers to link liquidation contract with smart contract with specified `_addr`.\",\"params\":{\"_addr\":\"Liquidation agent address\"}},\"liquidateDeals(address,address)\":{\"details\":\"Triggers to liquidate multiple deals according to the liquidation queue\",\"params\":{\"party0\":\"First counterparty address\",\"party1\":\"Second counterparty address\"}},\"liquidateDeals(address,address,bytes32[])\":{\"details\":\"Triggers to liquidate multiple deals with specific `_dealIds`.\",\"params\":{\"dealIds\":\"Array of Deal ID to liquidate\",\"party0\":\"First counterparty address\",\"party1\":\"Second counterparty address\"}},\"removeLiquidationAgent(address)\":{\"details\":\"Removes liquidation agent address from the set.\",\"params\":{\"_liquidationAgent\":\"Liquidation agent address\"}},\"setCollateralAggregator(address)\":{\"details\":\"Triggers to link with CollateralAggregator contract.\",\"params\":{\"addr\":\"CollateralAggregator contract address\"}},\"setCurrencyController(address)\":{\"details\":\"Triggers to link with CurrencyController contract.\",\"params\":{\"addr\":\"CurrencyController contract address\"}},\"setProductAddressResolver(address)\":{\"details\":\"Triggers to link with ProductAddressResolver contract.\",\"params\":{\"addr\":\"ProductAddressResolver contract address\"}},\"updateLiquidationOffset(uint256)\":{\"details\":\"Updates offset for maximum number of deals liquidated per one execution.\",\"params\":{\"_offset\":\"New liquidation offset\"}},\"updateOwner(address)\":{\"details\":\"Updates owner of the liquidation contract.\",\"params\":{\"_owner\":\"Address of new owner\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":\"sets contract deployer as owner of this contract, liquidation agent and liquidation offset\",\"setCollateralAggregator(address)\":{\"notice\":\"Executed only by contract owner\"},\"setCurrencyController(address)\":{\"notice\":\"Executed only by contract owner\"},\"setProductAddressResolver(address)\":{\"notice\":\"Executed only by contract owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Liquidations.sol\":\"Liquidations\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/Liquidations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"./libraries/AddressPacking.sol\\\";\\nimport \\\"./interfaces/IProductAddressResolver.sol\\\";\\nimport \\\"./interfaces/ICollateralAggregatorV2.sol\\\";\\nimport \\\"./interfaces/ICurrencyController.sol\\\";\\nimport \\\"./interfaces/IProduct.sol\\\";\\nimport \\\"./interfaces/ILiquidations.sol\\\";\\n\\ncontract Liquidations is ILiquidations {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    uint256 public override offset;\\n    address public owner;\\n    EnumerableSet.AddressSet private liquidationAgents;\\n    EnumerableSet.AddressSet private linkedContracts;\\n\\n    // Mapping structure for storing liquidation queue to bilateral position\\n    mapping(bytes32 => EnumerableSet.Bytes32Set) private liquidationQueue;\\n\\n    // Contracts\\n    IProductAddressResolver productResolver;\\n    ICollateralAggregator collateralAggregator;\\n    ICurrencyController currencyController;\\n\\n    /**\\n     * @dev Modifier to make a function callable only by contract owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by liquidation agent.\\n     */\\n    modifier onlyLiquidationAgent() {\\n        require(liquidationAgents.contains(msg.sender), \\\"INVALID ACCESS\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by liquidation agent.\\n     */\\n    modifier onlyLinkedContract() {\\n        require(linkedContracts.contains(msg.sender), \\\"INVALID ACCESS\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract constructor function.\\n     *\\n     * @notice sets contract deployer as owner of this contract,\\n     * liquidation agent and liquidation offset\\n     */\\n    constructor(address _liquidationAgent, uint256 _offset) public {\\n        owner = msg.sender;\\n        liquidationAgents.add(_liquidationAgent);\\n        offset = _offset;\\n    }\\n\\n    /**\\n     * @dev Triggers to link with ProductAddressResolver contract.\\n     * @param addr ProductAddressResolver contract address\\n     *\\n     * @notice Executed only by contract owner\\n     */\\n    function setProductAddressResolver(address addr) public onlyOwner {\\n        productResolver = IProductAddressResolver(addr);\\n    }\\n\\n    /**\\n     * @dev Triggers to link with CollateralAggregator contract.\\n     * @param addr CollateralAggregator contract address\\n     *\\n     * @notice Executed only by contract owner\\n     */\\n    function setCollateralAggregator(address addr) public onlyOwner {\\n        collateralAggregator = ICollateralAggregator(addr);\\n    }\\n\\n    /**\\n     * @dev Triggers to link with CurrencyController contract.\\n     * @param addr CurrencyController contract address\\n     *\\n     * @notice Executed only by contract owner\\n     */\\n    function setCurrencyController(address addr) public onlyOwner {\\n        currencyController = ICurrencyController(addr);\\n    }\\n\\n    /**\\n     * @dev Updates offset for maximum number of deals liquidated per one execution.\\n     * @param _offset New liquidation offset\\n     */\\n    function updateLiquidationOffset(uint256 _offset)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        require(_offset > 0, \\\"INCORRECT_OFFSET\\\");\\n        emit OffsetUpdated(offset, _offset);\\n        offset = _offset;\\n    }\\n\\n    /**\\n     * @dev Triggers to link liquidation contract with smart contract with specified `_addr`.\\n     * @param _addr Liquidation agent address\\n     */\\n    function linkContract(address _addr) public override onlyOwner {\\n        linkedContracts.add(_addr);\\n        emit LinkedContract(_addr);\\n    }\\n\\n    /**\\n     * @dev Adds liquidation agent address into the set.\\n     * @param _liquidationAgent Liquidation agent address\\n     */\\n    function addLiquidationAgent(address _liquidationAgent)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        liquidationAgents.add(_liquidationAgent);\\n        emit LiquidationAgentAdded(_liquidationAgent);\\n    }\\n\\n    /**\\n     * @dev Removes liquidation agent address from the set.\\n     * @param _liquidationAgent Liquidation agent address\\n     */\\n    function removeLiquidationAgent(address _liquidationAgent)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        liquidationAgents.remove(_liquidationAgent);\\n        emit LiquidationAgentRemoved(_liquidationAgent);\\n    }\\n\\n    /**\\n     * @dev Updates owner of the liquidation contract.\\n     * @param _owner Address of new owner\\n     */\\n    function updateOwner(address _owner) public onlyOwner {\\n        require(_owner != address(0), \\\"new owner is the zero address\\\");\\n        emit OwnerUpdated(owner, _owner);\\n        owner = _owner;\\n    }\\n\\n    function addDealToLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) public override onlyLinkedContract {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(party0, party1);\\n        EnumerableSet.Bytes32Set storage set = liquidationQueue[packedAddrs];\\n\\n        require(!set.contains(dealId), \\\"ALREADY EXISTING DEAL\\\");\\n        set.add(dealId);\\n\\n        DealAddedToLiquidationQueue(party0, party1, dealId);\\n    }\\n\\n    function removeDealFromLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) public override onlyLinkedContract {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(party0, party1);\\n        EnumerableSet.Bytes32Set storage set = liquidationQueue[packedAddrs];\\n\\n        require(set.contains(dealId), \\\"NON EXISTING DEAL\\\");\\n        set.remove(dealId);\\n\\n        DealRemovedFromLiquidationQueue(party0, party1, dealId);\\n    }\\n\\n    /**\\n     * @dev Triggers to liquidate multiple deals according to the liquidation queue\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     */\\n    function liquidateDeals(address party0, address party1)\\n        public\\n        override\\n        onlyLiquidationAgent\\n    {\\n        (bool coverage0, bool coverage1) = collateralAggregator.isCovered(\\n            party0,\\n            party1,\\n            \\\"\\\",\\n            0,\\n            0,\\n            false\\n        );\\n        if (coverage0 && coverage1) return;\\n\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(party0, party1);\\n        EnumerableSet.Bytes32Set storage set = liquidationQueue[packedAddrs];\\n\\n        uint256 numDeals = set.length();\\n        uint256 numLiquidations;\\n        numDeals > offset\\n            ? numLiquidations = offset\\n            : numLiquidations = numDeals;\\n        bytes32[] memory dealIds = new bytes32[](numLiquidations);\\n\\n        for (uint256 i = 0; i < numLiquidations; i++) {\\n            bytes32 dealId = set.at(i);\\n            dealIds[i] = dealId;\\n        }\\n\\n        _liquidateDeals(party0, party1, dealIds);\\n    }\\n\\n    /**\\n     * @dev Triggers to liquidate multiple deals with specific `_dealIds`.\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param dealIds Array of Deal ID to liquidate\\n     */\\n    function liquidateDeals(\\n        address party0,\\n        address party1,\\n        bytes32[] memory dealIds\\n    ) public override onlyLiquidationAgent {\\n        require(dealIds.length < offset, \\\"TOO MUCH DEALS\\\");\\n        (bool coverage0, bool coverage1) = collateralAggregator.isCovered(\\n            party0,\\n            party1,\\n            \\\"\\\",\\n            0,\\n            0,\\n            false\\n        );\\n        if (coverage0 && coverage1) return;\\n\\n        _liquidateDeals(party0, party1, dealIds);\\n    }\\n\\n    struct LiquidationLocalVars {\\n        bytes32 dealId;\\n        uint256 dealPV0;\\n        uint256 dealPV1;\\n        uint256 totalLiquidationPVInETH0;\\n        uint256 totalLiquidationPVInETH1;\\n        uint256 exchangeRate;\\n        bytes32 currency;\\n        address product;\\n    }\\n\\n    function _liquidateDeals(\\n        address party0,\\n        address party1,\\n        bytes32[] memory dealIds\\n    ) internal {\\n        LiquidationLocalVars memory vars;\\n\\n        for (uint256 i = 0; i < dealIds.length; i++) {\\n            vars.dealId = dealIds[i];\\n            vars.product = productResolver.getProductContractByDealId(\\n                vars.dealId\\n            );\\n\\n            vars.currency = IProduct(vars.product).getDealCurrency(vars.dealId);\\n\\n            (vars.dealPV0, vars.dealPV1) = IProduct(vars.product).getDealLastPV(\\n                party0,\\n                party1,\\n                vars.dealId\\n            );\\n            vars.exchangeRate = uint256(\\n                currencyController.getLastETHPrice(vars.currency)\\n            );\\n\\n            vars.dealPV0 = vars.dealPV0.mul(vars.exchangeRate).div(1e18);\\n            vars.dealPV1 = vars.dealPV1.mul(vars.exchangeRate).div(1e18);\\n\\n            vars.totalLiquidationPVInETH0 = vars.totalLiquidationPVInETH0.add(\\n                vars.dealPV0\\n            );\\n            vars.totalLiquidationPVInETH1 = vars.totalLiquidationPVInETH1.add(\\n                vars.dealPV1\\n            );\\n\\n            IProduct(vars.product).liquidate(vars.dealId);\\n        }\\n\\n        if (vars.totalLiquidationPVInETH0 > 0) {\\n            collateralAggregator.liquidate(\\n                party0,\\n                party1,\\n                vars.totalLiquidationPVInETH0\\n            );\\n        }\\n\\n        if (vars.totalLiquidationPVInETH1 > 0) {\\n            collateralAggregator.liquidate(\\n                party1,\\n                party0,\\n                vars.totalLiquidationPVInETH1\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1270c583c8583f95cf54e629b7100c8fb29a232184c24d27aec0145e4f3d936\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralAggregatorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICollateralAggregator {\\n    event Register(address indexed addr);\\n    event Release(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    );\\n    event ReleaseUnsettled(address indexed party, bytes32 ccy, uint256 amount);\\n    event SettleCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event UpdatePV(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    );\\n    event UseCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    );\\n    event UseUnsettledCollateral(\\n        address indexed party,\\n        bytes32 ccy,\\n        uint256 amount\\n    );\\n\\n    function checkRegisteredUser(address addr) external view returns (bool);\\n\\n    function enterVault(address _user) external;\\n\\n    function enterVault(address _party0, address _party1) external;\\n\\n    function exitVault(address _user) external;\\n\\n    function exitVault(address _party0, address _party1) external;\\n\\n    function getCcyExposures(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getCoverage(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getExposedCurrencies(address partyA, address partyB)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getMaxCollateralBookWidthdraw(address _user)\\n        external\\n        view\\n        returns (uint256 maxWithdraw);\\n\\n    function getMaxCollateralWidthdraw(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getNetAndTotalPV(address _party0, address _party1)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getRebalanceCollateralAmounts(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getTotalUnsettledExp(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getUnsettledCoverage(address _user)\\n        external\\n        view\\n        returns (uint256 coverage);\\n\\n    function isCovered(\\n        address _party0,\\n        address _party1,\\n        bytes32 _ccy,\\n        uint256 _party0PV,\\n        uint256 _party1PV,\\n        bool _isSettled\\n    ) external view returns (bool, bool);\\n\\n    function isCoveredUnsettled(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) external view returns (bool);\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        uint256 liquidationInETH\\n    ) external;\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        bytes32 ccy,\\n        uint256 liquidationAmount,\\n        bool isSettled\\n    ) external;\\n\\n    function register() external;\\n\\n    function register(\\n        string[] memory _addresses, \\n        uint256[] memory _chainIds\\n    ) external;\\n\\n    function releaseCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function releaseUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function settleCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external;\\n\\n    function updatePV(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    ) external;\\n\\n    function useCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function useUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function getUsedVaults(address user)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function getUsedVaults(address party0, address party1)\\n        external\\n        view\\n        returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x65d1b2bb163eb495c39444bc0316fdf5ea9eb158c31b22bdd94d7d9e7760d373\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n *\\n * Currency controller contract copies the logic of FXRatesAggregator contract, and\\n * will replace that contract in connection with Collateral Aggregator\\n */\\ninterface ICurrencyController {\\n    event CcyAdded(\\n        bytes32 indexed ccy,\\n        string name,\\n        uint16 chainId,\\n        uint256 haircut\\n    );\\n    event CcyCollateralUpdate(bytes32 indexed ccy, bool isCollateral);\\n    event CcySupportUpdate(bytes32 indexed ccy, bool isSupported);\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n    event MinMarginUpdated(bytes32 indexed ccy, uint256 minMargin);\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n    event PriceFeedAdded(\\n        bytes32 ccy,\\n        string secondCcy,\\n        address indexed priceFeed\\n    );\\n    event PriceFeedRemoved(\\n        bytes32 ccy,\\n        string secondCcy,\\n        address indexed priceFeed\\n    );\\n\\n    function convertBulkToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function currencies(bytes32)\\n        external\\n        view\\n        returns (\\n            bool isSupported,\\n            string memory name,\\n            uint16 chainId\\n        );\\n\\n    function ethDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getMinMargin(bytes32 _ccy) external view returns (uint256);\\n\\n    function haircuts(bytes32) external view returns (uint256);\\n\\n    function isCollateral(bytes32) external view returns (bool);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function last_ccy_index() external view returns (uint8);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function minMargins(bytes32) external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function setOwner(address _owner) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        uint16 _chainId,\\n        address _ethPriceFeed,\\n        uint256 _haircut\\n    ) external returns (bool);\\n\\n    function supportedCurrencies() external view returns (uint8);\\n\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut)\\n        external\\n        returns (bool);\\n\\n    function updateCollateralSupport(bytes32 _ccy, bool _isSupported)\\n        external\\n        returns (bool);\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported)\\n        external\\n        returns (bool);\\n\\n    function updateMinMargin(bytes32 _ccy, uint256 _minMargin)\\n        external\\n        returns (bool);\\n\\n    function usdDecimals(bytes32) external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xfe21b4283f1cfc907ade17b20e68c80e5e4800f4ffaa7bec74ef245fe497cb3a\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface ILiquidations {\\n    event DealAddedToLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    );\\n    event DealRemovedFromLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    );\\n    event LinkedContract(address addr);\\n    event LiquidationAgentAdded(address indexed liquidationAgent);\\n    event LiquidationAgentRemoved(address indexed liquidationAgent);\\n    event OffsetUpdated(uint256 oldOffset, uint256 newOffset);\\n    event OwnerUpdated(address indexed oldOwner, address indexed newOwner);\\n\\n    function addDealToLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external;\\n\\n    function addLiquidationAgent(address _liquidationAgent) external;\\n\\n    function linkContract(address _addr) external;\\n\\n    function liquidateDeals(\\n        address party0,\\n        address party1,\\n        bytes32[] memory dealIds\\n    ) external;\\n\\n    function liquidateDeals(address party0, address party1) external;\\n\\n    function offset() external view returns (uint256);\\n\\n    function removeDealFromLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external;\\n\\n    function removeLiquidationAgent(address _liquidationAgent) external;\\n\\n    function updateLiquidationOffset(uint256 _offset) external;\\n}\\n\",\"keccak256\":\"0x54306b84a9dedee181de4a25a0c2dc08fb60d4f71ebf2543cdd5ec24399bbf63\",\"license\":\"MIT\"},\"contracts/interfaces/IProduct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title IProduct is a common interface for various products on secured finance protocol\\n */\\ninterface IProduct {\\n    event Liquidate(bytes32 dealId);\\n    event RequestTermination(bytes32 dealId, address indexed requestedBy);\\n    event RejectTermination(bytes32 dealId, address indexed rejectedBy);\\n    event EarlyTermination(\\n        bytes32 dealId,\\n        address indexed acceptedBy,\\n        uint256 payment\\n    );\\n    event MarkToMarket(bytes32 dealId, uint256 prevPV, uint256 currPV);\\n\\n    /**\\n     * Triggered to liquidate existing deal of this product type\\n     * @param dealId Deal unique id in bytes32 word.\\n     */\\n    function liquidate(bytes32 dealId) external;\\n\\n    /**\\n     * Triggered to request early termination of this specific deal\\n     * @param dealId Deal unique id in bytes32 word.\\n     */\\n    function requestTermination(bytes32 dealId) external;\\n\\n    /**\\n     * Triggered to reject previously requested early termination of this deal\\n     * @param dealId Deal unique id in bytes32 word.\\n     */\\n    function rejectTermination(bytes32 dealId) external;\\n\\n    /**\\n     * Triggered to accept previously requested early termination of this deal\\n     * @param dealId Deal unique id in bytes32 word.\\n     */\\n    function acceptTermination(bytes32 dealId) external;\\n\\n    /**\\n     * Triggered to update present value of the deal\\n     * @param dealId Deal unique id in bytes32 word.\\n     */\\n    function markToMarket(bytes32 dealId) external returns (bool);\\n\\n    // /**\\n    //  * Returns the state of the deal by `dealId`\\n    //  * @param dealId Deal unique id in bytes32 word.\\n    //  *\\n    //  * @return State identifier\\n    //  */\\n    // function getDealState(bytes32 dealId) external view returns (uint8);\\n\\n    /**\\n     * Returns the main currency of the deal.\\n     * @param dealId Deal unique id in bytes32 word.\\n     *\\n     * @return Currency short identifier.\\n     */\\n    function getDealCurrency(bytes32 dealId) external view returns (bytes32);\\n\\n    /**\\n     * Returns previously saved present value of the deal.\\n     * @param dealId Deal unique id in bytes32 word.\\n     *\\n     * @return Present value previously saved during mark-to-market.\\n     */\\n    function getDealLastPV(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external view returns (uint256, uint256);\\n\\n    /**\\n     * Triggers to recalculate and return current present value of the deal.\\n     * @param dealId Deal unique id in bytes32 word.\\n     *\\n     * @return Present value at the time of execution.\\n     */\\n    function getDealPV(bytes32 dealId) external view returns (uint256);\\n\\n    /**\\n     * Returns settlement status of the deal by `dealId`\\n     * @param dealId Deal unique id in bytes32 word.\\n     *\\n     * @return Settlement bool identifier\\n     */\\n    function getDealSettlementStatus(bytes32 dealId)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * Get the version of the underlying contract.\\n     *\\n     * @return Version number.\\n     */\\n    function getVersion() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xc3cc3591cf950ec247fa500bb6c191e40f209052fb1738a989bfb12077fec837\",\"license\":\"MIT\"},\"contracts/interfaces/IProductAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface IProductAddressResolver {\\n    event RegisterProduct(\\n        bytes4 prefix,\\n        address indexed product,\\n        address indexed controller\\n    );\\n\\n    /**\\n     * @dev Trigers to register new product type in a address resolver\\n     * @param _prefix Bytes4 prefix for product type\\n     * @param _contract Product contract address\\n     * @param _controller Market controller address\\n     *\\n     * @notice Trigers only be contract owner\\n     * @notice Reverts on saving contract which is not supporting a common interface\\n     */\\n    function registerProduct(\\n        bytes4 _prefix,\\n        address _contract,\\n        address _controller\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to register several product types in a address resolver\\n     * @param _prefixes Array of Bytes4 prefixes for each product type\\n     * @param _contracts Array of smart contract addresses for each product\\n     * @param _controllers Array of market controller addresses\\n     *\\n     * @notice Trigers only be contract owner\\n     * @notice Reverts on saving contract which is not supporting common interface\\n     */\\n    function registerProducts(\\n        bytes4[] calldata _prefixes,\\n        address[] calldata _contracts,\\n        address[] calldata _controllers\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to get product address by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContract(bytes4 _prefix) external view returns (address);\\n\\n    /**\\n     * @dev Trigers to get product address by deal id\\n     * @param _dealId Product deal idenfitier\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContractByDealId(bytes32 _dealId)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @dev Trigers to get market controller address by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     * @notice To work with the contract this address should be wrapped around IYieldCurve interface\\n     */\\n    function getControllerContract(bytes4 _prefix)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @dev Trigers to get market controller address by deal id\\n     * @param _dealId Product deal idenfitier\\n     * @notice To work with the contract this address should be wrapped around IYieldCurve interface\\n     */\\n    function getControllerContractByDealId(bytes32 _dealId)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product is supported by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     */\\n    function isSupportedProduct(bytes4 _prefix) external view returns (bool);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product is supported by deal id.\\n     * @param _dealId Product deal idenfitier\\n     */\\n    function isSupportedProductByDealId(bytes32 _dealId)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x725c8887c2695629e6e6cda13d2ec086d58098b8c1de007efc2d74ee5dabd6ef\",\"license\":\"MIT\"},\"contracts/libraries/AddressPacking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nlibrary AddressPacking {\\n    /**\\n     * @dev Packs two addresses into one hash to reduce the number of arguments\\n     * @param addr0 First address\\n     * @param addr1 Second address\\n     * @return Boolean to identify if addresses were flipped\\n     */\\n    function pack(address addr0, address addr1)\\n        internal\\n        pure\\n        returns (bytes32, bool)\\n    {\\n        require(addr0 != addr1, \\\"Identical addresses\\\");\\n        (address _addr0, address _addr1) = addr0 < addr1\\n            ? (addr0, addr1)\\n            : (addr1, addr0);\\n        require(_addr0 != address(0), \\\"Invalid address\\\");\\n\\n        if (_addr0 != addr0) {\\n            return (keccak256(abi.encode(_addr0, _addr1)), true);\\n        } else {\\n            return (keccak256(abi.encode(_addr0, _addr1)), false);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe567a45d9e5739f3e89da206f5041692c8c7a2f9a837d23fa9e50117b81e773\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063b884582c1161008c578063d04cad0211610066578063d04cad0214610320578063d271900d14610346578063d55565441461036c578063d598cd8114610386576100ea565b8063b884582c14610286578063beedefc9146102bc578063c2f3bd4a146102f2576100ea565b806378b2479a116100c857806378b2479a146101f9578063880cdc31146102165780638da5cb5b1461023c5780639810923f14610260576100ea565b8063399f8563146100ef57806365f0847a146101175780636f0a11c4146101d3575b600080fd5b6101156004803603602081101561010557600080fd5b50356001600160a01b03166103ac565b005b6101156004803603606081101561012d57600080fd5b6001600160a01b03823581169260208101359091169181019060608101604082013564010000000081111561016157600080fd5b82018360208201111561017357600080fd5b8035906020019184602083028401116401000000008311171561019557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610406945050505050565b610115600480360360208110156101e957600080fd5b50356001600160a01b0316610567565b6101156004803603602081101561020f57600080fd5b50356105a0565b6101156004803603602081101561022c57600080fd5b50356001600160a01b0316610641565b61024461070f565b604080516001600160a01b039092168252519081900360200190f35b6101156004803603602081101561027657600080fd5b50356001600160a01b031661071e565b6101156004803603606081101561029c57600080fd5b506001600160a01b03813581169160208101359091169060400135610778565b610115600480360360608110156102d257600080fd5b506001600160a01b0381358116916020810135909116906040013561088e565b6101156004803603604081101561030857600080fd5b506001600160a01b03813581169160200135166109a9565b6101156004803603602081101561033657600080fd5b50356001600160a01b0316610b89565b6101156004803603602081101561035c57600080fd5b50356001600160a01b0316610bc2565b610374610c24565b60408051918252519081900360200190f35b6101156004803603602081101561039c57600080fd5b50356001600160a01b0316610c2a565b6001546001600160a01b031633146103c357600080fd5b6103ce600282610c63565b506040516001600160a01b038216907fca54a159f8acb315394931246b8790a2785d67772bd1314afd4a67a9d26b39d390600090a250565b610411600233610c81565b610453576040805162461bcd60e51b815260206004820152600e60248201526d494e56414c49442041434345535360901b604482015290519081900360640190fd5b60005481511061049b576040805162461bcd60e51b815260206004820152600e60248201526d544f4f204d554348204445414c5360901b604482015290519081900360640190fd5b600854604080516377bad5db60e11b81526001600160a01b03868116600483015285811660248301526000606483018190526084830181905260a4830181905283519094859492169263ef75abb69260c4808301939192829003018186803b15801561050657600080fd5b505afa15801561051a573d6000803e3d6000fd5b505050506040513d604081101561053057600080fd5b50805160209091015190925090508180156105485750805b15610554575050610562565b61055f858585610c96565b50505b505050565b6001546001600160a01b0316331461057e57600080fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031633146105b757600080fd5b600081116105ff576040805162461bcd60e51b815260206004820152601060248201526f125390d3d4949150d517d3d19194d15560821b604482015290519081900360640190fd5b600054604080519182526020820183905280517f8ad4d4498263127d0966701929acd0fd4ef45595df9d67db529a43b46972689d9281900390910190a1600055565b6001546001600160a01b0316331461065857600080fd5b6001600160a01b0381166106b3576040805162461bcd60e51b815260206004820152601d60248201527f6e6577206f776e657220697320746865207a65726f2061646472657373000000604482015290519081900360640190fd5b6001546040516001600160a01b038084169216907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031681565b6001546001600160a01b0316331461073557600080fd5b6107406002826110dc565b506040516001600160a01b038216907f7e6c9f428aa5d9a1fdd152042fce5dd28d8ea524649e8a9b3066dd75ebe1a02490600090a250565b610783600433610c81565b6107c5576040805162461bcd60e51b815260206004820152600e60248201526d494e56414c49442041434345535360901b604482015290519081900360640190fd5b60006107d184846110f1565b5060008181526006602052604090209091506107ed8184611265565b610832576040805162461bcd60e51b81526020600482015260116024820152701393d38811561254d5125391c811115053607a1b604482015290519081900360640190fd5b61083c8184611271565b50604080516001600160a01b0380881682528616602082015280820185905290517fb60fc83c73a71a738ac8cef1dbf0b5768fac994a68026b338b027f1bd233db879181900360600190a15050505050565b610899600433610c81565b6108db576040805162461bcd60e51b815260206004820152600e60248201526d494e56414c49442041434345535360901b604482015290519081900360640190fd5b60006108e784846110f1565b5060008181526006602052604090209091506109038184611265565b1561094d576040805162461bcd60e51b8152602060048201526015602482015274105314915051164811561254d5125391c811115053605a1b604482015290519081900360640190fd5b610957818461127d565b50604080516001600160a01b0380881682528616602082015280820185905290517fb3f8c6466290eeb06c660ababdfebef06a9061c94f7a0aa42bcad0d91887aa609181900360600190a15050505050565b6109b4600233610c81565b6109f6576040805162461bcd60e51b815260206004820152600e60248201526d494e56414c49442041434345535360901b604482015290519081900360640190fd5b600854604080516377bad5db60e11b81526001600160a01b03858116600483015284811660248301526000606483018190526084830181905260a4830181905283519094859492169263ef75abb69260c4808301939192829003018186803b158015610a6157600080fd5b505afa158015610a75573d6000803e3d6000fd5b505050506040513d6040811015610a8b57600080fd5b5080516020909101519092509050818015610aa35750805b15610aaf575050610b85565b6000610abb85856110f1565b506000818152600660205260408120919250610ad682611289565b9050600080548211610aea57508080610af0565b50600054805b5060608167ffffffffffffffff81118015610b0a57600080fd5b50604051908082528060200260200182016040528015610b34578160200160208202803683370190505b50905060005b82811015610b71576000610b4e8683611294565b905080838381518110610b5d57fe5b602090810291909101015250600101610b3a565b50610b7d898983610c96565b505050505050505b5050565b6001546001600160a01b03163314610ba057600080fd5b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610bd957600080fd5b610be4600482610c63565b50604080516001600160a01b038316815290517f3d0dcc933ef0c956a4d5d89a8251d8559ee025f6c046a83d416d7a5ba70b733d9181900360200190a150565b60005481565b6001546001600160a01b03163314610c4157600080fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000610c78836001600160a01b0384166112a0565b90505b92915050565b6000610c78836001600160a01b0384166112ea565b610c9e61154a565b60005b8251811015610fc957828181518110610cb657fe5b60209081029190910181015180845260075460408051634d86283f60e01b81526004810193909352516001600160a01b0390911692634d86283f9260248082019391829003018186803b158015610d0c57600080fd5b505afa158015610d20573d6000803e3d6000fd5b505050506040513d6020811015610d3657600080fd5b50516001600160a01b031660e0830181905282516040805163b0c1865160e01b815260048101929092525163b0c1865191602480820192602092909190829003018186803b158015610d8757600080fd5b505afa158015610d9b573d6000803e3d6000fd5b505050506040513d6020811015610db157600080fd5b505160c083015260e08201518251604080516332757d4160e01b81526001600160a01b03898116600483015288811660248301526044820193909352815192909316926332757d419260648083019392829003018186803b158015610e1557600080fd5b505afa158015610e29573d6000803e3d6000fd5b505050506040513d6040811015610e3f57600080fd5b5080516020918201516040858101919091528483019190915260095460c08501518251630ba1ffe760e11b8152600481019190915291516001600160a01b0390911692631743ffce9260248082019391829003018186803b158015610ea357600080fd5b505afa158015610eb7573d6000803e3d6000fd5b505050506040513d6020811015610ecd57600080fd5b505160a083018190526020830151610ef891670de0b6b3a764000091610ef291611302565b9061135b565b602083015260a08201516040830151610f1e91670de0b6b3a764000091610ef291611302565b604083015260208201516060830151610f36916113c2565b606083015260408201516080830151610f4e916113c2565b8260800181815250508160e001516001600160a01b0316630a71096e83600001516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610fa557600080fd5b505af1158015610fb9573d6000803e3d6000fd5b505060019092019150610ca19050565b50606081015115611050576008546060820151604080516326c0130360e01b81526001600160a01b03888116600483015287811660248301526044820193909352905191909216916326c0130391606480830192600092919082900301818387803b15801561103757600080fd5b505af115801561104b573d6000803e3d6000fd5b505050505b6080810151156110d6576008546080820151604080516326c0130360e01b81526001600160a01b03878116600483015288811660248301526044820193909352905191909216916326c0130391606480830192600092919082900301818387803b1580156110bd57600080fd5b505af11580156110d1573d6000803e3d6000fd5b505050505b50505050565b6000610c78836001600160a01b03841661141c565b600080826001600160a01b0316846001600160a01b03161415611151576040805162461bcd60e51b81526020600482015260136024820152724964656e746963616c2061646472657373657360681b604482015290519081900360640190fd5b600080846001600160a01b0316866001600160a01b031610611174578486611177565b85855b90925090506001600160a01b0382166111c9576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015290519081900360640190fd5b856001600160a01b0316826001600160a01b03161461122257604080516001600160a01b03938416602080830191909152939092168282015280518083038201815260609092019052805191012091506001905061125e565b604080516001600160a01b0393841660208083019190915293909216828201528051808303820181526060909201905280519101209150600090505b9250929050565b6000610c7883836112ea565b6000610c78838361141c565b6000610c7883836112a0565b6000610c7b826114e2565b6000610c7883836114e6565b60006112ac83836112ea565b6112e257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610c7b565b506000610c7b565b60009081526001919091016020526040902054151590565b60008261131157506000610c7b565b8282028284828161131e57fe5b0414610c785760405162461bcd60e51b81526004018080602001828103825260218152602001806115c16021913960400191505060405180910390fd5b60008082116113b1576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816113ba57fe5b049392505050565b600082820183811015610c78576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081815260018301602052604081205480156114d8578354600019808301919081019060009087908390811061144f57fe5b906000526020600020015490508087600001848154811061146c57fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061149c57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610c7b565b6000915050610c7b565b5490565b815460009082106115285760405162461bcd60e51b815260040180806020018281038252602281526020018061159f6022913960400191505060405180910390fd5b82600001828154811061153757fe5b9060005260206000200154905092915050565b6040518061010001604052806000801916815260200160008152602001600081526020016000815260200160008152602001600081526020016000801916815260200160006001600160a01b03168152509056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212201676ad0cf45ce544989d3de24b866657fc64469c1d6392db45722d80f83b4c7564736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidationAgent(address)": {
        "details": "Adds liquidation agent address into the set.",
        "params": {
          "_liquidationAgent": "Liquidation agent address"
        }
      },
      "constructor": {
        "details": "Contract constructor function."
      },
      "linkContract(address)": {
        "details": "Triggers to link liquidation contract with smart contract with specified `_addr`.",
        "params": {
          "_addr": "Liquidation agent address"
        }
      },
      "liquidateDeals(address,address)": {
        "details": "Triggers to liquidate multiple deals according to the liquidation queue",
        "params": {
          "party0": "First counterparty address",
          "party1": "Second counterparty address"
        }
      },
      "liquidateDeals(address,address,bytes32[])": {
        "details": "Triggers to liquidate multiple deals with specific `_dealIds`.",
        "params": {
          "dealIds": "Array of Deal ID to liquidate",
          "party0": "First counterparty address",
          "party1": "Second counterparty address"
        }
      },
      "removeLiquidationAgent(address)": {
        "details": "Removes liquidation agent address from the set.",
        "params": {
          "_liquidationAgent": "Liquidation agent address"
        }
      },
      "setCollateralAggregator(address)": {
        "details": "Triggers to link with CollateralAggregator contract.",
        "params": {
          "addr": "CollateralAggregator contract address"
        }
      },
      "setCurrencyController(address)": {
        "details": "Triggers to link with CurrencyController contract.",
        "params": {
          "addr": "CurrencyController contract address"
        }
      },
      "setProductAddressResolver(address)": {
        "details": "Triggers to link with ProductAddressResolver contract.",
        "params": {
          "addr": "ProductAddressResolver contract address"
        }
      },
      "updateLiquidationOffset(uint256)": {
        "details": "Updates offset for maximum number of deals liquidated per one execution.",
        "params": {
          "_offset": "New liquidation offset"
        }
      },
      "updateOwner(address)": {
        "details": "Updates owner of the liquidation contract.",
        "params": {
          "_owner": "Address of new owner"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": "sets contract deployer as owner of this contract, liquidation agent and liquidation offset",
      "setCollateralAggregator(address)": {
        "notice": "Executed only by contract owner"
      },
      "setCurrencyController(address)": {
        "notice": "Executed only by contract owner"
      },
      "setProductAddressResolver(address)": {
        "notice": "Executed only by contract owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14902,
        "contract": "contracts/Liquidations.sol:Liquidations",
        "label": "offset",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 14904,
        "contract": "contracts/Liquidations.sol:Liquidations",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14906,
        "contract": "contracts/Liquidations.sol:Liquidations",
        "label": "liquidationAgents",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)1812_storage"
      },
      {
        "astId": 14908,
        "contract": "contracts/Liquidations.sol:Liquidations",
        "label": "linkedContracts",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(AddressSet)1812_storage"
      },
      {
        "astId": 14912,
        "contract": "contracts/Liquidations.sol:Liquidations",
        "label": "liquidationQueue",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(Bytes32Set)1727_storage)"
      },
      {
        "astId": 14914,
        "contract": "contracts/Liquidations.sol:Liquidations",
        "label": "productResolver",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IProductAddressResolver)22478"
      },
      {
        "astId": 14916,
        "contract": "contracts/Liquidations.sol:Liquidations",
        "label": "collateralAggregator",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ICollateralAggregator)20605"
      },
      {
        "astId": 14918,
        "contract": "contracts/Liquidations.sol:Liquidations",
        "label": "currencyController",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ICurrencyController)21317"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICollateralAggregator)20605": {
        "encoding": "inplace",
        "label": "contract ICollateralAggregator",
        "numberOfBytes": "20"
      },
      "t_contract(ICurrencyController)21317": {
        "encoding": "inplace",
        "label": "contract ICurrencyController",
        "numberOfBytes": "20"
      },
      "t_contract(IProductAddressResolver)22478": {
        "encoding": "inplace",
        "label": "contract IProductAddressResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(Bytes32Set)1727_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)1727_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1812_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1811,
            "contract": "contracts/Liquidations.sol:Liquidations",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1547_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)1727_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 1726,
            "contract": "contracts/Liquidations.sol:Liquidations",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1547_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1547_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1542,
            "contract": "contracts/Liquidations.sol:Liquidations",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1546,
            "contract": "contracts/Liquidations.sol:Liquidations",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}