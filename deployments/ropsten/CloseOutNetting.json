{
  "address": "0xB26348D051da2dd8AE9402b3E3060A48F632114e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentAggregator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment1",
          "type": "uint256"
        }
      ],
      "name": "AddCloseOutPayments",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment1",
          "type": "uint256"
        }
      ],
      "name": "RemoveCloseOutPayments",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "netPayment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "txHash",
          "type": "bytes32"
        }
      ],
      "name": "SettleCloseOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "UpdateCollateralAggregator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "UpdatePaymentAggregator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "netPayment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "txHash",
          "type": "bytes32"
        }
      ],
      "name": "VerifyCloseOut",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "payment0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "payment1",
          "type": "uint256"
        }
      ],
      "name": "addPayments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "checkDefault",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        }
      ],
      "name": "getCloseOutPayment",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "netPayment",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "flipped",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "closed",
              "type": "bool"
            }
          ],
          "internalType": "struct CloseOut.Payment",
          "name": "payment",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "payment0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "payment1",
          "type": "uint256"
        }
      ],
      "name": "removePayments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "updateCollateralAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "updatePaymentAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd430431c9c4b6716e883f0591b493d74533dea7d8d995bf7fc0c623210f11d6a",
  "receipt": {
    "to": null,
    "from": "0x57AB42d4fa756b6956b0cAf986a5f53bA90D9e28",
    "contractAddress": "0xB26348D051da2dd8AE9402b3E3060A48F632114e",
    "transactionIndex": 55,
    "gasUsed": "739826",
    "logsBloom": "0x
    "blockHash": "0x6293b2342e91a2defdddd95af5424c43b6f820b9d42fa96794d2fbdfbd5df9fc",
    "transactionHash": "0xd430431c9c4b6716e883f0591b493d74533dea7d8d995bf7fc0c623210f11d6a",
    "logs": [],
    "blockNumber": 12164575,
    "cumulativeGasUsed": "3954045",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xbf5c6641ab47307F48Ca74644011B8a76e37241b"],
  "numDeployments": 1,
  "solcInputHash": "48d264388c4204a72ee447cb1af8bee3",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentAggregator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment1\",\"type\":\"uint256\"}],\"name\":\"AddCloseOutPayments\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment1\",\"type\":\"uint256\"}],\"name\":\"RemoveCloseOutPayments\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"SettleCloseOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"UpdateCollateralAggregator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"UpdatePaymentAggregator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"VerifyCloseOut\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"payment0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment1\",\"type\":\"uint256\"}],\"name\":\"addPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_party\",\"type\":\"address\"}],\"name\":\"checkDefault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"}],\"name\":\"getCloseOutPayment\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"netPayment\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flipped\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"internalType\":\"struct CloseOut.Payment\",\"name\":\"payment\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"payment0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment1\",\"type\":\"uint256\"}],\"name\":\"removePayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"updateCollateralAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"updatePaymentAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPayments(address,address,bytes32,uint256,uint256)\":{\"details\":\"Triggers to add total payments during the registration of the deal in close out netting\",\"params\":{\"ccy\":\"Main settlement currency of the deal\",\"party0\":\"First counterparty address\",\"party1\":\"Second counterparty address\",\"payment0\":\"Aggregated payment for first counterparty\",\"payment1\":\"Aggregated payment for second counterparty\"}},\"checkDefault(address)\":{\"details\":\"External function to check if `_party` is in default\"},\"constructor\":{\"details\":\"Contract constructor function.\",\"params\":{\"_paymentAggregator\":\"PaymentAggregator contract address\"}},\"getCloseOutPayment(address,address,bytes32)\":{\"details\":\"Returns the close out payment between two counterparties\",\"params\":{\"ccy\":\"Main payment settlement currency\",\"party0\":\"First counterparty address\",\"party1\":\"Second counterparty address\"}},\"removePayments(address,address,bytes32,uint256,uint256)\":{\"details\":\"Triggers to remove aggregated payments during the liquidation of the deal in close out netting\",\"params\":{\"ccy\":\"Main settlement currency of the deal\",\"party0\":\"First counterparty address\",\"party1\":\"Second counterparty address\",\"payment0\":\"Aggregated payment for first counterparty\",\"payment1\":\"Aggregated payment for second counterparty\"}},\"updateCollateralAggregator(address)\":{\"details\":\"Trigers to update Collateral Aggregator contract address\",\"params\":{\"addr\":\"New CollateralAggregator contract address\"}},\"updatePaymentAggregator(address)\":{\"details\":\"Trigers to update Payment Aggregator contract address\",\"params\":{\"addr\":\"New PaymentAggregator contract address\"}}},\"title\":\"Close Out Netting contract is used in close out operations Close out is the process while one of the counterparties declared as defaulted party and all deals should be terminated Contract linked to all product based contracts (ex. Loan, Swap, etc), and Collateral Aggregator contract.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPayments(address,address,bytes32,uint256,uint256)\":{\"notice\":\"Executed only be PaymentAggregator contract\"},\"constructor\":\"sets contract deployer as owner of this contract\",\"removePayments(address,address,bytes32,uint256,uint256)\":{\"notice\":\"Executed only be PaymentAggregator contract\"},\"updateCollateralAggregator(address)\":{\"notice\":\"Trigers only be contract ownerReverts on saving 0x0 address or non contract address\"},\"updatePaymentAggregator(address)\":{\"notice\":\"Trigers only be contract ownerReverts on saving 0x0 address or non contract address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CloseOutNetting.sol\":\"CloseOutNetting\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/CloseOutNetting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"./ProtocolTypes.sol\\\";\\nimport \\\"./libraries/CloseOut.sol\\\";\\nimport \\\"./libraries/AddressPacking.sol\\\";\\nimport \\\"./interfaces/ICollateralAggregator.sol\\\";\\n\\n/**\\n * @title Close Out Netting contract is used in close out operations\\n * Close out is the process while one of the counterparties declared\\n * as defaulted party and all deals should be terminated\\n *\\n * Contract linked to all product based contracts (ex. Loan, Swap, etc), and Collateral Aggregator contract.\\n */\\ncontract CloseOutNetting {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using CloseOut for CloseOut.Payment;\\n\\n    event UpdatePaymentAggregator(\\n        address indexed prevAddr,\\n        address indexed addr\\n    );\\n    event UpdateCollateralAggregator(\\n        address indexed prevAddr,\\n        address indexed addr\\n    );\\n\\n    event AddCloseOutPayments(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event RemoveCloseOutPayments(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event VerifyCloseOut(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 netPayment,\\n        bytes32 txHash\\n    );\\n    event SettleCloseOut(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 netPayment,\\n        bytes32 txHash\\n    );\\n\\n    address public owner;\\n\\n    // Linked contract addresses\\n    ICollateralAggregator private collateralAggregator;\\n    address private paymentAggregator;\\n\\n    // Mapping structure for storing Close Out payments\\n    mapping(bytes32 => mapping(bytes32 => CloseOut.Payment)) _closeOuts;\\n\\n    // Mapping structure for storing default boolean per address\\n    mapping(address => bool) _isDefaulted;\\n\\n    /**\\n     * @dev Modifier to make a function callable only by contract owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by payment aggregator contract.\\n     */\\n    modifier onlyPaymentAggregator() {\\n        require(msg.sender == paymentAggregator);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by passing contract address checks.\\n     */\\n    modifier onlyContractAddr(address addr) {\\n        require(addr != address(0), \\\"INVALID_ADDRESS\\\");\\n        require(addr.isContract(), \\\"NOT_CONTRACT\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by defaulted counterparty.\\n     */\\n    modifier defaultedParty() {\\n        require(_isDefaulted[msg.sender]);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by non defaulted counterparty.\\n     */\\n    modifier nonDefaultedParty() {\\n        require(!_isDefaulted[msg.sender]);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract constructor function.\\n     * @notice sets contract deployer as owner of this contract\\n     * @param _paymentAggregator PaymentAggregator contract address\\n     */\\n    constructor(address _paymentAggregator) public {\\n        owner = msg.sender;\\n        paymentAggregator = _paymentAggregator;\\n        // collateralAggregator = ICollateralAggregator(_collateralAggregator);\\n    }\\n\\n    /**\\n     * @dev Trigers to update Payment Aggregator contract address\\n     * @param addr New PaymentAggregator contract address\\n     *\\n     * @notice Trigers only be contract owner\\n     * @notice Reverts on saving 0x0 address or non contract address\\n     */\\n    function updatePaymentAggregator(address addr)\\n        public\\n        onlyOwner\\n        onlyContractAddr(addr)\\n    {\\n        emit UpdatePaymentAggregator(paymentAggregator, addr);\\n        paymentAggregator = addr;\\n    }\\n\\n    /**\\n     * @dev Trigers to update Collateral Aggregator contract address\\n     * @param addr New CollateralAggregator contract address\\n     *\\n     * @notice Trigers only be contract owner\\n     * @notice Reverts on saving 0x0 address or non contract address\\n     */\\n    function updateCollateralAggregator(address addr)\\n        public\\n        onlyOwner\\n        onlyContractAddr(addr)\\n    {\\n        address prevAddr = address(collateralAggregator);\\n\\n        emit UpdateCollateralAggregator(prevAddr, addr);\\n        collateralAggregator = ICollateralAggregator(addr);\\n    }\\n\\n    /**\\n     * @dev Returns the close out payment between two counterparties\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main payment settlement currency\\n     */\\n    function getCloseOutPayment(\\n        address party0,\\n        address party1,\\n        bytes32 ccy\\n    ) public view returns (CloseOut.Payment memory payment) {\\n        payment = CloseOut.get(_closeOuts, party0, party1, ccy);\\n    }\\n\\n    /**\\n     * @dev Triggers to add total payments during the registration of the deal in close out netting\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main settlement currency of the deal\\n     * @param payment0 Aggregated payment for first counterparty\\n     * @param payment1 Aggregated payment for second counterparty\\n     *\\n     * @notice Executed only be PaymentAggregator contract\\n     */\\n    function addPayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) external onlyPaymentAggregator {\\n        CloseOut.addPayments(\\n            _closeOuts,\\n            party0,\\n            party1,\\n            ccy,\\n            payment0,\\n            payment1\\n        );\\n\\n        emit AddCloseOutPayments(party0, party1, ccy, payment0, payment1);\\n    }\\n\\n    /**\\n     * @dev Triggers to remove aggregated payments during the liquidation of the deal in close out netting\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main settlement currency of the deal\\n     * @param payment0 Aggregated payment for first counterparty\\n     * @param payment1 Aggregated payment for second counterparty\\n     *\\n     * @notice Executed only be PaymentAggregator contract\\n     */\\n    function removePayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) external onlyPaymentAggregator {\\n        CloseOut.removePayments(\\n            _closeOuts,\\n            party0,\\n            party1,\\n            ccy,\\n            payment0,\\n            payment1\\n        );\\n\\n        emit RemoveCloseOutPayments(party0, party1, ccy, payment0, payment1);\\n    }\\n\\n    /**\\n     * @dev External function to check if `_party` is in default\\n     */\\n    function checkDefault(address _party) external view returns (bool) {\\n        return _isDefaulted[_party];\\n    }\\n\\n    /**\\n     * @dev Internal function to declare default for `_defaultedParty`\\n     */\\n    function _handleDefault(address _defaultedParty) internal {\\n        _isDefaulted[_defaultedParty] = true;\\n    }\\n\\n    /**\\n     * @dev Internal function to execute close out netting payment\\n     * liquidates ETH from party's collateral with bigger net payment to their counterparty\\n     * @notice Only triggers if one of the counterparties in default\\n     */\\n    function _handleCloseOut(address party0, address party1) internal {\\n        require(\\n            _isDefaulted[party0] || _isDefaulted[party1],\\n            \\\"NON_DEFAULTED_PARTIES\\\"\\n        );\\n        bytes32[] memory currencies = collateralAggregator.getExposedCurrencies(\\n            party0,\\n            party1\\n        );\\n\\n        for (uint256 i = 0; i < currencies.length; i++) {\\n            bytes32 ccy = currencies[i];\\n\\n            CloseOut.Payment memory payment = CloseOut.get(\\n                _closeOuts,\\n                party0,\\n                party1,\\n                ccy\\n            );\\n\\n            if (payment.flipped) {\\n                collateralAggregator.liquidate(\\n                    party1,\\n                    party0,\\n                    ccy,\\n                    payment.netPayment\\n                );\\n            } else {\\n                collateralAggregator.liquidate(\\n                    party0,\\n                    party1,\\n                    ccy,\\n                    payment.netPayment\\n                );\\n            }\\n\\n            CloseOut.close(_closeOuts, party0, party1, ccy);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x361a8823a3ccea778202e8948835c0e32087c18211ee96bb3111fe17512d9b9b\",\"license\":\"MIT\"},\"contracts/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\ncontract ProtocolTypes {\\n    // Constant values\\n    uint8 internal constant NUMCCY = 3;\\n    uint8 internal constant NUMTERM = 6;\\n    uint8 internal constant NUMDF = 7; // number of discount factors\\n    uint256 internal constant BP = 10000; // basis point\\n\\n    uint256 internal constant PCT = 10000; // percentage point in basis\\n    uint256 internal constant PENALTYLEVEL = 1000; // 10% settlement failure penalty\\n    uint256 internal constant MKTMAKELEVEL = 2000; // 20% for market making\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Loan common types\\n    enum LoanState {\\n        REGISTERED,\\n        WORKING,\\n        DUE,\\n        PAST_DUE,\\n        CLOSED,\\n        TERMINATED\\n    }\\n    enum DFTERM {\\n        _3m,\\n        _6m,\\n        _1y,\\n        _2y,\\n        _3y,\\n        _4y,\\n        _5y\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n\\n    // FXMarket common types\\n    enum CcyPair {\\n        FILETH,\\n        FILUSDC,\\n        ETHUSDC,\\n        BTCUSDC,\\n        BTCETH,\\n        BTCFIL\\n    }\\n    enum FXSide {\\n        BID,\\n        OFFER\\n    }\\n\\n    enum PaymentFrequency {\\n        ANNUAL,\\n        SEMI_ANNUAL,\\n        QUARTERLY,\\n        MONTHLY,\\n        FORWARD\\n    }\\n}\\n\",\"keccak256\":\"0x72de205a94aefa6e5b79074f603b8056535f99918af5112343156e79b7eadd83\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICollateralAggregator {\\n    event Deposit(address indexed addr, uint256 amount);\\n    event Liquidate(address indexed from, address indexed to, uint256 amount);\\n    event PositionDeposit(\\n        address indexed partyA,\\n        address indexed partyB,\\n        uint256 amountA,\\n        uint256 amountB\\n    );\\n    event PositionWithdraw(\\n        address indexed partyA,\\n        address indexed partyB,\\n        uint256 amountA,\\n        uint256 amountB\\n    );\\n    event Rebalance(\\n        address indexed partyA,\\n        address indexed partyB,\\n        uint256 amountA,\\n        uint256 amountB\\n    );\\n    event RebalancePositions(\\n        address[] fromParties,\\n        address[] toParties,\\n        uint256[] fromAmounts,\\n        uint256[] toAmounts\\n    );\\n    event Register(address indexed addr, uint256 id, uint256 amount);\\n    event Release(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event UpdatePV(\\n        address indexed addr,\\n        uint256 prevPV,\\n        uint256 newPV,\\n        uint8 ccy\\n    );\\n    event UpdateState(address indexed addr, uint8 prevState, uint8 currState);\\n    event UseCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event Withdraw(address indexed addr, uint256 amount);\\n\\n    function AUTOLQLEVEL() external view returns (uint256);\\n\\n    function LQLEVEL() external view returns (uint256);\\n\\n    function MARGINLEVEL() external view returns (uint256);\\n\\n    function addCollateralUser(address _user) external returns (bool);\\n\\n    function currencyController() external view returns (address);\\n\\n    function deposit() external payable;\\n\\n    function deposit(address _counterparty) external payable;\\n\\n    function getCoverage(address party0, address party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getExposedCurrencies(address partyA, address partyB)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function isCovered(\\n        address party0,\\n        address party1,\\n        bytes32 _ccy,\\n        uint256 _party0PV,\\n        uint256 _party1PV,\\n        bool _isSettled\\n    ) external view returns (bool, bool);\\n\\n    function liquidateUnsettled(\\n        address from,\\n        address to,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function owner() external view returns (address);\\n\\n    function rebalanceFrom(\\n        address _fromParty,\\n        address _toParty,\\n        uint256 _amount\\n    ) external;\\n\\n    function rebalanceTo(\\n        address _mainParty,\\n        address _counterparty,\\n        uint256 _amount\\n    ) external;\\n\\n    function rebalanceTo(address _counterparty, uint256 _amount) external;\\n\\n    function register() external payable;\\n\\n    function register(uint256 id) external payable;\\n\\n    function releaseUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function releaseCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function removeCollateralUser(address _user) external returns (bool);\\n\\n    function updateLiquidationPrice(uint256 _price) external;\\n\\n    function updateLiquidationThreshold(uint256 _ratio) external;\\n\\n    function updateMarginCallThreshold(uint256 _ratio) external;\\n\\n    function updatePV(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    ) external;\\n\\n    function useUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function useCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function settleCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external;\\n\\n    function withdraw(uint256 _amt) external;\\n\\n    function withdrawFrom(address _counterparty, uint256 _amt) external;\\n\\n    function checkRegisteredBook(address addr) external view returns (bool);\\n\\n    function getMaxCollateralWidthdraw(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getMaxCollateralBookWidthdraw(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function enterVault(address _user) external;\\n\\n    function enterVault(address _party0, address _party1) external;\\n\\n    function exitVault(address _user) external;\\n\\n    function exitVault(address _party0, address _party1) external;\\n}\\n\",\"keccak256\":\"0x71d916393a6a70e6f7c069fcef3dac134a0db43b3324fa5009788f20d85e11af\",\"license\":\"MIT\"},\"contracts/libraries/AddressPacking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nlibrary AddressPacking {\\n    /**\\n     * @dev Packs two addresses into one hash to reduce the number of arguments\\n     * @param addr0 First address\\n     * @param addr1 Second address\\n     * @return Boolean to identify if addresses were flipped\\n     */\\n    function pack(address addr0, address addr1)\\n        internal\\n        pure\\n        returns (bytes32, bool)\\n    {\\n        require(addr0 != addr1, \\\"Identical addresses\\\");\\n        (address _addr0, address _addr1) = addr0 < addr1\\n            ? (addr0, addr1)\\n            : (addr1, addr0);\\n        require(_addr0 != address(0), \\\"Invalid address\\\");\\n\\n        if (_addr0 != addr0) {\\n            return (keccak256(abi.encode(_addr0, _addr1)), true);\\n        } else {\\n            return (keccak256(abi.encode(_addr0, _addr1)), false);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe567a45d9e5739f3e89da206f5041692c8c7a2f9a837d23fa9e50117b81e773\",\"license\":\"MIT\"},\"contracts/libraries/CloseOut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./AddressPacking.sol\\\";\\n\\nlibrary CloseOut {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Payment keeps track of net payment for close out netting\\n     * and an indicator if party's obligations are flipped\\n     */\\n    struct Payment {\\n        uint256 netPayment;\\n        bool flipped;\\n        bool closed;\\n    }\\n\\n    /**\\n     * @dev Returns the close out payment between 2 counterparties\\n     * @param self The mapping with all close out netting payments\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main currency for the close out\\n     */\\n    function get(\\n        mapping(bytes32 => mapping(bytes32 => CloseOut.Payment)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy\\n    ) internal view returns (CloseOut.Payment memory payment) {\\n        (bytes32 packedAddrs, bool flipped) = AddressPacking.pack(\\n            party0,\\n            party1\\n        );\\n        payment = self[packedAddrs][ccy];\\n\\n        flipped ? payment.flipped = !payment.flipped : payment.flipped = payment\\n            .flipped;\\n    }\\n\\n    struct CloseOutLocalVars {\\n        bytes32 packedAddrs;\\n        bool flipped;\\n        uint256 payment0;\\n        uint256 payment1;\\n    }\\n\\n    /**\\n     * @dev Adds payments into the close out with provided information\\n     * @param self The mapping with all close out netting payments\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main currency for the close out\\n     * @param payment0 New payment obligated to the first counterparty\\n     * @param payment1 New payment obligated to the second counterparty\\n     * @return Boolean wether close out net amount was flipped during the update, if close out is flipped the net payment obligated to the second party and vice versa\\n     */\\n    function addPayments(\\n        mapping(bytes32 => mapping(bytes32 => CloseOut.Payment)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) internal returns (bool) {\\n        CloseOutLocalVars memory vars;\\n        (vars.packedAddrs, vars.flipped) = AddressPacking.pack(party0, party1);\\n\\n        if (vars.flipped) {\\n            vars.payment0 = payment1;\\n            vars.payment1 = payment0;\\n        } else {\\n            vars.payment0 = payment0;\\n            vars.payment1 = payment1;\\n        }\\n\\n        CloseOut.Payment storage closeOut = self[vars.packedAddrs][ccy];\\n\\n        if (closeOut.flipped) {\\n            if (\\n                vars.payment0 > closeOut.netPayment &&\\n                vars.payment1 < vars.payment0\\n            ) {\\n                closeOut.netPayment = vars.payment0.sub(\\n                    closeOut.netPayment.add(vars.payment1)\\n                );\\n                closeOut.flipped = false;\\n            } else {\\n                closeOut.netPayment = closeOut\\n                    .netPayment\\n                    .add(vars.payment1)\\n                    .sub(vars.payment0);\\n            }\\n        } else {\\n            if (\\n                vars.payment1 > closeOut.netPayment &&\\n                vars.payment0 < vars.payment1\\n            ) {\\n                closeOut.netPayment = vars.payment1.sub(\\n                    closeOut.netPayment.add(vars.payment0)\\n                );\\n                closeOut.flipped = true;\\n            } else {\\n                closeOut.netPayment = closeOut\\n                    .netPayment\\n                    .add(vars.payment0)\\n                    .sub(vars.payment1);\\n            }\\n        }\\n\\n        return closeOut.flipped;\\n    }\\n\\n    /**\\n     * @dev Removes payments from the close out with provided information\\n     * @param self The mapping with all close out netting payments\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main currency for the close out\\n     * @param payment0 Payment to remove for the first counterparty\\n     * @param payment1 Payment to remove for the second counterparty\\n     * @return Boolean wether close out net amount was flipped during the update, if close out is flipped the net payment obligated to the second party and vice versa\\n     */\\n    function removePayments(\\n        mapping(bytes32 => mapping(bytes32 => CloseOut.Payment)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) internal returns (bool) {\\n        CloseOutLocalVars memory vars;\\n        (vars.packedAddrs, vars.flipped) = AddressPacking.pack(party0, party1);\\n\\n        if (vars.flipped) {\\n            vars.payment0 = payment1;\\n            vars.payment1 = payment0;\\n        } else {\\n            vars.payment0 = payment0;\\n            vars.payment1 = payment1;\\n        }\\n\\n        CloseOut.Payment storage closeOut = self[vars.packedAddrs][ccy];\\n        uint256 paymentDelta = vars.payment0 > vars.payment1\\n            ? vars.payment0.sub(vars.payment1)\\n            : vars.payment1.sub(vars.payment0);\\n        bool substraction;\\n\\n        if (closeOut.flipped) {\\n            substraction = vars.payment0 >= vars.payment1 ? false : true;\\n        } else {\\n            substraction = vars.payment0 >= vars.payment1 ? true : false;\\n        }\\n\\n        if (paymentDelta >= closeOut.netPayment && substraction) {\\n            closeOut.netPayment = paymentDelta.sub(closeOut.netPayment);\\n            closeOut.flipped = !closeOut.flipped;\\n        } else {\\n            closeOut.netPayment = substraction\\n                ? closeOut.netPayment.sub(paymentDelta)\\n                : closeOut.netPayment.add(paymentDelta);\\n        }\\n\\n        return closeOut.flipped;\\n    }\\n\\n    /**\\n     * @dev Closes the close out payment if both parties don't have any trading activities anymore\\n     * @param self The mapping with all close out netting payments\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main currency for the close out\\n     */\\n    function close(\\n        mapping(bytes32 => mapping(bytes32 => CloseOut.Payment)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy\\n    ) internal {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(party0, party1);\\n        CloseOut.Payment storage closeOut = self[packedAddrs][ccy];\\n\\n        closeOut.closed = true;\\n    }\\n\\n    /**\\n     * @dev Clears the state of close out payment\\n     * @param self The mapping with all close out netting payments\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main currency for the close out\\n     */\\n    function clear(\\n        mapping(bytes32 => mapping(bytes32 => CloseOut.Payment)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy\\n    ) internal {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(party0, party1);\\n        delete self[packedAddrs][ccy];\\n    }\\n}\\n\",\"keccak256\":\"0x94ea5a7097d498ebacc91dcf00c61f9126dffde263ced97e6ea57516ccb5e442\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610c31380380610c3183398101604081905261002f91610062565b60008054336001600160a01b031991821617909155600280549091166001600160a01b0392909216919091179055610090565b600060208284031215610073578081fd5b81516001600160a01b0381168114610089578182fd5b9392505050565b610b928061009f6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063ca2da5291161005b578063ca2da529146100d5578063e0b846ad146100e8578063e2a0f9cd146100fb578063ebbb7de91461010e5761007d565b80633a6d7596146100825780638c9165b0146100ab5780638da5cb5b146100c0575b600080fd5b61009561009036600461094a565b61012e565b6040516100a29190610b37565b60405180910390f35b6100be6100b9366004610987565b61014b565b005b6100c86101c8565b6040516100a291906109d5565b6100be6100e3366004610987565b6101d7565b6100be6100f636600461092f565b610245565b6100be61010936600461092f565b610317565b61012161011c36600461092f565b6103e4565b6040516100a29190610a03565b6101366108d1565b6101436003858585610402565b949350505050565b6002546001600160a01b0316331461016257600080fd5b61017160038686868686610494565b50836001600160a01b0316856001600160a01b03167f96dc6c2618ed726615771c9e1252ef89239f3f1fc009126b10580edfcf81bf598585856040516101b993929190610a0e565b60405180910390a35050505050565b6000546001600160a01b031681565b6002546001600160a01b031633146101ee57600080fd5b6101fd600386868686866105f5565b50836001600160a01b0316856001600160a01b03167f4aaf456318661525ee0231fc2662025a6af97cd168232ca86a78d50a6d5120f58585856040516101b993929190610a0e565b6000546001600160a01b0316331461025c57600080fd5b806001600160a01b03811661028c5760405162461bcd60e51b815260040161028390610a24565b60405180910390fd5b61029e816001600160a01b0316610764565b6102ba5760405162461bcd60e51b815260040161028390610b11565b6002546040516001600160a01b038085169216907f414ef207180572ac59a5fe9c833e8ccf132a7571c7930180a0664e91ea12265c90600090a350600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461032e57600080fd5b806001600160a01b0381166103555760405162461bcd60e51b815260040161028390610a24565b610367816001600160a01b0316610764565b6103835760405162461bcd60e51b815260040161028390610b11565b6001546040516001600160a01b039182169184169082907f7cf5b56e2c7b63b2ff958fd0e63ee0e6131a1a5102a6f783554bc91555d888ad90600090a35050600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b031660009081526004602052604090205460ff1690565b61040a6108d1565b600080610417868661076a565b600082815260208a8152604080832089845282529182902082516060810184528154815260019091015460ff8082161515938301939093526101009004909116151591810191909152945090925090508061047d57602083018051151590819052610489565b60208301805115908190525b505050949350505050565b600061049e6108f1565b6104a8878761076a565b15801560208401529082526104ca5760408101839052606081018490526104d9565b60408101849052606081018390525b80516000908152602089815260408083208884529091528082206060840151918401519092911061051c576040830151606084015161051791610878565b61052f565b6060830151604084015161052f91610878565b600183015490915060009060ff16156105635783606001518460400151101561055957600161055c565b60005b9050610580565b83606001518460400151101561057a57600061057d565b60015b90505b8254821080159061058e5750805b156105bb5782546105a0908390610878565b835560018301805460ff19811660ff909116151790556105e0565b806105d15782546105cc90836108a5565b6105dd565b82546105dd9083610878565b83555b50506001015460ff1698975050505050505050565b60006105ff6108f1565b610609878761076a565b158015602084015290825261062b57604081018390526060810184905261063a565b60408101849052606081018390525b80516000908152602089815260408083208884529091529020600181015460ff16156106dc578054604083015111801561067b575081604001518260600151105b156106b357606082015181546106a09161069591906108a5565b604084015190610878565b815560018101805460ff191690556106d7565b6040820151606083015182546106d492916106ce91906108a5565b90610878565b81555b610751565b805460608301511180156106f7575081606001518260400151105b15610733576040820151815461071c9161071191906108a5565b606084015190610878565b81556001808201805460ff19169091179055610751565b60608201516040830151825461074e92916106ce91906108a5565b81555b6001015460ff1698975050505050505050565b3b151590565b600080826001600160a01b0316846001600160a01b0316141561079f5760405162461bcd60e51b815260040161028390610a4d565b600080846001600160a01b0316866001600160a01b0316106107c25784866107c5565b85855b90925090506001600160a01b0382166107f05760405162461bcd60e51b815260040161028390610a7a565b856001600160a01b0316826001600160a01b03161461083f57818160405160200161081c9291906109e9565b604051602081830303815290604052805190602001206001935093505050610871565b81816040516020016108529291906109e9565b6040516020818303038152906040528051906020012060009350935050505b9250929050565b60008282111561089a5760405162461bcd60e51b815260040161028390610ada565b508082035b92915050565b6000828201838110156108ca5760405162461bcd60e51b815260040161028390610aa3565b9392505050565b604080516060810182526000808252602082018190529181019190915290565b60408051608081018252600080825260208201819052918101829052606081019190915290565b80356001600160a01b038116811461089f57600080fd5b600060208284031215610940578081fd5b6108ca8383610918565b60008060006060848603121561095e578182fd5b6109688585610918565b92506109778560208601610918565b9150604084013590509250925092565b600080600080600060a0868803121561099e578081fd5b6109a88787610918565b94506109b78760208801610918565b94979496505050506040830135926060810135926080909101359150565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b901515815260200190565b9283526020830191909152604082015260600190565b6020808252600f908201526e494e56414c49445f4144445245535360881b604082015260600190565b6020808252601390820152724964656e746963616c2061646472657373657360681b604082015260600190565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252600c908201526b1393d517d0d3d395149050d560a21b604082015260600190565b815181526020808301511515908201526040918201511515918101919091526060019056fea2646970667358221220e6133291c7e7c1fb873469aa8a1562d8b49cf3211c055f464c846c6372437ad364736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063ca2da5291161005b578063ca2da529146100d5578063e0b846ad146100e8578063e2a0f9cd146100fb578063ebbb7de91461010e5761007d565b80633a6d7596146100825780638c9165b0146100ab5780638da5cb5b146100c0575b600080fd5b61009561009036600461094a565b61012e565b6040516100a29190610b37565b60405180910390f35b6100be6100b9366004610987565b61014b565b005b6100c86101c8565b6040516100a291906109d5565b6100be6100e3366004610987565b6101d7565b6100be6100f636600461092f565b610245565b6100be61010936600461092f565b610317565b61012161011c36600461092f565b6103e4565b6040516100a29190610a03565b6101366108d1565b6101436003858585610402565b949350505050565b6002546001600160a01b0316331461016257600080fd5b61017160038686868686610494565b50836001600160a01b0316856001600160a01b03167f96dc6c2618ed726615771c9e1252ef89239f3f1fc009126b10580edfcf81bf598585856040516101b993929190610a0e565b60405180910390a35050505050565b6000546001600160a01b031681565b6002546001600160a01b031633146101ee57600080fd5b6101fd600386868686866105f5565b50836001600160a01b0316856001600160a01b03167f4aaf456318661525ee0231fc2662025a6af97cd168232ca86a78d50a6d5120f58585856040516101b993929190610a0e565b6000546001600160a01b0316331461025c57600080fd5b806001600160a01b03811661028c5760405162461bcd60e51b815260040161028390610a24565b60405180910390fd5b61029e816001600160a01b0316610764565b6102ba5760405162461bcd60e51b815260040161028390610b11565b6002546040516001600160a01b038085169216907f414ef207180572ac59a5fe9c833e8ccf132a7571c7930180a0664e91ea12265c90600090a350600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461032e57600080fd5b806001600160a01b0381166103555760405162461bcd60e51b815260040161028390610a24565b610367816001600160a01b0316610764565b6103835760405162461bcd60e51b815260040161028390610b11565b6001546040516001600160a01b039182169184169082907f7cf5b56e2c7b63b2ff958fd0e63ee0e6131a1a5102a6f783554bc91555d888ad90600090a35050600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b031660009081526004602052604090205460ff1690565b61040a6108d1565b600080610417868661076a565b600082815260208a8152604080832089845282529182902082516060810184528154815260019091015460ff8082161515938301939093526101009004909116151591810191909152945090925090508061047d57602083018051151590819052610489565b60208301805115908190525b505050949350505050565b600061049e6108f1565b6104a8878761076a565b15801560208401529082526104ca5760408101839052606081018490526104d9565b60408101849052606081018390525b80516000908152602089815260408083208884529091528082206060840151918401519092911061051c576040830151606084015161051791610878565b61052f565b6060830151604084015161052f91610878565b600183015490915060009060ff16156105635783606001518460400151101561055957600161055c565b60005b9050610580565b83606001518460400151101561057a57600061057d565b60015b90505b8254821080159061058e5750805b156105bb5782546105a0908390610878565b835560018301805460ff19811660ff909116151790556105e0565b806105d15782546105cc90836108a5565b6105dd565b82546105dd9083610878565b83555b50506001015460ff1698975050505050505050565b60006105ff6108f1565b610609878761076a565b158015602084015290825261062b57604081018390526060810184905261063a565b60408101849052606081018390525b80516000908152602089815260408083208884529091529020600181015460ff16156106dc578054604083015111801561067b575081604001518260600151105b156106b357606082015181546106a09161069591906108a5565b604084015190610878565b815560018101805460ff191690556106d7565b6040820151606083015182546106d492916106ce91906108a5565b90610878565b81555b610751565b805460608301511180156106f7575081606001518260400151105b15610733576040820151815461071c9161071191906108a5565b606084015190610878565b81556001808201805460ff19169091179055610751565b60608201516040830151825461074e92916106ce91906108a5565b81555b6001015460ff1698975050505050505050565b3b151590565b600080826001600160a01b0316846001600160a01b0316141561079f5760405162461bcd60e51b815260040161028390610a4d565b600080846001600160a01b0316866001600160a01b0316106107c25784866107c5565b85855b90925090506001600160a01b0382166107f05760405162461bcd60e51b815260040161028390610a7a565b856001600160a01b0316826001600160a01b03161461083f57818160405160200161081c9291906109e9565b604051602081830303815290604052805190602001206001935093505050610871565b81816040516020016108529291906109e9565b6040516020818303038152906040528051906020012060009350935050505b9250929050565b60008282111561089a5760405162461bcd60e51b815260040161028390610ada565b508082035b92915050565b6000828201838110156108ca5760405162461bcd60e51b815260040161028390610aa3565b9392505050565b604080516060810182526000808252602082018190529181019190915290565b60408051608081018252600080825260208201819052918101829052606081019190915290565b80356001600160a01b038116811461089f57600080fd5b600060208284031215610940578081fd5b6108ca8383610918565b60008060006060848603121561095e578182fd5b6109688585610918565b92506109778560208601610918565b9150604084013590509250925092565b600080600080600060a0868803121561099e578081fd5b6109a88787610918565b94506109b78760208801610918565b94979496505050506040830135926060810135926080909101359150565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b901515815260200190565b9283526020830191909152604082015260600190565b6020808252600f908201526e494e56414c49445f4144445245535360881b604082015260600190565b6020808252601390820152724964656e746963616c2061646472657373657360681b604082015260600190565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252600c908201526b1393d517d0d3d395149050d560a21b604082015260600190565b815181526020808301511515908201526040918201511515918101919091526060019056fea2646970667358221220e6133291c7e7c1fb873469aa8a1562d8b49cf3211c055f464c846c6372437ad364736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addPayments(address,address,bytes32,uint256,uint256)": {
        "details": "Triggers to add total payments during the registration of the deal in close out netting",
        "params": {
          "ccy": "Main settlement currency of the deal",
          "party0": "First counterparty address",
          "party1": "Second counterparty address",
          "payment0": "Aggregated payment for first counterparty",
          "payment1": "Aggregated payment for second counterparty"
        }
      },
      "checkDefault(address)": {
        "details": "External function to check if `_party` is in default"
      },
      "constructor": {
        "details": "Contract constructor function.",
        "params": {
          "_paymentAggregator": "PaymentAggregator contract address"
        }
      },
      "getCloseOutPayment(address,address,bytes32)": {
        "details": "Returns the close out payment between two counterparties",
        "params": {
          "ccy": "Main payment settlement currency",
          "party0": "First counterparty address",
          "party1": "Second counterparty address"
        }
      },
      "removePayments(address,address,bytes32,uint256,uint256)": {
        "details": "Triggers to remove aggregated payments during the liquidation of the deal in close out netting",
        "params": {
          "ccy": "Main settlement currency of the deal",
          "party0": "First counterparty address",
          "party1": "Second counterparty address",
          "payment0": "Aggregated payment for first counterparty",
          "payment1": "Aggregated payment for second counterparty"
        }
      },
      "updateCollateralAggregator(address)": {
        "details": "Trigers to update Collateral Aggregator contract address",
        "params": {
          "addr": "New CollateralAggregator contract address"
        }
      },
      "updatePaymentAggregator(address)": {
        "details": "Trigers to update Payment Aggregator contract address",
        "params": {
          "addr": "New PaymentAggregator contract address"
        }
      }
    },
    "title": "Close Out Netting contract is used in close out operations Close out is the process while one of the counterparties declared as defaulted party and all deals should be terminated Contract linked to all product based contracts (ex. Loan, Swap, etc), and Collateral Aggregator contract.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPayments(address,address,bytes32,uint256,uint256)": {
        "notice": "Executed only be PaymentAggregator contract"
      },
      "constructor": "sets contract deployer as owner of this contract",
      "removePayments(address,address,bytes32,uint256,uint256)": {
        "notice": "Executed only be PaymentAggregator contract"
      },
      "updateCollateralAggregator(address)": {
        "notice": "Trigers only be contract ownerReverts on saving 0x0 address or non contract address"
      },
      "updatePaymentAggregator(address)": {
        "notice": "Trigers only be contract ownerReverts on saving 0x0 address or non contract address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2242,
        "contract": "contracts/CloseOutNetting.sol:CloseOutNetting",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2244,
        "contract": "contracts/CloseOutNetting.sol:CloseOutNetting",
        "label": "collateralAggregator",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICollateralAggregator)20238"
      },
      {
        "astId": 2246,
        "contract": "contracts/CloseOutNetting.sol:CloseOutNetting",
        "label": "paymentAggregator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2252,
        "contract": "contracts/CloseOutNetting.sol:CloseOutNetting",
        "label": "_closeOuts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_struct(Payment)24381_storage))"
      },
      {
        "astId": 2256,
        "contract": "contracts/CloseOutNetting.sol:CloseOutNetting",
        "label": "_isDefaulted",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICollateralAggregator)20238": {
        "encoding": "inplace",
        "label": "contract ICollateralAggregator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_struct(Payment)24381_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => struct CloseOut.Payment))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(Payment)24381_storage)"
      },
      "t_mapping(t_bytes32,t_struct(Payment)24381_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct CloseOut.Payment)",
        "numberOfBytes": "32",
        "value": "t_struct(Payment)24381_storage"
      },
      "t_struct(Payment)24381_storage": {
        "encoding": "inplace",
        "label": "struct CloseOut.Payment",
        "members": [
          {
            "astId": 24376,
            "contract": "contracts/CloseOutNetting.sol:CloseOutNetting",
            "label": "netPayment",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 24378,
            "contract": "contracts/CloseOutNetting.sol:CloseOutNetting",
            "label": "flipped",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 24380,
            "contract": "contracts/CloseOutNetting.sol:CloseOutNetting",
            "label": "closed",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
