{
  "address": "0x884254b0fc1e7bF2fE14177CFd63fd4f50a93528",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "acceptedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        }
      ],
      "name": "EarlyTermination",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevPV",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currPV",
          "type": "uint256"
        }
      ],
      "name": "MarkToMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currLender",
          "type": "address"
        }
      ],
      "name": "Novation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "term",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "notional",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        }
      ],
      "name": "Register",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rejectedBy",
          "type": "address"
        }
      ],
      "name": "RejectTermination",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requestedBy",
          "type": "address"
        }
      ],
      "name": "RequestTermination",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "acceptTermination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_term",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "addLendingMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "getDealCurrency",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "getDealLastPV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "getDealPV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pv",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "getDealSettlementStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "getLastSettledPayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "settlementTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "getLoanDeal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "ccy",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "term",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "notional",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pv",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "startTxHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct LoanV2.LoanDeal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "getPaymentSchedule",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "getTerminationState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "terminationAsker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            }
          ],
          "internalType": "struct LoanV2.Termination",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTransferable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "last_loan_id",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lendingMarkets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "markToMarket",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "novation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentFrequency",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "side",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "term",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "notional",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "register",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "rejectTermination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "requestTermination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setCollateralAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isAccepted",
          "type": "bool"
        }
      ],
      "name": "setIsTransferable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setLendingControllerAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setLiquidations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setPaymentAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setTermStructure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settlementWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a7a958c68e57886e34379ac496d6082fcb5cea8470389ea9b09cfe2e7a02879",
  "receipt": {
    "to": null,
    "from": "0x57AB42d4fa756b6956b0cAf986a5f53bA90D9e28",
    "contractAddress": "0x884254b0fc1e7bF2fE14177CFd63fd4f50a93528",
    "transactionIndex": 0,
    "gasUsed": "2897761",
    "logsBloom": "0x
    "blockHash": "0xf9767d1b589e3212d6cf4dbf8e214c4d33733da3b59f1098461e7ecaa6e5fc57",
    "transactionHash": "0x5a7a958c68e57886e34379ac496d6082fcb5cea8470389ea9b09cfe2e7a02879",
    "logs": [],
    "blockNumber": 12164705,
    "cumulativeGasUsed": "2897761",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "48d264388c4204a72ee447cb1af8bee3",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acceptedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"EarlyTermination\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevPV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currPV\",\"type\":\"uint256\"}],\"name\":\"MarkToMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currLender\",\"type\":\"address\"}],\"name\":\"Novation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"notional\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rejectedBy\",\"type\":\"address\"}],\"name\":\"RejectTermination\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requestedBy\",\"type\":\"address\"}],\"name\":\"RequestTermination\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"acceptTermination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_term\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addLendingMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"getDealCurrency\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"getDealLastPV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"getDealPV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pv\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"getDealSettlementStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"getLastSettledPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"settlementTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"getLoanDeal\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"notional\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pv\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"startTxHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct LoanV2.LoanDeal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"getPaymentSchedule\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"getTerminationState\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"terminationAsker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"}],\"internalType\":\"struct LoanV2.Termination\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTransferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_loan_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lendingMarkets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"markToMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"novation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentFrequency\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"notional\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"rejectTermination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"requestTermination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setCollateralAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isAccepted\",\"type\":\"bool\"}],\"name\":\"setIsTransferable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setLendingControllerAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setLiquidations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setPaymentAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setTermStructure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptTermination(bytes32)\":{\"details\":\"Triggers to accept early termination of the loan.\",\"params\":{\"loanId\":\"Loan deal ID\"}},\"addLendingMarket(bytes32,uint256,address)\":{\"details\":\"Triggers to link with existing LendingMarket.\",\"params\":{\"_ccy\":\"LendingMarket main currency\",\"_term\":\"LendingMarket term\",\"addr\":\"LendingMarket contract address\"}},\"constructor\":{\"details\":\"Contract constructor function.\"},\"getDealCurrency(bytes32)\":{\"details\":\"Triggers to get main currency the deal by `dealId`.\",\"params\":{\"loanId\":\"Loan deal ID\"}},\"getDealLastPV(address,address,bytes32)\":{\"details\":\"Triggers to get stored present value of loan deal.\",\"params\":{\"loanId\":\"Loan ID to update PV for\"}},\"getDealPV(bytes32)\":{\"details\":\"Triggers to recalculate present value of loan deal.\",\"params\":{\"loanId\":\"Loan ID to update PV for\"}},\"getDealSettlementStatus(bytes32)\":{\"details\":\"Triggers to get settlement status of loan deal.\",\"params\":{\"loanId\":\"Loan deal ID\"}},\"getLastSettledPayment(bytes32)\":{\"details\":\"Returns the timestamp of the last settled payment in payment schedule\",\"params\":{\"loanId\":\"Loan deal ID\"}},\"getLoanDeal(bytes32)\":{\"details\":\"Triggers to get current information about Loan deal.\",\"params\":{\"loanId\":\"Loan deal ID\"}},\"getPaymentSchedule(bytes32)\":{\"details\":\"Returns the payment schedule for a deal by `loanId`\",\"params\":{\"loanId\":\"Loan deal ID\"}},\"getTerminationState(bytes32)\":{\"details\":\"Triggers to get termination state for loan with `loanId`.\",\"params\":{\"loanId\":\"Loan deal ID\"}},\"getVersion()\":{\"details\":\"Triggers to return loan product implementation version\",\"returns\":{\"_0\":\"implementation version\"}},\"markToMarket(bytes32)\":{\"details\":\"Main function for mark-to-market: updates present value, loan state and liquidates loan deal if collateral coverage <125% for every liquidation msg.sender get rewarded ~5% of loan deal PV.\",\"params\":{\"loanId\":\"Loan ID to update PV for\"}},\"novation(bytes32,address)\":{\"details\":\"Triggers to transfer loan ownership.\",\"params\":{\"loanId\":\"Loan deal ID\",\"newOwner\":\"Address of new owner (lender)\"}},\"register(address,address,uint8,bytes32,uint256,uint256,uint256)\":{\"details\":\"Triggered to register new loan deal, also locks borrowers collateral.\",\"params\":{\"ccy\":\"Loan deal main currency\",\"maker\":\"LendingMarket order market maker\",\"notional\":\"Notional amount of funds to lend/borrow\",\"rate\":\"Loan deal annual interest rate\",\"side\":\"MarketOrder side\",\"taker\":\"LendingMarket order market taker\",\"term\":\"Loan deal term\"}},\"rejectTermination(bytes32)\":{\"details\":\"Triggers to reject early termination of the loan.\",\"params\":{\"loanId\":\"Loan deal ID\"}},\"requestTermination(bytes32)\":{\"details\":\"Triggers to request early termination of the loan.\",\"params\":{\"loanId\":\"Loan deal ID\"}},\"setCollateralAddr(address)\":{\"details\":\"Triggers to link with Collateral contract.\",\"params\":{\"addr\":\"Collateral contract address\"}},\"setIsTransferable(bool)\":{\"details\":\"Triggers to change ability to transfer loan ownership by lenders.\",\"params\":{\"isAccepted\":\"Boolean to\"}},\"setLendingControllerAddr(address)\":{\"details\":\"Triggers to link with LendingMarketController contract.\",\"params\":{\"addr\":\"LendingMarketController contract address\"}},\"setLiquidations(address)\":{\"details\":\"Triggers to link with Liquidations contract.\",\"params\":{\"addr\":\"Liquidations contract address\"}},\"setPaymentAggregator(address)\":{\"details\":\"Triggers to link with PaymentAggregator contract.\",\"params\":{\"addr\":\"Payment Aggregator contract address\"}},\"setTermStructure(address)\":{\"details\":\"Triggers to link with TermStructure contract.\",\"params\":{\"addr\":\"TermStructure contract address\"}}},\"stateVariables\":{\"loans\":{\"details\":\"Mapping for all storing LoanDeals per loanIDs.\"}},\"title\":\"LoanV2 contract is used to store Lending deals in Secured Finance protocol. This contract handle the PV updates on lending market rate changes also allowing parties to mutually terminate their lending deals Contract linked to Lending Market contracts, LendingMarketController and Collateral contract.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptTermination(bytes32)\":{\"notice\":\"Executed only for working loan deal\"},\"addLendingMarket(bytes32,uint256,address)\":{\"notice\":\"Executed only by contract owner\"},\"constructor\":\"sets contract deployer as owner of this contract\",\"novation(bytes32,address)\":{\"notice\":\"Executed only by original lender\"},\"register(address,address,uint8,bytes32,uint256,uint256,uint256)\":{\"notice\":\"Callable only by LendingMarket after matching orders\"},\"rejectTermination(bytes32)\":{\"notice\":\"Executed only for working loan deal\"},\"requestTermination(bytes32)\":{\"notice\":\"Executed only for working loan deal\"},\"setCollateralAddr(address)\":{\"notice\":\"Executed only by contract owner\"},\"setIsTransferable(bool)\":{\"notice\":\"Executed only by contract owner\"},\"setLendingControllerAddr(address)\":{\"notice\":\"Executed only by contract owner\"},\"setLiquidations(address)\":{\"notice\":\"Executed only by contract owner\"},\"setPaymentAggregator(address)\":{\"notice\":\"Executed only by contract owner\"},\"setTermStructure(address)\":{\"notice\":\"Executed only by contract owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LoanV2.sol\":\"LoanV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"contracts/LoanV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/ICollateralAggregatorV2.sol\\\";\\nimport \\\"./ProtocolTypes.sol\\\";\\nimport \\\"./interfaces/ILendingMarketController.sol\\\";\\nimport \\\"./interfaces/IPaymentAggregator.sol\\\";\\nimport \\\"./interfaces/IProductWithOneLeg.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./libraries/DealId.sol\\\";\\nimport \\\"./libraries/DiscountFactor.sol\\\";\\nimport \\\"./libraries/BokkyPooBahsDateTimeLibrary.sol\\\";\\nimport \\\"./interfaces/ITermStructureGetter.sol\\\";\\nimport \\\"./interfaces/ILiquidations.sol\\\";\\n\\n/**\\n * @title LoanV2 contract is used to store Lending deals in Secured Finance\\n * protocol. This contract handle the PV updates on lending market rate changes\\n * also allowing parties to mutually terminate their lending deals\\n *\\n * Contract linked to Lending Market contracts, LendingMarketController and Collateral contract.\\n */\\ncontract LoanV2 is ProtocolTypes, IProductWithOneLeg {\\n    using SafeMath for uint256;\\n\\n    uint256 constant NOTICE = 2 weeks;\\n    uint256 constant SETTLE = 2 days;\\n    uint256 constant MAXPAYNUM = 6;\\n    bytes4 constant prefix = 0x21aaa47b;\\n    uint16 private constant VERSION = 1;\\n    uint256 public settlementWindow = 2;\\n    uint8 public paymentFrequency = uint8(PaymentFrequency.ANNUAL);\\n\\n    struct LoanDeal {\\n        address lender;\\n        address borrower;\\n        bytes32 ccy;\\n        uint256 term;\\n        uint256 notional;\\n        uint256 rate;\\n        uint256 start;\\n        uint256 end;\\n        uint256 pv;\\n        bytes32 startTxHash;\\n    }\\n\\n    struct Termination {\\n        address terminationAsker;\\n        uint256 terminationDate;\\n    }\\n\\n    /**\\n     * @dev Mapping for all storing LoanDeals per loanIDs.\\n     */\\n    mapping(bytes32 => LoanDeal) private loans;\\n    mapping(bytes32 => Termination) private terminations;\\n    mapping(bytes32 => bool) private isSettled;\\n\\n    address public owner;\\n    bool public isTransferable;\\n    uint256 public last_loan_id = 0;\\n\\n    // Contracts\\n    ICollateralAggregator collateralAggregator;\\n    ILendingMarketController lendingController;\\n    IPaymentAggregator paymentAggregator;\\n    ITermStructureGetter termStructure;\\n    ILiquidations liquidations;\\n\\n    mapping(bytes32 => mapping(uint256 => address)) public lendingMarkets;\\n\\n    /**\\n     * @dev Modifier to make a function callable only by contract owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check if LendingMarket contract linked with this contract\\n     * @param _ccy LendingMarket currency\\n     * @param _term LendingMarket term\\n     */\\n    modifier lendingMarketExists(bytes32 _ccy, uint256 _term) {\\n        require(lendingMarkets[_ccy][_term] == msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the loan deal is active.\\n     * @param loanId Loan deal ID\\n     */\\n    modifier workingLoan(bytes32 loanId) {\\n        require(isSettled[loanId], \\\"loan is not working\\\");\\n        _;\\n    }\\n\\n    modifier onlyLiquidationContract() {\\n        require(msg.sender == address(liquidations), \\\"INVALID_ACCESS\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract constructor function.\\n     *\\n     * @notice sets contract deployer as owner of this contract\\n     */\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Triggers to link with LendingMarketController contract.\\n     * @param addr LendingMarketController contract address\\n     *\\n     * @notice Executed only by contract owner\\n     */\\n    function setLendingControllerAddr(address addr) public onlyOwner {\\n        lendingController = ILendingMarketController(addr);\\n    }\\n\\n    /**\\n     * @dev Triggers to link with Collateral contract.\\n     * @param addr Collateral contract address\\n     *\\n     * @notice Executed only by contract owner\\n     */\\n    function setCollateralAddr(address addr) public onlyOwner {\\n        collateralAggregator = ICollateralAggregator(addr);\\n    }\\n\\n    /**\\n     * @dev Triggers to link with PaymentAggregator contract.\\n     * @param addr Payment Aggregator contract address\\n     *\\n     * @notice Executed only by contract owner\\n     */\\n    function setPaymentAggregator(address addr) public onlyOwner {\\n        paymentAggregator = IPaymentAggregator(addr);\\n    }\\n\\n    /**\\n     * @dev Triggers to link with TermStructure contract.\\n     * @param addr TermStructure contract address\\n     *\\n     * @notice Executed only by contract owner\\n     */\\n    function setTermStructure(address addr) public onlyOwner {\\n        termStructure = ITermStructureGetter(addr);\\n    }\\n\\n    /**\\n     * @dev Triggers to link with Liquidations contract.\\n     * @param addr Liquidations contract address\\n     *\\n     * @notice Executed only by contract owner\\n     */\\n    function setLiquidations(address addr) public onlyOwner {\\n        liquidations = ILiquidations(addr);\\n    }\\n\\n    /**\\n     * @dev Triggers to change ability to transfer loan ownership by lenders.\\n     * @param isAccepted Boolean to\\n     *\\n     * @notice Executed only by contract owner\\n     */\\n    function setIsTransferable(bool isAccepted) public onlyOwner {\\n        isTransferable = isAccepted;\\n    }\\n\\n    /**\\n     * @dev Triggers to link with existing LendingMarket.\\n     * @param _ccy LendingMarket main currency\\n     * @param _term LendingMarket term\\n     * @param addr LendingMarket contract address\\n     *\\n     * @notice Executed only by contract owner\\n     */\\n    function addLendingMarket(\\n        bytes32 _ccy,\\n        uint256 _term,\\n        address addr\\n    ) public onlyOwner {\\n        require(\\n            lendingMarkets[_ccy][_term] == address(0),\\n            \\\"Couldn't rewrite existing market\\\"\\n        );\\n        lendingMarkets[_ccy][_term] = addr;\\n    }\\n\\n    /**\\n     * @dev Internal function to generate deal id based on product prefix and deals counter\\n     */\\n    function _generateDealId() internal returns (bytes32 id) {\\n        last_loan_id += 1;\\n        id = DealId.generate(prefix, last_loan_id);\\n    }\\n\\n    /**\\n     * @dev Triggered to register new loan deal, also locks borrowers collateral.\\n     * @param maker LendingMarket order market maker\\n     * @param taker LendingMarket order market taker\\n     * @param side MarketOrder side\\n     * @param ccy Loan deal main currency\\n     * @param term Loan deal term\\n     * @param notional Notional amount of funds to lend/borrow\\n     * @param rate Loan deal annual interest rate\\n     *\\n     * @notice Callable only by LendingMarket after matching orders\\n     */\\n    function register(\\n        address maker,\\n        address taker,\\n        uint8 side,\\n        bytes32 ccy,\\n        uint256 term,\\n        uint256 notional,\\n        uint256 rate\\n    ) public override lendingMarketExists(ccy, term) returns (bytes32 loanId) {\\n        require(maker != taker, \\\"Same person deal is not allowed\\\");\\n        address lender;\\n        address borrower;\\n\\n        if (Side(side) == Side.LEND) {\\n            lender = maker;\\n            borrower = taker;\\n        } else if (Side(side) == Side.BORROW) {\\n            lender = taker;\\n            borrower = maker;\\n        }\\n\\n        collateralAggregator.releaseUnsettledCollateral(\\n            lender,\\n            ccy,\\n            notional.mul(MKTMAKELEVEL).div(PCT)\\n        );\\n        collateralAggregator.useCollateral(\\n            lender,\\n            borrower,\\n            ccy,\\n            notional.mul(MKTMAKELEVEL).div(PCT),\\n            notional,\\n            false\\n        );\\n\\n        LoanDeal memory deal;\\n        deal.lender = lender;\\n        deal.borrower = borrower;\\n        deal.ccy = ccy;\\n        deal.term = term;\\n        deal.notional = notional;\\n        deal.rate = rate;\\n        deal.start = block.timestamp;\\n        deal.end = block.timestamp.add(deal.term.mul(86400));\\n\\n        loanId = _generateDealId();\\n        loans[loanId] = deal;\\n\\n        _registerPaymentSchedule(loanId, deal);\\n        // liquidations.addDealToLiquidationQueue(lender, borrower, loanId);\\n\\n        emit Register(lender, borrower, ccy, term, notional, rate, loanId);\\n    }\\n\\n    /**\\n     * @dev Triggers to get settlement status of loan deal.\\n     * @param loanId Loan deal ID\\n     */\\n    function getDealSettlementStatus(bytes32 loanId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return isSettled[loanId];\\n    }\\n\\n    // /**\\n    // * @dev Triggers to get the state of the deal by `dealId`.\\n    // * @param loanId Loan deal ID\\n    // */\\n    // function getDealState(bytes32 loanId) public view override returns (uint8) {\\n    //     return 0;\\n    // }\\n\\n    /**\\n     * @dev Triggers to get main currency the deal by `dealId`.\\n     * @param loanId Loan deal ID\\n     */\\n    function getDealCurrency(bytes32 loanId)\\n        public\\n        view\\n        override\\n        returns (bytes32)\\n    {\\n        return loans[loanId].ccy;\\n    }\\n\\n    /**\\n     * @dev Triggers to get current information about Loan deal.\\n     * @param loanId Loan deal ID\\n     */\\n    function getLoanDeal(bytes32 loanId) public view returns (LoanDeal memory) {\\n        return loans[loanId];\\n    }\\n\\n    /**\\n     * @dev Triggers to get termination state for loan with `loanId`.\\n     * @param loanId Loan deal ID\\n     */\\n    function getTerminationState(bytes32 loanId)\\n        public\\n        view\\n        returns (Termination memory)\\n    {\\n        return terminations[loanId];\\n    }\\n\\n    /**\\n     * @dev Returns the payment schedule for a deal by `loanId`\\n     * @param loanId Loan deal ID\\n     */\\n    function getPaymentSchedule(bytes32 loanId)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256[] memory,\\n            uint256[] memory,\\n            bool[] memory\\n        )\\n    {\\n        LoanDeal memory deal = loans[loanId];\\n\\n        return _constructSchedule(deal, true);\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp of the last settled payment in payment schedule\\n     * @param loanId Loan deal ID\\n     */\\n    function getLastSettledPayment(bytes32 loanId)\\n        external\\n        view\\n        returns (uint256 settlementTime)\\n    {\\n        LoanDeal memory deal = loans[loanId];\\n\\n        uint256 payNums = termStructure.getNumPayments(\\n            deal.term,\\n            paymentFrequency\\n        );\\n        uint256[] memory daysArr = termStructure.getTermSchedule(\\n            deal.term,\\n            paymentFrequency\\n        );\\n\\n        for (uint256 i = payNums; i > 0; i--) {\\n            uint256 time = _timeShift(deal.start, daysArr[i - 1]);\\n            bool status = paymentAggregator.isSettled(\\n                deal.lender,\\n                deal.borrower,\\n                deal.ccy,\\n                time\\n            );\\n\\n            if (status) {\\n                settlementTime = time;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers to get stored present value of loan deal.\\n     * @param loanId Loan ID to update PV for\\n     */\\n    function getDealLastPV(\\n        address party0,\\n        address party1,\\n        bytes32 loanId\\n    ) public view override returns (uint256, uint256) {\\n        LoanDeal memory deal = loans[loanId];\\n\\n        if (deal.pv == 0) {\\n            deal.pv = getDealPV(loanId);\\n        }\\n\\n        if (party0 == deal.lender && party1 == deal.borrower) {\\n            return (0, deal.pv);\\n        } else if (party0 == deal.borrower && party1 == deal.lender) {\\n            return (deal.pv, 0);\\n        }\\n\\n        return (0, 0);\\n    }\\n\\n    // =========== EARLY TERMINATION SECTION ===========\\n\\n    /**\\n     * @dev Triggers to request early termination of the loan.\\n     * @param loanId Loan deal ID\\n     *\\n     * @notice Executed only for working loan deal\\n     */\\n    function requestTermination(bytes32 loanId) public override {\\n        Termination storage termination = terminations[loanId];\\n        LoanDeal memory deal = loans[loanId];\\n        require(\\n            msg.sender == deal.lender || msg.sender == deal.borrower,\\n            \\\"parties must request\\\"\\n        );\\n        require(updateLoanPV(loanId), \\\"failed MtM\\\");\\n\\n        termination.terminationAsker = msg.sender;\\n\\n        emit RequestTermination(loanId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Triggers to accept early termination of the loan.\\n     * @param loanId Loan deal ID\\n     *\\n     * @notice Executed only for working loan deal\\n     */\\n    function acceptTermination(bytes32 loanId) public override {\\n        Termination storage termination = terminations[loanId];\\n        require(\\n            termination.terminationAsker != address(0),\\n            \\\"no termination request\\\"\\n        );\\n\\n        LoanDeal memory deal = loans[loanId];\\n\\n        if (termination.terminationAsker == deal.lender) {\\n            require(msg.sender == deal.borrower, \\\"borrower must accept\\\");\\n        } else {\\n            require(msg.sender == deal.lender, \\\"lender must accept\\\");\\n        }\\n\\n        require(updateLoanPV(loanId), \\\"failed MtM\\\");\\n\\n        if (isSettled[loanId]) {\\n            (\\n                uint256[] memory payments,\\n                ,\\n                bool[] memory settlements\\n            ) = _constructSchedule(deal, true);\\n\\n            uint256 i;\\n            for (i = 0; i < settlements.length; i++) {\\n                if (settlements[i] == false) break;\\n            }\\n\\n            uint256 deltaDays;\\n\\n            if (i == 0) {\\n                deltaDays = BokkyPooBahsDateTimeLibrary.diffDays(\\n                    deal.start,\\n                    block.timestamp\\n                );\\n            } else {\\n                deltaDays = BokkyPooBahsDateTimeLibrary.diffDays(\\n                    payments[i - 1],\\n                    block.timestamp\\n                );\\n            }\\n\\n            uint256 interestRatePerDay = deal.rate.mul(1e18).div(36500);\\n            uint256 accuredInterestRate = interestRatePerDay.mul(deltaDays);\\n            uint256 accuredInterest = deal\\n                .notional\\n                .mul(accuredInterestRate)\\n                .div(1e20);\\n            uint256 totalPayment = accuredInterest.add(deal.pv);\\n            collateralAggregator.liquidate(\\n                deal.borrower,\\n                deal.lender,\\n                deal.ccy,\\n                totalPayment,\\n                true\\n            );\\n            // collateralAggregator.releaseCollateral(deal.lender, deal.borrower, deal.ccy, 0, deal.pv, true);\\n\\n            emit EarlyTermination(loanId, msg.sender, totalPayment);\\n        } else {\\n            // collateralAggregator.releaseCollateral(deal.lender, deal.borrower, deal.ccy, deal.notional.mul(MKTMAKELEVEL).div(PCT), deal.notional, false);\\n            emit EarlyTermination(loanId, msg.sender, 0);\\n        }\\n\\n        _liquidateLoan(loanId);\\n    }\\n\\n    /**\\n     * @dev Triggers to reject early termination of the loan.\\n     * @param loanId Loan deal ID\\n     *\\n     * @notice Executed only for working loan deal\\n     */\\n    function rejectTermination(bytes32 loanId) public override {\\n        Termination memory termination = terminations[loanId];\\n        require(\\n            termination.terminationAsker != address(0),\\n            \\\"no termination request\\\"\\n        );\\n\\n        LoanDeal memory deal = loans[loanId];\\n        require(\\n            msg.sender == deal.lender || msg.sender == deal.borrower,\\n            \\\"parties must reject\\\"\\n        );\\n        require(updateLoanPV(loanId), \\\"failed MtM\\\");\\n\\n        delete terminations[loanId];\\n\\n        emit RejectTermination(loanId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Triggers to transfer loan ownership.\\n     * @param loanId Loan deal ID\\n     * @param newOwner Address of new owner (lender)\\n     *\\n     * @notice Executed only by original lender\\n     */\\n    function novation(bytes32 loanId, address newOwner)\\n        public\\n        override\\n        workingLoan(loanId)\\n    {\\n        LoanDeal storage deal = loans[loanId];\\n        require(isTransferable, \\\"transfers not allowed\\\");\\n\\n        address prevLender = deal.lender;\\n        require(msg.sender == prevLender, \\\"lender must trasfer\\\");\\n\\n        _removePaymentSchedule(loanId, deal);\\n        collateralAggregator.releaseCollateral(\\n            prevLender,\\n            deal.borrower,\\n            deal.ccy,\\n            0,\\n            deal.pv,\\n            true\\n        );\\n\\n        deal.lender = newOwner;\\n\\n        _registerPaymentSchedule(loanId, deal);\\n        collateralAggregator.useCollateral(\\n            newOwner,\\n            deal.borrower,\\n            deal.ccy,\\n            0,\\n            deal.pv,\\n            true\\n        );\\n\\n        emit Novation(loanId, newOwner);\\n    }\\n\\n    function liquidate(bytes32 loanId) external override {\\n        _liquidateLoan(loanId);\\n    }\\n\\n    // =========== MARK-TO-MARKET SECTION ===========\\n\\n    /**\\n     * @dev Main function for mark-to-market: updates present value,\\n     * loan state and liquidates loan deal if collateral coverage <125%\\n     * for every liquidation msg.sender get rewarded ~5% of loan deal PV.\\n     * @param loanId Loan ID to update PV for\\n     */\\n    function markToMarket(bytes32 loanId) external override returns (bool) {\\n        _verifyNotionalExchange(loanId);\\n        require(updateLoanPV(loanId), \\\"failed update PV\\\");\\n        // updateState(loanId);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Triggers to update present value of loan.\\n     * @param loanId Loan ID to update PV for\\n     *\\n     * @notice Calculates discount factors based on lending markets rates,\\n     * and updates the state of the loan. Can be triggered to liquidate loan deal\\n     * if borrower's collateral not enough.\\n     */\\n    function updateLoanPV(bytes32 loanId) internal returns (bool) {\\n        uint256 pv = getDealPV(loanId);\\n\\n        if (pv != 0) {\\n            LoanDeal storage deal = loans[loanId];\\n            if (!isSettled[loanId]) return true;\\n\\n            uint256 oldPV = deal.pv;\\n            deal.pv = pv;\\n\\n            collateralAggregator.updatePV(\\n                deal.lender,\\n                deal.borrower,\\n                deal.ccy,\\n                0,\\n                oldPV,\\n                0,\\n                deal.pv\\n            );\\n\\n            emit MarkToMarket(loanId, oldPV, pv);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Triggers to recalculate present value of loan deal.\\n     * @param loanId Loan ID to update PV for\\n     */\\n    function getDealPV(bytes32 loanId)\\n        public\\n        view\\n        override\\n        returns (uint256 pv)\\n    {\\n        LoanDeal memory deal = loans[loanId];\\n        if (!isSettled[loanId]) return deal.notional;\\n\\n        (uint256[] memory dfs, uint256[] memory terms) = lendingController\\n            .getDiscountFactorsForCcy(deal.ccy);\\n\\n        (\\n            uint256[] memory payments,\\n            uint256[] memory amounts,\\n\\n        ) = _constructSchedule(deal, false);\\n\\n        for (uint256 i = 0; i < payments.length; i++) {\\n            if (payments[i] < block.timestamp) continue;\\n            uint256 d = DiscountFactor.interpolateDF(dfs, terms, payments[i]);\\n\\n            pv = pv.add((amounts[i].mul(d)));\\n        }\\n\\n        return pv.div(BP);\\n    }\\n\\n    /**\\n     * @dev Internal function to liquidate loan deal and remove all payments in timeslots\\n     * @param loanId Loan deal ID\\n     */\\n    function _liquidateLoan(bytes32 loanId) internal {\\n        LoanDeal memory deal = loans[loanId];\\n        _removePaymentSchedule(loanId, deal);\\n        // collateralAggregator.releaseCollateral(deal.lender, deal.borrower, deal.ccy, 0, deal.pv, true);\\n\\n        emit Liquidate(loanId);\\n        delete loans[loanId];\\n    }\\n\\n    /**\\n     * @dev Internal function to get TimeSlot position after adding days\\n     * @param timestamp Timestamp to add days\\n     * @param numDays number of days to add\\n     * @return Updated timestamp and TimeSlot position\\n     */\\n    function _timeShift(uint256 timestamp, uint256 numDays)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        timestamp = BokkyPooBahsDateTimeLibrary.addDays(timestamp, numDays);\\n\\n        return timestamp;\\n    }\\n\\n    /**\\n     * @dev Internal function for registering payment schedule while registering new loan\\n     * @param loanId Loan deal ID\\n     * @param deal LoanDeal structure\\n     */\\n    function _registerPaymentSchedule(bytes32 loanId, LoanDeal memory deal)\\n        internal\\n    {\\n        (\\n            uint256[] memory payments,\\n            uint256[] memory amounts,\\n\\n        ) = _constructSchedule(deal, false);\\n\\n        uint256[] memory lenderLeg = new uint256[](payments.length);\\n        lenderLeg[0] = deal.notional;\\n\\n        paymentAggregator.registerPayments(\\n            deal.lender,\\n            deal.borrower,\\n            deal.ccy,\\n            loanId,\\n            payments,\\n            lenderLeg,\\n            amounts\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function for registering payment schedule while registering new loan\\n     * @param loanId Loan deal ID\\n     * @param deal LoanDeal structure\\n     */\\n    function _removePaymentSchedule(bytes32 loanId, LoanDeal memory deal)\\n        internal\\n    {\\n        (\\n            uint256[] memory payments,\\n            uint256[] memory amounts,\\n\\n        ) = _constructSchedule(deal, false);\\n\\n        uint256[] memory lenderLeg = new uint256[](payments.length);\\n        if (!isSettled[loanId]) {\\n            lenderLeg[0] = deal.notional;\\n        }\\n\\n        paymentAggregator.removePayments(\\n            deal.lender,\\n            deal.borrower,\\n            deal.ccy,\\n            loanId,\\n            payments,\\n            lenderLeg,\\n            amounts\\n        );\\n    }\\n\\n    struct ScheduleConstructionLocalVars {\\n        uint256 payNums;\\n        uint256[] daysArr;\\n        uint256 dfFrac;\\n        uint256 coupon;\\n        uint256 time;\\n        bool status;\\n    }\\n\\n    /**\\n     * @dev Internal function to construct payment schedule using deal parameters\\n     * @param deal Loan deal structure\\n     * @param settlementStatus Boolean wether settlement status should be returned\\n     * @return Payment schedule structure\\n     */\\n    function _constructSchedule(LoanDeal memory deal, bool settlementStatus)\\n        internal\\n        view\\n        returns (\\n            uint256[] memory,\\n            uint256[] memory,\\n            bool[] memory\\n        )\\n    {\\n        ScheduleConstructionLocalVars memory vars;\\n\\n        vars.payNums = termStructure.getNumPayments(\\n            deal.term,\\n            paymentFrequency\\n        );\\n        vars.daysArr = termStructure.getTermSchedule(\\n            deal.term,\\n            paymentFrequency\\n        );\\n        vars.dfFrac = termStructure.getDfFrac(deal.term);\\n\\n        vars.coupon = (deal.notional.mul(deal.rate).mul(vars.dfFrac))\\n            .div(BP)\\n            .div(BP);\\n\\n        uint256 len = vars.payNums.add(1);\\n        uint256[] memory payments = new uint256[](len);\\n        uint256[] memory amounts = new uint256[](len);\\n        bool[] memory settlements = new bool[](len);\\n\\n        for (uint256 i = 1; i <= vars.payNums; i++) {\\n            uint256 time = _timeShift(deal.start, vars.daysArr[i - 1]);\\n\\n            payments[i] = time;\\n            if (i == vars.payNums) {\\n                amounts[i] = deal.notional.add(vars.coupon);\\n            } else {\\n                amounts[i] = vars.coupon;\\n            }\\n\\n            if (settlementStatus) {\\n                vars.status = paymentAggregator.isSettled(\\n                    deal.lender,\\n                    deal.borrower,\\n                    deal.ccy,\\n                    vars.time\\n                );\\n                settlements[i] = vars.status;\\n            }\\n        }\\n\\n        uint256 settlement = _timeShift(deal.start, 2);\\n        payments[0] = settlement;\\n\\n        return (payments, amounts, settlements);\\n    }\\n\\n    /**\\n     * @dev Internal function to verify the settlement of notional exchange\\n     * @param loanId Loan deal id\\n     */\\n    function _verifyNotionalExchange(bytes32 loanId) internal {\\n        if (!isSettled[loanId]) {\\n            LoanDeal memory deal = loans[loanId];\\n            uint256 time = _timeShift(deal.start, 2);\\n            bool status = paymentAggregator.isSettled(\\n                deal.lender,\\n                deal.borrower,\\n                deal.ccy,\\n                time\\n            );\\n\\n            if (status) {\\n                isSettled[loanId] = true;\\n                collateralAggregator.releaseCollateral(\\n                    deal.lender,\\n                    deal.borrower,\\n                    deal.ccy,\\n                    deal.notional.mul(MKTMAKELEVEL).div(PCT),\\n                    0,\\n                    false\\n                );\\n                collateralAggregator.settleCollateral(\\n                    deal.lender,\\n                    deal.borrower,\\n                    deal.ccy,\\n                    0,\\n                    deal.notional\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers to return loan product implementation version\\n     * @return implementation version\\n     */\\n    function getVersion() public view override returns (uint16) {\\n        return VERSION;\\n    }\\n}\\n\",\"keccak256\":\"0x7ac9157f31b0db57328e2398fce9e453d8260ef3299a1446d9e0fb68ea59b43f\",\"license\":\"MIT\"},\"contracts/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\ncontract ProtocolTypes {\\n    // Constant values\\n    uint8 internal constant NUMCCY = 3;\\n    uint8 internal constant NUMTERM = 6;\\n    uint8 internal constant NUMDF = 7; // number of discount factors\\n    uint256 internal constant BP = 10000; // basis point\\n\\n    uint256 internal constant PCT = 10000; // percentage point in basis\\n    uint256 internal constant PENALTYLEVEL = 1000; // 10% settlement failure penalty\\n    uint256 internal constant MKTMAKELEVEL = 2000; // 20% for market making\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Loan common types\\n    enum LoanState {\\n        REGISTERED,\\n        WORKING,\\n        DUE,\\n        PAST_DUE,\\n        CLOSED,\\n        TERMINATED\\n    }\\n    enum DFTERM {\\n        _3m,\\n        _6m,\\n        _1y,\\n        _2y,\\n        _3y,\\n        _4y,\\n        _5y\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n\\n    // FXMarket common types\\n    enum CcyPair {\\n        FILETH,\\n        FILUSDC,\\n        ETHUSDC,\\n        BTCUSDC,\\n        BTCETH,\\n        BTCFIL\\n    }\\n    enum FXSide {\\n        BID,\\n        OFFER\\n    }\\n\\n    enum PaymentFrequency {\\n        ANNUAL,\\n        SEMI_ANNUAL,\\n        QUARTERLY,\\n        MONTHLY,\\n        FORWARD\\n    }\\n}\\n\",\"keccak256\":\"0x72de205a94aefa6e5b79074f603b8056535f99918af5112343156e79b7eadd83\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralAggregatorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICollateralAggregator {\\n    event Register(address indexed addr);\\n    event Release(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    );\\n    event ReleaseUnsettled(address indexed party, bytes32 ccy, uint256 amount);\\n    event SettleCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event UpdatePV(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    );\\n    event UseCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    );\\n    event UseUnsettledCollateral(\\n        address indexed party,\\n        bytes32 ccy,\\n        uint256 amount\\n    );\\n\\n    function checkRegisteredUser(address addr) external view returns (bool);\\n\\n    function enterVault(address _user) external;\\n\\n    function enterVault(address _party0, address _party1) external;\\n\\n    function exitVault(address _user) external;\\n\\n    function exitVault(address _party0, address _party1) external;\\n\\n    function getCcyExposures(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getCoverage(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getExposedCurrencies(address partyA, address partyB)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getMaxCollateralBookWidthdraw(address _user)\\n        external\\n        view\\n        returns (uint256 maxWithdraw);\\n\\n    function getMaxCollateralWidthdraw(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getNetAndTotalPV(address _party0, address _party1)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getRebalanceCollateralAmounts(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getTotalUnsettledExp(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getUnsettledCoverage(address _user)\\n        external\\n        view\\n        returns (uint256 coverage);\\n\\n    function isCovered(\\n        address _party0,\\n        address _party1,\\n        bytes32 _ccy,\\n        uint256 _party0PV,\\n        uint256 _party1PV,\\n        bool _isSettled\\n    ) external view returns (bool, bool);\\n\\n    function isCoveredUnsettled(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) external view returns (bool);\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        uint256 liquidationInETH\\n    ) external;\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        bytes32 ccy,\\n        uint256 liquidationAmount,\\n        bool isSettled\\n    ) external;\\n\\n    function register() external;\\n\\n    function register(\\n        string[] memory _addresses, \\n        uint256[] memory _chainIds\\n    ) external;\\n\\n    function releaseCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function releaseUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function settleCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external;\\n\\n    function updatePV(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    ) external;\\n\\n    function useCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function useUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function getUsedVaults(address user)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function getUsedVaults(address party0, address party1)\\n        external\\n        view\\n        returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x65d1b2bb163eb495c39444bc0316fdf5ea9eb158c31b22bdd94d7d9e7760d373\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nstruct Order {\\n    bytes32 ccy;\\n    uint256 term;\\n    uint8 side;\\n    uint256 amount;\\n    uint256 rate;\\n}\\n\\ninterface ILendingMarketController {\\n    event LendingMarketCreated(\\n        bytes32 ccy,\\n        uint256 term,\\n        address indexed marketAddr\\n    );\\n    event LendingMarketsPaused(bytes32 ccy);\\n    event LendingMarketsUnpaused(bytes32 ccy);\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    function deployLendingMarket(bytes32 _ccy, uint256 _term)\\n        external\\n        returns (address market);\\n\\n    function getBorrowRatesForCcy(bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256[] memory rates);\\n\\n    function getDiscountFactorsForCcy(bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256[] memory, uint256[] memory);\\n\\n    function getLendRatesForCcy(bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256[] memory rates);\\n\\n    function getMidRatesForCcy(bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256[] memory rates);\\n\\n    function lendingMarkets(bytes32, uint256) external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function pauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function placeBulkOrders(Order[] memory orders) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function numberOfMarkets() external view returns (uint256);\\n\\n    function getSupportedTerms(bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x289d5d7e4fc8f28dc49dfeffde7cab480692c04686e9266aae8c6de718198372\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface ILiquidations {\\n    event DealAddedToLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    );\\n    event DealRemovedFromLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    );\\n    event LinkedContract(address addr);\\n    event LiquidationAgentAdded(address indexed liquidationAgent);\\n    event LiquidationAgentRemoved(address indexed liquidationAgent);\\n    event OffsetUpdated(uint256 oldOffset, uint256 newOffset);\\n    event OwnerUpdated(address indexed oldOwner, address indexed newOwner);\\n\\n    function addDealToLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external;\\n\\n    function addLiquidationAgent(address _liquidationAgent) external;\\n\\n    function linkContract(address _addr) external;\\n\\n    function liquidateDeals(\\n        address party0,\\n        address party1,\\n        bytes32[] memory dealIds\\n    ) external;\\n\\n    function liquidateDeals(address party0, address party1) external;\\n\\n    function offset() external view returns (uint256);\\n\\n    function removeDealFromLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external;\\n\\n    function removeLiquidationAgent(address _liquidationAgent) external;\\n\\n    function updateLiquidationOffset(uint256 _offset) external;\\n}\\n\",\"keccak256\":\"0x54306b84a9dedee181de4a25a0c2dc08fb60d4f71ebf2543cdd5ec24399bbf63\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nstruct Slot {\\n    uint256 totalPayment0;\\n    uint256 totalPayment1;\\n    uint256 netPayment;\\n    bool flipped;\\n    bytes32 paymentProof;\\n    address verificationParty;\\n    bool isSettled;\\n}\\n\\ninterface IPaymentAggregator {\\n    event UpdateCloseOutNetting(\\n        address indexed prevContract,\\n        address indexed closeOutNetting\\n    );\\n    event UpdateMarkToMarket(\\n        address indexed prevContract,\\n        address indexed closeOutNetting\\n    );\\n\\n    event RegisterPayment(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event VerifyPayment(\\n        address indexed verifier,\\n        address indexed counterparty,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment,\\n        bytes32 txHash\\n    );\\n    event SettlePayment(\\n        address indexed verifier,\\n        address indexed counterparty,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        bytes32 txHash\\n    );\\n    event RemovePayment(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n\\n    function addPaymentAggregatorUser(address _user) external returns (bool);\\n\\n    function isPaymentAggregatorUser(address _user)\\n        external\\n        view\\n        returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function registerPayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 dealId,\\n        uint256[] memory timestamps,\\n        uint256[] memory payments0,\\n        uint256[] memory payments1\\n    ) external;\\n\\n    function removePaymentAggregatorUser(address _user) external returns (bool);\\n\\n    function removePayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 dealId,\\n        uint256[] calldata timestamps,\\n        uint256[] calldata payments0,\\n        uint256[] calldata payments1\\n    ) external;\\n\\n    function settlePayment(\\n        address verifier,\\n        address counterparty,\\n        bytes32 ccy,\\n        uint256 timestamp,\\n        bytes32 txHash\\n    ) external;\\n\\n    function verifyPayment(\\n        address verifier,\\n        address counterparty,\\n        bytes32 ccy,\\n        uint256 timestamp,\\n        uint256 payment,\\n        bytes32 txHash\\n    ) external;\\n\\n    function isSettled(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 timestamp\\n    ) external view returns (bool status);\\n\\n    function getDealsFromSlot(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 slotPosition\\n    ) external view returns (bytes32[] memory);\\n\\n    // function getTimeSlotByDate(\\n    //     address party0,\\n    //     address party1,\\n    //     bytes32 ccy,\\n    //     uint256 year,\\n    //     uint256 month,\\n    //     uint256 day\\n    // ) external view returns (Slot memory timeSlot);\\n\\n    // function getTimeSlotBySlotId(\\n    //     address party0,\\n    //     address party1,\\n    //     bytes32 ccy,\\n    //     bytes32 slot\\n    // ) external view returns (Slot memory timeSlot);\\n\\n    function settlementWindow() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x26b01bf1c8f14e441ca8a531af8574cc4e551bcf347b09bcad8f160f3cb48bd0\",\"license\":\"MIT\"},\"contracts/interfaces/IProduct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title IProduct is a common interface for various products on secured finance protocol\\n */\\ninterface IProduct {\\n    event Liquidate(bytes32 dealId);\\n    event RequestTermination(bytes32 dealId, address indexed requestedBy);\\n    event RejectTermination(bytes32 dealId, address indexed rejectedBy);\\n    event EarlyTermination(\\n        bytes32 dealId,\\n        address indexed acceptedBy,\\n        uint256 payment\\n    );\\n    event MarkToMarket(bytes32 dealId, uint256 prevPV, uint256 currPV);\\n\\n    /**\\n     * Triggered to liquidate existing deal of this product type\\n     * @param dealId Deal unique id in bytes32 word.\\n     */\\n    function liquidate(bytes32 dealId) external;\\n\\n    /**\\n     * Triggered to request early termination of this specific deal\\n     * @param dealId Deal unique id in bytes32 word.\\n     */\\n    function requestTermination(bytes32 dealId) external;\\n\\n    /**\\n     * Triggered to reject previously requested early termination of this deal\\n     * @param dealId Deal unique id in bytes32 word.\\n     */\\n    function rejectTermination(bytes32 dealId) external;\\n\\n    /**\\n     * Triggered to accept previously requested early termination of this deal\\n     * @param dealId Deal unique id in bytes32 word.\\n     */\\n    function acceptTermination(bytes32 dealId) external;\\n\\n    /**\\n     * Triggered to update present value of the deal\\n     * @param dealId Deal unique id in bytes32 word.\\n     */\\n    function markToMarket(bytes32 dealId) external returns (bool);\\n\\n    // /**\\n    //  * Returns the state of the deal by `dealId`\\n    //  * @param dealId Deal unique id in bytes32 word.\\n    //  *\\n    //  * @return State identifier\\n    //  */\\n    // function getDealState(bytes32 dealId) external view returns (uint8);\\n\\n    /**\\n     * Returns the main currency of the deal.\\n     * @param dealId Deal unique id in bytes32 word.\\n     *\\n     * @return Currency short identifier.\\n     */\\n    function getDealCurrency(bytes32 dealId) external view returns (bytes32);\\n\\n    /**\\n     * Returns previously saved present value of the deal.\\n     * @param dealId Deal unique id in bytes32 word.\\n     *\\n     * @return Present value previously saved during mark-to-market.\\n     */\\n    function getDealLastPV(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external view returns (uint256, uint256);\\n\\n    /**\\n     * Triggers to recalculate and return current present value of the deal.\\n     * @param dealId Deal unique id in bytes32 word.\\n     *\\n     * @return Present value at the time of execution.\\n     */\\n    function getDealPV(bytes32 dealId) external view returns (uint256);\\n\\n    /**\\n     * Returns settlement status of the deal by `dealId`\\n     * @param dealId Deal unique id in bytes32 word.\\n     *\\n     * @return Settlement bool identifier\\n     */\\n    function getDealSettlementStatus(bytes32 dealId)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * Get the version of the underlying contract.\\n     *\\n     * @return Version number.\\n     */\\n    function getVersion() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xc3cc3591cf950ec247fa500bb6c191e40f209052fb1738a989bfb12077fec837\",\"license\":\"MIT\"},\"contracts/interfaces/IProductWithOneLeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IProduct.sol\\\";\\n\\n/**\\n * @title IProductWithOneLeg is an extention over IProduct interface for\\n * products with one leg of cashflows\\n */\\ninterface IProductWithOneLeg is IProduct {\\n    struct Schedule {\\n        uint256[] payments;\\n        uint256[] amounts;\\n        bool[] isSettled;\\n    }\\n\\n    event Register(\\n        address indexed lender,\\n        address indexed borrower,\\n        bytes32 ccy,\\n        uint256 term,\\n        uint256 notional,\\n        uint256 rate,\\n        bytes32 indexed dealId\\n    );\\n\\n    event Novation(bytes32 indexed dealId, address currLender);\\n\\n    /**\\n     * Triggered to register new deal for this product type\\n     *\\n     * @param maker Order maker\\n     * @param taker orderTaker\\n     * @param side Order side\\n     * @param ccy Settlement currency\\n     * @param term Deal term\\n     * @param notional Notional amount of funds\\n     * @param rate Annual interest rate\\n     * @return dealId bytes32 string.\\n     */\\n    function register(\\n        address maker,\\n        address taker,\\n        uint8 side,\\n        bytes32 ccy,\\n        uint256 term,\\n        uint256 notional,\\n        uint256 rate\\n    ) external returns (bytes32 dealId);\\n\\n    /**\\n     * Triggered to transfer lending obligations from msg.sender ot newOwner\\n     * @param dealId Deal unique id in bytes32 word.\\n     * @param newOwner ETH address of new product lender\\n     */\\n    function novation(bytes32 dealId, address newOwner) external;\\n\\n    /**\\n     * Returns the payment schedule of the deal\\n     * @param dealId Deal unique id in bytes32 word.\\n     *\\n     * @return Payment schedule payment timestamps, payment amounts and settlement statuses\\n     */\\n    function getPaymentSchedule(bytes32 dealId)\\n        external\\n        view\\n        returns (\\n            uint256[] memory,\\n            uint256[] memory,\\n            bool[] memory\\n        );\\n}\\n\",\"keccak256\":\"0x30a55aa06ca0331015fca097fca1d435e3c2b132610d772fd6fa2fa7f7e54e1d\",\"license\":\"MIT\"},\"contracts/interfaces/ITermStructureGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ITermStructureGetter {\\n    function getDfFrac(uint256 _numDays) external view returns (uint256);\\n\\n    function getNumDays(uint256 _numDays) external view returns (uint256);\\n\\n    function getNumPayments(uint256 _numDays, uint8 frequency)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTerm(uint256 _numDays, uint8 frequency)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getTermSchedule(uint256 _numDays, uint8 frequency)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isSupportedTerm(\\n        uint256 _numDays,\\n        bytes4 _product,\\n        bytes32 _ccy\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x533137ceca4f4cbca74c685bc4e6e1a0236994daefea87287281e11136a35cbe\",\"license\":\"MIT\"},\"contracts/libraries/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n\\n    function timestampFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            hour *\\n            SECONDS_PER_HOUR +\\n            minute *\\n            SECONDS_PER_MINUTE +\\n            second;\\n    }\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint256 daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isValidDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isLeapYear(uint256 timestamp)\\n        internal\\n        pure\\n        returns (bool leapYear)\\n    {\\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n\\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n\\n    function getDaysInMonth(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        (uint256 year, uint256 month, ) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n\\n    function _getDaysInMonth(uint256 year, uint256 month)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        if (\\n            month == 1 ||\\n            month == 3 ||\\n            month == 5 ||\\n            month == 7 ||\\n            month == 8 ||\\n            month == 10 ||\\n            month == 12\\n        ) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 dayOfWeek)\\n    {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n\\n    function getMinute(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 minute)\\n    {\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    function getSecond(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 second)\\n    {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        year += _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = ((month - 1) % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        year -= _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        uint256 yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = (yearMonth % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _years)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint256 fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint256 toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n\\n    function diffMonths(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _months)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint256 fromYear, uint256 fromMonth, ) = _daysToDate(\\n            fromTimestamp / SECONDS_PER_DAY\\n        );\\n        (uint256 toYear, uint256 toMonth, ) = _daysToDate(\\n            toTimestamp / SECONDS_PER_DAY\\n        );\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n\\n    function diffDays(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _days)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n\\n    function diffHours(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _hours)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n\\n    function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _minutes)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n\\n    function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _seconds)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x70d42cd72420c6f792ca3f69e51657ab93eb8b948f0b503d0fd26e2c7a05976e\",\"license\":\"MIT\"},\"contracts/libraries/DealId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nlibrary DealId {\\n    /**\\n     * @dev Generates a deal id using a product prefix and deal number\\n     * @param prefix Product type prefix in bytes4\\n     * @param counter Number of deal to be generated\\n     * @return id in bytes32 with prefix on the left and counter on the right side\\n     */\\n    function generate(bytes32 prefix, uint256 counter)\\n        public\\n        pure\\n        returns (bytes32 id)\\n    {\\n        uint224 num = toUint224(counter);\\n        bytes4 r;\\n        bytes32 zero = 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000;\\n        assembly {\\n            r := and(prefix, zero)\\n            id := add(r, num)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns product based prefix from deal id\\n     * @param id Deal unique identification string\\n     * @return prefix in bytes4\\n     */\\n    function getPrefix(bytes32 id) public pure returns (bytes4 prefix) {\\n        assembly {\\n            prefix := shl(0, id)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns converted number from uint256 to uint224\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"NUMBER_OVERFLOW\\\");\\n        return uint224(value);\\n    }\\n}\\n\",\"keccak256\":\"0x21952ac52bc146311f6e0b912c4d4a7a48185c72063e7ab84d11ff6ba3923116\",\"license\":\"MIT\"},\"contracts/libraries/DiscountFactor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary DiscountFactor {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant BP = 10000; // basis point\\n    uint256 internal constant NON_ANNUAL_TERMS = 3;\\n\\n    function determineDF(\\n        uint256 rate,\\n        uint256 term,\\n        uint256[] memory cache,\\n        uint256 dfSum,\\n        uint256 index\\n    ) internal pure returns (uint256 df) {\\n        if (term < 365) {\\n            df = BP.mul(BP).div((BP.add(rate.mul(term).div(360))));\\n        } else if (term == 365) {\\n            df = BP.mul(BP).div((BP.add(rate)));\\n            dfSum = dfSum.add(df);\\n        } else {\\n            uint256 rateSum = (rate.mul(dfSum)).div(BP);\\n            if (rateSum > BP) {\\n                df = 0;\\n            } else {\\n                df = BP.mul(BP.sub(rate.mul(dfSum).div(BP))).div(BP.add(rate));\\n            }\\n            dfSum = dfSum.add(df);\\n        }\\n\\n        cache[index] = df;\\n\\n        return dfSum;\\n    }\\n\\n    function calculateDFs(uint256[] memory rates, uint256[] memory terms)\\n        public\\n        pure\\n        returns (uint256[] memory, uint256[] memory)\\n    {\\n        require(rates.length == terms.length, \\\"INVALID_PARAMS\\\");\\n\\n        (\\n            uint256[] memory bootstrapedRates,\\n            uint256[] memory bootstrapedTerms\\n        ) = bootstrapTerms(rates, terms);\\n\\n        uint256 len = bootstrapedTerms.length;\\n        uint256[] memory dfs = new uint256[](len);\\n        uint256 dfSum;\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            dfSum = determineDF(\\n                bootstrapedRates[i],\\n                bootstrapedTerms[i],\\n                dfs,\\n                dfSum,\\n                i\\n            );\\n        }\\n\\n        return (dfs, bootstrapedTerms);\\n    }\\n\\n    function maxDFs(uint256 maxTerm) internal pure returns (uint256) {\\n        return maxTerm.div(365).add(NON_ANNUAL_TERMS);\\n    }\\n\\n    struct TermBootstrapingLocalVars {\\n        uint256 extendedTerms;\\n        uint256 delta;\\n        uint256 numItems;\\n        uint256 lastKnownRate;\\n        uint256 nextKnownRate;\\n        uint256 nextKnownTerm;\\n        bool upwards;\\n        uint256 deltaRate;\\n        uint256 step;\\n    }\\n\\n    function bootstrapTerms(uint256[] memory rates, uint256[] memory terms)\\n        public\\n        pure\\n        returns (uint256[] memory, uint256[] memory)\\n    {\\n        uint256 len = maxDFs(terms[terms.length - 1]);\\n\\n        uint256[] memory filledRates = new uint256[](len);\\n        uint256[] memory filledTerms = new uint256[](len);\\n        TermBootstrapingLocalVars memory vars;\\n\\n        for (uint256 i = 0; i < terms.length.sub(1); i++) {\\n            if (terms[i] < 365) {\\n                filledRates[i] = rates[i];\\n                filledTerms[i] = terms[i];\\n                continue;\\n            }\\n            vars.delta = terms[i + 1].sub(terms[i]);\\n\\n            if (vars.delta <= 365) {\\n                filledRates[i] = rates[i];\\n                filledTerms[i] = terms[i];\\n                continue;\\n            }\\n\\n            vars.numItems = vars.delta.div(365);\\n            vars.lastKnownRate = rates[i];\\n\\n            if (vars.extendedTerms == 0) {\\n                filledRates[i] = vars.lastKnownRate;\\n                filledTerms[i] = terms[i];\\n            }\\n            vars.nextKnownRate = rates[i + 1];\\n            vars.nextKnownTerm = terms[i + 1];\\n            vars.upwards = vars.nextKnownRate > vars.lastKnownRate\\n                ? true\\n                : false;\\n            vars.deltaRate = vars.upwards\\n                ? vars.nextKnownRate.sub(vars.lastKnownRate)\\n                : vars.lastKnownRate.sub(vars.nextKnownRate);\\n            vars.step = vars.deltaRate.div(vars.numItems);\\n\\n            for (uint256 j = 1; j < vars.numItems; j++) {\\n                vars.extendedTerms = vars.extendedTerms.add(1);\\n\\n                uint256 newIndex = i.add(vars.extendedTerms);\\n                uint256 missedRate = vars.upwards\\n                    ? filledRates[newIndex.sub(1)].add(vars.step)\\n                    : filledRates[newIndex.sub(1)].sub(vars.step);\\n                uint256 missedTerm = terms[i].add(uint256(365).mul(j));\\n\\n                filledRates[newIndex] = missedRate;\\n                filledTerms[newIndex] = missedTerm;\\n\\n                if (j == vars.numItems.sub(1)) {\\n                    uint256 shifterIndex = newIndex.add(1);\\n\\n                    filledRates[shifterIndex] = vars.nextKnownRate;\\n                    filledTerms[shifterIndex] = vars.nextKnownTerm;\\n                }\\n            }\\n        }\\n\\n        return (filledRates, filledTerms);\\n    }\\n\\n    struct DFInterpolationLocalVars {\\n        uint256 timeDelta;\\n        uint256 termSeconds;\\n        uint256 prevTermSeconds;\\n        uint256 left;\\n        uint256 right;\\n        uint256 total;\\n    }\\n\\n    /**\\n     * @dev Triggers to adjust discount factors by interpolating to current loan maturity\\n     * @param discountFactors Discount factors array\\n     * @param terms Array of terms\\n     * @param date Date to calculate discount factors for\\n     *\\n     */\\n    function interpolateDF(\\n        uint256[] memory discountFactors,\\n        uint256[] memory terms,\\n        uint256 date\\n    ) public view returns (uint256) {\\n        DFInterpolationLocalVars memory vars;\\n        vars.timeDelta = date.sub(block.timestamp);\\n\\n        if (vars.timeDelta <= terms[0].mul(86400)) {\\n            vars.termSeconds = terms[0].mul(86400);\\n            vars.left = vars.termSeconds.sub(vars.timeDelta);\\n\\n            return\\n                (BP.mul(vars.left).add(discountFactors[0].mul(vars.timeDelta)))\\n                    .div(vars.termSeconds);\\n        } else {\\n            for (uint256 i = 1; i < terms.length; i++) {\\n                vars.termSeconds = terms[i].mul(86400);\\n                vars.prevTermSeconds = terms[i - 1].mul(86400);\\n\\n                if (\\n                    vars.prevTermSeconds < vars.timeDelta &&\\n                    vars.timeDelta <= vars.termSeconds\\n                ) {\\n                    vars.left = vars.timeDelta.sub(vars.prevTermSeconds);\\n\\n                    if (vars.left == 0) {\\n                        return discountFactors[i]; // gas savings only\\n                    }\\n\\n                    vars.right = vars.termSeconds.sub(vars.timeDelta);\\n                    if (vars.right == 0) {\\n                        return discountFactors[i];\\n                    }\\n\\n                    vars.total = vars.termSeconds.sub(vars.prevTermSeconds);\\n\\n                    return (\\n                        (discountFactors[i - 1].mul(vars.right))\\n                            .add((discountFactors[i].mul(vars.left)))\\n                            .div(vars.total)\\n                    );\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6767e46906ab5eeca1cedda8afbcc4a01658c8e08220bdacd8756fc126b650b9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600260009081556001805460ff1916905560065534801561002457600080fd5b50600580546001600160a01b0319163317905561328e806100466000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80638da5cb5b11610104578063c601153c116100a2578063d83beeea11610071578063d83beeea146103f0578063dbb93d7b14610403578063f0023bb914610416578063fdc6348314610429576101cf565b8063c601153c146103a2578063c673c674146103b5578063c8e50f14146103c8578063d160e842146103d0576101cf565b80639ad9a691116100de5780639ad9a691146103615780639e31afba14610374578063b0c1865114610387578063b4a7bdf91461039a576101cf565b80638da5cb5b146103245780638e5893151461032c5780639458ba4914610341576101cf565b806332757d41116101715780634559c8081161014b5780634559c808146102d857806358866970146102eb5780637477d18b146102fe57806385a96af814610311576101cf565b806332757d411461028257806332942ff6146102a3578063437a43b9146102b6576101cf565b80630a71096e116101ad5780630a71096e146102325780630d8e6e2c14610245578063114cc2ec1461025a5780632121dc751461027a576101cf565b8063026019d8146101d4578063081b768b146101fd578063085b616e14610212575b600080fd5b6101e76101e2366004612aee565b61043c565b6040516101f49190612e37565b60405180910390f35b61021061020b366004612952565b610454565b005b610225610220366004612b58565b61048d565b6040516101f49190612bf5565b610210610240366004612aee565b6104b3565b61024d6104bf565b6040516101f4919061321c565b61026d6102683660046129aa565b6104c4565b6040516101f49190612e42565b6101e76107e4565b61029561029036600461296d565b6107f4565b6040516101f4929190612e4b565b6102106102b1366004612952565b61093e565b6102c96102c4366004612aee565b610977565b6040516101f493929190612d97565b6102106102e6366004612952565b610a2d565b6102106102f9366004612952565b610a66565b61021061030c366004612aee565b610a9f565b61021061031f366004612ab6565b610e2a565b610225610e5f565b610334610e6e565b6040516101f4919061323c565b61035461034f366004612aee565b610e77565b6040516101f4919061317b565b6101e761036f366004612aee565b610f0c565b610210610382366004612b79565b610f44565b61026d610395366004612aee565b610fd3565b61026d610fe9565b61026d6103b0366004612aee565b610fef565b61026d6103c3366004612aee565b611284565b61026d6114f5565b6103e36103de366004612aee565b6114fb565b6040516101f491906131fc565b6102106103fe366004612aee565b611536565b610210610411366004612b1e565b61168e565b610210610424366004612952565b611974565b610210610437366004612aee565b6119ad565b60008181526004602052604090205460ff165b919050565b6005546001600160a01b0316331461046b57600080fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b600c6020908152600092835260408084209091529082529020546001600160a01b031681565b6104bc81611b56565b50565b600190565b6000848152600c60209081526040808320868452909152812054859085906001600160a01b031633146104f657600080fd5b886001600160a01b03168a6001600160a01b031614156105315760405162461bcd60e51b815260040161052890612f37565b60405180910390fd5b600080808a60ff16600181111561054457fe5b600181111561054f57fe5b141561055f57508a905089610587565b60018a60ff16600181111561057057fe5b600181111561057b57fe5b141561058757508990508a5b6007546001600160a01b0316638cbf5e78838b6105b26127106105ac8d6107d0611c8b565b90611cce565b6040518463ffffffff1660e01b81526004016105d093929190612d76565b600060405180830381600087803b1580156105ea57600080fd5b505af11580156105fe573d6000803e3d6000fd5b50506007546001600160a01b0316915063d810703b905083838c61062a6127106105ac8e6107d0611c8b565b8c60006040518763ffffffff1660e01b815260040161064e96959493929190612ca8565b600060405180830381600087803b15801561066857600080fd5b505af115801561067c573d6000803e3d6000fd5b505050506106886127ee565b6001600160a01b03808416825282166020820152604081018a9052606081018990526080810188905260a081018790524260c08201526106d56106ce8a62015180611c8b565b4290611d00565b60e08201526106e2611d25565b600081815260026020818152604092839020855181546001600160a01b03199081166001600160a01b03928316178355928701516001830180549094169116179091559184015190820155606083015160038201556080830151600482015560a0830151600582015560c0830151600682015560e08301516007820155610100830151600882015561012083015160099091015595506107828682611dc7565b85826001600160a01b0316846001600160a01b03167f7217bf264b75280d56b476788a09fbc2a90690c96172cb5a34f6ed6abe7a67f48d8d8d8d6040516107cc9493929190612e6f565b60405180910390a45050505050979650505050505050565b600554600160a01b900460ff1681565b6000806107ff6127ee565b5060008381526002602081815260409283902083516101408101855281546001600160a01b0390811682526001830154169281019290925291820154928101929092526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e0830152600881015461010083018190526009909101546101208301526108a15761089a84611284565b6101008201525b80516001600160a01b0387811691161480156108d2575080602001516001600160a01b0316856001600160a01b0316145b156108e7576101000151600092509050610936565b80602001516001600160a01b0316866001600160a01b0316148015610918575080516001600160a01b038681169116145b1561092d576101000151915060009050610936565b60008092509250505b935093915050565b6005546001600160a01b0316331461095557600080fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b60608060606109846127ee565b5060008481526002602081815260409283902083516101408101855281546001600160a01b0390811682526001808401549091169382019390935292810154938301939093526003830154606083015260048301546080830152600583015460a0830152600683015460c0830152600783015460e0830152600883015461010083015260099092015461012082015290610a1f908290611ebf565b935093509350509193909250565b6005546001600160a01b03163314610a4457600080fd5b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314610a7d57600080fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b600081815260036020526040902080546001600160a01b0316610ad45760405162461bcd60e51b8152600401610528906130f1565b610adc6127ee565b5060008281526002602081815260409283902083516101408101855281546001600160a01b03908116808352600184015482169483019490945293820154948101949094526003810154606085015260048101546080850152600581015460a0850152600681015460c0850152600781015460e085015260088101546101008501526009015461012084015283549091161415610bad5780602001516001600160a01b0316336001600160a01b031614610ba85760405162461bcd60e51b815260040161052890612f09565b610bd6565b80516001600160a01b03163314610bd65760405162461bcd60e51b815260040161052890613096565b610bdf83612346565b610bfb5760405162461bcd60e51b815260040161052890612ffc565b60008381526004602052604090205460ff1615610dd757606080610c20836001611ebf565b925050915060005b8151811015610c5957818181518110610c3d57fe5b6020908102919091010151610c5157610c59565b600101610c28565b600081610c7557610c6e8560c0015142612453565b9050610c98565b610c95846001840381518110610c8757fe5b602002602001015142612453565b90505b6000610cbf618e946105ac670de0b6b3a76400008960a00151611c8b90919063ffffffff16565b90506000610ccd8284611c8b565b90506000610cf568056bc75e2d631000006105ac848b60800151611c8b90919063ffffffff16565b90506000610d1189610100015183611d0090919063ffffffff16565b60075460208b01518b516040808e0151905163707a14eb60e11b81529495506001600160a01b039093169363e0f429d693610d559392918790600190600401612d45565b600060405180830381600087803b158015610d6f57600080fd5b505af1158015610d83573d6000803e3d6000fd5b50505050336001600160a01b03167f5afb4b6e68d04d346685fcbe7b749831901acca769aa678ee2d28c59260462628c83604051610dc2929190612e4b565b60405180910390a25050505050505050610e1c565b336001600160a01b03167f5afb4b6e68d04d346685fcbe7b749831901acca769aa678ee2d28c5926046262846000604051610e13929190612e4b565b60405180910390a25b610e2583611b56565b505050565b6005546001600160a01b03163314610e4157600080fd5b60058054911515600160a01b0260ff60a01b19909216919091179055565b6005546001600160a01b031681565b60015460ff1681565b610e7f6127ee565b5060009081526002602081815260409283902083516101408101855281546001600160a01b0390811682526001830154169281019290925291820154928101929092526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e083015260088101546101008301526009015461012082015290565b6000610f178261246e565b610f2082612346565b610f3c5760405162461bcd60e51b815260040161052890612fd2565b506001919050565b6005546001600160a01b03163314610f5b57600080fd5b6000838152600c602090815260408083208584529091529020546001600160a01b031615610f9b5760405162461bcd60e51b815260040161052890613020565b6000928352600c60209081526040808520938552929052912080546001600160a01b0319166001600160a01b03909216919091179055565b6000908152600260208190526040909120015490565b60005481565b6000610ff96127ee565b50600082815260026020818152604080842081516101408101835281546001600160a01b03908116825260018084015482169583019590955294820154818401526003820154606082018190526004808401546080840152600584015460a0840152600684015460c0840152600784015460e08401526008840154610100840152600990930154610120830152600a5494549351630849d7a560e41b8152919695949094169363849d7a50936110b793919260ff909116910161322b565b60206040518083038186803b1580156110cf57600080fd5b505afa1580156110e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111079190612b06565b600a5460608481015160015460405163b1547add60e01b815294955091936001600160a01b039093169263b1547add9261114a929160ff9091169060040161322b565b60006040518083038186803b15801561116257600080fd5b505afa158015611176573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261119e9190810190612a1a565b9050815b801561127b5760006111ce8560c001518460018503815181106111c157fe5b60200260200101516126f0565b600954865160208801516040808a015190516375dc0d2160e01b81529495506000946001600160a01b03909416936375dc0d219361121493909290918890600401612d1c565b60206040518083038186803b15801561122c57600080fd5b505afa158015611240573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112649190612ad2565b90508015611270578196505b5050600019016111a2565b50505050919050565b600061128e6127ee565b50600082815260026020818152604080842081516101408101835281546001600160a01b039081168252600183015416818501529381015484830152600381015460608501526004808201546080860152600582015460a0860152600682015460c0860152600782015460e086015260088201546101008601526009909101546101208501528685529091529091205460ff166113305760800151905061044f565b6008546040808301519051630145640160e31b815260609283926001600160a01b0390911691630a2b20089161136891600401612e42565b60006040518083038186803b15801561138057600080fd5b505afa158015611394573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113bc9190810190612a55565b915091506060806113ce856000611ebf565b509150915060005b82518110156114dd57428382815181106113ec57fe5b602002602001015110156113ff576114d5565b6000736B92F20547f8318A5f5ee2dF3947e3912f760c1B63954eab79878787868151811061142957fe5b60200260200101516040518463ffffffff1660e01b815260040161144f93929190612e01565b60206040518083038186803b15801561146757600080fd5b505af415801561147b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149f9190612b06565b90506114d16114ca828585815181106114b457fe5b6020026020010151611c8b90919063ffffffff16565b8990611d00565b9750505b6001016113d6565b506114ea86612710611cce565b979650505050505050565b60065481565b611503612859565b50600090815260036020908152604091829020825180840190935280546001600160a01b03168352600101549082015290565b600081815260036020526040902061154c6127ee565b5060008281526002602081815260409283902083516101408101855281546001600160a01b0390811680835260018401549091169382019390935292810154938301939093526003830154606083015260048301546080830152600583015460a0830152600683015460c0830152600783015460e08301526008830154610100830152600990920154610120820152903314806115fe575080602001516001600160a01b0316336001600160a01b0316145b61161a5760405162461bcd60e51b815260040161052890612ea4565b61162383612346565b61163f5760405162461bcd60e51b815260040161052890612ffc565b81546001600160a01b0319163390811783556040517f959b4fa9d58e01ba2b3065a3ef760cf151bac99ea42a52616573aa6a659cb58f90611681908690612e42565b60405180910390a2505050565b600082815260046020526040902054829060ff166116be5760405162461bcd60e51b81526004016105289061314e565b6000838152600260205260409020600554600160a01b900460ff166116f55760405162461bcd60e51b8152600401610528906130c2565b80546001600160a01b031633811461171f5760405162461bcd60e51b815260040161052890613121565b604080516101408101825283546001600160a01b03908116825260018501541660208201526002840154918101919091526003830154606082015260048301546080820152600583015460a0820152600683015460c0820152600783015460e0820152600883015461010082015260098301546101208201526117a3908690612703565b60075460018381015460028501546008860154604051631ea9242160e21b81526001600160a01b0395861695637aa49084956117ed95899592169391926000929190600401612ca8565b600060405180830381600087803b15801561180757600080fd5b505af115801561181b573d6000803e3d6000fd5b505083546001600160a01b0319166001600160a01b038781169190911780865560408051610140810182529183168252600187015490921660208201526002860154918101919091526003850154606082015260048501546080820152600585015460a0820152600685015460c0820152600785015460e0820152600885015461010082015260098501546101208201526118b99250879150611dc7565b6007546001838101546002850154600886015460405163d810703b60e01b81526001600160a01b039586169563d810703b95611903958c9592169391926000929190600401612ca8565b600060405180830381600087803b15801561191d57600080fd5b505af1158015611931573d6000803e3d6000fd5b50505050847fa4e3c75bb889b8b7fa7d6d22ecf714eff69c61c6b0dd03b9e0348829031944fa856040516119659190612bf5565b60405180910390a25050505050565b6005546001600160a01b0316331461198b57600080fd5b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6119b5612859565b50600081815260036020908152604091829020825180840190935280546001600160a01b031680845260019091015491830191909152611a075760405162461bcd60e51b8152600401610528906130f1565b611a0f6127ee565b5060008281526002602081815260409283902083516101408101855281546001600160a01b0390811680835260018401549091169382019390935292810154938301939093526003830154606083015260048301546080830152600583015460a0830152600683015460c0830152600783015460e0830152600883015461010083015260099092015461012082015290331480611ac1575080602001516001600160a01b0316336001600160a01b0316145b611add5760405162461bcd60e51b815260040161052890612fa5565b611ae683612346565b611b025760405162461bcd60e51b815260040161052890612ffc565b60008381526003602052604080822080546001600160a01b0319168155600101919091555133907fe17a17f350d93a0687a4ce370644e804f5b5c1286121fab38b504b4428e90f2090611681908690612e42565b611b5e6127ee565b5060008181526002602081815260409283902083516101408101855281546001600160a01b0390811682526001830154169281019290925291820154928101929092526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e0830152600881015461010083015260090154610120820152611bf28282612703565b7f49402ac80e80185fec1d9f8b8360275213386717f39afd886549219d1f0c17d382604051611c219190612e42565b60405180910390a1506000908152600260208190526040822080546001600160a01b03199081168255600182018054909116905590810182905560038101829055600481018290556005810182905560068101829055600781018290556008810182905560090155565b600082611c9a57506000611cc8565b82820282848281611ca757fe5b0414611cc55760405162461bcd60e51b815260040161052890613055565b90505b92915050565b6000808211611cef5760405162461bcd60e51b815260040161052890612f6e565b818381611cf857fe5b049392505050565b600082820183811015611cc55760405162461bcd60e51b815260040161052890612ed2565b6006805460010190819055604051631a59b15b60e11b81526000917384BfdF9e085Ac0c3Ff9BCBC699Ce6AFAD49a3597916334b362b691611d72916321aaa47b60e01b9190600401612e8a565b60206040518083038186803b158015611d8a57600080fd5b505af4158015611d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc29190612b06565b905090565b606080611dd5836000611ebf565b50915091506060825167ffffffffffffffff81118015611df457600080fd5b50604051908082528060200260200182016040528015611e1e578160200160208202803683370190505b509050836080015181600081518110611e3357fe5b602090810291909101810191909152600954855191860151604080880151905163393b6e1760e01b81526001600160a01b039093169363393b6e1793611e86939192908b908a9089908b90600401612c09565b600060405180830381600087803b158015611ea057600080fd5b505af1158015611eb4573d6000803e3d6000fd5b505050505050505050565b6060806060611ecc612870565b600a546060870151600154604051630849d7a560e41b81526001600160a01b039093169263849d7a5092611f0a92909160ff9091169060040161322b565b60206040518083038186803b158015611f2257600080fd5b505afa158015611f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5a9190612b06565b8152600a54606087015160015460405163b1547add60e01b81526001600160a01b039093169263b1547add92611f9a92909160ff9091169060040161322b565b60006040518083038186803b158015611fb257600080fd5b505afa158015611fc6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611fee9190810190612a1a565b6020820152600a5460608701516040516302ccf01560e01b81526001600160a01b03909216916302ccf0159161202691600401612e42565b60206040518083038186803b15801561203e57600080fd5b505afa158015612052573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120769190612b06565b6040820181905260a087015160808801516120a892612710926105ac928492849290916120a291611c8b565b90611c8b565b606082015280516000906120bd906001611d00565b905060608167ffffffffffffffff811180156120d857600080fd5b50604051908082528060200260200182016040528015612102578160200160208202803683370190505b50905060608267ffffffffffffffff8111801561211e57600080fd5b50604051908082528060200260200182016040528015612148578160200160208202803683370190505b50905060608367ffffffffffffffff8111801561216457600080fd5b5060405190808252806020026020018201604052801561218e578160200160208202803683370190505b50905060015b855181116123085760006121b98c60c00151886020015160018503815181106111c157fe5b9050808583815181106121c857fe5b6020908102919091010152865182141561220c57606087015160808d01516121ef91611d00565b8483815181106121fb57fe5b60200260200101818152505061222a565b866060015184838151811061221d57fe5b6020026020010181815250505b8a156122ff57600960009054906101000a90046001600160a01b03166001600160a01b03166375dc0d218d600001518e602001518f604001518b608001516040518563ffffffff1660e01b81526004016122879493929190612d1c565b60206040518083038186803b15801561229f57600080fd5b505afa1580156122b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d79190612ad2565b151560a0880181905283518490849081106122ee57fe5b911515602092830291909101909101525b50600101612194565b50600061231a8b60c0015160026126f0565b9050808460008151811061232a57fe5b6020908102919091010152509196509450925050509250925092565b60008061235283611284565b9050801561244a57600083815260026020908152604080832060049092529091205460ff166123865760019250505061044f565b6008810180549083905560075482546001840154600285015460405163adad5fd160e01b81526001600160a01b039485169463adad5fd1946123da9490821693911691600090889082908c90600401612cde565b600060405180830381600087803b1580156123f457600080fd5b505af1158015612408573d6000803e3d6000fd5b505050507f7f1e4193cb11b4ae9cf4ae386d650483d5d04df3671d0823ce1612f2bb8f976285828560405161243f93929190612e59565b60405180910390a150505b50600192915050565b60008183111561246257600080fd5b62015180838303611cf8565b60008181526004602052604090205460ff166104bc5761248c6127ee565b50600081815260026020818152604080842081516101408101835281546001600160a01b0390811682526001830154169381019390935280840154918301919091526003810154606083015260048101546080830152600581015460a0830152600681015460c08301819052600782015460e0840152600882015461010084015260099091015461012083015290929161252691906126f0565b6009548351602085015160408087015190516375dc0d2160e01b81529495506000946001600160a01b03909416936375dc0d219361256c93909290918890600401612d1c565b60206040518083038186803b15801561258457600080fd5b505afa158015612598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125bc9190612ad2565b905080156126ea57600084815260046020908152604091829020805460ff191660011790556007548551918601519286015160808701516001600160a01b0390921693637aa49084939290919061261d90612710906105ac906107d0611c8b565b6000806040518763ffffffff1660e01b815260040161264196959493929190612ca8565b600060405180830381600087803b15801561265b57600080fd5b505af115801561266f573d6000803e3d6000fd5b50506007548551602087015160408089015160808a01519151637d1f2ded60e01b81526001600160a01b039095169650637d1f2ded95506126b7949091600091600401612c77565b600060405180830381600087803b1580156126d157600080fd5b505af11580156126e5573d6000803e3d6000fd5b505050505b50505050565b60006126fc83836127d9565b9392505050565b606080612711836000611ebf565b50915091506060825167ffffffffffffffff8111801561273057600080fd5b5060405190808252806020026020018201604052801561275a578160200160208202803683370190505b5060008681526004602052604090205490915060ff166127935783608001518160008151811061278657fe5b6020026020010181815250505b60095484516020860151604080880151905163b73cdacd60e01b81526001600160a01b039094169363b73cdacd93611e8693909290918b908a9089908b90600401612c09565b620151808102820182811015611cc857600080fd5b60405180610140016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160008019168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600080191681525090565b604080518082019091526000808252602082015290565b6040518060c0016040528060008152602001606081526020016000815260200160008152602001600081526020016000151581525090565b80356001600160a01b0381168114611cc857600080fd5b600082601f8301126128cf578081fd5b815167ffffffffffffffff808211156128e6578283fd5b602080830260405182828201018181108582111715612903578687fd5b60405284815294508185019250858201818701830188101561292457600080fd5b600091505b84821015612947578051845292820192600191909101908201612929565b505050505092915050565b600060208284031215612963578081fd5b6126fc83836128a8565b600080600060608486031215612981578182fd5b61298b85856128a8565b925061299a85602086016128a8565b9150604084013590509250925092565b600080600080600080600060e0888a0312156129c4578283fd5b6129ce89896128a8565b96506129dd8960208a016128a8565b9550604088013560ff811681146129f2578384fd5b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b600060208284031215612a2b578081fd5b815167ffffffffffffffff811115612a41578182fd5b612a4d848285016128bf565b949350505050565b60008060408385031215612a67578182fd5b825167ffffffffffffffff80821115612a7e578384fd5b612a8a868387016128bf565b93506020850151915080821115612a9f578283fd5b50612aac858286016128bf565b9150509250929050565b600060208284031215612ac7578081fd5b8135611cc58161324a565b600060208284031215612ae3578081fd5b8151611cc58161324a565b600060208284031215612aff578081fd5b5035919050565b600060208284031215612b17578081fd5b5051919050565b60008060408385031215612b30578182fd5b8235915060208301356001600160a01b0381168114612b4d578182fd5b809150509250929050565b60008060408385031215612b6a578182fd5b50508035926020909101359150565b600080600060608486031215612b8d578283fd5b8335925060208401359150612ba585604086016128a8565b90509250925092565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015612bea57815187529582019590820190600101612bce565b509495945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b03888116825287166020820152604081018690526060810185905260e060808201819052600090612c4390830186612bbb565b82810360a0840152612c558186612bbb565b905082810360c0840152612c698185612bbb565b9a9950505050505050505050565b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b6001600160a01b03968716815294909516602085015260408401929092526060830152608082015290151560a082015260c00190565b6001600160a01b03978816815295909616602086015260408501939093526060840191909152608083015260a082015260c081019190915260e00190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03958616815293909416602084015260408301919091526060820152901515608082015260a00190565b6001600160a01b039390931683526020830191909152604082015260600190565b600060608252612daa6060830186612bbb565b602083820381850152612dbd8287612bbb565b84810360408601528551808252828701935090820190845b81811015612df3578451151583529383019391830191600101612dd5565b509098975050505050505050565b600060608252612e146060830186612bbb565b8281036020840152612e268186612bbb565b915050826040830152949350505050565b901515815260200190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b6001600160e01b0319929092168252602082015260400190565b6020808252601490820152731c185c9d1a595cc81b5d5cdd081c995c5d595cdd60621b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b602080825260149082015273189bdc9c9bddd95c881b5d5cdd081858d8d95c1d60621b604082015260600190565b6020808252601f908201527f53616d6520706572736f6e206465616c206973206e6f7420616c6c6f77656400604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252601390820152721c185c9d1a595cc81b5d5cdd081c995a9958dd606a1b604082015260600190565b60208082526010908201526f3330b4b632b2103ab83230ba3290282b60811b604082015260600190565b6020808252600a90820152696661696c6564204d744d60b01b604082015260600190565b6020808252818101527f436f756c646e27742072657772697465206578697374696e67206d61726b6574604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601290820152711b195b99195c881b5d5cdd081858d8d95c1d60721b604082015260600190565b6020808252601590820152741d1c985b9cd9995c9cc81b9bdd08185b1b1bddd959605a1b604082015260600190565b6020808252601690820152751b9bc81d195c9b5a5b985d1a5bdb881c995c5d595cdd60521b604082015260600190565b6020808252601390820152723632b73232b91036bab9ba103a3930b9b332b960691b604082015260600190565b6020808252601390820152726c6f616e206973206e6f7420776f726b696e6760681b604082015260600190565b60006101408201905061318f828451612bae565b60208301516131a16020840182612bae565b5060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b81516001600160a01b031681526020918201519181019190915260400190565b61ffff91909116815260200190565b91825260ff16602082015260400190565b60ff91909116815260200190565b80151581146104bc57600080fdfea2646970667358221220218c806a8da84eb01995ac629413d2a6e1c9693f62b6b268cfee4a0a3f2590ea64736f6c634300060c0033",
  "deployedBytecode": "$f506ca7a99b3e1b46d3b28bedafd5dc4fc$__63954eab79878787868151811061142957fe5b60200260200101516040518463ffffffff1660e01b815260040161144f93929190612e01565b60206040518083038186803b15801561146757600080fd5b505af415801561147b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149f9190612b06565b90506114d16114ca828585815181106114b457fe5b6020026020010151611c8b90919063ffffffff16565b8990611d00565b9750505b6001016113d6565b506114ea86612710611cce565b979650505050505050565b60065481565b611503612859565b50600090815260036020908152604091829020825180840190935280546001600160a01b03168352600101549082015290565b600081815260036020526040902061154c6127ee565b5060008281526002602081815260409283902083516101408101855281546001600160a01b0390811680835260018401549091169382019390935292810154938301939093526003830154606083015260048301546080830152600583015460a0830152600683015460c0830152600783015460e08301526008830154610100830152600990920154610120820152903314806115fe575080602001516001600160a01b0316336001600160a01b0316145b61161a5760405162461bcd60e51b815260040161052890612ea4565b61162383612346565b61163f5760405162461bcd60e51b815260040161052890612ffc565b81546001600160a01b0319163390811783556040517f959b4fa9d58e01ba2b3065a3ef760cf151bac99ea42a52616573aa6a659cb58f90611681908690612e42565b60405180910390a2505050565b600082815260046020526040902054829060ff166116be5760405162461bcd60e51b81526004016105289061314e565b6000838152600260205260409020600554600160a01b900460ff166116f55760405162461bcd60e51b8152600401610528906130c2565b80546001600160a01b031633811461171f5760405162461bcd60e51b815260040161052890613121565b604080516101408101825283546001600160a01b03908116825260018501541660208201526002840154918101919091526003830154606082015260048301546080820152600583015460a0820152600683015460c0820152600783015460e0820152600883015461010082015260098301546101208201526117a3908690612703565b60075460018381015460028501546008860154604051631ea9242160e21b81526001600160a01b0395861695637aa49084956117ed95899592169391926000929190600401612ca8565b600060405180830381600087803b15801561180757600080fd5b505af115801561181b573d6000803e3d6000fd5b505083546001600160a01b0319166001600160a01b038781169190911780865560408051610140810182529183168252600187015490921660208201526002860154918101919091526003850154606082015260048501546080820152600585015460a0820152600685015460c0820152600785015460e0820152600885015461010082015260098501546101208201526118b99250879150611dc7565b6007546001838101546002850154600886015460405163d810703b60e01b81526001600160a01b039586169563d810703b95611903958c9592169391926000929190600401612ca8565b600060405180830381600087803b15801561191d57600080fd5b505af1158015611931573d6000803e3d6000fd5b50505050847fa4e3c75bb889b8b7fa7d6d22ecf714eff69c61c6b0dd03b9e0348829031944fa856040516119659190612bf5565b60405180910390a25050505050565b6005546001600160a01b0316331461198b57600080fd5b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6119b5612859565b50600081815260036020908152604091829020825180840190935280546001600160a01b031680845260019091015491830191909152611a075760405162461bcd60e51b8152600401610528906130f1565b611a0f6127ee565b5060008281526002602081815260409283902083516101408101855281546001600160a01b0390811680835260018401549091169382019390935292810154938301939093526003830154606083015260048301546080830152600583015460a0830152600683015460c0830152600783015460e0830152600883015461010083015260099092015461012082015290331480611ac1575080602001516001600160a01b0316336001600160a01b0316145b611add5760405162461bcd60e51b815260040161052890612fa5565b611ae683612346565b611b025760405162461bcd60e51b815260040161052890612ffc565b60008381526003602052604080822080546001600160a01b0319168155600101919091555133907fe17a17f350d93a0687a4ce370644e804f5b5c1286121fab38b504b4428e90f2090611681908690612e42565b611b5e6127ee565b5060008181526002602081815260409283902083516101408101855281546001600160a01b0390811682526001830154169281019290925291820154928101929092526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e0830152600881015461010083015260090154610120820152611bf28282612703565b7f49402ac80e80185fec1d9f8b8360275213386717f39afd886549219d1f0c17d382604051611c219190612e42565b60405180910390a1506000908152600260208190526040822080546001600160a01b03199081168255600182018054909116905590810182905560038101829055600481018290556005810182905560068101829055600781018290556008810182905560090155565b600082611c9a57506000611cc8565b82820282848281611ca757fe5b0414611cc55760405162461bcd60e51b815260040161052890613055565b90505b92915050565b6000808211611cef5760405162461bcd60e51b815260040161052890612f6e565b818381611cf857fe5b049392505050565b600082820183811015611cc55760405162461bcd60e51b815260040161052890612ed2565b6006805460010190819055604051631a59b15b60e11b815260009173__$840828ea7a247221c7100f4d3622b584a5$__916334b362b691611d72916321aaa47b60e01b9190600401612e8a565b60206040518083038186803b158015611d8a57600080fd5b505af4158015611d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc29190612b06565b905090565b606080611dd5836000611ebf565b50915091506060825167ffffffffffffffff81118015611df457600080fd5b50604051908082528060200260200182016040528015611e1e578160200160208202803683370190505b509050836080015181600081518110611e3357fe5b602090810291909101810191909152600954855191860151604080880151905163393b6e1760e01b81526001600160a01b039093169363393b6e1793611e86939192908b908a9089908b90600401612c09565b600060405180830381600087803b158015611ea057600080fd5b505af1158015611eb4573d6000803e3d6000fd5b505050505050505050565b6060806060611ecc612870565b600a546060870151600154604051630849d7a560e41b81526001600160a01b039093169263849d7a5092611f0a92909160ff9091169060040161322b565b60206040518083038186803b158015611f2257600080fd5b505afa158015611f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5a9190612b06565b8152600a54606087015160015460405163b1547add60e01b81526001600160a01b039093169263b1547add92611f9a92909160ff9091169060040161322b565b60006040518083038186803b158015611fb257600080fd5b505afa158015611fc6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611fee9190810190612a1a565b6020820152600a5460608701516040516302ccf01560e01b81526001600160a01b03909216916302ccf0159161202691600401612e42565b60206040518083038186803b15801561203e57600080fd5b505afa158015612052573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120769190612b06565b6040820181905260a087015160808801516120a892612710926105ac928492849290916120a291611c8b565b90611c8b565b606082015280516000906120bd906001611d00565b905060608167ffffffffffffffff811180156120d857600080fd5b50604051908082528060200260200182016040528015612102578160200160208202803683370190505b50905060608267ffffffffffffffff8111801561211e57600080fd5b50604051908082528060200260200182016040528015612148578160200160208202803683370190505b50905060608367ffffffffffffffff8111801561216457600080fd5b5060405190808252806020026020018201604052801561218e578160200160208202803683370190505b50905060015b855181116123085760006121b98c60c00151886020015160018503815181106111c157fe5b9050808583815181106121c857fe5b6020908102919091010152865182141561220c57606087015160808d01516121ef91611d00565b8483815181106121fb57fe5b60200260200101818152505061222a565b866060015184838151811061221d57fe5b6020026020010181815250505b8a156122ff57600960009054906101000a90046001600160a01b03166001600160a01b03166375dc0d218d600001518e602001518f604001518b608001516040518563ffffffff1660e01b81526004016122879493929190612d1c565b60206040518083038186803b15801561229f57600080fd5b505afa1580156122b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d79190612ad2565b151560a0880181905283518490849081106122ee57fe5b911515602092830291909101909101525b50600101612194565b50600061231a8b60c0015160026126f0565b9050808460008151811061232a57fe5b6020908102919091010152509196509450925050509250925092565b60008061235283611284565b9050801561244a57600083815260026020908152604080832060049092529091205460ff166123865760019250505061044f565b6008810180549083905560075482546001840154600285015460405163adad5fd160e01b81526001600160a01b039485169463adad5fd1946123da9490821693911691600090889082908c90600401612cde565b600060405180830381600087803b1580156123f457600080fd5b505af1158015612408573d6000803e3d6000fd5b505050507f7f1e4193cb11b4ae9cf4ae386d650483d5d04df3671d0823ce1612f2bb8f976285828560405161243f93929190612e59565b60405180910390a150505b50600192915050565b60008183111561246257600080fd5b62015180838303611cf8565b60008181526004602052604090205460ff166104bc5761248c6127ee565b50600081815260026020818152604080842081516101408101835281546001600160a01b0390811682526001830154169381019390935280840154918301919091526003810154606083015260048101546080830152600581015460a0830152600681015460c08301819052600782015460e0840152600882015461010084015260099091015461012083015290929161252691906126f0565b6009548351602085015160408087015190516375dc0d2160e01b81529495506000946001600160a01b03909416936375dc0d219361256c93909290918890600401612d1c565b60206040518083038186803b15801561258457600080fd5b505afa158015612598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125bc9190612ad2565b905080156126ea57600084815260046020908152604091829020805460ff191660011790556007548551918601519286015160808701516001600160a01b0390921693637aa49084939290919061261d90612710906105ac906107d0611c8b565b6000806040518763ffffffff1660e01b815260040161264196959493929190612ca8565b600060405180830381600087803b15801561265b57600080fd5b505af115801561266f573d6000803e3d6000fd5b50506007548551602087015160408089015160808a01519151637d1f2ded60e01b81526001600160a01b039095169650637d1f2ded95506126b7949091600091600401612c77565b600060405180830381600087803b1580156126d157600080fd5b505af11580156126e5573d6000803e3d6000fd5b505050505b50505050565b60006126fc83836127d9565b9392505050565b606080612711836000611ebf565b50915091506060825167ffffffffffffffff8111801561273057600080fd5b5060405190808252806020026020018201604052801561275a578160200160208202803683370190505b5060008681526004602052604090205490915060ff166127935783608001518160008151811061278657fe5b6020026020010181815250505b60095484516020860151604080880151905163b73cdacd60e01b81526001600160a01b039094169363b73cdacd93611e8693909290918b908a9089908b90600401612c09565b620151808102820182811015611cc857600080fd5b60405180610140016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160008019168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600080191681525090565b604080518082019091526000808252602082015290565b6040518060c0016040528060008152602001606081526020016000815260200160008152602001600081526020016000151581525090565b80356001600160a01b0381168114611cc857600080fd5b600082601f8301126128cf578081fd5b815167ffffffffffffffff808211156128e6578283fd5b602080830260405182828201018181108582111715612903578687fd5b60405284815294508185019250858201818701830188101561292457600080fd5b600091505b84821015612947578051845292820192600191909101908201612929565b505050505092915050565b600060208284031215612963578081fd5b6126fc83836128a8565b600080600060608486031215612981578182fd5b61298b85856128a8565b925061299a85602086016128a8565b9150604084013590509250925092565b600080600080600080600060e0888a0312156129c4578283fd5b6129ce89896128a8565b96506129dd8960208a016128a8565b9550604088013560ff811681146129f2578384fd5b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b600060208284031215612a2b578081fd5b815167ffffffffffffffff811115612a41578182fd5b612a4d848285016128bf565b949350505050565b60008060408385031215612a67578182fd5b825167ffffffffffffffff80821115612a7e578384fd5b612a8a868387016128bf565b93506020850151915080821115612a9f578283fd5b50612aac858286016128bf565b9150509250929050565b600060208284031215612ac7578081fd5b8135611cc58161324a565b600060208284031215612ae3578081fd5b8151611cc58161324a565b600060208284031215612aff578081fd5b5035919050565b600060208284031215612b17578081fd5b5051919050565b60008060408385031215612b30578182fd5b8235915060208301356001600160a01b0381168114612b4d578182fd5b809150509250929050565b60008060408385031215612b6a578182fd5b50508035926020909101359150565b600080600060608486031215612b8d578283fd5b8335925060208401359150612ba585604086016128a8565b90509250925092565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015612bea57815187529582019590820190600101612bce565b509495945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b03888116825287166020820152604081018690526060810185905260e060808201819052600090612c4390830186612bbb565b82810360a0840152612c558186612bbb565b905082810360c0840152612c698185612bbb565b9a9950505050505050505050565b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b6001600160a01b03968716815294909516602085015260408401929092526060830152608082015290151560a082015260c00190565b6001600160a01b03978816815295909616602086015260408501939093526060840191909152608083015260a082015260c081019190915260e00190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03958616815293909416602084015260408301919091526060820152901515608082015260a00190565b6001600160a01b039390931683526020830191909152604082015260600190565b600060608252612daa6060830186612bbb565b602083820381850152612dbd8287612bbb565b84810360408601528551808252828701935090820190845b81811015612df3578451151583529383019391830191600101612dd5565b509098975050505050505050565b600060608252612e146060830186612bbb565b8281036020840152612e268186612bbb565b915050826040830152949350505050565b901515815260200190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b6001600160e01b0319929092168252602082015260400190565b6020808252601490820152731c185c9d1a595cc81b5d5cdd081c995c5d595cdd60621b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b602080825260149082015273189bdc9c9bddd95c881b5d5cdd081858d8d95c1d60621b604082015260600190565b6020808252601f908201527f53616d6520706572736f6e206465616c206973206e6f7420616c6c6f77656400604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252601390820152721c185c9d1a595cc81b5d5cdd081c995a9958dd606a1b604082015260600190565b60208082526010908201526f3330b4b632b2103ab83230ba3290282b60811b604082015260600190565b6020808252600a90820152696661696c6564204d744d60b01b604082015260600190565b6020808252818101527f436f756c646e27742072657772697465206578697374696e67206d61726b6574604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601290820152711b195b99195c881b5d5cdd081858d8d95c1d60721b604082015260600190565b6020808252601590820152741d1c985b9cd9995c9cc81b9bdd08185b1b1bddd959605a1b604082015260600190565b6020808252601690820152751b9bc81d195c9b5a5b985d1a5bdb881c995c5d595cdd60521b604082015260600190565b6020808252601390820152723632b73232b91036bab9ba103a3930b9b332b960691b604082015260600190565b6020808252601390820152726c6f616e206973206e6f7420776f726b696e6760681b604082015260600190565b60006101408201905061318f828451612bae565b60208301516131a16020840182612bae565b5060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b81516001600160a01b031681526020918201519181019190915260400190565b61ffff91909116815260200190565b91825260ff16602082015260400190565b60ff91909116815260200190565b80151581146104bc57600080fdfea2646970667358221220218c806a8da84eb01995ac629413d2a6e1c9693f62b6b268cfee4a0a3f2590ea64736f6c634300060c0033",
  "libraries": {
    "DiscountFactor": "0x6B92F20547f8318A5f5ee2dF3947e3912f760c1B",
    "DealId": "0x84BfdF9e085Ac0c3Ff9BCBC699Ce6AFAD49a3597"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptTermination(bytes32)": {
        "details": "Triggers to accept early termination of the loan.",
        "params": {
          "loanId": "Loan deal ID"
        }
      },
      "addLendingMarket(bytes32,uint256,address)": {
        "details": "Triggers to link with existing LendingMarket.",
        "params": {
          "_ccy": "LendingMarket main currency",
          "_term": "LendingMarket term",
          "addr": "LendingMarket contract address"
        }
      },
      "constructor": {
        "details": "Contract constructor function."
      },
      "getDealCurrency(bytes32)": {
        "details": "Triggers to get main currency the deal by `dealId`.",
        "params": {
          "loanId": "Loan deal ID"
        }
      },
      "getDealLastPV(address,address,bytes32)": {
        "details": "Triggers to get stored present value of loan deal.",
        "params": {
          "loanId": "Loan ID to update PV for"
        }
      },
      "getDealPV(bytes32)": {
        "details": "Triggers to recalculate present value of loan deal.",
        "params": {
          "loanId": "Loan ID to update PV for"
        }
      },
      "getDealSettlementStatus(bytes32)": {
        "details": "Triggers to get settlement status of loan deal.",
        "params": {
          "loanId": "Loan deal ID"
        }
      },
      "getLastSettledPayment(bytes32)": {
        "details": "Returns the timestamp of the last settled payment in payment schedule",
        "params": {
          "loanId": "Loan deal ID"
        }
      },
      "getLoanDeal(bytes32)": {
        "details": "Triggers to get current information about Loan deal.",
        "params": {
          "loanId": "Loan deal ID"
        }
      },
      "getPaymentSchedule(bytes32)": {
        "details": "Returns the payment schedule for a deal by `loanId`",
        "params": {
          "loanId": "Loan deal ID"
        }
      },
      "getTerminationState(bytes32)": {
        "details": "Triggers to get termination state for loan with `loanId`.",
        "params": {
          "loanId": "Loan deal ID"
        }
      },
      "getVersion()": {
        "details": "Triggers to return loan product implementation version",
        "returns": {
          "_0": "implementation version"
        }
      },
      "markToMarket(bytes32)": {
        "details": "Main function for mark-to-market: updates present value, loan state and liquidates loan deal if collateral coverage <125% for every liquidation msg.sender get rewarded ~5% of loan deal PV.",
        "params": {
          "loanId": "Loan ID to update PV for"
        }
      },
      "novation(bytes32,address)": {
        "details": "Triggers to transfer loan ownership.",
        "params": {
          "loanId": "Loan deal ID",
          "newOwner": "Address of new owner (lender)"
        }
      },
      "register(address,address,uint8,bytes32,uint256,uint256,uint256)": {
        "details": "Triggered to register new loan deal, also locks borrowers collateral.",
        "params": {
          "ccy": "Loan deal main currency",
          "maker": "LendingMarket order market maker",
          "notional": "Notional amount of funds to lend/borrow",
          "rate": "Loan deal annual interest rate",
          "side": "MarketOrder side",
          "taker": "LendingMarket order market taker",
          "term": "Loan deal term"
        }
      },
      "rejectTermination(bytes32)": {
        "details": "Triggers to reject early termination of the loan.",
        "params": {
          "loanId": "Loan deal ID"
        }
      },
      "requestTermination(bytes32)": {
        "details": "Triggers to request early termination of the loan.",
        "params": {
          "loanId": "Loan deal ID"
        }
      },
      "setCollateralAddr(address)": {
        "details": "Triggers to link with Collateral contract.",
        "params": {
          "addr": "Collateral contract address"
        }
      },
      "setIsTransferable(bool)": {
        "details": "Triggers to change ability to transfer loan ownership by lenders.",
        "params": {
          "isAccepted": "Boolean to"
        }
      },
      "setLendingControllerAddr(address)": {
        "details": "Triggers to link with LendingMarketController contract.",
        "params": {
          "addr": "LendingMarketController contract address"
        }
      },
      "setLiquidations(address)": {
        "details": "Triggers to link with Liquidations contract.",
        "params": {
          "addr": "Liquidations contract address"
        }
      },
      "setPaymentAggregator(address)": {
        "details": "Triggers to link with PaymentAggregator contract.",
        "params": {
          "addr": "Payment Aggregator contract address"
        }
      },
      "setTermStructure(address)": {
        "details": "Triggers to link with TermStructure contract.",
        "params": {
          "addr": "TermStructure contract address"
        }
      }
    },
    "stateVariables": {
      "loans": {
        "details": "Mapping for all storing LoanDeals per loanIDs."
      }
    },
    "title": "LoanV2 contract is used to store Lending deals in Secured Finance protocol. This contract handle the PV updates on lending market rate changes also allowing parties to mutually terminate their lending deals Contract linked to Lending Market contracts, LendingMarketController and Collateral contract.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptTermination(bytes32)": {
        "notice": "Executed only for working loan deal"
      },
      "addLendingMarket(bytes32,uint256,address)": {
        "notice": "Executed only by contract owner"
      },
      "constructor": "sets contract deployer as owner of this contract",
      "novation(bytes32,address)": {
        "notice": "Executed only by original lender"
      },
      "register(address,address,uint8,bytes32,uint256,uint256,uint256)": {
        "notice": "Callable only by LendingMarket after matching orders"
      },
      "rejectTermination(bytes32)": {
        "notice": "Executed only for working loan deal"
      },
      "requestTermination(bytes32)": {
        "notice": "Executed only for working loan deal"
      },
      "setCollateralAddr(address)": {
        "notice": "Executed only by contract owner"
      },
      "setIsTransferable(bool)": {
        "notice": "Executed only by contract owner"
      },
      "setLendingControllerAddr(address)": {
        "notice": "Executed only by contract owner"
      },
      "setLiquidations(address)": {
        "notice": "Executed only by contract owner"
      },
      "setPaymentAggregator(address)": {
        "notice": "Executed only by contract owner"
      },
      "setTermStructure(address)": {
        "notice": "Executed only by contract owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15633,
        "contract": "contracts/LoanV2.sol:LoanV2",
        "label": "settlementWindow",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 15640,
        "contract": "contracts/LoanV2.sol:LoanV2",
        "label": "paymentFrequency",
        "offset": 0,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 15671,
        "contract": "contracts/LoanV2.sol:LoanV2",
        "label": "loans",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(LoanDeal)15661_storage)"
      },
      {
        "astId": 15675,
        "contract": "contracts/LoanV2.sol:LoanV2",
        "label": "terminations",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(Termination)15666_storage)"
      },
      {
        "astId": 15679,
        "contract": "contracts/LoanV2.sol:LoanV2",
        "label": "isSettled",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 15681,
        "contract": "contracts/LoanV2.sol:LoanV2",
        "label": "owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 15683,
        "contract": "contracts/LoanV2.sol:LoanV2",
        "label": "isTransferable",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 15686,
        "contract": "contracts/LoanV2.sol:LoanV2",
        "label": "last_loan_id",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 15688,
        "contract": "contracts/LoanV2.sol:LoanV2",
        "label": "collateralAggregator",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ICollateralAggregator)20605"
      },
      {
        "astId": 15690,
        "contract": "contracts/LoanV2.sol:LoanV2",
        "label": "lendingController",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ILendingMarketController)21637"
      },
      {
        "astId": 15692,
        "contract": "contracts/LoanV2.sol:LoanV2",
        "label": "paymentAggregator",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IPaymentAggregator)22284"
      },
      {
        "astId": 15694,
        "contract": "contracts/LoanV2.sol:LoanV2",
        "label": "termStructure",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(ITermStructureGetter)22767"
      },
      {
        "astId": 15696,
        "contract": "contracts/LoanV2.sol:LoanV2",
        "label": "liquidations",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(ILiquidations)21740"
      },
      {
        "astId": 15702,
        "contract": "contracts/LoanV2.sol:LoanV2",
        "label": "lendingMarkets",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICollateralAggregator)20605": {
        "encoding": "inplace",
        "label": "contract ICollateralAggregator",
        "numberOfBytes": "20"
      },
      "t_contract(ILendingMarketController)21637": {
        "encoding": "inplace",
        "label": "contract ILendingMarketController",
        "numberOfBytes": "20"
      },
      "t_contract(ILiquidations)21740": {
        "encoding": "inplace",
        "label": "contract ILiquidations",
        "numberOfBytes": "20"
      },
      "t_contract(IPaymentAggregator)22284": {
        "encoding": "inplace",
        "label": "contract IPaymentAggregator",
        "numberOfBytes": "20"
      },
      "t_contract(ITermStructureGetter)22767": {
        "encoding": "inplace",
        "label": "contract ITermStructureGetter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_bytes32,t_struct(LoanDeal)15661_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LoanV2.LoanDeal)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanDeal)15661_storage"
      },
      "t_mapping(t_bytes32,t_struct(Termination)15666_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LoanV2.Termination)",
        "numberOfBytes": "32",
        "value": "t_struct(Termination)15666_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(LoanDeal)15661_storage": {
        "encoding": "inplace",
        "label": "struct LoanV2.LoanDeal",
        "members": [
          {
            "astId": 15642,
            "contract": "contracts/LoanV2.sol:LoanV2",
            "label": "lender",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 15644,
            "contract": "contracts/LoanV2.sol:LoanV2",
            "label": "borrower",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 15646,
            "contract": "contracts/LoanV2.sol:LoanV2",
            "label": "ccy",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 15648,
            "contract": "contracts/LoanV2.sol:LoanV2",
            "label": "term",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15650,
            "contract": "contracts/LoanV2.sol:LoanV2",
            "label": "notional",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 15652,
            "contract": "contracts/LoanV2.sol:LoanV2",
            "label": "rate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 15654,
            "contract": "contracts/LoanV2.sol:LoanV2",
            "label": "start",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 15656,
            "contract": "contracts/LoanV2.sol:LoanV2",
            "label": "end",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 15658,
            "contract": "contracts/LoanV2.sol:LoanV2",
            "label": "pv",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 15660,
            "contract": "contracts/LoanV2.sol:LoanV2",
            "label": "startTxHash",
            "offset": 0,
            "slot": "9",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Termination)15666_storage": {
        "encoding": "inplace",
        "label": "struct LoanV2.Termination",
        "members": [
          {
            "astId": 15663,
            "contract": "contracts/LoanV2.sol:LoanV2",
            "label": "terminationAsker",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 15665,
            "contract": "contracts/LoanV2.sol:LoanV2",
            "label": "terminationDate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}