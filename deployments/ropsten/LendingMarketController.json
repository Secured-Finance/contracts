{
  "address": "0x80143B3C92b635cF8A5892899a6634eEE731cff5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "term",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketAddr",
          "type": "address"
        }
      ],
      "name": "LendingMarketCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        }
      ],
      "name": "LendingMarketsPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        }
      ],
      "name": "LendingMarketsUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "currencyController",
      "outputs": [
        {
          "internalType": "contract ICurrencyController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_term",
          "type": "uint256"
        }
      ],
      "name": "deployLendingMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getBorrowRatesForCcy",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getDiscountFactorsForCcy",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getLendRatesForCcy",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getMidRatesForCcy",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getSupportedTerms",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lendingMarkets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfMarkets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "pauseLendingMarkets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "ccy",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "term",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "side",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            }
          ],
          "internalType": "struct Order[]",
          "name": "orders",
          "type": "tuple[]"
        }
      ],
      "name": "placeBulkOrders",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setCurrencyController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setTermStructure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedTerms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "termStructure",
      "outputs": [
        {
          "internalType": "contract ITermStructure",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "unpauseLendingMarkets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf05ca9df5634fb835f174280470aa47c9ef3fbc3e773d721904901897dda33aa",
  "receipt": {
    "to": null,
    "from": "0x57AB42d4fa756b6956b0cAf986a5f53bA90D9e28",
    "contractAddress": "0x80143B3C92b635cF8A5892899a6634eEE731cff5",
    "transactionIndex": 23,
    "gasUsed": "4182145",
    "logsBloom": "0x
    "blockHash": "0x34bf88f5bce683cb22362bc29ce7206720f1b2c53aeacffdfb6bc7319c78746f",
    "transactionHash": "0xf05ca9df5634fb835f174280470aa47c9ef3fbc3e773d721904901897dda33aa",
    "logs": [],
    "blockNumber": 12164712,
    "cumulativeGasUsed": "4789183",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "48d264388c4204a72ee447cb1af8bee3",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketAddr\",\"type\":\"address\"}],\"name\":\"LendingMarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"}],\"name\":\"LendingMarketsPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"}],\"name\":\"LendingMarketsUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"currencyController\",\"outputs\":[{\"internalType\":\"contract ICurrencyController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_term\",\"type\":\"uint256\"}],\"name\":\"deployLendingMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getBorrowRatesForCcy\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getDiscountFactorsForCcy\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getLendRatesForCcy\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getMidRatesForCcy\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getSupportedTerms\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lendingMarkets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfMarkets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"pauseLendingMarkets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"internalType\":\"struct Order[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"name\":\"placeBulkOrders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setCurrencyController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setTermStructure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedTerms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"termStructure\",\"outputs\":[{\"internalType\":\"contract ITermStructure\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"unpauseLendingMarkets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Lending Market Controller contract is managing separated lending order-book markets (per term) and responsible to calculate Discount Factors per currency and construct yield curve It will store lending market addresses by ccy and term in lendingMarkets mapping.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Lending Market Controller Constructor.\"},\"deployLendingMarket(bytes32,uint256)\":{\"details\":\"Deploys new Lending Market and save address at lendingMarkets mapping.\",\"params\":{\"_ccy\":\"Main currency for new lending market\",\"_term\":\"Term for new Lending Market\"}},\"getBorrowRatesForCcy(bytes32)\":{\"details\":\"Triggers to get borrow rates for selected currency.\",\"params\":{\"_ccy\":\"Currency\"}},\"getLendRatesForCcy(bytes32)\":{\"details\":\"Triggers to get lend rates for selected currency.\",\"params\":{\"_ccy\":\"Currency\"}},\"getMidRatesForCcy(bytes32)\":{\"details\":\"Triggers to get mid rates for selected currency.\",\"params\":{\"_ccy\":\"Currency\"}},\"pauseLendingMarkets(bytes32)\":{\"details\":\"Pauses previously deployed lending market by currency\",\"params\":{\"_ccy\":\"Currency for pausing all lending markets\"}},\"placeBulkOrders((bytes32,uint256,uint8,uint256,uint256)[])\":{\"details\":\"Places orders in multiple Lending Markets.\",\"params\":{\"orders\":\"Lending Market orders array with ccy and terms to identify right market\"}},\"setCurrencyController(address)\":{\"details\":\"Triggers to link with Currency Controller contract.\",\"params\":{\"addr\":\"CurrencyController smart contract address\"}},\"setOwner(address)\":{\"details\":\"Sets owner of the controller market.\",\"params\":{\"_owner\":\"Address of new owner\"}},\"setTermStructure(address)\":{\"details\":\"Triggers to link with TermStructure contract.\",\"params\":{\"addr\":\"TermStructure smart contract address\"}},\"unpauseLendingMarkets(bytes32)\":{\"details\":\"Unpauses previously deployed lending market by currency\",\"params\":{\"_ccy\":\"Currency for pausing all lending markets\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deployLendingMarket(bytes32,uint256)\":{\"notice\":\"Reverts on deployment market with existing currency and term\"},\"setCurrencyController(address)\":{\"notice\":\"Executed only by contract owner\"},\"setTermStructure(address)\":{\"notice\":\"Executed only by contract owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LendingMarketController.sol\":\"LendingMarketController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/LendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/ICollateralAggregator.sol\\\";\\nimport \\\"./interfaces/ILoanV2.sol\\\";\\nimport \\\"./interfaces/ILendingMarketController.sol\\\";\\nimport \\\"./libraries/HitchensOrderStatisticsTreeLib.sol\\\";\\nimport \\\"./ProtocolTypes.sol\\\";\\n\\n/**\\n * @dev Lending Market contract module which allows lending market participants\\n * to create/take/cancel market orders.\\n *\\n * It will store market orders in structured red-black tree and doubly linked list in each node.\\n */\\ncontract LendingMarket is ProtocolTypes, ReentrancyGuard, Pausable {\\n    using SafeMath for uint256;\\n    using HitchensOrderStatisticsTreeLib for HitchensOrderStatisticsTreeLib.Tree;\\n\\n    // Contracts interfaces\\n    ICollateralAggregator collateralAggregator;\\n    ILoanV2 loan;\\n\\n    /**\\n     * @dev Emitted when market order created by market maker.\\n     */\\n    event MakeOrder(\\n        uint256 orderId,\\n        address indexed maker,\\n        Side side,\\n        bytes32 ccy,\\n        uint256 term,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n\\n    /**\\n     * @dev Emitted when market order canceled by market maker.\\n     *\\n     * Requirements:\\n     *\\n     * - Market order must be active and cancelable.\\n     */\\n    event CancelOrder(\\n        uint256 orderId,\\n        address indexed maker,\\n        Side side,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n\\n    /**\\n     * @dev Emitted when market order taken by market taker.\\n     *\\n     * Requirements:\\n     *\\n     * - Market order must be active.\\n     */\\n    event TakeOrder(\\n        uint256 orderId,\\n        address indexed taker,\\n        Side side,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n\\n    uint256 public last_order_id;\\n    bytes32 public MarketCcy;\\n    uint256 public MarketTerm;\\n    address public lendingController;\\n\\n    struct MarketOrder {\\n        Side side;\\n        uint256 amount;\\n        uint256 rate; // in basis points\\n        address maker;\\n    }\\n\\n    /**\\n     * @dev Order Book mapping for all Market Orders.\\n     */\\n    mapping(uint256 => MarketOrder) public orders;\\n    HitchensOrderStatisticsTreeLib.Tree lendOrders;\\n    HitchensOrderStatisticsTreeLib.Tree borrowOrders;\\n\\n    /**\\n     * @dev Constructor.\\n     * @param _ccy The main currency for order book lending deals\\n     * @param _term The main term for order book lending deals\\n     */\\n    constructor(\\n        bytes32 _ccy,\\n        uint256 _term,\\n        address _lendingController\\n    ) public {\\n        MarketCcy = _ccy;\\n        MarketTerm = _term;\\n        lendingController = _lendingController;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by lending market controller owner.\\n     */\\n    modifier onlyLendingControllerAdmin() {\\n        require(\\n            msg.sender == ILendingMarketController(lendingController).owner() ||\\n                msg.sender == lendingController,\\n            \\\"Incorrect access\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by order maker.\\n     * @param orderId Market order id\\n     */\\n    modifier onlyMaker(uint256 orderId) {\\n        require(msg.sender == getMaker(orderId), \\\"No access to cancel order\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers to make a set collateral contract address.\\n     * @param colAddr Collateral contract addreess\\n     *\\n     * Requirements:\\n     *\\n     * - Can be executed only by lending market controller owner.\\n     */\\n    function setCollateral(address colAddr) public onlyLendingControllerAdmin {\\n        collateralAggregator = ICollateralAggregator(colAddr);\\n    }\\n\\n    /**\\n     * @dev Triggers to make a set loan contract address.\\n     * @param addr Loan smart contract addreess\\n     *\\n     * Requirements:\\n     *\\n     * - Can be executed only by lending market controller owner.\\n     */\\n    function setLoan(address addr) public onlyLendingControllerAdmin {\\n        loan = ILoanV2(addr);\\n    }\\n\\n    /**\\n     * @dev Triggers to get order maker address.\\n     * @param orderId Market order id\\n     */\\n    function getMaker(uint256 orderId) public view returns (address maker) {\\n        return orders[orderId].maker;\\n    }\\n\\n    /**\\n     * @dev Triggers to get highest borrow rate.\\n     */\\n    function getBorrowRate() public view returns (uint256 rate) {\\n        return borrowOrders.last();\\n    }\\n\\n    /**\\n     * @dev Triggers to get highest lend rate.\\n     */\\n    function getLendRate() public view returns (uint256 rate) {\\n        return lendOrders.last();\\n    }\\n\\n    /**\\n     * @dev Triggers to get mid rate.\\n     */\\n    function getMidRate() public view returns (uint256 rate) {\\n        uint256 borrowRate = getBorrowRate();\\n        uint256 lendRate = getLendRate();\\n        uint256 combinedRate = borrowRate.add(lendRate);\\n\\n        return combinedRate.div(2);\\n    }\\n\\n    /**\\n     * @dev Triggers to get market order information.\\n     * @param orderId Market order id\\n     */\\n    function getOrder(uint256 orderId)\\n        public\\n        view\\n        returns (MarketOrder memory)\\n    {\\n        return orders[orderId];\\n    }\\n\\n    function getOrderFromTree(uint256 orderId)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        MarketOrder memory order = orders[orderId];\\n\\n        if (order.side == Side.LEND) {\\n            return lendOrders.getOrderById(order.rate, orderId);\\n        } else {\\n            return borrowOrders.getOrderById(order.rate, orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internally triggered to increase and return id of last order in order book.\\n     */\\n    function _next_id() internal returns (uint256) {\\n        last_order_id++;\\n        return last_order_id;\\n    }\\n\\n    /**\\n     * @dev Triggered to cancel market order.\\n     * @param orderId Market order id\\n     *\\n     * Requirements:\\n     * - Order has to be cancelable by market maker\\n     */\\n    function cancelOrder(uint256 orderId)\\n        public\\n        onlyMaker(orderId)\\n        returns (bool success)\\n    {\\n        _beforeMarketOrder();\\n\\n        MarketOrder memory order = orders[orderId];\\n        if (order.side == Side.LEND) {\\n            lendOrders.remove(order.amount, order.rate, orderId);\\n        } else if (order.side == Side.BORROW) {\\n            borrowOrders.remove(order.amount, order.rate, orderId);\\n        }\\n        delete orders[orderId];\\n\\n        collateralAggregator.releaseUnsettledCollateral(\\n            order.maker,\\n            MarketCcy,\\n            order.amount.mul(MKTMAKELEVEL).div(PCT)\\n        );\\n        emit CancelOrder(\\n            orderId,\\n            order.maker,\\n            order.side,\\n            order.amount,\\n            order.rate\\n        );\\n\\n        success = true;\\n    }\\n\\n    /**\\n     * @dev Triggered to make new market order.\\n     * @param _side Borrow or Lend order position\\n     * @param _amount Amount of funds maker wish to borrow/lend\\n     * @param _rate Preferable interest rate\\n     */\\n    function makeOrder(\\n        Side _side,\\n        uint256 _amount,\\n        uint256 _rate\\n    ) internal returns (uint256 orderId) {\\n        MarketOrder memory order;\\n\\n        require(_amount > 0, \\\"Can't place empty amount\\\");\\n        require(_rate > 0, \\\"Can't place empty rate\\\");\\n        _beforeMarketOrder();\\n\\n        order.side = _side;\\n        order.amount = _amount;\\n        order.rate = _rate;\\n        order.maker = msg.sender;\\n        orderId = _next_id();\\n\\n        orders[orderId] = order;\\n        collateralAggregator.useUnsettledCollateral(\\n            msg.sender,\\n            MarketCcy,\\n            _amount.mul(MKTMAKELEVEL).div(PCT)\\n        );\\n        if (order.side == Side.LEND) {\\n            lendOrders.insert(order.amount, order.rate, orderId);\\n        } else if (order.side == Side.BORROW) {\\n            borrowOrders.insert(order.amount, order.rate, orderId);\\n        }\\n\\n        emit MakeOrder(\\n            orderId,\\n            order.maker,\\n            order.side,\\n            MarketCcy,\\n            MarketTerm,\\n            order.amount,\\n            order.rate\\n        );\\n    }\\n\\n    /**\\n     * @dev Triggered to take market order.\\n     * @param orderId Market Order id in Order Book\\n     * @param _amount Amount of funds taker wish to borrow/lend\\n     *\\n     * Requirements:\\n     * - Market order has to be active\\n     */\\n    function takeOrder(\\n        Side side,\\n        uint256 orderId,\\n        uint256 _amount\\n    ) internal returns (bool) {\\n        MarketOrder memory order = orders[orderId];\\n        require(_amount <= order.amount, \\\"Insuficient amount\\\");\\n        require(order.maker != msg.sender, \\\"Maker couldn't take its order\\\");\\n        _beforeMarketOrder();\\n\\n        orders[orderId].amount = order.amount.sub(_amount);\\n        if (order.side == Side.LEND) {\\n            require(\\n                lendOrders.fillOrder(order.rate, orderId, _amount),\\n                \\\"Couldn't fill order\\\"\\n            );\\n        } else if (order.side == Side.BORROW) {\\n            require(\\n                borrowOrders.fillOrder(order.rate, orderId, _amount),\\n                \\\"Couldn't fill order\\\"\\n            );\\n        }\\n\\n        loan.register(\\n            order.maker,\\n            msg.sender,\\n            uint8(order.side),\\n            MarketCcy,\\n            MarketTerm,\\n            _amount,\\n            order.rate\\n        );\\n\\n        emit TakeOrder(orderId, msg.sender, side, _amount, order.rate);\\n\\n        if (order.amount == 0) {\\n            delete orders[orderId];\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Triggered to get matching market order.\\n     * @param side Market order side it can be borrow or lend\\n     * @param amount Amount of funds taker wish to borrow/lend\\n     * @param rate Amount of interest rate taker wish to borrow/lend\\n     *\\n     * Returns zero if didn't find a matched order, reverts if no orders for specified interest rate\\n     */\\n    function matchOrders(\\n        Side side,\\n        uint256 amount,\\n        uint256 rate\\n    ) public view returns (uint256) {\\n        if (side == Side.LEND) {\\n            require(\\n                borrowOrders.exists(rate),\\n                \\\"No orders exists for selected interest rate\\\"\\n            );\\n            return borrowOrders.findOrderIdForAmount(rate, amount);\\n        } else {\\n            require(\\n                lendOrders.exists(rate),\\n                \\\"No orders exists for selected interest rate\\\"\\n            );\\n            return lendOrders.findOrderIdForAmount(rate, amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggered to execute market order, if order matched it takes order, if not matched places new order.\\n     * @param side Market order side it can be borrow or lend\\n     * @param amount Amount of funds maker/taker wish to borrow/lend\\n     * @param rate Amount of interest rate maker/taker wish to borrow/lend\\n     *\\n     * Returns true after successful execution\\n     */\\n    function order(\\n        Side side,\\n        uint256 amount,\\n        uint256 rate\\n    ) public nonReentrant returns (bool) {\\n        uint256 orderId;\\n\\n        if (side == Side.LEND) {\\n            orderId = borrowOrders.findOrderIdForAmount(rate, amount);\\n            if (orderId != 0) return takeOrder(Side.BORROW, orderId, amount);\\n        } else {\\n            orderId = lendOrders.findOrderIdForAmount(rate, amount);\\n            if (orderId != 0) return takeOrder(Side.LEND, orderId, amount);\\n        }\\n\\n        makeOrder(side, amount, rate);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Triggered to pause lending market.\\n     */\\n    function pauseMarket() public virtual onlyLendingControllerAdmin {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Triggered to pause lending market.\\n     */\\n    function unpauseMarket() public virtual onlyLendingControllerAdmin {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Additional checks before making/taking orders.\\n     */\\n    function _beforeMarketOrder() internal view {\\n        require(!paused(), \\\"Market paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xbe77315defc11ed12d431feebeb75af6da8983a93d5ac19dc67fd8016c1093ca\",\"license\":\"MIT\"},\"contracts/LendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./libraries/QuickSort.sol\\\";\\nimport \\\"./libraries/DiscountFactor.sol\\\";\\nimport \\\"./LendingMarket.sol\\\";\\nimport \\\"./interfaces/ILendingMarketController.sol\\\";\\nimport \\\"./interfaces/ILendingMarket.sol\\\";\\nimport \\\"./interfaces/ICurrencyController.sol\\\";\\nimport \\\"./interfaces/ITermStructure.sol\\\";\\n\\n/**\\n * @dev Lending Market Controller contract is managing separated lending\\n * order-book markets (per term) and responsible to calculate Discount Factors per currency\\n * and construct yield curve\\n *\\n * It will store lending market addresses by ccy and term in lendingMarkets mapping.\\n */\\ncontract LendingMarketController is ILendingMarketController {\\n    using SafeMath for uint256;\\n    using QuickSort for uint256[];\\n\\n    bytes4 constant prefix = 0x21aaa47b;\\n    address public override owner;\\n    ICurrencyController public currencyController;\\n    ITermStructure public termStructure;\\n    uint256 public override numberOfMarkets = 0;\\n\\n    mapping(bytes32 => mapping(uint256 => address))\\n        public\\n        override lendingMarkets;\\n    mapping(bytes32 => uint256[]) public supportedTerms;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"INVALID_ACCESS\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Lending Market Controller Constructor.\\n     */\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Sets owner of the controller market.\\n     * @param _owner Address of new owner\\n     */\\n    function setOwner(address _owner) public onlyOwner {\\n        require(_owner != address(0), \\\"new owner is the zero address\\\");\\n        emit OwnerChanged(owner, _owner);\\n        owner = _owner;\\n    }\\n\\n    /**\\n     * @dev Triggers to link with Currency Controller contract.\\n     * @param addr CurrencyController smart contract address\\n     *\\n     * @notice Executed only by contract owner\\n     */\\n    function setCurrencyController(address addr) public onlyOwner {\\n        currencyController = ICurrencyController(addr);\\n    }\\n\\n    /**\\n     * @dev Triggers to link with TermStructure contract.\\n     * @param addr TermStructure smart contract address\\n     *\\n     * @notice Executed only by contract owner\\n     */\\n    function setTermStructure(address addr) public onlyOwner {\\n        termStructure = ITermStructure(addr);\\n    }\\n\\n    // =========== YIELD CURVE FUNCTIONS ===========\\n\\n    /**\\n     * @dev Triggers to get borrow rates for selected currency.\\n     * @param _ccy Currency\\n     */\\n    function getBorrowRatesForCcy(bytes32 _ccy)\\n        public\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory terms = supportedTerms[_ccy];\\n        uint256[] memory rates = new uint256[](terms.length);\\n\\n        for (uint256 i = 0; i < terms.length; i++) {\\n            uint256 term = terms[i];\\n            ILendingMarket market = ILendingMarket(lendingMarkets[_ccy][term]);\\n            rates[i] = market.getBorrowRate();\\n        }\\n\\n        return rates;\\n    }\\n\\n    /**\\n     * @dev Triggers to get lend rates for selected currency.\\n     * @param _ccy Currency\\n     */\\n    function getLendRatesForCcy(bytes32 _ccy)\\n        public\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory terms = supportedTerms[_ccy];\\n        uint256[] memory rates = new uint256[](terms.length);\\n\\n        for (uint256 i = 0; i < terms.length; i++) {\\n            uint256 term = terms[i];\\n            ILendingMarket market = ILendingMarket(lendingMarkets[_ccy][term]);\\n            rates[i] = market.getLendRate();\\n        }\\n\\n        return rates;\\n    }\\n\\n    /**\\n     * @dev Triggers to get mid rates for selected currency.\\n     * @param _ccy Currency\\n     */\\n    function getMidRatesForCcy(bytes32 _ccy)\\n        public\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory terms = supportedTerms[_ccy];\\n        uint256[] memory rates = new uint256[](terms.length);\\n\\n        for (uint256 i = 0; i < terms.length; i++) {\\n            uint256 term = terms[i];\\n            ILendingMarket market = ILendingMarket(lendingMarkets[_ccy][term]);\\n            rates[i] = market.getMidRate();\\n        }\\n\\n        return rates;\\n    }\\n\\n    // =========== DISCOUNT FACTORS CALCULATION ===========\\n\\n    function getDiscountFactorsForCcy(bytes32 _ccy)\\n        public\\n        view\\n        override\\n        returns (uint256[] memory, uint256[] memory)\\n    {\\n        uint256[] memory rates = getMidRatesForCcy(_ccy);\\n        return DiscountFactor.calculateDFs(rates, supportedTerms[_ccy]);\\n    }\\n\\n    function getSupportedTerms(bytes32 _ccy)\\n        public\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return supportedTerms[_ccy];\\n    }\\n\\n    // =========== MARKET DEPLOYMENT FUNCTIONS ===========\\n\\n    /**\\n     * @dev Deploys new Lending Market and save address at lendingMarkets mapping.\\n     * @param _ccy Main currency for new lending market\\n     * @param _term Term for new Lending Market\\n     *\\n     * @notice Reverts on deployment market with existing currency and term\\n     */\\n    function deployLendingMarket(bytes32 _ccy, uint256 _term)\\n        public\\n        override\\n        onlyOwner\\n        returns (address market)\\n    {\\n        require(currencyController.isSupportedCcy(_ccy), \\\"NON SUPPORTED CCY\\\");\\n        require(\\n            termStructure.isSupportedTerm(_term, prefix, _ccy),\\n            \\\"NON SUPPORTED TERM\\\"\\n        );\\n        require(\\n            lendingMarkets[_ccy][_term] == address(0),\\n            \\\"Couldn't rewrite existing market\\\"\\n        );\\n        market = address(new LendingMarket(_ccy, _term, address(this)));\\n        lendingMarkets[_ccy][_term] = market;\\n\\n        supportedTerms[_ccy].push(_term);\\n        supportedTerms[_ccy] = supportedTerms[_ccy].sort();\\n\\n        emit LendingMarketCreated(_ccy, _term, market);\\n        return market;\\n    }\\n\\n    // =========== LENDING MARKETS MANAGEMENT FUNCTIONS ===========\\n\\n    /**\\n     * @dev Pauses previously deployed lending market by currency\\n     * @param _ccy Currency for pausing all lending markets\\n     */\\n    function pauseLendingMarkets(bytes32 _ccy)\\n        public\\n        override\\n        onlyOwner\\n        returns (bool)\\n    {\\n        uint256[] memory terms = supportedTerms[_ccy];\\n\\n        for (uint256 i = 0; i < terms.length; i++) {\\n            uint256 term = terms[i];\\n            ILendingMarket market = ILendingMarket(lendingMarkets[_ccy][term]);\\n            market.pauseMarket();\\n        }\\n\\n        emit LendingMarketsPaused(_ccy);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Unpauses previously deployed lending market by currency\\n     * @param _ccy Currency for pausing all lending markets\\n     */\\n    function unpauseLendingMarkets(bytes32 _ccy)\\n        public\\n        override\\n        onlyOwner\\n        returns (bool)\\n    {\\n        uint256[] memory terms = supportedTerms[_ccy];\\n\\n        for (uint256 i = 0; i < terms.length; i++) {\\n            uint256 term = terms[i];\\n            ILendingMarket market = ILendingMarket(lendingMarkets[_ccy][term]);\\n            market.unpauseMarket();\\n        }\\n\\n        emit LendingMarketsUnpaused(_ccy);\\n        return true;\\n    }\\n\\n    // =========== BULK TRADE FUNCTIONS ===========\\n\\n    /**\\n     * @dev Places orders in multiple Lending Markets.\\n     * @param orders Lending Market orders array with ccy and terms to identify right market\\n     */\\n    function placeBulkOrders(Order[] memory orders)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        for (uint8 i = 0; i < orders.length; i++) {\\n            Order memory order = orders[i];\\n\\n            ILendingMarket market = ILendingMarket(\\n                lendingMarkets[order.ccy][order.term]\\n            );\\n            market.order(uint8(order.side), order.amount, order.rate);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1871c2a3ed8b3386143258cc16e0823a3805d8d5cf300eb7148f36066cc71bf5\",\"license\":\"MIT\"},\"contracts/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\ncontract ProtocolTypes {\\n    // Constant values\\n    uint8 internal constant NUMCCY = 3;\\n    uint8 internal constant NUMTERM = 6;\\n    uint8 internal constant NUMDF = 7; // number of discount factors\\n    uint256 internal constant BP = 10000; // basis point\\n\\n    uint256 internal constant PCT = 10000; // percentage point in basis\\n    uint256 internal constant PENALTYLEVEL = 1000; // 10% settlement failure penalty\\n    uint256 internal constant MKTMAKELEVEL = 2000; // 20% for market making\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Loan common types\\n    enum LoanState {\\n        REGISTERED,\\n        WORKING,\\n        DUE,\\n        PAST_DUE,\\n        CLOSED,\\n        TERMINATED\\n    }\\n    enum DFTERM {\\n        _3m,\\n        _6m,\\n        _1y,\\n        _2y,\\n        _3y,\\n        _4y,\\n        _5y\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n\\n    // FXMarket common types\\n    enum CcyPair {\\n        FILETH,\\n        FILUSDC,\\n        ETHUSDC,\\n        BTCUSDC,\\n        BTCETH,\\n        BTCFIL\\n    }\\n    enum FXSide {\\n        BID,\\n        OFFER\\n    }\\n\\n    enum PaymentFrequency {\\n        ANNUAL,\\n        SEMI_ANNUAL,\\n        QUARTERLY,\\n        MONTHLY,\\n        FORWARD\\n    }\\n}\\n\",\"keccak256\":\"0x72de205a94aefa6e5b79074f603b8056535f99918af5112343156e79b7eadd83\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICollateralAggregator {\\n    event Deposit(address indexed addr, uint256 amount);\\n    event Liquidate(address indexed from, address indexed to, uint256 amount);\\n    event PositionDeposit(\\n        address indexed partyA,\\n        address indexed partyB,\\n        uint256 amountA,\\n        uint256 amountB\\n    );\\n    event PositionWithdraw(\\n        address indexed partyA,\\n        address indexed partyB,\\n        uint256 amountA,\\n        uint256 amountB\\n    );\\n    event Rebalance(\\n        address indexed partyA,\\n        address indexed partyB,\\n        uint256 amountA,\\n        uint256 amountB\\n    );\\n    event RebalancePositions(\\n        address[] fromParties,\\n        address[] toParties,\\n        uint256[] fromAmounts,\\n        uint256[] toAmounts\\n    );\\n    event Register(address indexed addr, uint256 id, uint256 amount);\\n    event Release(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event UpdatePV(\\n        address indexed addr,\\n        uint256 prevPV,\\n        uint256 newPV,\\n        uint8 ccy\\n    );\\n    event UpdateState(address indexed addr, uint8 prevState, uint8 currState);\\n    event UseCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event Withdraw(address indexed addr, uint256 amount);\\n\\n    function AUTOLQLEVEL() external view returns (uint256);\\n\\n    function LQLEVEL() external view returns (uint256);\\n\\n    function MARGINLEVEL() external view returns (uint256);\\n\\n    function addCollateralUser(address _user) external returns (bool);\\n\\n    function currencyController() external view returns (address);\\n\\n    function deposit() external payable;\\n\\n    function deposit(address _counterparty) external payable;\\n\\n    function getCoverage(address party0, address party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getExposedCurrencies(address partyA, address partyB)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function isCovered(\\n        address party0,\\n        address party1,\\n        bytes32 _ccy,\\n        uint256 _party0PV,\\n        uint256 _party1PV,\\n        bool _isSettled\\n    ) external view returns (bool, bool);\\n\\n    function liquidateUnsettled(\\n        address from,\\n        address to,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function owner() external view returns (address);\\n\\n    function rebalanceFrom(\\n        address _fromParty,\\n        address _toParty,\\n        uint256 _amount\\n    ) external;\\n\\n    function rebalanceTo(\\n        address _mainParty,\\n        address _counterparty,\\n        uint256 _amount\\n    ) external;\\n\\n    function rebalanceTo(address _counterparty, uint256 _amount) external;\\n\\n    function register() external payable;\\n\\n    function register(uint256 id) external payable;\\n\\n    function releaseUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function releaseCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function removeCollateralUser(address _user) external returns (bool);\\n\\n    function updateLiquidationPrice(uint256 _price) external;\\n\\n    function updateLiquidationThreshold(uint256 _ratio) external;\\n\\n    function updateMarginCallThreshold(uint256 _ratio) external;\\n\\n    function updatePV(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    ) external;\\n\\n    function useUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function useCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function settleCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external;\\n\\n    function withdraw(uint256 _amt) external;\\n\\n    function withdrawFrom(address _counterparty, uint256 _amt) external;\\n\\n    function checkRegisteredBook(address addr) external view returns (bool);\\n\\n    function getMaxCollateralWidthdraw(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getMaxCollateralBookWidthdraw(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function enterVault(address _user) external;\\n\\n    function enterVault(address _party0, address _party1) external;\\n\\n    function exitVault(address _user) external;\\n\\n    function exitVault(address _party0, address _party1) external;\\n}\\n\",\"keccak256\":\"0x71d916393a6a70e6f7c069fcef3dac134a0db43b3324fa5009788f20d85e11af\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n *\\n * Currency controller contract copies the logic of FXRatesAggregator contract, and\\n * will replace that contract in connection with Collateral Aggregator\\n */\\ninterface ICurrencyController {\\n    event CcyAdded(\\n        bytes32 indexed ccy,\\n        string name,\\n        uint16 chainId,\\n        uint256 haircut\\n    );\\n    event CcyCollateralUpdate(bytes32 indexed ccy, bool isCollateral);\\n    event CcySupportUpdate(bytes32 indexed ccy, bool isSupported);\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n    event MinMarginUpdated(bytes32 indexed ccy, uint256 minMargin);\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n    event PriceFeedAdded(\\n        bytes32 ccy,\\n        string secondCcy,\\n        address indexed priceFeed\\n    );\\n    event PriceFeedRemoved(\\n        bytes32 ccy,\\n        string secondCcy,\\n        address indexed priceFeed\\n    );\\n\\n    function convertBulkToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function currencies(bytes32)\\n        external\\n        view\\n        returns (\\n            bool isSupported,\\n            string memory name,\\n            uint16 chainId\\n        );\\n\\n    function ethDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getMinMargin(bytes32 _ccy) external view returns (uint256);\\n\\n    function haircuts(bytes32) external view returns (uint256);\\n\\n    function isCollateral(bytes32) external view returns (bool);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function last_ccy_index() external view returns (uint8);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function minMargins(bytes32) external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function setOwner(address _owner) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        uint16 _chainId,\\n        address _ethPriceFeed,\\n        uint256 _haircut\\n    ) external returns (bool);\\n\\n    function supportedCurrencies() external view returns (uint8);\\n\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut)\\n        external\\n        returns (bool);\\n\\n    function updateCollateralSupport(bytes32 _ccy, bool _isSupported)\\n        external\\n        returns (bool);\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported)\\n        external\\n        returns (bool);\\n\\n    function updateMinMargin(bytes32 _ccy, uint256 _minMargin)\\n        external\\n        returns (bool);\\n\\n    function usdDecimals(bytes32) external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xfe21b4283f1cfc907ade17b20e68c80e5e4800f4ffaa7bec74ef245fe497cb3a\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nstruct MarketOrder {\\n    uint8 side;\\n    uint256 amount;\\n    uint256 rate;\\n    uint256 deadline;\\n    address maker;\\n}\\n\\ninterface ILendingMarket {\\n    event CancelOrder(\\n        uint256 orderId,\\n        address indexed maker,\\n        uint8 side,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n    event MakeOrder(\\n        uint256 orderId,\\n        address indexed maker,\\n        uint8 side,\\n        bytes32 ccy,\\n        uint8 term,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n    event Paused(address account);\\n    event TakeOrder(\\n        uint256 orderId,\\n        address indexed taker,\\n        uint8 side,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n    event Unpaused(address account);\\n\\n    function MarketCcy() external view returns (bytes32);\\n\\n    function MarketTerm() external view returns (uint8);\\n\\n    function cancelOrder(uint256 orderId) external returns (bool success);\\n\\n    function getBorrowRate() external view returns (uint256 rate);\\n\\n    function getLendRate() external view returns (uint256 rate);\\n\\n    function getMaker(uint256 orderId) external view returns (address maker);\\n\\n    function getMidRate() external view returns (uint256 rate);\\n\\n    function getOrder(uint256 orderId)\\n        external\\n        view\\n        returns (MarketOrder memory);\\n\\n    function getOrderFromTree(uint256 orderId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function last_order_id() external view returns (uint256);\\n\\n    function lendingController() external view returns (address);\\n\\n    function matchOrders(\\n        uint8 side,\\n        uint256 amount,\\n        uint256 rate\\n    ) external view returns (uint256);\\n\\n    function order(\\n        uint8 side,\\n        uint256 amount,\\n        uint256 rate\\n    ) external returns (bool);\\n\\n    function orders(uint256)\\n        external\\n        view\\n        returns (\\n            uint8 side,\\n            uint256 amount,\\n            uint256 rate,\\n            address maker\\n        );\\n\\n    function pauseMarket() external;\\n\\n    function paused() external view returns (bool);\\n\\n    function setCollateral(address colAddr) external;\\n\\n    function setLoan(address addr) external;\\n\\n    function unpauseMarket() external;\\n}\\n\",\"keccak256\":\"0xf555c50e54b98b210b8ecc97378a60f9aeff5a05f8d2593871f090d26cfb09a2\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nstruct Order {\\n    bytes32 ccy;\\n    uint256 term;\\n    uint8 side;\\n    uint256 amount;\\n    uint256 rate;\\n}\\n\\ninterface ILendingMarketController {\\n    event LendingMarketCreated(\\n        bytes32 ccy,\\n        uint256 term,\\n        address indexed marketAddr\\n    );\\n    event LendingMarketsPaused(bytes32 ccy);\\n    event LendingMarketsUnpaused(bytes32 ccy);\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    function deployLendingMarket(bytes32 _ccy, uint256 _term)\\n        external\\n        returns (address market);\\n\\n    function getBorrowRatesForCcy(bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256[] memory rates);\\n\\n    function getDiscountFactorsForCcy(bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256[] memory, uint256[] memory);\\n\\n    function getLendRatesForCcy(bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256[] memory rates);\\n\\n    function getMidRatesForCcy(bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256[] memory rates);\\n\\n    function lendingMarkets(bytes32, uint256) external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function pauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function placeBulkOrders(Order[] memory orders) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function numberOfMarkets() external view returns (uint256);\\n\\n    function getSupportedTerms(bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x289d5d7e4fc8f28dc49dfeffde7cab480692c04686e9266aae8c6de718198372\",\"license\":\"MIT\"},\"contracts/interfaces/ILoanV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nstruct LoanDeal {\\n    address lender;\\n    address borrower;\\n    bytes32 ccy;\\n    uint256 term;\\n    uint256 notional;\\n    uint256 rate;\\n    uint256 start;\\n    uint256 end;\\n    uint256 pv;\\n    bytes32 startTxHash;\\n    uint8 state;\\n}\\n\\ninterface ILoanV2 {\\n    event EarlyTermination(\\n        bytes32 dealId,\\n        address indexed acceptedBy,\\n        uint256 payment\\n    );\\n    event Liquidate(bytes32 dealId);\\n    event MarkToMarket(bytes32 dealId, uint256 prevPV, uint256 currPV);\\n    event Novation(bytes32 indexed dealId, address currLender);\\n    event Register(\\n        address indexed lender,\\n        address indexed borrower,\\n        bytes32 ccy,\\n        uint256 term,\\n        uint256 notional,\\n        uint256 rate,\\n        bytes32 indexed dealId\\n    );\\n    event RejectTermination(bytes32 dealId, address indexed rejectedBy);\\n    event RequestTermination(bytes32 dealId, address indexed requestedBy);\\n\\n    function acceptTermination(bytes32 loanId) external;\\n\\n    function addLendingMarket(\\n        bytes32 _ccy,\\n        uint256 _term,\\n        address addr\\n    ) external;\\n\\n    function getDF(bytes32 loanId, uint256 date)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getDealPV(bytes32 loanId) external view returns (uint256 pv);\\n\\n    function getDealLastPV(\\n        address party0,\\n        address party1,\\n        bytes32 loanId\\n    ) external view returns (uint256, uint256);\\n\\n    function getDealSettlementStatus(bytes32 loanId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getLastSettledPayment(bytes32 loanId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLoanDeal(bytes32 loanId)\\n        external\\n        view\\n        returns (LoanDeal memory);\\n\\n    function getPaymentSchedule(bytes32 loanId)\\n        external\\n        view\\n        returns (\\n            uint256[] memory,\\n            uint256[] memory,\\n            bool[] memory\\n        );\\n\\n    function getVersion() external view returns (uint16);\\n\\n    function isTransferable() external view returns (bool);\\n\\n    function last_loan_id() external view returns (uint256);\\n\\n    function lendingMarkets(bytes32, uint256) external view returns (address);\\n\\n    function liquidate(bytes32 loanId) external;\\n\\n    function markToMarket(bytes32 loanId) external returns (bool);\\n\\n    function novation(bytes32 loanId, address newOwner) external;\\n\\n    function owner() external view returns (address);\\n\\n    function register(\\n        address maker,\\n        address taker,\\n        uint8 side,\\n        bytes32 ccy,\\n        uint256 term,\\n        uint256 notional,\\n        uint256 rate\\n    ) external returns (bytes32 loanId);\\n\\n    function rejectTermination(bytes32 loanId) external;\\n\\n    function requestTermination(bytes32 loanId) external;\\n\\n    function setCollateralAddr(address addr) external;\\n\\n    function setIsTransferable(bool isAccepted) external;\\n\\n    function setLendingControllerAddr(address addr) external;\\n\\n    function setPaymentAggregator(address addr) external;\\n}\\n\",\"keccak256\":\"0x668c89fabf16e317bf6c7ebcdb541c6dc3c4915a9a37c17b8aa9480325847f65\",\"license\":\"MIT\"},\"contracts/interfaces/ITermStructure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ITermStructure {\\n    event TermAdded(uint256 numDays);\\n    event ProductTermSupportUpdated(\\n        uint256 numDays,\\n        bytes4 product,\\n        bytes32 _ccy,\\n        bool isSupported\\n    );\\n    event TermSupportUpdated(uint256 numDays, bool isSupported);\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    function getDfFrac(uint256 _numDays) external view returns (uint256);\\n\\n    function getNumDays(uint256 _numDays) external view returns (uint256);\\n\\n    function getNumPayments(uint256 _numDays, uint8 frequency)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTerm(uint256 _numDays, uint8 frequency)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getTermSchedule(uint256 _numDays, uint8 frequency)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isSupportedTerm(\\n        uint256 _numDays,\\n        bytes4 _product,\\n        bytes32 _ccy\\n    ) external view returns (bool);\\n\\n    function last_term_index() external view returns (uint8);\\n\\n    function owner() external view returns (address);\\n\\n    function setCurrencyController(address _currencyController) external;\\n\\n    function setOwner(address _owner) external;\\n\\n    function supportTerm(\\n        uint256 _numDays,\\n        bytes4[] memory _products,\\n        bytes32[] memory _currencies\\n    ) external returns (bool);\\n\\n    function updateTermSupport(\\n        uint256 _numDays,\\n        bytes4 _product,\\n        bytes32 _ccy,\\n        bool _isSupported\\n    ) external returns (bool);\\n\\n    function getTermsForProductAndCcy(\\n        bytes4 _product,\\n        bytes32 _ccy,\\n        bool sort\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x6383547cef122af2ff938650c19709425541d3152ca6c8a3c45fb747a9d4385f\",\"license\":\"MIT\"},\"contracts/libraries/DiscountFactor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary DiscountFactor {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant BP = 10000; // basis point\\n    uint256 internal constant NON_ANNUAL_TERMS = 3;\\n\\n    function determineDF(\\n        uint256 rate,\\n        uint256 term,\\n        uint256[] memory cache,\\n        uint256 dfSum,\\n        uint256 index\\n    ) internal pure returns (uint256 df) {\\n        if (term < 365) {\\n            df = BP.mul(BP).div((BP.add(rate.mul(term).div(360))));\\n        } else if (term == 365) {\\n            df = BP.mul(BP).div((BP.add(rate)));\\n            dfSum = dfSum.add(df);\\n        } else {\\n            uint256 rateSum = (rate.mul(dfSum)).div(BP);\\n            if (rateSum > BP) {\\n                df = 0;\\n            } else {\\n                df = BP.mul(BP.sub(rate.mul(dfSum).div(BP))).div(BP.add(rate));\\n            }\\n            dfSum = dfSum.add(df);\\n        }\\n\\n        cache[index] = df;\\n\\n        return dfSum;\\n    }\\n\\n    function calculateDFs(uint256[] memory rates, uint256[] memory terms)\\n        public\\n        pure\\n        returns (uint256[] memory, uint256[] memory)\\n    {\\n        require(rates.length == terms.length, \\\"INVALID_PARAMS\\\");\\n\\n        (\\n            uint256[] memory bootstrapedRates,\\n            uint256[] memory bootstrapedTerms\\n        ) = bootstrapTerms(rates, terms);\\n\\n        uint256 len = bootstrapedTerms.length;\\n        uint256[] memory dfs = new uint256[](len);\\n        uint256 dfSum;\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            dfSum = determineDF(\\n                bootstrapedRates[i],\\n                bootstrapedTerms[i],\\n                dfs,\\n                dfSum,\\n                i\\n            );\\n        }\\n\\n        return (dfs, bootstrapedTerms);\\n    }\\n\\n    function maxDFs(uint256 maxTerm) internal pure returns (uint256) {\\n        return maxTerm.div(365).add(NON_ANNUAL_TERMS);\\n    }\\n\\n    struct TermBootstrapingLocalVars {\\n        uint256 extendedTerms;\\n        uint256 delta;\\n        uint256 numItems;\\n        uint256 lastKnownRate;\\n        uint256 nextKnownRate;\\n        uint256 nextKnownTerm;\\n        bool upwards;\\n        uint256 deltaRate;\\n        uint256 step;\\n    }\\n\\n    function bootstrapTerms(uint256[] memory rates, uint256[] memory terms)\\n        public\\n        pure\\n        returns (uint256[] memory, uint256[] memory)\\n    {\\n        uint256 len = maxDFs(terms[terms.length - 1]);\\n\\n        uint256[] memory filledRates = new uint256[](len);\\n        uint256[] memory filledTerms = new uint256[](len);\\n        TermBootstrapingLocalVars memory vars;\\n\\n        for (uint256 i = 0; i < terms.length.sub(1); i++) {\\n            if (terms[i] < 365) {\\n                filledRates[i] = rates[i];\\n                filledTerms[i] = terms[i];\\n                continue;\\n            }\\n            vars.delta = terms[i + 1].sub(terms[i]);\\n\\n            if (vars.delta <= 365) {\\n                filledRates[i] = rates[i];\\n                filledTerms[i] = terms[i];\\n                continue;\\n            }\\n\\n            vars.numItems = vars.delta.div(365);\\n            vars.lastKnownRate = rates[i];\\n\\n            if (vars.extendedTerms == 0) {\\n                filledRates[i] = vars.lastKnownRate;\\n                filledTerms[i] = terms[i];\\n            }\\n            vars.nextKnownRate = rates[i + 1];\\n            vars.nextKnownTerm = terms[i + 1];\\n            vars.upwards = vars.nextKnownRate > vars.lastKnownRate\\n                ? true\\n                : false;\\n            vars.deltaRate = vars.upwards\\n                ? vars.nextKnownRate.sub(vars.lastKnownRate)\\n                : vars.lastKnownRate.sub(vars.nextKnownRate);\\n            vars.step = vars.deltaRate.div(vars.numItems);\\n\\n            for (uint256 j = 1; j < vars.numItems; j++) {\\n                vars.extendedTerms = vars.extendedTerms.add(1);\\n\\n                uint256 newIndex = i.add(vars.extendedTerms);\\n                uint256 missedRate = vars.upwards\\n                    ? filledRates[newIndex.sub(1)].add(vars.step)\\n                    : filledRates[newIndex.sub(1)].sub(vars.step);\\n                uint256 missedTerm = terms[i].add(uint256(365).mul(j));\\n\\n                filledRates[newIndex] = missedRate;\\n                filledTerms[newIndex] = missedTerm;\\n\\n                if (j == vars.numItems.sub(1)) {\\n                    uint256 shifterIndex = newIndex.add(1);\\n\\n                    filledRates[shifterIndex] = vars.nextKnownRate;\\n                    filledTerms[shifterIndex] = vars.nextKnownTerm;\\n                }\\n            }\\n        }\\n\\n        return (filledRates, filledTerms);\\n    }\\n\\n    struct DFInterpolationLocalVars {\\n        uint256 timeDelta;\\n        uint256 termSeconds;\\n        uint256 prevTermSeconds;\\n        uint256 left;\\n        uint256 right;\\n        uint256 total;\\n    }\\n\\n    /**\\n     * @dev Triggers to adjust discount factors by interpolating to current loan maturity\\n     * @param discountFactors Discount factors array\\n     * @param terms Array of terms\\n     * @param date Date to calculate discount factors for\\n     *\\n     */\\n    function interpolateDF(\\n        uint256[] memory discountFactors,\\n        uint256[] memory terms,\\n        uint256 date\\n    ) public view returns (uint256) {\\n        DFInterpolationLocalVars memory vars;\\n        vars.timeDelta = date.sub(block.timestamp);\\n\\n        if (vars.timeDelta <= terms[0].mul(86400)) {\\n            vars.termSeconds = terms[0].mul(86400);\\n            vars.left = vars.termSeconds.sub(vars.timeDelta);\\n\\n            return\\n                (BP.mul(vars.left).add(discountFactors[0].mul(vars.timeDelta)))\\n                    .div(vars.termSeconds);\\n        } else {\\n            for (uint256 i = 1; i < terms.length; i++) {\\n                vars.termSeconds = terms[i].mul(86400);\\n                vars.prevTermSeconds = terms[i - 1].mul(86400);\\n\\n                if (\\n                    vars.prevTermSeconds < vars.timeDelta &&\\n                    vars.timeDelta <= vars.termSeconds\\n                ) {\\n                    vars.left = vars.timeDelta.sub(vars.prevTermSeconds);\\n\\n                    if (vars.left == 0) {\\n                        return discountFactors[i]; // gas savings only\\n                    }\\n\\n                    vars.right = vars.termSeconds.sub(vars.timeDelta);\\n                    if (vars.right == 0) {\\n                        return discountFactors[i];\\n                    }\\n\\n                    vars.total = vars.termSeconds.sub(vars.prevTermSeconds);\\n\\n                    return (\\n                        (discountFactors[i - 1].mul(vars.right))\\n                            .add((discountFactors[i].mul(vars.left)))\\n                            .div(vars.total)\\n                    );\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6767e46906ab5eeca1cedda8afbcc4a01658c8e08220bdacd8756fc126b650b9\",\"license\":\"MIT\"},\"contracts/libraries/HitchensOrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary HitchensOrderStatisticsTreeLib {\\n    using SafeMath for uint256;\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint256 head;\\n        uint256 tail;\\n        uint256 orderCounter;\\n        mapping(uint256 => OrderItem) orders;\\n    }\\n\\n    struct OrderItem {\\n        uint256 orderId;\\n        uint256 next;\\n        uint256 prev;\\n        uint256 timestamp;\\n        uint256 amount;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].right != EMPTY) {\\n            _value = self.nodes[_value].right;\\n        }\\n    }\\n\\n    function next(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint256 _cursor)\\n    {\\n        require(\\n            value != EMPTY,\\n            \\\"OrderStatisticsTree(401) - Starting value cannot be zero\\\"\\n        );\\n        if (self.nodes[value].right != EMPTY) {\\n            _cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint256 _cursor)\\n    {\\n        require(\\n            value != EMPTY,\\n            \\\"OrderStatisticsTree(402) - Starting value cannot be zero\\\"\\n        );\\n        if (self.nodes[value].left != EMPTY) {\\n            _cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (bool _exists)\\n    {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        if (self.nodes[value].parent != EMPTY) return true;\\n        return false;\\n    }\\n\\n    function amountExistsInNode(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        if (!exists(self, value)) return false;\\n        return isAmountExistsInList(self, value, amount);\\n    }\\n\\n    function orderExistsInNode(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal view returns (bool) {\\n        if (!exists(self, value)) return false;\\n        return isOrderIdExists(self, value, amount, orderId);\\n    }\\n\\n    function getNode(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(\\n            exists(self, value),\\n            \\\"OrderStatisticsTree(403) - Value does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n        return (\\n            gn.parent,\\n            gn.left,\\n            gn.right,\\n            gn.red,\\n            gn.head,\\n            gn.tail,\\n            gn.orderCounter\\n        );\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256 _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal {\\n        require(\\n            value != EMPTY,\\n            \\\"OrderStatisticsTree(405) - Value to insert cannot be zero\\\"\\n        );\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                insertOrder(self, probe, amount, orderId);\\n                return;\\n            }\\n        }\\n        Node storage nValue = self.nodes[value];\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n        insertOrder(self, value, amount, orderId);\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal {\\n        require(\\n            value != EMPTY,\\n            \\\"OrderStatisticsTree(407) - Value to delete cannot be zero\\\"\\n        );\\n        require(\\n            orderExistsInNode(self, amount, value, orderId),\\n            \\\"OrderStatisticsTree(408) - Value to delete does not exist.\\\"\\n        );\\n        Node storage nValue = self.nodes[value];\\n        removeOrder(self, value, orderId);\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (\\n                self.nodes[value].left == EMPTY ||\\n                self.nodes[value].right == EMPTY\\n            ) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (\\n                valueParent == self.nodes[self.nodes[valueParent].parent].left\\n            ) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint256 a,\\n        uint256 b\\n    ) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(\\n            exists(self, value),\\n            \\\"OrderStatisticsTree(403) - Value does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        return (\\n            order.orderId,\\n            order.next,\\n            order.prev,\\n            order.timestamp,\\n            order.amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function isOrderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 amount,\\n        uint256 orderId\\n    ) internal view returns (bool) {\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        if (order.amount != amount) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Return boolean if value and amount exist in doubly linked list.\\n     */\\n    function isAmountExistsInList(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 amount\\n    ) internal view returns (bool) {\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[gn.head];\\n        while (order.next != 0 && order.amount < amount) {\\n            order = gn.orders[order.next];\\n        }\\n        if (order.amount == 0) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Return the id of the first OrderItem matching `_amount` in the amount field.\\n     */\\n    function findOrderIdForAmount(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 amount\\n    ) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[gn.head];\\n        while (order.orderId != gn.tail && order.amount < amount) {\\n            order = gn.orders[order.next];\\n        }\\n        if (order.amount >= amount) {\\n            return order.orderId;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reduces order amount once market order taken.\\n     */\\n    function fillOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId,\\n        uint256 _amount\\n    ) internal returns (bool) {\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        uint256 newAmount = order.amount.sub(_amount);\\n        gn.orders[orderId].amount = newAmount;\\n\\n        if (gn.orders[orderId].amount == 0) {\\n            remove(self, newAmount, value, orderId);\\n        } else {\\n            if (gn.orders[gn.head].amount < newAmount) {\\n                OrderItem memory rootOrder = gn.orders[gn.head];\\n                while (\\n                    rootOrder.orderId != gn.tail && rootOrder.amount < newAmount\\n                ) {\\n                    rootOrder = gn.orders[rootOrder.next];\\n                }\\n                if (order.amount > _amount) {\\n                    OrderItem memory prevOrder = gn.orders[rootOrder.prev];\\n                    _link(self, value, order.orderId, rootOrder.orderId);\\n                    _link(self, value, prevOrder.orderId, order.orderId);\\n                } else {\\n                    OrderItem memory nextOrder = gn.orders[rootOrder.next];\\n                    _link(self, value, order.orderId, nextOrder.orderId);\\n                    _link(self, value, rootOrder.orderId, order.orderId);\\n                }\\n            } else {\\n                _link(self, value, order.orderId, gn.head);\\n                _setHead(self, value, order.orderId);\\n                if (gn.tail == 0) _setTail(self, value, order.orderId);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Up size order by market maker.\\n     */\\n    function upSizeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId,\\n        uint256 _amount\\n    ) internal returns (bool) {\\n        require(_amount > 0, \\\"Couldn't up size order with 0\\\");\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        uint256 newAmount = order.amount.add(_amount);\\n        gn.orders[orderId].amount = newAmount;\\n\\n        if (gn.orders[gn.head].amount < newAmount) {\\n            OrderItem memory rootOrder = gn.orders[gn.head];\\n            while (\\n                rootOrder.orderId != gn.tail && rootOrder.amount < newAmount\\n            ) {\\n                rootOrder = gn.orders[rootOrder.next];\\n            }\\n            if (order.amount > _amount) {\\n                OrderItem memory prevOrder = gn.orders[rootOrder.prev];\\n                _link(self, value, order.orderId, rootOrder.orderId);\\n                _link(self, value, prevOrder.orderId, order.orderId);\\n            } else {\\n                OrderItem memory nextOrder = gn.orders[rootOrder.next];\\n                _link(self, value, order.orderId, nextOrder.orderId);\\n                _link(self, value, rootOrder.orderId, order.orderId);\\n            }\\n        } else {\\n            _link(self, value, order.orderId, gn.head);\\n            _setHead(self, value, order.orderId);\\n            if (gn.tail == 0) _setTail(self, value, order.orderId);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount,\\n        uint256 _orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n        uint256 orderId = _createOrder(self, value, _amount, _orderId);\\n        _link(self, value, orderId, gn.head);\\n        _setHead(self, value, orderId);\\n        if (gn.tail == 0) _setTail(self, value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount,\\n        uint256 _orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, value, _amount, _orderId);\\n        } else {\\n            uint256 orderId = _createOrder(self, value, _amount, _orderId);\\n            _link(self, value, gn.tail, orderId);\\n            _setTail(self, value, orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the List.\\n     */\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal {\\n        require(\\n            exists(self, value),\\n            \\\"OrderStatisticsTree(403) - Value does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem after the last OrderItem with the same `_amount`.\\n     */\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount,\\n        uint256 _orderId\\n    ) internal {\\n        require(_amount > 0, \\\"Insuficient amount\\\");\\n\\n        Node storage gn = self.nodes[value];\\n        if (gn.head == 0) {\\n            addHead(self, value, _amount, _orderId);\\n        } else {\\n            if (gn.orders[gn.head].amount < _amount) {\\n                OrderItem memory order = gn.orders[gn.head];\\n                while (order.next != 0 && order.amount <= _amount) {\\n                    order = gn.orders[order.next];\\n                }\\n                if (order.amount > _amount) {\\n                    insertOrderBefore(\\n                        self,\\n                        value,\\n                        order.orderId,\\n                        _amount,\\n                        _orderId\\n                    );\\n                } else {\\n                    insertOrderAfter(\\n                        self,\\n                        value,\\n                        order.orderId,\\n                        _amount,\\n                        _orderId\\n                    );\\n                }\\n            } else {\\n                addHead(self, value, _amount, _orderId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderImer after the Order denoted by `_id` with `_amount` and `_orderId` in the amount field.\\n     */\\n    function insertOrderAfter(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _prevId,\\n        uint256 _amount,\\n        uint256 _orderId\\n    ) internal {\\n        require(_amount > 0, \\\"Insuficient amount\\\");\\n\\n        Node storage gn = self.nodes[value];\\n\\n        if (_prevId == gn.tail) {\\n            addTail(self, value, _amount, _orderId);\\n        } else {\\n            OrderItem memory prevOrder = gn.orders[_prevId];\\n            OrderItem memory nextOrder = gn.orders[prevOrder.next];\\n            uint256 newOrderId = _createOrder(self, value, _amount, _orderId);\\n            _link(self, value, newOrderId, nextOrder.orderId);\\n            _link(self, value, prevOrder.orderId, newOrderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new Object before the Object denoted by `_id` with `_amount` and `_orderId` in the data field.\\n     */\\n    function insertOrderBefore(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _nextId,\\n        uint256 _amount,\\n        uint256 _orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        if (_nextId == gn.head) {\\n            addHead(self, value, _amount, _orderId);\\n        } else {\\n            insertOrderAfter(\\n                self,\\n                value,\\n                gn.orders[_nextId].prev,\\n                _amount,\\n                _orderId\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 amount,\\n        uint256 orderId\\n    ) internal returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        uint256 newId;\\n        if (gn.orderCounter == 0) {\\n            newId = 1;\\n        }\\n        gn.orderCounter += 1;\\n        OrderItem memory order = OrderItem(\\n            orderId,\\n            0,\\n            0,\\n            block.timestamp,\\n            amount\\n        );\\n        gn.orders[order.orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _prevId,\\n        uint256 _nextId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[_prevId].next = _nextId;\\n        gn.orders[_nextId].prev = _prevId;\\n    }\\n}\\n\",\"keccak256\":\"0xc55252beddee94272d469c12e35cb339c2f7a7b2e391532989a9e26a39ae4358\",\"license\":\"MIT\"},\"contracts/libraries/QuickSort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nlibrary QuickSort {\\n    function sort(uint256[] memory data)\\n        public\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        quickSort(data, int256(0), int256(data.length - 1));\\n        return data;\\n    }\\n\\n    function quickSort(\\n        uint256[] memory arr,\\n        int256 left,\\n        int256 right\\n    ) internal pure {\\n        int256 i = left;\\n        int256 j = right;\\n        if (i == j) return;\\n        uint256 pivot = arr[uint256(left + (right - left) / 2)];\\n        while (i <= j) {\\n            while (arr[uint256(i)] < pivot) i++;\\n            while (pivot < arr[uint256(j)]) j--;\\n            if (i <= j) {\\n                (arr[uint256(i)], arr[uint256(j)]) = (\\n                    arr[uint256(j)],\\n                    arr[uint256(i)]\\n                );\\n                i++;\\n                j--;\\n            }\\n        }\\n        if (left < j) quickSort(arr, left, j);\\n        if (i < right) quickSort(arr, i, right);\\n    }\\n}\\n\",\"keccak256\":\"0xa5f69c479336cf32972248642fdb835576b7ef7de8e869a8e009624d546755e0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c806378f7b516116100a2578063b3cb845011610071578063b3cb84501461023e578063d04cad0214610251578063e52f2a9214610264578063e5a1481314610277578063e99d05381461027f57610116565b806378f7b516146101f05780638da5cb5b1461020357806393e7c1071461020b5780639ccec2061461021e57610116565b80631b30a288116100e95780631b30a2881461019a578063201b2fa9146101ba5780632717547f146101c257806332942ff6146101d557806360cc8600146101e857610116565b8063085b616e1461011b57806308ca5abe146101445780630a2b20081461016457806313af403514610185575b600080fd5b61012e61012936600461144e565b610292565b60405161013b91906114c1565b60405180910390f35b61015761015236600461144e565b6102b8565b60405161013b919061157a565b610177610172366004611436565b6102e6565b60405161013b9291906114e8565b6101986101933660046112ae565b61039c565b005b6101ad6101a8366004611436565b610450565b60405161013b91906114d5565b6101576105da565b6101ad6101d0366004611436565b6105e0565b6101986101e33660046112ae565b610762565b61012e6107ae565b61012e6101fe36600461144e565b6107bd565b61012e610b36565b6101ad610219366004611436565b610b45565b61023161022c3660046112dc565b610ba7565b60405161013b919061156f565b61023161024c366004611436565b610c99565b61019861025f3660046112ae565b610e05565b6101ad610272366004611436565b610e51565b61012e610fd3565b61023161028d366004611436565b610fe2565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b600560205281600052604060002081815481106102d157fe5b90600052602060002001600091509150505481565b60608060606102f484610450565b600085815260056020526040908190209051635e1a138360e01b815291925073__$f506ca7a99b3e1b46d3b28bedafd5dc4fc$__91635e1a13839161033e91859190600401611516565b60006040518083038186803b15801561035657600080fd5b505af415801561036a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261039291908101906113b5565b9250925050915091565b6000546001600160a01b031633146103cf5760405162461bcd60e51b81526004016103c690611673565b60405180910390fd5b6001600160a01b0381166103f55760405162461bcd60e51b81526004016103c6906115b0565b600080546040516001600160a01b03808516939216917fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c91a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b606080600560008481526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156104b057602002820191906000526020600020905b81548152602001906001019080831161049c575b505050505090506060815167ffffffffffffffff811180156104d157600080fd5b506040519080825280602002602001820160405280156104fb578160200160208202803683370190505b50905060005b82518110156105d257600083828151811061051857fe5b602090810291909101810151600088815260048084526040808320848452855291829020548251637d37adff60e11b815292519395506001600160a01b031693849363fa6f5bfe938084019390829003018186803b15801561057957600080fd5b505afa15801561058d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b1919061146f565b8484815181106105bd57fe5b60209081029190910101525050600101610501565b509392505050565b60035481565b6060806005600084815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561064057602002820191906000526020600020905b81548152602001906001019080831161062c575b505050505090506060815167ffffffffffffffff8111801561066157600080fd5b5060405190808252806020026020018201604052801561068b578160200160208202803683370190505b50905060005b82518110156105d25760008382815181106106a857fe5b602090810291909101810151600088815260048084526040808320848452855291829020548251634474638b60e11b815292519395506001600160a01b03169384936388e8c716938084019390829003018186803b15801561070957600080fd5b505afa15801561071d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610741919061146f565b84848151811061074d57fe5b60209081029190910101525050600101610691565b6000546001600160a01b0316331461078c5760405162461bcd60e51b81526004016103c690611673565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b600080546001600160a01b031633146107e85760405162461bcd60e51b81526004016103c690611673565b600154604051636a6a7b6760e11b81526001600160a01b039091169063d4d4f6ce9061081890869060040161157a565b60206040518083038186803b15801561083057600080fd5b505afa158015610844573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108689190611416565b6108845760405162461bcd60e51b81526004016103c6906115e7565b60025460405163072d3da560e01b81526001600160a01b039091169063072d3da5906108bf9085906321aaa47b60e01b90889060040161169b565b60206040518083038186803b1580156108d757600080fd5b505afa1580156108eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090f9190611416565b61092b5760405162461bcd60e51b81526004016103c690611647565b60008381526004602090815260408083208584529091529020546001600160a01b03161561096b5760405162461bcd60e51b81526004016103c690611612565b82823060405161097a9061113d565b61098693929190611591565b604051809103906000f0801580156109a2573d6000803e3d6000fd5b506000848152600460209081526040808320868452825280832080546001600160a01b0319166001600160a01b038616179055868352600582528083208054600181018255818552838520018790559287905282548151818402810184019092528082529394509290830182828015610a3a57602002820191906000526020600020905b815481526020019060010190808311610a26575b5050604051634f64581360e11b815273__$69df8f3ef0941d5dac5ad52c193381be4b$__94639ec8b0269450610a75935091506004016114d5565b60006040518083038186803b158015610a8d57600080fd5b505af4158015610aa1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ac9919081019061137a565b60008481526005602090815260409091208251610aec939192919091019061114b565b50806001600160a01b03167fc7a36e305c24c29c70a857e8120aadffc2c02608f44c29aac2c49d3a5f4c98128484604051610b28929190611583565b60405180910390a292915050565b6000546001600160a01b031681565b600081815260056020908152604091829020805483518184028101840190945280845260609392830182828015610b9b57602002820191906000526020600020905b815481526020019060010190808311610b87575b50505050509050919050565b6000805b82518160ff161015610c9357610bbf611196565b838260ff1681518110610bce57fe5b602090810291909101810151805160009081526004808452604080832084860151845290945290839020548383015160608401516080850151955163db77751d60e01b81529496506001600160a01b0390921694859463db77751d94610c36949291016116bb565b602060405180830381600087803b158015610c5057600080fd5b505af1158015610c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c889190611416565b505050600101610bab565b50919050565b600080546001600160a01b03163314610cc45760405162461bcd60e51b81526004016103c690611673565b600082815260056020908152604091829020805483518184028101840190945280845260609392830182828015610d1a57602002820191906000526020600020905b815481526020019060010190808311610d06575b5050505050905060005b8151811015610dc4576000828281518110610d3b57fe5b60209081029190910181015160008781526004808452604080832084845290945283822054845163280dce3760e21b815294519395506001600160a01b031693849363a03738dc9382840193909282900301818387803b158015610d9e57600080fd5b505af1158015610db2573d6000803e3d6000fd5b505060019094019350610d2492505050565b507f2925c70165043bf69d7a10fd5715a4f22827df42deaa6bf1968dcd8f83866e5a83604051610df4919061157a565b60405180910390a150600192915050565b6000546001600160a01b03163314610e2f5760405162461bcd60e51b81526004016103c690611673565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60608060056000848152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610eb157602002820191906000526020600020905b815481526020019060010190808311610e9d575b505050505090506060815167ffffffffffffffff81118015610ed257600080fd5b50604051908082528060200260200182016040528015610efc578160200160208202803683370190505b50905060005b82518110156105d2576000838281518110610f1957fe5b60209081029190910181015160008881526004808452604080832084845285529182902054825163017438bd60e71b815292519395506001600160a01b031693849363ba1c5e80938084019390829003018186803b158015610f7a57600080fd5b505afa158015610f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb2919061146f565b848481518110610fbe57fe5b60209081029190910101525050600101610f02565b6001546001600160a01b031681565b600080546001600160a01b0316331461100d5760405162461bcd60e51b81526004016103c690611673565b60008281526005602090815260409182902080548351818402810184019094528084526060939283018282801561106357602002820191906000526020600020905b81548152602001906001019080831161104f575b5050505050905060005b815181101561110d57600082828151811061108457fe5b602090810291909101810151600087815260048084526040808320848452909452838220548451630b0863e760e11b815294519395506001600160a01b0316938493631610c7ce9382840193909282900301818387803b1580156110e757600080fd5b505af11580156110fb573d6000803e3d6000fd5b50506001909401935061106d92505050565b507f13b9f265593f671f36073448e3ef1b7690f184c135f5392b1025e38781a5a1ea83604051610df4919061157a565b6132ec806200171e83390190565b828054828255906000526020600020908101928215611186579160200282015b8281111561118657825182559160200191906001019061116b565b506111929291506111cb565b5090565b6040518060a001604052806000801916815260200160008152602001600060ff16815260200160008152602001600081525090565b5b8082111561119257600081556001016111cc565b600082601f8301126111f0578081fd5b81516112036111fe826116fd565b6116d6565b81815291506020808301908481018184028601820187101561122457600080fd5b60005b8481101561124357815184529282019290820190600101611227565b505050505092915050565b600060a0828403121561125f578081fd5b61126960a06116d6565b90508135815260208201356020820152604082013560ff8116811461128d57600080fd5b80604083015250606082013560608201526080820135608082015292915050565b6000602082840312156112bf578081fd5b81356001600160a01b03811681146112d5578182fd5b9392505050565b600060208083850312156112ee578182fd5b823567ffffffffffffffff811115611304578283fd5b8301601f81018513611314578283fd5b80356113226111fe826116fd565b8181528381019083850160a0808502860187018a1015611340578788fd5b8795505b8486101561136c576113568a8361124e565b8452600195909501949286019290810190611344565b509098975050505050505050565b60006020828403121561138b578081fd5b815167ffffffffffffffff8111156113a1578182fd5b6113ad848285016111e0565b949350505050565b600080604083850312156113c7578081fd5b825167ffffffffffffffff808211156113de578283fd5b6113ea868387016111e0565b935060208501519150808211156113ff578283fd5b5061140c858286016111e0565b9150509250929050565b600060208284031215611427578081fd5b815180151581146112d5578182fd5b600060208284031215611447578081fd5b5035919050565b60008060408385031215611460578182fd5b50508035926020909101359150565b600060208284031215611480578081fd5b5051919050565b6000815180845260208085019450808401835b838110156114b65781518752958201959082019060010161149a565b509495945050505050565b6001600160a01b0391909116815260200190565b6000602082526112d56020830184611487565b6000604082526114fb6040830185611487565b828103602084015261150d8185611487565b95945050505050565b6000604082526115296040830185611487565b828103602084810191909152845480835285845281842092820190845b8181101561156257845483526001948501949284019201611546565b5090979650505050505050565b901515815260200190565b90815260200190565b918252602082015260400190565b92835260208301919091526001600160a01b0316604082015260600190565b6020808252601d908201527f6e6577206f776e657220697320746865207a65726f2061646472657373000000604082015260600190565b6020808252601190820152704e4f4e20535550504f525445442043435960781b604082015260600190565b6020808252818101527f436f756c646e27742072657772697465206578697374696e67206d61726b6574604082015260600190565b6020808252601290820152714e4f4e20535550504f52544544205445524d60701b604082015260600190565b6020808252600e908201526d494e56414c49445f41434345535360901b604082015260600190565b9283526001600160e01b0319919091166020830152604082015260600190565b60ff9390931683526020830191909152604082015260600190565b60405181810167ffffffffffffffff811182821017156116f557600080fd5b604052919050565b600067ffffffffffffffff821115611713578081fd5b506020908102019056fe60806040523480156200001157600080fd5b50604051620032ec380380620032ec833981016040819052620000349162000071565b60016000819055805460ff19169055600492909255600555600680546001600160a01b0319166001600160a01b03909216919091179055620000b7565b60008060006060848603121562000086578283fd5b83516020850151604086015191945092506001600160a01b0381168114620000ac578182fd5b809150509250925092565b61322580620000c76000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063886abef5116100ad578063ba1c5e8011610071578063ba1c5e8014610236578063d09ef2411461023e578063db77751d1461025e578063fa52dc0a14610271578063fa6f5bfe1461027957610121565b8063886abef5146101cc57806388e8c716146101df578063a03738dc146101e7578063a85c38ef146101ef578063abdddddd1461021257610121565b8063514fcac7116100f4578063514fcac71461018157806354141a63146101a157806356861532146101a95780635c975abb146101bc578063687e3b0b146101c457610121565b80631610c7ce146101265780633644ca451461013057806341f7b09214610159578063486327181461016c575b600080fd5b61012e610281565b005b61014361013e366004612b57565b61035f565b6040516101509190612c27565b60405180910390f35b61012e610167366004612b07565b6103e8565b6101746104d5565b6040516101509190612ba6565b61019461018f366004612b8e565b6104e4565b6040516101509190612c1c565b610143610718565b6101746101b7366004612b8e565b61071e565b61019461073f565b610143610748565b61012e6101da366004612b07565b61074e565b610143610841565b61012e610852565b6102026101fd366004612b8e565b610925565b6040516101509493929190612c30565b610225610220366004612b8e565b610959565b6040516101509594939291906131a9565b610143610a1e565b61025161024c366004612b8e565b610a2a565b6040516101509190613109565b61019461026c366004612b57565b610a99565b610143610b43565b610143610b49565b600660009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102cf57600080fd5b505afa1580156102e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103079190612b23565b6001600160a01b0316336001600160a01b0316148061033057506006546001600160a01b031633145b6103555760405162461bcd60e51b815260040161034c90612fa2565b60405180910390fd5b61035d610b83565b565b60008084600181111561036e57fe5b14156103ae5761037f600a83610bf1565b61039b5760405162461bcd60e51b815260040161034c90612f57565b6103a7600a8385610c39565b90506103e1565b6103b9600883610bf1565b6103d55760405162461bcd60e51b815260040161034c90612f57565b6103a760088385610c39565b9392505050565b600660009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561043657600080fd5b505afa15801561044a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046e9190612b23565b6001600160a01b0316336001600160a01b0316148061049757506006546001600160a01b031633145b6104b35760405162461bcd60e51b815260040161034c90612fa2565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b031681565b6000816104f08161071e565b6001600160a01b0316336001600160a01b0316146105205760405162461bcd60e51b815260040161034c90613064565b610528610d3a565b610530612aa6565b600084815260076020526040908190208151608081019092528054829060ff16600181111561055b57fe5b600181111561056657fe5b815260018201546020820152600282015460408201526003909101546001600160a01b031660609091015290506000815160018111156105a257fe5b14156105c457602081015160408201516105bf9160089187610d5f565b6105f0565b6001815160018111156105d357fe5b14156105f057602081015160408201516105f091600a9187610d5f565b60008481526007602090815260408220805460ff191681556001808201849055600282019390935560030180546001600160a01b031916905590546060830151600454928401516101009092046001600160a01b031692638cbf5e78926106679061271090610661906107d0610ffa565b90611034565b6040518463ffffffff1660e01b815260040161068593929190612bba565b600060405180830381600087803b15801561069f57600080fd5b505af11580156106b3573d6000803e3d6000fd5b5050505080606001516001600160a01b03167ff523a00826d700cad9c1a6b2bb68b57937b6f76e89dc6fe5206389e1a97d3f80858360000151846020015185604001516040516107069493929190613182565b60405180910390a25060019392505050565b60035481565b6000818152600760205260409020600301546001600160a01b03165b919050565b60015460ff1690565b60045481565b600660009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561079c57600080fd5b505afa1580156107b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d49190612b23565b6001600160a01b0316336001600160a01b031614806107fd57506006546001600160a01b031633145b6108195760405162461bcd60e51b815260040161034c90612fa2565b600180546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b600061084d6008611066565b905090565b600660009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a057600080fd5b505afa1580156108b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d89190612b23565b6001600160a01b0316336001600160a01b0316148061090157506006546001600160a01b031633145b61091d5760405162461bcd60e51b815260040161034c90612fa2565b61035d6110a8565b600760205260009081526040902080546001820154600283015460039093015460ff9092169290916001600160a01b031684565b6000806000806000610969612aa6565b600087815260076020526040908190208151608081019092528054829060ff16600181111561099457fe5b600181111561099f57fe5b815260018201546020820152600282015460408201526003909101546001600160a01b031660609091015290506000815160018111156109db57fe5b1415610a035760408101516109f39060089089611102565b9550955095509550955050610a15565b60408101516109f390600a9089611102565b91939590929450565b600061084d600a611066565b610a32612aa6565b600082815260076020526040908190208151608081019092528054829060ff166001811115610a5d57fe5b6001811115610a6857fe5b815260018201546020820152600282015460408201526003909101546001600160a01b031660609091015292915050565b600060026000541415610abe5760405162461bcd60e51b815260040161034c906130d2565b6002600090815580856001811115610ad257fe5b1415610b0557610ae4600a8486610c39565b90508015610b0057610af8600182866111aa565b915050610b37565b610b25565b610b1160088486610c39565b90508015610b2557610af8600082866111aa565b610b30858585611463565b5060019150505b60016000559392505050565b60055481565b600080610b54610a1e565b90506000610b60610841565b90506000610b6e838361169e565b9050610b7b816002611034565b935050505090565b610b8b61073f565b610ba75760405162461bcd60e51b815260040161034c90612c63565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610bda6116c3565b604051610be79190612ba6565b60405180910390a1565b600081610c0057506000610c33565b8254821415610c1157506001610c33565b600082815260018401602052604090205415610c2f57506001610c33565b5060005b92915050565b60008281526001840160205260408120610c51612ad8565b816007016000836004015481526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090505b6005820154815114801590610cc25750838160800151105b15610d1a576020908101516000908152600783018252604090819020815160a0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600401546080820152610caa565b83816080015110610d2f575191506103e19050565b6000925050506103e1565b610d4261073f565b1561035d5760405162461bcd60e51b815260040161034c9061303d565b81610d7c5760405162461bcd60e51b815260040161034c90612d93565b610d88848484846116c7565b610da45760405162461bcd60e51b815260040161034c90612ea1565b60008281526001850160205260409020610dbf8584846116f6565b600080826006015460001415610ff15760008581526001808901602052604090912001541580610e0057506000858152600188016020526040902060020154155b15610e0c575083610e54565b5060008481526001870160205260409020600201545b600081815260018089016020526040909120015415610e54576000908152600180880160205260409091200154610e22565b600081815260018089016020526040909120015415610e885760008181526001808901602052604090912001549150610e9f565b600081815260018801602052604090206002015491505b60008181526001880160205260408082205484835291208190558015610f115760008181526001808a0160205260409091200154821415610ef55760008181526001808a01602052604090912001839055610f0c565b600081815260018901602052604090206002018390555b610f15565b8288555b600082815260018901602052604090206003015460ff1615868314610f9f57610f3f898489611884565b600087815260018a8101602052604080832080830154878552828520938401819055845281842087905560028082015490840181905584529083208690556003908101549286905201805460ff191660ff90921615159190911790559195915b8015610faf57610faf89856118fe565b505060008181526001808901602052604082208281559081018290556002810182905560038101805460ff191690556004810182905560058101829055600601555b50505050505050565b60008261100957506000610c33565b8282028284828161101657fe5b04146103e15760405162461bcd60e51b815260040161034c90612fcc565b60008082116110555760405162461bcd60e51b815260040161034c90612df0565b81838161105e57fe5b049392505050565b8054806110755750600061073a565b5b60008181526001830160205260409020600201541561073a576000908152600182016020526040902060020154611076565b6110b061073f565b156110cd5760405162461bcd60e51b815260040161034c90612e77565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610bda6116c3565b60008060008060006111148888610bf1565b6111305760405162461bcd60e51b815260040161034c90612e27565b60008781526001890160205260409020611148612ad8565b5060009687526007016020908152604096879020875160a0810189528154808252600183015493820184905260028301549982018a905260038301546060830181905260049093015460809092018290529b929a509798509695509350505050565b60006111b4612aa6565b600084815260076020526040908190208151608081019092528054829060ff1660018111156111df57fe5b60018111156111ea57fe5b81526001820154602080830191909152600283015460408301526003909201546001600160a01b031660609091015281015190915083111561123e5760405162461bcd60e51b815260040161034c90612efe565b60608101516001600160a01b031633141561126b5760405162461bcd60e51b815260040161034c9061309b565b611273610d3a565b60208101516112829084611d19565b600085815260076020526040812060010191909155815160018111156112a457fe5b14156112de5760408101516112bd906008908686611d41565b6112d95760405162461bcd60e51b815260040161034c90612f2a565b611322565b6001815160018111156112ed57fe5b141561132257604081015161130690600a908686611d41565b6113225760405162461bcd60e51b815260040161034c90612f2a565b600254606082015182516001600160a01b039092169163114cc2ec91903390600181111561134c57fe5b6004546005548988604001516040518863ffffffff1660e01b815260040161137a9796959493929190612bdb565b602060405180830381600087803b15801561139457600080fd5b505af11580156113a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cc9190612b3f565b50336001600160a01b03167f966c5ef9d077123e79f6a459e7ced8ef6f2a106683fa26d6ea3a4b0df8a34b5b85878685604001516040516114109493929190613182565b60405180910390a26020810151611458576000848152600760205260408120805460ff1916815560018101829055600281019190915560030180546001600160a01b03191690555b506001949350505050565b600061146d612aa6565b6000841161148d5760405162461bcd60e51b815260040161034c90612d5c565b600083116114ad5760405162461bcd60e51b815260040161034c9061300d565b6114b5610d3a565b808560018111156114c257fe5b908160018111156114cf57fe5b90525060208101849052604081018390523360608201526114ee61203a565b6000818152600760205260409020825181549294508392829060ff19166001838181111561151857fe5b0217905550602082015160018281019190915560408301516002830155606090920151600390910180546001600160a01b0319166001600160a01b03928316179055905460045461010090910490911690639fcaebfa9033906115836127106106618a6107d0610ffa565b6040518463ffffffff1660e01b81526004016115a193929190612bba565b600060405180830381600087803b1580156115bb57600080fd5b505af11580156115cf573d6000803e3d6000fd5b50600092506115dc915050565b815160018111156115e957fe5b141561160b57602081015160408201516116069160089185612048565b611637565b60018151600181111561161a57fe5b1415611637576020810151604082015161163791600a9185612048565b80606001516001600160a01b03167f9baa679e9516a3acae8c0deb69798eb2824dd6984b54d21dd4942c76511f4d318383600001516004546005548660200151876040015160405161168e9695949392919061314a565b60405180910390a2509392505050565b6000828201838110156103e15760405162461bcd60e51b815260040161034c90612c91565b3390565b60006116d38584610bf1565b6116df575060006116ee565b6116eb85848685612164565b90505b949350505050565b6117008383610bf1565b61171c5760405162461bcd60e51b815260040161034c90612e27565b60008281526001840160205260409020611734612ad8565b8160070160008481526020019081526020016000206040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481525050905082826004015414801561179e5750828260050154145b156117c0576117af858560006121ea565b6117bb85856000612201565b611847565b82826004015414156117fa576117db858583602001516121ea565b6020808201516000908152600784019091526040812060020155611847565b82826005015414156118335761181585858360400151612201565b60408082015160009081526007840160205290812060010155611847565b611847858583604001518460200151612218565b5160009081526007820160205260408120818155600181018290556002810182905560038101829055600401556006018054600019019055505050565b6000818152600184016020526040808220548483529120819055806118ab578284556118f8565b60008181526001808601602052604090912001548214156118e157600081815260018086016020526040909120018390556118f8565b600081815260018501602052604090206002018390555b50505050565b60005b825482148015906119265750600082815260018401602052604090206003015460ff16155b15611cfa576000828152600180850160205260408083205480845292200154831415611b235760008181526001850160205260408082206002015480835291206003015490925060ff16156119ca576000828152600180860160205260408083206003908101805460ff199081169091558585529190932090920180549092161790556119b38482612249565b600081815260018501602052604090206002015491505b60008281526001808601602052604080832090910154825290206003015460ff16158015611a155750600082815260018501602052604080822060020154825290206003015460ff16155b15611a4257600082815260018581016020526040909120600301805460ff19169091179055915081611b1e565b600082815260018501602052604080822060020154825290206003015460ff16611abf576000828152600180860160205260408083208083015484529083206003908101805460ff1990811690915593869052018054909216179055611aa88483612321565b600081815260018501602052604090206002015491505b600081815260018501602052604080822060039081018054868552838520808401805460ff909316151560ff199384161790558254821690925560029091015484529190922090910180549091169055611b198482612249565b835492505b611cf4565b6000818152600180860160205260408083209091015480835291206003015490925060ff1615611ba2576000828152600180860160205260408083206003908101805460ff19908116909155858552919093209092018054909216179055611b8b8482612321565b600081815260018086016020526040909120015491505b600082815260018501602052604080822060020154825290206003015460ff16158015611bed575060008281526001808601602052604080832090910154825290206003015460ff16155b15611c1a57600082815260018581016020526040909120600301805460ff19169091179055915081611cf4565b60008281526001808601602052604080832090910154825290206003015460ff16611c9957600082815260018086016020526040808320600281015484529083206003908101805460ff1990811690915593869052018054909216179055611c828483612249565b600081815260018086016020526040909120015491505b60008181526001808601602052604080832060039081018054878652838620808401805460ff909316151560ff19938416179055825482169092559301548452922090910180549091169055611cef8482612321565b835492505b50611901565b506000908152600190910160205260409020600301805460ff19169055565b600082821115611d3b5760405162461bcd60e51b815260040161034c90612d25565b50900390565b60008381526001850160205260408120611d59612ad8565b5060008481526007820160209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600381015460608301526004015460808201819052909190611db39086611d19565b60008781526007850160205260409020600401819055905080611de157611ddc88828989610d5f565b61202c565b600480840154600090815260078501602052604090200154811115611ff157611e08612ad8565b836007016000856004015481526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090505b6005840154815114801590611e795750818160800151105b15611ed1576020908101516000908152600785018252604090819020815160a0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600401546080820152611e61565b8583608001511115611f6b57611ee5612ad8565b846007016000836040015181526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050611f518a8a86600001518560000151612218565b611f658a8a83600001518760000151612218565b50611feb565b611f73612ad8565b506020808201516000908152600786018252604090819020815160a08101835281548082526001830154948201949094526002820154928101929092526003810154606083015260040154608082015284519091611fd5918c918c9190612218565b611fe98a8a84600001518760000151612218565b505b5061202c565b612005888884600001518660040154612218565b612014888884600001516121ea565b600583015461202c5761202c88888460000151612201565b506001979650505050505050565b600380546001019081905590565b816120655760405162461bcd60e51b815260040161034c90612cc8565b83546000905b80156120d657809150808410156120955760009081526001808701602052604090912001546120d1565b808411156120b65760009081526001860160205260409020600201546120d1565b808414156120d1576120ca868287866123f6565b50506118f8565b61206b565b6000848152600180880160205260408220848155808201839055600281019290925560038201805460ff19169091179055612113878688876123f6565b826121205784875561215a565b82851015612143576000838152600180890160205260409091200185905561215a565b600083815260018801602052604090206002018590555b610ff1878661257b565b6000838152600185016020526040812061217c612ad8565b506000838152600782016020908152604091829020825160a08101845281548152600182015492810192909252600281015492820192909252600382015460608201526004909101546080820181905285146121dd576000925050506116ee565b5060019695505050505050565b600091825260019092016020526040902060040155565b600091825260019092016020526040902060050155565b6000928352600193840160209081526040808520848652600701909152808420909401819055825291902060020155565b60008181526001808401602052604080832060028101805491548286529285209093015493859052918390559091801561229157600081815260018601602052604090208490555b60008381526001860160205260409020829055816122b1578285556122fe565b60008281526001808701602052604090912001548414156122e757600082815260018087016020526040909120018390556122fe565b600082815260018601602052604090206002018390555b505060008181526001938401602052604080822090940183905591825291902055565b6000818152600180840160205260408083209182018054925483855291842060020154938590528390559091801561236757600081815260018601602052604090208490555b6000838152600186016020526040902082905581612387578285556123d4565b60008281526001860160205260409020600201548414156123bd57600082815260018601602052604090206002018390556123d4565b600082815260018087016020526040909120018390555b5050600081815260019093016020526040808420600201839055918352912055565b600082116124165760405162461bcd60e51b815260040161034c90612efe565b6000838152600185016020526040902060048101546124405761243b858585856127e6565b612574565b60048082015460009081526007830160205260409020015483111561256857612467612ad8565b816007016000836004015481526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090505b6020810151158015906124d7575083816080015111155b1561252f576020908101516000908152600783018252604090819020815160a08101835281548152600182015493810193909352600281015491830191909152600381015460608301526004015460808201526124c0565b83816080015111156125515761254c86868360000151878761283c565b612562565b612562868683600001518787612888565b50612574565b612574858585856127e6565b5050505050565b60005b825482148015906125a85750600082815260018401602052604080822054825290206003015460ff165b156127c45760008281526001808501602052604080832054808452818420548452922001548114156126cb5760008181526001850160205260408082205482528082206002015480835291206003015490925060ff1615612651576000818152600180860160205260408083206003808201805460ff199081169091558786528386208201805482169055825486529285200180549092169092179055908290525492506126c6565b6000818152600185016020526040902060020154831415612679578092506126798484612249565b50600082815260018085016020526040808320548084528184206003808201805460ff199081169091558254875293862001805490931690931790915591829052546126c6908590612321565b6127be565b6000818152600180860160205260408083205483528083209091015480835291206003015490925060ff1615612749576000818152600180860160205260408083206003808201805460ff199081169091558786528386208201805482169055825486529285200180549092169092179055908290525492506127be565b6000818152600180860160205260409091200154831415612771578092506127718484612321565b50600082815260018085016020526040808320548084528184206003808201805460ff199081169091558254875293862001805490931690931790915591829052546127be908590612249565b5061257e565b505080546000908152600190910160205260409020600301805460ff19169055565b6000838152600185016020526040812090612803868686866129bb565b90506128158686838560040154612218565b6128208686836121ea565b600582015461283457612834868683612201565b505050505050565b60008481526001860160205260409020600481015484141561286957612864868685856127e6565b612834565b6000848152600782016020526040902060020154612834908790879086865b600082116128a85760405162461bcd60e51b815260040161034c90612efe565b6000848152600186016020526040902060058101548414156128d05761286486868585612a56565b6128d8612ad8565b8160070160008681526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050612934612ad8565b5060208082015160009081526007840182526040808220815160a081018352815481526001820154948101949094526002810154918401919091526003810154606084015260040154608083015261298e898988886129bb565b90506129a08989838560000151612218565b6129b08989856000015184612218565b505050505050505050565b60008381526001850160205260408120600681015482906129da575060015b60068201805460010190556129ed612ad8565b50506040805160a081018252848152600060208083018281528385018381524260608601908152608086019a8b52988452600796909601909152929020905180825591516001820155915160028301559251600382015592516004909301929092559392505050565b600083815260018501602052604090206004810154612a7b5761243b858585856127e6565b6000612a89868686866129bb565b9050612a9b8686846005015484612218565b612834868683612201565b60408051608081019091528060008152602001600081526020016000815260200160006001600160a01b031681525090565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b600060208284031215612b18578081fd5b81356103e1816131d7565b600060208284031215612b34578081fd5b81516103e1816131d7565b600060208284031215612b50578081fd5b5051919050565b600080600060608486031215612b6b578182fd5b833560028110612b79578283fd5b95602085013595506040909401359392505050565b600060208284031215612b9f578081fd5b5035919050565b6001600160a01b0391909116815260200190565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b03978816815295909616602086015260ff9390931660408501526060840191909152608083015260a082015260c081019190915260e00190565b901515815260200190565b90815260200190565b60808101612c3d866131cc565b8252602082019490945260408101929092526001600160a01b0316606090910152919050565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526039908201527f4f7264657253746174697374696373547265652834303529202d2056616c756560408201527f20746f20696e736572742063616e6e6f74206265207a65726f00000000000000606082015260800190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526018908201527f43616e277420706c61636520656d70747920616d6f756e740000000000000000604082015260600190565b60208082526039908201527f4f7264657253746174697374696373547265652834303729202d2056616c756560408201527f20746f2064656c6574652063616e6e6f74206265207a65726f00000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526030908201527f4f7264657253746174697374696373547265652834303329202d2056616c756560408201526f103237b2b9903737ba1032bc34b9ba1760811b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252603a908201527f4f7264657253746174697374696373547265652834303829202d2056616c756560408201527f20746f2064656c65746520646f6573206e6f742065786973742e000000000000606082015260800190565b602080825260129082015271125b9cdd599a58da595b9d08185b5bdd5b9d60721b604082015260600190565b60208082526013908201527221b7bab6323713ba103334b6361037b93232b960691b604082015260600190565b6020808252602b908201527f4e6f206f72646572732065786973747320666f722073656c656374656420696e60408201526a746572657374207261746560a81b606082015260800190565b60208082526010908201526f496e636f72726563742061636365737360801b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526016908201527543616e277420706c61636520656d707479207261746560501b604082015260600190565b6020808252600d908201526c13585c9ad95d081c185d5cd959609a1b604082015260600190565b60208082526019908201527f4e6f2061636365737320746f2063616e63656c206f7264657200000000000000604082015260600190565b6020808252601d908201527f4d616b657220636f756c646e27742074616b6520697473206f72646572000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b815160808201906002811061311a57fe5b825260208381015190830152604080840151908301526060928301516001600160a01b0316929091019190915290565b86815260c0810161315a876131cc565b60208301528560408301528460608301528360808301528260a0830152979650505050505050565b84815260808101613192856131cc565b602083015260408201939093526060015292915050565b948552602085019390935260408401919091526060830152608082015260a00190565b806002811061073a57fe5b6001600160a01b03811681146131ec57600080fd5b5056fea2646970667358221220a44d5294701923eeaf15c5291391962ec0fdf94769c63316c2fbf4e6b7c9f6a864736f6c634300060c0033a2646970667358221220722196481421ee2a552ca89451be7055bdc728e8370271e8661f58f9d8b0f8e464736f6c634300060c0033",
  "libraries": {
    "QuickSort": "0xeAE7Ee84269af9E9F6F68AF57eAd4f8EB495dB8d",
    "DiscountFactor": "0x6B92F20547f8318A5f5ee2dF3947e3912f760c1B"
  },
  "devdoc": {
    "details": "Lending Market Controller contract is managing separated lending order-book markets (per term) and responsible to calculate Discount Factors per currency and construct yield curve It will store lending market addresses by ccy and term in lendingMarkets mapping.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Lending Market Controller Constructor."
      },
      "deployLendingMarket(bytes32,uint256)": {
        "details": "Deploys new Lending Market and save address at lendingMarkets mapping.",
        "params": {
          "_ccy": "Main currency for new lending market",
          "_term": "Term for new Lending Market"
        }
      },
      "getBorrowRatesForCcy(bytes32)": {
        "details": "Triggers to get borrow rates for selected currency.",
        "params": {
          "_ccy": "Currency"
        }
      },
      "getLendRatesForCcy(bytes32)": {
        "details": "Triggers to get lend rates for selected currency.",
        "params": {
          "_ccy": "Currency"
        }
      },
      "getMidRatesForCcy(bytes32)": {
        "details": "Triggers to get mid rates for selected currency.",
        "params": {
          "_ccy": "Currency"
        }
      },
      "pauseLendingMarkets(bytes32)": {
        "details": "Pauses previously deployed lending market by currency",
        "params": {
          "_ccy": "Currency for pausing all lending markets"
        }
      },
      "placeBulkOrders((bytes32,uint256,uint8,uint256,uint256)[])": {
        "details": "Places orders in multiple Lending Markets.",
        "params": {
          "orders": "Lending Market orders array with ccy and terms to identify right market"
        }
      },
      "setCurrencyController(address)": {
        "details": "Triggers to link with Currency Controller contract.",
        "params": {
          "addr": "CurrencyController smart contract address"
        }
      },
      "setOwner(address)": {
        "details": "Sets owner of the controller market.",
        "params": {
          "_owner": "Address of new owner"
        }
      },
      "setTermStructure(address)": {
        "details": "Triggers to link with TermStructure contract.",
        "params": {
          "addr": "TermStructure smart contract address"
        }
      },
      "unpauseLendingMarkets(bytes32)": {
        "details": "Unpauses previously deployed lending market by currency",
        "params": {
          "_ccy": "Currency for pausing all lending markets"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deployLendingMarket(bytes32,uint256)": {
        "notice": "Reverts on deployment market with existing currency and term"
      },
      "setCurrencyController(address)": {
        "notice": "Executed only by contract owner"
      },
      "setTermStructure(address)": {
        "notice": "Executed only by contract owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14248,
        "contract": "contracts/LendingMarketController.sol:LendingMarketController",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14250,
        "contract": "contracts/LendingMarketController.sol:LendingMarketController",
        "label": "currencyController",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICurrencyController)21317"
      },
      {
        "astId": 14252,
        "contract": "contracts/LendingMarketController.sol:LendingMarketController",
        "label": "termStructure",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ITermStructure)22706"
      },
      {
        "astId": 14256,
        "contract": "contracts/LendingMarketController.sol:LendingMarketController",
        "label": "numberOfMarkets",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 14263,
        "contract": "contracts/LendingMarketController.sol:LendingMarketController",
        "label": "lendingMarkets",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 14268,
        "contract": "contracts/LendingMarketController.sol:LendingMarketController",
        "label": "supportedTerms",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICurrencyController)21317": {
        "encoding": "inplace",
        "label": "contract ICurrencyController",
        "numberOfBytes": "20"
      },
      "t_contract(ITermStructure)22706": {
        "encoding": "inplace",
        "label": "contract ITermStructure",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}