{
  "address": "0xB6AD6A3a356f208832e46aF4409e59B53287E44E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currencyController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_productAddressResolver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numDays",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "product",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isSupported",
          "type": "bool"
        }
      ],
      "name": "ProductTermSupportUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numDays",
          "type": "uint256"
        }
      ],
      "name": "TermAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numDays",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isSupported",
          "type": "bool"
        }
      ],
      "name": "TermSupportUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numDays",
          "type": "uint256"
        }
      ],
      "name": "getDfFrac",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numDays",
          "type": "uint256"
        }
      ],
      "name": "getNumDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numDays",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_frequency",
          "type": "uint8"
        }
      ],
      "name": "getNumPayments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numDays",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_frequency",
          "type": "uint8"
        }
      ],
      "name": "getTerm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numDays",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_frequency",
          "type": "uint8"
        }
      ],
      "name": "getTermSchedule",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_product",
          "type": "bytes4"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "sort",
          "type": "bool"
        }
      ],
      "name": "getTermsForProductAndCcy",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numDays",
          "type": "uint256"
        },
        {
          "internalType": "bytes4",
          "name": "_product",
          "type": "bytes4"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "isSupportedTerm",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "last_term_index",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currencyController",
          "type": "address"
        }
      ],
      "name": "setCurrencyController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numDays",
          "type": "uint256"
        },
        {
          "internalType": "bytes4[]",
          "name": "_products",
          "type": "bytes4[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_currencies",
          "type": "bytes32[]"
        }
      ],
      "name": "supportTerm",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numDays",
          "type": "uint256"
        },
        {
          "internalType": "bytes4",
          "name": "_product",
          "type": "bytes4"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_isSupported",
          "type": "bool"
        }
      ],
      "name": "updateTermSupport",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xde176b663e370cb332c56f6dd78735966d5caaeee23259ff1f2f18b9022f8fd6",
  "receipt": {
    "to": null,
    "from": "0x57AB42d4fa756b6956b0cAf986a5f53bA90D9e28",
    "contractAddress": "0xB6AD6A3a356f208832e46aF4409e59B53287E44E",
    "transactionIndex": 16,
    "gasUsed": "1392428",
    "logsBloom": "0x
    "blockHash": "0xaf054fd28088b4e0ba1db54fd147125d4fd3a13f62a16ea1f3a29833b0c72bfa",
    "transactionHash": "0xde176b663e370cb332c56f6dd78735966d5caaeee23259ff1f2f18b9022f8fd6",
    "logs": [],
    "blockNumber": 12164696,
    "cumulativeGasUsed": "1728428",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8682Fa83785B7F51A14101122CCb1DCb4A247B80",
    "0x3Bb006345DA94AA05BEBD0Ec70CBe6f28A017cEe"
  ],
  "numDeployments": 1,
  "solcInputHash": "48d264388c4204a72ee447cb1af8bee3",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currencyController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_productAddressResolver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"product\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"}],\"name\":\"ProductTermSupportUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numDays\",\"type\":\"uint256\"}],\"name\":\"TermAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"}],\"name\":\"TermSupportUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numDays\",\"type\":\"uint256\"}],\"name\":\"getDfFrac\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numDays\",\"type\":\"uint256\"}],\"name\":\"getNumDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numDays\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_frequency\",\"type\":\"uint8\"}],\"name\":\"getNumPayments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numDays\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_frequency\",\"type\":\"uint8\"}],\"name\":\"getTerm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numDays\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_frequency\",\"type\":\"uint8\"}],\"name\":\"getTermSchedule\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_product\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"sort\",\"type\":\"bool\"}],\"name\":\"getTermsForProductAndCcy\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numDays\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"_product\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"isSupportedTerm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_term_index\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currencyController\",\"type\":\"address\"}],\"name\":\"setCurrencyController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numDays\",\"type\":\"uint256\"},{\"internalType\":\"bytes4[]\",\"name\":\"_products\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_currencies\",\"type\":\"bytes32[]\"}],\"name\":\"supportTerm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numDays\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"_product\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isSupported\",\"type\":\"bool\"}],\"name\":\"updateTermSupport\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Term Structure contract is responsible for managing supported terms in Secured Finance Protocol per product and currency\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Term Structure Constructor.\"},\"getDfFrac(uint256)\":{\"details\":\"Triggers to get discount factor fractions.\",\"params\":{\"_numDays\":\"Number of days in term\"}},\"getNumDays(uint256)\":{\"details\":\"Triggers to get number of days for supported term. number of days follows ACT365 market convention\",\"params\":{\"_numDays\":\"Number of days in term\"}},\"getNumPayments(uint256,uint8)\":{\"details\":\"Triggers to get number of coupon payments.\",\"params\":{\"_frequency\":\"Payment frequency (like annual, semi-annual, etc.)\",\"_numDays\":\"Number of days in term\"}},\"getTerm(uint256,uint8)\":{\"details\":\"Triggers to get term structure.\",\"params\":{\"_numDays\":\"Number of days in term\"}},\"getTermSchedule(uint256,uint8)\":{\"details\":\"Triggers to get payment schedule for supported term according to the payment frequency number of days follows ACT365 market convention\",\"params\":{\"_frequency\":\"Payment frequency (like annual, semi-annual, etc.)\",\"_numDays\":\"Number of days in term\"}},\"getTermsForProductAndCcy(bytes4,bytes32,bool)\":{\"details\":\"Returns an array of supported terms for a specific product and currency\",\"params\":{\"_ccy\":\"Currency short identifier\",\"_product\":\"Product prefix\"}},\"isSupportedTerm(uint256,bytes4,bytes32)\":{\"details\":\"Triggers to get if specified term is supported for a particular ccy and product.\",\"params\":{\"_ccy\":\"Currency short identifier\",\"_numDays\":\"Number of days in term\",\"_product\":\"Product prefix\"}},\"setCurrencyController(address)\":{\"details\":\"Triggers to link with Currency Controller contract.\",\"params\":{\"_currencyController\":\"CurrencyController smart contract address\"}},\"setOwner(address)\":{\"details\":\"Sets owner of the controller market.\",\"params\":{\"_owner\":\"Address of new owner\"}},\"supportTerm(uint256,bytes4[],bytes32[])\":{\"details\":\"Triggers to add new term into the protocol\",\"params\":{\"_currencies\":\"Array of currencies supporting this term\",\"_numDays\":\"Number of calendar days in a term\",\"_products\":\"Array of products supporting this term\"}},\"updateTermSupport(uint256,bytes4,bytes32,bool)\":{\"details\":\"Triggers to update product and currency support for term\",\"params\":{\"_ccy\":\"Currency short identifier\",\"_isSupported\":\"Boolean whether term supported for specified `_product` and `_ccy`\",\"_numDays\":\"Number of days in term\",\"_product\":\"Product prefix\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setCurrencyController(address)\":{\"notice\":\"Executed only by contract owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TermStructure.sol\":\"TermStructure\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/TermStructure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/ITermStructure.sol\\\";\\nimport \\\"./interfaces/ICurrencyController.sol\\\";\\nimport \\\"./interfaces/IProductAddressResolver.sol\\\";\\nimport \\\"./libraries/QuickSort.sol\\\";\\nimport \\\"./libraries/TermSchedule.sol\\\";\\n\\n/**\\n * @dev Term Structure contract is responsible for managing supported\\n * terms in Secured Finance Protocol per product and currency\\n *\\n */\\ncontract TermStructure is ITermStructure {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using QuickSort for uint256[];\\n\\n    address public override owner;\\n    uint8 public override last_term_index;\\n\\n    ICurrencyController private currencyController;\\n    IProductAddressResolver private productResolver;\\n\\n    struct Term {\\n        uint256 numDays;\\n        uint256 dfFrac;\\n        uint256 numPayments;\\n    }\\n\\n    mapping(uint256 => uint256) private terms;\\n    mapping(bytes4 => mapping(bytes32 => EnumerableSet.UintSet))\\n        private termsForProductAndCcy;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    modifier existingTermOnly(uint256 _numDays) {\\n        require(terms[_numDays] == _numDays, \\\"NON EXISTING TERM\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Term Structure Constructor.\\n     */\\n    constructor(address _currencyController, address _productAddressResolver)\\n        public\\n    {\\n        owner = msg.sender;\\n        currencyController = ICurrencyController(_currencyController);\\n        productResolver = IProductAddressResolver(_productAddressResolver);\\n    }\\n\\n    /**\\n     * @dev Sets owner of the controller market.\\n     * @param _owner Address of new owner\\n     */\\n    function setOwner(address _owner) public override onlyOwner {\\n        require(_owner != address(0), \\\"new owner is the zero address\\\");\\n        emit OwnerChanged(owner, _owner);\\n        owner = _owner;\\n    }\\n\\n    /**\\n     * @dev Triggers to link with Currency Controller contract.\\n     * @param _currencyController CurrencyController smart contract address\\n     *\\n     * @notice Executed only by contract owner\\n     */\\n    function setCurrencyController(address _currencyController)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        currencyController = ICurrencyController(_currencyController);\\n    }\\n\\n    /**\\n     * @dev Triggers to add new term into the protocol\\n     * @param _numDays Number of calendar days in a term\\n     * @param _currencies Array of currencies supporting this term\\n     * @param _products Array of products supporting this term\\n     */\\n    function supportTerm(\\n        uint256 _numDays,\\n        bytes4[] memory _products,\\n        bytes32[] memory _currencies\\n    ) public override onlyOwner returns (bool) {\\n        last_term_index = last_term_index++;\\n\\n        terms[_numDays] = _numDays;\\n\\n        if (_products.length > 0) {\\n            for (uint256 i = 0; i < _products.length; i++) {\\n                bytes4 product = _products[i];\\n\\n                for (uint256 j = 0; j < _currencies.length; j++) {\\n                    bytes32 ccy = _currencies[j];\\n                    updateTermSupport(_numDays, product, ccy, true);\\n                }\\n            }\\n        }\\n\\n        emit TermAdded(_numDays);\\n    }\\n\\n    /**\\n     * @dev Triggers to update product and currency support for term\\n     * @param _numDays Number of days in term\\n     * @param _product Product prefix\\n     * @param _ccy Currency short identifier\\n     * @param _isSupported Boolean whether term supported for specified `_product` and `_ccy`\\n     */\\n    function updateTermSupport(\\n        uint256 _numDays,\\n        bytes4 _product,\\n        bytes32 _ccy,\\n        bool _isSupported\\n    ) public override onlyOwner existingTermOnly(_numDays) returns (bool) {\\n        require(\\n            productResolver.isSupportedProduct(_product),\\n            \\\"NON SUPPORTED PRODUCT\\\"\\n        );\\n        require(currencyController.isSupportedCcy(_ccy), \\\"NON SUPPORTED CCY\\\");\\n\\n        if (_isSupported) {\\n            termsForProductAndCcy[_product][_ccy].add(_numDays);\\n        } else {\\n            termsForProductAndCcy[_product][_ccy].remove(_numDays);\\n        }\\n\\n        emit ProductTermSupportUpdated(_numDays, _product, _ccy, _isSupported);\\n    }\\n\\n    /**\\n     * @dev Triggers to get term structure.\\n     * @param _numDays Number of days in term\\n     */\\n    function getTerm(uint256 _numDays, uint8 _frequency)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        Term memory term;\\n\\n        term.numDays = terms[_numDays];\\n        term.dfFrac = getDfFrac(_numDays);\\n        term.numPayments = getNumPayments(_numDays, _frequency);\\n\\n        return (term.numDays, term.dfFrac, term.numPayments);\\n    }\\n\\n    /**\\n     * @dev Triggers to get payment schedule for supported term according to the payment frequency\\n     * number of days follows ACT365 market convention\\n     * @param _numDays Number of days in term\\n     * @param _frequency Payment frequency (like annual, semi-annual, etc.)\\n     */\\n    function getTermSchedule(uint256 _numDays, uint8 _frequency)\\n        public\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return TermSchedule.getTermSchedule(_numDays, _frequency);\\n    }\\n\\n    /**\\n     * @dev Triggers to get number of days for supported term.\\n     * number of days follows ACT365 market convention\\n     * @param _numDays Number of days in term\\n     */\\n    function getNumDays(uint256 _numDays)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return terms[_numDays];\\n    }\\n\\n    /**\\n     * @dev Triggers to get discount factor fractions.\\n     * @param _numDays Number of days in term\\n     */\\n    function getDfFrac(uint256 _numDays)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return TermSchedule.getDfFrac(_numDays);\\n    }\\n\\n    /**\\n     * @dev Triggers to get number of coupon payments.\\n     * @param _numDays Number of days in term\\n     * @param _frequency Payment frequency (like annual, semi-annual, etc.)\\n     */\\n    function getNumPayments(uint256 _numDays, uint8 _frequency)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return TermSchedule.getNumPayments(_numDays, _frequency);\\n    }\\n\\n    /**\\n     * @dev Triggers to get if specified term is supported for a particular ccy and product.\\n     * @param _numDays Number of days in term\\n     * @param _product Product prefix\\n     * @param _ccy Currency short identifier\\n     */\\n    function isSupportedTerm(\\n        uint256 _numDays,\\n        bytes4 _product,\\n        bytes32 _ccy\\n    ) public view override returns (bool) {\\n        EnumerableSet.UintSet storage set = termsForProductAndCcy[_product][\\n            _ccy\\n        ];\\n        return set.contains(_numDays);\\n    }\\n\\n    /**\\n     * @dev Returns an array of supported terms for a specific product and currency\\n     * @param _product Product prefix\\n     * @param _ccy Currency short identifier\\n     */\\n    function getTermsForProductAndCcy(\\n        bytes4 _product,\\n        bytes32 _ccy,\\n        bool sort\\n    ) public view override returns (uint256[] memory) {\\n        EnumerableSet.UintSet storage set = termsForProductAndCcy[_product][\\n            _ccy\\n        ];\\n        uint256 numTerms = set.length();\\n        uint256[] memory supportedTerms = new uint256[](numTerms);\\n\\n        for (uint256 i = 0; i < numTerms; i++) {\\n            uint256 term = set.at(i);\\n            supportedTerms[i] = term;\\n        }\\n\\n        if (sort) {\\n            supportedTerms = supportedTerms.sort();\\n        }\\n\\n        return supportedTerms;\\n    }\\n}\\n\",\"keccak256\":\"0xb9860c6bcbf1e1a8e39d6123f95d7be2ba0ba5382ec08cf5460db91baa9aa33a\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n *\\n * Currency controller contract copies the logic of FXRatesAggregator contract, and\\n * will replace that contract in connection with Collateral Aggregator\\n */\\ninterface ICurrencyController {\\n    event CcyAdded(\\n        bytes32 indexed ccy,\\n        string name,\\n        uint16 chainId,\\n        uint256 haircut\\n    );\\n    event CcyCollateralUpdate(bytes32 indexed ccy, bool isCollateral);\\n    event CcySupportUpdate(bytes32 indexed ccy, bool isSupported);\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n    event MinMarginUpdated(bytes32 indexed ccy, uint256 minMargin);\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n    event PriceFeedAdded(\\n        bytes32 ccy,\\n        string secondCcy,\\n        address indexed priceFeed\\n    );\\n    event PriceFeedRemoved(\\n        bytes32 ccy,\\n        string secondCcy,\\n        address indexed priceFeed\\n    );\\n\\n    function convertBulkToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function currencies(bytes32)\\n        external\\n        view\\n        returns (\\n            bool isSupported,\\n            string memory name,\\n            uint16 chainId\\n        );\\n\\n    function ethDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getMinMargin(bytes32 _ccy) external view returns (uint256);\\n\\n    function haircuts(bytes32) external view returns (uint256);\\n\\n    function isCollateral(bytes32) external view returns (bool);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function last_ccy_index() external view returns (uint8);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function minMargins(bytes32) external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function setOwner(address _owner) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        uint16 _chainId,\\n        address _ethPriceFeed,\\n        uint256 _haircut\\n    ) external returns (bool);\\n\\n    function supportedCurrencies() external view returns (uint8);\\n\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut)\\n        external\\n        returns (bool);\\n\\n    function updateCollateralSupport(bytes32 _ccy, bool _isSupported)\\n        external\\n        returns (bool);\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported)\\n        external\\n        returns (bool);\\n\\n    function updateMinMargin(bytes32 _ccy, uint256 _minMargin)\\n        external\\n        returns (bool);\\n\\n    function usdDecimals(bytes32) external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xfe21b4283f1cfc907ade17b20e68c80e5e4800f4ffaa7bec74ef245fe497cb3a\",\"license\":\"MIT\"},\"contracts/interfaces/IProductAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface IProductAddressResolver {\\n    event RegisterProduct(\\n        bytes4 prefix,\\n        address indexed product,\\n        address indexed controller\\n    );\\n\\n    /**\\n     * @dev Trigers to register new product type in a address resolver\\n     * @param _prefix Bytes4 prefix for product type\\n     * @param _contract Product contract address\\n     * @param _controller Market controller address\\n     *\\n     * @notice Trigers only be contract owner\\n     * @notice Reverts on saving contract which is not supporting a common interface\\n     */\\n    function registerProduct(\\n        bytes4 _prefix,\\n        address _contract,\\n        address _controller\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to register several product types in a address resolver\\n     * @param _prefixes Array of Bytes4 prefixes for each product type\\n     * @param _contracts Array of smart contract addresses for each product\\n     * @param _controllers Array of market controller addresses\\n     *\\n     * @notice Trigers only be contract owner\\n     * @notice Reverts on saving contract which is not supporting common interface\\n     */\\n    function registerProducts(\\n        bytes4[] calldata _prefixes,\\n        address[] calldata _contracts,\\n        address[] calldata _controllers\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to get product address by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContract(bytes4 _prefix) external view returns (address);\\n\\n    /**\\n     * @dev Trigers to get product address by deal id\\n     * @param _dealId Product deal idenfitier\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContractByDealId(bytes32 _dealId)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @dev Trigers to get market controller address by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     * @notice To work with the contract this address should be wrapped around IYieldCurve interface\\n     */\\n    function getControllerContract(bytes4 _prefix)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @dev Trigers to get market controller address by deal id\\n     * @param _dealId Product deal idenfitier\\n     * @notice To work with the contract this address should be wrapped around IYieldCurve interface\\n     */\\n    function getControllerContractByDealId(bytes32 _dealId)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product is supported by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     */\\n    function isSupportedProduct(bytes4 _prefix) external view returns (bool);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product is supported by deal id.\\n     * @param _dealId Product deal idenfitier\\n     */\\n    function isSupportedProductByDealId(bytes32 _dealId)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x725c8887c2695629e6e6cda13d2ec086d58098b8c1de007efc2d74ee5dabd6ef\",\"license\":\"MIT\"},\"contracts/interfaces/ITermStructure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ITermStructure {\\n    event TermAdded(uint256 numDays);\\n    event ProductTermSupportUpdated(\\n        uint256 numDays,\\n        bytes4 product,\\n        bytes32 _ccy,\\n        bool isSupported\\n    );\\n    event TermSupportUpdated(uint256 numDays, bool isSupported);\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    function getDfFrac(uint256 _numDays) external view returns (uint256);\\n\\n    function getNumDays(uint256 _numDays) external view returns (uint256);\\n\\n    function getNumPayments(uint256 _numDays, uint8 frequency)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTerm(uint256 _numDays, uint8 frequency)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getTermSchedule(uint256 _numDays, uint8 frequency)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isSupportedTerm(\\n        uint256 _numDays,\\n        bytes4 _product,\\n        bytes32 _ccy\\n    ) external view returns (bool);\\n\\n    function last_term_index() external view returns (uint8);\\n\\n    function owner() external view returns (address);\\n\\n    function setCurrencyController(address _currencyController) external;\\n\\n    function setOwner(address _owner) external;\\n\\n    function supportTerm(\\n        uint256 _numDays,\\n        bytes4[] memory _products,\\n        bytes32[] memory _currencies\\n    ) external returns (bool);\\n\\n    function updateTermSupport(\\n        uint256 _numDays,\\n        bytes4 _product,\\n        bytes32 _ccy,\\n        bool _isSupported\\n    ) external returns (bool);\\n\\n    function getTermsForProductAndCcy(\\n        bytes4 _product,\\n        bytes32 _ccy,\\n        bool sort\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x6383547cef122af2ff938650c19709425541d3152ca6c8a3c45fb747a9d4385f\",\"license\":\"MIT\"},\"contracts/libraries/QuickSort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nlibrary QuickSort {\\n    function sort(uint256[] memory data)\\n        public\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        quickSort(data, int256(0), int256(data.length - 1));\\n        return data;\\n    }\\n\\n    function quickSort(\\n        uint256[] memory arr,\\n        int256 left,\\n        int256 right\\n    ) internal pure {\\n        int256 i = left;\\n        int256 j = right;\\n        if (i == j) return;\\n        uint256 pivot = arr[uint256(left + (right - left) / 2)];\\n        while (i <= j) {\\n            while (arr[uint256(i)] < pivot) i++;\\n            while (pivot < arr[uint256(j)]) j--;\\n            if (i <= j) {\\n                (arr[uint256(i)], arr[uint256(j)]) = (\\n                    arr[uint256(j)],\\n                    arr[uint256(i)]\\n                );\\n                i++;\\n                j--;\\n            }\\n        }\\n        if (left < j) quickSort(arr, left, j);\\n        if (i < right) quickSort(arr, i, right);\\n    }\\n}\\n\",\"keccak256\":\"0xa5f69c479336cf32972248642fdb835576b7ef7de8e869a8e009624d546755e0\",\"license\":\"MIT\"},\"contracts/libraries/TermSchedule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary TermSchedule {\\n    using SafeMath for uint256;\\n\\n    enum PaymentFrequency {\\n        ANNUAL,\\n        SEMI_ANNUAL,\\n        QUARTERLY,\\n        MONTHLY,\\n        FORWARD\\n    }\\n\\n    /**\\n     * @dev Triggers to get payment schedule for supported term according to the payment frequency\\n     * number of days follows ACT365 market convention\\n     * @param _numDays Number of days in term\\n     * @param _frequency Payment frequency (like annual, semi-annual, etc.)\\n     */\\n    function getTermSchedule(uint256 _numDays, uint8 _frequency)\\n        internal\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        if (PaymentFrequency(_frequency) == PaymentFrequency.ANNUAL) {\\n            if (_numDays >= 365) {\\n                uint256 numYears = _numDays.div(365);\\n                uint256[] memory paymentSchedule = new uint256[](numYears);\\n\\n                for (uint256 i = 0; i < numYears; i++) {\\n                    uint256 j = i.add(1);\\n                    paymentSchedule[i] = j.mul(365);\\n                }\\n\\n                return paymentSchedule;\\n            } else if (_numDays > 0) {\\n                uint256[] memory paymentSchedule = new uint256[](1);\\n                paymentSchedule[0] = _numDays;\\n\\n                return paymentSchedule;\\n            }\\n        } else if (\\n            PaymentFrequency(_frequency) == PaymentFrequency.SEMI_ANNUAL\\n        ) {\\n            if (_numDays >= 180) {\\n                uint256 numHalfYears = _numDays.div(180);\\n                uint256[] memory paymentSchedule = new uint256[](numHalfYears);\\n\\n                for (uint256 i = 0; i < numHalfYears; i++) {\\n                    uint256 j = i.add(1);\\n                    paymentSchedule[i] = j.mul(180);\\n                }\\n\\n                return paymentSchedule;\\n            } else if (_numDays > 0) {\\n                uint256[] memory paymentSchedule = new uint256[](1);\\n                paymentSchedule[0] = _numDays;\\n\\n                return paymentSchedule;\\n            }\\n        } else if (PaymentFrequency(_frequency) == PaymentFrequency.QUARTERLY) {\\n            if (_numDays >= 90) {\\n                uint256 numQuarters = _numDays.div(90);\\n                uint256[] memory paymentSchedule = new uint256[](numQuarters);\\n\\n                for (uint256 i = 0; i < numQuarters; i++) {\\n                    uint256 j = i.add(1);\\n                    paymentSchedule[i] = j.mul(90);\\n                }\\n\\n                return paymentSchedule;\\n            } else if (_numDays > 0) {\\n                uint256[] memory paymentSchedule = new uint256[](1);\\n                paymentSchedule[0] = _numDays;\\n\\n                return paymentSchedule;\\n            }\\n        } else if (PaymentFrequency(_frequency) == PaymentFrequency.MONTHLY) {\\n            if (_numDays >= 30) {\\n                uint256 numMonths = _numDays.div(30);\\n                uint256[] memory paymentSchedule = new uint256[](numMonths);\\n\\n                for (uint256 i = 0; i < numMonths; i++) {\\n                    uint256 j = i.add(1);\\n                    paymentSchedule[i] = j.mul(30);\\n                }\\n\\n                return paymentSchedule;\\n            } else if (_numDays > 0) {\\n                uint256[] memory paymentSchedule = new uint256[](1);\\n                paymentSchedule[0] = _numDays;\\n\\n                return paymentSchedule;\\n            }\\n        } else if (PaymentFrequency(_frequency) == PaymentFrequency.FORWARD) {\\n            uint256[] memory paymentSchedule = new uint256[](1);\\n            paymentSchedule[0] = _numDays;\\n\\n            return paymentSchedule;\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers to get discount factor fractions.\\n     * @param _numDays Number of days in term\\n     */\\n    function getDfFrac(uint256 _numDays) internal pure returns (uint256) {\\n        if (_numDays >= 365) {\\n            return 10000;\\n        } else if (_numDays < 365) {\\n            uint256 sectors = uint256(360).div(_numDays);\\n            return uint256(10000).div(sectors);\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers to get number of coupon payments.\\n     * @param _numDays Number of days in term\\n     * @param _frequency Payment frequency (like annual, semi-annual, etc.)\\n     */\\n    function getNumPayments(uint256 _numDays, uint8 _frequency)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (PaymentFrequency(_frequency) == PaymentFrequency.ANNUAL) {\\n            if (_numDays >= 365) {\\n                return _numDays.div(365);\\n            } else if (_numDays > 0) {\\n                return 1;\\n            } else return 0;\\n        } else if (\\n            PaymentFrequency(_frequency) == PaymentFrequency.SEMI_ANNUAL\\n        ) {\\n            if (_numDays >= 365) {\\n                uint256 _monthConvention = _numDays.sub(\\n                    _numDays.div(365).mul(5)\\n                );\\n                return _monthConvention.div(180);\\n            } else if (_numDays >= 180) {\\n                return _numDays.div(180);\\n            } else if (_numDays > 0) {\\n                return 1;\\n            } else return 0;\\n        } else if (PaymentFrequency(_frequency) == PaymentFrequency.QUARTERLY) {\\n            if (_numDays >= 365) {\\n                uint256 _monthConvention = _numDays.sub(\\n                    _numDays.div(365).mul(5)\\n                );\\n                return _monthConvention.div(90);\\n            } else if (_numDays >= 90) {\\n                return _numDays.div(90);\\n            } else if (_numDays > 0) {\\n                return 1;\\n            } else return 0;\\n        } else if (PaymentFrequency(_frequency) == PaymentFrequency.MONTHLY) {\\n            if (_numDays >= 365) {\\n                uint256 _monthConvention = _numDays.sub(\\n                    _numDays.div(365).mul(5)\\n                );\\n                return _monthConvention.div(30);\\n            } else if (_numDays >= 30) {\\n                return _numDays.div(30);\\n            } else if (_numDays > 0) {\\n                return 1;\\n            } else return 0;\\n        } else if (PaymentFrequency(_frequency) == PaymentFrequency.FORWARD) {\\n            return 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b1023d4b3d7785be5ab77ea02056c92b4a08a5bba291d604e84f25c3db84db7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051620017c4380380620017c48339810160408190526100319161006d565b600080546001600160a01b03199081163317909155600180546001600160a01b03948516908316179055600280549290931691161790556100be565b6000806040838503121561007f578182fd5b825161008a816100a6565b602084015190925061009b816100a6565b809150509250929050565b6001600160a01b03811681146100bb57600080fd5b50565b6116f680620000ce6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638b1e26a41161008c578063aec86de611610066578063aec86de6146101b3578063b1547add146101c8578063d04cad02146101db578063fd86c90c146101ee576100cf565b80638b1e26a41461016b5780638da5cb5b1461018b57806399c2e2c4146101a0576100cf565b806302ccf015146100d4578063072d3da5146100fd57806313af40351461011d57806346b0575d146101325780635cdbcd2714610145578063849d7a5014610158575b600080fd5b6100e76100e23660046111ff565b610210565b6040516100f49190611405565b60405180910390f35b61011061010b3660046112e2565b610223565b6040516100f491906113fa565b61013061012b3660046110eb565b61025a565b005b6100e76101403660046111ff565b6102fb565b610110610153366004611217565b61030d565b6100e761016636600461136e565b610410565b61017e6101793660046111be565b610425565b6040516100f491906113b6565b610193610576565b6040516100f491906113a2565b6101106101ae366004611325565b610585565b6101bb6107b4565b6040516100f49190611644565b61017e6101d636600461136e565b6107c4565b6101306101e93660046110eb565b6107d0565b6102016101fc36600461136e565b610809565b6040516100f49392919061162e565b600061021b8261085b565b90505b919050565b6001600160e01b0319821660009081526004602090815260408083208484529091528120610251818661089d565b95945050505050565b6000546001600160a01b0316331461027157600080fd5b6001600160a01b0381166102a05760405162461bcd60e51b81526004016102979061149c565b60405180910390fd5b600080546040516001600160a01b03808516939216917fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c91a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60009081526003602052604090205490565b600080546001600160a01b0316331461032557600080fd5b6000805460ff600160a01b808304821680820260019091019092160260ff60a01b19928316179091161781558481526003602052604090208490558251156103d25760005b83518110156103d057600084828151811061038157fe5b6020026020010151905060005b84518110156103c65760008582815181106103a557fe5b602002602001015190506103bc8884836001610585565b505060010161038e565b505060010161036a565b505b7f85b976c846042e714c80a25af4c8110d83d827086708b873b3fb04ff98e52144846040516104019190611405565b60405180910390a19392505050565b600061041c83836108a9565b90505b92915050565b6001600160e01b031983166000908152600460209081526040808320858452909152812060609161045582610a65565b905060608167ffffffffffffffff8111801561047057600080fd5b5060405190808252806020026020018201604052801561049a578160200160208202803683370190505b50905060005b828110156104d75760006104b48583610a70565b9050808383815181106104c357fe5b6020908102919091010152506001016104a0565b50841561056c57604051634f64581360e11b815273eAE7Ee84269af9E9F6F68AF57eAd4f8EB495dB8d90639ec8b026906105159084906004016113b6565b60006040518083038186803b15801561052d57600080fd5b505af4158015610541573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105699190810190611112565b90505b9695505050505050565b6000546001600160a01b031681565b600080546001600160a01b0316331461059d57600080fd5b600085815260036020526040902054859081146105cc5760405162461bcd60e51b815260040161029790611539565b600254604051631356c4d160e11b81526001600160a01b03909116906326ad89a2906105fc90889060040161140e565b60206040518083038186803b15801561061457600080fd5b505afa158015610628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064c91906111a2565b6106685760405162461bcd60e51b8152600401610297906114d3565b600154604051636a6a7b6760e11b81526001600160a01b039091169063d4d4f6ce90610698908790600401611405565b60206040518083038186803b1580156106b057600080fd5b505afa1580156106c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e891906111a2565b6107045760405162461bcd60e51b81526004016102979061159b565b821561073e576001600160e01b03198516600090815260046020908152604080832087845290915290206107389087610a7c565b5061076e565b6001600160e01b031985166000908152600460209081526040808320878452909152902061076c9087610a88565b505b7f8b5c8e8024eb720a3028fc80e6a6b7a02e67c1b1d3a40d7063ac37140d3ffe59868686866040516107a39493929190611607565b60405180910390a150949350505050565b600054600160a01b900460ff1681565b606061041c8383610a94565b6000546001600160a01b031633146107e757600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600080600061081661105c565b600086815260036020526040902054815261083086610210565b602082015261083f8686610410565b6040820181905281516020909201519197919650945092505050565b600061016d821061086f575061271061021e565b61016d82101561021e57600061088761016884610e3a565b905061089561271082610e3a565b91505061021e565b600061041c8383610e6c565b6000808260ff1660048111156108bb57fe5b60048111156108c657fe5b14156109035761016d83106108e8576108e18361016d610e3a565b905061041f565b82156108f65750600161041f565b50600061041f565b61041f565b60018260ff16600481111561091457fe5b600481111561091f57fe5b14156109795761016d831061096657600061095161094a60056109448761016d610e3a565b90610e84565b8590610ebe565b905061095e8160b4610e3a565b91505061041f565b60b483106108e8576108e18360b4610e3a565b60028260ff16600481111561098a57fe5b600481111561099557fe5b14156109da5761016d83106109c75760006109ba61094a60056109448761016d610e3a565b905061095e81605a610e3a565b605a83106108e8576108e183605a610e3a565b60038260ff1660048111156109eb57fe5b60048111156109f657fe5b1415610a3b5761016d8310610a28576000610a1b61094a60056109448761016d610e3a565b905061095e81601e610e3a565b601e83106108e8576108e183601e610e3a565b60048260ff166004811115610a4c57fe5b6004811115610a5757fe5b141561041f5750600161041f565b600061021b82610ee6565b600061041c8383610eea565b600061041c8383610f2f565b600061041c8383610f71565b606060008260ff166004811115610aa757fe5b6004811115610ab257fe5b1415610bc15761016d8310610b67576000610acf8461016d610e3a565b905060608167ffffffffffffffff81118015610aea57600080fd5b50604051908082528060200260200182016040528015610b14578160200160208202803683370190505b50905060005b82811015610b5d576000610b2f826001611037565b9050610b3d8161016d610e84565b838381518110610b4957fe5b602090810291909101015250600101610b1a565b50915061041f9050565b82156108fe576060600160005b50604051908082528060200260200182016040528015610b9e578160200160208202803683370190505b5090508381600081518110610baf57fe5b6020908102919091010152905061041f565b60018260ff166004811115610bd257fe5b6004811115610bdd57fe5b1415610c855760b48310610b67576000610bf88460b4610e3a565b905060608167ffffffffffffffff81118015610c1357600080fd5b50604051908082528060200260200182016040528015610c3d578160200160208202803683370190505b50905060005b82811015610b5d576000610c58826001611037565b9050610c658160b4610e84565b838381518110610c7157fe5b602090810291909101015250600101610c43565b60028260ff166004811115610c9657fe5b6004811115610ca157fe5b1415610d4957605a8310610b67576000610cbc84605a610e3a565b905060608167ffffffffffffffff81118015610cd757600080fd5b50604051908082528060200260200182016040528015610d01578160200160208202803683370190505b50905060005b82811015610b5d576000610d1c826001611037565b9050610d2981605a610e84565b838381518110610d3557fe5b602090810291909101015250600101610d07565b60038260ff166004811115610d5a57fe5b6004811115610d6557fe5b1415610e0d57601e8310610b67576000610d8084601e610e3a565b905060608167ffffffffffffffff81118015610d9b57600080fd5b50604051908082528060200260200182016040528015610dc5578160200160208202803683370190505b50905060005b82811015610b5d576000610de0826001611037565b9050610ded81601e610e84565b838381518110610df957fe5b602090810291909101015250600101610dcb565b60048260ff166004811115610e1e57fe5b6004811115610e2957fe5b141561041f57606060016000610b74565b6000808211610e5b5760405162461bcd60e51b815260040161029790611564565b818381610e6457fe5b049392505050565b60009081526001919091016020526040902054151590565b600082610e935750600061041f565b82820282848281610ea057fe5b041461041c5760405162461bcd60e51b8152600401610297906115c6565b600082821115610ee05760405162461bcd60e51b815260040161029790611502565b50900390565b5490565b81546000908210610f0d5760405162461bcd60e51b815260040161029790611423565b826000018281548110610f1c57fe5b9060005260206000200154905092915050565b6000610f3b8383610e6c565b6108f65750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561041f565b6000818152600183016020526040812054801561102d5783546000198083019190810190600090879083908110610fa457fe5b9060005260206000200154905080876000018481548110610fc157fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080610ff157fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061041f565b600091505061041f565b60008282018381101561041c5760405162461bcd60e51b815260040161029790611465565b60405180606001604052806000815260200160008152602001600081525090565b600082601f83011261108d578081fd5b81356110a061109b82611679565b611652565b8181529150602080830190848101818402860182018710156110c157600080fd5b60005b848110156110e0578135845292820192908201906001016110c4565b505050505092915050565b6000602082840312156110fc578081fd5b81356001600160a01b038116811461041c578182fd5b60006020808385031215611124578182fd5b825167ffffffffffffffff81111561113a578283fd5b8301601f8101851361114a578283fd5b805161115861109b82611679565b8181528381019083850185840285018601891015611174578687fd5b8694505b83851015611196578051835260019490940193918501918501611178565b50979650505050505050565b6000602082840312156111b3578081fd5b815161041c81611699565b6000806000606084860312156111d2578182fd5b83356111dd816116aa565b92506020840135915060408401356111f481611699565b809150509250925092565b600060208284031215611210578081fd5b5035919050565b60008060006060848603121561122b578283fd5b8335925060208085013567ffffffffffffffff8082111561124a578485fd5b818701915087601f83011261125d578485fd5b813561126b61109b82611679565b81815284810190848601868402860187018c1015611287578889fd5b8895505b838610156112b257803561129e816116aa565b83526001959095019491860191860161128b565b509650505060408701359250808311156112ca578384fd5b50506112d88682870161107d565b9150509250925092565b6000806000606084860312156112f6578283fd5b8335925060208401356001600160e01b031981168114611314578283fd5b929592945050506040919091013590565b6000806000806080858703121561133a578081fd5b84359350602085013561134c816116aa565b925060408501359150606085013561136381611699565b939692955090935050565b60008060408385031215611380578182fd5b82359150602083013560ff81168114611397578182fd5b809150509250929050565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156113ee578351835292840192918401916001016113d2565b50909695505050505050565b901515815260200190565b90815260200190565b6001600160e01b031991909116815260200190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601d908201527f6e6577206f776e657220697320746865207a65726f2061646472657373000000604082015260600190565b6020808252601590820152741393d38814d5541413d495115108141493d11550d5605a1b604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601190820152704e4f4e204558495354494e47205445524d60781b604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252601190820152704e4f4e20535550504f525445442043435960781b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b9384526001600160e01b031992909216602084015260408301521515606082015260800190565b9283526020830191909152604082015260600190565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561167157600080fd5b604052919050565b600067ffffffffffffffff82111561168f578081fd5b5060209081020190565b80151581146116a757600080fd5b50565b6001600160e01b0319811681146116a757600080fdfea2646970667358221220c82fac9471748941a68758d621ebb21f48e157e6fb2f411cee21c6530ee8f8dc64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638b1e26a41161008c578063aec86de611610066578063aec86de6146101b3578063b1547add146101c8578063d04cad02146101db578063fd86c90c146101ee576100cf565b80638b1e26a41461016b5780638da5cb5b1461018b57806399c2e2c4146101a0576100cf565b806302ccf015146100d4578063072d3da5146100fd57806313af40351461011d57806346b0575d146101325780635cdbcd2714610145578063849d7a5014610158575b600080fd5b6100e76100e23660046111ff565b610210565b6040516100f49190611405565b60405180910390f35b61011061010b3660046112e2565b610223565b6040516100f491906113fa565b61013061012b3660046110eb565b61025a565b005b6100e76101403660046111ff565b6102fb565b610110610153366004611217565b61030d565b6100e761016636600461136e565b610410565b61017e6101793660046111be565b610425565b6040516100f491906113b6565b610193610576565b6040516100f491906113a2565b6101106101ae366004611325565b610585565b6101bb6107b4565b6040516100f49190611644565b61017e6101d636600461136e565b6107c4565b6101306101e93660046110eb565b6107d0565b6102016101fc36600461136e565b610809565b6040516100f49392919061162e565b600061021b8261085b565b90505b919050565b6001600160e01b0319821660009081526004602090815260408083208484529091528120610251818661089d565b95945050505050565b6000546001600160a01b0316331461027157600080fd5b6001600160a01b0381166102a05760405162461bcd60e51b81526004016102979061149c565b60405180910390fd5b600080546040516001600160a01b03808516939216917fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c91a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60009081526003602052604090205490565b600080546001600160a01b0316331461032557600080fd5b6000805460ff600160a01b808304821680820260019091019092160260ff60a01b19928316179091161781558481526003602052604090208490558251156103d25760005b83518110156103d057600084828151811061038157fe5b6020026020010151905060005b84518110156103c65760008582815181106103a557fe5b602002602001015190506103bc8884836001610585565b505060010161038e565b505060010161036a565b505b7f85b976c846042e714c80a25af4c8110d83d827086708b873b3fb04ff98e52144846040516104019190611405565b60405180910390a19392505050565b600061041c83836108a9565b90505b92915050565b6001600160e01b031983166000908152600460209081526040808320858452909152812060609161045582610a65565b905060608167ffffffffffffffff8111801561047057600080fd5b5060405190808252806020026020018201604052801561049a578160200160208202803683370190505b50905060005b828110156104d75760006104b48583610a70565b9050808383815181106104c357fe5b6020908102919091010152506001016104a0565b50841561056c57604051634f64581360e11b815273__$69df8f3ef0941d5dac5ad52c193381be4b$__90639ec8b026906105159084906004016113b6565b60006040518083038186803b15801561052d57600080fd5b505af4158015610541573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105699190810190611112565b90505b9695505050505050565b6000546001600160a01b031681565b600080546001600160a01b0316331461059d57600080fd5b600085815260036020526040902054859081146105cc5760405162461bcd60e51b815260040161029790611539565b600254604051631356c4d160e11b81526001600160a01b03909116906326ad89a2906105fc90889060040161140e565b60206040518083038186803b15801561061457600080fd5b505afa158015610628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064c91906111a2565b6106685760405162461bcd60e51b8152600401610297906114d3565b600154604051636a6a7b6760e11b81526001600160a01b039091169063d4d4f6ce90610698908790600401611405565b60206040518083038186803b1580156106b057600080fd5b505afa1580156106c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e891906111a2565b6107045760405162461bcd60e51b81526004016102979061159b565b821561073e576001600160e01b03198516600090815260046020908152604080832087845290915290206107389087610a7c565b5061076e565b6001600160e01b031985166000908152600460209081526040808320878452909152902061076c9087610a88565b505b7f8b5c8e8024eb720a3028fc80e6a6b7a02e67c1b1d3a40d7063ac37140d3ffe59868686866040516107a39493929190611607565b60405180910390a150949350505050565b600054600160a01b900460ff1681565b606061041c8383610a94565b6000546001600160a01b031633146107e757600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600080600061081661105c565b600086815260036020526040902054815261083086610210565b602082015261083f8686610410565b6040820181905281516020909201519197919650945092505050565b600061016d821061086f575061271061021e565b61016d82101561021e57600061088761016884610e3a565b905061089561271082610e3a565b91505061021e565b600061041c8383610e6c565b6000808260ff1660048111156108bb57fe5b60048111156108c657fe5b14156109035761016d83106108e8576108e18361016d610e3a565b905061041f565b82156108f65750600161041f565b50600061041f565b61041f565b60018260ff16600481111561091457fe5b600481111561091f57fe5b14156109795761016d831061096657600061095161094a60056109448761016d610e3a565b90610e84565b8590610ebe565b905061095e8160b4610e3a565b91505061041f565b60b483106108e8576108e18360b4610e3a565b60028260ff16600481111561098a57fe5b600481111561099557fe5b14156109da5761016d83106109c75760006109ba61094a60056109448761016d610e3a565b905061095e81605a610e3a565b605a83106108e8576108e183605a610e3a565b60038260ff1660048111156109eb57fe5b60048111156109f657fe5b1415610a3b5761016d8310610a28576000610a1b61094a60056109448761016d610e3a565b905061095e81601e610e3a565b601e83106108e8576108e183601e610e3a565b60048260ff166004811115610a4c57fe5b6004811115610a5757fe5b141561041f5750600161041f565b600061021b82610ee6565b600061041c8383610eea565b600061041c8383610f2f565b600061041c8383610f71565b606060008260ff166004811115610aa757fe5b6004811115610ab257fe5b1415610bc15761016d8310610b67576000610acf8461016d610e3a565b905060608167ffffffffffffffff81118015610aea57600080fd5b50604051908082528060200260200182016040528015610b14578160200160208202803683370190505b50905060005b82811015610b5d576000610b2f826001611037565b9050610b3d8161016d610e84565b838381518110610b4957fe5b602090810291909101015250600101610b1a565b50915061041f9050565b82156108fe576060600160005b50604051908082528060200260200182016040528015610b9e578160200160208202803683370190505b5090508381600081518110610baf57fe5b6020908102919091010152905061041f565b60018260ff166004811115610bd257fe5b6004811115610bdd57fe5b1415610c855760b48310610b67576000610bf88460b4610e3a565b905060608167ffffffffffffffff81118015610c1357600080fd5b50604051908082528060200260200182016040528015610c3d578160200160208202803683370190505b50905060005b82811015610b5d576000610c58826001611037565b9050610c658160b4610e84565b838381518110610c7157fe5b602090810291909101015250600101610c43565b60028260ff166004811115610c9657fe5b6004811115610ca157fe5b1415610d4957605a8310610b67576000610cbc84605a610e3a565b905060608167ffffffffffffffff81118015610cd757600080fd5b50604051908082528060200260200182016040528015610d01578160200160208202803683370190505b50905060005b82811015610b5d576000610d1c826001611037565b9050610d2981605a610e84565b838381518110610d3557fe5b602090810291909101015250600101610d07565b60038260ff166004811115610d5a57fe5b6004811115610d6557fe5b1415610e0d57601e8310610b67576000610d8084601e610e3a565b905060608167ffffffffffffffff81118015610d9b57600080fd5b50604051908082528060200260200182016040528015610dc5578160200160208202803683370190505b50905060005b82811015610b5d576000610de0826001611037565b9050610ded81601e610e84565b838381518110610df957fe5b602090810291909101015250600101610dcb565b60048260ff166004811115610e1e57fe5b6004811115610e2957fe5b141561041f57606060016000610b74565b6000808211610e5b5760405162461bcd60e51b815260040161029790611564565b818381610e6457fe5b049392505050565b60009081526001919091016020526040902054151590565b600082610e935750600061041f565b82820282848281610ea057fe5b041461041c5760405162461bcd60e51b8152600401610297906115c6565b600082821115610ee05760405162461bcd60e51b815260040161029790611502565b50900390565b5490565b81546000908210610f0d5760405162461bcd60e51b815260040161029790611423565b826000018281548110610f1c57fe5b9060005260206000200154905092915050565b6000610f3b8383610e6c565b6108f65750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561041f565b6000818152600183016020526040812054801561102d5783546000198083019190810190600090879083908110610fa457fe5b9060005260206000200154905080876000018481548110610fc157fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080610ff157fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061041f565b600091505061041f565b60008282018381101561041c5760405162461bcd60e51b815260040161029790611465565b60405180606001604052806000815260200160008152602001600081525090565b600082601f83011261108d578081fd5b81356110a061109b82611679565b611652565b8181529150602080830190848101818402860182018710156110c157600080fd5b60005b848110156110e0578135845292820192908201906001016110c4565b505050505092915050565b6000602082840312156110fc578081fd5b81356001600160a01b038116811461041c578182fd5b60006020808385031215611124578182fd5b825167ffffffffffffffff81111561113a578283fd5b8301601f8101851361114a578283fd5b805161115861109b82611679565b8181528381019083850185840285018601891015611174578687fd5b8694505b83851015611196578051835260019490940193918501918501611178565b50979650505050505050565b6000602082840312156111b3578081fd5b815161041c81611699565b6000806000606084860312156111d2578182fd5b83356111dd816116aa565b92506020840135915060408401356111f481611699565b809150509250925092565b600060208284031215611210578081fd5b5035919050565b60008060006060848603121561122b578283fd5b8335925060208085013567ffffffffffffffff8082111561124a578485fd5b818701915087601f83011261125d578485fd5b813561126b61109b82611679565b81815284810190848601868402860187018c1015611287578889fd5b8895505b838610156112b257803561129e816116aa565b83526001959095019491860191860161128b565b509650505060408701359250808311156112ca578384fd5b50506112d88682870161107d565b9150509250925092565b6000806000606084860312156112f6578283fd5b8335925060208401356001600160e01b031981168114611314578283fd5b929592945050506040919091013590565b6000806000806080858703121561133a578081fd5b84359350602085013561134c816116aa565b925060408501359150606085013561136381611699565b939692955090935050565b60008060408385031215611380578182fd5b82359150602083013560ff81168114611397578182fd5b809150509250929050565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156113ee578351835292840192918401916001016113d2565b50909695505050505050565b901515815260200190565b90815260200190565b6001600160e01b031991909116815260200190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601d908201527f6e6577206f776e657220697320746865207a65726f2061646472657373000000604082015260600190565b6020808252601590820152741393d38814d5541413d495115108141493d11550d5605a1b604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601190820152704e4f4e204558495354494e47205445524d60781b604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252601190820152704e4f4e20535550504f525445442043435960781b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b9384526001600160e01b031992909216602084015260408301521515606082015260800190565b9283526020830191909152604082015260600190565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561167157600080fd5b604052919050565b600067ffffffffffffffff82111561168f578081fd5b5060209081020190565b80151581146116a757600080fd5b50565b6001600160e01b0319811681146116a757600080fdfea2646970667358221220c82fac9471748941a68758d621ebb21f48e157e6fb2f411cee21c6530ee8f8dc64736f6c634300060c0033",
  "libraries": {
    "QuickSort": "0xeAE7Ee84269af9E9F6F68AF57eAd4f8EB495dB8d"
  },
  "devdoc": {
    "details": "Term Structure contract is responsible for managing supported terms in Secured Finance Protocol per product and currency",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Term Structure Constructor."
      },
      "getDfFrac(uint256)": {
        "details": "Triggers to get discount factor fractions.",
        "params": {
          "_numDays": "Number of days in term"
        }
      },
      "getNumDays(uint256)": {
        "details": "Triggers to get number of days for supported term. number of days follows ACT365 market convention",
        "params": {
          "_numDays": "Number of days in term"
        }
      },
      "getNumPayments(uint256,uint8)": {
        "details": "Triggers to get number of coupon payments.",
        "params": {
          "_frequency": "Payment frequency (like annual, semi-annual, etc.)",
          "_numDays": "Number of days in term"
        }
      },
      "getTerm(uint256,uint8)": {
        "details": "Triggers to get term structure.",
        "params": {
          "_numDays": "Number of days in term"
        }
      },
      "getTermSchedule(uint256,uint8)": {
        "details": "Triggers to get payment schedule for supported term according to the payment frequency number of days follows ACT365 market convention",
        "params": {
          "_frequency": "Payment frequency (like annual, semi-annual, etc.)",
          "_numDays": "Number of days in term"
        }
      },
      "getTermsForProductAndCcy(bytes4,bytes32,bool)": {
        "details": "Returns an array of supported terms for a specific product and currency",
        "params": {
          "_ccy": "Currency short identifier",
          "_product": "Product prefix"
        }
      },
      "isSupportedTerm(uint256,bytes4,bytes32)": {
        "details": "Triggers to get if specified term is supported for a particular ccy and product.",
        "params": {
          "_ccy": "Currency short identifier",
          "_numDays": "Number of days in term",
          "_product": "Product prefix"
        }
      },
      "setCurrencyController(address)": {
        "details": "Triggers to link with Currency Controller contract.",
        "params": {
          "_currencyController": "CurrencyController smart contract address"
        }
      },
      "setOwner(address)": {
        "details": "Sets owner of the controller market.",
        "params": {
          "_owner": "Address of new owner"
        }
      },
      "supportTerm(uint256,bytes4[],bytes32[])": {
        "details": "Triggers to add new term into the protocol",
        "params": {
          "_currencies": "Array of currencies supporting this term",
          "_numDays": "Number of calendar days in a term",
          "_products": "Array of products supporting this term"
        }
      },
      "updateTermSupport(uint256,bytes4,bytes32,bool)": {
        "details": "Triggers to update product and currency support for term",
        "params": {
          "_ccy": "Currency short identifier",
          "_isSupported": "Boolean whether term supported for specified `_product` and `_ccy`",
          "_numDays": "Number of days in term",
          "_product": "Product prefix"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setCurrencyController(address)": {
        "notice": "Executed only by contract owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19215,
        "contract": "contracts/TermStructure.sol:TermStructure",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 19218,
        "contract": "contracts/TermStructure.sol:TermStructure",
        "label": "last_term_index",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 19220,
        "contract": "contracts/TermStructure.sol:TermStructure",
        "label": "currencyController",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICurrencyController)21317"
      },
      {
        "astId": 19222,
        "contract": "contracts/TermStructure.sol:TermStructure",
        "label": "productResolver",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IProductAddressResolver)22478"
      },
      {
        "astId": 19233,
        "contract": "contracts/TermStructure.sol:TermStructure",
        "label": "terms",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 19239,
        "contract": "contracts/TermStructure.sol:TermStructure",
        "label": "termsForProductAndCcy",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(UintSet)1933_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(ICurrencyController)21317": {
        "encoding": "inplace",
        "label": "contract ICurrencyController",
        "numberOfBytes": "20"
      },
      "t_contract(IProductAddressResolver)22478": {
        "encoding": "inplace",
        "label": "contract IProductAddressResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(UintSet)1933_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)1933_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(UintSet)1933_storage))": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => mapping(bytes32 => struct EnumerableSet.UintSet))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(UintSet)1933_storage)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Set)1547_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1542,
            "contract": "contracts/TermStructure.sol:TermStructure",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1546,
            "contract": "contracts/TermStructure.sol:TermStructure",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)1933_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 1932,
            "contract": "contracts/TermStructure.sol:TermStructure",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1547_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
