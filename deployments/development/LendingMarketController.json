{
  "address": "0x28a629f624299621394523E5cF51f6aD3655C538",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "orderId",
          "type": "uint48"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        }
      ],
      "name": "CancelOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "futureValueVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "name": "CreateLendingMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "filledFutureValue",
          "type": "uint256"
        }
      ],
      "name": "FillOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "filledFutureValue",
          "type": "uint256"
        }
      ],
      "name": "FillOrdersAsync",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        }
      ],
      "name": "PlaceOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaturity",
          "type": "uint256"
        }
      ],
      "name": "RotateLendingMarkets",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateBorrowedFundsFromOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "workingOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "obligationAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateLentFundsFromOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "workingOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lentAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateTotalFundsInETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalWorkingLendOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalWorkingBorrowOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalObligationAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrowedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "_orderId",
          "type": "uint48"
        }
      ],
      "name": "cancelOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "cleanAllOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "cleanOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        }
      ],
      "name": "createLendOrderWithETH",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "createLendingMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "futureValueVault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        }
      ],
      "name": "createOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        }
      ],
      "name": "depositAndCreateLendOrderWithETH",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        }
      ],
      "name": "depositAndCreateOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getBorrowOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getBorrowUnitPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getFutureValueVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getGenesisDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getLendOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getLendUnitPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getLendingMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getLendingMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getMaturities",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getMidUnitPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalPresentValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "totalPresentValue",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalPresentValueInETH",
      "outputs": [
        {
          "internalType": "int256",
          "name": "totalPresentValue",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_genesisDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_compoundFactor",
          "type": "uint256"
        }
      ],
      "name": "initializeLendingMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "isInitializedLendingMarket",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "pauseLendingMarkets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "rotateLendingMarkets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "unpauseLendingMarkets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xebcb3c295bd680b40f2f97782f0d157183a8c8a41978cceebd1d4815b7510304",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x22003C80DD3fd0D4D1D342a3e0DC05f8905Ad7a2",
    "transactionIndex": 16,
    "gasUsed": "4827525",
    "logsBloom": "0x
    "blockHash": "0x05f98e7d82b424ec179da8d48d608e49f15af8db1564b3b80a8c1dad8d619148",
    "transactionHash": "0xebcb3c295bd680b40f2f97782f0d157183a8c8a41978cceebd1d4815b7510304",
    "logs": [],
    "blockNumber": 7990347,
    "cumulativeGasUsed": "9760203",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "ca39234284045a01d53a150dc8ba29f5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"orderId\",\"type\":\"uint48\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"}],\"name\":\"CancelOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"futureValueVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"name\":\"CreateLendingMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filledFutureValue\",\"type\":\"uint256\"}],\"name\":\"FillOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filledFutureValue\",\"type\":\"uint256\"}],\"name\":\"FillOrdersAsync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"}],\"name\":\"PlaceOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaturity\",\"type\":\"uint256\"}],\"name\":\"RotateLendingMarkets\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateBorrowedFundsFromOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"workingOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"obligationAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateLentFundsFromOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"workingOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lentAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateTotalFundsInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalWorkingLendOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWorkingBorrowOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalObligationAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"_orderId\",\"type\":\"uint48\"}],\"name\":\"cancelOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"cleanAllOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"cleanOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"createLendOrderWithETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"createLendingMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"futureValueVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"depositAndCreateLendOrderWithETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"depositAndCreateOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getBorrowOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getBorrowUnitPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getFutureValueVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getGenesisDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getLendOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getLendUnitPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getLendingMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getLendingMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getMaturities\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getMidUnitPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalPresentValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"totalPresentValue\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalPresentValueInETH\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"totalPresentValue\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_genesisDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_compoundFactor\",\"type\":\"uint256\"}],\"name\":\"initializeLendingMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"isInitializedLendingMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"pauseLendingMarkets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"rotateLendingMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"unpauseLendingMarkets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptedContracts()\":{\"details\":\"The contact name listed in this method is also needed to be listed `requiredContracts` method.\"},\"calculateBorrowedFundsFromOrders(bytes32,address)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"borrowedAmount\":\"The borrowed amount due to the borrow orders being filled on the order book\",\"obligationAmount\":\"The debt amount due to the borrow orders being filled on the order book\",\"workingOrdersAmount\":\"The working orders amount on the order book\"}},\"calculateLentFundsFromOrders(bytes32,address)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"claimableAmount\":\"The claimable amount due to the lending orders being filled on the order book\",\"workingOrdersAmount\":\"The working orders amount on the order book\"}},\"cancelOrder(bytes32,uint256,uint48)\":{\"params\":{\"_ccy\":\"Currency name in bytes32 of the selected market\",\"_maturity\":\"The maturity of the selected market\",\"_orderId\":\"Market order id\"}},\"cleanAllOrders(address)\":{\"params\":{\"_user\":\"User's address\"}},\"cleanOrders(bytes32,address)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"createLendOrderWithETH(bytes32,uint256,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32 of the selected market\",\"_maturity\":\"The maturity of the selected market\",\"_unitPrice\":\"Amount of unit price taker wish to borrow/lend\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}},\"createLendingMarket(bytes32)\":{\"params\":{\"_ccy\":\"Main currency for new lending market\"},\"returns\":{\"market\":\"The proxy contract address of created lending market\"}},\"createOrder(bytes32,uint256,uint8,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of funds the maker wants to borrow/lend\",\"_ccy\":\"Currency name in bytes32 of the selected market\",\"_maturity\":\"The maturity of the selected market\",\"_side\":\"Order position type, Borrow or Lend\",\"_unitPrice\":\"Amount of unit price taker wish to borrow/lend\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}},\"depositAndCreateLendOrderWithETH(bytes32,uint256,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32 of the selected market\",\"_maturity\":\"The maturity of the selected market\",\"_unitPrice\":\"Amount of unit price taker wish to borrow/lend\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}},\"depositAndCreateOrder(bytes32,uint256,uint8,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of funds the maker wants to borrow/lend\",\"_ccy\":\"Currency name in bytes32 of the selected market\",\"_maturity\":\"The maturity of the selected market\",\"_side\":\"Order position type, Borrow or Lend\",\"_unitPrice\":\"Amount of unit price taker wish to borrow/lend\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}},\"getBorrowOrderBook(bytes32,uint256,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_limit\":\"The limit number to get\",\"_maturity\":\"The maturity of the market\"},\"returns\":{\"amounts\":\"The array of borrow order amounts\",\"quantities\":\"The array of borrow order quantities\",\"unitPrices\":\"The array of borrow unit prices\"}},\"getBorrowUnitPrices(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"Array with the borrowing prices per future value of the lending market\"}},\"getFutureValueVault(bytes32,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_maturity\":\"The maturity of the market\"},\"returns\":{\"_0\":\"The lending market address\"}},\"getGenesisDate(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The genesis date\"}},\"getLendOrderBook(bytes32,uint256,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_limit\":\"The limit number to get\",\"_maturity\":\"The maturity of the market\"},\"returns\":{\"amounts\":\"The array of lend order amounts\",\"quantities\":\"The array of lend order quantities\",\"unitPrices\":\"The array of borrow unit prices\"}},\"getLendUnitPrices(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"Array with the lending prices per future value of the lending market\"}},\"getLendingMarket(bytes32,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_maturity\":\"The maturity of the market\"},\"returns\":{\"_0\":\"The lending market address\"}},\"getLendingMarkets(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"Array with the lending market address\"}},\"getMaturities(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"Array with the lending market maturity\"}},\"getMidUnitPrices(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"Array with the mid prices per future value of the lending market\"}},\"getTotalPresentValue(bytes32,address)\":{\"params\":{\"_ccy\":\"Currency name in bytes32 for Lending Market\",\"_user\":\"User's address\"},\"returns\":{\"totalPresentValue\":\"The total present value\"}},\"getTotalPresentValueInETH(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"totalPresentValue\":\"The total present value in ETH\"}},\"initialize(address,address)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController.\",\"params\":{\"_owner\":\"The address of the contract owner\",\"_resolver\":\"The address of the Address Resolver contract\"}},\"initializeLendingMarket(bytes32,uint256,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_compoundFactor\":\"The initial compound factor when the initial market is opened\",\"_genesisDate\":\"The genesis date when the initial market is opened\"}},\"isInitializedLendingMarket(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The boolean if the lending market is initialized or not\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseLendingMarkets(bytes32)\":{\"params\":{\"_ccy\":\"Currency for pausing all lending markets\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requiredContracts()\":{\"details\":\"The contract name list is in `./libraries/Contracts.sol`.\"},\"rotateLendingMarkets(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32 of the selected market\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpauseLendingMarkets(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptedContracts()\":{\"notice\":\"Returns contract names that can call this contract.\"},\"calculateBorrowedFundsFromOrders(bytes32,address)\":{\"notice\":\"Gets the funds that are calculated from the user's borrowing order list for the selected currency.\"},\"calculateLentFundsFromOrders(bytes32,address)\":{\"notice\":\"Gets the funds that are calculated from the user's lending order list for the selected currency.\"},\"cancelOrder(bytes32,uint256,uint48)\":{\"notice\":\"Cancels the own order.\"},\"cleanAllOrders(address)\":{\"notice\":\"Cleans user's all orders to remove order ids that are already filled on the order book.\"},\"cleanOrders(bytes32,address)\":{\"notice\":\"Cleans user's orders to remove order ids that are already filled on the order book for a selected currency.\"},\"createLendOrderWithETH(bytes32,uint256,uint256)\":{\"notice\":\"Creates a lend order with ETH. Takes the order if the order is matched, and places new order if not match it.\"},\"createLendingMarket(bytes32)\":{\"notice\":\"Deploys new Lending Market and save address at lendingMarkets mapping.Reverts on deployment market with existing currency and term\"},\"createOrder(bytes32,uint256,uint8,uint256,uint256)\":{\"notice\":\"Creates an order. Takes orders if the orders are matched, and places new order if not match it. In addition, converts the future value to the genesis value if there is future value in past maturity before the execution of order creation.\"},\"depositAndCreateLendOrderWithETH(bytes32,uint256,uint256)\":{\"notice\":\"Deposits funds and creates a lend order with ETH at the same time.\"},\"depositAndCreateOrder(bytes32,uint256,uint8,uint256,uint256)\":{\"notice\":\"Deposits funds and creates an order at the same time.\"},\"getBorrowOrderBook(bytes32,uint256,uint256)\":{\"notice\":\"Gets the order book of borrow.\"},\"getBorrowUnitPrices(bytes32)\":{\"notice\":\"Gets borrow prices per future value for the selected currency.\"},\"getFutureValueVault(bytes32,uint256)\":{\"notice\":\"Gets the feture value contract address for the selected currency and maturity.\"},\"getGenesisDate(bytes32)\":{\"notice\":\"Gets the genesis date when the first market opens for the selected currency.\"},\"getLendOrderBook(bytes32,uint256,uint256)\":{\"notice\":\"Gets the order book of lend.\"},\"getLendUnitPrices(bytes32)\":{\"notice\":\"Gets lend prices per future value for the selected currency.\"},\"getLendingMarket(bytes32,uint256)\":{\"notice\":\"Gets the lending market contract address for the selected currency and maturity.\"},\"getLendingMarkets(bytes32)\":{\"notice\":\"Gets the lending market contract addresses for the selected currency.\"},\"getMaturities(bytes32)\":{\"notice\":\"Gets maturities for the selected currency.\"},\"getMidUnitPrices(bytes32)\":{\"notice\":\"Gets mid prices per future value for the selected currency.\"},\"getTotalPresentValue(bytes32,address)\":{\"notice\":\"Gets the total present value of the account for selected currency.\"},\"getTotalPresentValueInETH(address)\":{\"notice\":\"Gets the total present value of the account converted to ETH.\"},\"initialize(address,address)\":{\"notice\":\"Initializes the contract.\"},\"initializeLendingMarket(bytes32,uint256,uint256)\":{\"notice\":\"Initialize the lending market to set a genesis date and compound factor\"},\"isInitializedLendingMarket(bytes32)\":{\"notice\":\"Gets if the lending market is initialized.\"},\"pauseLendingMarkets(bytes32)\":{\"notice\":\"Pauses previously deployed lending market by currency\"},\"requiredContracts()\":{\"notice\":\"Returns the contract names used in this contract.\"},\"rotateLendingMarkets(bytes32)\":{\"notice\":\"Rotate the lending markets. In this rotation, the following actions are happened. - Updates the maturity at the beginning of the market array. - Moves the beginning of the market array to the end of it. - Update the compound factor in this contract using the next market unit price.\"},\"unpauseLendingMarkets(bytes32)\":{\"notice\":\"Unpauses previously deployed lending market by currency\"}},\"notice\":\"Implements the module to manage separated lending order-book markets per maturity. This contract also works as a factory contract that can deploy\\u00a0(start)\\u00a0a new lending market for selected currency and maturity and has the calculation logic for the Genesis value in addition. Deployed Lending Markets are rotated and reused as it reaches the maturity date. At the time of rotation, a new maturity date is set and the compound factor is updated. The users mainly call this contract to create orders to lend or borrow funds.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LendingMarketController.sol\":\"LendingMarketController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/LendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n// interfaces\\nimport {ILendingMarketController} from \\\"./interfaces/ILendingMarketController.sol\\\";\\nimport {ILendingMarket} from \\\"./interfaces/ILendingMarket.sol\\\";\\nimport {IFutureValueVault} from \\\"./interfaces/IFutureValueVault.sol\\\";\\n// libraries\\nimport {Contracts} from \\\"./libraries/Contracts.sol\\\";\\nimport {BokkyPooBahsDateTimeLibrary as TimeLibrary} from \\\"./libraries/BokkyPooBahsDateTimeLibrary.sol\\\";\\n// mixins\\nimport {MixinAddressResolver} from \\\"./mixins/MixinAddressResolver.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"./types/ProtocolTypes.sol\\\";\\n// utils\\nimport {Ownable} from \\\"./utils/Ownable.sol\\\";\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\n// storages\\nimport {LendingMarketControllerStorage as Storage} from \\\"./storages/LendingMarketControllerStorage.sol\\\";\\n\\n/**\\n * @notice Implements the module to manage separated lending order-book markets per maturity.\\n *\\n * This contract also works as a factory contract that can deploy\\u00a0(start)\\u00a0a new lending market\\n * for selected currency and maturity and has the calculation logic for the Genesis value in addition.\\n *\\n * Deployed Lending Markets are rotated and reused as it reaches the maturity date. At the time of rotation,\\n * a new maturity date is set and the compound factor is updated.\\n *\\n * The users mainly call this contract to create orders to lend or borrow funds.\\n */\\ncontract LendingMarketController is\\n    ILendingMarketController,\\n    MixinAddressResolver,\\n    ReentrancyGuard,\\n    Ownable,\\n    Proxyable\\n{\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    uint256 private constant BASIS_TERM = 3;\\n    uint256 private constant MAXIMUM_ORDER_COUNT = 5;\\n\\n    /**\\n     * @notice Modifier to check if the currency has a lending market.\\n     * @param _ccy Currency name in bytes32\\n     */\\n    modifier hasLendingMarket(bytes32 _ccy) {\\n        require(\\n            Storage.slot().lendingMarkets[_ccy].length > 0,\\n            \\\"No lending markets exist for a specific currency\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to check if there is a market in the maturity.\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity of the market\\n     */\\n    modifier ifValidMaturity(bytes32 _ccy, uint256 _maturity) {\\n        require(\\n            Storage.slot().maturityLendingMarkets[_ccy][_maturity] != address(0),\\n            \\\"Invalid maturity\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\\n     * @param _owner The address of the contract owner\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function initialize(address _owner, address _resolver) public initializer onlyProxy {\\n        _transferOwnership(_owner);\\n        registerAddressResolver(_resolver);\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](4);\\n        contracts[0] = Contracts.BEACON_PROXY_CONTROLLER;\\n        contracts[1] = Contracts.CURRENCY_CONTROLLER;\\n        contracts[2] = Contracts.GENESIS_VALUE_VAULT;\\n        contracts[3] = Contracts.TOKEN_VAULT;\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](1);\\n        contracts[0] = Contracts.TOKEN_VAULT;\\n    }\\n\\n    /**\\n     * @notice Gets the genesis date when the first market opens for the selected currency.\\n     * @param _ccy Currency name in bytes32\\n     * @return The genesis date\\n     */\\n    function getGenesisDate(bytes32 _ccy) external view override returns (uint256) {\\n        return Storage.slot().genesisDates[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the lending market contract addresses for the selected currency.\\n     * @param _ccy Currency name in bytes32\\n     * @return Array with the lending market address\\n     */\\n    function getLendingMarkets(bytes32 _ccy) external view override returns (address[] memory) {\\n        return Storage.slot().lendingMarkets[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the lending market contract address for the selected currency and maturity.\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity of the market\\n     * @return The lending market address\\n     */\\n    function getLendingMarket(bytes32 _ccy, uint256 _maturity)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return Storage.slot().maturityLendingMarkets[_ccy][_maturity];\\n    }\\n\\n    /**\\n     * @notice Gets the feture value contract address for the selected currency and maturity.\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity of the market\\n     * @return The lending market address\\n     */\\n    function getFutureValueVault(bytes32 _ccy, uint256 _maturity)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        return\\n            Storage.slot().futureValueVaults[_ccy][\\n                Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n            ];\\n    }\\n\\n    /**\\n     * @notice Gets borrow prices per future value for the selected currency.\\n     * @param _ccy Currency name in bytes32\\n     * @return Array with the borrowing prices per future value of the lending market\\n     */\\n    function getBorrowUnitPrices(bytes32 _ccy) external view override returns (uint256[] memory) {\\n        uint256[] memory unitPrices = new uint256[](Storage.slot().lendingMarkets[_ccy].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\\n            ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy][i]);\\n            unitPrices[i] = market.getBorrowUnitPrice();\\n        }\\n\\n        return unitPrices;\\n    }\\n\\n    /**\\n     * @notice Gets lend prices per future value for the selected currency.\\n     * @param _ccy Currency name in bytes32\\n     * @return Array with the lending prices per future value of the lending market\\n     */\\n    function getLendUnitPrices(bytes32 _ccy) external view override returns (uint256[] memory) {\\n        uint256[] memory unitPrices = new uint256[](Storage.slot().lendingMarkets[_ccy].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\\n            ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy][i]);\\n            unitPrices[i] = market.getLendUnitPrice();\\n        }\\n\\n        return unitPrices;\\n    }\\n\\n    /**\\n     * @notice Gets mid prices per future value for the selected currency.\\n     * @param _ccy Currency name in bytes32\\n     * @return Array with the mid prices per future value of the lending market\\n     */\\n    function getMidUnitPrices(bytes32 _ccy) external view override returns (uint256[] memory) {\\n        uint256[] memory unitPrices = new uint256[](Storage.slot().lendingMarkets[_ccy].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\\n            ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy][i]);\\n            unitPrices[i] = market.getMidUnitPrice();\\n        }\\n\\n        return unitPrices;\\n    }\\n\\n    /**\\n     * @notice Gets the order book of borrow.\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity of the market\\n     * @param _limit The limit number to get\\n     * @return unitPrices The array of borrow unit prices\\n     * @return amounts The array of borrow order amounts\\n     * @return quantities The array of borrow order quantities\\n     */\\n    function getBorrowOrderBook(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _limit\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        address market = Storage.slot().maturityLendingMarkets[_ccy][_maturity];\\n        return ILendingMarket(market).getBorrowOrderBook(_limit);\\n    }\\n\\n    /**\\n     * @notice Gets the order book of lend.\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity of the market\\n     * @param _limit The limit number to get\\n     * @return unitPrices The array of borrow unit prices\\n     * @return amounts The array of lend order amounts\\n     * @return quantities The array of lend order quantities\\n     */\\n    function getLendOrderBook(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _limit\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        address market = Storage.slot().maturityLendingMarkets[_ccy][_maturity];\\n        return ILendingMarket(market).getLendOrderBook(_limit);\\n    }\\n\\n    /**\\n     * @notice Gets maturities for the selected currency.\\n     * @param _ccy Currency name in bytes32\\n     * @return Array with the lending market maturity\\n     */\\n    function getMaturities(bytes32 _ccy) public view override returns (uint256[] memory) {\\n        uint256[] memory maturities = new uint256[](Storage.slot().lendingMarkets[_ccy].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\\n            ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy][i]);\\n            maturities[i] = market.getMaturity();\\n        }\\n\\n        return maturities;\\n    }\\n\\n    /**\\n     * @notice Gets the total present value of the account for selected currency.\\n     * @param _ccy Currency name in bytes32 for Lending Market\\n     * @param _user User's address\\n     * @return totalPresentValue The total present value\\n     */\\n    function getTotalPresentValue(bytes32 _ccy, address _user)\\n        public\\n        view\\n        override\\n        returns (int256 totalPresentValue)\\n    {\\n        // Get PV from Future Value Vault\\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\\n            address marketAddr = Storage.slot().lendingMarkets[_ccy][i];\\n            (int256 futureValueInMaturity, uint256 maturity) = IFutureValueVault(\\n                Storage.slot().futureValueVaults[_ccy][marketAddr]\\n            ).getFutureValue(_user);\\n\\n            totalPresentValue += _calculatePresentValue(\\n                _ccy,\\n                maturity,\\n                futureValueInMaturity,\\n                Storage.slot().lendingMarkets[_ccy][i]\\n            );\\n        }\\n\\n        // Get PV from Genesis Value Vault\\n        int256 amountInFV = genesisValueVault().getGenesisValueInFutureValue(_ccy, _user);\\n        totalPresentValue += _calculatePVFromFV(\\n            amountInFV,\\n            ILendingMarket(Storage.slot().lendingMarkets[_ccy][0]).getMidUnitPrice()\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the total present value of the account converted to ETH.\\n     * @param _user User's address\\n     * @return totalPresentValue The total present value in ETH\\n     */\\n    function getTotalPresentValueInETH(address _user)\\n        external\\n        view\\n        override\\n        returns (int256 totalPresentValue)\\n    {\\n        EnumerableSet.Bytes32Set storage currencySet = Storage.slot().usedCurrencies[_user];\\n\\n        for (uint256 i = 0; i < currencySet.length(); i++) {\\n            bytes32 ccy = currencySet.at(i);\\n            int256 amount = getTotalPresentValue(ccy, _user);\\n            totalPresentValue += currencyController().convertToETH(ccy, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the funds that are calculated from the user's lending order list for the selected currency.\\n     * @param _ccy Currency name in bytes32\\n     * @param _user User's address\\n     * @return workingOrdersAmount The working orders amount on the order book\\n     * @return claimableAmount The claimable amount due to the lending orders being filled on the order book\\n     */\\n    function calculateLentFundsFromOrders(bytes32 _ccy, address _user)\\n        public\\n        view\\n        returns (\\n            uint256 workingOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 lentAmount\\n        )\\n    {\\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\\n            (\\n                uint256 activeAmount,\\n                uint256 inactiveAmount,\\n                uint256 inactiveFutureValueInMaturity,\\n                uint256 maturity\\n            ) = ILendingMarket(Storage.slot().lendingMarkets[_ccy][i]).getTotalAmountFromLendOrders(\\n                        _user\\n                    );\\n\\n            workingOrdersAmount += activeAmount;\\n            claimableAmount += uint256(\\n                _calculatePresentValue(\\n                    _ccy,\\n                    maturity,\\n                    int256(inactiveFutureValueInMaturity),\\n                    Storage.slot().lendingMarkets[_ccy][i]\\n                )\\n            );\\n            lentAmount += inactiveAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the funds that are calculated from the user's borrowing order list for the selected currency.\\n     * @param _ccy Currency name in bytes32\\n     * @param _user User's address\\n     * @return workingOrdersAmount The working orders amount on the order book\\n     * @return obligationAmount The debt amount due to the borrow orders being filled on the order book\\n     * @return borrowedAmount The borrowed amount due to the borrow orders being filled on the order book\\n     */\\n    function calculateBorrowedFundsFromOrders(bytes32 _ccy, address _user)\\n        public\\n        view\\n        returns (\\n            uint256 workingOrdersAmount,\\n            uint256 obligationAmount,\\n            uint256 borrowedAmount\\n        )\\n    {\\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\\n            (\\n                uint256 activeAmount,\\n                uint256 inactiveAmount,\\n                uint256 inactiveFutureValueInMaturity,\\n                uint256 maturity\\n            ) = ILendingMarket(Storage.slot().lendingMarkets[_ccy][i])\\n                    .getTotalAmountFromBorrowOrders(_user);\\n\\n            workingOrdersAmount += activeAmount;\\n            obligationAmount += uint256(\\n                _calculatePresentValue(\\n                    _ccy,\\n                    maturity,\\n                    int256(inactiveFutureValueInMaturity),\\n                    Storage.slot().lendingMarkets[_ccy][i]\\n                )\\n            );\\n            borrowedAmount += inactiveAmount;\\n        }\\n    }\\n\\n    function calculateTotalFundsInETH(address _user)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 totalWorkingLendOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalLentAmount,\\n            uint256 totalWorkingBorrowOrdersAmount,\\n            uint256 totalObligationAmount,\\n            uint256 totalBorrowedAmount\\n        )\\n    {\\n        EnumerableSet.Bytes32Set storage currencySet = Storage.slot().usedCurrencies[_user];\\n\\n        // Calculate total funds from the user's order list\\n        for (uint256 i = 0; i < currencySet.length(); i++) {\\n            bytes32 ccy = currencySet.at(i);\\n            uint256[] memory amounts = new uint256[](6);\\n\\n            (amounts[0], amounts[1], amounts[2]) = calculateLentFundsFromOrders(ccy, _user);\\n            (amounts[3], amounts[4], amounts[5]) = calculateBorrowedFundsFromOrders(ccy, _user);\\n\\n            // Calculate total present value from Future Value Vault and Genesis Value Vault.\\n            int256 totalPresentValue = getTotalPresentValue(ccy, _user);\\n            if (totalPresentValue >= 0) {\\n                // Add to claimableAmount\\n                amounts[1] += uint256(totalPresentValue);\\n            } else {\\n                // Add to obligationAmount\\n                amounts[4] += uint256(-totalPresentValue);\\n            }\\n\\n            uint256[] memory amountsInETH = currencyController().convertToETH(ccy, amounts);\\n\\n            totalWorkingLendOrdersAmount += amountsInETH[0];\\n            totalClaimableAmount += amountsInETH[1];\\n            totalLentAmount += amountsInETH[2];\\n\\n            totalWorkingBorrowOrdersAmount += amountsInETH[3];\\n            totalObligationAmount += amountsInETH[4];\\n            totalBorrowedAmount += amountsInETH[5];\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets if the lending market is initialized.\\n     * @param _ccy Currency name in bytes32\\n     * @return The boolean if the lending market is initialized or not\\n     */\\n    function isInitializedLendingMarket(bytes32 _ccy) public view override returns (bool) {\\n        return Storage.slot().genesisDates[_ccy] != 0;\\n    }\\n\\n    /**\\n     * @notice Initialize the lending market to set a genesis date and compound factor\\n     * @param _ccy Currency name in bytes32\\n     * @param _genesisDate The genesis date when the initial market is opened\\n     * @param _compoundFactor The initial compound factor when the initial market is opened\\n     */\\n    function initializeLendingMarket(\\n        bytes32 _ccy,\\n        uint256 _genesisDate,\\n        uint256 _compoundFactor\\n    ) external override onlyOwner {\\n        require(_compoundFactor > 0, \\\"Invalid compound factor\\\");\\n        require(!isInitializedLendingMarket(_ccy), \\\"Already initialized\\\");\\n\\n        genesisValueVault().registerCurrency(_ccy, 18, _compoundFactor);\\n        Storage.slot().genesisDates[_ccy] = _genesisDate;\\n    }\\n\\n    /**\\n     * @notice Deploys new Lending Market and save address at lendingMarkets mapping.\\n     * @param _ccy Main currency for new lending market\\n     * @notice Reverts on deployment market with existing currency and term\\n     * @return market The proxy contract address of created lending market\\n     */\\n    function createLendingMarket(bytes32 _ccy)\\n        external\\n        override\\n        onlyOwner\\n        returns (address market, address futureValueVault)\\n    {\\n        require(\\n            genesisValueVault().isRegisteredCurrency(_ccy),\\n            \\\"Lending market hasn't been initialized in the currency\\\"\\n        );\\n        require(currencyController().isSupportedCcy(_ccy), \\\"NON SUPPORTED CCY\\\");\\n\\n        uint256 genesisDate = Storage.slot().genesisDates[_ccy];\\n\\n        if (Storage.slot().lendingMarkets[_ccy].length > 0) {\\n            genesisDate = ILendingMarket(\\n                Storage.slot().lendingMarkets[_ccy][Storage.slot().lendingMarkets[_ccy].length - 1]\\n            ).getMaturity();\\n        }\\n\\n        uint256 nextMaturity = TimeLibrary.addMonths(genesisDate, BASIS_TERM);\\n\\n        market = beaconProxyController().deployLendingMarket(\\n            _ccy,\\n            Storage.slot().genesisDates[_ccy],\\n            nextMaturity\\n        );\\n        futureValueVault = beaconProxyController().deployFutureValueVault();\\n\\n        Storage.slot().lendingMarkets[_ccy].push(market);\\n        Storage.slot().maturityLendingMarkets[_ccy][nextMaturity] = market;\\n        Storage.slot().futureValueVaults[_ccy][market] = futureValueVault;\\n\\n        emit CreateLendingMarket(\\n            _ccy,\\n            market,\\n            futureValueVault,\\n            Storage.slot().lendingMarkets[_ccy].length,\\n            nextMaturity\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates an order. Takes orders if the orders are matched,\\n     * and places new order if not match it.\\n     *\\n     * In addition, converts the future value to the genesis value if there is future value in past maturity\\n     * before the execution of order creation.\\n     *\\n     * @param _ccy Currency name in bytes32 of the selected market\\n     * @param _maturity The maturity of the selected market\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _unitPrice Amount of unit price taker wish to borrow/lend\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function createOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) external override nonReentrant ifValidMaturity(_ccy, _maturity) returns (bool) {\\n        return _createOrder(_ccy, _maturity, _side, _amount, _unitPrice);\\n    }\\n\\n    /**\\n     * @notice Deposits funds and creates an order at the same time.\\n     *\\n     * @param _ccy Currency name in bytes32 of the selected market\\n     * @param _maturity The maturity of the selected market\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _unitPrice Amount of unit price taker wish to borrow/lend\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function depositAndCreateOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) external override nonReentrant ifValidMaturity(_ccy, _maturity) returns (bool) {\\n        tokenVault().depositFrom(msg.sender, _ccy, _amount);\\n\\n        return _createOrder(_ccy, _maturity, _side, _amount, _unitPrice);\\n    }\\n\\n    /**\\n     * @notice Creates a lend order with ETH. Takes the order if the order is matched,\\n     * and places new order if not match it.\\n     *\\n     * @param _ccy Currency name in bytes32 of the selected market\\n     * @param _maturity The maturity of the selected market\\n     * @param _unitPrice Amount of unit price taker wish to borrow/lend\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function createLendOrderWithETH(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _unitPrice\\n    ) external payable override nonReentrant ifValidMaturity(_ccy, _maturity) returns (bool) {\\n        return _createOrder(_ccy, _maturity, ProtocolTypes.Side.LEND, msg.value, _unitPrice);\\n    }\\n\\n    /**\\n     * @notice Deposits funds and creates a lend order with ETH at the same time.\\n     *\\n     * @param _ccy Currency name in bytes32 of the selected market\\n     * @param _maturity The maturity of the selected market\\n     * @param _unitPrice Amount of unit price taker wish to borrow/lend\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function depositAndCreateLendOrderWithETH(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _unitPrice\\n    ) external payable override nonReentrant ifValidMaturity(_ccy, _maturity) returns (bool) {\\n        tokenVault().depositFrom{value: msg.value}(msg.sender, _ccy, msg.value);\\n\\n        return _createOrder(_ccy, _maturity, ProtocolTypes.Side.LEND, msg.value, _unitPrice);\\n    }\\n\\n    /**\\n     * @notice Cancels the own order.\\n     * @param _ccy Currency name in bytes32 of the selected market\\n     * @param _maturity The maturity of the selected market\\n     * @param _orderId Market order id\\n     */\\n    function cancelOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint48 _orderId\\n    ) external override nonReentrant ifValidMaturity(_ccy, _maturity) returns (bool) {\\n        address market = Storage.slot().maturityLendingMarkets[_ccy][_maturity];\\n        (ProtocolTypes.Side side, uint256 amount, uint256 unitPrice) = ILendingMarket(market)\\n            .cancelOrder(msg.sender, _orderId);\\n\\n        emit CancelOrder(_orderId, msg.sender, _ccy, side, _maturity, amount, unitPrice);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Rotate the lending markets. In this rotation, the following actions are happened.\\n     * - Updates the maturity at the beginning of the market array.\\n     * - Moves the beginning of the market array to the end of it.\\n     * - Update the compound factor in this contract using the next market unit price.\\n     *\\n     * @param _ccy Currency name in bytes32 of the selected market\\n     */\\n    function rotateLendingMarkets(bytes32 _ccy)\\n        external\\n        override\\n        nonReentrant\\n        hasLendingMarket(_ccy)\\n    {\\n        address[] storage markets = Storage.slot().lendingMarkets[_ccy];\\n        address currentMarketAddr = markets[0];\\n        address nextMarketAddr = markets[1];\\n\\n        // Reopen the market matured with new maturity\\n        uint256 newLastMaturity = TimeLibrary.addMonths(\\n            ILendingMarket(markets[markets.length - 1]).getMaturity(),\\n            BASIS_TERM\\n        );\\n        uint256 prevMaturity = ILendingMarket(currentMarketAddr).openMarket(newLastMaturity);\\n\\n        // Rotate the order of the market\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            address marketAddr = (markets.length - 1) == i ? currentMarketAddr : markets[i + 1];\\n            markets[i] = marketAddr;\\n        }\\n\\n        genesisValueVault().updateCompoundFactor(\\n            _ccy,\\n            prevMaturity,\\n            ILendingMarket(nextMarketAddr).getMaturity(),\\n            ILendingMarket(nextMarketAddr).getMidUnitPrice()\\n        );\\n\\n        Storage.slot().maturityLendingMarkets[_ccy][newLastMaturity] = currentMarketAddr;\\n        delete Storage.slot().maturityLendingMarkets[_ccy][prevMaturity];\\n\\n        emit RotateLendingMarkets(_ccy, prevMaturity, newLastMaturity);\\n    }\\n\\n    /**\\n     * @notice Pauses previously deployed lending market by currency\\n     * @param _ccy Currency for pausing all lending markets\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function pauseLendingMarkets(bytes32 _ccy) external override onlyOwner returns (bool) {\\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\\n            ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy][i]);\\n            market.pauseMarket();\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Unpauses previously deployed lending market by currency\\n     * @param _ccy Currency name in bytes32\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function unpauseLendingMarkets(bytes32 _ccy) external override onlyOwner returns (bool) {\\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\\n            ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy][i]);\\n            market.unpauseMarket();\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Cleans user's all orders to remove order ids that are already filled on the order book.\\n     * @param _user User's address\\n     */\\n    function cleanAllOrders(address _user) public override {\\n        EnumerableSet.Bytes32Set storage ccySet = Storage.slot().usedCurrencies[_user];\\n        for (uint256 i = 0; i < ccySet.length(); i++) {\\n            cleanOrders(ccySet.at(i), _user);\\n        }\\n    }\\n\\n    /**\\n     * @notice Cleans user's orders to remove order ids that are already filled on the order book for a selected currency.\\n     * @param _ccy Currency name in bytes32\\n     * @param _user User's address\\n     */\\n    function cleanOrders(bytes32 _ccy, address _user) public override {\\n        EnumerableSet.Bytes32Set storage ccySet = Storage.slot().usedCurrencies[_user];\\n        if (!ccySet.contains(_ccy)) {\\n            return;\\n        }\\n\\n        uint256 totalActiveOrderCount = 0;\\n        bool futureValueExists = false;\\n        uint256[] memory maturities = getMaturities(_ccy);\\n\\n        for (uint256 j = 0; j < maturities.length; j++) {\\n            address market = Storage.slot().maturityLendingMarkets[_ccy][maturities[j]];\\n            int256 currentFutureValue = _convertFutureValueToGenesisValue(\\n                _ccy,\\n                maturities[j],\\n                Storage.slot().futureValueVaults[_ccy][market],\\n                _user\\n            );\\n\\n            (uint256 activeOrderCount, bool isFilled) = _cleanOrders(_ccy, maturities[j], _user);\\n            totalActiveOrderCount += activeOrderCount;\\n\\n            if (isFilled) {\\n                currentFutureValue = _convertFutureValueToGenesisValue(\\n                    _ccy,\\n                    maturities[j],\\n                    Storage.slot().futureValueVaults[_ccy][market],\\n                    _user\\n                );\\n            }\\n\\n            if (currentFutureValue != 0) {\\n                futureValueExists = true;\\n            }\\n        }\\n\\n        if (\\n            totalActiveOrderCount == 0 &&\\n            !futureValueExists &&\\n            genesisValueVault().getGenesisValue(_ccy, _user) == 0\\n        ) {\\n            Storage.slot().usedCurrencies[_user].remove(_ccy);\\n        }\\n    }\\n\\n    /**\\n     * @notice Converts the future value to the genesis value if there is balance in the past maturity.\\n     * @param _ccy Currency for pausing all lending markets\\n     * @param _futureValueVault Market contract address\\n     * @param _user User's address\\n     * @return Current future value amount after update\\n     */\\n    function _convertFutureValueToGenesisValue(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _futureValueVault,\\n        address _user\\n    ) private returns (int256) {\\n        (int256 removedAmount, int256 currentAmount, uint256 basisMaturity) = IFutureValueVault(\\n            _futureValueVault\\n        ).removeFutureValue(_user, _maturity);\\n\\n        if (removedAmount != 0) {\\n            genesisValueVault().addGenesisValue(_ccy, _user, basisMaturity, removedAmount);\\n        }\\n\\n        return currentAmount;\\n    }\\n\\n    function _createOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) private returns (bool) {\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n        require(tokenVault().isCovered(msg.sender, _ccy, _amount, _side), \\\"Not enough collateral\\\");\\n\\n        address futureValueVault = Storage.slot().futureValueVaults[_ccy][\\n            Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n        ];\\n\\n        _convertFutureValueToGenesisValue(_ccy, _maturity, futureValueVault, msg.sender);\\n\\n        (uint256 activeOrderCount, ) = _cleanOrders(_ccy, _maturity, msg.sender);\\n\\n        (uint256 filledFutureValue, uint256 remainingAmount) = ILendingMarket(\\n            Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n        ).createOrder(_side, msg.sender, _amount, _unitPrice);\\n\\n        // The case that an order was made, or taken partially\\n        if (filledFutureValue == 0 || remainingAmount > 0) {\\n            activeOrderCount += 1;\\n        }\\n\\n        require(activeOrderCount <= MAXIMUM_ORDER_COUNT, \\\"Too many active orders\\\");\\n\\n        if (filledFutureValue == 0) {\\n            emit PlaceOrder(msg.sender, _ccy, _side, _maturity, _amount, _unitPrice);\\n        } else {\\n            if (_side == ProtocolTypes.Side.BORROW) {\\n                tokenVault().addCollateral(msg.sender, _ccy, _amount - remainingAmount);\\n                IFutureValueVault(futureValueVault).addBorrowFutureValue(\\n                    msg.sender,\\n                    filledFutureValue,\\n                    _maturity\\n                );\\n            } else {\\n                tokenVault().removeCollateral(msg.sender, _ccy, _amount - remainingAmount);\\n                IFutureValueVault(futureValueVault).addLendFutureValue(\\n                    msg.sender,\\n                    filledFutureValue,\\n                    _maturity\\n                );\\n            }\\n\\n            emit FillOrder(\\n                msg.sender,\\n                _ccy,\\n                _side,\\n                _maturity,\\n                _amount,\\n                _unitPrice,\\n                filledFutureValue\\n            );\\n        }\\n\\n        Storage.slot().usedCurrencies[msg.sender].add(_ccy);\\n\\n        return true;\\n    }\\n\\n    function _cleanOrders(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) private returns (uint256 activeOrderCount, bool isFilled) {\\n        address futureValueVault = getFutureValueVault(_ccy, _maturity);\\n\\n        (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 userCurrentMaturity\\n        ) = ILendingMarket(Storage.slot().maturityLendingMarkets[_ccy][_maturity]).cleanOrders(\\n                _user\\n            );\\n\\n        if (removedLendOrderAmount > removedBorrowOrderAmount) {\\n            tokenVault().removeCollateral(\\n                _user,\\n                _ccy,\\n                removedLendOrderAmount - removedBorrowOrderAmount\\n            );\\n        } else if (removedLendOrderAmount < removedBorrowOrderAmount) {\\n            tokenVault().addCollateral(\\n                _user,\\n                _ccy,\\n                removedBorrowOrderAmount - removedLendOrderAmount\\n            );\\n        }\\n\\n        if (removedLendOrderFutureValue > 0) {\\n            IFutureValueVault(futureValueVault).addLendFutureValue(\\n                _user,\\n                removedLendOrderFutureValue,\\n                userCurrentMaturity\\n            );\\n            emit FillOrdersAsync(\\n                msg.sender,\\n                _ccy,\\n                ProtocolTypes.Side.LEND,\\n                userCurrentMaturity,\\n                removedLendOrderFutureValue\\n            );\\n        }\\n\\n        if (removedBorrowOrderFutureValue > 0) {\\n            IFutureValueVault(futureValueVault).addBorrowFutureValue(\\n                _user,\\n                removedBorrowOrderFutureValue,\\n                userCurrentMaturity\\n            );\\n            emit FillOrdersAsync(\\n                msg.sender,\\n                _ccy,\\n                ProtocolTypes.Side.BORROW,\\n                userCurrentMaturity,\\n                removedBorrowOrderFutureValue\\n            );\\n        }\\n\\n        isFilled = (removedLendOrderFutureValue + removedBorrowOrderFutureValue) > 0;\\n        activeOrderCount = activeLendOrderCount + activeBorrowOrderCount;\\n    }\\n\\n    function _calculatePresentValue(\\n        bytes32 _ccy,\\n        uint256 maturity,\\n        int256 futureValueInMaturity,\\n        address lendingMarketInMaturity\\n    ) private view returns (int256 totalPresentValue) {\\n        uint256 compoundFactorInMaturity = genesisValueVault()\\n            .getMaturityUnitPrice(_ccy, maturity)\\n            .compoundFactor;\\n        int256 futureValue;\\n        uint256 unitPrice;\\n\\n        if (compoundFactorInMaturity == 0) {\\n            futureValue = futureValueInMaturity;\\n            unitPrice = ILendingMarket(lendingMarketInMaturity).getMidUnitPrice();\\n        } else {\\n            int256 genesisValue = genesisValueVault().calculateGVFromFV(\\n                _ccy,\\n                maturity,\\n                futureValueInMaturity\\n            );\\n            futureValue = genesisValueVault().calculateFVFromGV(_ccy, 0, genesisValue);\\n            unitPrice = ILendingMarket(Storage.slot().lendingMarkets[_ccy][0]).getMidUnitPrice();\\n        }\\n\\n        return _calculatePVFromFV(futureValue, unitPrice);\\n    }\\n\\n    function _calculatePVFromFV(int256 _futureValue, uint256 _unitPrice)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        // NOTE: The formula is: futureValue = presentValue / unitPrice.\\n        return (_futureValue * int256(_unitPrice)) / int256(ProtocolTypes.BP);\\n    }\\n}\\n\",\"keccak256\":\"0xd4d69f42794e838c7461e0e37abf9cf4a08c4f0c113c2fe4f3e1ac17f2588733\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IBeaconProxyController {\\n    event BeaconProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function deployFutureValueVault() external returns (address futureValueVault);\\n\\n    function deployLendingMarket(\\n        bytes32 _ccy,\\n        uint256 _genesisDate,\\n        uint256 _maturity\\n    ) external returns (address market);\\n}\\n\",\"keccak256\":\"0xc92a3f5ea6c065590788e5d3d7f259790c4f403e8f50af20ff1ea633badfd8e5\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Currency} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CcyAdded(bytes32 indexed ccy, string name, uint256 haircut);\\n    event CcySupportUpdate(bytes32 indexed ccy, bool isSupported);\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n    event PriceFeedAdded(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n    event PriceFeedRemoved(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256 amount);\\n\\n    function convertToETH(bytes32 _ccy, int256 _amount) external view returns (int256 amount);\\n\\n    function convertToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getCurrencies(bytes32) external view returns (Currency memory);\\n\\n    function getEthDecimals(bytes32) external view returns (uint8);\\n\\n    function getUsdDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        address _ethPriceFeed,\\n        uint256 _haircut\\n    ) external;\\n\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported) external;\\n}\\n\",\"keccak256\":\"0xc36d7fcceed8c473b1448d81bb3041579e21faee705976f6b55a80b4b358a7d9\",\"license\":\"MIT\"},\"contracts/interfaces/IFutureValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IFutureValueVault {\\n    event Transfer(address indexed from, address indexed to, int256 value);\\n\\n    function getTotalLendingSupply(uint256 _maturity) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(uint256 _maturity) external view returns (uint256);\\n\\n    function getFutureValue(address _user)\\n        external\\n        view\\n        returns (int256 futureValue, uint256 maturity);\\n\\n    function hasFutureValueInPastMaturity(address _user, uint256 _maturity)\\n        external\\n        view\\n        returns (bool);\\n\\n    function addLendFutureValue(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _maturity\\n    ) external returns (bool);\\n\\n    function addBorrowFutureValue(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _maturity\\n    ) external returns (bool);\\n\\n    function removeFutureValue(address _user, uint256 _maturity)\\n        external\\n        returns (\\n            int256 removedAmount,\\n            int256 currentAmount,\\n            uint256 maturity\\n        );\\n}\\n\",\"keccak256\":\"0xb1b5c4dc86b463b0952f2c902a5bbe0dbeb83df579a02a3f34d51d74e28f36bd\",\"license\":\"MIT\"},\"contracts/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {MaturityUnitPrice} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\\n    event CompoundFactorUpdated(\\n        bytes32 indexed ccy,\\n        uint256 compoundFactor,\\n        uint256 unitPrice,\\n        uint256 currentMaturity,\\n        uint256 previousMaturity\\n    );\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getMaturityUnitPrice(bytes32 ccy, uint256 maturity)\\n        external\\n        view\\n        returns (MaturityUnitPrice memory);\\n\\n    function getGenesisValueInFutureValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function registerCurrency(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor\\n    ) external;\\n\\n    function updateCompoundFactor(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice\\n    ) external;\\n\\n    function addGenesisValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x02169abaefd58d0a91ab1877a9adaba8928645ced58c13aefcff2cf7029770f2\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport {MarketOrder} from \\\"../storages/LendingMarketStorage.sol\\\";\\n\\ninterface ILendingMarket {\\n    event CancelOrder(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event MakeOrder(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event TakeOrders(\\n        address indexed taker,\\n        ProtocolTypes.Side side,\\n        uint256 filledAmount,\\n        uint256 unitPrice,\\n        uint256 filledFutureValue\\n    );\\n\\n    event OpenMarket(uint256 maturity, uint256 prevMaturity);\\n\\n    struct Market {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        uint256 genesisDate;\\n        uint256 borrowUnitPrice;\\n        uint256 lendUnitPrice;\\n        uint256 midUnitPrice;\\n    }\\n\\n    function getMarket() external view returns (Market memory);\\n\\n    function getBorrowUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getLendUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getMidUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getBorrowOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturity() external view returns (uint256);\\n\\n    function getCurrency() external view returns (bytes32);\\n\\n    function isMatured() external view returns (bool);\\n\\n    function isOpened() external view returns (bool);\\n\\n    function getOrder(uint48 _orderId)\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        );\\n\\n    function getTotalAmountFromLendOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getTotalAmountFromBorrowOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getActiveLendOrderIds(address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds);\\n\\n    function getActiveBorrowOrderIds(address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds);\\n\\n    function openMarket(uint256 maturity) external returns (uint256);\\n\\n    function cancelOrder(address user, uint48 orderId)\\n        external\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        );\\n\\n    function cleanOrders(address _user)\\n        external\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        );\\n\\n    function createOrder(\\n        ProtocolTypes.Side side,\\n        address account,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (uint256 executedRate, uint256 remainingAmount);\\n\\n    function pauseMarket() external;\\n\\n    function unpauseMarket() external;\\n}\\n\",\"keccak256\":\"0x0a0287b092f8409fa540e521674652248ac804ebd513896953ea2be20bf41866\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ILendingMarketController {\\n    event CreateLendingMarket(\\n        bytes32 indexed ccy,\\n        address indexed marketAddr,\\n        address futureValueVault,\\n        uint256 index,\\n        uint256 maturity\\n    );\\n    event RotateLendingMarkets(bytes32 ccy, uint256 oldMaturity, uint256 newMaturity);\\n    event PlaceOrder(\\n        address indexed maker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event FillOrder(\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        uint256 filledFutureValue\\n    );\\n    event FillOrdersAsync(\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 filledFutureValue\\n    );\\n    event CancelOrder(\\n        uint48 orderId,\\n        address indexed maker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarkets(bytes32 ccy) external view returns (address[] memory);\\n\\n    function getLendingMarket(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getBorrowUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getLendUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getMidUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getBorrowOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInETH(address user)\\n        external\\n        view\\n        returns (int256 totalPresentValue);\\n\\n    function calculateTotalFundsInETH(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 totalWorkingLendOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalLentAmount,\\n            uint256 totalWorkingBorrowOrdersAmount,\\n            uint256 totalObligationAmount,\\n            uint256 totalBorrowedAmount\\n        );\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor\\n    ) external;\\n\\n    function createLendingMarket(bytes32 ccy)\\n        external\\n        returns (address market, address futureValue);\\n\\n    function createOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndCreateOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function createLendOrderWithETH(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function depositAndCreateLendOrderWithETH(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _unitPrice\\n    ) external payable returns (bool);\\n\\n    function cancelOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint48 orderId\\n    ) external returns (bool);\\n\\n    function rotateLendingMarkets(bytes32 ccy) external;\\n\\n    function pauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function cleanAllOrders(address user) external;\\n\\n    function cleanOrders(bytes32 _ccy, address _user) external;\\n}\\n\",\"keccak256\":\"0x8d3757c9462159ad9e70c27e1dac1f1bed9b5ce45874a66c78a762e02c9c8043\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ITokenVault {\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event RegisterCurrency(bytes32 ccy, address tokenAddress);\\n\\n    function isCovered(\\n        address user,\\n        bytes32 ccy,\\n        uint256 unsettledExp,\\n        ProtocolTypes.Side _unsettledOrderSide\\n    ) external view returns (bool);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256 maxWithdraw);\\n\\n    function getCoverage(address user) external view returns (uint256 coverage);\\n\\n    function getUnusedCollateral(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address party) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getCollateralParameters()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function setCollateralParameters(\\n        uint256 marginCallThresholdRate,\\n        uint256 autoLiquidationThresholdRate,\\n        uint256 liquidationPriceRate,\\n        uint256 minCollateralRate\\n    ) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositFrom(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addCollateral(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external;\\n\\n    function removeCollateral(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x550e69f9188bfd86fe78e827aeea08e5d3eddfd96d1798e8691f338ca665f38e\",\"license\":\"MIT\"},\"contracts/libraries/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n\\n    function timestampFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            hour *\\n            SECONDS_PER_HOUR +\\n            minute *\\n            SECONDS_PER_MINUTE +\\n            second;\\n    }\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint256 daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isValidDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isLeapYear(uint256 timestamp) internal pure returns (bool leapYear) {\\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n\\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n\\n    function getDaysInMonth(uint256 timestamp) internal pure returns (uint256 daysInMonth) {\\n        (uint256 year, uint256 month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n\\n    function _getDaysInMonth(uint256 year, uint256 month)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        if (\\n            month == 1 ||\\n            month == 3 ||\\n            month == 5 ||\\n            month == 7 ||\\n            month == 8 ||\\n            month == 10 ||\\n            month == 12\\n        ) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint256 timestamp) internal pure returns (uint256 dayOfWeek) {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n\\n    function getMinute(uint256 timestamp) internal pure returns (uint256 minute) {\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    function getSecond(uint256 timestamp) internal pure returns (uint256 second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = ((month - 1) % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = (yearMonth % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _years)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint256 fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint256 toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n\\n    function diffMonths(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _months)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint256 fromYear, uint256 fromMonth, ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint256 toYear, uint256 toMonth, ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n\\n    function diffDays(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _days)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n\\n    function diffHours(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _hours)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n\\n    function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _minutes)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n\\n    function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _seconds)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xe63d0d21b9b0bcdda93e169220d4ea9e5d1817a286f7ff0608f310defce26609\",\"license\":\"MIT\"},\"contracts/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE_VAULT = \\\"FutureValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0x49a27b1b2f9cb72c16a7a9066a3df4c5258738c5e0b40d2996e78b29130113c1\",\"license\":\"MIT\"},\"contracts/libraries/HitchensOrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// types\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\n\\nstruct UnfilledOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 unitPrice;\\n}\\n\\nstruct OrderItem {\\n    uint48 orderId;\\n    uint48 next;\\n    uint48 prev;\\n    address maker;\\n    uint256 timestamp;\\n    uint256 amount;\\n}\\n\\n/**\\n * @notice HitchensOrderStatisticsTreeLib is a Red-Black Tree binary search library\\n * based on the following library that is extended to manage order data.\\n *\\n * https://github.com/rob-Hitchens/OrderStatisticsTree\\n *\\n */\\nlibrary HitchensOrderStatisticsTreeLib {\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint48 head;\\n        uint48 tail;\\n        uint256 orderCounter;\\n        uint256 orderTotalAmount;\\n        mapping(uint256 => OrderItem) orders;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].right != EMPTY) {\\n            _value = self.nodes[_value].right;\\n        }\\n    }\\n\\n    function next(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(401) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].right != EMPTY) {\\n            _cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(402) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].left != EMPTY) {\\n            _cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint256 value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        // if (self.nodes[value].parent != EMPTY) return true;\\n        uint256 cursor = value;\\n        while (self.nodes[cursor].parent != EMPTY) {\\n            uint256 parent = self.nodes[cursor].parent;\\n            if (self.nodes[parent].left != cursor && self.nodes[parent].right != cursor) {\\n                return false;\\n            }\\n            if (parent == self.root) {\\n                return true;\\n            }\\n            cursor = self.nodes[cursor].parent;\\n        }\\n        return false;\\n    }\\n\\n    function isActiveOrderId(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        return orderIdExists(self, value, orderId) && exists(self, value);\\n    }\\n\\n    function getNode(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n        return (\\n            gn.parent,\\n            gn.left,\\n            gn.right,\\n            gn.red,\\n            gn.head,\\n            gn.tail,\\n            gn.orderCounter,\\n            gn.orderTotalAmount\\n        );\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function getNodeTotalAmount(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint256 totalAmount)\\n    {\\n        return self.nodes[value].orderTotalAmount;\\n    }\\n\\n    function getNodeOrderIds(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint48[] memory orderIds)\\n    {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[gn.head];\\n        orderIds = new uint48[](gn.orderCounter);\\n\\n        for (uint256 i = 0; i < gn.orderCounter; i++) {\\n            orderIds[i] = order.orderId;\\n            order = gn.orders[order.next];\\n        }\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256 _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(405) - Value to insert cannot be zero\\\");\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                return;\\n            }\\n        }\\n\\n        Node storage nValue = self.nodes[value];\\n        // Update order info as a new one if there is already an old node\\n        if (\\n            self.root == EMPTY ||\\n            (self.nodes[cursor].left != value && self.nodes[cursor].right != value)\\n        ) {\\n            nValue.orderCounter = 0;\\n            nValue.orderTotalAmount = 0;\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        }\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(407) - Value to delete cannot be zero\\\");\\n        Node storage nValue = self.nodes[value];\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint256 a,\\n        uint256 b\\n    ) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    function dropLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            UnfilledOrder memory unfilledOrder\\n        )\\n    {\\n        require(amount != EMPTY, \\\"OrderStatisticsTree(408) - Amount to drop cannot be zero\\\");\\n        uint256 value;\\n        uint256 cursor = first(self);\\n        uint256 lastNode = last(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor <= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (\\n            totalAmount < amount && cursor != EMPTY && (limitValue == 0 || cursor <= limitValue)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            uint256 filledAmount = cursorNodeAmount -\\n                (totalAmount > amount ? totalAmount - amount : 0);\\n            filledFutureValue += _calculateFutureValue(cursor, filledAmount);\\n\\n            cursor = next(self, cursor);\\n        }\\n\\n        if (totalAmount >= amount || value == limitValue) {\\n            if (totalAmount > amount) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                uint256 filledNodeAmount = cursorNodeAmount - (totalAmount - amount);\\n                unfilledOrder = fillOrders(self, cursor, filledNodeAmount);\\n            }\\n\\n            self.nodes[cursor].left = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            while (parent != EMPTY) {\\n                if (parent > cursor) {\\n                    // Relink the nodes\\n                    if (self.nodes[cursor].parent != parent) {\\n                        self.nodes[cursor].parent = parent;\\n                        self.nodes[parent].left = cursor;\\n                    }\\n\\n                    cursor = parent;\\n                }\\n\\n                parent = self.nodes[parent].parent;\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        if (lastNode == value && self.nodes[lastNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value > self.root || (value == self.root && amount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        if (self.nodes[self.root].left == 0 && self.nodes[self.root].right != 0) {\\n            if (self.nodes[self.nodes[self.root].right].left != 0) {\\n                rotateRight(self, self.nodes[self.root].right);\\n            }\\n            rotateLeft(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function dropRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            UnfilledOrder memory unfilledOrder\\n        )\\n    {\\n        require(amount != EMPTY, \\\"OrderStatisticsTree(408) - Amount to drop cannot be zero\\\");\\n        uint256 value;\\n        uint256 cursor = last(self);\\n        uint256 firstNode = first(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor >= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (\\n            totalAmount < amount && cursor != EMPTY && (limitValue == 0 || cursor >= limitValue)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            uint256 filledAmount = cursorNodeAmount -\\n                (totalAmount > amount ? totalAmount - amount : 0);\\n            filledFutureValue += _calculateFutureValue(cursor, filledAmount);\\n\\n            cursor = prev(self, cursor);\\n        }\\n\\n        if (totalAmount >= amount || value == limitValue) {\\n            if (totalAmount > amount) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                uint256 filledNodeAmount = cursorNodeAmount - (totalAmount - amount);\\n                unfilledOrder = fillOrders(self, cursor, filledNodeAmount);\\n            }\\n\\n            self.nodes[cursor].right = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            while (parent != EMPTY) {\\n                if (parent < cursor) {\\n                    // Relink the nodes\\n                    if (self.nodes[cursor].parent != parent) {\\n                        self.nodes[cursor].parent = parent;\\n                        self.nodes[parent].right = cursor;\\n                    }\\n\\n                    cursor = parent;\\n                }\\n\\n                parent = self.nodes[parent].parent;\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        if (firstNode == value && self.nodes[firstNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value < self.root || (value == self.root && amount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        if (self.nodes[self.root].right == 0 && self.nodes[self.root].left != 0) {\\n            if (self.nodes[self.nodes[self.root].left].right != 0) {\\n                rotateLeft(self, self.nodes[self.root].left);\\n            }\\n            rotateRight(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function getFutureValue(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (uint256) {\\n        return _calculateFutureValue(value, self.nodes[value].orders[orderId].amount);\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (OrderItem memory) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orders[orderId];\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function orderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        uint48 cursor = orderId;\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[cursor];\\n\\n        if (order.orderId != cursor) {\\n            return false;\\n        }\\n\\n        while (order.prev != EMPTY) {\\n            cursor = order.prev;\\n            order = gn.orders[cursor];\\n        }\\n\\n        return cursor == gn.head;\\n    }\\n\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount,\\n        bool isInterruption\\n    ) internal {\\n        require(amount > 0, \\\"Insufficient amount\\\");\\n        insert(self, value);\\n\\n        if (isInterruption) {\\n            addHead(self, value, orderId, user, amount);\\n        } else {\\n            addTail(self, value, orderId, user, amount);\\n        }\\n    }\\n\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        amount = _removeOrder(self, value, orderId);\\n        remove(self, value);\\n    }\\n\\n    /**\\n     * @dev Reduces order amount once market order taken.\\n     */\\n    function fillOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount\\n    ) internal returns (UnfilledOrder memory unfilledOrder) {\\n        Node storage gn = self.nodes[value];\\n\\n        require(\\n            gn.orderTotalAmount >= _amount,\\n            \\\"OrderStatisticsTree(410) - Amount to fill is insufficient\\\"\\n        );\\n\\n        uint256 remainingAmount = _amount;\\n        uint256 filledCount = 0;\\n        OrderItem memory currentOrder = gn.orders[gn.head];\\n        uint48 orderId = gn.head;\\n\\n        while (orderId != 0 && remainingAmount != 0) {\\n            currentOrder = gn.orders[orderId];\\n\\n            if (currentOrder.amount <= remainingAmount) {\\n                remainingAmount -= currentOrder.amount;\\n                orderId = currentOrder.next;\\n            } else {\\n                unfilledOrder = UnfilledOrder(\\n                    currentOrder.orderId,\\n                    currentOrder.maker,\\n                    currentOrder.amount - remainingAmount,\\n                    value\\n                );\\n                remainingAmount = 0;\\n            }\\n\\n            filledCount++;\\n        }\\n\\n        _dropOrders(self, value, currentOrder.orderId);\\n\\n        if (unfilledOrder.amount > 0) {\\n            // NOTE: This order that the filled partially was dropped from a node, and the unfilled amount\\n            // will be inserted newly as a new orders.\\n            // However, that filled order amount is used when future value is calculated from inactive order.\\n            // For that calculation, this order amount needs to be updated by an actual filled amount at this point.\\n            OrderItem storage order = self.nodes[value].orders[currentOrder.orderId];\\n            order.amount -= unfilledOrder.amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n        uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n        _link(self, _value, orderId, gn.head);\\n        _setHead(self, _value, orderId);\\n        if (gn.tail == 0) _setTail(self, _value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, _value, _orderId, _user, _amount);\\n        } else {\\n            uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n            _link(self, _value, gn.tail, orderId);\\n            _setTail(self, _value, orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint48) {\\n        Node storage gn = self.nodes[value];\\n        require(\\n            gn.orders[orderId].timestamp == 0,\\n            \\\"OrderStatisticsTree(409) - Order id already exist.\\\"\\n        );\\n\\n        gn.orderCounter += 1;\\n        gn.orderTotalAmount += amount;\\n        OrderItem memory order = OrderItem(orderId, 0, 0, user, block.timestamp, amount);\\n        gn.orders[orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the list.\\n     */\\n    function _removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n        gn.orderTotalAmount -= order.amount;\\n    }\\n\\n    /**\\n     * @dev Drop the OrderItems older than or equal `orderId` from the list\\n     */\\n    function _dropOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n        uint256 cursor = gn.head;\\n        uint256 removedCount = 1;\\n        uint256 removedAmount = gn.orders[cursor].amount;\\n\\n        while (cursor != orderId) {\\n            cursor = gn.orders[cursor].next;\\n            removedCount++;\\n            removedAmount += gn.orders[cursor].amount;\\n        }\\n\\n        if (gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        }\\n\\n        gn.orderCounter -= removedCount;\\n        gn.orderTotalAmount -= removedAmount;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 _prevId,\\n        uint48 _nextId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[_prevId].next = _nextId;\\n        gn.orders[_nextId].prev = _prevId;\\n    }\\n\\n    function _calculateFutureValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * ProtocolTypes.BP) / unitPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x60568ac47d0e58e992dfdc57c6ac6bc85e6988e91c694e1fe23890b35b14e0d3\",\"license\":\"MIT\"},\"contracts/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/MixinAddressResolverStorage.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    modifier onlyAcceptedContracts() {\\n        require(isAcceptedContract(msg.sender), \\\"Only Accepted Contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the contract names used in this contract.\\n     * @dev The contract name list is in `./libraries/Contracts.sol`.\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @notice Returns contract names that can call this contract.\\n     * @dev The contact name listed in this method is also needed to be listed `requiredContracts` method.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = Storage.slot().resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            Storage.slot().addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                Storage.slot().resolver.getAddress(name) != Storage.slot().addressCache[name] ||\\n                Storage.slot().addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        require(address(Storage.slot().resolver) == address(0), \\\"resolver registered already\\\");\\n        Storage.slot().resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function resolver() public view returns (IAddressResolver) {\\n        return Storage.slot().resolver;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0xf0bb13571fbf8a275118b67bc0332eab0661f4465eff77066755f9320c1bd11d\",\"license\":\"MIT\"},\"contracts/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nstruct Currency {\\n    bool isSupported;\\n    string name;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.currencyController\\\");\\n\\n    struct Storage {\\n        // Protocol currencies\\n        mapping(bytes32 => Currency) currencies;\\n        mapping(bytes32 => uint256) haircuts;\\n        // PriceFeed\\n        mapping(bytes32 => AggregatorV3Interface) usdPriceFeeds;\\n        mapping(bytes32 => AggregatorV3Interface) ethPriceFeeds;\\n        mapping(bytes32 => uint8) usdDecimals;\\n        mapping(bytes32 => uint8) ethDecimals;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0c9e9399e6f58e0702c8edcb6b58603d281668b10bf701b119911e24bba192b\",\"license\":\"MIT\"},\"contracts/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.genesisValueVault\\\");\\n\\n    struct Storage {\\n        mapping(bytes32 => bool) isRegisteredCurrency;\\n        mapping(bytes32 => uint256) initialCompoundFactors;\\n        mapping(bytes32 => uint256) compoundFactors;\\n        mapping(bytes32 => uint256) currentMaturity;\\n        mapping(bytes32 => uint8) decimals;\\n        // Mapping from user to balance per currency\\n        mapping(bytes32 => mapping(address => int256)) balances;\\n        mapping(bytes32 => uint256) totalLendingSupplies;\\n        mapping(bytes32 => uint256) totalBorrowingSupplies;\\n        // Mapping from maturity to rate per currency\\n        mapping(bytes32 => mapping(uint256 => MaturityUnitPrice)) maturityUnitPrices;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2715307f5a409405179faad8ce1f4a614f1b166bd46cf2fde96d1c90ea5cf4fd\",\"license\":\"MIT\"},\"contracts/storages/LendingMarketControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary LendingMarketControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarketController\\\");\\n\\n    struct Storage {\\n        // Mapping from currency to lending market contract addresses\\n        mapping(bytes32 => address[]) lendingMarkets;\\n        // Mapping from lending market contract address to future value vault contract address per currency\\n        mapping(bytes32 => mapping(address => address)) futureValueVaults;\\n        // Mapping from maturity to lending market contract address per currency\\n        mapping(bytes32 => mapping(uint256 => address)) maturityLendingMarkets;\\n        // Mapping from currency to genesis date in the lending market\\n        mapping(bytes32 => uint256) genesisDates;\\n        // Mapping from user to used currency\\n        mapping(address => EnumerableSet.Bytes32Set) usedCurrencies;\\n        // Mapping from user to active order existence per currency and maturity\\n        mapping(address => mapping(bytes32 => mapping(uint256 => bool))) activeOrderExistences;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7db4374c692b8be6a037527fc406cee1e40f086fd9a7f7d99b2237fbad78b329\",\"license\":\"MIT\"},\"contracts/storages/LendingMarketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport \\\"../libraries/HitchensOrderStatisticsTreeLib.sol\\\";\\n\\nstruct MarketOrder {\\n    ProtocolTypes.Side side;\\n    uint256 unitPrice; // in basis points\\n    uint256 maturity;\\n    uint256 timestamp;\\n}\\n\\nlibrary LendingMarketStorage {\\n    using HitchensOrderStatisticsTreeLib for HitchensOrderStatisticsTreeLib.Tree;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarket\\\");\\n\\n    struct Storage {\\n        uint48 lastOrderId;\\n        bytes32 ccy;\\n        uint256 genesisDate;\\n        uint256 maturity;\\n        // Mapping from user to active lend order ids\\n        mapping(address => uint48[]) activeLendOrderIds;\\n        // Mapping from user to active borrow order ids\\n        mapping(address => uint48[]) activeBorrowOrderIds;\\n        // Mapping from user to current maturity\\n        mapping(address => uint256) userCurrentMaturities;\\n        // Mapping from orderId to order\\n        mapping(uint256 => MarketOrder) orders;\\n        // Mapping from maturity to lending orders\\n        mapping(uint256 => HitchensOrderStatisticsTreeLib.Tree) lendOrders;\\n        // Mapping from maturity to borrowing orders\\n        mapping(uint256 => HitchensOrderStatisticsTreeLib.Tree) borrowOrders;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x04b080d246d43abd5cd7c970c3375a5a707587a58dc13d172c41a9aed97f76f3\",\"license\":\"MIT\"},\"contracts/storages/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.mixinAddressResolver\\\");\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 => address) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x852b885b6264a58930a0945c68842717e19f954eaefc0137235e6f263e17fa9d\",\"license\":\"MIT\"},\"contracts/storages/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary OwnableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.ownable\\\");\\n\\n    struct Storage {\\n        address owner;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ef8bfa06947cdb63d47248ad074ac42a1b1ba828a2c97e42486a5dbb2c03e1d\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant BP = 10000; // basis point\\n    uint256 public constant PCT = 10000; // percentage point in basis\\n\\n    uint256 internal constant DAYS_IN_YEAR = 365;\\n    uint256 internal constant SECONDS_IN_YEAR = 31557600;\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n}\\n\",\"keccak256\":\"0xebb47b6088b7fa52e4cdab8da1f7ea06308d829aed07ceae13847cbeecea09ba\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../storages/OwnableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return OwnableStorage.slot().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = OwnableStorage.slot().owner;\\n        OwnableStorage.slot().owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1c782b9deaf1f94d2af99826e6e8207f5e71f3fbb6ce18805913a3ca7dda9579\",\"license\":\"MIT\"},\"contracts/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0xe59cd60631c7c754ed6b77caa6f3a06301ef0df07881a3dcfa85124abc1890b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061021a5760003560e01c8063891d596511610123578063b3cb8450116100ab578063e99d05381161006f578063e99d053814610693578063eb092a26146106b3578063f2fde38b146106d3578063faca409b146106f3578063fb54a6b31461071357600080fd5b8063b3cb8450146105fe578063bfd10cf61461061e578063e09976591461063e578063e219baef14610653578063e95dc1831461067357600080fd5b80638da5cb5b116100f25780638da5cb5b14610549578063953dbcaa1461055e5780639d3fc35d1461057e578063a02be3dc1461059e578063a963ad7f146105be57600080fd5b8063891d5965146104d65780638a981745146104f65780638b36d833146105165780638b646f441461053657600080fd5b80633d03b9da116101a657806355aceb4e1161017557806355aceb4e14610419578063715018a61461044657806373bb3b091461045b57806385323e1a14610496578063870cf8ab146104b657600080fd5b80633d03b9da14610397578063448255c7146103b9578063485cc955146103d957806349f2ccbf146103f957600080fd5b80632af64bd3116101ed5780632af64bd3146102c55780632e6c5e67146102ea578063371c672c1461030a578063381ada1f1461031d5780633b22a4741461034a57600080fd5b806304f3bcec1461021f5780630594de6e1461025157806317b72ff41461028057806329985e5a146102ae575b600080fd5b34801561022b57600080fd5b50610234610733565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561025d57600080fd5b5061027161026c366004614b0d565b610754565b60405161024893929190614b74565b34801561028c57600080fd5b506102a061029b366004614bcc565b610813565b604051908152602001610248565b3480156102ba57600080fd5b506102c3610ada565b005b3480156102d157600080fd5b506102da610c87565b6040519015158152602001610248565b3480156102f657600080fd5b506102da610305366004614bfc565b610ded565b6102da610318366004614b0d565b610e0d565b34801561032957600080fd5b5061033d610338366004614bfc565b610eb0565b6040516102489190614c15565b34801561035657600080fd5b5061036a610365366004614c62565b610f25565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610248565b3480156103a357600080fd5b506103ac611279565b6040516102489190614c7f565b3480156103c557600080fd5b506102da6103d4366004614cc4565b61136d565b3480156103e557600080fd5b506102c36103f4366004614d0d565b611471565b34801561040557600080fd5b506102da610414366004614d3b565b6115f4565b34801561042557600080fd5b50610439610434366004614bfc565b61178e565b6040516102489190614d7f565b34801561045257600080fd5b506102c36118f6565b34801561046757600080fd5b5061047b610476366004614bcc565b611931565b60408051938452602084019290925290820152606001610248565b3480156104a257600080fd5b506102346104b1366004614d92565b611a87565b3480156104c257600080fd5b506102c36104d1366004614c62565b611af0565b3480156104e257600080fd5b506102a06104f1366004614bfc565b611b4e565b34801561050257600080fd5b50610234610511366004614d92565b611b6c565b34801561052257600080fd5b506102c3610531366004614bfc565b611b9e565b6102da610544366004614b0d565b6120b8565b34801561055557600080fd5b506102346121ad565b34801561056a57600080fd5b50610271610579366004614b0d565b6121d5565b34801561058a57600080fd5b5061047b610599366004614bcc565b612234565b3480156105aa57600080fd5b506104396105b9366004614bfc565b612361565b3480156105ca57600080fd5b506105de6105d9366004614bfc565b6124c2565b604080516001600160a01b03938416815292909116602083015201610248565b34801561060a57600080fd5b506102da610619366004614bfc565b612a18565b34801561062a57600080fd5b50610439610639366004614bfc565b612b16565b34801561064a57600080fd5b506103ac612c77565b34801561065f57600080fd5b506102c361066e366004614b0d565b612cba565b34801561067f57600080fd5b506102c361068e366004614bcc565b612e18565b34801561069f57600080fd5b506102da6106ae366004614bfc565b6130bb565b3480156106bf57600080fd5b506104396106ce366004614bfc565b6131b0565b3480156106df57600080fd5b506102c36106ee366004614c62565b613311565b3480156106ff57600080fd5b506102da61070e366004614cc4565b6133b1565b34801561071f57600080fd5b506102a061072e366004614c62565b61343b565b60006000805160206155a68339815191525b546001600160a01b0316919050565b60608060606000610763613542565b600088815260029190910160209081526040808320898452909152908190205490516325fb168b60e11b8152600481018790526001600160a01b0390911691508190634bf62d16906024015b60006040518083038186803b1580156107c757600080fd5b505afa1580156107db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108039190810190614e65565b9350935093505093509350939050565b6000805b61081f613542565b60008581526020919091526040902054811015610987576000610840613542565b60008681526020919091526040902080548390811061086157610861614eed565b60009182526020822001546001600160a01b0316915080610880613542565b6000888152600191909101602090815260408083206001600160a01b03878116855292529182902054915163070da1af60e11b81528882166004820152911690630e1b435e90602401604080518083038186803b1580156108e057600080fd5b505afa1580156108f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109189190614f03565b9150915061096587828461092a613542565b60008c81526020919091526040902080548990811061094b5761094b614eed565b6000918252602090912001546001600160a01b0316613566565b61096f9086614f3d565b9450505050808061097f90614f7e565b915050610817565b506000610992613864565b60405163c3e7a7ad60e01b8152600481018690526001600160a01b038581166024830152919091169063c3e7a7ad9060440160206040518083038186803b1580156109dc57600080fd5b505afa1580156109f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a149190614f99565b9050610ac881610a22613542565b6000878152602091909152604081208054909190610a4257610a42614eed565b60009182526020918290200154604080516371613c2d60e01b815290516001600160a01b03909216926371613c2d92600480840193829003018186803b158015610a8b57600080fd5b505afa158015610a9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac39190614f99565b613888565b610ad29083614f3d565b949350505050565b6000610ae4611279565b905060005b8151811015610c83576000828281518110610b0657610b06614eed565b602002602001015190506000610b276000805160206155a683398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd91610b9891869190605d01614fff565b60206040518083038186803b158015610bb057600080fd5b505afa158015610bc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be89190615018565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a150508080610c7b90614f7e565b915050610ae9565b5050565b600080610c92611279565b905060005b8151811015610de4576000828281518110610cb457610cb4614eed565b60200260200101519050610cd36000805160206155a683398151915290565b600082815260019190910160205260409020546001600160a01b03166000805160206155a6833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b158015610d4057600080fd5b505afa158015610d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d789190615018565b6001600160a01b0316141580610dc2575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b15610dd1576000935050505090565b5080610ddc81614f7e565b915050610c97565b50600191505090565b6000610df7613542565b6000928352600301602052506040902054151590565b600060026000541415610e3b5760405162461bcd60e51b8152600401610e3290615035565b60405180910390fd5b6002600090815584908490610e4e613542565b6000848152600291909101602090815260408083208584529091529020546001600160a01b03161415610e935760405162461bcd60e51b8152600401610e329061506c565b610ea18686600034886138a8565b60016000559695505050505050565b6060610eba613542565b6000838152602091825260409081902080548251818502810185019093528083529192909190830182828015610f1957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610efb575b50505050509050919050565b6000806000806000806000610f38613542565b6001600160a01b03891660009081526004919091016020526040812091505b610f6082613e31565b81101561126e576000610f738383613e3b565b60408051600680825260e08201909252919250600091906020820160c080368337019050509050610fa4828c611931565b83600081518110610fb757610fb7614eed565b6020026020010184600181518110610fd157610fd1614eed565b6020026020010185600281518110610feb57610feb614eed565b602090810291909101019290925291905252611007828c612234565b8360038151811061101a5761101a614eed565b602002602001018460048151811061103457611034614eed565b602002602001018560058151811061104e5761104e614eed565b602090810291909101019290925291905252600061106c838d610813565b9050600081126110a657808260018151811061108a5761108a614eed565b6020026020010181815161109e9190615096565b9052506110da565b6110af816150ae565b826004815181106110c2576110c2614eed565b602002602001018181516110d69190615096565b9052505b60006110e4613e47565b6001600160a01b031663939fe62285856040518363ffffffff1660e01b81526004016111119291906150cb565b60006040518083038186803b15801561112957600080fd5b505afa15801561113d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261116591908101906150e4565b90508060008151811061117a5761117a614eed565b60200260200101518c61118d9190615096565b9b50806001815181106111a2576111a2614eed565b60200260200101518b6111b59190615096565b9a50806002815181106111ca576111ca614eed565b60200260200101518a6111dd9190615096565b9950806003815181106111f2576111f2614eed565b6020026020010151896112059190615096565b98508060048151811061121a5761121a614eed565b60200260200101518861122d9190615096565b97508060058151811061124257611242614eed565b6020026020010151876112559190615096565b965050505050808061126690614f7e565b915050610f57565b505091939550919395565b60408051600480825260a0820190925260609160208201608080368337019050509050742132b0b1b7b7283937bc3ca1b7b73a3937b63632b960591b816000815181106112c8576112c8614eed565b6020026020010181815250507121bab93932b731bca1b7b73a3937b63632b960711b816001815181106112fd576112fd614eed565b6020026020010181815250507011d95b995cda5cd5985b1d5955985d5b1d607a1b8160028151811061133157611331614eed565b60200260200101818152505069151bdad95b95985d5b1d60b21b8160038151811061135e5761135e614eed565b60200260200101818152505090565b6000600260005414156113925760405162461bcd60e51b8152600401610e3290615035565b60026000908155869086906113a5613542565b6000848152600291909101602090815260408083208584529091529020546001600160a01b031614156113ea5760405162461bcd60e51b8152600401610e329061506c565b6113f2613e67565b6001600160a01b03166396994e37338a886040518463ffffffff1660e01b815260040161142193929190615119565b600060405180830381600087803b15801561143b57600080fd5b505af115801561144f573d6000803e3d6000fd5b5050505061146088888888886138a8565b600160005598975050505050505050565b600154610100900460ff161580801561148e57506001805460ff16105b806114a75750303b1580156114a757506001805460ff16145b61150a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610e32565b6001805460ff191681179055801561152c576001805461ff0019166101001790555b6000611536613e7f565b6001600160a01b031614156115985760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b6064820152608401610e32565b6115a183613ea7565b6115aa82613f18565b80156115ef576001805461ff00191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6000600260005414156116195760405162461bcd60e51b8152600401610e3290615035565b600260009081558490849061162c613542565b6000848152600291909101602090815260408083208584529091529020546001600160a01b031614156116715760405162461bcd60e51b8152600401610e329061506c565b600061167b613542565b60008881526002919091016020908152604080832089845290915280822054905163504b89bd60e01b815233600482015265ffffffffffff881660248201526001600160a01b03909116925081908190849063504b89bd90604401606060405180830381600087803b1580156116f057600080fd5b505af1158015611704573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611728919061513a565b92509250925089336001600160a01b03167f882188071c39e32cd4ffd0cef7a006a29eaae9e4018d72cef313a0f4686cdb918a868d87876040516117709594939291906151a9565b60405180910390a36001965050505050505060016000559392505050565b6060600061179a613542565b6000848152602091909152604090205467ffffffffffffffff8111156117c2576117c2614db4565b6040519080825280602002602001820160405280156117eb578160200160208202803683370190505b50905060005b6117f9613542565b600085815260209190915260409020548110156118ef57600061181a613542565b60008681526020919091526040902080548390811061183b5761183b614eed565b6000918252602091829020015460408051631b3508b760e01b815290516001600160a01b0390921693508392631b3508b792600480840193829003018186803b15801561188757600080fd5b505afa15801561189b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bf9190614f99565b8383815181106118d1576118d1614eed565b602090810291909101015250806118e781614f7e565b9150506117f1565b5092915050565b336118ff6121ad565b6001600160a01b0316146119255760405162461bcd60e51b8152600401610e32906151e1565b61192f6000613ea7565b565b60008080805b61193f613542565b60008781526020919091526040902054811015611a7f57600080600080611964613542565b60008b81526020919091526040902080548690811061198557611985614eed565b6000918252602090912001546040516339f7dda360e21b81526001600160a01b038b811660048301529091169063e7df768c9060240160806040518083038186803b1580156119d357600080fd5b505afa1580156119e7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0b9190615216565b93509350935093508388611a1f9190615096565b9750611a508a8284611a2f613542565b60008f81526020919091526040902080548a90811061094b5761094b614eed565b611a5a9088615096565b9650611a668387615096565b9550505050508080611a7790614f7e565b915050611937565b509250925092565b6000611a91613542565b60008481526001919091016020526040812090611aac613542565b6000868152600291909101602090815260408083208784528252808320546001600160a01b0390811685529184019490945291909201909120541690505b92915050565b6000611afa613542565b6001600160a01b03831660009081526004919091016020526040812091505b611b2282613e31565b8110156115ef57611b3c611b368383613e3b565b84612e18565b80611b4681614f7e565b915050611b19565b6000611b58613542565b600092835260030160205250604090205490565b6000611b76613542565b600093845260020160209081526040808520938552929052509020546001600160a01b031690565b60026000541415611bc15760405162461bcd60e51b8152600401610e3290615035565b600260009081558190611bd2613542565b6000838152602091909152604090205411611c485760405162461bcd60e51b815260206004820152603060248201527f4e6f206c656e64696e67206d61726b65747320657869737420666f722061207360448201526f706563696669632063757272656e637960801b6064820152608401610e32565b6000611c52613542565b600084815260209190915260408120805490925082908290611c7657611c76614eed565b600091825260208220015483546001600160a01b03909116925083906001908110611ca357611ca3614eed565b600091825260208220015484546001600160a01b039091169250611d67908590611ccf9060019061524c565b81548110611cdf57611cdf614eed565b600091825260209182902001546040805163e16695b560e01b815290516001600160a01b039092169263e16695b592600480840193829003018186803b158015611d2857600080fd5b505afa158015611d3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d609190614f99565b6003613fad565b60405163baa2675760e01b8152600481018290529091506000906001600160a01b0385169063baa2675790602401602060405180830381600087803b158015611daf57600080fd5b505af1158015611dc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de79190614f99565b905060005b8554811015611e965785546000908290611e089060019061524c565b14611e435786611e19836001615096565b81548110611e2957611e29614eed565b6000918252602090912001546001600160a01b0316611e45565b855b905080878381548110611e5a57611e5a614eed565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790555080611e8e81614f7e565b915050611dec565b50611e9f613864565b6001600160a01b031663b95a33ab8883866001600160a01b031663e16695b56040518163ffffffff1660e01b815260040160206040518083038186803b158015611ee857600080fd5b505afa158015611efc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f209190614f99565b876001600160a01b03166371613c2d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f5957600080fd5b505afa158015611f6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f919190614f99565b6040516001600160e01b031960e087901b1681526004810194909452602484019290925260448301526064820152608401600060405180830381600087803b158015611fdc57600080fd5b505af1158015611ff0573d6000803e3d6000fd5b5050505083611ffd613542565b600089815260029190910160209081526040808320868452909152902080546001600160a01b0319166001600160a01b0392909216919091179055612040613542565b60008881526002919091016020908152604080832084845282529182902080546001600160a01b031916905581518981529081018390529081018390527f98cbd76ce00c88aafa668f8d8ee624506fdfd22fc473f74ea1b75addf544c2209060600160405180910390a1505060016000555050505050565b6000600260005414156120dd5760405162461bcd60e51b8152600401610e3290615035565b60026000908155849084906120f0613542565b6000848152600291909101602090815260408083208584529091529020546001600160a01b031614156121355760405162461bcd60e51b8152600401610e329061506c565b61213d613e67565b6001600160a01b03166396994e37343389346040518563ffffffff1660e01b815260040161216d93929190615119565b6000604051808303818588803b15801561218657600080fd5b505af115801561219a573d6000803e3d6000fd5b5050505050610ea18686600034886138a8565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa610745565b606080606060006121e4613542565b6000888152600291909101602090815260408083208984529091529081902054905163d866d35560e01b8152600481018790526001600160a01b039091169150819063d866d355906024016107af565b60008080805b612242613542565b60008781526020919091526040902054811015611a7f57600080600080612267613542565b60008b81526020919091526040902080548690811061228857612288614eed565b600091825260209091200154604051631c7b209b60e31b81526001600160a01b038b811660048301529091169063e3d904d89060240160806040518083038186803b1580156122d657600080fd5b505afa1580156122ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230e9190615216565b935093509350935083886123229190615096565b97506123328a8284611a2f613542565b61233c9088615096565b96506123488387615096565b955050505050808061235990614f7e565b91505061223a565b6060600061236d613542565b6000848152602091909152604090205467ffffffffffffffff81111561239557612395614db4565b6040519080825280602002602001820160405280156123be578160200160208202803683370190505b50905060005b6123cc613542565b600085815260209190915260409020548110156118ef5760006123ed613542565b60008681526020919091526040902080548390811061240e5761240e614eed565b600091825260209182902001546040805163e16695b560e01b815290516001600160a01b039092169350839263e16695b592600480840193829003018186803b15801561245a57600080fd5b505afa15801561246e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124929190614f99565b8383815181106124a4576124a4614eed565b602090810291909101015250806124ba81614f7e565b9150506123c4565b600080336124ce6121ad565b6001600160a01b0316146124f45760405162461bcd60e51b8152600401610e32906151e1565b6124fc613864565b6001600160a01b0316630cf7505d846040518263ffffffff1660e01b815260040161252991815260200190565b60206040518083038186803b15801561254157600080fd5b505afa158015612555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125799190615263565b6125e45760405162461bcd60e51b815260206004820152603660248201527f4c656e64696e67206d61726b6574206861736e2774206265656e20696e697469604482015275616c697a656420696e207468652063757272656e637960501b6064820152608401610e32565b6125ec613e47565b6001600160a01b031663d4d4f6ce846040518263ffffffff1660e01b815260040161261991815260200190565b60206040518083038186803b15801561263157600080fd5b505afa158015612645573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126699190615263565b6126a95760405162461bcd60e51b81526020600482015260116024820152704e4f4e20535550504f525445442043435960781b6044820152606401610e32565b60006126b3613542565b6000858152600391909101602052604081205491506126d0613542565b6000868152602091909152604090205411156127b5576126ee613542565b6000858152602091909152604090206001612707613542565b60008781526020919091526040902054612721919061524c565b8154811061273157612731614eed565b600091825260209182902001546040805163e16695b560e01b815290516001600160a01b039092169263e16695b592600480840193829003018186803b15801561277a57600080fd5b505afa15801561278e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b29190614f99565b90505b60006127c2826003613fad565b90506127cc614084565b6001600160a01b0316634672758f866127e3613542565b60008981526003919091016020526040908190205490516001600160e01b031960e085901b1681526004810192909252602482015260448101849052606401602060405180830381600087803b15801561283c57600080fd5b505af1158015612850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128749190615018565b935061287e614084565b6001600160a01b031663a97c4b536040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156128b857600080fd5b505af11580156128cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128f09190615018565b92506128fa613542565b600086815260209182526040812080546001810182559082529190200180546001600160a01b0319166001600160a01b03861617905583612939613542565b600087815260029190910160209081526040808320858452909152902080546001600160a01b0319166001600160a01b03929092169190911790558261297d613542565b6000878152600191909101602090815260408083206001600160a01b0389811680865291909352922080546001600160a01b0319169390911692909217909155857f5f1af77fb16a8d70e13dc1d6eef0f7b3f37103d1bfc348e1e57469c718646543856129e8613542565b60008a8152602091909152604090819020549051612a099291908790615119565b60405180910390a35050915091565b600033612a236121ad565b6001600160a01b031614612a495760405162461bcd60e51b8152600401610e32906151e1565b60005b612a54613542565b60008481526020919091526040902054811015612b0d576000612a75613542565b600085815260209190915260409020805483908110612a9657612a96614eed565b60009182526020822001546040805163280dce3760e21b815290516001600160a01b039092169350839263a03738dc9260048084019382900301818387803b158015612ae157600080fd5b505af1158015612af5573d6000803e3d6000fd5b50505050508080612b0590614f7e565b915050612a4c565b50600192915050565b60606000612b22613542565b6000848152602091909152604090205467ffffffffffffffff811115612b4a57612b4a614db4565b604051908082528060200260200182016040528015612b73578160200160208202803683370190505b50905060005b612b81613542565b600085815260209190915260409020548110156118ef576000612ba2613542565b600086815260209190915260409020805483908110612bc357612bc3614eed565b60009182526020918290200154604080516371613c2d60e01b815290516001600160a01b03909216935083926371613c2d92600480840193829003018186803b158015612c0f57600080fd5b505afa158015612c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c479190614f99565b838381518110612c5957612c59614eed565b60209081029190910101525080612c6f81614f7e565b915050612b79565b6040805160018082528183019092526060916020808301908036833701905050905069151bdad95b95985d5b1d60b21b8160008151811061135e5761135e614eed565b33612cc36121ad565b6001600160a01b031614612ce95760405162461bcd60e51b8152600401610e32906151e1565b60008111612d395760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420636f6d706f756e6420666163746f720000000000000000006044820152606401610e32565b612d4283610ded565b15612d855760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610e32565b612d8d613864565b60405163dc9715c560e01b81526004810185905260126024820152604481018390526001600160a01b03919091169063dc9715c590606401600060405180830381600087803b158015612ddf57600080fd5b505af1158015612df3573d6000803e3d6000fd5b5050505081612e00613542565b60009485526003016020526040909320929092555050565b6000612e22613542565b6001600160a01b0383166000908152600491909101602052604090209050612e4a81846140a7565b612e5357505050565b6000806000612e6186612361565b905060005b8151811015612fde576000612e79613542565b60020160008981526020019081526020016000206000848481518110612ea157612ea1614eed565b6020026020010151815260200190815260200160002060009054906101000a90046001600160a01b031690506000612f2489858581518110612ee557612ee5614eed565b6020026020010151612ef5613542565b60008d8152600191909101602090815260408083206001600160a01b03808a168552925290912054168b6140bf565b9050600080612f4d8b878781518110612f3f57612f3f614eed565b60200260200101518c6141ff565b9092509050612f5c8289615096565b97508015612fbc57612fb98b878781518110612f7a57612f7a614eed565b6020026020010151612f8a613542565b60008f8152600191909101602090815260408083206001600160a01b03808c168552925290912054168d6140bf565b92505b8215612fc757600196505b505050508080612fd690614f7e565b915050612e66565b5082158015612feb575081155b801561307e5750612ffa613864565b60405163386320d360e11b8152600481018890526001600160a01b03878116602483015291909116906370c641a69060440160206040518083038186803b15801561304457600080fd5b505afa158015613058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307c9190614f99565b155b156130b3576130b18661308f613542565b6001600160a01b03881660009081526004919091016020526040902090614591565b505b505050505050565b6000336130c66121ad565b6001600160a01b0316146130ec5760405162461bcd60e51b8152600401610e32906151e1565b60005b6130f7613542565b60008481526020919091526040902054811015612b0d576000613118613542565b60008581526020919091526040902080548390811061313957613139614eed565b600091825260208220015460408051630b0863e760e11b815290516001600160a01b0390921693508392631610c7ce9260048084019382900301818387803b15801561318457600080fd5b505af1158015613198573d6000803e3d6000fd5b505050505080806131a890614f7e565b9150506130ef565b606060006131bc613542565b6000848152602091909152604090205467ffffffffffffffff8111156131e4576131e4614db4565b60405190808252806020026020018201604052801561320d578160200160208202803683370190505b50905060005b61321b613542565b600085815260209190915260409020548110156118ef57600061323c613542565b60008681526020919091526040902080548390811061325d5761325d614eed565b6000918252602091829020015460408051632f05aa6d60e11b815290516001600160a01b0390921693508392635e0b54da92600480840193829003018186803b1580156132a957600080fd5b505afa1580156132bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e19190614f99565b8383815181106132f3576132f3614eed565b6020908102919091010152508061330981614f7e565b915050613213565b3361331a6121ad565b6001600160a01b0316146133405760405162461bcd60e51b8152600401610e32906151e1565b6001600160a01b0381166133a55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610e32565b6133ae81613ea7565b50565b6000600260005414156133d65760405162461bcd60e51b8152600401610e3290615035565b60026000908155869086906133e9613542565b6000848152600291909101602090815260408083208584529091529020546001600160a01b0316141561342e5760405162461bcd60e51b8152600401610e329061506c565b61146088888888886138a8565b600080613446613542565b6001600160a01b03841660009081526004919091016020526040812091505b61346e82613e31565b81101561353b5760006134818383613e3b565b9050600061348f8287610813565b9050613499613e47565b6040516303a0a22f60e41b815260048101849052602481018390526001600160a01b039190911690633a0a22f09060440160206040518083038186803b1580156134e257600080fd5b505afa1580156134f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061351a9190614f99565b6135249086614f3d565b94505050808061353390614f7e565b915050613465565b5050919050565b7f8041b8421ebd495cc61f38c788c9eb100daccf9bd36aa0bb920b7a15b2e0496590565b600080613571613864565b6040516302b6878160e11b815260048101889052602481018790526001600160a01b03919091169063056d0f029060440160806040518083038186803b1580156135ba57600080fd5b505afa1580156135ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f29190615285565b6020015190506000808261367b57859150846001600160a01b03166371613c2d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561363c57600080fd5b505afa158015613650573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136749190614f99565b905061384e565b6000613685613864565b604051630c30971960e11b8152600481018b9052602481018a9052604481018990526001600160a01b0391909116906318612e329060640160206040518083038186803b1580156136d557600080fd5b505afa1580156136e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061370d9190614f99565b9050613717613864565b604051637636e94160e01b8152600481018b905260006024820152604481018390526001600160a01b039190911690637636e9419060640160206040518083038186803b15801561376757600080fd5b505afa15801561377b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061379f9190614f99565b92506137a9613542565b60008a81526020919091526040812080549091906137c9576137c9614eed565b60009182526020918290200154604080516371613c2d60e01b815290516001600160a01b03909216926371613c2d92600480840193829003018186803b15801561381257600080fd5b505afa158015613826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061384a9190614f99565b9150505b6138588282613888565b98975050505050505050565b60006138837011d95b995cda5cd5985b1d5955985d5b1d607a1b61459d565b905090565b600061271061389783856152eb565b6138a19190615386565b9392505050565b60008083116138ea5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610e32565b6138f2613e67565b6001600160a01b03166328ff7a42338886886040518563ffffffff1660e01b815260040161392394939291906153b4565b60206040518083038186803b15801561393b57600080fd5b505afa15801561394f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139739190615263565b6139b75760405162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da0818dbdb1b185d195c985b605a1b6044820152606401610e32565b60006139c1613542565b600088815260019190910160205260408120906139dc613542565b60008a8152600291909101602090815260408083208b84528252808320546001600160a01b039081168552918401949094529190920190912054169050613a25878783336140bf565b506000613a338888336141ff565b509050600080613a41613542565b60008b8152600291909101602090815260408083208c845290915290819020549051634eee449560e01b81526001600160a01b0390911690634eee449590613a93908b9033908c908c906004016153df565b6040805180830381600087803b158015613aac57600080fd5b505af1158015613ac0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ae49190614f03565b915091508160001480613af75750600081115b15613b0a57613b07600184615096565b92505b6005831115613b545760405162461bcd60e51b8152602060048201526016602482015275546f6f206d616e7920616374697665206f726465727360501b6044820152606401610e32565b81613ba557888a336001600160a01b03167f3a665a917b140525f0275d43b0b2584ef6a9de932462558cd901a657b61126408b8b8b604051613b9893929190615411565b60405180910390a4613df9565b6001886001811115613bb957613bb9615171565b1415613cb957613bc7613e67565b6001600160a01b031663aec9455c338c613be1858c61524c565b6040518463ffffffff1660e01b8152600401613bff93929190615119565b600060405180830381600087803b158015613c1957600080fd5b505af1158015613c2d573d6000803e3d6000fd5b505060405163a46971ad60e01b81526001600160a01b038716925063a46971ad9150613c6190339086908e90600401615119565b602060405180830381600087803b158015613c7b57600080fd5b505af1158015613c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cb39190615263565b50613daf565b613cc1613e67565b6001600160a01b0316631189abda338c613cdb858c61524c565b6040518463ffffffff1660e01b8152600401613cf993929190615119565b600060405180830381600087803b158015613d1357600080fd5b505af1158015613d27573d6000803e3d6000fd5b5050604051630424172f60e11b81526001600160a01b03871692506308482e5e9150613d5b90339086908e90600401615119565b602060405180830381600087803b158015613d7557600080fd5b505af1158015613d89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dad9190615263565b505b888a336001600160a01b03167f5af4e2baa5d844d0439bc0122be7cf9d47b6680937eaabce58bd1ca2f16486ae8b8b8b88604051613df09493929190615430565b60405180910390a45b613e1e8a613e05613542565b336000908152600491909101602052604090209061462e565b5060019450505050505b95945050505050565b6000611aea825490565b60006138a1838361463a565b60006138837121bab93932b731bca1b7b73a3937b63632b960711b61459d565b600061388369151bdad95b95985d5b1d60b21b61459d565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610745565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000805160206155a6833981519152546001600160a01b031615613f7e5760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c726561647900000000006044820152606401610e32565b6000805160206155a683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6000808080613fc7613fc26201518088615459565b614664565b91945092509050613fd88583615096565b9150600c613fe760018461524c565b613ff19190615459565b613ffb9084615096565b9250600c61400a60018461524c565b614014919061546d565b61401f906001615096565b9150600061402d84846147d8565b90508082111561403b578091505b614048620151808861546d565b6201518061405786868661485e565b6140619190615481565b61406b9190615096565b94508685101561407a57600080fd5b5050505092915050565b6000613883742132b0b1b7b7283937bc3ca1b7b73a3937b63632b960591b61459d565b600081815260018301602052604081205415156138a1565b60405163ae100e6d60e01b81526001600160a01b0382811660048301526024820185905260009182918291829187169063ae100e6d90604401606060405180830381600087803b15801561411257600080fd5b505af1158015614126573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061414a91906154a0565b925092509250826000146141f457614160613864565b604051634ab34b2b60e11b8152600481018a90526001600160a01b03878116602483015260448201849052606482018690529190911690639566965690608401602060405180830381600087803b1580156141ba57600080fd5b505af11580156141ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141f29190615263565b505b509695505050505050565b600080600061420e8686611a87565b90506000806000806000806000614223613542565b60008e8152600291909101602090815260408083208f845290915290819020549051630516d8c960e11b81526001600160a01b038d8116600483015290911690630a2db1929060240160e060405180830381600087803b15801561428657600080fd5b505af115801561429a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142be91906154ce565b96509650965096509650965096508183111561434b576142dc613e67565b6001600160a01b0316631189abda8c8f6142f6868861524c565b6040518463ffffffff1660e01b815260040161431493929190615119565b600060405180830381600087803b15801561432e57600080fd5b505af1158015614342573d6000803e3d6000fd5b505050506143c6565b818310156143c65761435b613e67565b6001600160a01b031663aec9455c8c8f614375878761524c565b6040518463ffffffff1660e01b815260040161439393929190615119565b600060405180830381600087803b1580156143ad57600080fd5b505af11580156143c1573d6000803e3d6000fd5b505050505b841561449657604051630424172f60e11b81526001600160a01b038916906308482e5e906143fc908e9089908690600401615119565b602060405180830381600087803b15801561441657600080fd5b505af115801561442a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061444e9190615263565b50808d336001600160a01b03167f3dd6192fffa4612e795f196dc6367cfa6494cbe70d7cff3a039ebbbc4acb262e60008960405161448d929190615522565b60405180910390a45b83156145665760405163a46971ad60e01b81526001600160a01b0389169063a46971ad906144cc908e9088908690600401615119565b602060405180830381600087803b1580156144e657600080fd5b505af11580156144fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061451e9190615263565b50808d336001600160a01b03167f3dd6192fffa4612e795f196dc6367cfa6494cbe70d7cff3a039ebbbc4acb262e60018860405161455d929190615522565b60405180910390a45b60006145728587615096565b11985061457f8688615096565b99505050505050505050935093915050565b60006138a1838361498f565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b031690816118ef5760405162461bcd60e51b8152600401610e32919061553d565b60006138a18383614a82565b600082600001828154811061465157614651614eed565b9060005260206000200154905092915050565b60008080838162253d8c61467b8362010bd9614f3d565b6146859190614f3d565b9050600062023ab16146988360046152eb565b6146a29190615386565b905060046146b38262023ab16152eb565b6146be906003614f3d565b6146c89190615386565b6146d29083615550565b9150600062164b096146e5846001614f3d565b6146f190610fa06152eb565b6146fb9190615386565b9050600461470b826105b56152eb565b6147159190615386565b61471f9084615550565b61472a90601f614f3d565b9250600061098f61473c8560506152eb565b6147469190615386565b9050600060506147588361098f6152eb565b6147629190615386565b61476c9086615550565b9050614779600b83615386565b945061478685600c6152eb565b614791836002614f3d565b61479b9190615550565b915084836147aa603187615550565b6147b59060646152eb565b6147bf9190614f3d565b6147c99190614f3d565b9a919950975095505050505050565b600081600114806147e95750816003145b806147f45750816005145b806147ff5750816007145b8061480a5750816008145b80614815575081600a145b80614820575081600c145b1561482d5750601f611aea565b8160021461483d5750601e611aea565b61484683614ad1565b61485157601c614854565b601d5b60ff169392505050565b60006107b284101561486f57600080fd5b838383600062253d8c60046064600c614889600e88615550565b6148939190615386565b61489f88611324614f3d565b6148a99190614f3d565b6148b39190615386565b6148be9060036152eb565b6148c89190615386565b600c806148d6600e88615550565b6148e09190615386565b6148eb90600c6152eb565b6148f6600288615550565b6149009190615550565b61490c9061016f6152eb565b6149169190615386565b6004600c614925600e89615550565b61492f9190615386565b61493b896112c0614f3d565b6149459190614f3d565b614951906105b56152eb565b61495b9190615386565b614967617d4b87615550565b6149719190614f3d565b61497b9190614f3d565b6149859190615550565b6138589190615550565b60008181526001830160205260408120548015614a785760006149b360018361524c565b85549091506000906149c79060019061524c565b9050818114614a2c5760008660000182815481106149e7576149e7614eed565b9060005260206000200154905080876000018481548110614a0a57614a0a614eed565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080614a3d57614a3d61558f565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611aea565b6000915050611aea565b6000818152600183016020526040812054614ac957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611aea565b506000611aea565b6000614ade60048361546d565b158015614af45750614af160648361546d565b15155b80611aea5750614b066101908361546d565b1592915050565b600080600060608486031215614b2257600080fd5b505081359360208301359350604090920135919050565b600081518084526020808501945080840160005b83811015614b6957815187529582019590820190600101614b4d565b509495945050505050565b606081526000614b876060830186614b39565b8281036020840152614b998186614b39565b90508281036040840152614bad8185614b39565b9695505050505050565b6001600160a01b03811681146133ae57600080fd5b60008060408385031215614bdf57600080fd5b823591506020830135614bf181614bb7565b809150509250929050565b600060208284031215614c0e57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015614c565783516001600160a01b031683529284019291840191600101614c31565b50909695505050505050565b600060208284031215614c7457600080fd5b81356138a181614bb7565b6020808252825182820181905260009190848201906040850190845b81811015614c5657835183529284019291840191600101614c9b565b600281106133ae57600080fd5b600080600080600060a08688031215614cdc57600080fd5b85359450602086013593506040860135614cf581614cb7565b94979396509394606081013594506080013592915050565b60008060408385031215614d2057600080fd5b8235614d2b81614bb7565b91506020830135614bf181614bb7565b600080600060608486031215614d5057600080fd5b8335925060208401359150604084013565ffffffffffff81168114614d7457600080fd5b809150509250925092565b6020815260006138a16020830184614b39565b60008060408385031215614da557600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b600082601f830112614ddb57600080fd5b8151602067ffffffffffffffff80831115614df857614df8614db4565b8260051b604051601f19603f83011681018181108482111715614e1d57614e1d614db4565b604052938452858101830193838101925087851115614e3b57600080fd5b83870191505b84821015614e5a57815183529183019190830190614e41565b979650505050505050565b600080600060608486031215614e7a57600080fd5b835167ffffffffffffffff80821115614e9257600080fd5b614e9e87838801614dca565b94506020860151915080821115614eb457600080fd5b614ec087838801614dca565b93506040860151915080821115614ed657600080fd5b50614ee386828701614dca565b9150509250925092565b634e487b7160e01b600052603260045260246000fd5b60008060408385031215614f1657600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b600080821280156001600160ff1b0384900385131615614f5f57614f5f614f27565b600160ff1b8390038412811615614f7857614f78614f27565b50500190565b6000600019821415614f9257614f92614f27565b5060010190565b600060208284031215614fab57600080fd5b5051919050565b6000815180845260005b81811015614fd857602081850181015186830182015201614fbc565b81811115614fea576000602083870101525b50601f01601f19169290920160200192915050565b828152604060208201526000610ad26040830184614fb2565b60006020828403121561502a57600080fd5b81516138a181614bb7565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526010908201526f496e76616c6964206d6174757269747960801b604082015260600190565b600082198211156150a9576150a9614f27565b500190565b6000600160ff1b8214156150c4576150c4614f27565b5060000390565b828152604060208201526000610ad26040830184614b39565b6000602082840312156150f657600080fd5b815167ffffffffffffffff81111561510d57600080fd5b610ad284828501614dca565b6001600160a01b039390931683526020830191909152604082015260600190565b60008060006060848603121561514f57600080fd5b835161515a81614cb7565b602085015160409095015190969495509392505050565b634e487b7160e01b600052602160045260246000fd5b600281106151a557634e487b7160e01b600052602160045260246000fd5b9052565b65ffffffffffff8616815260a081016151c56020830187615187565b8460408301528360608301528260808301529695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000806000806080858703121561522c57600080fd5b505082516020840151604085015160609095015191969095509092509050565b60008282101561525e5761525e614f27565b500390565b60006020828403121561527557600080fd5b815180151581146138a157600080fd5b60006080828403121561529757600080fd5b6040516080810181811067ffffffffffffffff821117156152ba576152ba614db4565b8060405250825181526020830151602082015260408301516040820152606083015160608201528091505092915050565b60006001600160ff1b038184138284138082168684048611161561531157615311614f27565b600160ff1b600087128281168783058912161561533057615330614f27565b6000871292508782058712848416161561534c5761534c614f27565b8785058712818416161561536257615362614f27565b505050929093029392505050565b634e487b7160e01b600052601260045260246000fd5b60008261539557615395615370565b600160ff1b8214600019841416156153af576153af614f27565b500590565b6001600160a01b0385168152602081018490526040810183905260808101613e286060830184615187565b608081016153ed8287615187565b6001600160a01b039490941660208201526040810192909252606090910152919050565b6060810161541f8286615187565b602082019390935260400152919050565b6080810161543e8287615187565b84602083015283604083015282606083015295945050505050565b60008261546857615468615370565b500490565b60008261547c5761547c615370565b500690565b600081600019048311821515161561549b5761549b614f27565b500290565b6000806000606084860312156154b557600080fd5b8351925060208401519150604084015190509250925092565b600080600080600080600060e0888a0312156154e957600080fd5b5050855160208701516040880151606089015160808a015160a08b015160c0909b0151949c939b50919990985090965094509092509050565b604081016155308285615187565b8260208301529392505050565b6020815260006138a16020830184614fb2565b60008083128015600160ff1b85018412161561556e5761556e614f27565b6001600160ff1b038401831381161561558957615589614f27565b50500390565b634e487b7160e01b600052603160045260246000fdfe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124018a2646970667358221220e9d505eeedeac5300415140015f171c1ad2d5369de7f09aafaaa3d18dfaf48ef64736f6c63430008090033",
  "libraries": {
    "QuickSort": "0xEc9EbB7d0Bb527dAA1f28C0aE145182c35eaeb91"
  },
  "implementation": "0x22003C80DD3fd0D4D1D342a3e0DC05f8905Ad7a2",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptedContracts()": {
        "details": "The contact name listed in this method is also needed to be listed `requiredContracts` method."
      },
      "calculateBorrowedFundsFromOrders(bytes32,address)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "borrowedAmount": "The borrowed amount due to the borrow orders being filled on the order book",
          "obligationAmount": "The debt amount due to the borrow orders being filled on the order book",
          "workingOrdersAmount": "The working orders amount on the order book"
        }
      },
      "calculateLentFundsFromOrders(bytes32,address)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "claimableAmount": "The claimable amount due to the lending orders being filled on the order book",
          "workingOrdersAmount": "The working orders amount on the order book"
        }
      },
      "cancelOrder(bytes32,uint256,uint48)": {
        "params": {
          "_ccy": "Currency name in bytes32 of the selected market",
          "_maturity": "The maturity of the selected market",
          "_orderId": "Market order id"
        }
      },
      "cleanAllOrders(address)": {
        "params": {
          "_user": "User's address"
        }
      },
      "cleanOrders(bytes32,address)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "createLendOrderWithETH(bytes32,uint256,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32 of the selected market",
          "_maturity": "The maturity of the selected market",
          "_unitPrice": "Amount of unit price taker wish to borrow/lend"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      },
      "createLendingMarket(bytes32)": {
        "params": {
          "_ccy": "Main currency for new lending market"
        },
        "returns": {
          "market": "The proxy contract address of created lending market"
        }
      },
      "createOrder(bytes32,uint256,uint8,uint256,uint256)": {
        "params": {
          "_amount": "Amount of funds the maker wants to borrow/lend",
          "_ccy": "Currency name in bytes32 of the selected market",
          "_maturity": "The maturity of the selected market",
          "_side": "Order position type, Borrow or Lend",
          "_unitPrice": "Amount of unit price taker wish to borrow/lend"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      },
      "depositAndCreateLendOrderWithETH(bytes32,uint256,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32 of the selected market",
          "_maturity": "The maturity of the selected market",
          "_unitPrice": "Amount of unit price taker wish to borrow/lend"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      },
      "depositAndCreateOrder(bytes32,uint256,uint8,uint256,uint256)": {
        "params": {
          "_amount": "Amount of funds the maker wants to borrow/lend",
          "_ccy": "Currency name in bytes32 of the selected market",
          "_maturity": "The maturity of the selected market",
          "_side": "Order position type, Borrow or Lend",
          "_unitPrice": "Amount of unit price taker wish to borrow/lend"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      },
      "getBorrowOrderBook(bytes32,uint256,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_limit": "The limit number to get",
          "_maturity": "The maturity of the market"
        },
        "returns": {
          "amounts": "The array of borrow order amounts",
          "quantities": "The array of borrow order quantities",
          "unitPrices": "The array of borrow unit prices"
        }
      },
      "getBorrowUnitPrices(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "Array with the borrowing prices per future value of the lending market"
        }
      },
      "getFutureValueVault(bytes32,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_maturity": "The maturity of the market"
        },
        "returns": {
          "_0": "The lending market address"
        }
      },
      "getGenesisDate(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The genesis date"
        }
      },
      "getLendOrderBook(bytes32,uint256,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_limit": "The limit number to get",
          "_maturity": "The maturity of the market"
        },
        "returns": {
          "amounts": "The array of lend order amounts",
          "quantities": "The array of lend order quantities",
          "unitPrices": "The array of borrow unit prices"
        }
      },
      "getLendUnitPrices(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "Array with the lending prices per future value of the lending market"
        }
      },
      "getLendingMarket(bytes32,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_maturity": "The maturity of the market"
        },
        "returns": {
          "_0": "The lending market address"
        }
      },
      "getLendingMarkets(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "Array with the lending market address"
        }
      },
      "getMaturities(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "Array with the lending market maturity"
        }
      },
      "getMidUnitPrices(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "Array with the mid prices per future value of the lending market"
        }
      },
      "getTotalPresentValue(bytes32,address)": {
        "params": {
          "_ccy": "Currency name in bytes32 for Lending Market",
          "_user": "User's address"
        },
        "returns": {
          "totalPresentValue": "The total present value"
        }
      },
      "getTotalPresentValueInETH(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "totalPresentValue": "The total present value in ETH"
        }
      },
      "initialize(address,address)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController.",
        "params": {
          "_owner": "The address of the contract owner",
          "_resolver": "The address of the Address Resolver contract"
        }
      },
      "initializeLendingMarket(bytes32,uint256,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_compoundFactor": "The initial compound factor when the initial market is opened",
          "_genesisDate": "The genesis date when the initial market is opened"
        }
      },
      "isInitializedLendingMarket(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The boolean if the lending market is initialized or not"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pauseLendingMarkets(bytes32)": {
        "params": {
          "_ccy": "Currency for pausing all lending markets"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requiredContracts()": {
        "details": "The contract name list is in `./libraries/Contracts.sol`."
      },
      "rotateLendingMarkets(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32 of the selected market"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpauseLendingMarkets(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptedContracts()": {
        "notice": "Returns contract names that can call this contract."
      },
      "calculateBorrowedFundsFromOrders(bytes32,address)": {
        "notice": "Gets the funds that are calculated from the user's borrowing order list for the selected currency."
      },
      "calculateLentFundsFromOrders(bytes32,address)": {
        "notice": "Gets the funds that are calculated from the user's lending order list for the selected currency."
      },
      "cancelOrder(bytes32,uint256,uint48)": {
        "notice": "Cancels the own order."
      },
      "cleanAllOrders(address)": {
        "notice": "Cleans user's all orders to remove order ids that are already filled on the order book."
      },
      "cleanOrders(bytes32,address)": {
        "notice": "Cleans user's orders to remove order ids that are already filled on the order book for a selected currency."
      },
      "createLendOrderWithETH(bytes32,uint256,uint256)": {
        "notice": "Creates a lend order with ETH. Takes the order if the order is matched, and places new order if not match it."
      },
      "createLendingMarket(bytes32)": {
        "notice": "Deploys new Lending Market and save address at lendingMarkets mapping.Reverts on deployment market with existing currency and term"
      },
      "createOrder(bytes32,uint256,uint8,uint256,uint256)": {
        "notice": "Creates an order. Takes orders if the orders are matched, and places new order if not match it. In addition, converts the future value to the genesis value if there is future value in past maturity before the execution of order creation."
      },
      "depositAndCreateLendOrderWithETH(bytes32,uint256,uint256)": {
        "notice": "Deposits funds and creates a lend order with ETH at the same time."
      },
      "depositAndCreateOrder(bytes32,uint256,uint8,uint256,uint256)": {
        "notice": "Deposits funds and creates an order at the same time."
      },
      "getBorrowOrderBook(bytes32,uint256,uint256)": {
        "notice": "Gets the order book of borrow."
      },
      "getBorrowUnitPrices(bytes32)": {
        "notice": "Gets borrow prices per future value for the selected currency."
      },
      "getFutureValueVault(bytes32,uint256)": {
        "notice": "Gets the feture value contract address for the selected currency and maturity."
      },
      "getGenesisDate(bytes32)": {
        "notice": "Gets the genesis date when the first market opens for the selected currency."
      },
      "getLendOrderBook(bytes32,uint256,uint256)": {
        "notice": "Gets the order book of lend."
      },
      "getLendUnitPrices(bytes32)": {
        "notice": "Gets lend prices per future value for the selected currency."
      },
      "getLendingMarket(bytes32,uint256)": {
        "notice": "Gets the lending market contract address for the selected currency and maturity."
      },
      "getLendingMarkets(bytes32)": {
        "notice": "Gets the lending market contract addresses for the selected currency."
      },
      "getMaturities(bytes32)": {
        "notice": "Gets maturities for the selected currency."
      },
      "getMidUnitPrices(bytes32)": {
        "notice": "Gets mid prices per future value for the selected currency."
      },
      "getTotalPresentValue(bytes32,address)": {
        "notice": "Gets the total present value of the account for selected currency."
      },
      "getTotalPresentValueInETH(address)": {
        "notice": "Gets the total present value of the account converted to ETH."
      },
      "initialize(address,address)": {
        "notice": "Initializes the contract."
      },
      "initializeLendingMarket(bytes32,uint256,uint256)": {
        "notice": "Initialize the lending market to set a genesis date and compound factor"
      },
      "isInitializedLendingMarket(bytes32)": {
        "notice": "Gets if the lending market is initialized."
      },
      "pauseLendingMarkets(bytes32)": {
        "notice": "Pauses previously deployed lending market by currency"
      },
      "requiredContracts()": {
        "notice": "Returns the contract names used in this contract."
      },
      "rotateLendingMarkets(bytes32)": {
        "notice": "Rotate the lending markets. In this rotation, the following actions are happened. - Updates the maturity at the beginning of the market array. - Moves the beginning of the market array to the end of it. - Update the compound factor in this contract using the next market unit price."
      },
      "unpauseLendingMarkets(bytes32)": {
        "notice": "Unpauses previously deployed lending market by currency"
      }
    },
    "notice": "Implements the module to manage separated lending order-book markets per maturity. This contract also works as a factory contract that can deploy (start) a new lending market for selected currency and maturity and has the calculation logic for the Genesis value in addition. Deployed Lending Markets are rotated and reused as it reaches the maturity date. At the time of rotation, a new maturity date is set and the compound factor is updated. The users mainly call this contract to create orders to lend or borrow funds.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1053,
        "contract": "contracts/LendingMarketController.sol:LendingMarketController",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 790,
        "contract": "contracts/LendingMarketController.sol:LendingMarketController",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 793,
        "contract": "contracts/LendingMarketController.sol:LendingMarketController",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}