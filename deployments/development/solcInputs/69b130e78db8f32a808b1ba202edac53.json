{
  "language": "Solidity",
  "sources": {
    "contracts/AddressResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {IAddressResolver} from \"./interfaces/IAddressResolver.sol\";\nimport {Ownable} from \"./utils/Ownable.sol\";\nimport {Proxyable} from \"./utils/Proxyable.sol\";\nimport {AddressResolverStorage as Storage} from \"./storages/AddressResolverStorage.sol\";\n\n/**\n * @notice Implements the logic to manage the contract addresses.\n *\n * This contract store the contract name and contract address. When the contract calls other contracts,\n * the caller contract gets the contract address from this contract.\n * However, the contract addresses are cashed into the caller contract through the `MixinAddressResolver.sol` at the deployment,\n * so the caller doesn't need to call this contract each time it calls other contracts.\n *\n * @dev This contract is used through the `./mixins/MixinAddressResolver.sol`. The names of the contracts that\n * need to be imported into this contract are managed in `./libraries/Contracts.sol`.\n */\ncontract AddressResolver is IAddressResolver, Ownable, Proxyable {\n    /**\n     * @notice Initializes the contract.\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\n     * @param _owner The address of the contract owner\n     */\n    function initialize(address _owner) public initializer onlyProxy {\n        _transferOwnership(_owner);\n    }\n\n    /**\n     * @notice Imports contract addresses.\n     * @dev All addresses in the contract are overridden by `_addresses` in the argument.\n     */\n    function importAddresses(bytes32[] memory _names, address[] memory _addresses)\n        public\n        onlyOwner\n    {\n        require(_names.length == _addresses.length, \"Input lengths must match\");\n\n        Storage.slot().addressCaches = _addresses;\n\n        for (uint256 i = 0; i < _names.length; i++) {\n            bytes32 name = _names[i];\n            address destination = _addresses[i];\n            Storage.slot().addresses[name] = destination;\n            emit AddressImported(name, destination);\n        }\n    }\n\n    /**\n     * @notice Gets if the addresses are imported.\n     * @return The boolean if the addresses are imported or not\n     */\n    function areAddressesImported(bytes32[] calldata _names, address[] calldata _addresses)\n        external\n        view\n        returns (bool)\n    {\n        for (uint256 i = 0; i < _names.length; i++) {\n            if (Storage.slot().addresses[_names[i]] != _addresses[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @notice Gets the imported contract addresses for the name with error.\n     * @dev This method is used when the caller need to get an error if the address in the name\n     * is not imported.\n     * @return The contract address\n     */\n    function getAddress(bytes32 _name, string calldata _reason)\n        external\n        view\n        override\n        returns (address)\n    {\n        address _foundAddress = Storage.slot().addresses[_name];\n        require(_foundAddress != address(0), _reason);\n        return _foundAddress;\n    }\n\n    /**\n     * @notice Gets the imported contract addresses for the name.\n     * @dev This method is used when the caller doesn't need to get an error if the address in the name\n     * is not imported.\n     * @return The contract address\n     */\n    function getAddress(bytes32 _name) external view override returns (address) {\n        return Storage.slot().addresses[_name];\n    }\n\n    /**\n     * @notice Gets the all imported contract addresses.\n     * @return Array with the contract address\n     */\n    function getAddresses() external view override returns (address[] memory) {\n        return Storage.slot().addressCaches;\n    }\n}\n"
    },
    "contracts/interfaces/IAddressResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IAddressResolver {\n    event AddressImported(bytes32 name, address destination);\n\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\n\n    function getAddress(bytes32 name) external view returns (address);\n\n    function getAddresses() external view returns (address[] memory);\n}\n"
    },
    "contracts/utils/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"../storages/OwnableStorage.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return OwnableStorage.slot().owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = OwnableStorage.slot().owner;\n        OwnableStorage.slot().owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/utils/Proxyable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/utils/StorageSlot.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\nabstract contract Proxyable is Initializable {\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n    bytes32 internal constant _BEACON_SLOT =\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    modifier onlyProxy() {\n        require(_getImplementation() != address(0), \"Must be called from proxy contract\");\n        _;\n    }\n\n    modifier onlyBeacon() {\n        require(_getBeacon() != address(0), \"Must be called from beacon contract\");\n        _;\n    }\n\n    function _getImplementation() private view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n}\n"
    },
    "contracts/storages/AddressResolverStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nlibrary AddressResolverStorage {\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"sf.storage.addressResolver\");\n\n    struct Storage {\n        // Mapping from contract name to contract address\n        mapping(bytes32 => address) addresses;\n        // Contract address list\n        address[] addressCaches;\n    }\n\n    function slot() internal pure returns (Storage storage r) {\n        bytes32 _slot = STORAGE_SLOT;\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := _slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/storages/OwnableStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nlibrary OwnableStorage {\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"sf.storage.ownable\");\n\n    struct Storage {\n        address owner;\n    }\n\n    function slot() internal pure returns (Storage storage r) {\n        bytes32 _slot = STORAGE_SLOT;\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := _slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/TokenVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {ISwapRouter} from \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\nimport {IQuoter} from \"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\";\n// libraries\nimport {Contracts} from \"./libraries/Contracts.sol\";\nimport {CollateralParametersHandler} from \"./libraries/CollateralParametersHandler.sol\";\nimport {ERC20Handler} from \"./libraries/ERC20Handler.sol\";\n// interfaces\nimport {ITokenVault} from \"./interfaces/ITokenVault.sol\";\n// mixins\nimport {MixinAddressResolver} from \"./mixins/MixinAddressResolver.sol\";\n// types\nimport {ProtocolTypes} from \"./types/ProtocolTypes.sol\";\n// utils\nimport {Ownable} from \"./utils/Ownable.sol\";\nimport {Proxyable} from \"./utils/Proxyable.sol\";\n// storages\nimport {TokenVaultStorage as Storage} from \"./storages/TokenVaultStorage.sol\";\n\n/**\n * @notice Implements the management of the token in each currency for users.\n *\n * This contract manages the following data related to tokens.\n * - Deposited token amount as the collateral\n * - Parameters related to the collateral\n *   - Margin Call Threshold Rate\n *   - Auto Liquidation Threshold Rate\n *   - Liquidation Price Rate\n *   - Min Collateral Rate\n *\n * To address a currency as collateral, it must be registered using `registerCurrency` method in this contract.\n */\ncontract TokenVault is ITokenVault, MixinAddressResolver, Ownable, Proxyable {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    struct CalculatedFundVars {\n        uint256 workingLendOrdersAmount;\n        uint256 collateralAmount;\n        uint256 lentAmount;\n        uint256 workingBorrowOrdersAmount;\n        uint256 debtAmount;\n        uint256 borrowedAmount;\n        bool isEnoughDeposit;\n    }\n\n    /**\n     * @notice Modifier to check if currency hasn't been registered yet\n     * @param _ccy Currency name in bytes32\n     */\n    modifier onlyRegisteredCurrency(bytes32 _ccy) {\n        require(isRegisteredCurrency(_ccy), \"Currency not registered\");\n        _;\n    }\n\n    /**\n     * @notice Initializes the contract.\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\n     * @param _owner The address of the contract owner\n     * @param _resolver The address of the Address Resolver contract\n     * @param _liquidationThresholdRate The rate used as the auto liquidation threshold\n     * @param _uniswapRouter Uniswap router contract address\n     * @param _WETH9 The address of WETH\n     */\n    function initialize(\n        address _owner,\n        address _resolver,\n        uint256 _liquidationThresholdRate,\n        address _uniswapRouter,\n        address _WETH9\n    ) public initializer onlyProxy {\n        _transferOwnership(_owner);\n        registerAddressResolver(_resolver);\n\n        ERC20Handler.initialize(_WETH9);\n        CollateralParametersHandler.setCollateralParameters(\n            _liquidationThresholdRate,\n            _uniswapRouter\n        );\n    }\n\n    // @inheritdoc MixinAddressResolver\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\n        contracts = new bytes32[](2);\n        contracts[0] = Contracts.CURRENCY_CONTROLLER;\n        contracts[1] = Contracts.LENDING_MARKET_CONTROLLER;\n    }\n\n    // @inheritdoc MixinAddressResolver\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\n        contracts = new bytes32[](1);\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\n    }\n\n    receive() external payable {\n        require(msg.sender == ERC20Handler.weth(), \"Not WETH\");\n    }\n\n    /**\n     * @notice Gets if the collateral has enough coverage.\n     * @param _user User's address\n     * @param _unsettledOrderCcy Additional unsettled order currency name in bytes32\n     * @param _unsettledOrderAmount Additional unsettled order amount\n     * @return The boolean if the collateral has sufficient coverage or not\n     */\n    function isCovered(\n        address _user,\n        bytes32 _unsettledOrderCcy,\n        uint256 _unsettledOrderAmount,\n        ProtocolTypes.Side _unsettledOrderSide\n    ) external view override returns (bool) {\n        return\n            _isCovered(\n                _user,\n                _unsettledOrderCcy,\n                _unsettledOrderAmount,\n                ProtocolTypes.Side.BORROW == _unsettledOrderSide\n            );\n    }\n\n    /**\n     * @notice Gets if the collateral has enough coverage.\n     * @param _user User's address\n     * @return The boolean if the collateral has sufficient coverage or not\n     */\n    function isCovered(address _user) public view override returns (bool) {\n        return _isCovered(_user, \"\", 0, false);\n    }\n\n    /**\n     * @notice Gets if the currency is acceptable as collateral\n     * @param _ccy Currency name in bytes32\n     * @return The boolean if the currency has been registered or not\n     */\n    function isCollateral(bytes32 _ccy) public view override returns (bool) {\n        return Storage.slot().collateralCurrencies.contains(_ccy);\n    }\n\n    function isCollateral(bytes32[] calldata _ccys)\n        external\n        view\n        override\n        returns (bool[] memory isCollateralCurrencies)\n    {\n        isCollateralCurrencies = new bool[](_ccys.length);\n        for (uint256 i = 0; i < _ccys.length; i++) {\n            isCollateralCurrencies[i] = Storage.slot().collateralCurrencies.contains(_ccys[i]);\n        }\n    }\n\n    /**\n     * @notice Gets if the currency has been registered\n     * @param _ccy Currency name in bytes32\n     * @return The boolean if the currency has been registered or not\n     */\n    function isRegisteredCurrency(bytes32 _ccy) public view override returns (bool) {\n        return Storage.slot().tokenAddresses[_ccy] != address(0);\n    }\n\n    /**\n     * @notice Gets the token contract address\n     * @param _ccy Currency name in bytes32\n     * @return The token contract address\n     */\n    function getTokenAddress(bytes32 _ccy) public view override returns (address) {\n        return Storage.slot().tokenAddresses[_ccy];\n    }\n\n    /**\n     * @notice Gets the currencies accepted as collateral\n     * @return Array of th currency accepted as collateral\n     */\n    function getCollateralCurrencies() external view override returns (bytes32[] memory) {\n        return Storage.slot().collateralCurrencies.values();\n    }\n\n    /**\n     * @notice Gets the maximum amount of ETH that can be withdrawn from user collateral.\n     * @param _user User's address\n     * @return Maximum amount of ETH that can be withdrawn\n     */\n    function getWithdrawableCollateral(address _user) external view virtual returns (uint256) {\n        return _getWithdrawableCollateral(_user);\n    }\n\n    /**\n     * @notice Gets the rate of collateral used.\n     * @param _user User's address\n     * @return coverage The rate of collateral used\n     */\n    function getCoverage(address _user) public view override returns (uint256 coverage) {\n        (uint256 totalCollateral, uint256 totalUsedCollateral, ) = _getActualCollateralAmount(\n            _user\n        );\n\n        if (totalCollateral == 0) {\n            coverage = totalUsedCollateral == 0 ? 0 : type(uint256).max;\n        } else {\n            coverage = (totalUsedCollateral * ProtocolTypes.PCT_DIGIT) / totalCollateral;\n        }\n    }\n\n    /**\n     * @notice Gets the total amount of unused collateral\n     * @param _user User's address\n     * @return The total amount of unused collateral\n     */\n    function getUnusedCollateral(address _user) external view returns (uint256) {\n        (uint256 totalCollateral, uint256 totalUsedCollateral, ) = _getActualCollateralAmount(\n            _user\n        );\n\n        return totalCollateral > totalUsedCollateral ? totalCollateral - totalUsedCollateral : 0;\n    }\n\n    /**\n     * @notice Gets the total collateral amount.\n     * by converting it to ETH.\n     * @param _user Address of collateral user\n     * @return totalCollateralAmount The total collateral amount in ETH\n     */\n    function getTotalCollateralAmount(address _user)\n        public\n        view\n        override\n        returns (uint256 totalCollateralAmount)\n    {\n        (totalCollateralAmount, , ) = _getActualCollateralAmount(_user);\n    }\n\n    function getLiquidationAmount(address _user) external view override returns (uint256) {\n        (uint256 totalCollateral, uint256 totalUsedCollateral, ) = _getActualCollateralAmount(\n            _user\n        );\n\n        return\n            totalCollateral * ProtocolTypes.PCT_DIGIT >=\n                totalUsedCollateral * CollateralParametersHandler.liquidationThresholdRate()\n                ? 0\n                : totalUsedCollateral / 2;\n    }\n\n    /**\n     * @notice Gets the amount deposited in the user's collateral.\n     * @param _user User's address\n     * @param _ccy Currency name in bytes32\n     * @return The deposited amount\n     */\n    function getDepositAmount(address _user, bytes32 _ccy)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        (, , , uint256 lentAmount, , , uint256 borrowedAmount) = lendingMarketController()\n            .calculateFunds(_ccy, _user);\n        return Storage.slot().depositAmounts[_user][_ccy] + borrowedAmount - lentAmount;\n    }\n\n    /**\n     * @notice Gets the currencies that the user used as collateral.\n     * @param _user User's address\n     * @return The currency names in bytes32\n     */\n    function getUsedCurrencies(address _user) public view override returns (bytes32[] memory) {\n        EnumerableSet.Bytes32Set storage currencySet = Storage.slot().usedCurrencies[_user];\n\n        uint256 numCurrencies = currencySet.length();\n        bytes32[] memory currencies = new bytes32[](numCurrencies);\n\n        for (uint256 i = 0; i < numCurrencies; i++) {\n            bytes32 currency = currencySet.at(i);\n            currencies[i] = currency;\n        }\n\n        return currencies;\n    }\n\n    /**\n     * @notice Gets liquidation threshold rate\n     * @return liquidationThresholdRate  The rate used as the liquidation threshold\n     */\n    function getLiquidationThresholdRate()\n        external\n        view\n        override\n        returns (uint256 liquidationThresholdRate)\n    {\n        return CollateralParametersHandler.liquidationThresholdRate();\n    }\n\n    /**\n     * @notice Gets Uniswap Router contract address\n     * @return  uniswapRouter Uniswap Router contract address\n     */\n    function getUniswapRouter() external view override returns (address uniswapRouter) {\n        return address(CollateralParametersHandler.uniswapRouter());\n    }\n\n    /**\n     * @notice Registers new currency and sets if it is acceptable as collateral.\n     * @param _ccy Currency name in bytes32\n     * @param _tokenAddress Token contract address of the selected currency\n     * @param _isCollateral Boolean if the selected currency is acceptable as collateral.\n     */\n    function registerCurrency(\n        bytes32 _ccy,\n        address _tokenAddress,\n        bool _isCollateral\n    ) external onlyOwner {\n        require(currencyController().currencyExists(_ccy), \"Invalid currency\");\n\n        Storage.slot().tokenAddresses[_ccy] = _tokenAddress;\n        if (_isCollateral) {\n            Storage.slot().collateralCurrencies.add(_ccy);\n            ERC20Handler.safeApprove(\n                getTokenAddress(_ccy),\n                address(CollateralParametersHandler.uniswapRouter()),\n                type(uint256).max\n            );\n        }\n\n        emit RegisterCurrency(_ccy, _tokenAddress, _isCollateral);\n    }\n\n    /**\n     * @notice Updates the currency if it is acceptable as collateral.\n     * @param _ccy Currency name in bytes32\n     * @param _isCollateral Boolean if the selected currency is acceptable as collateral.\n     */\n    function updateCurrency(bytes32 _ccy, bool _isCollateral)\n        external\n        onlyOwner\n        onlyRegisteredCurrency(_ccy)\n    {\n        if (_isCollateral) {\n            Storage.slot().collateralCurrencies.add(_ccy);\n            ERC20Handler.safeApprove(\n                getTokenAddress(_ccy),\n                address(CollateralParametersHandler.uniswapRouter()),\n                type(uint256).max\n            );\n        } else {\n            Storage.slot().collateralCurrencies.remove(_ccy);\n        }\n\n        emit UpdateCurrency(_ccy, _isCollateral);\n    }\n\n    /**\n     * @dev Deposits funds by the caller into collateral.\n     * @param _amount Amount of funds to deposit\n     * @param _ccy Currency name in bytes32\n     */\n    function deposit(bytes32 _ccy, uint256 _amount)\n        external\n        payable\n        override\n        onlyRegisteredCurrency(_ccy)\n    {\n        _deposit(msg.sender, _ccy, _amount);\n    }\n\n    /**\n     * @dev Deposits funds by the `from` into collateral.\n     * @param _from user's address\n     * @param _amount Amount of funds to deposit\n     * @param _ccy Currency name in bytes32\n     */\n    function depositFrom(\n        address _from,\n        bytes32 _ccy,\n        uint256 _amount\n    ) external payable override onlyAcceptedContracts {\n        _deposit(_from, _ccy, _amount);\n    }\n\n    /**\n     * @notice Withdraws funds by the caller from unused collateral.\n     * @param _ccy Currency name in bytes32\n     * @param _amount Amount of funds to withdraw.\n     */\n    function withdraw(bytes32 _ccy, uint256 _amount)\n        external\n        override\n        onlyRegisteredCurrency(_ccy)\n    {\n        require(_amount > 0, \"Invalid amount\");\n\n        lendingMarketController().cleanOrders(_ccy, msg.sender);\n\n        uint256 withdrawAmt;\n        uint256 depositAmount = Storage.slot().depositAmounts[msg.sender][_ccy];\n        if (isCollateral(_ccy)) {\n            uint256 maxWithdrawETH = _getWithdrawableCollateral(msg.sender);\n            uint256 maxWithdraw = currencyController().convertFromETH(_ccy, maxWithdrawETH);\n\n            withdrawAmt = _amount > maxWithdraw ? maxWithdraw : _amount;\n            withdrawAmt = depositAmount >= withdrawAmt ? withdrawAmt : depositAmount;\n        } else {\n            withdrawAmt = depositAmount;\n        }\n\n        Storage.slot().depositAmounts[msg.sender][_ccy] -= withdrawAmt;\n\n        ERC20Handler.withdrawAssets(Storage.slot().tokenAddresses[_ccy], msg.sender, withdrawAmt);\n        _updateUsedCurrencies(msg.sender, _ccy);\n\n        emit Withdraw(msg.sender, _ccy, withdrawAmt);\n    }\n\n    /**\n     * @dev Adds deposit amount.\n     * @param _user User's address\n     * @param _amount Amount of funds to deposit\n     * @param _ccy Currency name in bytes32\n     */\n    function addDepositAmount(\n        address _user,\n        bytes32 _ccy,\n        uint256 _amount\n    ) external override onlyAcceptedContracts onlyRegisteredCurrency(_ccy) {\n        Storage.slot().depositAmounts[_user][_ccy] += _amount;\n        _updateUsedCurrencies(_user, _ccy);\n    }\n\n    /**\n     * @notice Removes deposit amount.\n     * @param _user User's address\n     * @param _ccy Currency name in bytes32\n     * @param _amount Amount of funds to withdraw.\n     */\n    function removeDepositAmount(\n        address _user,\n        bytes32 _ccy,\n        uint256 _amount\n    ) external override onlyAcceptedContracts onlyRegisteredCurrency(_ccy) {\n        require(\n            Storage.slot().depositAmounts[_user][_ccy] >= _amount,\n            \"Not enough collateral in the selected currency\"\n        );\n\n        Storage.slot().depositAmounts[_user][_ccy] -= _amount;\n        _updateUsedCurrencies(_user, _ccy);\n    }\n\n    /**\n     * @notice Swap the deposited amount to convert to a different currency using Uniswap.\n     * @param _user User's address\n     * @param _ccyFrom Currency name to be converted from\n     * @param _ccyTo Currency name to be converted to\n     * @param _amountOut Amount to be converted to\n     * @param _poolFee Uniswap pool fee\n     */\n    function swapDepositAmounts(\n        address _user,\n        bytes32 _ccyFrom,\n        bytes32 _ccyTo,\n        uint256 _amountOut,\n        uint24 _poolFee\n    ) external override onlyAcceptedContracts returns (uint256 amountIn) {\n        uint256 depositAmount = Storage.slot().depositAmounts[_user][_ccyFrom];\n        require(depositAmount > 0, \"No deposit amount in the selected currency\");\n\n        ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter.ExactOutputSingleParams({\n            tokenIn: getTokenAddress(_ccyFrom),\n            tokenOut: getTokenAddress(_ccyTo),\n            fee: _poolFee,\n            recipient: address(this),\n            deadline: block.timestamp,\n            amountOut: _amountOut,\n            amountInMaximum: depositAmount,\n            sqrtPriceLimitX96: 0\n        });\n\n        amountIn = CollateralParametersHandler.uniswapRouter().exactOutputSingle(params);\n\n        Storage.slot().depositAmounts[_user][_ccyFrom] -= amountIn;\n        Storage.slot().depositAmounts[_user][_ccyTo] += _amountOut;\n\n        _updateUsedCurrencies(_user, _ccyFrom);\n        _updateUsedCurrencies(_user, _ccyTo);\n\n        emit Swap(_user, _ccyFrom, _ccyTo, amountIn, _amountOut);\n    }\n\n    /**\n     * @notice Sets main collateral parameters this function\n     * solves the issue of frontrunning during parameters tuning.\n     *\n     * @param _liquidationThresholdRate Auto liquidation threshold rate\n     * @param _uniswapRouter Uniswap router contract address\n     * @notice Triggers only be contract owner\n     */\n    function setCollateralParameters(uint256 _liquidationThresholdRate, address _uniswapRouter)\n        external\n        onlyOwner\n    {\n        CollateralParametersHandler.setCollateralParameters(\n            _liquidationThresholdRate,\n            _uniswapRouter\n        );\n    }\n\n    function _isCovered(\n        address _user,\n        bytes32 _unsettledOrderCcy,\n        uint256 _unsettledOrderAmount,\n        bool _isUnsettledBorrowOrder\n    ) internal view returns (bool) {\n        (uint256 totalCollateral, uint256 totalUsedCollateral, ) = _getActualCollateralAmount(\n            _user,\n            _unsettledOrderCcy,\n            _unsettledOrderAmount,\n            _isUnsettledBorrowOrder\n        );\n\n        return\n            totalUsedCollateral == 0 ||\n            (totalCollateral * ProtocolTypes.PCT_DIGIT >=\n                totalUsedCollateral * CollateralParametersHandler.liquidationThresholdRate());\n    }\n\n    function _getActualCollateralAmount(address _user)\n        private\n        view\n        returns (\n            uint256 totalCollateral,\n            uint256 totalUsedCollateral,\n            uint256 totalActualCollateral\n        )\n    {\n        return _getActualCollateralAmount(_user, \"\", 0, false);\n    }\n\n    function _getActualCollateralAmount(\n        address _user,\n        bytes32 _unsettledOrderCcy,\n        uint256 _unsettledOrderAmount,\n        bool _isUnsettledBorrowOrder\n    )\n        private\n        view\n        returns (\n            uint256 totalCollateral,\n            uint256 totalUsedCollateral,\n            uint256 totalActualCollateral\n        )\n    {\n        CalculatedFundVars memory vars;\n\n        uint256 depositAmount = Storage.slot().depositAmounts[_user][_unsettledOrderCcy];\n        uint256 unsettledBorrowOrdersAmountInETH;\n\n        if (_unsettledOrderAmount > 0) {\n            if (_isUnsettledBorrowOrder) {\n                unsettledBorrowOrdersAmountInETH = currencyController().convertToETH(\n                    _unsettledOrderCcy,\n                    _unsettledOrderAmount\n                );\n            } else {\n                require(\n                    depositAmount >= _unsettledOrderAmount,\n                    \"Not enough collateral in the selected currency\"\n                );\n                depositAmount -= _unsettledOrderAmount;\n\n                if (isCollateral(_unsettledOrderCcy)) {\n                    vars.workingLendOrdersAmount += currencyController().convertToETH(\n                        _unsettledOrderCcy,\n                        _unsettledOrderAmount\n                    );\n                }\n            }\n        }\n\n        (\n            vars.workingLendOrdersAmount,\n            ,\n            vars.collateralAmount,\n            vars.lentAmount,\n            vars.workingBorrowOrdersAmount,\n            vars.debtAmount,\n            vars.borrowedAmount,\n            vars.isEnoughDeposit\n        ) = lendingMarketController().calculateTotalFundsInETH(\n            _user,\n            _unsettledOrderCcy,\n            depositAmount\n        );\n\n        require(\n            vars.isEnoughDeposit || _isUnsettledBorrowOrder || _unsettledOrderAmount == 0,\n            \"Not enough collateral in the selected currency\"\n        );\n\n        uint256 totalInternalDepositAmount = _getTotalInternalDepositAmountInETH(_user);\n\n        uint256 actualPlusCollateral = totalInternalDepositAmount + vars.borrowedAmount;\n        uint256 minusCollateral = vars.workingLendOrdersAmount + vars.lentAmount;\n        uint256 plusCollateral = actualPlusCollateral + vars.collateralAmount;\n\n        totalCollateral = plusCollateral >= minusCollateral ? plusCollateral - minusCollateral : 0;\n        totalUsedCollateral =\n            vars.workingBorrowOrdersAmount +\n            vars.debtAmount +\n            unsettledBorrowOrdersAmountInETH;\n        totalActualCollateral = actualPlusCollateral >= minusCollateral\n            ? actualPlusCollateral - minusCollateral\n            : 0;\n    }\n\n    /**\n     * @notice Calculates maximum amount of ETH that can be withdrawn.\n     * @param _user User's address\n     * @return Maximum amount of ETH that can be withdrawn\n     */\n    function _getWithdrawableCollateral(address _user) internal view returns (uint256) {\n        (\n            uint256 totalCollateral,\n            uint256 totalUsedCollateral,\n            uint256 totalActualCollateral\n        ) = _getActualCollateralAmount(_user);\n\n        if (totalUsedCollateral == 0) {\n            return totalActualCollateral;\n        } else if (\n            totalCollateral * ProtocolTypes.PRICE_DIGIT >\n            totalUsedCollateral * CollateralParametersHandler.liquidationThresholdRate()\n        ) {\n            // NOTE: The formula is:\n            // maxWithdraw = totalCollateral - ((totalUsedCollateral) * marginCallThresholdRate).\n            uint256 maxWithdraw = (totalCollateral *\n                ProtocolTypes.PRICE_DIGIT -\n                (totalUsedCollateral) *\n                CollateralParametersHandler.liquidationThresholdRate()) / ProtocolTypes.PRICE_DIGIT;\n            return maxWithdraw >= totalActualCollateral ? totalActualCollateral : maxWithdraw;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * @notice Gets the total of amount deposited in the user's collateral of all currencies\n     *  in this contract by converting it to ETH.\n     * @param _user Address of collateral user\n     * @return totalDepositAmount The total deposited amount in ETH\n     */\n    function _getTotalInternalDepositAmountInETH(address _user)\n        internal\n        view\n        returns (uint256 totalDepositAmount)\n    {\n        EnumerableSet.Bytes32Set storage currencies = Storage.slot().usedCurrencies[_user];\n        uint256 len = currencies.length();\n\n        for (uint256 i = 0; i < len; i++) {\n            bytes32 ccy = currencies.at(i);\n            if (isCollateral(ccy)) {\n                uint256 depositAmount = Storage.slot().depositAmounts[_user][ccy];\n                totalDepositAmount += currencyController().convertToETH(ccy, depositAmount);\n            }\n        }\n\n        return totalDepositAmount;\n    }\n\n    function _updateUsedCurrencies(address _user, bytes32 _ccy) internal {\n        if (Storage.slot().depositAmounts[_user][_ccy] > 0) {\n            Storage.slot().usedCurrencies[_user].add(_ccy);\n        } else {\n            Storage.slot().usedCurrencies[_user].remove(_ccy);\n        }\n    }\n\n    function _deposit(\n        address _user,\n        bytes32 _ccy,\n        uint256 _amount\n    ) internal {\n        require(_amount > 0, \"Invalid amount\");\n        ERC20Handler.depositAssets(\n            Storage.slot().tokenAddresses[_ccy],\n            _user,\n            address(this),\n            _amount\n        );\n\n        Storage.slot().depositAmounts[_user][_ccy] += _amount;\n\n        _updateUsedCurrencies(_user, _ccy);\n\n        emit Deposit(_user, _ccy, _amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Quoter Interface\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\ninterface IQuoter {\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountIn The amount of the first token to swap\n    /// @return amountOut The amount of the last token that would be received\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\n\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n    /// @param tokenIn The token being swapped in\n    /// @param tokenOut The token being swapped out\n    /// @param fee The fee of the token pool to consider for the pair\n    /// @param amountIn The desired input amount\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountOut The amount of `tokenOut` that would be received\n    function quoteExactInputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountIn,\n        uint160 sqrtPriceLimitX96\n    ) external returns (uint256 amountOut);\n\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n    /// @param amountOut The amount of the last token to receive\n    /// @return amountIn The amount of first token required to be paid\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\n\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n    /// @param tokenIn The token being swapped in\n    /// @param tokenOut The token being swapped out\n    /// @param fee The fee of the token pool to consider for the pair\n    /// @param amountOut The desired output amount\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\n    function quoteExactOutputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountOut,\n        uint160 sqrtPriceLimitX96\n    ) external returns (uint256 amountIn);\n}\n"
    },
    "contracts/libraries/Contracts.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nlibrary Contracts {\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \"BeaconProxyController\";\n    bytes32 internal constant CURRENCY_CONTROLLER = \"CurrencyController\";\n    bytes32 internal constant GENESIS_VALUE_VAULT = \"GenesisValueVault\";\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \"LendingMarketController\";\n    bytes32 internal constant TOKEN_VAULT = \"TokenVault\";\n}\n\nlibrary BeaconContracts {\n    bytes32 internal constant FUTURE_VALUE_VAULT = \"FutureValueVault\";\n    bytes32 internal constant LENDING_MARKET = \"LendingMarket\";\n}\n"
    },
    "contracts/libraries/CollateralParametersHandler.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {ISwapRouter} from \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\nimport {CollateralParametersStorage as Storage} from \"../storages/CollateralParametersStorage.sol\";\n\n/**\n * @notice CollateralParametersHandler is an library to handle the parameters fro TokenVault contract.\n *\n * This manage the main collateral parameters like Margin Call ratio, Auto-Liquidation level,\n * Liquidation price, and Minimal collateral ratio.\n *\n */\nlibrary CollateralParametersHandler {\n    event UpdateAutoLiquidationThresholdRate(uint256 previousRatio, uint256 ratio);\n    event UpdateUniswapRouter(address previousUniswapRouter, address uniswapRouter);\n\n    /**\n     * @dev Gets liquidation threshold rate\n     */\n    function liquidationThresholdRate() internal view returns (uint256) {\n        return Storage.slot().liquidationThresholdRate;\n    }\n\n    /**\n     * @dev Gets Uniswap Router contract address\n     */\n    function uniswapRouter() internal view returns (ISwapRouter) {\n        return Storage.slot().uniswapRouter;\n    }\n\n    /**\n     * @dev Sets main collateral parameters this function\n     * solves the issue of frontrunning during parameters tuning\n     *\n     * @param _liquidationThresholdRate Auto liquidation threshold rate\n     * @param _uniswapRouter Uniswap router contract address\n     * @notice Triggers only be contract owner\n     */\n    function setCollateralParameters(uint256 _liquidationThresholdRate, address _uniswapRouter)\n        internal\n    {\n        if (_liquidationThresholdRate != Storage.slot().liquidationThresholdRate) {\n            _updateAutoLiquidationThresholdRate(_liquidationThresholdRate);\n        }\n\n        if (_uniswapRouter != address(Storage.slot().uniswapRouter)) {\n            _updateUniswapRouter(_uniswapRouter);\n        }\n    }\n\n    function _updateAutoLiquidationThresholdRate(uint256 _rate) private {\n        require(_rate > 0, \"Rate is zero\");\n\n        emit UpdateAutoLiquidationThresholdRate(Storage.slot().liquidationThresholdRate, _rate);\n        Storage.slot().liquidationThresholdRate = _rate;\n    }\n\n    function _updateUniswapRouter(address _uniswapRouter) private {\n        require(_uniswapRouter != address(0), \"Invalid Uniswap Router\");\n\n        emit UpdateUniswapRouter(address(Storage.slot().uniswapRouter), _uniswapRouter);\n        Storage.slot().uniswapRouter = ISwapRouter(_uniswapRouter);\n    }\n}\n"
    },
    "contracts/libraries/ERC20Handler.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {IWETH9} from \"../interfaces/IWETH9.sol\";\nimport {ERC20Storage as Storage} from \"../storages/ERC20Storage.sol\";\n\nlibrary ERC20Handler {\n    function initialize(address _weth) internal {\n        require(Storage.slot().weth == address(0), \"Already initialized\");\n        Storage.slot().weth = _weth;\n    }\n\n    function weth() internal view returns (address) {\n        return Storage.slot().weth;\n    }\n\n    function depositAssets(\n        address _token,\n        address _payer,\n        address _receiver,\n        uint256 _amount\n    ) internal {\n        if (address(_token) == Storage.slot().weth) {\n            wrapWETH(_receiver, _amount);\n        } else {\n            safeTransferFrom(_token, _payer, _receiver, _amount);\n        }\n    }\n\n    function withdrawAssets(\n        address _token,\n        address _receiver,\n        uint256 _amount\n    ) internal {\n        if (address(_token) == Storage.slot().weth) {\n            unwrapWETH(_receiver, _amount);\n        } else {\n            safeTransfer(_token, _receiver, _amount);\n        }\n    }\n\n    function wrapWETH(address _receiver, uint256 _amount) internal {\n        require(address(this).balance >= _amount, \"Insufficient ETH\");\n\n        IWETH9(Storage.slot().weth).deposit{value: _amount}();\n        IWETH9(Storage.slot().weth).transfer(_receiver, _amount);\n    }\n\n    function unwrapWETH(address _receiver, uint256 _amount) internal {\n        uint256 balanceWETH9 = IWETH9(Storage.slot().weth).balanceOf(address(this));\n        require(balanceWETH9 >= _amount, \"Insufficient WETH\");\n\n        if (balanceWETH9 > 0) {\n            IWETH9(Storage.slot().weth).withdraw(_amount);\n            safeTransferETH(_receiver, _amount);\n        }\n    }\n\n    /// @dev Transfer helper from UniswapV2 Router\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x095ea7b3, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: APPROVE_FAILED\"\n        );\n    }\n\n    /**\n     * There are many non-compliant ERC20 tokens... this can handle most, adapted from UniSwap V2\n     * Im trying to make it a habit to put external calls last (reentrancy)\n     * You can put this in an internal function if you like.\n     */\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 amount\n    ) internal {\n        // solium-disable-next-line security/no-low-level-calls\n        (bool success, bytes memory data) = token.call(\n            // 0xa9059cbb = bytes4(keccak256(\"transfer(address,uint256)\"))\n            abi.encodeWithSelector(0xa9059cbb, to, amount)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\n        ); // ERC20 Transfer failed\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\n    }\n}\n"
    },
    "contracts/interfaces/ITokenVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {ProtocolTypes} from \"../types/ProtocolTypes.sol\";\n\ninterface ITokenVault {\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount);\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\n    event RegisterCurrency(bytes32 ccy, address tokenAddress, bool isCollateral);\n    event UpdateCurrency(bytes32 ccy, bool isCollateral);\n    event Swap(\n        address indexed user,\n        bytes32 ccyIn,\n        bytes32 ccyOut,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n\n    function isCovered(\n        address user,\n        bytes32 ccy,\n        uint256 unsettledExp,\n        ProtocolTypes.Side unsettledOrderSide\n    ) external view returns (bool);\n\n    function isCovered(address user) external view returns (bool);\n\n    function isCollateral(bytes32 _ccy) external view returns (bool);\n\n    function isCollateral(bytes32[] calldata _ccys)\n        external\n        view\n        returns (bool[] memory isCollateralCurrencies);\n\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\n\n    function getTokenAddress(bytes32 ccy) external view returns (address);\n\n    function getCollateralCurrencies() external view returns (bytes32[] memory);\n\n    function getWithdrawableCollateral(address user) external view returns (uint256 maxWithdraw);\n\n    function getCoverage(address user) external view returns (uint256 coverage);\n\n    function getUnusedCollateral(address user) external view returns (uint256);\n\n    function getTotalCollateralAmount(address party) external view returns (uint256);\n\n    function getLiquidationAmount(address user) external view returns (uint256);\n\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\n\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\n\n    function getLiquidationThresholdRate() external view returns (uint256 liquidationThresholdRate);\n\n    function getUniswapRouter() external view returns (address uniswapRouter);\n\n    function setCollateralParameters(uint256 liquidationThresholdRate, address uniswapRouter)\n        external;\n\n    function deposit(bytes32 ccy, uint256 amount) external payable;\n\n    function depositFrom(\n        address user,\n        bytes32 ccy,\n        uint256 amount\n    ) external payable;\n\n    function withdraw(bytes32 ccy, uint256 amount) external;\n\n    function addDepositAmount(\n        address user,\n        bytes32 ccy,\n        uint256 amount\n    ) external;\n\n    function removeDepositAmount(\n        address user,\n        bytes32 ccy,\n        uint256 amount\n    ) external;\n\n    function swapDepositAmounts(\n        address user,\n        bytes32 ccyFrom,\n        bytes32 ccyTo,\n        uint256 amountOut,\n        uint24 poolFee\n    ) external returns (uint256 amountIn);\n}\n"
    },
    "contracts/mixins/MixinAddressResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {AddressResolverLib} from \"../libraries/AddressResolverLib.sol\";\nimport {IAddressResolver} from \"../interfaces/IAddressResolver.sol\";\nimport {IBeaconProxyController} from \"../interfaces/IBeaconProxyController.sol\";\nimport {ICurrencyController} from \"../interfaces/ICurrencyController.sol\";\nimport {IGenesisValueVault} from \"../interfaces/IGenesisValueVault.sol\";\nimport {ILendingMarketController} from \"../interfaces/ILendingMarketController.sol\";\nimport {ITokenVault} from \"../interfaces/ITokenVault.sol\";\nimport {MixinAddressResolverStorage as Storage} from \"../storages/MixinAddressResolverStorage.sol\";\n\ncontract MixinAddressResolver {\n    event CacheUpdated(bytes32 name, address destination);\n\n    modifier onlyAcceptedContracts() {\n        require(isAcceptedContract(msg.sender), \"Only Accepted Contracts\");\n        _;\n    }\n\n    /**\n     * @notice Returns the contract names used in this contract.\n     * @dev The contract name list is in `./libraries/Contracts.sol`.\n     */\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\n\n    /**\n     * @notice Returns contract names that can call this contract.\n     * @dev The contact name listed in this method is also needed to be listed `requiredContracts` method.\n     */\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\n\n    function buildCache() public {\n        // The resolver must call this function whenever it updates its state\n        bytes32[] memory contractNames = requiredContracts();\n        for (uint256 i = 0; i < contractNames.length; i++) {\n            bytes32 name = contractNames[i];\n            // Note: can only be invoked once the resolver has all the targets needed added\n            address destination = Storage.slot().resolver.getAddress(\n                name,\n                string(abi.encodePacked(\"Resolver missing target: \", name))\n            );\n            Storage.slot().addressCache[name] = destination;\n            emit CacheUpdated(name, destination);\n        }\n    }\n\n    function isResolverCached() external view returns (bool) {\n        bytes32[] memory contractNames = requiredContracts();\n        for (uint256 i = 0; i < contractNames.length; i++) {\n            bytes32 name = contractNames[i];\n            // false if our cache is invalid or if the resolver doesn't have the required address\n            if (\n                Storage.slot().resolver.getAddress(name) != Storage.slot().addressCache[name] ||\n                Storage.slot().addressCache[name] == address(0)\n            ) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Register the Address Resolver contract\n     * @param _resolver The address of the Address Resolver contract\n     */\n    function registerAddressResolver(address _resolver) internal {\n        require(address(Storage.slot().resolver) == address(0), \"resolver registered already\");\n        Storage.slot().resolver = IAddressResolver(_resolver);\n    }\n\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\n        bytes32[] memory contractNames = acceptedContracts();\n        for (uint256 i = 0; i < contractNames.length; i++) {\n            if (account == getAddress(contractNames[i])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    function getAddress(bytes32 name) internal view returns (address) {\n        return AddressResolverLib.getAddress(name);\n    }\n\n    function resolver() public view returns (IAddressResolver) {\n        return Storage.slot().resolver;\n    }\n\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\n        return AddressResolverLib.beaconProxyController();\n    }\n\n    function currencyController() internal view returns (ICurrencyController) {\n        return AddressResolverLib.currencyController();\n    }\n\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\n        return AddressResolverLib.genesisValueVault();\n    }\n\n    function lendingMarketController() internal view returns (ILendingMarketController) {\n        return AddressResolverLib.lendingMarketController();\n    }\n\n    function tokenVault() internal view returns (ITokenVault) {\n        return AddressResolverLib.tokenVault();\n    }\n}\n"
    },
    "contracts/types/ProtocolTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/**\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\n * @author Secured Finance\n */\nlibrary ProtocolTypes {\n    // Constant values\n    uint256 public constant PRICE_DIGIT = 10000; // price digit in the basis (10000 -> 1)\n    uint256 public constant PCT_DIGIT = 10000; // percentage digit in the basis (10000 -> 100%)\n\n    uint256 internal constant DAYS_IN_YEAR = 365;\n    uint256 internal constant SECONDS_IN_YEAR = 31557600;\n\n    // Lending market common types\n    enum Side {\n        LEND,\n        BORROW\n    }\n    enum Ccy {\n        ETH,\n        FIL,\n        USDC,\n        BTC\n    }\n\n    // Collateral common types\n    enum CollateralState {\n        EMPTY,\n        AVAILABLE,\n        IN_USE,\n        MARGIN_CALL,\n        LIQUIDATION_IN_PROGRESS,\n        LIQUIDATION\n    }\n}\n"
    },
    "contracts/storages/TokenVaultStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nlibrary TokenVaultStorage {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"sf.storage.tokenVault\");\n\n    struct Storage {\n        // Currencies accepted as collateral\n        EnumerableSet.Bytes32Set collateralCurrencies;\n        // Mapping from currency name to token address\n        mapping(bytes32 => address) tokenAddresses;\n        // Mapping for used currency vaults per user.\n        mapping(address => EnumerableSet.Bytes32Set) usedCurrencies;\n        // Mapping for all deposits per users\n        mapping(address => mapping(bytes32 => uint256)) depositAmounts;\n        // Mapping from user to total escrowed amount per currency\n        mapping(address => mapping(bytes32 => uint256)) escrowedAmount;\n    }\n\n    function slot() internal pure returns (Storage storage r) {\n        bytes32 _slot = STORAGE_SLOT;\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := _slot\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/storages/CollateralParametersStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {ISwapRouter} from \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\n\nlibrary CollateralParametersStorage {\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"sf.storage.collateralParameters\");\n\n    struct Storage {\n        // liquidation threshold rate in basis point\n        uint256 liquidationThresholdRate;\n        //  Uniswap router contract\n        ISwapRouter uniswapRouter;\n    }\n\n    function slot() internal pure returns (Storage storage r) {\n        bytes32 _slot = STORAGE_SLOT;\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := _slot\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IWETH9.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWETH9 is IERC20 {\n    event Deposit(address user, uint256 amount);\n    event Withdrawal(address user, uint256 amount);\n\n    function deposit() external payable;\n\n    function withdraw(uint256 amount) external;\n}\n"
    },
    "contracts/storages/ERC20Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nlibrary ERC20Storage {\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"sf.storage.erc20\");\n\n    struct Storage {\n        address weth;\n    }\n\n    function slot() internal pure returns (Storage storage r) {\n        bytes32 _slot = STORAGE_SLOT;\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := _slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/libraries/AddressResolverLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {Contracts} from \"../libraries/Contracts.sol\";\nimport {IBeaconProxyController} from \"../interfaces/IBeaconProxyController.sol\";\nimport {ICurrencyController} from \"../interfaces/ICurrencyController.sol\";\nimport {IGenesisValueVault} from \"../interfaces/IGenesisValueVault.sol\";\nimport {ILendingMarketController} from \"../interfaces/ILendingMarketController.sol\";\nimport {ITokenVault} from \"../interfaces/ITokenVault.sol\";\nimport {MixinAddressResolverStorage as Storage} from \"../storages/MixinAddressResolverStorage.sol\";\n\nlibrary AddressResolverLib {\n    function getAddress(bytes32 name) internal view returns (address) {\n        address _foundAddress = Storage.slot().addressCache[name];\n        require(_foundAddress != address(0), string(abi.encodePacked(\"Missing address: \", name)));\n        return _foundAddress;\n    }\n\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\n    }\n\n    function currencyController() internal view returns (ICurrencyController) {\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\n    }\n\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\n    }\n\n    function lendingMarketController() internal view returns (ILendingMarketController) {\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\n    }\n\n    function tokenVault() internal view returns (ITokenVault) {\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\n    }\n}\n"
    },
    "contracts/interfaces/IBeaconProxyController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IBeaconProxyController {\n    event BeaconProxyCreated(\n        bytes32 indexed id,\n        address indexed proxyAddress,\n        address indexed implementationAddress\n    );\n\n    event BeaconProxyUpdated(\n        bytes32 indexed id,\n        address indexed proxyAddress,\n        address indexed newImplementationAddress,\n        address oldImplementationAddress\n    );\n\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\n\n    function setFutureValueVaultImpl(address newImpl) external;\n\n    function setLendingMarketImpl(address newImpl) external;\n\n    function deployFutureValueVault() external returns (address futureValueVault);\n\n    function deployLendingMarket(\n        bytes32 _ccy,\n        uint256 _genesisDate,\n        uint256 _maturity\n    ) external returns (address market);\n}\n"
    },
    "contracts/interfaces/ICurrencyController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {Currency} from \"../storages/CurrencyControllerStorage.sol\";\n\n/**\n * @dev Currency Controller contract is responsible for managing supported\n * currencies in Secured Finance Protocol\n *\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\n * contract owner is not able to add a new currency into the protocol\n */\ninterface ICurrencyController {\n    event AddCurrency(bytes32 indexed ccy, uint256 haircut);\n    event RemoveCurrency(bytes32 indexed ccy);\n\n    event UpdateHaircut(bytes32 indexed ccy, uint256 haircut);\n\n    event AddPriceFeed(bytes32 ccy, string secondCcy, address indexed priceFeed);\n    event RemovePriceFeed(bytes32 ccy, string secondCcy, address indexed priceFeed);\n\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH)\n        external\n        view\n        returns (uint256 amount);\n\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256 amount);\n\n    function convertToETH(bytes32 _ccy, int256 _amount) external view returns (int256 amount);\n\n    function convertToETH(bytes32 _ccy, uint256[] memory _amounts)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getEthDecimals(bytes32) external view returns (uint8);\n\n    function getUsdDecimals(bytes32) external view returns (uint8);\n\n    function getCurrencies() external view returns (bytes32[] memory);\n\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\n\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\n\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\n\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\n\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\n\n    function currencyExists(bytes32 _ccy) external view returns (bool);\n\n    function linkPriceFeed(\n        bytes32 _ccy,\n        address _priceFeedAddr,\n        bool _isEthPriceFeed\n    ) external returns (bool);\n\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\n\n    function addCurrency(\n        bytes32 _ccy,\n        address _ethPriceFeed,\n        uint256 _haircut\n    ) external;\n\n    function updateHaircut(bytes32 _ccy, uint256 _haircut) external;\n\n    function removeCurrency(bytes32 _ccy) external;\n}\n"
    },
    "contracts/interfaces/IGenesisValueVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {MaturityUnitPrice} from \"../storages/GenesisValueVaultStorage.sol\";\n\ninterface IGenesisValueVault {\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\n    event CompoundFactorUpdated(\n        bytes32 indexed ccy,\n        uint256 compoundFactor,\n        uint256 unitPrice,\n        uint256 currentMaturity,\n        uint256 previousMaturity\n    );\n\n    function isInitialized(bytes32 ccy) external view returns (bool);\n\n    function decimals(bytes32 ccy) external view returns (uint8);\n\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\n\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\n\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256);\n\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\n\n    function getCompoundFactor(bytes32 ccy) external view returns (uint256);\n\n    function getMaturityUnitPrice(bytes32 ccy, uint256 maturity)\n        external\n        view\n        returns (MaturityUnitPrice memory);\n\n    function getGenesisValueInFutureValue(bytes32 ccy, address user) external view returns (int256);\n\n    function calculateCurrentFVFromFVInMaturity(\n        bytes32 _ccy,\n        uint256 _basisMaturity,\n        int256 _futureValue\n    ) external view returns (int256);\n\n    function calculateGVFromFV(\n        bytes32 ccy,\n        uint256 basisMaturity,\n        int256 futureValue\n    ) external view returns (int256);\n\n    function calculateFVFromGV(\n        bytes32 ccy,\n        uint256 basisMaturity,\n        int256 genesisValue\n    ) external view returns (int256);\n\n    function initialize(\n        bytes32 ccy,\n        uint8 decimals,\n        uint256 compoundFactor\n    ) external;\n\n    function updateCompoundFactor(\n        bytes32 ccy,\n        uint256 maturity,\n        uint256 nextMaturity,\n        uint256 unitPrice\n    ) external;\n\n    function addGenesisValue(\n        bytes32 ccy,\n        address user,\n        uint256 basisMaturity,\n        int256 futureValue\n    ) external returns (bool);\n}\n"
    },
    "contracts/interfaces/ILendingMarketController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../types/ProtocolTypes.sol\";\n\ninterface ILendingMarketController {\n    event CreateLendingMarket(\n        bytes32 indexed ccy,\n        address indexed marketAddr,\n        address futureValueVault,\n        uint256 index,\n        uint256 maturity\n    );\n    event RotateLendingMarkets(bytes32 ccy, uint256 oldMaturity, uint256 newMaturity);\n    event FillOrder(\n        address indexed taker,\n        bytes32 indexed ccy,\n        ProtocolTypes.Side side,\n        uint256 indexed maturity,\n        uint256 amount,\n        uint256 unitPrice,\n        uint256 filledFutureValue\n    );\n    event FillOrdersAsync(\n        address indexed taker,\n        bytes32 indexed ccy,\n        ProtocolTypes.Side side,\n        uint256 indexed maturity,\n        uint256 filledFutureValue\n    );\n    event CancelOrder(\n        uint48 orderId,\n        address indexed maker,\n        bytes32 indexed ccy,\n        ProtocolTypes.Side side,\n        uint256 maturity,\n        uint256 amount,\n        uint256 unitPrice\n    );\n    event Liquidate(\n        address indexed user,\n        bytes32 collateralCcy,\n        bytes32 indexed debtCcy,\n        uint256 indexed debtMaturity,\n        uint256 amount\n    );\n\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\n\n    function getLendingMarkets(bytes32 ccy) external view returns (address[] memory);\n\n    function getLendingMarket(bytes32 ccy, uint256 maturity) external view returns (address);\n\n    function getFutureValueVault(bytes32 ccy, uint256 maturity) external view returns (address);\n\n    function getBorrowUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\n\n    function getLendUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\n\n    function getMidUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\n\n    function getBorrowOrderBook(\n        bytes32 ccy,\n        uint256 maturity,\n        uint256 limit\n    )\n        external\n        view\n        returns (\n            uint256[] memory unitPrices,\n            uint256[] memory amounts,\n            uint256[] memory quantities\n        );\n\n    function getLendOrderBook(\n        bytes32 ccy,\n        uint256 maturity,\n        uint256 limit\n    )\n        external\n        view\n        returns (\n            uint256[] memory unitPrices,\n            uint256[] memory amounts,\n            uint256[] memory quantities\n        );\n\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\n\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\n\n    function getFutureValue(\n        bytes32 ccy,\n        uint256 maturity,\n        address user\n    ) external view returns (int256 futureValue);\n\n    function getPresentValue(\n        bytes32 ccy,\n        uint256 maturity,\n        address user\n    ) external view returns (int256 presentValue);\n\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\n\n    function getTotalPresentValueInETH(address user)\n        external\n        view\n        returns (int256 totalPresentValue);\n\n    function calculateLentFundsFromOrders(bytes32 ccy, address user)\n        external\n        view\n        returns (\n            uint256 workingOrdersAmount,\n            uint256 claimableAmount,\n            uint256 lentAmount\n        );\n\n    function calculateBorrowedFundsFromOrders(bytes32 ccy, address user)\n        external\n        view\n        returns (\n            uint256 workingOrdersAmount,\n            uint256 debtAmount,\n            uint256 borrowedAmount\n        );\n\n    function calculateFunds(bytes32 ccy, address user)\n        external\n        view\n        returns (\n            uint256 workingLendOrdersAmount,\n            uint256 claimableAmount,\n            uint256 collateralAmount,\n            uint256 lentAmount,\n            uint256 workingBorrowOrdersAmount,\n            uint256 debtAmount,\n            uint256 borrowedAmount\n        );\n\n    function calculateTotalFundsInETH(\n        address user,\n        bytes32 depositCcy,\n        uint256 depositAmount\n    )\n        external\n        view\n        returns (\n            uint256 totalWorkingLendOrdersAmount,\n            uint256 totalClaimableAmount,\n            uint256 totalCollateralAmount,\n            uint256 totalLentAmount,\n            uint256 totalWorkingBorrowOrdersAmount,\n            uint256 totalDebtAmount,\n            uint256 totalBorrowedAmount,\n            bool isEnoughDeposit\n        );\n\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\n\n    function initializeLendingMarket(\n        bytes32 ccy,\n        uint256 genesisDate,\n        uint256 compoundFactor\n    ) external;\n\n    function createLendingMarket(bytes32 ccy)\n        external\n        returns (address market, address futureValue);\n\n    function createOrder(\n        bytes32 ccy,\n        uint256 maturity,\n        ProtocolTypes.Side side,\n        uint256 amount,\n        uint256 unitPrice\n    ) external returns (bool);\n\n    function depositAndCreateOrder(\n        bytes32 ccy,\n        uint256 maturity,\n        ProtocolTypes.Side side,\n        uint256 amount,\n        uint256 unitPrice\n    ) external returns (bool);\n\n    function createLendOrderWithETH(\n        bytes32 ccy,\n        uint256 maturity,\n        uint256 unitPrice\n    ) external payable returns (bool);\n\n    function depositAndCreateLendOrderWithETH(\n        bytes32 ccy,\n        uint256 maturity,\n        uint256 unitPrice\n    ) external payable returns (bool);\n\n    function cancelOrder(\n        bytes32 ccy,\n        uint256 maturity,\n        uint48 orderId\n    ) external returns (bool);\n\n    function rotateLendingMarkets(bytes32 ccy) external;\n\n    function pauseLendingMarkets(bytes32 ccy) external returns (bool);\n\n    function unpauseLendingMarkets(bytes32 ccy) external returns (bool);\n\n    function cleanAllOrders(address user) external;\n\n    function cleanOrders(bytes32 ccy, address user) external returns (uint256 activeOrderCount);\n}\n"
    },
    "contracts/storages/MixinAddressResolverStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {IAddressResolver} from \"../interfaces/IAddressResolver.sol\";\n\nlibrary MixinAddressResolverStorage {\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"sf.storage.mixinAddressResolver\");\n\n    struct Storage {\n        IAddressResolver resolver;\n        mapping(bytes32 => address) addressCache;\n    }\n\n    function slot() internal pure returns (Storage storage r) {\n        bytes32 _slot = STORAGE_SLOT;\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := _slot\n        }\n    }\n}\n"
    },
    "contracts/storages/CurrencyControllerStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nstruct Currency {\n    bool isSupported;\n    string name;\n}\n\nlibrary CurrencyControllerStorage {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"sf.storage.currencyController\");\n\n    struct Storage {\n        // Protocol currencies\n        EnumerableSet.Bytes32Set currencies;\n        mapping(bytes32 => uint256) haircuts;\n        // PriceFeed\n        mapping(bytes32 => AggregatorV3Interface) usdPriceFeeds;\n        mapping(bytes32 => AggregatorV3Interface) ethPriceFeeds;\n        mapping(bytes32 => uint8) usdDecimals;\n        mapping(bytes32 => uint8) ethDecimals;\n    }\n\n    function slot() internal pure returns (Storage storage r) {\n        bytes32 _slot = STORAGE_SLOT;\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := _slot\n        }\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/storages/GenesisValueVaultStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nstruct MaturityUnitPrice {\n    uint256 unitPrice;\n    uint256 compoundFactor;\n    uint256 next;\n    uint256 prev;\n}\n\nlibrary GenesisValueVaultStorage {\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"sf.storage.genesisValueVault\");\n\n    struct Storage {\n        mapping(bytes32 => bool) isInitialized;\n        mapping(bytes32 => uint256) initialCompoundFactors;\n        mapping(bytes32 => uint256) compoundFactors;\n        mapping(bytes32 => uint256) currentMaturity;\n        mapping(bytes32 => uint8) decimals;\n        // Mapping from user to balance per currency\n        mapping(bytes32 => mapping(address => int256)) balances;\n        mapping(bytes32 => uint256) totalLendingSupplies;\n        mapping(bytes32 => uint256) totalBorrowingSupplies;\n        // Mapping from maturity to rate per currency\n        mapping(bytes32 => mapping(uint256 => MaturityUnitPrice)) maturityUnitPrices;\n    }\n\n    function slot() internal pure returns (Storage storage r) {\n        bytes32 _slot = STORAGE_SLOT;\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := _slot\n        }\n    }\n}\n"
    },
    "contracts/storages/LendingMarketControllerStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nlibrary LendingMarketControllerStorage {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"sf.storage.lendingMarketController\");\n\n    struct Storage {\n        // Mapping from currency to lending market contract addresses\n        mapping(bytes32 => address[]) lendingMarkets;\n        // Mapping from lending market contract address to future value vault contract address per currency\n        mapping(bytes32 => mapping(address => address)) futureValueVaults;\n        // Mapping from maturity to lending market contract address per currency\n        mapping(bytes32 => mapping(uint256 => address)) maturityLendingMarkets;\n        // Mapping from currency to genesis date in the lending market\n        mapping(bytes32 => uint256) genesisDates;\n        // Mapping from user to used currency\n        mapping(address => EnumerableSet.Bytes32Set) usedCurrencies;\n        // Mapping from user to active order existence per currency and maturity\n        mapping(address => mapping(bytes32 => mapping(uint256 => bool))) activeOrderExistences;\n    }\n\n    function slot() internal pure returns (Storage storage r) {\n        bytes32 _slot = STORAGE_SLOT;\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := _slot\n        }\n    }\n}\n"
    },
    "contracts/libraries/FundCalculationLogic.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n// interfaces\nimport {ILendingMarket} from \"../interfaces/ILendingMarket.sol\";\nimport {IFutureValueVault} from \"../interfaces/IFutureValueVault.sol\";\n// libraries\nimport {AddressResolverLib} from \"./AddressResolverLib.sol\";\n// types\nimport {ProtocolTypes} from \"../types/ProtocolTypes.sol\";\n// storages\nimport {LendingMarketControllerStorage as Storage} from \"../storages/LendingMarketControllerStorage.sol\";\n\nlibrary FundCalculationLogic {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    struct CalculatedAmountVars {\n        uint256 debtFVAmount;\n        uint256 debtPVAmount;\n        uint256 estimatedDebtPVAmount;\n        uint256 liquidationPVAmount;\n    }\n\n    struct CalculatedTotalFundInETHVars {\n        bool[] isCollateral;\n        bytes32 ccy;\n        uint256[] amounts;\n        uint256[] amountsInETH;\n        uint256 plusDepositAmount;\n        uint256 minusDepositAmount;\n    }\n\n    function convertToLiquidationAmountFromCollateral(\n        bytes32 _collateralCcy,\n        bytes32 _debtCcy,\n        uint256 _debtMaturity,\n        uint256 _liquidationAmountMax,\n        address _user,\n        uint24 _poolFee\n    ) public returns (uint256) {\n        CalculatedAmountVars memory vars;\n\n        uint256 liquidationPVAmountInETH = AddressResolverLib.tokenVault().getLiquidationAmount(\n            _user\n        );\n        require(liquidationPVAmountInETH != 0, \"User has enough collateral\");\n\n        int256 futureValueAmount = calculateActualFutureValue(_debtCcy, _debtMaturity, _user);\n        require(futureValueAmount < 0, \"No debt in the selected maturity\");\n\n        vars.debtFVAmount = uint256(-futureValueAmount);\n        vars.debtPVAmount = uint256(\n            _calculatePVFromFVInMaturity(\n                _debtCcy,\n                _debtMaturity,\n                -futureValueAmount,\n                Storage.slot().maturityLendingMarkets[_debtCcy][_debtMaturity]\n            )\n        );\n\n        vars.liquidationPVAmount = AddressResolverLib.currencyController().convertFromETH(\n            _debtCcy,\n            liquidationPVAmountInETH\n        );\n\n        // If the debt amount is less than the liquidation amount, the debt amount is used as the liquidation amount.\n        // In that case, the actual liquidation ratio is under the liquidation threshold ratio.\n        vars.liquidationPVAmount = vars.liquidationPVAmount > vars.debtPVAmount\n            ? vars.debtPVAmount\n            : vars.liquidationPVAmount;\n        vars.liquidationPVAmount = _liquidationAmountMax > vars.liquidationPVAmount ||\n            _liquidationAmountMax == 0\n            ? vars.liquidationPVAmount\n            : _liquidationAmountMax;\n\n        // Swap collateral from deposited currency to debt currency using Uniswap.\n        // This swapped collateral is used to unwind the debt.\n        AddressResolverLib.tokenVault().swapDepositAmounts(\n            _user,\n            _collateralCcy,\n            _debtCcy,\n            vars.liquidationPVAmount,\n            _poolFee\n        );\n\n        // Estimate the filled amount from actual orders in the order book using the future value of user debt.\n        // If the estimated amount is less than the liquidation amount, the estimated amount is used as\n        // the liquidation amount because the user has only the original amount of the estimation as collateral.\n        vars.estimatedDebtPVAmount = ILendingMarket(\n            Storage.slot().maturityLendingMarkets[_debtCcy][_debtMaturity]\n        ).estimateFilledAmount(ProtocolTypes.Side.LEND, vars.debtFVAmount);\n\n        return\n            vars.liquidationPVAmount > vars.estimatedDebtPVAmount\n                ? vars.estimatedDebtPVAmount\n                : vars.liquidationPVAmount;\n    }\n\n    function calculateActualFutureValue(\n        bytes32 _ccy,\n        uint256 _maturity,\n        address _user\n    ) public view returns (int256 futureValue) {\n        address market = Storage.slot().maturityLendingMarkets[_ccy][_maturity];\n        bool isDefaultMarket = market == Storage.slot().lendingMarkets[_ccy][0];\n\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\n            address currentMarket = Storage.slot().lendingMarkets[_ccy][i];\n            uint256 currentMaturity = ILendingMarket(currentMarket).getMaturity();\n\n            if (isDefaultMarket || currentMarket == market) {\n                // Get FV from Future Value Vault\n                (int256 futureValueInMaturity, uint256 fvMaturity) = IFutureValueVault(\n                    Storage.slot().futureValueVaults[_ccy][currentMarket]\n                ).getFutureValue(_user);\n\n                if (\n                    (isDefaultMarket && (i == 0 || currentMaturity != fvMaturity)) ||\n                    (!isDefaultMarket && currentMaturity == fvMaturity)\n                ) {\n                    futureValue += _calculateCurrentFVFromFVInMaturity(\n                        _ccy,\n                        fvMaturity,\n                        futureValueInMaturity,\n                        currentMarket\n                    );\n                }\n\n                // Get FV from inactive borrow orders\n                (, , uint256 borrowFVInMaturity, uint256 borrowOrdersMaturity) = ILendingMarket(\n                    currentMarket\n                ).getTotalAmountFromBorrowOrders(_user);\n\n                if (\n                    (isDefaultMarket && (i == 0 || currentMaturity != borrowOrdersMaturity)) ||\n                    (!isDefaultMarket && currentMaturity == borrowOrdersMaturity)\n                ) {\n                    futureValue -= _calculateCurrentFVFromFVInMaturity(\n                        _ccy,\n                        borrowOrdersMaturity,\n                        int256(borrowFVInMaturity),\n                        currentMarket\n                    );\n                }\n\n                // Get FV from inactive lend orders\n                (, , uint256 lendFVInMaturity, uint256 lendOrdersMaturity) = ILendingMarket(\n                    currentMarket\n                ).getTotalAmountFromLendOrders(_user);\n\n                if (\n                    (isDefaultMarket && (i == 0 || currentMaturity != lendOrdersMaturity)) ||\n                    (!isDefaultMarket && currentMaturity == lendOrdersMaturity)\n                ) {\n                    futureValue += _calculateCurrentFVFromFVInMaturity(\n                        _ccy,\n                        lendOrdersMaturity,\n                        int256(lendFVInMaturity),\n                        currentMarket\n                    );\n                }\n            }\n        }\n\n        // Add FV from Genesis Value Vault if the market is that the lending position is rolled to.\n        if (isDefaultMarket) {\n            futureValue += AddressResolverLib.genesisValueVault().getGenesisValueInFutureValue(\n                _ccy,\n                _user\n            );\n        }\n    }\n\n    function calculateActualPresentValue(\n        bytes32 _ccy,\n        uint256 _maturity,\n        address _user\n    ) public view returns (int256 presentValue) {\n        address market = Storage.slot().maturityLendingMarkets[_ccy][_maturity];\n        bool isDefaultMarket = market == Storage.slot().lendingMarkets[_ccy][0];\n\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\n            address currentMarket = Storage.slot().lendingMarkets[_ccy][i];\n            uint256 currentMaturity = ILendingMarket(currentMarket).getMaturity();\n\n            if (isDefaultMarket || currentMarket == market) {\n                // Get PV from Future Value Vault\n                (int256 futureValueInMaturity, uint256 fvMaturity) = IFutureValueVault(\n                    Storage.slot().futureValueVaults[_ccy][currentMarket]\n                ).getFutureValue(_user);\n\n                if (\n                    (isDefaultMarket && (i == 0 || currentMaturity != fvMaturity)) ||\n                    (!isDefaultMarket && currentMaturity == fvMaturity)\n                ) {\n                    presentValue += _calculatePVFromFVInMaturity(\n                        _ccy,\n                        fvMaturity,\n                        futureValueInMaturity,\n                        currentMarket\n                    );\n                }\n\n                // Get PV from inactive borrow orders\n                (, , uint256 borrowFVInMaturity, uint256 borrowOrdersMaturity) = ILendingMarket(\n                    currentMarket\n                ).getTotalAmountFromBorrowOrders(_user);\n\n                if (\n                    (isDefaultMarket && (i == 0 || currentMaturity != borrowOrdersMaturity)) ||\n                    (!isDefaultMarket && currentMaturity == borrowOrdersMaturity)\n                ) {\n                    presentValue -= _calculatePVFromFVInMaturity(\n                        _ccy,\n                        borrowOrdersMaturity,\n                        int256(borrowFVInMaturity),\n                        currentMarket\n                    );\n                }\n\n                // Get PV from inactive lend orders\n                (, , uint256 lendFVInMaturity, uint256 lendOrdersMaturity) = ILendingMarket(\n                    currentMarket\n                ).getTotalAmountFromLendOrders(_user);\n\n                if (\n                    (isDefaultMarket && (i == 0 || currentMaturity != lendOrdersMaturity)) ||\n                    (!isDefaultMarket && currentMaturity == lendOrdersMaturity)\n                ) {\n                    presentValue += _calculatePVFromFVInMaturity(\n                        _ccy,\n                        lendOrdersMaturity,\n                        int256(lendFVInMaturity),\n                        currentMarket\n                    );\n                }\n            }\n        }\n\n        // Add PV from Genesis Value Vault if the market is that the lending position is rolled to.\n        if (isDefaultMarket) {\n            presentValue += _calculatePVFromFV(\n                AddressResolverLib.genesisValueVault().getGenesisValueInFutureValue(_ccy, _user),\n                ILendingMarket(Storage.slot().lendingMarkets[_ccy][0]).getMidUnitPrice()\n            );\n        }\n    }\n\n    function calculateActualPresentValue(bytes32 _ccy, address _user)\n        public\n        view\n        returns (int256 totalPresentValue)\n    {\n        // Get PV from Future Value Vault and Genesis Value Vault.\n        totalPresentValue = _getTotalPresentValue(_ccy, _user);\n\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\n            address market = Storage.slot().lendingMarkets[_ccy][i];\n\n            // Get PV from inactive borrow orders\n            (, , uint256 borrowFVInMaturity, uint256 borrowOrdersMaturity) = ILendingMarket(market)\n                .getTotalAmountFromBorrowOrders(_user);\n\n            totalPresentValue -= _calculatePVFromFVInMaturity(\n                _ccy,\n                borrowOrdersMaturity,\n                int256(borrowFVInMaturity),\n                market\n            );\n\n            // Get PV from inactive lend orders\n            (, , uint256 lendFVInMaturity, uint256 lendOrdersMaturity) = ILendingMarket(market)\n                .getTotalAmountFromLendOrders(_user);\n\n            totalPresentValue += _calculatePVFromFVInMaturity(\n                _ccy,\n                lendOrdersMaturity,\n                int256(lendFVInMaturity),\n                market\n            );\n        }\n    }\n\n    function calculateLentFundsFromOrders(bytes32 _ccy, address _user)\n        public\n        view\n        returns (\n            uint256 totalWorkingOrdersAmount,\n            uint256 totalClaimableAmount,\n            uint256 totalLentAmount\n        )\n    {\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\n            (\n                uint256 workingOrdersAmount,\n                uint256 claimableAmount,\n                uint256 lentAmount\n            ) = _calculateLentFundsFromOrders(_ccy, Storage.slot().lendingMarkets[_ccy][i], _user);\n\n            totalWorkingOrdersAmount += workingOrdersAmount;\n            totalClaimableAmount += claimableAmount;\n            totalLentAmount += lentAmount;\n        }\n    }\n\n    function calculateBorrowedFundsFromOrders(bytes32 _ccy, address _user)\n        public\n        view\n        returns (\n            uint256 totalWorkingOrdersAmount,\n            uint256 totalDebtAmount,\n            uint256 totalBorrowedAmount\n        )\n    {\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\n            (\n                uint256 workingOrdersAmount,\n                uint256 debtAmount,\n                uint256 borrowedAmount\n            ) = _calculateBorrowedFundsFromOrders(\n                    _ccy,\n                    Storage.slot().lendingMarkets[_ccy][i],\n                    _user\n                );\n\n            totalWorkingOrdersAmount += workingOrdersAmount;\n            totalDebtAmount += debtAmount;\n            totalBorrowedAmount += borrowedAmount;\n        }\n    }\n\n    function calculateLentFundsFromOrders(\n        bytes32 _ccy,\n        address _market,\n        address _user\n    )\n        public\n        view\n        returns (\n            uint256 workingOrdersAmount,\n            uint256 claimableAmount,\n            uint256 lentAmount\n        )\n    {\n        return _calculateLentFundsFromOrders(_ccy, _market, _user);\n    }\n\n    function calculateBorrowedFundsFromOrders(\n        bytes32 _ccy,\n        address _market,\n        address _user\n    )\n        public\n        view\n        returns (\n            uint256 workingOrdersAmount,\n            uint256 debtAmount,\n            uint256 borrowedAmount\n        )\n    {\n        return _calculateBorrowedFundsFromOrders(_ccy, _market, _user);\n    }\n\n    function calculateFunds(bytes32 _ccy, address _user)\n        public\n        view\n        returns (\n            uint256 workingLendOrdersAmount,\n            uint256 claimableAmount,\n            uint256 collateralAmount,\n            uint256 lentAmount,\n            uint256 workingBorrowOrdersAmount,\n            uint256 debtAmount,\n            uint256 borrowedAmount\n        )\n    {\n        (workingLendOrdersAmount, claimableAmount, lentAmount) = calculateLentFundsFromOrders(\n            _ccy,\n            _user\n        );\n        (workingBorrowOrdersAmount, debtAmount, borrowedAmount) = calculateBorrowedFundsFromOrders(\n            _ccy,\n            _user\n        );\n        collateralAmount = claimableAmount;\n\n        // Calculate total present value from Future Value Vault and Genesis Value Vault.\n        int256 totalPresentValue = _getTotalPresentValue(_ccy, _user);\n        if (totalPresentValue >= 0) {\n            // Add to claimableAmount\n            claimableAmount += uint256(totalPresentValue);\n            uint256 haircut = AddressResolverLib.currencyController().getHaircut(_ccy);\n            collateralAmount += (uint256(totalPresentValue) * haircut) / ProtocolTypes.PCT_DIGIT;\n        } else {\n            // Add to debtAmount\n            debtAmount += uint256(-totalPresentValue);\n        }\n    }\n\n    function calculateTotalFundsInETH(\n        address _user,\n        bytes32 _depositCcy,\n        uint256 _depositAmount\n    )\n        external\n        view\n        returns (\n            uint256 totalWorkingLendOrdersAmount,\n            uint256 totalClaimableAmount,\n            uint256 totalCollateralAmount,\n            uint256 totalLentAmount,\n            uint256 totalWorkingBorrowOrdersAmount,\n            uint256 totalDebtAmount,\n            uint256 totalBorrowedAmount,\n            bool isEnoughDeposit\n        )\n    {\n        EnumerableSet.Bytes32Set storage currencySet = Storage.slot().usedCurrencies[_user];\n        CalculatedTotalFundInETHVars memory vars;\n\n        vars.isCollateral = AddressResolverLib.tokenVault().isCollateral(currencySet.values());\n        vars.plusDepositAmount = _depositAmount;\n\n        // Calculate total funds from the user's order list\n        for (uint256 i = 0; i < currencySet.length(); i++) {\n            vars.ccy = currencySet.at(i);\n            vars.amounts = new uint256[](7);\n\n            // 0: workingLendOrdersAmount\n            // 1: claimableAmount\n            // 2: collateralAmount\n            // 3: lentAmount\n            // 4: workingBorrowOrdersAmount\n            // 5: debtAmount\n            // 6: borrowedAmount\n            (\n                vars.amounts[0],\n                vars.amounts[1],\n                vars.amounts[2],\n                vars.amounts[3],\n                vars.amounts[4],\n                vars.amounts[5],\n                vars.amounts[6]\n            ) = calculateFunds(vars.ccy, _user);\n\n            if (vars.ccy == _depositCcy) {\n                // plusDepositAmount: depositAmount + borrowedAmount\n                // minusDepositAmount: workingLendOrdersAmount + lentAmount;\n                vars.plusDepositAmount += vars.amounts[6];\n                vars.minusDepositAmount += vars.amounts[0] + vars.amounts[3];\n            }\n\n            vars.amountsInETH = AddressResolverLib.currencyController().convertToETH(\n                vars.ccy,\n                vars.amounts\n            );\n\n            totalWorkingLendOrdersAmount += vars.amountsInETH[0];\n            totalClaimableAmount += vars.amountsInETH[1];\n            totalCollateralAmount += vars.amountsInETH[2];\n            totalWorkingBorrowOrdersAmount += vars.amountsInETH[4];\n            totalDebtAmount += vars.amountsInETH[5];\n\n            if (vars.isCollateral[i]) {\n                totalLentAmount += vars.amountsInETH[3];\n                totalBorrowedAmount += vars.amountsInETH[6];\n            }\n        }\n\n        isEnoughDeposit = vars.plusDepositAmount >= vars.minusDepositAmount;\n    }\n\n    function _calculateCurrentFVFromFVInMaturity(\n        bytes32 _ccy,\n        uint256 maturity,\n        int256 futureValueInMaturity,\n        address lendingMarketInMaturity\n    ) internal view returns (int256 futureValue) {\n        if (\n            AddressResolverLib\n                .genesisValueVault()\n                .getMaturityUnitPrice(_ccy, maturity)\n                .compoundFactor == 0\n        ) {\n            uint256 unitPriceInMaturity = ILendingMarket(lendingMarketInMaturity).getMidUnitPrice();\n            int256 presetValue = _calculatePVFromFV(futureValueInMaturity, unitPriceInMaturity);\n            uint256 currentUnitPrice = ILendingMarket(Storage.slot().lendingMarkets[_ccy][0])\n                .getMidUnitPrice();\n\n            futureValue =\n                (presetValue * int256(ProtocolTypes.PRICE_DIGIT)) /\n                int256(currentUnitPrice);\n        } else {\n            futureValue = AddressResolverLib.genesisValueVault().calculateCurrentFVFromFVInMaturity(\n                    _ccy,\n                    maturity,\n                    futureValueInMaturity\n                );\n        }\n    }\n\n    function _calculatePVFromFVInMaturity(\n        bytes32 _ccy,\n        uint256 maturity,\n        int256 futureValueInMaturity,\n        address lendingMarketInMaturity\n    ) internal view returns (int256 totalPresentValue) {\n        uint256 compoundFactorInMaturity = AddressResolverLib\n            .genesisValueVault()\n            .getMaturityUnitPrice(_ccy, maturity)\n            .compoundFactor;\n        int256 futureValue;\n        uint256 unitPrice;\n\n        if (compoundFactorInMaturity == 0) {\n            futureValue = futureValueInMaturity;\n            unitPrice = ILendingMarket(lendingMarketInMaturity).getMidUnitPrice();\n        } else {\n            futureValue = AddressResolverLib.genesisValueVault().calculateCurrentFVFromFVInMaturity(\n                    _ccy,\n                    maturity,\n                    futureValueInMaturity\n                );\n            unitPrice = ILendingMarket(Storage.slot().lendingMarkets[_ccy][0]).getMidUnitPrice();\n        }\n\n        return _calculatePVFromFV(futureValue, unitPrice);\n    }\n\n    function _calculatePVFromFV(int256 _futureValue, uint256 _unitPrice)\n        internal\n        pure\n        returns (int256)\n    {\n        // NOTE: The formula is: futureValue = presentValue / unitPrice.\n        return (_futureValue * int256(_unitPrice)) / int256(ProtocolTypes.PRICE_DIGIT);\n    }\n\n    function _getTotalPresentValue(bytes32 _ccy, address _user)\n        internal\n        view\n        returns (int256 totalPresentValue)\n    {\n        // Get PV from Future Value Vault\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\n            address marketAddr = Storage.slot().lendingMarkets[_ccy][i];\n            (int256 futureValueInMaturity, uint256 maturity) = IFutureValueVault(\n                Storage.slot().futureValueVaults[_ccy][marketAddr]\n            ).getFutureValue(_user);\n\n            totalPresentValue += _calculatePVFromFVInMaturity(\n                _ccy,\n                maturity,\n                futureValueInMaturity,\n                Storage.slot().lendingMarkets[_ccy][i]\n            );\n        }\n\n        // Get PV from Genesis Value Vault\n        totalPresentValue += _calculatePVFromFV(\n            AddressResolverLib.genesisValueVault().getGenesisValueInFutureValue(_ccy, _user),\n            ILendingMarket(Storage.slot().lendingMarkets[_ccy][0]).getMidUnitPrice()\n        );\n    }\n\n    function _calculateLentFundsFromOrders(\n        bytes32 _ccy,\n        address _market,\n        address _user\n    )\n        internal\n        view\n        returns (\n            uint256 workingOrdersAmount,\n            uint256 claimableAmount,\n            uint256 lentAmount\n        )\n    {\n        (\n            uint256 activeAmount,\n            uint256 inactiveAmount,\n            uint256 inactiveFutureValueInMaturity,\n            uint256 maturity\n        ) = ILendingMarket(_market).getTotalAmountFromLendOrders(_user);\n\n        workingOrdersAmount = activeAmount;\n        claimableAmount = uint256(\n            _calculatePVFromFVInMaturity(\n                _ccy,\n                maturity,\n                int256(inactiveFutureValueInMaturity),\n                _market\n            )\n        );\n        lentAmount = inactiveAmount;\n    }\n\n    function _calculateBorrowedFundsFromOrders(\n        bytes32 _ccy,\n        address _market,\n        address _user\n    )\n        internal\n        view\n        returns (\n            uint256 workingOrdersAmount,\n            uint256 debtAmount,\n            uint256 borrowedAmount\n        )\n    {\n        (\n            uint256 activeAmount,\n            uint256 inactiveAmount,\n            uint256 inactiveFutureValueInMaturity,\n            uint256 maturity\n        ) = ILendingMarket(_market).getTotalAmountFromBorrowOrders(_user);\n\n        workingOrdersAmount = activeAmount;\n        debtAmount = uint256(\n            _calculatePVFromFVInMaturity(\n                _ccy,\n                maturity,\n                int256(inactiveFutureValueInMaturity),\n                _market\n            )\n        );\n        borrowedAmount = inactiveAmount;\n    }\n}\n"
    },
    "contracts/interfaces/ILendingMarket.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../types/ProtocolTypes.sol\";\nimport {MarketOrder} from \"../storages/LendingMarketStorage.sol\";\n\ninterface ILendingMarket {\n    event CancelOrder(\n        uint48 orderId,\n        address indexed maker,\n        ProtocolTypes.Side side,\n        bytes32 ccy,\n        uint256 maturity,\n        uint256 amount,\n        uint256 unitPrice\n    );\n    event MakeOrder(\n        uint48 orderId,\n        uint48 originalOrderId,\n        address indexed maker,\n        ProtocolTypes.Side side,\n        bytes32 ccy,\n        uint256 maturity,\n        uint256 amount,\n        uint256 unitPrice\n    );\n    event TakeOrders(\n        address indexed taker,\n        ProtocolTypes.Side side,\n        bytes32 ccy,\n        uint256 maturity,\n        uint256 filledAmount,\n        uint256 unitPrice,\n        uint256 filledFutureValue\n    );\n\n    event CleanOrders(\n        uint48[] orderIds,\n        address indexed maker,\n        ProtocolTypes.Side side,\n        bytes32 indexed ccy,\n        uint256 maturity\n    );\n\n    event OpenMarket(uint256 maturity, uint256 prevMaturity);\n\n    struct Market {\n        bytes32 ccy;\n        uint256 maturity;\n        uint256 genesisDate;\n        uint256 borrowUnitPrice;\n        uint256 lendUnitPrice;\n        uint256 midUnitPrice;\n    }\n\n    function getMarket() external view returns (Market memory);\n\n    function getBorrowUnitPrice() external view returns (uint256 unitPrice);\n\n    function getLendUnitPrice() external view returns (uint256 unitPrice);\n\n    function getMidUnitPrice() external view returns (uint256 unitPrice);\n\n    function getBorrowOrderBook(uint256 limit)\n        external\n        view\n        returns (\n            uint256[] memory unitPrices,\n            uint256[] memory amounts,\n            uint256[] memory quantities\n        );\n\n    function getLendOrderBook(uint256 limit)\n        external\n        view\n        returns (\n            uint256[] memory unitPrices,\n            uint256[] memory amounts,\n            uint256[] memory quantities\n        );\n\n    function getMaturity() external view returns (uint256);\n\n    function getCurrency() external view returns (bytes32);\n\n    function isMatured() external view returns (bool);\n\n    function isOpened() external view returns (bool);\n\n    function getOrder(uint48 _orderId)\n        external\n        view\n        returns (\n            ProtocolTypes.Side,\n            uint256 unitPrice,\n            uint256 maturity,\n            address maker,\n            uint256 amount,\n            uint256 timestamp\n        );\n\n    function getTotalAmountFromLendOrders(address _user)\n        external\n        view\n        returns (\n            uint256 activeAmount,\n            uint256 inactiveAmount,\n            uint256 inactiveFutureValue,\n            uint256 maturity\n        );\n\n    function getTotalAmountFromBorrowOrders(address _user)\n        external\n        view\n        returns (\n            uint256 activeAmount,\n            uint256 inactiveAmount,\n            uint256 inactiveFutureValue,\n            uint256 maturity\n        );\n\n    function getActiveLendOrderIds(address _user)\n        external\n        view\n        returns (uint48[] memory activeOrderIds);\n\n    function getActiveBorrowOrderIds(address _user)\n        external\n        view\n        returns (uint48[] memory activeOrderIds);\n\n    function estimateFilledAmount(ProtocolTypes.Side _side, uint256 _futureValue)\n        external\n        view\n        returns (uint256 amount);\n\n    function openMarket(uint256 maturity) external returns (uint256);\n\n    function cancelOrder(address user, uint48 orderId)\n        external\n        returns (\n            ProtocolTypes.Side,\n            uint256,\n            uint256\n        );\n\n    function cleanOrders(address _user)\n        external\n        returns (\n            uint256 activeLendOrderCount,\n            uint256 activeBorrowOrderCount,\n            uint256 removedLendOrderFutureValue,\n            uint256 removedBorrowOrderFutureValue,\n            uint256 removedLendOrderAmount,\n            uint256 removedBorrowOrderAmount,\n            uint256 maturity\n        );\n\n    function createOrder(\n        ProtocolTypes.Side side,\n        address account,\n        uint256 amount,\n        uint256 unitPrice,\n        bool ignoreRemainingAmount\n    ) external returns (uint256 executedRate, uint256 remainingAmount);\n\n    function pauseMarket() external;\n\n    function unpauseMarket() external;\n}\n"
    },
    "contracts/interfaces/IFutureValueVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IFutureValueVault {\n    event Transfer(address indexed from, address indexed to, int256 value);\n\n    function getTotalLendingSupply(uint256 _maturity) external view returns (uint256);\n\n    function getTotalBorrowingSupply(uint256 _maturity) external view returns (uint256);\n\n    function getFutureValue(address _user)\n        external\n        view\n        returns (int256 futureValue, uint256 maturity);\n\n    function hasFutureValueInPastMaturity(address _user, uint256 _maturity)\n        external\n        view\n        returns (bool);\n\n    function addLendFutureValue(\n        address _user,\n        uint256 _amount,\n        uint256 _maturity\n    ) external returns (bool);\n\n    function addBorrowFutureValue(\n        address _user,\n        uint256 _amount,\n        uint256 _maturity\n    ) external returns (bool);\n\n    function removeFutureValue(address _user, uint256 _maturity)\n        external\n        returns (\n            int256 removedAmount,\n            int256 currentAmount,\n            uint256 maturity\n        );\n}\n"
    },
    "contracts/storages/LendingMarketStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../types/ProtocolTypes.sol\";\nimport \"../libraries/HitchensOrderStatisticsTreeLib.sol\";\n\nstruct MarketOrder {\n    ProtocolTypes.Side side;\n    uint256 unitPrice; // in basis points\n    uint256 maturity;\n    uint256 timestamp;\n}\n\nlibrary LendingMarketStorage {\n    using HitchensOrderStatisticsTreeLib for HitchensOrderStatisticsTreeLib.Tree;\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"sf.storage.lendingMarket\");\n\n    struct Storage {\n        uint48 lastOrderId;\n        bytes32 ccy;\n        uint256 genesisDate;\n        uint256 maturity;\n        // Mapping from user to active lend order ids\n        mapping(address => uint48[]) activeLendOrderIds;\n        // Mapping from user to active borrow order ids\n        mapping(address => uint48[]) activeBorrowOrderIds;\n        // Mapping from user to current maturity\n        mapping(address => uint256) userCurrentMaturities;\n        // Mapping from orderId to order\n        mapping(uint256 => MarketOrder) orders;\n        // Mapping from maturity to lending orders\n        mapping(uint256 => HitchensOrderStatisticsTreeLib.Tree) lendOrders;\n        // Mapping from maturity to borrowing orders\n        mapping(uint256 => HitchensOrderStatisticsTreeLib.Tree) borrowOrders;\n    }\n\n    function slot() internal pure returns (Storage storage r) {\n        bytes32 _slot = STORAGE_SLOT;\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := _slot\n        }\n    }\n}\n"
    },
    "contracts/libraries/HitchensOrderStatisticsTreeLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n// types\nimport {ProtocolTypes} from \"../types/ProtocolTypes.sol\";\n\nstruct RemainingOrder {\n    uint48 orderId;\n    address maker;\n    uint256 amount;\n    uint256 unitPrice;\n}\n\nstruct OrderItem {\n    uint48 orderId;\n    uint48 next;\n    uint48 prev;\n    address maker;\n    uint256 timestamp;\n    uint256 amount;\n}\n\n/**\n * @notice HitchensOrderStatisticsTreeLib is a Red-Black Tree binary search library\n * based on the following library that is extended to manage order data.\n *\n * https://github.com/rob-Hitchens/OrderStatisticsTree\n *\n */\nlibrary HitchensOrderStatisticsTreeLib {\n    uint256 private constant EMPTY = 0;\n\n    struct Node {\n        uint256 parent;\n        uint256 left;\n        uint256 right;\n        bool red;\n        uint48 head;\n        uint48 tail;\n        uint256 orderCounter;\n        uint256 orderTotalAmount;\n        mapping(uint256 => OrderItem) orders;\n    }\n\n    struct Tree {\n        uint256 root;\n        mapping(uint256 => Node) nodes;\n    }\n\n    function first(Tree storage self) internal view returns (uint256 _value) {\n        _value = self.root;\n        if (_value == EMPTY) return 0;\n        while (self.nodes[_value].left != EMPTY) {\n            _value = self.nodes[_value].left;\n        }\n    }\n\n    function last(Tree storage self) internal view returns (uint256 _value) {\n        _value = self.root;\n        if (_value == EMPTY) return 0;\n        while (self.nodes[_value].right != EMPTY) {\n            _value = self.nodes[_value].right;\n        }\n    }\n\n    function next(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\n        require(value != EMPTY, \"OrderStatisticsTree(401) - Starting value cannot be zero\");\n        if (self.nodes[value].right != EMPTY) {\n            _cursor = treeMinimum(self, self.nodes[value].right);\n        } else {\n            _cursor = self.nodes[value].parent;\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\n                value = _cursor;\n                _cursor = self.nodes[_cursor].parent;\n            }\n        }\n    }\n\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\n        require(value != EMPTY, \"OrderStatisticsTree(402) - Starting value cannot be zero\");\n        if (self.nodes[value].left != EMPTY) {\n            _cursor = treeMaximum(self, self.nodes[value].left);\n        } else {\n            _cursor = self.nodes[value].parent;\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\n                value = _cursor;\n                _cursor = self.nodes[_cursor].parent;\n            }\n        }\n    }\n\n    function exists(Tree storage self, uint256 value) internal view returns (bool _exists) {\n        if (value == EMPTY) return false;\n        if (value == self.root) return true;\n        // if (self.nodes[value].parent != EMPTY) return true;\n        uint256 cursor = value;\n        while (self.nodes[cursor].parent != EMPTY) {\n            uint256 parent = self.nodes[cursor].parent;\n            if (self.nodes[parent].left != cursor && self.nodes[parent].right != cursor) {\n                return false;\n            }\n            if (parent == self.root) {\n                return true;\n            }\n            cursor = self.nodes[cursor].parent;\n        }\n        return false;\n    }\n\n    function isActiveOrderId(\n        Tree storage self,\n        uint256 value,\n        uint48 orderId\n    ) internal view returns (bool) {\n        return orderIdExists(self, value, orderId) && exists(self, value);\n    }\n\n    function getNode(Tree storage self, uint256 value)\n        internal\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            bool,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        require(exists(self, value), \"OrderStatisticsTree(403) - Value does not exist.\");\n        Node storage gn = self.nodes[value];\n        return (\n            gn.parent,\n            gn.left,\n            gn.right,\n            gn.red,\n            gn.head,\n            gn.tail,\n            gn.orderCounter,\n            gn.orderTotalAmount\n        );\n    }\n\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\n        Node storage gn = self.nodes[value];\n        return gn.orderCounter;\n    }\n\n    function getNodeTotalAmount(Tree storage self, uint256 value)\n        internal\n        view\n        returns (uint256 totalAmount)\n    {\n        return self.nodes[value].orderTotalAmount;\n    }\n\n    function getNodeOrderIds(Tree storage self, uint256 value)\n        internal\n        view\n        returns (uint48[] memory orderIds)\n    {\n        Node storage gn = self.nodes[value];\n        OrderItem memory order = gn.orders[gn.head];\n        orderIds = new uint48[](gn.orderCounter);\n\n        for (uint256 i = 0; i < gn.orderCounter; i++) {\n            orderIds[i] = order.orderId;\n            order = gn.orders[order.next];\n        }\n    }\n\n    function count(Tree storage self) internal view returns (uint256 _count) {\n        return getNodeCount(self, self.root);\n    }\n\n    function insert(Tree storage self, uint256 value) internal {\n        require(value != EMPTY, \"OrderStatisticsTree(405) - Value to insert cannot be zero\");\n        uint256 cursor;\n        uint256 probe = self.root;\n        while (probe != EMPTY) {\n            cursor = probe;\n            if (value < probe) {\n                probe = self.nodes[probe].left;\n            } else if (value > probe) {\n                probe = self.nodes[probe].right;\n            } else if (value == probe) {\n                return;\n            }\n        }\n\n        Node storage nValue = self.nodes[value];\n        // Update order info as a new one if there is already an old node\n        if (\n            self.root == EMPTY ||\n            (self.nodes[cursor].left != value && self.nodes[cursor].right != value)\n        ) {\n            nValue.orderCounter = 0;\n            nValue.orderTotalAmount = 0;\n            _setHead(self, value, 0);\n            _setTail(self, value, 0);\n        }\n        nValue.parent = cursor;\n        nValue.left = EMPTY;\n        nValue.right = EMPTY;\n        nValue.red = true;\n\n        if (cursor == EMPTY) {\n            self.root = value;\n        } else if (value < cursor) {\n            self.nodes[cursor].left = value;\n        } else {\n            self.nodes[cursor].right = value;\n        }\n        insertFixup(self, value);\n    }\n\n    function remove(Tree storage self, uint256 value) internal {\n        require(value != EMPTY, \"OrderStatisticsTree(407) - Value to delete cannot be zero\");\n        Node storage nValue = self.nodes[value];\n        uint256 probe;\n        uint256 cursor;\n        if (nValue.orderCounter == 0) {\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\n                cursor = value;\n            } else {\n                cursor = self.nodes[value].right;\n                while (self.nodes[cursor].left != EMPTY) {\n                    cursor = self.nodes[cursor].left;\n                }\n            }\n            if (self.nodes[cursor].left != EMPTY) {\n                probe = self.nodes[cursor].left;\n            } else {\n                probe = self.nodes[cursor].right;\n            }\n            uint256 cursorParent = self.nodes[cursor].parent;\n            self.nodes[probe].parent = cursorParent;\n            if (cursorParent != EMPTY) {\n                if (cursor == self.nodes[cursorParent].left) {\n                    self.nodes[cursorParent].left = probe;\n                } else {\n                    self.nodes[cursorParent].right = probe;\n                }\n            } else {\n                self.root = probe;\n            }\n            bool doFixup = !self.nodes[cursor].red;\n            if (cursor != value) {\n                replaceParent(self, cursor, value);\n                self.nodes[cursor].left = self.nodes[value].left;\n                self.nodes[self.nodes[cursor].left].parent = cursor;\n                self.nodes[cursor].right = self.nodes[value].right;\n                self.nodes[self.nodes[cursor].right].parent = cursor;\n                self.nodes[cursor].red = self.nodes[value].red;\n                (cursor, value) = (value, cursor);\n            }\n            if (doFixup) {\n                removeFixup(self, probe);\n            }\n            delete self.nodes[cursor];\n        }\n    }\n\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\n        while (self.nodes[value].left != EMPTY) {\n            value = self.nodes[value].left;\n        }\n        return value;\n    }\n\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\n        while (self.nodes[value].right != EMPTY) {\n            value = self.nodes[value].right;\n        }\n        return value;\n    }\n\n    function rotateLeft(Tree storage self, uint256 value) private {\n        uint256 cursor = self.nodes[value].right;\n        uint256 parent = self.nodes[value].parent;\n        uint256 cursorLeft = self.nodes[cursor].left;\n        self.nodes[value].right = cursorLeft;\n        if (cursorLeft != EMPTY) {\n            self.nodes[cursorLeft].parent = value;\n        }\n        self.nodes[cursor].parent = parent;\n        if (parent == EMPTY) {\n            self.root = cursor;\n        } else if (value == self.nodes[parent].left) {\n            self.nodes[parent].left = cursor;\n        } else {\n            self.nodes[parent].right = cursor;\n        }\n        self.nodes[cursor].left = value;\n        self.nodes[value].parent = cursor;\n    }\n\n    function rotateRight(Tree storage self, uint256 value) private {\n        uint256 cursor = self.nodes[value].left;\n        uint256 parent = self.nodes[value].parent;\n        uint256 cursorRight = self.nodes[cursor].right;\n        self.nodes[value].left = cursorRight;\n        if (cursorRight != EMPTY) {\n            self.nodes[cursorRight].parent = value;\n        }\n        self.nodes[cursor].parent = parent;\n        if (parent == EMPTY) {\n            self.root = cursor;\n        } else if (value == self.nodes[parent].right) {\n            self.nodes[parent].right = cursor;\n        } else {\n            self.nodes[parent].left = cursor;\n        }\n        self.nodes[cursor].right = value;\n        self.nodes[value].parent = cursor;\n    }\n\n    function insertFixup(Tree storage self, uint256 value) private {\n        uint256 cursor;\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\n            uint256 valueParent = self.nodes[value].parent;\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\n                if (self.nodes[cursor].red) {\n                    self.nodes[valueParent].red = false;\n                    self.nodes[cursor].red = false;\n                    self.nodes[self.nodes[valueParent].parent].red = true;\n                    value = self.nodes[valueParent].parent;\n                } else {\n                    if (value == self.nodes[valueParent].right) {\n                        value = valueParent;\n                        rotateLeft(self, value);\n                    }\n                    valueParent = self.nodes[value].parent;\n                    self.nodes[valueParent].red = false;\n                    self.nodes[self.nodes[valueParent].parent].red = true;\n                    rotateRight(self, self.nodes[valueParent].parent);\n                }\n            } else {\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\n                if (self.nodes[cursor].red) {\n                    self.nodes[valueParent].red = false;\n                    self.nodes[cursor].red = false;\n                    self.nodes[self.nodes[valueParent].parent].red = true;\n                    value = self.nodes[valueParent].parent;\n                } else {\n                    if (value == self.nodes[valueParent].left) {\n                        value = valueParent;\n                        rotateRight(self, value);\n                    }\n                    valueParent = self.nodes[value].parent;\n                    self.nodes[valueParent].red = false;\n                    self.nodes[self.nodes[valueParent].parent].red = true;\n                    rotateLeft(self, self.nodes[valueParent].parent);\n                }\n            }\n        }\n        self.nodes[self.root].red = false;\n    }\n\n    function replaceParent(\n        Tree storage self,\n        uint256 a,\n        uint256 b\n    ) private {\n        uint256 bParent = self.nodes[b].parent;\n        self.nodes[a].parent = bParent;\n        if (bParent == EMPTY) {\n            self.root = a;\n        } else {\n            if (b == self.nodes[bParent].left) {\n                self.nodes[bParent].left = a;\n            } else {\n                self.nodes[bParent].right = a;\n            }\n        }\n    }\n\n    function removeFixup(Tree storage self, uint256 value) private {\n        uint256 cursor;\n        while (value != self.root && !self.nodes[value].red) {\n            uint256 valueParent = self.nodes[value].parent;\n            if (value == self.nodes[valueParent].left) {\n                cursor = self.nodes[valueParent].right;\n                if (self.nodes[cursor].red) {\n                    self.nodes[cursor].red = false;\n                    self.nodes[valueParent].red = true;\n                    rotateLeft(self, valueParent);\n                    cursor = self.nodes[valueParent].right;\n                }\n                if (\n                    !self.nodes[self.nodes[cursor].left].red &&\n                    !self.nodes[self.nodes[cursor].right].red\n                ) {\n                    self.nodes[cursor].red = true;\n                    value = valueParent;\n                } else {\n                    if (!self.nodes[self.nodes[cursor].right].red) {\n                        self.nodes[self.nodes[cursor].left].red = false;\n                        self.nodes[cursor].red = true;\n                        rotateRight(self, cursor);\n                        cursor = self.nodes[valueParent].right;\n                    }\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\n                    self.nodes[valueParent].red = false;\n                    self.nodes[self.nodes[cursor].right].red = false;\n                    rotateLeft(self, valueParent);\n                    value = self.root;\n                }\n            } else {\n                cursor = self.nodes[valueParent].left;\n                if (self.nodes[cursor].red) {\n                    self.nodes[cursor].red = false;\n                    self.nodes[valueParent].red = true;\n                    rotateRight(self, valueParent);\n                    cursor = self.nodes[valueParent].left;\n                }\n                if (\n                    !self.nodes[self.nodes[cursor].right].red &&\n                    !self.nodes[self.nodes[cursor].left].red\n                ) {\n                    self.nodes[cursor].red = true;\n                    value = valueParent;\n                } else {\n                    if (!self.nodes[self.nodes[cursor].left].red) {\n                        self.nodes[self.nodes[cursor].right].red = false;\n                        self.nodes[cursor].red = true;\n                        rotateLeft(self, cursor);\n                        cursor = self.nodes[valueParent].left;\n                    }\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\n                    self.nodes[valueParent].red = false;\n                    self.nodes[self.nodes[cursor].left].red = false;\n                    rotateRight(self, valueParent);\n                    value = self.root;\n                }\n            }\n        }\n        self.nodes[value].red = false;\n    }\n\n    function estimateDroppedAmountFromLeft(Tree storage self, uint256 targetFutureValue)\n        internal\n        view\n        returns (uint256 droppedAmount)\n    {\n        uint256 cursor = first(self);\n        uint256 totalDroppedAmountInFV = 0;\n        droppedAmount = 0;\n\n        // Find a node whose total amount is over the amount of the argument.\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\n\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\n\n            if (totalDroppedAmountInFV > targetFutureValue) {\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\n                    (totalDroppedAmountInFV - targetFutureValue);\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV) / cursorNodeAmountInFV;\n            } else {\n                droppedAmount += cursorNodeAmountInPV;\n            }\n\n            cursor = next(self, cursor);\n        }\n    }\n\n    function estimateDroppedAmountFromRight(Tree storage self, uint256 targetFutureValue)\n        internal\n        view\n        returns (uint256 droppedAmount)\n    {\n        uint256 cursor = last(self);\n        uint256 totalDroppedAmountInFV = 0;\n        droppedAmount = 0;\n\n        // Find a node whose total amount is over the amount of the argument.\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\n\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\n\n            if (totalDroppedAmountInFV > targetFutureValue) {\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\n                    (totalDroppedAmountInFV - targetFutureValue);\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV) / cursorNodeAmountInFV;\n            } else {\n                droppedAmount += cursorNodeAmountInPV;\n            }\n\n            cursor = prev(self, cursor);\n        }\n    }\n\n    function dropLeft(\n        Tree storage self,\n        uint256 amount,\n        uint256 limitValue\n    )\n        internal\n        returns (\n            uint256 filledFutureValue,\n            uint256 remainingAmount,\n            RemainingOrder memory remainingOrder\n        )\n    {\n        require(amount != EMPTY, \"OrderStatisticsTree(408) - Amount to drop cannot be zero\");\n        uint256 value;\n        uint256 cursor = first(self);\n        uint256 lastNode = last(self);\n        uint256 cursorNodeAmount = 0;\n        uint256 totalAmount = 0;\n\n        require(cursor <= limitValue || limitValue == 0, \"Insufficient limit value\");\n\n        // Find a node whose total amount is over the amount of the argument.\n        while (\n            totalAmount < amount && cursor != EMPTY && (limitValue == 0 || cursor <= limitValue)\n        ) {\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\n            totalAmount += cursorNodeAmount;\n            value = cursor;\n\n            uint256 filledAmount = cursorNodeAmount -\n                (totalAmount > amount ? totalAmount - amount : 0);\n            filledFutureValue += _calculateFutureValue(cursor, filledAmount);\n\n            cursor = next(self, cursor);\n        }\n\n        if (totalAmount >= amount || value == limitValue) {\n            if (totalAmount > amount) {\n                cursor = value;\n                // Update order ids in the node.\n                uint256 filledNodeAmount = cursorNodeAmount - (totalAmount - amount);\n                remainingOrder = fillOrders(self, cursor, filledNodeAmount);\n            }\n\n            self.nodes[cursor].left = 0;\n\n            uint256 parent = self.nodes[cursor].parent;\n\n            while (parent != EMPTY) {\n                if (parent > cursor) {\n                    // Relink the nodes\n                    if (self.nodes[cursor].parent != parent) {\n                        self.nodes[cursor].parent = parent;\n                        self.nodes[parent].left = cursor;\n                    }\n\n                    cursor = parent;\n                }\n\n                parent = self.nodes[parent].parent;\n            }\n        }\n\n        if (amount > totalAmount) {\n            remainingAmount = amount - totalAmount;\n        }\n\n        if (lastNode == value && self.nodes[lastNode].orderTotalAmount == 0) {\n            // The case that all node is dropped.\n            self.root = EMPTY;\n        } else if (value > self.root || (value == self.root && amount >= totalAmount)) {\n            // The case that the root node is dropped\n            self.root = cursor;\n            self.nodes[cursor].parent = 0;\n        }\n\n        if (self.nodes[self.root].left == 0 && self.nodes[self.root].right != 0) {\n            if (self.nodes[self.nodes[self.root].right].left != 0) {\n                rotateRight(self, self.nodes[self.root].right);\n            }\n            rotateLeft(self, self.root);\n        }\n\n        if (self.nodes[self.root].red) {\n            self.nodes[self.root].red = false;\n        }\n    }\n\n    function dropRight(\n        Tree storage self,\n        uint256 amount,\n        uint256 limitValue\n    )\n        internal\n        returns (\n            uint256 filledFutureValue,\n            uint256 remainingAmount,\n            RemainingOrder memory remainingOrder\n        )\n    {\n        require(amount != EMPTY, \"OrderStatisticsTree(408) - Amount to drop cannot be zero\");\n        uint256 value;\n        uint256 cursor = last(self);\n        uint256 firstNode = first(self);\n        uint256 cursorNodeAmount = 0;\n        uint256 totalAmount = 0;\n\n        require(cursor >= limitValue || limitValue == 0, \"Insufficient limit value\");\n\n        // Find a node whose total amount is over the amount of the argument.\n        while (\n            totalAmount < amount && cursor != EMPTY && (limitValue == 0 || cursor >= limitValue)\n        ) {\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\n            totalAmount += cursorNodeAmount;\n            value = cursor;\n\n            uint256 filledAmount = cursorNodeAmount -\n                (totalAmount > amount ? totalAmount - amount : 0);\n            filledFutureValue += _calculateFutureValue(cursor, filledAmount);\n\n            cursor = prev(self, cursor);\n        }\n\n        if (totalAmount >= amount || value == limitValue) {\n            if (totalAmount > amount) {\n                cursor = value;\n                // Update order ids in the node.\n                uint256 filledNodeAmount = cursorNodeAmount - (totalAmount - amount);\n                remainingOrder = fillOrders(self, cursor, filledNodeAmount);\n            }\n\n            self.nodes[cursor].right = 0;\n\n            uint256 parent = self.nodes[cursor].parent;\n\n            while (parent != EMPTY) {\n                if (parent < cursor) {\n                    // Relink the nodes\n                    if (self.nodes[cursor].parent != parent) {\n                        self.nodes[cursor].parent = parent;\n                        self.nodes[parent].right = cursor;\n                    }\n\n                    cursor = parent;\n                }\n\n                parent = self.nodes[parent].parent;\n            }\n        }\n\n        if (amount > totalAmount) {\n            remainingAmount = amount - totalAmount;\n        }\n\n        if (firstNode == value && self.nodes[firstNode].orderTotalAmount == 0) {\n            // The case that all node is dropped.\n            self.root = EMPTY;\n        } else if (value < self.root || (value == self.root && amount >= totalAmount)) {\n            // The case that the root node is dropped\n            self.root = cursor;\n            self.nodes[cursor].parent = 0;\n        }\n\n        if (self.nodes[self.root].right == 0 && self.nodes[self.root].left != 0) {\n            if (self.nodes[self.nodes[self.root].left].right != 0) {\n                rotateLeft(self, self.nodes[self.root].left);\n            }\n            rotateRight(self, self.root);\n        }\n\n        if (self.nodes[self.root].red) {\n            self.nodes[self.root].red = false;\n        }\n    }\n\n    function getFutureValue(\n        Tree storage self,\n        uint256 value,\n        uint48 orderId\n    ) internal view returns (uint256) {\n        return _calculateFutureValue(value, self.nodes[value].orders[orderId].amount);\n    }\n\n    // Double linked list functions\n    /**\n     * @dev Retrieves the Object denoted by `_id`.\n     */\n    function getOrderById(\n        Tree storage self,\n        uint256 value,\n        uint48 orderId\n    ) internal view returns (OrderItem memory) {\n        Node storage gn = self.nodes[value];\n        return gn.orders[orderId];\n    }\n\n    /**\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\n     */\n    function orderIdExists(\n        Tree storage self,\n        uint256 value,\n        uint48 orderId\n    ) internal view returns (bool) {\n        uint48 cursor = orderId;\n        Node storage gn = self.nodes[value];\n        OrderItem memory order = gn.orders[cursor];\n\n        if (order.orderId != cursor) {\n            return false;\n        }\n\n        while (order.prev != EMPTY) {\n            cursor = order.prev;\n            order = gn.orders[cursor];\n        }\n\n        return cursor == gn.head;\n    }\n\n    function insertOrder(\n        Tree storage self,\n        uint256 value,\n        uint48 orderId,\n        address user,\n        uint256 amount,\n        bool isInterruption\n    ) internal {\n        require(amount > 0, \"Insufficient amount\");\n        require(value <= ProtocolTypes.PRICE_DIGIT, \"Insufficient value\");\n        insert(self, value);\n\n        if (isInterruption) {\n            addHead(self, value, orderId, user, amount);\n        } else {\n            addTail(self, value, orderId, user, amount);\n        }\n    }\n\n    function removeOrder(\n        Tree storage self,\n        uint256 value,\n        uint48 orderId\n    ) internal returns (uint256 amount) {\n        require(\n            isActiveOrderId(self, value, orderId),\n            \"OrderStatisticsTree(410) - Order does not exist.\"\n        );\n        amount = _removeOrder(self, value, orderId);\n        remove(self, value);\n    }\n\n    /**\n     * @dev Reduces order amount once market order taken.\n     */\n    function fillOrders(\n        Tree storage self,\n        uint256 value,\n        uint256 _amount\n    ) internal returns (RemainingOrder memory remainingOrder) {\n        Node storage gn = self.nodes[value];\n\n        require(\n            gn.orderTotalAmount >= _amount,\n            \"OrderStatisticsTree(410) - Amount to fill is insufficient\"\n        );\n\n        uint256 remainingAmount = _amount;\n        uint256 filledCount = 0;\n        OrderItem memory currentOrder = gn.orders[gn.head];\n        uint48 orderId = gn.head;\n\n        while (orderId != 0 && remainingAmount != 0) {\n            currentOrder = gn.orders[orderId];\n\n            if (currentOrder.amount <= remainingAmount) {\n                remainingAmount -= currentOrder.amount;\n                orderId = currentOrder.next;\n            } else {\n                remainingOrder = RemainingOrder(\n                    currentOrder.orderId,\n                    currentOrder.maker,\n                    currentOrder.amount - remainingAmount,\n                    value\n                );\n                remainingAmount = 0;\n            }\n\n            filledCount++;\n        }\n\n        _dropOrders(self, value, currentOrder.orderId);\n\n        if (remainingOrder.amount > 0) {\n            // NOTE: This order that the filled partially was dropped from a node, and the unfilled amount\n            // will be inserted newly as a new orders.\n            // However, that filled order amount is used when future value is calculated from inactive order.\n            // For that calculation, this order amount needs to be updated by an actual filled amount at this point.\n            OrderItem storage order = self.nodes[value].orders[currentOrder.orderId];\n            order.amount -= remainingOrder.amount;\n        }\n    }\n\n    /**\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\n     */\n    function addHead(\n        Tree storage self,\n        uint256 _value,\n        uint48 _orderId,\n        address _user,\n        uint256 _amount\n    ) internal {\n        Node storage gn = self.nodes[_value];\n        uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\n        _link(self, _value, orderId, gn.head);\n        _setHead(self, _value, orderId);\n        if (gn.tail == 0) _setTail(self, _value, orderId);\n    }\n\n    /**\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\n     */\n    function addTail(\n        Tree storage self,\n        uint256 _value,\n        uint48 _orderId,\n        address _user,\n        uint256 _amount\n    ) internal {\n        Node storage gn = self.nodes[_value];\n\n        if (gn.head == 0) {\n            addHead(self, _value, _orderId, _user, _amount);\n        } else {\n            uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\n            _link(self, _value, gn.tail, orderId);\n            _setTail(self, _value, orderId);\n        }\n    }\n\n    /**\n     * @dev Internal function to create an unlinked Order.\n     */\n    function _createOrder(\n        Tree storage self,\n        uint256 value,\n        uint48 orderId,\n        address user,\n        uint256 amount\n    ) internal returns (uint48) {\n        Node storage gn = self.nodes[value];\n        require(\n            gn.orders[orderId].timestamp == 0,\n            \"OrderStatisticsTree(409) - Order id already exist.\"\n        );\n\n        gn.orderCounter += 1;\n        gn.orderTotalAmount += amount;\n        OrderItem memory order = OrderItem(orderId, 0, 0, user, block.timestamp, amount);\n        gn.orders[orderId] = order;\n        return order.orderId;\n    }\n\n    /**\n     * @dev Remove the OrderItem denoted by `_id` from the list.\n     */\n    function _removeOrder(\n        Tree storage self,\n        uint256 value,\n        uint48 orderId\n    ) internal returns (uint256 amount) {\n        require(\n            isActiveOrderId(self, value, orderId),\n            \"OrderStatisticsTree(410) - Order does not exist.\"\n        );\n        Node storage gn = self.nodes[value];\n\n        OrderItem memory order = gn.orders[orderId];\n        amount = order.amount;\n\n        if (gn.head == orderId && gn.tail == orderId) {\n            _setHead(self, value, 0);\n            _setTail(self, value, 0);\n        } else if (gn.head == orderId) {\n            _setHead(self, value, order.next);\n            gn.orders[order.next].prev = 0;\n        } else if (gn.tail == orderId) {\n            _setTail(self, value, order.prev);\n            gn.orders[order.prev].next = 0;\n        } else {\n            _link(self, value, order.prev, order.next);\n        }\n        delete gn.orders[order.orderId];\n        gn.orderCounter -= 1;\n        gn.orderTotalAmount -= order.amount;\n    }\n\n    /**\n     * @dev Drop the OrderItems older than or equal `orderId` from the list\n     */\n    function _dropOrders(\n        Tree storage self,\n        uint256 value,\n        uint48 orderId\n    ) internal returns (uint256 amount) {\n        require(\n            isActiveOrderId(self, value, orderId),\n            \"OrderStatisticsTree(410) - Order does not exist.\"\n        );\n        Node storage gn = self.nodes[value];\n\n        OrderItem memory order = gn.orders[orderId];\n        amount = order.amount;\n        uint256 cursor = gn.head;\n        uint256 removedCount = 1;\n        uint256 removedAmount = gn.orders[cursor].amount;\n\n        while (cursor != orderId) {\n            cursor = gn.orders[cursor].next;\n            removedCount++;\n            removedAmount += gn.orders[cursor].amount;\n        }\n\n        if (gn.tail == orderId) {\n            _setHead(self, value, 0);\n            _setTail(self, value, 0);\n        } else {\n            _setHead(self, value, order.next);\n            gn.orders[order.next].prev = 0;\n        }\n\n        gn.orderCounter -= removedCount;\n        gn.orderTotalAmount -= removedAmount;\n    }\n\n    /**\n     * @dev Internal function to update the Head pointer.\n     */\n    function _setHead(\n        Tree storage self,\n        uint256 value,\n        uint48 orderId\n    ) internal {\n        Node storage gn = self.nodes[value];\n\n        gn.head = orderId;\n    }\n\n    /**\n     * @dev Internal function to update the Tail pointer.\n     */\n    function _setTail(\n        Tree storage self,\n        uint256 value,\n        uint48 orderId\n    ) internal {\n        Node storage gn = self.nodes[value];\n\n        gn.tail = orderId;\n    }\n\n    /**\n     * @dev Internal function to link an Object to another.\n     */\n    function _link(\n        Tree storage self,\n        uint256 value,\n        uint48 _prevId,\n        uint48 _nextId\n    ) internal {\n        Node storage gn = self.nodes[value];\n\n        gn.orders[_prevId].next = _nextId;\n        gn.orders[_nextId].prev = _prevId;\n    }\n\n    function _calculateFutureValue(uint256 unitPrice, uint256 amount)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (amount * ProtocolTypes.PRICE_DIGIT) / unitPrice;\n    }\n}\n"
    },
    "contracts/LendingMarketController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n// interfaces\nimport {ILendingMarketController} from \"./interfaces/ILendingMarketController.sol\";\nimport {ILendingMarket} from \"./interfaces/ILendingMarket.sol\";\nimport {IFutureValueVault} from \"./interfaces/IFutureValueVault.sol\";\n// libraries\nimport {Contracts} from \"./libraries/Contracts.sol\";\nimport {BokkyPooBahsDateTimeLibrary as TimeLibrary} from \"./libraries/BokkyPooBahsDateTimeLibrary.sol\";\nimport {FundCalculationLogic} from \"./libraries/FundCalculationLogic.sol\";\n// mixins\nimport {MixinAddressResolver} from \"./mixins/MixinAddressResolver.sol\";\n// types\nimport {ProtocolTypes} from \"./types/ProtocolTypes.sol\";\n// utils\nimport {Ownable} from \"./utils/Ownable.sol\";\nimport {Proxyable} from \"./utils/Proxyable.sol\";\n// storages\nimport {LendingMarketControllerStorage as Storage} from \"./storages/LendingMarketControllerStorage.sol\";\n\n/**\n * @notice Implements the module to manage separated lending order-book markets per maturity.\n *\n * This contract also works as a factory contract that can deploy (start) a new lending market\n * for selected currency and maturity and has the calculation logic for the Genesis value in addition.\n *\n * Deployed Lending Markets are rotated and reused as it reaches the maturity date. At the time of rotation,\n * a new maturity date is set and the compound factor is updated.\n *\n * The users mainly call this contract to create orders to lend or borrow funds.\n */\ncontract LendingMarketController is\n    ILendingMarketController,\n    MixinAddressResolver,\n    ReentrancyGuard,\n    Ownable,\n    Proxyable\n{\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n    uint256 private constant BASIS_TERM = 3;\n    uint256 private constant MAXIMUM_ORDER_COUNT = 20;\n\n    /**\n     * @notice Modifier to check if the currency has a lending market.\n     * @param _ccy Currency name in bytes32\n     */\n    modifier hasLendingMarket(bytes32 _ccy) {\n        require(\n            Storage.slot().lendingMarkets[_ccy].length > 0,\n            \"No lending markets exist for a specific currency\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Modifier to check if there is a market in the maturity.\n     * @param _ccy Currency name in bytes32\n     * @param _maturity The maturity of the market\n     */\n    modifier ifValidMaturity(bytes32 _ccy, uint256 _maturity) {\n        require(\n            Storage.slot().maturityLendingMarkets[_ccy][_maturity] != address(0),\n            \"Invalid maturity\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Initializes the contract.\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\n     * @param _owner The address of the contract owner\n     * @param _resolver The address of the Address Resolver contract\n     */\n    function initialize(address _owner, address _resolver) public initializer onlyProxy {\n        _transferOwnership(_owner);\n        registerAddressResolver(_resolver);\n    }\n\n    // @inheritdoc MixinAddressResolver\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\n        contracts = new bytes32[](4);\n        contracts[0] = Contracts.BEACON_PROXY_CONTROLLER;\n        contracts[1] = Contracts.CURRENCY_CONTROLLER;\n        contracts[2] = Contracts.GENESIS_VALUE_VAULT;\n        contracts[3] = Contracts.TOKEN_VAULT;\n    }\n\n    // @inheritdoc MixinAddressResolver\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\n        contracts = new bytes32[](1);\n        contracts[0] = Contracts.TOKEN_VAULT;\n    }\n\n    /**\n     * @notice Gets the genesis date when the first market opens for the selected currency.\n     * @param _ccy Currency name in bytes32\n     * @return The genesis date\n     */\n    function getGenesisDate(bytes32 _ccy) external view override returns (uint256) {\n        return Storage.slot().genesisDates[_ccy];\n    }\n\n    /**\n     * @notice Gets the lending market contract addresses for the selected currency.\n     * @param _ccy Currency name in bytes32\n     * @return Array with the lending market address\n     */\n    function getLendingMarkets(bytes32 _ccy) external view override returns (address[] memory) {\n        return Storage.slot().lendingMarkets[_ccy];\n    }\n\n    /**\n     * @notice Gets the lending market contract address for the selected currency and maturity.\n     * @param _ccy Currency name in bytes32\n     * @param _maturity The maturity of the market\n     * @return The lending market address\n     */\n    function getLendingMarket(bytes32 _ccy, uint256 _maturity)\n        external\n        view\n        override\n        returns (address)\n    {\n        return Storage.slot().maturityLendingMarkets[_ccy][_maturity];\n    }\n\n    /**\n     * @notice Gets the feture value contract address for the selected currency and maturity.\n     * @param _ccy Currency name in bytes32\n     * @param _maturity The maturity of the market\n     * @return The lending market address\n     */\n    function getFutureValueVault(bytes32 _ccy, uint256 _maturity)\n        public\n        view\n        override\n        returns (address)\n    {\n        return\n            Storage.slot().futureValueVaults[_ccy][\n                Storage.slot().maturityLendingMarkets[_ccy][_maturity]\n            ];\n    }\n\n    /**\n     * @notice Gets borrow prices per future value for the selected currency.\n     * @param _ccy Currency name in bytes32\n     * @return Array with the borrowing prices per future value of the lending market\n     */\n    function getBorrowUnitPrices(bytes32 _ccy) external view override returns (uint256[] memory) {\n        uint256[] memory unitPrices = new uint256[](Storage.slot().lendingMarkets[_ccy].length);\n\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\n            ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy][i]);\n            unitPrices[i] = market.getBorrowUnitPrice();\n        }\n\n        return unitPrices;\n    }\n\n    /**\n     * @notice Gets lend prices per future value for the selected currency.\n     * @param _ccy Currency name in bytes32\n     * @return Array with the lending prices per future value of the lending market\n     */\n    function getLendUnitPrices(bytes32 _ccy) external view override returns (uint256[] memory) {\n        uint256[] memory unitPrices = new uint256[](Storage.slot().lendingMarkets[_ccy].length);\n\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\n            ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy][i]);\n            unitPrices[i] = market.getLendUnitPrice();\n        }\n\n        return unitPrices;\n    }\n\n    /**\n     * @notice Gets mid prices per future value for the selected currency.\n     * @param _ccy Currency name in bytes32\n     * @return Array with the mid prices per future value of the lending market\n     */\n    function getMidUnitPrices(bytes32 _ccy) external view override returns (uint256[] memory) {\n        uint256[] memory unitPrices = new uint256[](Storage.slot().lendingMarkets[_ccy].length);\n\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\n            ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy][i]);\n            unitPrices[i] = market.getMidUnitPrice();\n        }\n\n        return unitPrices;\n    }\n\n    /**\n     * @notice Gets the order book of borrow.\n     * @param _ccy Currency name in bytes32\n     * @param _maturity The maturity of the market\n     * @param _limit The limit number to get\n     * @return unitPrices The array of borrow unit prices\n     * @return amounts The array of borrow order amounts\n     * @return quantities The array of borrow order quantities\n     */\n    function getBorrowOrderBook(\n        bytes32 _ccy,\n        uint256 _maturity,\n        uint256 _limit\n    )\n        external\n        view\n        override\n        returns (\n            uint256[] memory unitPrices,\n            uint256[] memory amounts,\n            uint256[] memory quantities\n        )\n    {\n        address market = Storage.slot().maturityLendingMarkets[_ccy][_maturity];\n        return ILendingMarket(market).getBorrowOrderBook(_limit);\n    }\n\n    /**\n     * @notice Gets the order book of lend.\n     * @param _ccy Currency name in bytes32\n     * @param _maturity The maturity of the market\n     * @param _limit The limit number to get\n     * @return unitPrices The array of borrow unit prices\n     * @return amounts The array of lend order amounts\n     * @return quantities The array of lend order quantities\n     */\n    function getLendOrderBook(\n        bytes32 _ccy,\n        uint256 _maturity,\n        uint256 _limit\n    )\n        external\n        view\n        override\n        returns (\n            uint256[] memory unitPrices,\n            uint256[] memory amounts,\n            uint256[] memory quantities\n        )\n    {\n        address market = Storage.slot().maturityLendingMarkets[_ccy][_maturity];\n        return ILendingMarket(market).getLendOrderBook(_limit);\n    }\n\n    /**\n     * @notice Gets maturities for the selected currency.\n     * @param _ccy Currency name in bytes32\n     * @return Array with the lending market maturity\n     */\n    function getMaturities(bytes32 _ccy) public view override returns (uint256[] memory) {\n        uint256[] memory maturities = new uint256[](Storage.slot().lendingMarkets[_ccy].length);\n\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\n            ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy][i]);\n            maturities[i] = market.getMaturity();\n        }\n\n        return maturities;\n    }\n\n    /**\n     * @notice Get all the currencies in which the user has lending positions or orders.\n     * @param _user User's address\n     * @return The array of the currency\n     */\n    function getUsedCurrencies(address _user) external view override returns (bytes32[] memory) {\n        return Storage.slot().usedCurrencies[_user].values();\n    }\n\n    /**\n     * @notice Gets the future value of the account for selected currency and maturity.\n     * @param _ccy Currency name in bytes32 for Lending Market\n     * @param _maturity The maturity of the market\n     * @param _user User's address\n     * @return futureValue The future value\n     */\n    function getFutureValue(\n        bytes32 _ccy,\n        uint256 _maturity,\n        address _user\n    ) external view override returns (int256 futureValue) {\n        return FundCalculationLogic.calculateActualFutureValue(_ccy, _maturity, _user);\n    }\n\n    /**\n     * @notice Gets the present value of the account for selected currency and maturity.\n     * @param _ccy Currency name in bytes32 for Lending Market\n     * @param _maturity The maturity of the market\n     * @param _user User's address\n     * @return presentValue The present value\n     */\n    function getPresentValue(\n        bytes32 _ccy,\n        uint256 _maturity,\n        address _user\n    ) external view override returns (int256 presentValue) {\n        return FundCalculationLogic.calculateActualPresentValue(_ccy, _maturity, _user);\n    }\n\n    /**\n     * @notice Gets the total present value of the account for selected currency.\n     * @param _ccy Currency name in bytes32 for Lending Market\n     * @param _user User's address\n     * @return totalPresentValue The total present value\n     */\n    function getTotalPresentValue(bytes32 _ccy, address _user)\n        external\n        view\n        override\n        returns (int256 totalPresentValue)\n    {\n        return FundCalculationLogic.calculateActualPresentValue(_ccy, _user);\n    }\n\n    /**\n     * @notice Gets the total present value of the account converted to ETH.\n     * @param _user User's address\n     * @return totalPresentValue The total present value in ETH\n     */\n    function getTotalPresentValueInETH(address _user)\n        external\n        view\n        override\n        returns (int256 totalPresentValue)\n    {\n        EnumerableSet.Bytes32Set storage currencySet = Storage.slot().usedCurrencies[_user];\n\n        for (uint256 i = 0; i < currencySet.length(); i++) {\n            bytes32 ccy = currencySet.at(i);\n            int256 amount = FundCalculationLogic.calculateActualPresentValue(ccy, _user);\n            totalPresentValue += currencyController().convertToETH(ccy, amount);\n        }\n    }\n\n    /**\n     * @notice Gets the funds that are calculated from the user's lending order list for the selected currency.\n     * @param _ccy Currency name in bytes32\n     * @param _user User's address\n     * @return workingOrdersAmount The working orders amount on the order book\n     * @return claimableAmount The claimable amount due to the lending orders being filled on the order book\n     * @return lentAmount The lent amount due to the lend orders being filled on the order book\n     */\n    function calculateLentFundsFromOrders(bytes32 _ccy, address _user)\n        external\n        view\n        override\n        returns (\n            uint256 workingOrdersAmount,\n            uint256 claimableAmount,\n            uint256 lentAmount\n        )\n    {\n        return FundCalculationLogic.calculateLentFundsFromOrders(_ccy, _user);\n    }\n\n    /**\n     * @notice Gets the funds that are calculated from the user's borrowing order list for the selected currency.\n     * @param _ccy Currency name in bytes32\n     * @param _user User's address\n     * @return workingOrdersAmount The working orders amount on the order book\n     * @return debtAmount The debt amount due to the borrow orders being filled on the order book\n     * @return borrowedAmount The borrowed amount due to the borrow orders being filled on the order book\n     */\n    function calculateBorrowedFundsFromOrders(bytes32 _ccy, address _user)\n        external\n        view\n        override\n        returns (\n            uint256 workingOrdersAmount,\n            uint256 debtAmount,\n            uint256 borrowedAmount\n        )\n    {\n        return FundCalculationLogic.calculateBorrowedFundsFromOrders(_ccy, _user);\n    }\n\n    /**\n     * @notice Gets the funds that are calculated from the user's lending and borrowing order list\n     * for the selected currency.\n     * @param _ccy Currency name in bytes32\n     * @param _user User's address\n     * @return workingLendOrdersAmount The working orders amount on the lend order book\n     * @return claimableAmount The claimable amount due to the lending orders being filled on the order book\n     * @return collateralAmount The actual collateral amount that is calculated by netting using the haircut.\n     * @return lentAmount The lent amount due to the lend orders being filled on the order book\n     * @return workingBorrowOrdersAmount The working orders amount on the borrow order book\n     * @return debtAmount The debt amount due to the borrow orders being filled on the order book\n     * @return borrowedAmount The borrowed amount due to the borrow orders being filled on the order book\n     */\n    function calculateFunds(bytes32 _ccy, address _user)\n        external\n        view\n        override\n        returns (\n            uint256 workingLendOrdersAmount,\n            uint256 claimableAmount,\n            uint256 collateralAmount,\n            uint256 lentAmount,\n            uint256 workingBorrowOrdersAmount,\n            uint256 debtAmount,\n            uint256 borrowedAmount\n        )\n    {\n        if (Storage.slot().usedCurrencies[_user].contains(_ccy)) {\n            return FundCalculationLogic.calculateFunds(_ccy, _user);\n        }\n    }\n\n    /**\n     * @notice Gets the funds that are calculated from the user's lending and borrowing order list\n     * for all currencies in ETH.\n     * @param _user User's address\n     */\n    function calculateTotalFundsInETH(\n        address _user,\n        bytes32 _depositCcy,\n        uint256 _depositAmount\n    )\n        external\n        view\n        override\n        returns (\n            uint256 totalWorkingLendOrdersAmount,\n            uint256 totalClaimableAmount,\n            uint256 totalCollateralAmount,\n            uint256 totalLentAmount,\n            uint256 totalWorkingBorrowOrdersAmount,\n            uint256 totalDebtAmount,\n            uint256 totalBorrowedAmount,\n            bool isEnoughDeposit\n        )\n    {\n        return FundCalculationLogic.calculateTotalFundsInETH(_user, _depositCcy, _depositAmount);\n    }\n\n    /**\n     * @notice Gets if the lending market is initialized.\n     * @param _ccy Currency name in bytes32\n     * @return The boolean if the lending market is initialized or not\n     */\n    function isInitializedLendingMarket(bytes32 _ccy) public view override returns (bool) {\n        return Storage.slot().genesisDates[_ccy] != 0;\n    }\n\n    /**\n     * @notice Initialize the lending market to set a genesis date and compound factor\n     * @param _ccy Currency name in bytes32\n     * @param _genesisDate The genesis date when the initial market is opened\n     * @param _compoundFactor The initial compound factor when the initial market is opened\n     */\n    function initializeLendingMarket(\n        bytes32 _ccy,\n        uint256 _genesisDate,\n        uint256 _compoundFactor\n    ) external override onlyOwner {\n        require(_compoundFactor > 0, \"Invalid compound factor\");\n        require(!isInitializedLendingMarket(_ccy), \"Already initialized\");\n\n        genesisValueVault().initialize(_ccy, 18, _compoundFactor);\n        Storage.slot().genesisDates[_ccy] = _genesisDate;\n    }\n\n    /**\n     * @notice Deploys new Lending Market and save address at lendingMarkets mapping.\n     * @param _ccy Main currency for new lending market\n     * @notice Reverts on deployment market with existing currency and term\n     * @return market The proxy contract address of created lending market\n     */\n    function createLendingMarket(bytes32 _ccy)\n        external\n        override\n        onlyOwner\n        returns (address market, address futureValueVault)\n    {\n        require(\n            genesisValueVault().isInitialized(_ccy),\n            \"Lending market hasn't been initialized in the currency\"\n        );\n        require(currencyController().currencyExists(_ccy), \"Non supported currency\");\n\n        uint256 genesisDate = Storage.slot().genesisDates[_ccy];\n\n        if (Storage.slot().lendingMarkets[_ccy].length > 0) {\n            genesisDate = ILendingMarket(\n                Storage.slot().lendingMarkets[_ccy][Storage.slot().lendingMarkets[_ccy].length - 1]\n            ).getMaturity();\n        }\n\n        uint256 nextMaturity = TimeLibrary.addMonths(genesisDate, BASIS_TERM);\n\n        market = beaconProxyController().deployLendingMarket(\n            _ccy,\n            Storage.slot().genesisDates[_ccy],\n            nextMaturity\n        );\n        futureValueVault = beaconProxyController().deployFutureValueVault();\n\n        Storage.slot().lendingMarkets[_ccy].push(market);\n        Storage.slot().maturityLendingMarkets[_ccy][nextMaturity] = market;\n        Storage.slot().futureValueVaults[_ccy][market] = futureValueVault;\n\n        emit CreateLendingMarket(\n            _ccy,\n            market,\n            futureValueVault,\n            Storage.slot().lendingMarkets[_ccy].length,\n            nextMaturity\n        );\n    }\n\n    /**\n     * @notice Creates an order. Takes orders if the orders are matched,\n     * and places new order if not match it.\n     *\n     * In addition, converts the future value to the genesis value if there is future value in past maturity\n     * before the execution of order creation.\n     *\n     * @param _ccy Currency name in bytes32 of the selected market\n     * @param _maturity The maturity of the selected market\n     * @param _side Order position type, Borrow or Lend\n     * @param _amount Amount of funds the maker wants to borrow/lend\n     * @param _unitPrice Amount of unit price taker wish to borrow/lend\n     * @return True if the execution of the operation succeeds\n     */\n    function createOrder(\n        bytes32 _ccy,\n        uint256 _maturity,\n        ProtocolTypes.Side _side,\n        uint256 _amount,\n        uint256 _unitPrice\n    ) external override nonReentrant ifValidMaturity(_ccy, _maturity) returns (bool) {\n        _convertFutureValueToGenesisValue(_ccy, _maturity, msg.sender);\n        _createOrder(_ccy, _maturity, msg.sender, _side, _amount, _unitPrice, false);\n        return true;\n    }\n\n    /**\n     * @notice Deposits funds and creates an order at the same time.\n     *\n     * @param _ccy Currency name in bytes32 of the selected market\n     * @param _maturity The maturity of the selected market\n     * @param _side Order position type, Borrow or Lend\n     * @param _amount Amount of funds the maker wants to borrow/lend\n     * @param _unitPrice Amount of unit price taker wish to borrow/lend\n     * @return True if the execution of the operation succeeds\n     */\n    function depositAndCreateOrder(\n        bytes32 _ccy,\n        uint256 _maturity,\n        ProtocolTypes.Side _side,\n        uint256 _amount,\n        uint256 _unitPrice\n    ) external override nonReentrant ifValidMaturity(_ccy, _maturity) returns (bool) {\n        tokenVault().depositFrom(msg.sender, _ccy, _amount);\n        _convertFutureValueToGenesisValue(_ccy, _maturity, msg.sender);\n        _createOrder(_ccy, _maturity, msg.sender, _side, _amount, _unitPrice, false);\n        return true;\n    }\n\n    /**\n     * @notice Creates a lend order with ETH. Takes the order if the order is matched,\n     * and places new order if not match it.\n     *\n     * @param _ccy Currency name in bytes32 of the selected market\n     * @param _maturity The maturity of the selected market\n     * @param _unitPrice Amount of unit price taker wish to borrow/lend\n     * @return True if the execution of the operation succeeds\n     */\n    function createLendOrderWithETH(\n        bytes32 _ccy,\n        uint256 _maturity,\n        uint256 _unitPrice\n    ) external payable override nonReentrant ifValidMaturity(_ccy, _maturity) returns (bool) {\n        _convertFutureValueToGenesisValue(_ccy, _maturity, msg.sender);\n        _createOrder(\n            _ccy,\n            _maturity,\n            msg.sender,\n            ProtocolTypes.Side.LEND,\n            msg.value,\n            _unitPrice,\n            false\n        );\n        return true;\n    }\n\n    /**\n     * @notice Deposits funds and creates a lend order with ETH at the same time.\n     *\n     * @param _ccy Currency name in bytes32 of the selected market\n     * @param _maturity The maturity of the selected market\n     * @param _unitPrice Amount of unit price taker wish to borrow/lend\n     * @return True if the execution of the operation succeeds\n     */\n    function depositAndCreateLendOrderWithETH(\n        bytes32 _ccy,\n        uint256 _maturity,\n        uint256 _unitPrice\n    ) external payable override nonReentrant ifValidMaturity(_ccy, _maturity) returns (bool) {\n        tokenVault().depositFrom{value: msg.value}(msg.sender, _ccy, msg.value);\n        _convertFutureValueToGenesisValue(_ccy, _maturity, msg.sender);\n        _createOrder(\n            _ccy,\n            _maturity,\n            msg.sender,\n            ProtocolTypes.Side.LEND,\n            msg.value,\n            _unitPrice,\n            false\n        );\n        return true;\n    }\n\n    /**\n     * @notice Cancels the own order.\n     * @param _ccy Currency name in bytes32 of the selected market\n     * @param _maturity The maturity of the selected market\n     * @param _orderId Market order id\n     */\n    function cancelOrder(\n        bytes32 _ccy,\n        uint256 _maturity,\n        uint48 _orderId\n    ) external override nonReentrant ifValidMaturity(_ccy, _maturity) returns (bool) {\n        address market = Storage.slot().maturityLendingMarkets[_ccy][_maturity];\n        (ProtocolTypes.Side side, uint256 amount, uint256 unitPrice) = ILendingMarket(market)\n            .cancelOrder(msg.sender, _orderId);\n\n        emit CancelOrder(_orderId, msg.sender, _ccy, side, _maturity, amount, unitPrice);\n\n        return true;\n    }\n\n    /**\n     * @notice Liquidates a lending position if the user's coverage is less than 1.\n     * @dev A liquidation amount is calculated from the selected debt, but its maximum amount is the same as a collateral amount.\n     * That amount needs to be set at liquidationAmountMax otherwise currency swapping using Uniswap will fail\n     * if the collateral is insufficient.\n     * @param _collateralCcy Currency name to be used as collateral\n     * @param _debtCcy Currency name to be used as debt\n     * @param _debtMaturity The market maturity of the debt\n     * @param _liquidationAmountMax Maximum acceptable liquidation Amount in debt currency\n     * @param _user User's address\n     * @param _poolFee Uniswap pool fee\n     * @return True if the execution of the operation succeeds\n     */\n    function executeLiquidationCall(\n        bytes32 _collateralCcy,\n        bytes32 _debtCcy,\n        uint256 _debtMaturity,\n        uint256 _liquidationAmountMax,\n        address _user,\n        uint24 _poolFee\n    ) external nonReentrant ifValidMaturity(_debtCcy, _debtMaturity) returns (bool) {\n        // In order to liquidate using user collateral, inactive order IDs must be cleaned\n        // and converted to actual funds first.\n        cleanOrders(_debtCcy, _user);\n\n        uint256 liquidationAmount = FundCalculationLogic.convertToLiquidationAmountFromCollateral(\n            _collateralCcy,\n            _debtCcy,\n            _debtMaturity,\n            _liquidationAmountMax,\n            _user,\n            _poolFee\n        );\n\n        _createOrder(\n            _debtCcy,\n            _debtMaturity,\n            _user,\n            ProtocolTypes.Side.LEND,\n            liquidationAmount,\n            0,\n            true\n        );\n\n        emit Liquidate(_user, _collateralCcy, _debtCcy, _debtMaturity, liquidationAmount);\n\n        _convertFutureValueToGenesisValue(_debtCcy, _debtMaturity, _user);\n\n        return true;\n    }\n\n    /**\n     * @notice Rotate the lending markets. In this rotation, the following actions are happened.\n     * - Updates the maturity at the beginning of the market array.\n     * - Moves the beginning of the market array to the end of it.\n     * - Update the compound factor in this contract using the next market unit price.\n     *\n     * @param _ccy Currency name in bytes32 of the selected market\n     */\n    function rotateLendingMarkets(bytes32 _ccy)\n        external\n        override\n        nonReentrant\n        hasLendingMarket(_ccy)\n    {\n        address[] storage markets = Storage.slot().lendingMarkets[_ccy];\n        address currentMarketAddr = markets[0];\n        address nextMarketAddr = markets[1];\n\n        // Reopen the market matured with new maturity\n        uint256 newLastMaturity = TimeLibrary.addMonths(\n            ILendingMarket(markets[markets.length - 1]).getMaturity(),\n            BASIS_TERM\n        );\n        uint256 prevMaturity = ILendingMarket(currentMarketAddr).openMarket(newLastMaturity);\n\n        // Rotate the order of the market\n        for (uint256 i = 0; i < markets.length; i++) {\n            address marketAddr = (markets.length - 1) == i ? currentMarketAddr : markets[i + 1];\n            markets[i] = marketAddr;\n        }\n\n        genesisValueVault().updateCompoundFactor(\n            _ccy,\n            prevMaturity,\n            ILendingMarket(nextMarketAddr).getMaturity(),\n            ILendingMarket(nextMarketAddr).getMidUnitPrice()\n        );\n\n        Storage.slot().maturityLendingMarkets[_ccy][newLastMaturity] = currentMarketAddr;\n        delete Storage.slot().maturityLendingMarkets[_ccy][prevMaturity];\n\n        emit RotateLendingMarkets(_ccy, prevMaturity, newLastMaturity);\n    }\n\n    /**\n     * @notice Pauses previously deployed lending market by currency\n     * @param _ccy Currency for pausing all lending markets\n     * @return True if the execution of the operation succeeds\n     */\n    function pauseLendingMarkets(bytes32 _ccy) external override onlyOwner returns (bool) {\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\n            ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy][i]);\n            market.pauseMarket();\n        }\n\n        return true;\n    }\n\n    /**\n     * @notice Unpauses previously deployed lending market by currency\n     * @param _ccy Currency name in bytes32\n     * @return True if the execution of the operation succeeds\n     */\n    function unpauseLendingMarkets(bytes32 _ccy) external override onlyOwner returns (bool) {\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\n            ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy][i]);\n            market.unpauseMarket();\n        }\n\n        return true;\n    }\n\n    /**\n     * @notice Cleans user's all orders to remove order ids that are already filled on the order book.\n     * @param _user User's address\n     */\n    function cleanAllOrders(address _user) public override {\n        EnumerableSet.Bytes32Set storage ccySet = Storage.slot().usedCurrencies[_user];\n        for (uint256 i = 0; i < ccySet.length(); i++) {\n            cleanOrders(ccySet.at(i), _user);\n        }\n    }\n\n    /**\n     * @notice Cleans user's orders to remove order ids that are already filled on the order book for a selected currency.\n     * @param _ccy Currency name in bytes32\n     * @param _user User's address\n     */\n    function cleanOrders(bytes32 _ccy, address _user)\n        public\n        override\n        returns (uint256 totalActiveOrderCount)\n    {\n        EnumerableSet.Bytes32Set storage ccySet = Storage.slot().usedCurrencies[_user];\n        if (!ccySet.contains(_ccy)) {\n            return 0;\n        }\n\n        bool futureValueExists = false;\n        uint256[] memory maturities = getMaturities(_ccy);\n\n        for (uint256 j = 0; j < maturities.length; j++) {\n            int256 currentFutureValue = _convertFutureValueToGenesisValue(\n                _ccy,\n                maturities[j],\n                _user\n            );\n\n            (uint256 activeOrderCount, bool isCleaned) = _cleanOrders(_ccy, maturities[j], _user);\n            totalActiveOrderCount += activeOrderCount;\n\n            if (currentFutureValue != 0 || isCleaned) {\n                futureValueExists = true;\n            }\n        }\n\n        if (\n            totalActiveOrderCount == 0 &&\n            !futureValueExists &&\n            genesisValueVault().getGenesisValue(_ccy, _user) == 0\n        ) {\n            Storage.slot().usedCurrencies[_user].remove(_ccy);\n        }\n    }\n\n    /**\n     * @notice Converts the future value to the genesis value if there is balance in the past maturity.\n     * @param _ccy Currency for pausing all lending markets\n     * @param _user User's address\n     * @return Current future value amount after update\n     */\n    function _convertFutureValueToGenesisValue(\n        bytes32 _ccy,\n        uint256 _maturity,\n        address _user\n    ) private returns (int256) {\n        address futureValueVault = Storage.slot().futureValueVaults[_ccy][\n            Storage.slot().maturityLendingMarkets[_ccy][_maturity]\n        ];\n        (int256 removedAmount, int256 currentAmount, uint256 basisMaturity) = IFutureValueVault(\n            futureValueVault\n        ).removeFutureValue(_user, _maturity);\n\n        if (removedAmount != 0) {\n            genesisValueVault().addGenesisValue(_ccy, _user, basisMaturity, removedAmount);\n        }\n\n        return currentAmount;\n    }\n\n    function _createOrder(\n        bytes32 _ccy,\n        uint256 _maturity,\n        address _user,\n        ProtocolTypes.Side _side,\n        uint256 _amount,\n        uint256 _unitPrice,\n        bool _isForced\n    ) private returns (bool isFilled) {\n        require(_amount > 0, \"Invalid amount\");\n        uint256 activeOrderCount = cleanOrders(_ccy, _user);\n\n        if (!_isForced) {\n            require(tokenVault().isCovered(_user, _ccy, _amount, _side), \"Not enough collateral\");\n        }\n\n        (uint256 filledFutureValue, uint256 remainingAmount) = ILendingMarket(\n            Storage.slot().maturityLendingMarkets[_ccy][_maturity]\n        ).createOrder(_side, _user, _amount, _unitPrice, _isForced);\n\n        if (!_isForced) {\n            // The case that an order was made, or taken partially\n            if (filledFutureValue == 0 || remainingAmount > 0) {\n                activeOrderCount += 1;\n            }\n\n            require(activeOrderCount <= MAXIMUM_ORDER_COUNT, \"Too many active orders\");\n        }\n\n        if (filledFutureValue != 0) {\n            address futureValueVault = Storage.slot().futureValueVaults[_ccy][\n                Storage.slot().maturityLendingMarkets[_ccy][_maturity]\n            ];\n\n            if (_side == ProtocolTypes.Side.BORROW) {\n                tokenVault().addDepositAmount(_user, _ccy, _amount - remainingAmount);\n                IFutureValueVault(futureValueVault).addBorrowFutureValue(\n                    _user,\n                    filledFutureValue,\n                    _maturity\n                );\n            } else {\n                tokenVault().removeDepositAmount(_user, _ccy, _amount - remainingAmount);\n                IFutureValueVault(futureValueVault).addLendFutureValue(\n                    _user,\n                    filledFutureValue,\n                    _maturity\n                );\n            }\n\n            emit FillOrder(_user, _ccy, _side, _maturity, _amount, _unitPrice, filledFutureValue);\n\n            isFilled = true;\n        }\n\n        Storage.slot().usedCurrencies[_user].add(_ccy);\n    }\n\n    function _cleanOrders(\n        bytes32 _ccy,\n        uint256 _maturity,\n        address _user\n    ) private returns (uint256 activeOrderCount, bool isCleaned) {\n        address futureValueVault = getFutureValueVault(_ccy, _maturity);\n\n        (\n            uint256 activeLendOrderCount,\n            uint256 activeBorrowOrderCount,\n            uint256 removedLendOrderFutureValue,\n            uint256 removedBorrowOrderFutureValue,\n            uint256 removedLendOrderAmount,\n            uint256 removedBorrowOrderAmount,\n            uint256 userCurrentMaturity\n        ) = ILendingMarket(Storage.slot().maturityLendingMarkets[_ccy][_maturity]).cleanOrders(\n                _user\n            );\n\n        if (removedLendOrderAmount > removedBorrowOrderAmount) {\n            tokenVault().removeDepositAmount(\n                _user,\n                _ccy,\n                removedLendOrderAmount - removedBorrowOrderAmount\n            );\n        } else if (removedLendOrderAmount < removedBorrowOrderAmount) {\n            tokenVault().addDepositAmount(\n                _user,\n                _ccy,\n                removedBorrowOrderAmount - removedLendOrderAmount\n            );\n        }\n\n        if (removedLendOrderFutureValue > 0) {\n            IFutureValueVault(futureValueVault).addLendFutureValue(\n                _user,\n                removedLendOrderFutureValue,\n                userCurrentMaturity\n            );\n            emit FillOrdersAsync(\n                _user,\n                _ccy,\n                ProtocolTypes.Side.LEND,\n                userCurrentMaturity,\n                removedLendOrderFutureValue\n            );\n        }\n\n        if (removedBorrowOrderFutureValue > 0) {\n            IFutureValueVault(futureValueVault).addBorrowFutureValue(\n                _user,\n                removedBorrowOrderFutureValue,\n                userCurrentMaturity\n            );\n            emit FillOrdersAsync(\n                _user,\n                _ccy,\n                ProtocolTypes.Side.BORROW,\n                userCurrentMaturity,\n                removedBorrowOrderFutureValue\n            );\n        }\n\n        isCleaned = (removedLendOrderFutureValue + removedBorrowOrderFutureValue) > 0;\n        activeOrderCount = activeLendOrderCount + activeBorrowOrderCount;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/libraries/BokkyPooBahsDateTimeLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n// ----------------------------------------------------------------------------\n// BokkyPooBah's DateTime Library v1.01\n//\n// A gas-efficient Solidity date and time library\n//\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\n//\n// Tested date range 1970/01/01 to 2345/12/31\n//\n// Conventions:\n// Unit      | Range         | Notes\n// :-------- |:-------------:|:-----\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\n// year      | 1970 ... 2345 |\n// month     | 1 ... 12      |\n// day       | 1 ... 31      |\n// hour      | 0 ... 23      |\n// minute    | 0 ... 59      |\n// second    | 0 ... 59      |\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\n//\n//\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\n// ----------------------------------------------------------------------------\n\nlibrary BokkyPooBahsDateTimeLibrary {\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\n    uint256 constant SECONDS_PER_MINUTE = 60;\n    int256 constant OFFSET19700101 = 2440588;\n\n    uint256 constant DOW_MON = 1;\n    uint256 constant DOW_TUE = 2;\n    uint256 constant DOW_WED = 3;\n    uint256 constant DOW_THU = 4;\n    uint256 constant DOW_FRI = 5;\n    uint256 constant DOW_SAT = 6;\n    uint256 constant DOW_SUN = 7;\n\n    // ------------------------------------------------------------------------\n    // Calculate the number of days from 1970/01/01 to year/month/day using\n    // the date conversion algorithm from\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\n    //\n    // days = day\n    //      - 32075\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\n    //      - offset\n    // ------------------------------------------------------------------------\n    function _daysFromDate(\n        uint256 year,\n        uint256 month,\n        uint256 day\n    ) internal pure returns (uint256 _days) {\n        require(year >= 1970);\n        int256 _year = int256(year);\n        int256 _month = int256(month);\n        int256 _day = int256(day);\n\n        int256 __days = _day -\n            32075 +\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\n            4 +\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\n            12 -\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\n            4 -\n            OFFSET19700101;\n\n        _days = uint256(__days);\n    }\n\n    // ------------------------------------------------------------------------\n    // Calculate year/month/day from the number of days since 1970/01/01 using\n    // the date conversion algorithm from\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\n    //\n    // int L = days + 68569 + offset\n    // int N = 4 * L / 146097\n    // L = L - (146097 * N + 3) / 4\n    // year = 4000 * (L + 1) / 1461001\n    // L = L - 1461 * year / 4 + 31\n    // month = 80 * L / 2447\n    // dd = L - 2447 * month / 80\n    // L = month / 11\n    // month = month + 2 - 12 * L\n    // year = 100 * (N - 49) + year + L\n    // ------------------------------------------------------------------------\n    function _daysToDate(uint256 _days)\n        internal\n        pure\n        returns (\n            uint256 year,\n            uint256 month,\n            uint256 day\n        )\n    {\n        int256 __days = int256(_days);\n\n        int256 L = __days + 68569 + OFFSET19700101;\n        int256 N = (4 * L) / 146097;\n        L = L - (146097 * N + 3) / 4;\n        int256 _year = (4000 * (L + 1)) / 1461001;\n        L = L - (1461 * _year) / 4 + 31;\n        int256 _month = (80 * L) / 2447;\n        int256 _day = L - (2447 * _month) / 80;\n        L = _month / 11;\n        _month = _month + 2 - 12 * L;\n        _year = 100 * (N - 49) + _year + L;\n\n        year = uint256(_year);\n        month = uint256(_month);\n        day = uint256(_day);\n    }\n\n    function timestampFromDate(\n        uint256 year,\n        uint256 month,\n        uint256 day\n    ) internal pure returns (uint256 timestamp) {\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\n    }\n\n    function timestampFromDateTime(\n        uint256 year,\n        uint256 month,\n        uint256 day,\n        uint256 hour,\n        uint256 minute,\n        uint256 second\n    ) internal pure returns (uint256 timestamp) {\n        timestamp =\n            _daysFromDate(year, month, day) *\n            SECONDS_PER_DAY +\n            hour *\n            SECONDS_PER_HOUR +\n            minute *\n            SECONDS_PER_MINUTE +\n            second;\n    }\n\n    function timestampToDate(uint256 timestamp)\n        internal\n        pure\n        returns (\n            uint256 year,\n            uint256 month,\n            uint256 day\n        )\n    {\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n    }\n\n    function timestampToDateTime(uint256 timestamp)\n        internal\n        pure\n        returns (\n            uint256 year,\n            uint256 month,\n            uint256 day,\n            uint256 hour,\n            uint256 minute,\n            uint256 second\n        )\n    {\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        uint256 secs = timestamp % SECONDS_PER_DAY;\n        hour = secs / SECONDS_PER_HOUR;\n        secs = secs % SECONDS_PER_HOUR;\n        minute = secs / SECONDS_PER_MINUTE;\n        second = secs % SECONDS_PER_MINUTE;\n    }\n\n    function isValidDate(\n        uint256 year,\n        uint256 month,\n        uint256 day\n    ) internal pure returns (bool valid) {\n        if (year >= 1970 && month > 0 && month <= 12) {\n            uint256 daysInMonth = _getDaysInMonth(year, month);\n            if (day > 0 && day <= daysInMonth) {\n                valid = true;\n            }\n        }\n    }\n\n    function isValidDateTime(\n        uint256 year,\n        uint256 month,\n        uint256 day,\n        uint256 hour,\n        uint256 minute,\n        uint256 second\n    ) internal pure returns (bool valid) {\n        if (isValidDate(year, month, day)) {\n            if (hour < 24 && minute < 60 && second < 60) {\n                valid = true;\n            }\n        }\n    }\n\n    function isLeapYear(uint256 timestamp) internal pure returns (bool leapYear) {\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        leapYear = _isLeapYear(year);\n    }\n\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\n    }\n\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\n    }\n\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\n    }\n\n    function getDaysInMonth(uint256 timestamp) internal pure returns (uint256 daysInMonth) {\n        (uint256 year, uint256 month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        daysInMonth = _getDaysInMonth(year, month);\n    }\n\n    function _getDaysInMonth(uint256 year, uint256 month)\n        internal\n        pure\n        returns (uint256 daysInMonth)\n    {\n        if (\n            month == 1 ||\n            month == 3 ||\n            month == 5 ||\n            month == 7 ||\n            month == 8 ||\n            month == 10 ||\n            month == 12\n        ) {\n            daysInMonth = 31;\n        } else if (month != 2) {\n            daysInMonth = 30;\n        } else {\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\n        }\n    }\n\n    // 1 = Monday, 7 = Sunday\n    function getDayOfWeek(uint256 timestamp) internal pure returns (uint256 dayOfWeek) {\n        uint256 _days = timestamp / SECONDS_PER_DAY;\n        dayOfWeek = ((_days + 3) % 7) + 1;\n    }\n\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\n    }\n\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\n    }\n\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n    }\n\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\n        uint256 secs = timestamp % SECONDS_PER_DAY;\n        hour = secs / SECONDS_PER_HOUR;\n    }\n\n    function getMinute(uint256 timestamp) internal pure returns (uint256 minute) {\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\n        minute = secs / SECONDS_PER_MINUTE;\n    }\n\n    function getSecond(uint256 timestamp) internal pure returns (uint256 second) {\n        second = timestamp % SECONDS_PER_MINUTE;\n    }\n\n    function addYears(uint256 timestamp, uint256 _years)\n        internal\n        pure\n        returns (uint256 newTimestamp)\n    {\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        year += _years;\n        uint256 daysInMonth = _getDaysInMonth(year, month);\n        if (day > daysInMonth) {\n            day = daysInMonth;\n        }\n        newTimestamp =\n            _daysFromDate(year, month, day) *\n            SECONDS_PER_DAY +\n            (timestamp % SECONDS_PER_DAY);\n        require(newTimestamp >= timestamp);\n    }\n\n    function addMonths(uint256 timestamp, uint256 _months)\n        internal\n        pure\n        returns (uint256 newTimestamp)\n    {\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        month += _months;\n        year += (month - 1) / 12;\n        month = ((month - 1) % 12) + 1;\n        uint256 daysInMonth = _getDaysInMonth(year, month);\n        if (day > daysInMonth) {\n            day = daysInMonth;\n        }\n        newTimestamp =\n            _daysFromDate(year, month, day) *\n            SECONDS_PER_DAY +\n            (timestamp % SECONDS_PER_DAY);\n        require(newTimestamp >= timestamp);\n    }\n\n    function addDays(uint256 timestamp, uint256 _days)\n        internal\n        pure\n        returns (uint256 newTimestamp)\n    {\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\n        require(newTimestamp >= timestamp);\n    }\n\n    function addHours(uint256 timestamp, uint256 _hours)\n        internal\n        pure\n        returns (uint256 newTimestamp)\n    {\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\n        require(newTimestamp >= timestamp);\n    }\n\n    function addMinutes(uint256 timestamp, uint256 _minutes)\n        internal\n        pure\n        returns (uint256 newTimestamp)\n    {\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\n        require(newTimestamp >= timestamp);\n    }\n\n    function addSeconds(uint256 timestamp, uint256 _seconds)\n        internal\n        pure\n        returns (uint256 newTimestamp)\n    {\n        newTimestamp = timestamp + _seconds;\n        require(newTimestamp >= timestamp);\n    }\n\n    function subYears(uint256 timestamp, uint256 _years)\n        internal\n        pure\n        returns (uint256 newTimestamp)\n    {\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        year -= _years;\n        uint256 daysInMonth = _getDaysInMonth(year, month);\n        if (day > daysInMonth) {\n            day = daysInMonth;\n        }\n        newTimestamp =\n            _daysFromDate(year, month, day) *\n            SECONDS_PER_DAY +\n            (timestamp % SECONDS_PER_DAY);\n        require(newTimestamp <= timestamp);\n    }\n\n    function subMonths(uint256 timestamp, uint256 _months)\n        internal\n        pure\n        returns (uint256 newTimestamp)\n    {\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        uint256 yearMonth = year * 12 + (month - 1) - _months;\n        year = yearMonth / 12;\n        month = (yearMonth % 12) + 1;\n        uint256 daysInMonth = _getDaysInMonth(year, month);\n        if (day > daysInMonth) {\n            day = daysInMonth;\n        }\n        newTimestamp =\n            _daysFromDate(year, month, day) *\n            SECONDS_PER_DAY +\n            (timestamp % SECONDS_PER_DAY);\n        require(newTimestamp <= timestamp);\n    }\n\n    function subDays(uint256 timestamp, uint256 _days)\n        internal\n        pure\n        returns (uint256 newTimestamp)\n    {\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\n        require(newTimestamp <= timestamp);\n    }\n\n    function subHours(uint256 timestamp, uint256 _hours)\n        internal\n        pure\n        returns (uint256 newTimestamp)\n    {\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\n        require(newTimestamp <= timestamp);\n    }\n\n    function subMinutes(uint256 timestamp, uint256 _minutes)\n        internal\n        pure\n        returns (uint256 newTimestamp)\n    {\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\n        require(newTimestamp <= timestamp);\n    }\n\n    function subSeconds(uint256 timestamp, uint256 _seconds)\n        internal\n        pure\n        returns (uint256 newTimestamp)\n    {\n        newTimestamp = timestamp - _seconds;\n        require(newTimestamp <= timestamp);\n    }\n\n    function diffYears(uint256 fromTimestamp, uint256 toTimestamp)\n        internal\n        pure\n        returns (uint256 _years)\n    {\n        require(fromTimestamp <= toTimestamp);\n        (uint256 fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\n        (uint256 toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\n        _years = toYear - fromYear;\n    }\n\n    function diffMonths(uint256 fromTimestamp, uint256 toTimestamp)\n        internal\n        pure\n        returns (uint256 _months)\n    {\n        require(fromTimestamp <= toTimestamp);\n        (uint256 fromYear, uint256 fromMonth, ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\n        (uint256 toYear, uint256 toMonth, ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\n    }\n\n    function diffDays(uint256 fromTimestamp, uint256 toTimestamp)\n        internal\n        pure\n        returns (uint256 _days)\n    {\n        require(fromTimestamp <= toTimestamp);\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\n    }\n\n    function diffHours(uint256 fromTimestamp, uint256 toTimestamp)\n        internal\n        pure\n        returns (uint256 _hours)\n    {\n        require(fromTimestamp <= toTimestamp);\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\n    }\n\n    function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp)\n        internal\n        pure\n        returns (uint256 _minutes)\n    {\n        require(fromTimestamp <= toTimestamp);\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\n    }\n\n    function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp)\n        internal\n        pure\n        returns (uint256 _seconds)\n    {\n        require(fromTimestamp <= toTimestamp);\n        _seconds = toTimestamp - fromTimestamp;\n    }\n}\n"
    },
    "contracts/CurrencyController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {ICurrencyController} from \"./interfaces/ICurrencyController.sol\";\nimport {Ownable} from \"./utils/Ownable.sol\";\nimport {Proxyable} from \"./utils/Proxyable.sol\";\nimport {CurrencyControllerStorage as Storage, Currency} from \"./storages/CurrencyControllerStorage.sol\";\n\n/**\n * @notice Implements managing of the supported currencies in the protocol.\n *\n * This contract links new currencies to ETH Chainlink price feeds, without an existing price feed\n * contract owner is not able to add a new currency into the protocol\n */\ncontract CurrencyController is ICurrencyController, Ownable, Proxyable {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    /**\n     * @notice Modifier to check if the currency is supported.\n     * @param _ccy Currency name in bytes32\n     */\n    modifier onlySupportedCurrency(bytes32 _ccy) {\n        require(currencyExists(_ccy), \"Unsupported asset\");\n        _;\n    }\n\n    /**\n     * @notice Initializes the contract.\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\n     * @param _owner The address of the contract owner\n     */\n    function initialize(address _owner) public initializer onlyProxy {\n        _transferOwnership(_owner);\n    }\n\n    // =========== CURRENCY CONTROL SECTION ===========\n\n    /**\n     * @notice Adds new currency into the protocol and links with existing ETH price feed of Chainlink.\n     * @param _ccy Currency name in bytes32\n     * @param _ethPriceFeed Address for ETH price feed\n     * @param _haircut Remaining ratio after haircut\n     */\n    function addCurrency(\n        bytes32 _ccy,\n        address _ethPriceFeed,\n        uint256 _haircut\n    ) public override onlyOwner {\n        Storage.slot().currencies.add(_ccy);\n        Storage.slot().haircuts[_ccy] = _haircut;\n\n        if (_ccy != \"ETH\") {\n            require(linkPriceFeed(_ccy, _ethPriceFeed, true), \"Invalid PriceFeed\");\n        } else {\n            require(linkPriceFeed(_ccy, _ethPriceFeed, false), \"Invalid PriceFeed\");\n        }\n        emit AddCurrency(_ccy, _haircut);\n    }\n\n    /**\n     * @notice Updates the flag indicating if the currency is supported in the protocol.\n     * @param _ccy Currency name in bytes32\n     */\n    function removeCurrency(bytes32 _ccy) public override onlyOwner {\n        Storage.slot().currencies.remove(_ccy);\n        emit RemoveCurrency(_ccy);\n    }\n\n    /**\n     * @notice Updates the haircut ratio for supported currency\n     * @param _ccy Currency name in bytes32\n     * @param _haircut Remaining ratio after haircut\n     */\n    function updateHaircut(bytes32 _ccy, uint256 _haircut)\n        public\n        override\n        onlyOwner\n        onlySupportedCurrency(_ccy)\n    {\n        require(_haircut > 0, \"Incorrect haircut ratio\");\n        require(_haircut <= 10000, \"Haircut ratio overflow\");\n\n        Storage.slot().haircuts[_ccy] = _haircut;\n\n        emit UpdateHaircut(_ccy, _haircut);\n    }\n\n    /**\n     * @notice Get ETH decimal for the selected currency.\n     * @param _ccy Currency name in bytes32\n     */\n    function getEthDecimals(bytes32 _ccy) external view returns (uint8) {\n        return Storage.slot().ethDecimals[_ccy];\n    }\n\n    /**\n     * @notice Gets USD decimal for the selected currency.\n     * @param _ccy Currency name in bytes32\n     */\n    function getUsdDecimals(bytes32 _ccy) external view returns (uint8) {\n        return Storage.slot().usdDecimals[_ccy];\n    }\n\n    /**\n     * @notice Gets all currencies.\n     * @return The array of the currency\n     */\n    function getCurrencies() external view override returns (bytes32[] memory) {\n        return Storage.slot().currencies.values();\n    }\n\n    /**\n     * @notice Gets haircut ratio for the selected currency.\n     * Haircut is used in bilateral netting cross-calculation.\n     * @param _ccy Currency name in bytes32\n     */\n    function getHaircut(bytes32 _ccy) external view override returns (uint256) {\n        return Storage.slot().haircuts[_ccy];\n    }\n\n    /**\n     * @notice Gets if the selected currency is supported.\n     * @param _ccy Currency name in bytes32\n     * @return The boolean if the selected currency is supported or not\n     */\n    function currencyExists(bytes32 _ccy) public view override returns (bool) {\n        return Storage.slot().currencies.contains(_ccy);\n    }\n\n    // =========== CHAINLINK PRICE FEED FUNCTIONS ===========\n    // TODO: Add additional price feeds in case if Chainlink is not reliable\n\n    /**\n     * @notice Links the contract to existing Chainlink price feed.\n     * @dev This method can use only Chainlink.\n     * @param _ccy Currency name in bytes32\n     * @param _priceFeedAddr The contract address of Chainlink price feed\n     * @param _isEthPriceFeed Boolean if the price feed is in ETH or not\n     * @return True if the execution of the operation succeeds\n     */\n    function linkPriceFeed(\n        bytes32 _ccy,\n        address _priceFeedAddr,\n        bool _isEthPriceFeed\n    ) public override onlyOwner returns (bool) {\n        require(_priceFeedAddr != address(0), \"Couldn't link 0x0 address\");\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(_priceFeedAddr);\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        require(price >= 0, \"Invalid PriceFeed\");\n\n        uint8 decimals = priceFeed.decimals();\n        require(decimals <= 18, \"Invalid decimals\");\n\n        if (_isEthPriceFeed) {\n            require(!_isETH(_ccy), \"Can't link to ETH\");\n            Storage.slot().ethPriceFeeds[_ccy] = priceFeed;\n            Storage.slot().ethDecimals[_ccy] = decimals;\n            emit AddPriceFeed(_ccy, \"ETH\", _priceFeedAddr);\n        } else {\n            Storage.slot().usdPriceFeeds[_ccy] = priceFeed;\n            Storage.slot().usdDecimals[_ccy] = decimals;\n            emit AddPriceFeed(_ccy, \"USD\", _priceFeedAddr);\n        }\n\n        return true;\n    }\n\n    /**\n     * @notice Removes existing Chainlink price feed.\n     * @param _ccy Currency name in bytes32\n     * @param _isEthPriceFeed Boolean if the price feed is in ETH or not\n     */\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed)\n        external\n        override\n        onlyOwner\n        onlySupportedCurrency(_ccy)\n    {\n        if (_isEthPriceFeed == true) {\n            address priceFeed = address(Storage.slot().ethPriceFeeds[_ccy]);\n\n            require(priceFeed != address(0), \"Invalid PriceFeed\");\n            delete Storage.slot().ethPriceFeeds[_ccy];\n            delete Storage.slot().ethDecimals[_ccy];\n\n            emit RemovePriceFeed(_ccy, \"ETH\", priceFeed);\n        } else {\n            address priceFeed = address(Storage.slot().usdPriceFeeds[_ccy]);\n\n            require(priceFeed != address(0), \"Invalid PriceFeed\");\n            delete Storage.slot().usdPriceFeeds[_ccy];\n            delete Storage.slot().usdDecimals[_ccy];\n\n            emit RemovePriceFeed(_ccy, \"USD\", priceFeed);\n        }\n    }\n\n    /**\n     * @notice Gets the last price in USD for the selected currency.\n     * @param _ccy Currency name in bytes32\n     * @return The last price in USD\n     */\n    function getLastUSDPrice(bytes32 _ccy) public view override returns (int256) {\n        AggregatorV3Interface priceFeed = Storage.slot().usdPriceFeeds[_ccy];\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n\n        return price;\n    }\n\n    /**\n     * @notice Gets the historical price in USD for the selected currency.\n     * @param _ccy Currency name in bytes32\n     * @param _roundId RoundId\n     * @return The historical price in USD\n     */\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId)\n        public\n        view\n        override\n        returns (int256)\n    {\n        AggregatorV3Interface priceFeed = Storage.slot().usdPriceFeeds[_ccy];\n        (, int256 price, , uint256 timeStamp, ) = priceFeed.getRoundData(_roundId);\n\n        require(timeStamp > 0, \"Round not completed yet\");\n        return price;\n    }\n\n    /**\n     * @notice Gets the last price in ETH for the selected currency.\n     * @param _ccy Currency name in bytes32\n     * @return The last price in ETH\n     */\n    function getLastETHPrice(bytes32 _ccy) public view override returns (int256) {\n        if (_isETH(_ccy)) return 1e18;\n\n        AggregatorV3Interface priceFeed = Storage.slot().ethPriceFeeds[_ccy];\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n\n        return price;\n    }\n\n    /**\n     * @notice Gets the historical price in ETH for the selected currency.\n     * @param _ccy Currency name in bytes32\n     * @param _roundId RoundId\n     * @return The historical price in ETH\n     */\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId)\n        public\n        view\n        override\n        returns (int256)\n    {\n        if (_isETH(_ccy)) return 1e18;\n\n        AggregatorV3Interface priceFeed = Storage.slot().ethPriceFeeds[_ccy];\n        (, int256 price, , uint256 timeStamp, ) = priceFeed.getRoundData(_roundId);\n\n        require(timeStamp > 0, \"Round not completed yet\");\n        return price;\n    }\n\n    /**\n     * @notice Gets the converted amount of currency in ETH.\n     * @param _ccy Currency that has to be converted to ETH\n     * @param _amount Amount to be converted\n     * @return amount The converted amount\n     */\n    function convertToETH(bytes32 _ccy, uint256 _amount)\n        external\n        view\n        override\n        returns (uint256 amount)\n    {\n        if (_isETH(_ccy)) return _amount;\n        if (_amount == 0) return 0;\n\n        AggregatorV3Interface priceFeed = Storage.slot().ethPriceFeeds[_ccy];\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n\n        amount = (_amount * uint256(price)) / 10**Storage.slot().ethDecimals[_ccy];\n    }\n\n    /**\n     * @notice Gets the converted amount of currency in ETH.\n     * @param _ccy Currency that has to be converted to ETH\n     * @param _amount Amount to be converted\n     * @return amount The converted amount\n     */\n    function convertToETH(bytes32 _ccy, int256 _amount)\n        external\n        view\n        override\n        returns (int256 amount)\n    {\n        if (_isETH(_ccy)) return _amount;\n        if (_amount == 0) return 0;\n\n        AggregatorV3Interface priceFeed = Storage.slot().ethPriceFeeds[_ccy];\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        amount = (_amount * price) / int256(10**Storage.slot().ethDecimals[_ccy]);\n    }\n\n    /**\n     * @notice Gets the converted amount of currency in ETH.\n     * @param _ccy Currency that has to be converted to ETH\n     * @param _amounts Amounts to be converted\n     * @return amounts The converted amounts\n     */\n    function convertToETH(bytes32 _ccy, uint256[] memory _amounts)\n        external\n        view\n        override\n        returns (uint256[] memory amounts)\n    {\n        if (_isETH(_ccy)) return _amounts;\n\n        amounts = new uint256[](_amounts.length);\n        for (uint256 i = 0; i < _amounts.length; i++) {\n            if (_amounts[i] == 0) continue;\n\n            AggregatorV3Interface priceFeed = Storage.slot().ethPriceFeeds[_ccy];\n            (, int256 price, , , ) = priceFeed.latestRoundData();\n\n            amounts[i] = (_amounts[i] * uint256(price)) / 10**Storage.slot().ethDecimals[_ccy];\n        }\n    }\n\n    /**\n     * @notice Gets the converted amount to the selected currency from ETH.\n     * @param _ccy Currency that has to be converted from ETH\n     * @param _amountETH Amount in ETH to be converted\n     * @return amount The converted amount\n     */\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH)\n        public\n        view\n        override\n        returns (uint256 amount)\n    {\n        if (_isETH(_ccy)) return _amountETH;\n\n        AggregatorV3Interface priceFeed = Storage.slot().ethPriceFeeds[_ccy];\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n\n        amount = (_amountETH * 10**Storage.slot().ethDecimals[_ccy]) / uint256(price); // add decimals checks\n        require(amount != 0, \"Too small amount\");\n    }\n\n    function _isETH(bytes32 _ccy) internal pure returns (bool) {\n        return _ccy == \"ETH\";\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AggregatorInterface.sol\";\nimport \"./AggregatorV3Interface.sol\";\n\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "contracts/mocks/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title MockV3Aggregator\n * @notice Based on the FluxAggregator contract\n * @notice Use this contract when you need to test\n * other contract's ability to read data from an\n * aggregator contract, but how the aggregator got\n * its answer is unimportant\n */\ncontract MockV3Aggregator is AggregatorV2V3Interface, Ownable {\n    uint256 public constant override version = 0;\n\n    bytes32 public priceFeedCcy;\n    uint8 public override decimals;\n    int256 public override latestAnswer;\n    uint256 public override latestTimestamp;\n    uint256 public override latestRound;\n\n    mapping(uint256 => int256) public override getAnswer;\n    mapping(uint256 => uint256) public override getTimestamp;\n    mapping(uint256 => uint256) private getStartedAt;\n\n    constructor(\n        uint8 _decimals,\n        bytes32 _ccy,\n        int256 _initialAnswer\n    ) Ownable() {\n        priceFeedCcy = _ccy;\n        decimals = _decimals;\n        updateAnswer(_initialAnswer);\n    }\n\n    function updateAnswer(int256 _answer) public onlyOwner {\n        latestAnswer = _answer;\n        latestTimestamp = block.timestamp;\n        latestRound++;\n        getAnswer[latestRound] = _answer;\n        getTimestamp[latestRound] = block.timestamp;\n        getStartedAt[latestRound] = block.timestamp;\n    }\n\n    function updateRoundData(\n        uint80 _roundId,\n        int256 _answer,\n        uint256 _timestamp,\n        uint256 _startedAt\n    ) public onlyOwner {\n        latestRound = _roundId;\n        latestAnswer = _answer;\n        latestTimestamp = _timestamp;\n        getAnswer[latestRound] = _answer;\n        getTimestamp[latestRound] = _timestamp;\n        getStartedAt[latestRound] = _startedAt;\n    }\n\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        override\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        return (\n            _roundId,\n            getAnswer[_roundId],\n            getStartedAt[_roundId],\n            getTimestamp[_roundId],\n            _roundId\n        );\n    }\n\n    function latestRoundData()\n        external\n        view\n        override\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        return (\n            uint80(latestRound),\n            getAnswer[latestRound],\n            getStartedAt[latestRound],\n            getTimestamp[latestRound],\n            uint80(latestRound)\n        );\n    }\n\n    function description() external pure override returns (string memory) {\n        return \"v0.7/tests/MockV3Aggregator.sol\";\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/ProxyController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IAddressResolver} from \"./interfaces/IAddressResolver.sol\";\nimport {IProxyController} from \"./interfaces/IProxyController.sol\";\nimport {Contracts} from \"./libraries/Contracts.sol\";\nimport {UpgradeabilityProxy} from \"./utils/UpgradeabilityProxy.sol\";\n\n/**\n * @notice Implements the management of proxy contracts.\n *\n * All proxy contracts are deployed from this contract.\n * This contract is also used to update the proxy implementation.\n */\n\ncontract ProxyController is IProxyController, Ownable {\n    IAddressResolver private resolver;\n    bytes32 private constant ADDRESS_RESOLVER = \"AddressResolver\";\n\n    /**\n     * @notice Contract constructor function.\n     * @param _resolver The address of the Address Resolver contract\n     *\n     * @dev Set a proxy contract address of AddressResolver if it already exists.\n     * If not, set zero address here and call `setAddressResolverImpl` using the implementation\n     * address of AddressResolver to create a proxy contract.\n     */\n    constructor(address _resolver) Ownable() {\n        if (_resolver != address(0)) {\n            UpgradeabilityProxy proxy = UpgradeabilityProxy(payable(_resolver));\n            require(proxy.implementation() != address(0), \"Proxy address not found\");\n            resolver = IAddressResolver(_resolver);\n        }\n    }\n\n    /**\n     * @notice Gets the proxy address of AddressResolver\n     * @return The contract address of AddressResolver\n     */\n    function getAddressResolverAddress() public view returns (address) {\n        return (address(resolver));\n    }\n\n    /**\n     * @notice Gets the proxy address fro selected name\n     * @param name The cache name of the contract\n     * @return proxyAddress The proxy address for selected name\n     */\n    function getAddress(bytes32 name) public view returns (address proxyAddress) {\n        proxyAddress = resolver.getAddress(name, \"Address not found\");\n        UpgradeabilityProxy proxy = UpgradeabilityProxy(payable(proxyAddress));\n\n        require(proxy.implementation() != address(0), \"Proxy address not found\");\n    }\n\n    /**\n     * @notice Sets the implementation contract of AddressResolver\n     * @param newImpl The address of implementation contract\n     */\n    function setAddressResolverImpl(address newImpl) external onlyOwner {\n        bytes memory data = abi.encodeWithSignature(\"initialize(address)\", msg.sender);\n        address proxyAddress = _updateImpl(ADDRESS_RESOLVER, newImpl, data);\n        resolver = IAddressResolver(proxyAddress);\n    }\n\n    /**\n     * @notice Sets the implementation contract of CurrencyController\n     * @param newImpl The address of implementation contract\n     */\n    function setBeaconProxyControllerImpl(address newImpl) external onlyOwner {\n        bytes memory data = abi.encodeWithSignature(\n            \"initialize(address,address)\",\n            msg.sender,\n            resolver\n        );\n        _updateImpl(Contracts.BEACON_PROXY_CONTROLLER, newImpl, data);\n    }\n\n    /**\n     * @notice  Sets the implementation contract of TokenVault\n     * @param newImpl The address of implementation contract\n     * @param liquidationThresholdRate  The rate used as the auto liquidation threshold\n     * @param uniswapRouter Uniswap router contract address\n     * @param WETH9 The address of WETH\n     */\n    function setTokenVaultImpl(\n        address newImpl,\n        uint256 liquidationThresholdRate,\n        address uniswapRouter,\n        address WETH9\n    ) external onlyOwner {\n        bytes memory data = abi.encodeWithSignature(\n            \"initialize(address,address,uint256,address,address)\",\n            msg.sender,\n            resolver,\n            liquidationThresholdRate,\n            uniswapRouter,\n            WETH9\n        );\n        _updateImpl(Contracts.TOKEN_VAULT, newImpl, data);\n    }\n\n    /**\n     * @notice Sets the implementation contract of CurrencyController\n     * @param newImpl The address of implementation contract\n     */\n    function setCurrencyControllerImpl(address newImpl) external onlyOwner {\n        bytes memory data = abi.encodeWithSignature(\"initialize(address)\", msg.sender);\n        _updateImpl(Contracts.CURRENCY_CONTROLLER, newImpl, data);\n    }\n\n    /**\n     * @notice Sets the implementation contract of GenesisValueVault\n     * @param newImpl The address of implementation contract\n     */\n    function setGenesisValueVaultImpl(address newImpl) external onlyOwner {\n        bytes memory data = abi.encodeWithSignature(\"initialize(address)\", resolver);\n        _updateImpl(Contracts.GENESIS_VALUE_VAULT, newImpl, data);\n    }\n\n    /**\n     * @notice Sets the implementation contract of LendingMarketController\n     * @param newImpl The address of implementation contract\n     */\n    function setLendingMarketControllerImpl(address newImpl) external onlyOwner {\n        bytes memory data = abi.encodeWithSignature(\n            \"initialize(address,address)\",\n            msg.sender,\n            resolver\n        );\n        _updateImpl(Contracts.LENDING_MARKET_CONTROLLER, newImpl, data);\n    }\n\n    /**\n     * @notice Updates admin addresses of proxy contract\n     * @param newAdmin The address of new admin\n     * @param destinations The destination contract addresses\n     */\n    function changeProxyAdmins(address newAdmin, address[] calldata destinations)\n        external\n        onlyOwner\n    {\n        for (uint256 i = 0; i < destinations.length; i++) {\n            UpgradeabilityProxy proxy = UpgradeabilityProxy(payable(destinations[i]));\n            proxy.changeAdmin(newAdmin);\n        }\n    }\n\n    /**\n     * @notice Updates the implementation contract of specified contract\n     * The first time the contract address is set, `UpgradeabilityProxy` is created.\n     * From the second time, the contract address set in the created `UpgradeabilityProxy`\n     * will be updated.\n     *\n     * @param name The cache name of the contract\n     * @param newAddress The address of implementation contract\n     * @param data the data in a delegate call to a specified function\n     */\n    function _updateImpl(\n        bytes32 name,\n        address newAddress,\n        bytes memory data\n    ) internal returns (address proxyAddress) {\n        proxyAddress = _getAddress(name);\n        UpgradeabilityProxy proxy;\n\n        if (proxyAddress == address(0)) {\n            proxy = new UpgradeabilityProxy(payable(newAddress), data);\n            proxyAddress = address(proxy);\n\n            emit ProxyCreated(name, proxyAddress, newAddress);\n        } else {\n            proxy = UpgradeabilityProxy(payable(proxyAddress));\n            address oldAddress = proxy.implementation();\n            proxy.upgradeTo(newAddress);\n            emit ProxyUpdated(name, proxyAddress, newAddress, oldAddress);\n        }\n    }\n\n    function _getAddress(bytes32 name) internal view returns (address) {\n        if (name == ADDRESS_RESOLVER) {\n            return address(resolver);\n        } else {\n            return resolver.getAddress(name);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IProxyController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IProxyController {\n    event ProxyCreated(\n        bytes32 indexed id,\n        address indexed proxyAddress,\n        address indexed implementationAddress\n    );\n\n    event ProxyUpdated(\n        bytes32 indexed id,\n        address indexed proxyAddress,\n        address indexed newImplementationAddress,\n        address oldImplementationAddress\n    );\n}\n"
    },
    "contracts/utils/UpgradeabilityProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\ncontract UpgradeabilityProxy is ERC1967Proxy {\n    constructor(address _logic, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\n        _changeAdmin(msg.sender);\n    }\n\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeTo(newImplementation);\n    }\n\n    function changeAdmin(address newAdmin) external ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    function admin() external view returns (address) {\n        return _getAdmin();\n    }\n\n    function implementation() external view returns (address) {\n        return ERC1967Proxy._implementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
    },
    "contracts/utils/UpgradeabilityBeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\n\ncontract UpgradeabilityBeaconProxy is BeaconProxy {\n    constructor(address _beacon, bytes memory _data) payable BeaconProxy(_beacon, _data) {\n        _changeAdmin(msg.sender);\n    }\n\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeTo(newImplementation);\n    }\n\n    function changeAdmin(address newAdmin) external ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    function admin() external view returns (address) {\n        return _getAdmin();\n    }\n\n    function implementation() external view returns (address) {\n        return BeaconProxy._implementation();\n    }\n}\n"
    },
    "contracts/BeaconProxyController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {UpgradeableBeacon} from \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\n// interfaces\nimport {IBeaconProxyController} from \"./interfaces/IBeaconProxyController.sol\";\nimport {IProxyController} from \"./interfaces/IProxyController.sol\";\n// libraries\nimport {AddressResolverLib} from \"./libraries/AddressResolverLib.sol\";\nimport {BeaconContracts, Contracts} from \"./libraries/Contracts.sol\";\n// mixins\nimport {MixinAddressResolver} from \"./mixins/MixinAddressResolver.sol\";\n// utils\nimport {Ownable} from \"./utils/Ownable.sol\";\nimport {Proxyable} from \"./utils/Proxyable.sol\";\nimport {UpgradeabilityBeaconProxy} from \"./utils/UpgradeabilityBeaconProxy.sol\";\n// storages\nimport {BeaconProxyControllerStorage as Storage} from \"./storages/BeaconProxyControllerStorage.sol\";\n\n/**\n * @notice Implements the management of beacon proxy contracts.\n *\n * All beacon proxy contracts are deployed from this contract.\n * This contract is also used to update the beacon proxy implementation.\n */\ncontract BeaconProxyController is IBeaconProxyController, MixinAddressResolver, Ownable, Proxyable {\n    /**\n     * @notice Modifier to make a function callable only by LendingMarketController contract.\n     */\n    modifier onlyLendingMarketController() {\n        require(\n            getAddress(Contracts.LENDING_MARKET_CONTROLLER) == msg.sender,\n            \"Caller is not the LendingMarketController\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Initializes the contract.\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\n     * @param _owner The address of the contract owner\n     * @param _resolver The address of the Address Resolver contract\n     */\n    function initialize(address _owner, address _resolver) public initializer onlyProxy {\n        _transferOwnership(_owner);\n        registerAddressResolver(_resolver);\n    }\n\n    // @inheritdoc MixinAddressResolver\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\n        contracts = new bytes32[](1);\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\n    }\n\n    /**\n     * @notice Gets the beacon proxy address to the selected name.\n     * @param beaconName The cache name of the beacon proxy\n     * @return beaconProxyAddress The beacon proxy address\n     */\n    function getBeaconProxyAddress(bytes32 beaconName)\n        external\n        view\n        override\n        returns (address beaconProxyAddress)\n    {\n        beaconProxyAddress = Storage.slot().registeredBeaconProxies[beaconName];\n        UpgradeabilityBeaconProxy beaconProxy = UpgradeabilityBeaconProxy(\n            payable(beaconProxyAddress)\n        );\n\n        require(beaconProxy.implementation() != address(0), \"Beacon proxy address not found\");\n    }\n\n    /**\n     * @notice Sets the implementation contract of FutureValueVault\n     * @param newImpl The address of implementation contract\n     */\n    function setFutureValueVaultImpl(address newImpl) external override onlyOwner {\n        _updateBeaconImpl(BeaconContracts.FUTURE_VALUE_VAULT, newImpl);\n    }\n\n    /**\n     * @notice Sets the implementation contract of LendingMarket\n     * @param newImpl The address of implementation contract\n     */\n    function setLendingMarketImpl(address newImpl) external override onlyOwner {\n        _updateBeaconImpl(BeaconContracts.LENDING_MARKET, newImpl);\n    }\n\n    /**\n     * @notice Deploys new FutureValueVault\n     * @notice Reverts on deployment market with existing currency and term\n     */\n    function deployFutureValueVault()\n        external\n        override\n        onlyLendingMarketController\n        returns (address futureValue)\n    {\n        bytes memory data = abi.encodeWithSignature(\"initialize(address)\", address(resolver()));\n        futureValue = _createProxy(BeaconContracts.FUTURE_VALUE_VAULT, data);\n    }\n\n    /**\n     * @notice Deploys new LendingMarket\n     * @param _ccy Main currency for new lending market\n     * @param _maturity The initial maturity of the market\n     * @param _genesisDate The initial date when the first market open\n     * @return market The proxy contract address of created lending market\n     */\n    function deployLendingMarket(\n        bytes32 _ccy,\n        uint256 _genesisDate,\n        uint256 _maturity\n    ) external override onlyLendingMarketController returns (address market) {\n        bytes memory data = abi.encodeWithSignature(\n            \"initialize(address,bytes32,uint256,uint256)\",\n            address(resolver()),\n            _ccy,\n            _maturity,\n            _genesisDate\n        );\n        market = _createProxy(BeaconContracts.LENDING_MARKET, data);\n    }\n\n    function _createProxy(bytes32 beaconName, bytes memory data) internal returns (address) {\n        address beaconProxyAddress = Storage.slot().registeredBeaconProxies[beaconName];\n        require(beaconProxyAddress != address(0), \"Beacon proxy is empty\");\n\n        return address(new UpgradeabilityBeaconProxy(beaconProxyAddress, data));\n    }\n\n    function _updateBeaconImpl(bytes32 name, address newAddress)\n        internal\n        returns (address beaconProxyAddress)\n    {\n        beaconProxyAddress = Storage.slot().registeredBeaconProxies[name];\n        UpgradeableBeacon beacon;\n\n        if (beaconProxyAddress == address(0)) {\n            beacon = new UpgradeableBeacon(newAddress);\n\n            Storage.slot().registeredBeaconProxies[name] = beaconProxyAddress = address(beacon);\n\n            emit BeaconProxyCreated(name, beaconProxyAddress, newAddress);\n        } else {\n            beacon = UpgradeableBeacon(beaconProxyAddress);\n            address oldAddress = beacon.implementation();\n            beacon.upgradeTo(newAddress);\n            emit BeaconProxyUpdated(name, beaconProxyAddress, newAddress, oldAddress);\n        }\n    }\n}\n"
    },
    "contracts/storages/BeaconProxyControllerStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nlibrary BeaconProxyControllerStorage {\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"sf.storage.beaconProxyController\");\n\n    struct Storage {\n        mapping(bytes32 => address) registeredBeaconProxies;\n    }\n\n    function slot() internal pure returns (Storage storage r) {\n        bytes32 _slot = STORAGE_SLOT;\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := _slot\n        }\n    }\n}\n"
    },
    "contracts/mocks/MockSwapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {ISwapRouter} from \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\n// libraries\nimport {Contracts} from \"../libraries/Contracts.sol\";\nimport {ERC20Handler} from \"../libraries/ERC20Handler.sol\";\n// mixins\nimport {MixinAddressResolver} from \"../mixins/MixinAddressResolver.sol\";\n\ncontract MockSwapRouter is MixinAddressResolver {\n    mapping(address => bytes32) private currencies;\n\n    constructor(address _resolver, address _WETH9) {\n        registerAddressResolver(_resolver);\n        ERC20Handler.initialize(_WETH9);\n\n        buildCache();\n    }\n\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\n        contracts = new bytes32[](1);\n        contracts[0] = Contracts.CURRENCY_CONTROLLER;\n    }\n\n    function setToken(bytes32 ccy, address token) external {\n        currencies[token] = ccy;\n    }\n\n    function exactOutputSingle(ISwapRouter.ExactOutputSingleParams calldata params)\n        external\n        returns (uint256 amountIn)\n    {\n        uint256 amountOutInETH = currencyController().convertToETH(\n            currencies[params.tokenOut],\n            params.amountOut\n        );\n\n        amountIn = currencyController().convertFromETH(currencies[params.tokenIn], amountOutInETH);\n\n        require(amountIn <= params.amountInMaximum, \"Too much requested\");\n\n        // ERC20Handler.safeTransfer(params.tokenIn, msg.sender, amountIn);\n        ERC20Handler.safeTransferFrom(params.tokenIn, msg.sender, address(this), amountIn);\n        // ERC20Handler.safeTransferFrom(params.tokenOut, address(this), msg.sender, params.amountOut);\n        ERC20Handler.safeTransfer(params.tokenOut, msg.sender, params.amountOut);\n    }\n}\n"
    },
    "contracts/mocks/tokens/MockWETH9.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../../interfaces/IWETH9.sol\";\n\ncontract MockWETH9 is IWETH9 {\n    string public name = \"Wrapped Ether\";\n    string public symbol = \"WETH\";\n    uint8 public decimals = 18;\n\n    mapping(address => uint256) public override balanceOf;\n    mapping(address => mapping(address => uint256)) public override allowance;\n\n    receive() external payable {\n        deposit();\n    }\n\n    function deposit() public payable override {\n        balanceOf[msg.sender] += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint256 wad) public override {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        payable(msg.sender).transfer(wad);\n        emit Withdrawal(msg.sender, wad);\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return address(this).balance;\n    }\n\n    function approve(address guy, uint256 wad) public override returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        emit Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint256 wad) public override returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 wad\n    ) public override returns (bool) {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != type(uint256).max - 1) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/mocks/tokens/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {IMockERC20} from \"./IMockERC20.sol\";\n\ncontract MockERC20 is IMockERC20, ERC20, AccessControl {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    modifier onlyMinter() {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"must have minter role\");\n        _;\n    }\n\n    modifier onlyAdmin() {\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"must have admin role\");\n        _;\n    }\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 initialBalance\n    ) payable ERC20(name, symbol) {\n        _mint(msg.sender, initialBalance);\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _setupRole(MINTER_ROLE, _msgSender());\n    }\n\n    function mint(address account, uint256 amount) external override onlyMinter {\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) external override onlyMinter {\n        _burn(account, amount);\n    }\n\n    function setMinterRole(address account) external override onlyAdmin {\n        _grantRole(MINTER_ROLE, account);\n    }\n\n    function removeMinterRole(address account) external override onlyAdmin {\n        _revokeRole(MINTER_ROLE, account);\n    }\n}\n"
    },
    "contracts/mocks/tokens/IMockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IMockERC20 {\n    event AddressImported(bytes32 name, address destination);\n\n    function mint(address account, uint256 amount) external;\n\n    function burn(address account, uint256 amount) external;\n\n    function setMinterRole(address account) external;\n\n    function removeMinterRole(address account) external;\n}\n"
    },
    "contracts/mocks/tokens/MockWBTC.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\nimport {MockERC20} from \"./MockERC20.sol\";\n\ncontract MockWBTC is MockERC20 {\n    string private _name = \"Wrapped BTC\";\n    string private _symbol = \"WBTC\";\n\n    constructor(uint256 initialBalance) payable MockERC20(_name, _symbol, initialBalance) {}\n\n    function decimals() public view virtual override returns (uint8) {\n        return 8;\n    }\n}\n"
    },
    "contracts/mocks/tokens/MockUSDC.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\nimport {MockERC20} from \"./MockERC20.sol\";\n\ncontract MockUSDC is MockERC20 {\n    string private _name = \"USD Coin\";\n    string private _symbol = \"USDC\";\n\n    constructor(uint256 initialBalance) payable MockERC20(_name, _symbol, initialBalance) {}\n\n    function decimals() public view virtual override returns (uint8) {\n        return 6;\n    }\n}\n"
    },
    "contracts/mocks/tokens/TokenFaucet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IMockERC20} from \"./IMockERC20.sol\";\n\ncontract TokenFaucet is Ownable {\n    uint256 private constant MINT_INTERVAL = 1 hours;\n    mapping(bytes32 => address) currencies;\n    mapping(bytes32 => uint256) mintableAmounts;\n\n    function getCurrencyAddress(bytes32 _ccy) external view returns (address) {\n        return currencies[_ccy];\n    }\n\n    function registerCurrency(\n        bytes32 _ccy,\n        address _token,\n        uint256 _mintableAmount\n    ) external onlyOwner {\n        currencies[_ccy] = _token;\n        mintableAmounts[_ccy] = _mintableAmount;\n    }\n\n    function mint(bytes32 _ccy) public {\n        address tokenAddress = currencies[_ccy];\n        IMockERC20(tokenAddress).mint(msg.sender, mintableAmounts[_ccy]);\n    }\n}\n"
    },
    "contracts/mocks/tokens/MockEFIL.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\nimport {MockERC20} from \"./MockERC20.sol\";\n\ncontract MockEFIL is MockERC20 {\n    string private _name = \"Ethereum Wrapped Filecoin\";\n    string private _symbol = \"eFIL\";\n\n    constructor(uint256 initialBalance) payable MockERC20(_name, _symbol, initialBalance) {}\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/LendingMarket.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\n// interfaces\nimport {ILendingMarket} from \"./interfaces/ILendingMarket.sol\";\n// libraries\nimport {Contracts} from \"./libraries/Contracts.sol\";\nimport {OrderBookLogic} from \"./libraries/OrderBookLogic.sol\";\n// mixins\nimport {MixinAddressResolver} from \"./mixins/MixinAddressResolver.sol\";\n// types\nimport {ProtocolTypes} from \"./types/ProtocolTypes.sol\";\n// utils\nimport {Proxyable} from \"./utils/Proxyable.sol\";\n// storages\nimport {LendingMarketStorage as Storage, RemainingOrder} from \"./storages/LendingMarketStorage.sol\";\n\n/**\n * @notice Implements the module that allows lending market participants to create/cancel market orders,\n * and also provides a future value calculation module.\n *\n * For updates, this contract is basically called from `LendingMarketController.sol`instead of being called \\\n * directly by the user.\n *\n * @dev The market orders is stored in structured red-black trees and doubly linked lists in each node.\n */\ncontract LendingMarket is ILendingMarket, MixinAddressResolver, Pausable, Proxyable {\n    /**\n     * @notice Modifier to make a function callable only by order maker.\n     * @param _orderId Market order id\n     */\n    modifier onlyMaker(address user, uint48 _orderId) {\n        (, , , address maker, , ) = getOrder(_orderId);\n        require(maker != address(0), \"Order not found\");\n        require(user == maker, \"Caller is not the maker\");\n        _;\n    }\n\n    /**\n     * @notice Modifier to check if the market is opened.\n     */\n    modifier ifOpened() {\n        require(isOpened(), \"Market is not opened\");\n        _;\n    }\n\n    /**\n     * @notice Modifier to check if the market is matured.\n     */\n    modifier ifMatured() {\n        require(isMatured(), \"Market is not matured\");\n        _;\n    }\n\n    /**\n     * @notice Initializes the contract.\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\n     * @param _resolver The address of the Address Resolver contract\n     * @param _ccy The main currency for the order book\n     * @param _maturity The initial maturity of the market\n     * @param _genesisDate The initial date when the first market open\n     */\n    function initialize(\n        address _resolver,\n        bytes32 _ccy,\n        uint256 _maturity,\n        uint256 _genesisDate\n    ) public initializer onlyBeacon {\n        registerAddressResolver(_resolver);\n\n        Storage.slot().ccy = _ccy;\n        Storage.slot().maturity = _maturity;\n        Storage.slot().genesisDate = _genesisDate;\n\n        buildCache();\n    }\n\n    // @inheritdoc MixinAddressResolver\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\n        contracts = new bytes32[](1);\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\n    }\n\n    // @inheritdoc MixinAddressResolver\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\n        contracts = new bytes32[](1);\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\n    }\n\n    /**\n     * @notice Gets the market data.\n     * @return market The market data\n     */\n    function getMarket() external view override returns (Market memory market) {\n        return\n            Market({\n                ccy: Storage.slot().ccy,\n                maturity: Storage.slot().maturity,\n                genesisDate: Storage.slot().genesisDate,\n                borrowUnitPrice: getBorrowUnitPrice(),\n                lendUnitPrice: getLendUnitPrice(),\n                midUnitPrice: getMidUnitPrice()\n            });\n    }\n\n    /**\n     * @notice Gets the highest borrow price per future value.\n     * @return The highest borrow price per future value\n     */\n    function getBorrowUnitPrice() public view override returns (uint256) {\n        return OrderBookLogic.getHighestBorrowUnitPrice();\n    }\n\n    /**\n     * @notice Gets the lowest lend price per future value.\n     * @return The lowest lend price per future value\n     */\n    function getLendUnitPrice() public view override returns (uint256) {\n        return OrderBookLogic.getLowestLendUnitPrice();\n    }\n\n    /**\n     * @notice Gets the mid price per future value.\n     * @return The mid price per future value\n     */\n    function getMidUnitPrice() public view override returns (uint256) {\n        uint256 borrowUnitPrice = getBorrowUnitPrice();\n        uint256 lendUnitPrice = getLendUnitPrice();\n        return (borrowUnitPrice + lendUnitPrice) / 2;\n    }\n\n    /**\n     * @notice Gets the order book of borrow.\n     * @param _limit Max limit to get unit prices\n     * @return unitPrices The array of borrow unit prices\n     */\n    function getBorrowOrderBook(uint256 _limit)\n        external\n        view\n        override\n        returns (\n            uint256[] memory unitPrices,\n            uint256[] memory amounts,\n            uint256[] memory quantities\n        )\n    {\n        return OrderBookLogic.getBorrowOrderBook(_limit);\n    }\n\n    /**\n     * @notice Gets the order book of lend.\n     * @param _limit Max limit to get unit prices\n     * @return unitPrices The array of lending unit prices\n     */\n    function getLendOrderBook(uint256 _limit)\n        external\n        view\n        override\n        returns (\n            uint256[] memory unitPrices,\n            uint256[] memory amounts,\n            uint256[] memory quantities\n        )\n    {\n        return OrderBookLogic.getLendOrderBook(_limit);\n    }\n\n    /**\n     * @notice Gets the current market maturity.\n     * @return maturity The market maturity\n     */\n    function getMaturity() external view override returns (uint256 maturity) {\n        return Storage.slot().maturity;\n    }\n\n    /**\n     * @notice Gets the market currency.\n     * @return currency The market currency\n     */\n    function getCurrency() external view override returns (bytes32 currency) {\n        return Storage.slot().ccy;\n    }\n\n    /**\n     * @notice Gets if the market is matured.\n     * @return The boolean if the market is matured or not\n     */\n    function isMatured() public view override returns (bool) {\n        return block.timestamp >= Storage.slot().maturity;\n    }\n\n    /**\n     * @notice Gets if the market is opened.\n     * @return The boolean if the market is opened or not\n     */\n    function isOpened() public view override returns (bool) {\n        return !isMatured() && block.timestamp >= Storage.slot().genesisDate;\n    }\n\n    /**\n     * @notice Gets the market order from the order book.\n     * @param _orderId The market order id\n     * @return side Order position type, Borrow or Lend\n     * @return unitPrice Amount of interest unit price\n     * @return maturity The maturity of the selected order\n     * @return maker The order maker\n     * @return amount Order amount\n     * @return timestamp Timestamp when the order was created\n     */\n    function getOrder(uint48 _orderId)\n        public\n        view\n        override\n        returns (\n            ProtocolTypes.Side side,\n            uint256 unitPrice,\n            uint256 maturity,\n            address maker,\n            uint256 amount,\n            uint256 timestamp\n        )\n    {\n        return OrderBookLogic.getOrder(_orderId);\n    }\n\n    /**\n     * @notice Calculates and gets the active and inactive amounts from the user orders of lending deals.\n     * @param _user User's address\n     * @return activeAmount The total amount of active order on the order book\n     * @return inactiveAmount The total amount of inactive orders filled on the order book\n     * @return inactiveFutureValue The total future value amount of inactive orders filled on the order book\n     * @return maturity The maturity of market that orders were placed.\n     */\n    function getTotalAmountFromLendOrders(address _user)\n        external\n        view\n        override\n        returns (\n            uint256 activeAmount,\n            uint256 inactiveAmount,\n            uint256 inactiveFutureValue,\n            uint256 maturity\n        )\n    {\n        return OrderBookLogic.getTotalAmountFromLendOrders(_user);\n    }\n\n    /**\n     * @notice Calculates and gets the active and inactive amounts from the user orders of borrowing deals.\n     * @param _user User's address\n     * @return activeAmount The total amount of active order on the order book\n     * @return inactiveAmount The total amount of inactive orders filled on the order book\n     * @return inactiveFutureValue The total future value amount of inactive orders filled on the order book\n     * @return maturity The maturity of market that orders were placed.\n     */\n    function getTotalAmountFromBorrowOrders(address _user)\n        external\n        view\n        override\n        returns (\n            uint256 activeAmount,\n            uint256 inactiveAmount,\n            uint256 inactiveFutureValue,\n            uint256 maturity\n        )\n    {\n        return OrderBookLogic.getTotalAmountFromBorrowOrders(_user);\n    }\n\n    /**\n     * @notice Gets the order ids of active lending order on the order book\n     * @param _user User's address\n     */\n    function getActiveLendOrderIds(address _user)\n        external\n        view\n        override\n        returns (uint48[] memory activeOrderIds)\n    {\n        (activeOrderIds, ) = OrderBookLogic.getActiveLendOrderIds(_user);\n    }\n\n    /**\n     * @notice Gets the order ids of active borrowing order on the order book\n     * @param _user User's address\n     */\n    function getActiveBorrowOrderIds(address _user)\n        external\n        view\n        override\n        returns (uint48[] memory activeOrderIds)\n    {\n        (activeOrderIds, ) = OrderBookLogic.getActiveBorrowOrderIds(_user);\n    }\n\n    /**\n     * @notice Estimates the filled amount at the time of order creation on the order book\n     * using the future value amount.\n     * @param _side Order position type, Borrow or Lend\n     * @param _futureValue Future value amount\n     * @return amount The estimated amount in the present value that is filled on the order book\n     */\n    function estimateFilledAmount(ProtocolTypes.Side _side, uint256 _futureValue)\n        external\n        view\n        override\n        returns (uint256 amount)\n    {\n        return OrderBookLogic.estimateFilledAmount(_side, _futureValue);\n    }\n\n    /**\n     * @notice Opens market\n     * @param _maturity The new maturity\n     * @return prevMaturity The previous maturity updated\n     */\n    function openMarket(uint256 _maturity)\n        external\n        override\n        ifMatured\n        onlyAcceptedContracts\n        returns (uint256 prevMaturity)\n    {\n        prevMaturity = Storage.slot().maturity;\n        Storage.slot().maturity = _maturity;\n\n        emit OpenMarket(_maturity, prevMaturity);\n    }\n\n    /**\n     * @notice Cancels the order.\n     * @param _user User address\n     * @param _orderId Market order id\n     * @return side The canceled order position type\n     * @return removedAmount The removed order amount from the order book by canceling\n     * @return unitPrice The canceled order unit price\n     */\n    function cancelOrder(address _user, uint48 _orderId)\n        external\n        override\n        onlyMaker(_user, _orderId)\n        whenNotPaused\n        onlyAcceptedContracts\n        returns (\n            ProtocolTypes.Side side,\n            uint256 removedAmount,\n            uint256 unitPrice\n        )\n    {\n        (side, removedAmount, unitPrice) = OrderBookLogic.removeOrder(_user, _orderId);\n\n        emit ILendingMarket.CancelOrder(\n            _orderId,\n            msg.sender,\n            side,\n            Storage.slot().ccy,\n            Storage.slot().maturity,\n            removedAmount,\n            unitPrice\n        );\n    }\n\n    /**\n     * @notice Cleans own orders to remove order ids that are already filled on the order book.\n     * @dev The order list per user is not updated in real-time when an order is filled.\n     * This function removes the filled order from that order list per user to reduce gas costs\n     * for calculating if the collateral is enough or not.\n     *\n     * @param _user User address\n     * @return activeLendOrderCount The total amount of active lend order on the order book\n     * @return activeBorrowOrderCount The total amount of active borrow order on the order book\n     * @return removedLendOrderFutureValue The total FV amount of the removed lend order amount from the order book\n     * @return removedBorrowOrderFutureValue The total FV amount of the removed borrow order amount from the order book\n     * @return removedLendOrderAmount The total PV amount of the removed lend order amount from the order book\n     * @return removedBorrowOrderAmount The total PV amount of the removed borrow order amount from the order book\n     * @return maturity The maturity of the removed orders\n     */\n    function cleanOrders(address _user)\n        external\n        override\n        returns (\n            uint256 activeLendOrderCount,\n            uint256 activeBorrowOrderCount,\n            uint256 removedLendOrderFutureValue,\n            uint256 removedBorrowOrderFutureValue,\n            uint256 removedLendOrderAmount,\n            uint256 removedBorrowOrderAmount,\n            uint256 maturity\n        )\n    {\n        maturity = Storage.slot().userCurrentMaturities[_user];\n\n        uint48[] memory lendOrderIds;\n        uint48[] memory borrowOrderIds;\n\n        (\n            lendOrderIds,\n            activeLendOrderCount,\n            removedLendOrderFutureValue,\n            removedLendOrderAmount\n        ) = OrderBookLogic.cleanLendOrders(_user, maturity);\n\n        (\n            borrowOrderIds,\n            activeBorrowOrderCount,\n            removedBorrowOrderFutureValue,\n            removedBorrowOrderAmount\n        ) = OrderBookLogic.cleanBorrowOrders(_user, maturity);\n\n        if (removedLendOrderAmount > 0) {\n            emit CleanOrders(\n                lendOrderIds,\n                _user,\n                ProtocolTypes.Side.LEND,\n                Storage.slot().ccy,\n                Storage.slot().maturity\n            );\n        }\n\n        if (removedBorrowOrderAmount > 0) {\n            emit CleanOrders(\n                borrowOrderIds,\n                _user,\n                ProtocolTypes.Side.BORROW,\n                Storage.slot().ccy,\n                Storage.slot().maturity\n            );\n        }\n    }\n\n    /**\n     * @notice Creates the order. Takes the order if the order is matched,\n     * and places new order if not match it.\n     * @param _side Order position type, Borrow or Lend\n     * @param _user User's address\n     * @param _amount Amount of funds the maker wants to borrow/lend\n     * @param _unitPrice Amount of unit price taker wish to borrow/lend\n     * @param _ignoreRemainingAmount Boolean for whether to ignore the remaining amount after taking orders\n     * @return filledFutureValue The total FV amount of the filled order amount on the order book\n     * @return remainingAmount The remaining amount that is not filled in the order book\n     */\n    function createOrder(\n        ProtocolTypes.Side _side,\n        address _user,\n        uint256 _amount,\n        uint256 _unitPrice,\n        bool _ignoreRemainingAmount\n    )\n        external\n        override\n        whenNotPaused\n        onlyAcceptedContracts\n        ifOpened\n        returns (uint256 filledFutureValue, uint256 remainingAmount)\n    {\n        uint256 userMaturity = Storage.slot().userCurrentMaturities[_user];\n        require(_amount > 0, \"Can't place empty amount\");\n        require(\n            userMaturity == Storage.slot().maturity ||\n                (userMaturity != Storage.slot().maturity &&\n                    Storage.slot().activeLendOrderIds[_user].length == 0 &&\n                    Storage.slot().activeBorrowOrderIds[_user].length == 0),\n            \"Order found in past maturity.\"\n        );\n\n        if (userMaturity != Storage.slot().maturity) {\n            Storage.slot().userCurrentMaturities[_user] = Storage.slot().maturity;\n        }\n\n        bool isExists = _unitPrice == 0 ||\n            (\n                _side == ProtocolTypes.Side.LEND\n                    ? OrderBookLogic.getHighestBorrowUnitPrice() >= _unitPrice\n                    : OrderBookLogic.getLowestLendUnitPrice() <= _unitPrice\n            );\n\n        if (isExists) {\n            (filledFutureValue, remainingAmount) = _takeOrder(\n                _side,\n                _user,\n                _amount,\n                _unitPrice,\n                _ignoreRemainingAmount\n            );\n        } else {\n            _makeOrder(_side, _user, _amount, _unitPrice, false, 0);\n        }\n    }\n\n    /**\n     * @notice Pauses the lending market.\n     */\n    function pauseMarket() external override onlyAcceptedContracts {\n        _pause();\n    }\n\n    /**\n     * @notice Unpauses the lending market.\n     */\n    function unpauseMarket() external override onlyAcceptedContracts {\n        _unpause();\n    }\n\n    /**\n     * @notice Makes new market order.\n     * @param _side Order position type, Borrow or Lend\n     * @param _user User's address\n     * @param _amount Amount of funds the maker wants to borrow/lend\n     * @param _unitPrice Preferable interest unit price\n     * @param _originalOrderId The original order id that filled partially\n     */\n    function _makeOrder(\n        ProtocolTypes.Side _side,\n        address _user,\n        uint256 _amount,\n        uint256 _unitPrice,\n        bool _isInterruption,\n        uint48 _originalOrderId\n    ) private returns (uint48 orderId) {\n        orderId = OrderBookLogic.insertOrder(_side, _user, _amount, _unitPrice, _isInterruption);\n\n        emit ILendingMarket.MakeOrder(\n            orderId,\n            _originalOrderId,\n            _user,\n            _side,\n            Storage.slot().ccy,\n            Storage.slot().maturity,\n            _amount,\n            _unitPrice\n        );\n    }\n\n    /**\n     * @notice Takes the market order.\n     * @param _side Order position type, Borrow or Lend\n     * @param _user User's address\n     * @param _amount Amount of funds the maker wants to borrow/lend\n     * @param _unitPrice Amount of unit price taken\n     * @param _ignoreRemainingAmount Boolean for whether to ignore the remaining amount after taking orders\n     */\n    function _takeOrder(\n        ProtocolTypes.Side _side,\n        address _user,\n        uint256 _amount,\n        uint256 _unitPrice,\n        bool _ignoreRemainingAmount\n    ) private returns (uint256 filledFutureValue, uint256 remainingAmount) {\n        RemainingOrder memory remainingOrder;\n\n        (remainingOrder, filledFutureValue, remainingAmount) = OrderBookLogic.dropOrders(\n            _side,\n            _amount,\n            _unitPrice\n        );\n\n        emit ILendingMarket.TakeOrders(\n            _user,\n            _side,\n            Storage.slot().ccy,\n            Storage.slot().maturity,\n            _amount - remainingAmount,\n            _unitPrice,\n            filledFutureValue\n        );\n\n        if (remainingOrder.amount > 0) {\n            // Make a new order for the remaining amount of a partially filled order\n            _makeOrder(\n                _side == ProtocolTypes.Side.BORROW\n                    ? ProtocolTypes.Side.LEND\n                    : ProtocolTypes.Side.BORROW,\n                remainingOrder.maker,\n                remainingOrder.amount,\n                remainingOrder.unitPrice,\n                true,\n                remainingOrder.orderId\n            );\n        }\n\n        if (remainingAmount > 0 && _unitPrice != 0 && !_ignoreRemainingAmount) {\n            // Make a new order for the remaining amount of input\n            _makeOrder(_side, _user, remainingAmount, _unitPrice, false, 0);\n        }\n    }\n}\n"
    },
    "contracts/libraries/OrderBookLogic.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {ILendingMarket} from \"../interfaces/ILendingMarket.sol\";\nimport {HitchensOrderStatisticsTreeLib, RemainingOrder, OrderItem} from \"../libraries/HitchensOrderStatisticsTreeLib.sol\";\nimport {ProtocolTypes} from \"../types/ProtocolTypes.sol\";\nimport {LendingMarketStorage as Storage, MarketOrder} from \"../storages/LendingMarketStorage.sol\";\n\nlibrary OrderBookLogic {\n    using HitchensOrderStatisticsTreeLib for HitchensOrderStatisticsTreeLib.Tree;\n\n    function getHighestBorrowUnitPrice() public view returns (uint256) {\n        return Storage.slot().borrowOrders[Storage.slot().maturity].last();\n    }\n\n    function getLowestLendUnitPrice() public view returns (uint256) {\n        uint256 unitPrice = Storage.slot().lendOrders[Storage.slot().maturity].first();\n        return unitPrice == 0 ? ProtocolTypes.PRICE_DIGIT : unitPrice;\n    }\n\n    function getBorrowOrderBook(uint256 _limit)\n        public\n        view\n        returns (\n            uint256[] memory unitPrices,\n            uint256[] memory amounts,\n            uint256[] memory quantities\n        )\n    {\n        unitPrices = new uint256[](_limit);\n        amounts = new uint256[](_limit);\n        quantities = new uint256[](_limit);\n\n        uint256 unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].last();\n        unitPrices[0] = unitPrice;\n        amounts[0] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeTotalAmount(\n            unitPrice\n        );\n        quantities[0] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeCount(\n            unitPrice\n        );\n\n        for (uint256 i = 1; i < unitPrices.length; i++) {\n            if (unitPrice == 0) {\n                break;\n            }\n\n            unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].prev(unitPrice);\n            unitPrices[i] = unitPrice;\n            amounts[i] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeTotalAmount(\n                unitPrice\n            );\n            quantities[i] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeCount(\n                unitPrice\n            );\n        }\n    }\n\n    function getLendOrderBook(uint256 _limit)\n        public\n        view\n        returns (\n            uint256[] memory unitPrices,\n            uint256[] memory amounts,\n            uint256[] memory quantities\n        )\n    {\n        unitPrices = new uint256[](_limit);\n        amounts = new uint256[](_limit);\n        quantities = new uint256[](_limit);\n\n        uint256 unitPrice = Storage.slot().lendOrders[Storage.slot().maturity].first();\n        unitPrices[0] = unitPrice;\n        amounts[0] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\n            unitPrice\n        );\n        quantities[0] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeCount(unitPrice);\n\n        for (uint256 i = 1; i < unitPrices.length; i++) {\n            if (unitPrice == 0) {\n                break;\n            }\n\n            unitPrice = Storage.slot().lendOrders[Storage.slot().maturity].next(unitPrice);\n            unitPrices[i] = unitPrice;\n            amounts[i] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\n                unitPrice\n            );\n            quantities[i] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeCount(\n                unitPrice\n            );\n        }\n    }\n\n    function getOrder(uint48 _orderId)\n        public\n        view\n        returns (\n            ProtocolTypes.Side side,\n            uint256 unitPrice,\n            uint256 maturity,\n            address maker,\n            uint256 amount,\n            uint256 timestamp\n        )\n    {\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\n\n        OrderItem memory orderItem;\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\n            orderItem = Storage.slot().lendOrders[marketOrder.maturity].getOrderById(\n                marketOrder.unitPrice,\n                _orderId\n            );\n        } else {\n            orderItem = Storage.slot().borrowOrders[marketOrder.maturity].getOrderById(\n                marketOrder.unitPrice,\n                _orderId\n            );\n        }\n\n        if (orderItem.maker != address(0)) {\n            return (\n                marketOrder.side,\n                marketOrder.unitPrice,\n                marketOrder.maturity,\n                orderItem.maker,\n                orderItem.amount,\n                orderItem.timestamp\n            );\n        }\n    }\n\n    function getTotalAmountFromLendOrders(address _user)\n        public\n        view\n        returns (\n            uint256 activeAmount,\n            uint256 inactiveAmount,\n            uint256 inactiveFutureValue,\n            uint256 maturity\n        )\n    {\n        (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds) = getActiveLendOrderIds(\n            _user\n        );\n\n        maturity = Storage.slot().userCurrentMaturities[_user];\n\n        for (uint256 i = 0; i < activeOrderIds.length; i++) {\n            MarketOrder memory marketOrder = Storage.slot().orders[activeOrderIds[i]];\n            // Sum future values in the current maturity.\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\n            // as an order canceled in the past market.\n            OrderItem memory orderItem = Storage\n                .slot()\n                .lendOrders[Storage.slot().maturity]\n                .getOrderById(marketOrder.unitPrice, activeOrderIds[i]);\n            activeAmount += orderItem.amount;\n        }\n\n        for (uint256 i = 0; i < inActiveOrderIds.length; i++) {\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveOrderIds[i]];\n            if (maturity == 0) {\n                maturity = marketOrder.maturity;\n            }\n            // Sum future values in the maturity of orders\n            // It will be the future value when the order is created, even if the market is rotated\n            // and maturity is updated.\n            OrderItem memory orderItem = Storage\n                .slot()\n                .lendOrders[marketOrder.maturity]\n                .getOrderById(marketOrder.unitPrice, inActiveOrderIds[i]);\n            inactiveAmount += orderItem.amount;\n            inactiveFutureValue +=\n                (orderItem.amount * ProtocolTypes.PRICE_DIGIT) /\n                marketOrder.unitPrice;\n        }\n    }\n\n    function getTotalAmountFromBorrowOrders(address _user)\n        public\n        view\n        returns (\n            uint256 activeAmount,\n            uint256 inactiveAmount,\n            uint256 inactiveFutureValue,\n            uint256 maturity\n        )\n    {\n        (\n            uint48[] memory activeOrderIds,\n            uint48[] memory inActiveOrderIds\n        ) = getActiveBorrowOrderIds(_user);\n\n        for (uint256 i = 0; i < activeOrderIds.length; i++) {\n            MarketOrder memory marketOrder = Storage.slot().orders[activeOrderIds[i]];\n            // Sum future values in the current maturity.\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\n            // as an order canceled in the past market.\n            OrderItem memory orderItem = Storage\n                .slot()\n                .borrowOrders[Storage.slot().maturity]\n                .getOrderById(marketOrder.unitPrice, activeOrderIds[i]);\n            activeAmount += orderItem.amount;\n        }\n\n        maturity = Storage.slot().userCurrentMaturities[_user];\n\n        for (uint256 i = 0; i < inActiveOrderIds.length; i++) {\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveOrderIds[i]];\n            // Sum future values in the maturity of orders\n            // It will be the future value when the order is created, even if the market is rotated\n            // and maturity is updated.\n            OrderItem memory orderItem = Storage\n                .slot()\n                .borrowOrders[marketOrder.maturity]\n                .getOrderById(marketOrder.unitPrice, inActiveOrderIds[i]);\n            inactiveAmount += orderItem.amount;\n            inactiveFutureValue +=\n                (orderItem.amount * ProtocolTypes.PRICE_DIGIT) /\n                marketOrder.unitPrice;\n        }\n    }\n\n    function getActiveLendOrderIds(address _user)\n        public\n        view\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\n    {\n        uint256 activeOrderCount = 0;\n        uint256 inActiveOrderCount = 0;\n        bool isPastMaturity = Storage.slot().userCurrentMaturities[_user] !=\n            Storage.slot().maturity;\n\n        activeOrderIds = new uint48[](\n            isPastMaturity ? 0 : Storage.slot().activeLendOrderIds[_user].length\n        );\n        inActiveOrderIds = new uint48[](Storage.slot().activeLendOrderIds[_user].length);\n\n        for (uint256 i = 0; i < Storage.slot().activeLendOrderIds[_user].length; i++) {\n            uint48 orderId = Storage.slot().activeLendOrderIds[_user][i];\n            MarketOrder memory marketOrder = Storage.slot().orders[orderId];\n\n            if (\n                !Storage\n                    .slot()\n                    .lendOrders[Storage.slot().userCurrentMaturities[_user]]\n                    .isActiveOrderId(marketOrder.unitPrice, orderId)\n            ) {\n                inActiveOrderCount += 1;\n                inActiveOrderIds[i - activeOrderCount] = orderId;\n                if (!isPastMaturity) {\n                    assembly {\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\n                    }\n                }\n            } else {\n                if (!isPastMaturity) {\n                    activeOrderCount += 1;\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\n                }\n                assembly {\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\n                }\n            }\n        }\n    }\n\n    function getActiveBorrowOrderIds(address _user)\n        public\n        view\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\n    {\n        uint256 activeOrderCount = 0;\n        uint256 inActiveOrderCount = 0;\n        bool isPastMaturity = Storage.slot().userCurrentMaturities[_user] !=\n            Storage.slot().maturity;\n\n        activeOrderIds = new uint48[](\n            isPastMaturity ? 0 : Storage.slot().activeBorrowOrderIds[_user].length\n        );\n        inActiveOrderIds = new uint48[](Storage.slot().activeBorrowOrderIds[_user].length);\n\n        for (uint256 i = 0; i < Storage.slot().activeBorrowOrderIds[_user].length; i++) {\n            uint48 orderId = Storage.slot().activeBorrowOrderIds[_user][i];\n            MarketOrder memory marketOrder = Storage.slot().orders[orderId];\n\n            if (\n                !Storage\n                    .slot()\n                    .borrowOrders[Storage.slot().userCurrentMaturities[_user]]\n                    .isActiveOrderId(marketOrder.unitPrice, orderId)\n            ) {\n                inActiveOrderCount += 1;\n                inActiveOrderIds[i - activeOrderCount] = orderId;\n                if (!isPastMaturity) {\n                    assembly {\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\n                    }\n                }\n            } else {\n                activeOrderCount += 1;\n                if (!isPastMaturity) {\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\n                }\n                assembly {\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\n                }\n            }\n        }\n    }\n\n    function estimateFilledAmount(ProtocolTypes.Side _side, uint256 _futureValue)\n        public\n        view\n        returns (uint256 amount)\n    {\n        if (_side == ProtocolTypes.Side.BORROW) {\n            return\n                Storage.slot().lendOrders[Storage.slot().maturity].estimateDroppedAmountFromLeft(\n                    _futureValue\n                );\n        } else {\n            return\n                Storage.slot().borrowOrders[Storage.slot().maturity].estimateDroppedAmountFromRight(\n                    _futureValue\n                );\n        }\n    }\n\n    function insertOrder(\n        ProtocolTypes.Side _side,\n        address _user,\n        uint256 _amount,\n        uint256 _unitPrice,\n        bool _isInterruption\n    ) public returns (uint48 orderId) {\n        orderId = nextOrderId();\n        Storage.slot().orders[orderId] = MarketOrder(\n            _side,\n            _unitPrice,\n            Storage.slot().maturity,\n            block.timestamp\n        );\n\n        if (_side == ProtocolTypes.Side.LEND) {\n            Storage.slot().lendOrders[Storage.slot().maturity].insertOrder(\n                _unitPrice,\n                orderId,\n                _user,\n                _amount,\n                _isInterruption\n            );\n            Storage.slot().activeLendOrderIds[_user].push(orderId);\n        } else if (_side == ProtocolTypes.Side.BORROW) {\n            Storage.slot().borrowOrders[Storage.slot().maturity].insertOrder(\n                _unitPrice,\n                orderId,\n                _user,\n                _amount,\n                _isInterruption\n            );\n            Storage.slot().activeBorrowOrderIds[_user].push(orderId);\n        }\n    }\n\n    function dropOrders(\n        ProtocolTypes.Side _side,\n        uint256 _amount,\n        uint256 _unitPrice\n    )\n        public\n        returns (\n            RemainingOrder memory remainingOrder,\n            uint256 filledFutureValue,\n            uint256 remainingAmount\n        )\n    {\n        if (_side == ProtocolTypes.Side.BORROW) {\n            (filledFutureValue, remainingAmount, remainingOrder) = Storage\n                .slot()\n                .lendOrders[Storage.slot().maturity]\n                .dropLeft(_amount, _unitPrice);\n        } else if (_side == ProtocolTypes.Side.LEND) {\n            (filledFutureValue, remainingAmount, remainingOrder) = Storage\n                .slot()\n                .borrowOrders[Storage.slot().maturity]\n                .dropRight(_amount, _unitPrice);\n        }\n    }\n\n    function cleanLendOrders(address _user, uint256 _maturity)\n        public\n        returns (\n            uint48[] memory orderIds,\n            uint256 activeOrderCount,\n            uint256 removedFutureValue,\n            uint256 removedOrderAmount\n        )\n    {\n        (\n            uint48[] memory activeLendOrderIds,\n            uint48[] memory inActiveLendOrderIds\n        ) = getActiveLendOrderIds(_user);\n\n        Storage.slot().activeLendOrderIds[_user] = activeLendOrderIds;\n        activeOrderCount = activeLendOrderIds.length;\n        uint256 inactiveOrderCount = inActiveLendOrderIds.length;\n        orderIds = new uint48[](inactiveOrderCount);\n\n        for (uint256 i = 0; i < inactiveOrderCount; i++) {\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveLendOrderIds[i]];\n            OrderItem memory orderItem = Storage.slot().lendOrders[_maturity].getOrderById(\n                marketOrder.unitPrice,\n                inActiveLendOrderIds[i]\n            );\n            removedFutureValue += Storage.slot().lendOrders[_maturity].getFutureValue(\n                marketOrder.unitPrice,\n                inActiveLendOrderIds[i]\n            );\n            removedOrderAmount += orderItem.amount;\n\n            orderIds[i] = orderItem.orderId;\n        }\n    }\n\n    function cleanBorrowOrders(address _user, uint256 _maturity)\n        public\n        returns (\n            uint48[] memory orderIds,\n            uint256 activeOrderCount,\n            uint256 removedFutureValue,\n            uint256 removedOrderAmount\n        )\n    {\n        (\n            uint48[] memory activeBorrowOrderIds,\n            uint48[] memory inActiveBorrowOrderIds\n        ) = getActiveBorrowOrderIds(_user);\n\n        Storage.slot().activeBorrowOrderIds[_user] = activeBorrowOrderIds;\n        activeOrderCount = activeBorrowOrderIds.length;\n        uint256 inactiveOrderCount = inActiveBorrowOrderIds.length;\n        orderIds = new uint48[](inactiveOrderCount);\n\n        for (uint256 i = 0; i < inactiveOrderCount; i++) {\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveBorrowOrderIds[i]];\n            OrderItem memory orderItem = Storage.slot().borrowOrders[_maturity].getOrderById(\n                marketOrder.unitPrice,\n                inActiveBorrowOrderIds[i]\n            );\n            removedFutureValue += Storage.slot().borrowOrders[_maturity].getFutureValue(\n                marketOrder.unitPrice,\n                inActiveBorrowOrderIds[i]\n            );\n\n            removedOrderAmount += orderItem.amount;\n\n            orderIds[i] = orderItem.orderId;\n        }\n    }\n\n    function removeOrder(address _user, uint48 _orderId)\n        public\n        returns (\n            ProtocolTypes.Side,\n            uint256,\n            uint256\n        )\n    {\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\n        uint256 removedAmount;\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\n            removedAmount = Storage.slot().lendOrders[Storage.slot().maturity].removeOrder(\n                marketOrder.unitPrice,\n                _orderId\n            );\n            removeOrderIdFromOrders(Storage.slot().activeLendOrderIds[_user], _orderId);\n        } else if (marketOrder.side == ProtocolTypes.Side.BORROW) {\n            removedAmount = Storage.slot().borrowOrders[Storage.slot().maturity].removeOrder(\n                marketOrder.unitPrice,\n                _orderId\n            );\n            removeOrderIdFromOrders(Storage.slot().activeBorrowOrderIds[_user], _orderId);\n        }\n\n        return (marketOrder.side, removedAmount, marketOrder.unitPrice);\n    }\n\n    /**\n     * @notice Increases and returns id of last order in order book.\n     * @return The new order id\n     */\n    function nextOrderId() private returns (uint48) {\n        Storage.slot().lastOrderId++;\n        return Storage.slot().lastOrderId;\n    }\n\n    function removeOrderIdFromOrders(uint48[] storage orders, uint256 orderId) private {\n        uint256 lastOrderIndex = orders.length - 1;\n        for (uint256 i = 0; i <= lastOrderIndex; i++) {\n            if (orders[i] == orderId) {\n                if (i != lastOrderIndex) {\n                    uint48 lastOrderId = orders[lastOrderIndex];\n                    orders[i] = lastOrderId;\n                }\n\n                orders.pop();\n                break;\n            }\n        }\n    }\n}\n"
    },
    "contracts/mocks/HitchensOrderStatisticsTreeContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../libraries/HitchensOrderStatisticsTreeLib.sol\";\n\ncontract HitchensOrderStatisticsTreeContract {\n    using HitchensOrderStatisticsTreeLib for HitchensOrderStatisticsTreeLib.Tree;\n\n    HitchensOrderStatisticsTreeLib.Tree tree;\n\n    event InsertOrder(string action, uint256 amount, uint256 value, uint256 orderId);\n    event RemoveOrder(string action, uint256 value, uint256 _id);\n\n    event Drop(\n        uint256 droppedAmountInFV,\n        uint256 remainingOrderAmountInPV,\n        uint256 remainingOrderUnitPrice\n    );\n\n    constructor() {}\n\n    function treeRootNode() public view returns (uint256 _value) {\n        _value = tree.root;\n    }\n\n    function firstValue() public view returns (uint256 _value) {\n        _value = tree.first();\n    }\n\n    function lastValue() public view returns (uint256 _value) {\n        _value = tree.last();\n    }\n\n    function nextValue(uint256 value) public view returns (uint256 _value) {\n        _value = tree.next(value);\n    }\n\n    function prevValue(uint256 value) public view returns (uint256 _value) {\n        _value = tree.prev(value);\n    }\n\n    function valueExists(uint256 value) public view returns (bool _exists) {\n        _exists = tree.exists(value);\n    }\n\n    function getNode(uint256 value)\n        public\n        view\n        returns (\n            uint256 _parent,\n            uint256 _left,\n            uint256 _right,\n            bool _red,\n            uint256 _head,\n            uint256 _tail,\n            uint256 _orderCounter,\n            uint256 _orderTotalAmount\n        )\n    {\n        (_parent, _left, _right, _red, _head, _tail, _orderCounter, _orderTotalAmount) = tree\n            .getNode(value);\n    }\n\n    function getOrderByID(uint256 value, uint48 orderOd) public view returns (OrderItem memory) {\n        return tree.getOrderById(value, orderOd);\n    }\n\n    function getRootCount() public view returns (uint256 _orderCounter) {\n        _orderCounter = tree.count();\n    }\n\n    function getValueCount(uint256 value) public view returns (uint256 _orderCounter) {\n        _orderCounter = tree.getNodeCount(value);\n    }\n\n    function insertAmountValue(\n        uint256 value,\n        uint48 orderId,\n        address user,\n        uint256 amount\n    ) public {\n        emit InsertOrder(\"insert\", amount, value, orderId);\n        tree.insertOrder(value, orderId, user, amount, false);\n    }\n\n    function removeAmountValue(uint256 value, uint48 orderId) public {\n        emit RemoveOrder(\"delete\", value, orderId);\n        tree.removeOrder(value, orderId);\n    }\n\n    function estimateDroppedAmountFromFirst(uint256 targetFutureValue)\n        public\n        view\n        returns (uint256 droppedAmount)\n    {\n        return tree.estimateDroppedAmountFromLeft(targetFutureValue);\n    }\n\n    function estimateDroppedAmountFromLast(uint256 targetFutureValue)\n        public\n        view\n        returns (uint256 droppedAmount)\n    {\n        return tree.estimateDroppedAmountFromRight(targetFutureValue);\n    }\n\n    function dropValuesFromFirst(uint256 value, uint256 limitValue) public {\n        (uint256 droppedAmountInFV, , RemainingOrder memory remainingOrder) = tree.dropLeft(\n            value,\n            limitValue\n        );\n        emit Drop(droppedAmountInFV, remainingOrder.amount, remainingOrder.unitPrice);\n    }\n\n    function dropValuesFromLast(uint256 value, uint256 limitValue) public {\n        (uint256 droppedAmountInFV, , RemainingOrder memory remainingOrder) = tree.dropRight(\n            value,\n            limitValue\n        );\n        emit Drop(droppedAmountInFV, remainingOrder.amount, remainingOrder.unitPrice);\n    }\n}\n"
    },
    "contracts/GenesisValueVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n// interfaces\nimport {IGenesisValueVault} from \"./interfaces/IGenesisValueVault.sol\";\n// libraries\nimport {Contracts} from \"./libraries/Contracts.sol\";\n// mixins\nimport {MixinAddressResolver} from \"./mixins/MixinAddressResolver.sol\";\n// utils\nimport {ProtocolTypes} from \"./types/ProtocolTypes.sol\";\nimport {Proxyable} from \"./utils/Proxyable.sol\";\n// storages\nimport {GenesisValueVaultStorage as Storage, MaturityUnitPrice} from \"./storages/GenesisValueVaultStorage.sol\";\n\n/**\n * @notice Implements the management of the genesis value as an amount for Lending deals.\n */\ncontract GenesisValueVault is IGenesisValueVault, MixinAddressResolver, Proxyable {\n    /**\n     * @notice Initializes the contract.\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\n     * @param _resolver The address of the Address Resolver contract\n     */\n    function initialize(address _resolver) public initializer onlyProxy {\n        registerAddressResolver(_resolver);\n    }\n\n    // @inheritdoc MixinAddressResolver\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\n        contracts = new bytes32[](1);\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\n    }\n\n    // @inheritdoc MixinAddressResolver\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\n        contracts = new bytes32[](1);\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\n    }\n\n    function isInitialized(bytes32 _ccy) public view override returns (bool) {\n        return Storage.slot().isInitialized[_ccy];\n    }\n\n    function decimals(bytes32 _ccy) public view override returns (uint8) {\n        return Storage.slot().decimals[_ccy];\n    }\n\n    function getTotalLendingSupply(bytes32 _ccy) external view override returns (uint256) {\n        return Storage.slot().totalLendingSupplies[_ccy];\n    }\n\n    function getTotalBorrowingSupply(bytes32 _ccy) external view override returns (uint256) {\n        return Storage.slot().totalBorrowingSupplies[_ccy];\n    }\n\n    function getGenesisValue(bytes32 _ccy, address _user) public view override returns (int256) {\n        return Storage.slot().balances[_ccy][_user];\n    }\n\n    function getCurrentMaturity(bytes32 _ccy) public view override returns (uint256) {\n        return Storage.slot().currentMaturity[_ccy];\n    }\n\n    function getCompoundFactor(bytes32 _ccy) public view override returns (uint256) {\n        return Storage.slot().compoundFactors[_ccy];\n    }\n\n    function getMaturityUnitPrice(bytes32 _ccy, uint256 _maturity)\n        public\n        view\n        override\n        returns (MaturityUnitPrice memory)\n    {\n        return Storage.slot().maturityUnitPrices[_ccy][_maturity];\n    }\n\n    function getGenesisValueInFutureValue(bytes32 _ccy, address _user)\n        public\n        view\n        override\n        returns (int256)\n    {\n        // NOTE: The formula is:\n        // futureValue = genesisValue * currentCompoundFactor.\n        return\n            (getGenesisValue(_ccy, _user) * int256(getCompoundFactor(_ccy))) /\n            int256(10**decimals(_ccy));\n    }\n\n    function calculateCurrentFVFromFVInMaturity(\n        bytes32 _ccy,\n        uint256 _basisMaturity,\n        int256 _futureValue\n    ) external view override returns (int256) {\n        // NOTE: These calculation steps \"FV -> GV -> FV\" are needed to match the actual conversion step.\n        // Otherwise, Solidity's truncation specification creates a difference in the calculated values.\n        // The formula is:\n        // genesisValue = featureValueInMaturity / compoundFactorInMaturity.\n        // currentFeatureValue = genesisValue * currentCompoundFactor\n        int256 genesisValue = calculateGVFromFV(_ccy, _basisMaturity, _futureValue);\n        return calculateFVFromGV(_ccy, 0, genesisValue);\n    }\n\n    function calculateGVFromFV(\n        bytes32 _ccy,\n        uint256 _basisMaturity,\n        int256 _futureValue\n    ) public view override returns (int256) {\n        uint256 compoundFactor = Storage\n        .slot()\n        .maturityUnitPrices[_ccy][_basisMaturity].compoundFactor;\n\n        require(compoundFactor > 0, \"Compound factor is not fixed yet\");\n\n        // NOTE: The formula is: genesisValue = featureValue / compoundFactor.\n        return (_futureValue * int256(10**decimals(_ccy))) / int256(compoundFactor);\n    }\n\n    function calculateFVFromGV(\n        bytes32 _ccy,\n        uint256 _basisMaturity,\n        int256 _genesisValue\n    ) public view override returns (int256) {\n        uint256 compoundFactor = _basisMaturity == 0\n            ? getCompoundFactor(_ccy)\n            : Storage.slot().maturityUnitPrices[_ccy][_basisMaturity].compoundFactor;\n\n        require(compoundFactor > 0, \"Compound factor is not fixed yet\");\n\n        return (_genesisValue * int256(compoundFactor)) / int256(10**decimals(_ccy));\n    }\n\n    function initialize(\n        bytes32 _ccy,\n        uint8 _decimals,\n        uint256 _compoundFactor\n    ) external override onlyAcceptedContracts {\n        require(_compoundFactor != 0, \"Compound factor is zero\");\n        require(!isInitialized(_ccy), \"Already initialized currency\");\n\n        Storage.slot().isInitialized[_ccy] = true;\n        Storage.slot().decimals[_ccy] = _decimals;\n        Storage.slot().initialCompoundFactors[_ccy] = _compoundFactor;\n        Storage.slot().compoundFactors[_ccy] = _compoundFactor;\n    }\n\n    function updateCompoundFactor(\n        bytes32 _ccy,\n        uint256 _maturity,\n        uint256 _nextMaturity,\n        uint256 _unitPrice\n    ) external override onlyAcceptedContracts {\n        require(_unitPrice != 0, \"unitPrice is zero\");\n        require(\n            Storage.slot().maturityUnitPrices[_ccy][_maturity].next == 0,\n            \"already updated maturity\"\n        );\n        require(_nextMaturity > _maturity, \"invalid maturity\");\n        require(\n            Storage.slot().maturityUnitPrices[_ccy][_nextMaturity].compoundFactor == 0,\n            \"existed maturity\"\n        );\n\n        if (Storage.slot().initialCompoundFactors[_ccy] == Storage.slot().compoundFactors[_ccy]) {\n            Storage.slot().maturityUnitPrices[_ccy][_maturity].compoundFactor = Storage\n                .slot()\n                .compoundFactors[_ccy];\n        } else {\n            require(\n                Storage.slot().maturityUnitPrices[_ccy][_maturity].compoundFactor != 0,\n                \"invalid compound factor\"\n            );\n        }\n\n        Storage.slot().maturityUnitPrices[_ccy][_maturity].next = _nextMaturity;\n\n        // Save actual compound factor here due to calculating the genesis value from future value.\n        // NOTE: The formula is: newCompoundFactor = currentCompoundFactor * (1 / unitPrice).\n        Storage.slot().compoundFactors[_ccy] =\n            ((Storage.slot().compoundFactors[_ccy] * ProtocolTypes.PRICE_DIGIT)) /\n            _unitPrice;\n\n        Storage.slot().currentMaturity[_ccy] = _nextMaturity;\n        Storage.slot().maturityUnitPrices[_ccy][_nextMaturity] = MaturityUnitPrice({\n            unitPrice: _unitPrice,\n            compoundFactor: Storage.slot().compoundFactors[_ccy],\n            prev: _maturity,\n            next: 0\n        });\n\n        emit CompoundFactorUpdated(\n            _ccy,\n            Storage.slot().compoundFactors[_ccy],\n            _unitPrice,\n            _nextMaturity,\n            _maturity\n        );\n    }\n\n    function addGenesisValue(\n        bytes32 _ccy,\n        address _user,\n        uint256 _basisMaturity,\n        int256 _futureValue\n    ) external override onlyAcceptedContracts returns (bool) {\n        uint256 compoundFactor = Storage\n        .slot()\n        .maturityUnitPrices[_ccy][_basisMaturity].compoundFactor;\n        int256 amount = (_futureValue * int256(10**decimals(_ccy))) / int256(compoundFactor);\n        int256 balance = Storage.slot().balances[_ccy][_user];\n\n        if (amount >= 0) {\n            if (balance >= 0) {\n                Storage.slot().totalLendingSupplies[_ccy] += uint256(amount);\n            } else {\n                int256 diff = amount + balance;\n                if (diff >= 0) {\n                    Storage.slot().totalLendingSupplies[_ccy] += uint256(diff);\n                    Storage.slot().totalBorrowingSupplies[_ccy] -= uint256(amount - diff);\n                } else {\n                    Storage.slot().totalBorrowingSupplies[_ccy] -= uint256(amount);\n                }\n            }\n        } else {\n            if (balance <= 0) {\n                Storage.slot().totalBorrowingSupplies[_ccy] += uint256(-amount);\n            } else {\n                int256 diff = amount + balance;\n                if (diff <= 0) {\n                    Storage.slot().totalBorrowingSupplies[_ccy] += uint256(-diff);\n                    Storage.slot().totalLendingSupplies[_ccy] -= uint256(-amount + diff);\n                } else {\n                    Storage.slot().totalLendingSupplies[_ccy] -= uint256(-amount);\n                }\n            }\n        }\n\n        Storage.slot().balances[_ccy][_user] += amount;\n\n        emit Transfer(_ccy, address(0), _user, amount);\n\n        return true;\n    }\n}\n"
    },
    "contracts/mocks/TokenVaultCallerMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../interfaces/ITokenVault.sol\";\nimport \"../interfaces/ILendingMarketController.sol\";\n\ncontract TokenVaultCallerMock {\n    ITokenVault public tokenVault;\n    ILendingMarketController public lendingMarketController;\n\n    constructor(address _tokenVault, address _lendingMarketController) {\n        tokenVault = ITokenVault(_tokenVault);\n        lendingMarketController = ILendingMarketController(_lendingMarketController);\n    }\n\n    function addDepositAmount(\n        address user,\n        bytes32 ccy,\n        uint256 amount\n    ) public {\n        tokenVault.addDepositAmount(user, ccy, amount);\n    }\n\n    function removeDepositAmount(\n        address user,\n        bytes32 ccy,\n        uint256 amount\n    ) public {\n        tokenVault.removeDepositAmount(user, ccy, amount);\n    }\n\n    function swapDepositAmounts(\n        address _user,\n        bytes32 _ccyIn,\n        bytes32 _ccyOut,\n        uint256 _amountOut,\n        uint24 _poolFee\n    ) public returns (uint256 amountIn) {\n        return tokenVault.swapDepositAmounts(_user, _ccyIn, _ccyOut, _amountOut, _poolFee);\n    }\n\n    function depositFrom(\n        address payer,\n        bytes32 ccy,\n        uint256 amount\n    ) public {\n        tokenVault.depositFrom(payer, ccy, amount);\n    }\n\n    function getTotalPresentValueInETH(address _user) public view returns (int256) {\n        return lendingMarketController.getTotalPresentValueInETH(_user);\n    }\n\n    function calculateTotalFundsInETH(\n        address _user,\n        bytes32 _depositCcy,\n        uint256 _depositAmount\n    )\n        public\n        view\n        returns (\n            uint256 totalWorkingLendOrdersAmount,\n            uint256 totalClaimableAmount,\n            uint256 totalCollateralAmount,\n            uint256 totalLentAmount,\n            uint256 totalWorkingBorrowOrdersAmount,\n            uint256 totalDebtAmount,\n            uint256 totalBorrowedAmount,\n            bool isEnoughDeposit\n        )\n    {\n        return lendingMarketController.calculateTotalFundsInETH(_user, _depositCcy, _depositAmount);\n    }\n\n    function calculateFunds(bytes32 _ccy, address _user)\n        public\n        view\n        returns (\n            uint256 workingLendOrdersAmount,\n            uint256 claimableAmount,\n            uint256 collateralAmount,\n            uint256 lentAmount,\n            uint256 workingBorrowOrdersAmount,\n            uint256 debtAmount,\n            uint256 borrowedAmount\n        )\n    {\n        return lendingMarketController.calculateFunds(_ccy, _user);\n    }\n\n    function cleanOrders(bytes32 _ccy, address _user) public returns (uint256 activeOrderCount) {\n        return lendingMarketController.cleanOrders(_ccy, _user);\n    }\n}\n"
    },
    "contracts/FutureValueVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {FutureValueVaultStorage as Storage} from \"./storages/FutureValueVaultStorage.sol\";\n// interfaces\nimport {IFutureValueVault} from \"./interfaces/IFutureValueVault.sol\";\n// libraries\nimport {Contracts} from \"./libraries/Contracts.sol\";\n// mixins\nimport {MixinAddressResolver} from \"./mixins/MixinAddressResolver.sol\";\n// types\nimport {ProtocolTypes} from \"./types/ProtocolTypes.sol\";\n// utils\nimport {Proxyable} from \"./utils/Proxyable.sol\";\n\n/**\n * @notice Implements the management of the future value as an amount for Lending deals in each currency.\n */\ncontract FutureValueVault is IFutureValueVault, MixinAddressResolver, Proxyable {\n    /**\n     * @notice Initializes the contract.\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\n     * @param _resolver The address of the Address Resolver contract\n     */\n    function initialize(address _resolver) external initializer onlyBeacon {\n        registerAddressResolver(_resolver);\n        buildCache();\n    }\n\n    // @inheritdoc MixinAddressResolver\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\n        contracts = new bytes32[](1);\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\n    }\n\n    // @inheritdoc MixinAddressResolver\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\n        contracts = new bytes32[](1);\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\n    }\n\n    /**\n     * @notice Gets the total lending supply.\n     * @param _maturity The maturity of the market\n     */\n    function getTotalLendingSupply(uint256 _maturity) external view override returns (uint256) {\n        return Storage.slot().totalLendingSupply[_maturity];\n    }\n\n    /**\n     * @notice Gets the total borrowing supply.\n     * @param _maturity The maturity of the market\n     */\n    function getTotalBorrowingSupply(uint256 _maturity) external view override returns (uint256) {\n        return Storage.slot().totalBorrowingSupply[_maturity];\n    }\n\n    /**\n     * @notice Gets the future value of the account.\n     * @param _user User's address\n     * @return futureValue The future value\n     * @return maturity The maturity of the market that the future value was added\n     */\n    function getFutureValue(address _user)\n        public\n        view\n        override\n        returns (int256 futureValue, uint256 maturity)\n    {\n        return (Storage.slot().balances[_user], Storage.slot().futureValueMaturities[_user]);\n    }\n\n    /**\n     * @notice Gets if the account has the future value amount in the selected maturity.\n     * @param _user User's address\n     * @param _maturity The maturity of the market\n     * @return The boolean if the lending market is initialized or not\n     */\n    function hasFutureValueInPastMaturity(address _user, uint256 _maturity)\n        public\n        view\n        override\n        returns (bool)\n    {\n        if (Storage.slot().futureValueMaturities[_user] == _maturity) {\n            return false;\n        } else {\n            return Storage.slot().balances[_user] != 0;\n        }\n    }\n\n    /**\n     * @notice Adds the future value amount for lending deals.\n     * @param _user User's address\n     * @param _amount The amount to add\n     * @param _maturity The maturity of the market\n     */\n    function addLendFutureValue(\n        address _user,\n        uint256 _amount,\n        uint256 _maturity\n    ) external override onlyAcceptedContracts returns (bool) {\n        require(_user != address(0), \"add to the zero address of lender\");\n        require(\n            !hasFutureValueInPastMaturity(_user, _maturity),\n            \"lender has the future value in past maturity\"\n        );\n\n        Storage.slot().futureValueMaturities[_user] = _maturity;\n        Storage.slot().totalLendingSupply[_maturity] += _amount;\n        Storage.slot().balances[_user] += int256(_amount);\n        emit Transfer(address(0), _user, int256(_amount));\n\n        return true;\n    }\n\n    /**\n     * @notice Adds the future value amount for borrowing deals.\n     * @param _user User's address\n     * @param _amount The amount to add\n     * @param _maturity The maturity of the market\n     */\n    function addBorrowFutureValue(\n        address _user,\n        uint256 _amount,\n        uint256 _maturity\n    ) external override onlyAcceptedContracts returns (bool) {\n        require(_user != address(0), \"add to the zero address of borrower\");\n        require(\n            !hasFutureValueInPastMaturity(_user, _maturity),\n            \"borrower has the future value in past maturity\"\n        );\n\n        Storage.slot().futureValueMaturities[_user] = _maturity;\n        Storage.slot().totalBorrowingSupply[_maturity] += _amount;\n        Storage.slot().balances[_user] -= int256(_amount);\n        emit Transfer(address(0), _user, -int256(_amount));\n\n        return true;\n    }\n\n    /**\n     * @notice Remove all future values if there is an amount in the past maturity.\n     * @param _user User's address\n     * @return removedAmount Removed future value amount\n     * @return currentAmount Current future value amount after update\n     * @return maturity Maturity of future value\n     */\n    function removeFutureValue(address _user, uint256 _activeMaturity)\n        external\n        override\n        onlyAcceptedContracts\n        returns (\n            int256 removedAmount,\n            int256 currentAmount,\n            uint256 maturity\n        )\n    {\n        currentAmount = Storage.slot().balances[_user];\n\n        if (Storage.slot().futureValueMaturities[_user] != _activeMaturity && currentAmount != 0) {\n            removedAmount = currentAmount;\n            maturity = Storage.slot().futureValueMaturities[_user];\n\n            if (removedAmount >= 0) {\n                Storage.slot().totalLendingSupply[maturity] -= uint256(removedAmount);\n            } else {\n                Storage.slot().totalBorrowingSupply[maturity] -= uint256(-removedAmount);\n            }\n\n            Storage.slot().balances[_user] = 0;\n            currentAmount = 0;\n\n            emit Transfer(_user, address(0), removedAmount);\n        }\n    }\n}\n"
    },
    "contracts/storages/FutureValueVaultStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nlibrary FutureValueVaultStorage {\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"sf.storage.futureValueVault\");\n\n    struct Storage {\n        address lendingMarket;\n        // Mapping from user to balances\n        mapping(address => int256) balances;\n        // Mapping from user to maturity\n        mapping(address => uint256) futureValueMaturities;\n        // Mapping from maturity to total amount supplied of lending\n        mapping(uint256 => uint256) totalLendingSupply;\n        // Mapping from maturity to total amount supplied of borrowing\n        mapping(uint256 => uint256) totalBorrowingSupply;\n    }\n\n    function slot() internal pure returns (Storage storage r) {\n        bytes32 _slot = STORAGE_SLOT;\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := _slot\n        }\n    }\n}\n"
    },
    "contracts/migrations/MigrationAddressResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../mixins/MixinAddressResolver.sol\";\n\n/**\n * @notice Implements migration module to build caches of contract address from `AddressResolver.sol`\n * in the contract that is inherited `MixinAddressResolver.sol`.\n *\n * This contract is used only in the following cases.\n * - The case of the initial deployment of the contract.\n * - The case when some contract needs to deploy a new proxy contract.\n */\ncontract MigrationAddressResolver {\n    function buildCaches(address[] calldata _addresses) external {\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            MixinAddressResolver destination = MixinAddressResolver(_addresses[i]);\n            if (!destination.isResolverCached()) {\n                destination.buildCache();\n            }\n        }\n    }\n}\n"
    },
    "contracts/mocks/BokkyPooBahsDateTimeContract.sol": {
      "content": "// SPDX-License-Identifier: GNU Lesser General Public License 3.0\npragma solidity ^0.8.9;\n\n// ----------------------------------------------------------------------------\n// BokkyPooBah's DateTime Library v1.00 - Contract Instance\n//\n// A gas-efficient Solidity date and time library\n//\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\n//\n// Tested date range 1970/01/01 to 2345/12/31\n//\n// Conventions:\n// Unit      | Range         | Notes\n// :-------- |:-------------:|:-----\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\n// year      | 1970 ... 2345 |\n// month     | 1 ... 12      |\n// day       | 1 ... 31      |\n// hour      | 0 ... 23      |\n// minute    | 0 ... 59      |\n// second    | 0 ... 59      |\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\n//\n//\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018.\n//\n// GNU Lesser General Public License 3.0\n// https://www.gnu.org/licenses/lgpl-3.0.en.html\n// ----------------------------------------------------------------------------\n\nimport \"../libraries/BokkyPooBahsDateTimeLibrary.sol\";\n\ncontract BokkyPooBahsDateTimeContract {\n    uint256 public constant SECONDS_PER_DAY = 24 * 60 * 60;\n    uint256 public constant SECONDS_PER_HOUR = 60 * 60;\n    uint256 public constant SECONDS_PER_MINUTE = 60;\n    int256 public constant OFFSET19700101 = 2440588;\n\n    uint256 public constant DOW_MON = 1;\n    uint256 public constant DOW_TUE = 2;\n    uint256 public constant DOW_WED = 3;\n    uint256 public constant DOW_THU = 4;\n    uint256 public constant DOW_FRI = 5;\n    uint256 public constant DOW_SAT = 6;\n    uint256 public constant DOW_SUN = 7;\n\n    function _now() public view returns (uint256 timestamp) {\n        timestamp = block.timestamp;\n    }\n\n    function _nowDateTime()\n        public\n        view\n        returns (\n            uint256 year,\n            uint256 month,\n            uint256 day,\n            uint256 hour,\n            uint256 minute,\n            uint256 second\n        )\n    {\n        (year, month, day, hour, minute, second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(\n            block.timestamp\n        );\n    }\n\n    function _daysFromDate(\n        uint256 year,\n        uint256 month,\n        uint256 day\n    ) public pure returns (uint256 _days) {\n        return BokkyPooBahsDateTimeLibrary._daysFromDate(year, month, day);\n    }\n\n    function _daysToDate(uint256 _days)\n        public\n        pure\n        returns (\n            uint256 year,\n            uint256 month,\n            uint256 day\n        )\n    {\n        return BokkyPooBahsDateTimeLibrary._daysToDate(_days);\n    }\n\n    function timestampFromDate(\n        uint256 year,\n        uint256 month,\n        uint256 day\n    ) public pure returns (uint256 timestamp) {\n        return BokkyPooBahsDateTimeLibrary.timestampFromDate(year, month, day);\n    }\n\n    function timestampFromDateTime(\n        uint256 year,\n        uint256 month,\n        uint256 day,\n        uint256 hour,\n        uint256 minute,\n        uint256 second\n    ) public pure returns (uint256 timestamp) {\n        return\n            BokkyPooBahsDateTimeLibrary.timestampFromDateTime(\n                year,\n                month,\n                day,\n                hour,\n                minute,\n                second\n            );\n    }\n\n    function timestampToDate(uint256 timestamp)\n        public\n        pure\n        returns (\n            uint256 year,\n            uint256 month,\n            uint256 day\n        )\n    {\n        (year, month, day) = BokkyPooBahsDateTimeLibrary.timestampToDate(timestamp);\n    }\n\n    function timestampToDateTime(uint256 timestamp)\n        public\n        pure\n        returns (\n            uint256 year,\n            uint256 month,\n            uint256 day,\n            uint256 hour,\n            uint256 minute,\n            uint256 second\n        )\n    {\n        (year, month, day, hour, minute, second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(\n            timestamp\n        );\n    }\n\n    function isValidDate(\n        uint256 year,\n        uint256 month,\n        uint256 day\n    ) public pure returns (bool valid) {\n        valid = BokkyPooBahsDateTimeLibrary.isValidDate(year, month, day);\n    }\n\n    function isValidDateTime(\n        uint256 year,\n        uint256 month,\n        uint256 day,\n        uint256 hour,\n        uint256 minute,\n        uint256 second\n    ) public pure returns (bool valid) {\n        valid = BokkyPooBahsDateTimeLibrary.isValidDateTime(year, month, day, hour, minute, second);\n    }\n\n    function isLeapYear(uint256 timestamp) public pure returns (bool leapYear) {\n        leapYear = BokkyPooBahsDateTimeLibrary.isLeapYear(timestamp);\n    }\n\n    function _isLeapYear(uint256 year) public pure returns (bool leapYear) {\n        leapYear = BokkyPooBahsDateTimeLibrary._isLeapYear(year);\n    }\n\n    function isWeekDay(uint256 timestamp) public pure returns (bool weekDay) {\n        weekDay = BokkyPooBahsDateTimeLibrary.isWeekDay(timestamp);\n    }\n\n    function isWeekEnd(uint256 timestamp) public pure returns (bool weekEnd) {\n        weekEnd = BokkyPooBahsDateTimeLibrary.isWeekEnd(timestamp);\n    }\n\n    function getDaysInMonth(uint256 timestamp) public pure returns (uint256 daysInMonth) {\n        daysInMonth = BokkyPooBahsDateTimeLibrary.getDaysInMonth(timestamp);\n    }\n\n    function _getDaysInMonth(uint256 year, uint256 month)\n        public\n        pure\n        returns (uint256 daysInMonth)\n    {\n        daysInMonth = BokkyPooBahsDateTimeLibrary._getDaysInMonth(year, month);\n    }\n\n    function getDayOfWeek(uint256 timestamp) public pure returns (uint256 dayOfWeek) {\n        dayOfWeek = BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp);\n    }\n\n    function getYear(uint256 timestamp) public pure returns (uint256 year) {\n        year = BokkyPooBahsDateTimeLibrary.getYear(timestamp);\n    }\n\n    function getMonth(uint256 timestamp) public pure returns (uint256 month) {\n        month = BokkyPooBahsDateTimeLibrary.getMonth(timestamp);\n    }\n\n    function getDay(uint256 timestamp) public pure returns (uint256 day) {\n        day = BokkyPooBahsDateTimeLibrary.getDay(timestamp);\n    }\n\n    function getHour(uint256 timestamp) public pure returns (uint256 hour) {\n        hour = BokkyPooBahsDateTimeLibrary.getHour(timestamp);\n    }\n\n    function getMinute(uint256 timestamp) public pure returns (uint256 minute) {\n        minute = BokkyPooBahsDateTimeLibrary.getMinute(timestamp);\n    }\n\n    function getSecond(uint256 timestamp) public pure returns (uint256 second) {\n        second = BokkyPooBahsDateTimeLibrary.getSecond(timestamp);\n    }\n\n    function addYears(uint256 timestamp, uint256 _years)\n        public\n        pure\n        returns (uint256 newTimestamp)\n    {\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addYears(timestamp, _years);\n    }\n\n    function getGasCostofAddYears(uint256 timestamp, uint256 _years) public view returns (uint256) {\n        uint256 gasBefore = gasleft();\n        BokkyPooBahsDateTimeLibrary.addYears(timestamp, _years);\n\n        return gasBefore - gasleft();\n    }\n\n    function addMonths(uint256 timestamp, uint256 _months)\n        public\n        pure\n        returns (uint256 newTimestamp)\n    {\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addMonths(timestamp, _months);\n    }\n\n    function getGasCostofAddMonths(uint256 timestamp, uint256 _months)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 gasBefore = gasleft();\n        BokkyPooBahsDateTimeLibrary.addMonths(timestamp, _months);\n\n        return gasBefore - gasleft();\n    }\n\n    function addDays(uint256 timestamp, uint256 _days) public pure returns (uint256 newTimestamp) {\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addDays(timestamp, _days);\n    }\n\n    function getGasCostofAddDays(uint256 timestamp, uint256 _days) public view returns (uint256) {\n        uint256 gasBefore = gasleft();\n        BokkyPooBahsDateTimeLibrary.addDays(timestamp, _days);\n\n        return gasBefore - gasleft();\n    }\n\n    function addHours(uint256 timestamp, uint256 _hours)\n        public\n        pure\n        returns (uint256 newTimestamp)\n    {\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addHours(timestamp, _hours);\n    }\n\n    function addMinutes(uint256 timestamp, uint256 _minutes)\n        public\n        pure\n        returns (uint256 newTimestamp)\n    {\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addMinutes(timestamp, _minutes);\n    }\n\n    function addSeconds(uint256 timestamp, uint256 _seconds)\n        public\n        pure\n        returns (uint256 newTimestamp)\n    {\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addSeconds(timestamp, _seconds);\n    }\n\n    function getGasCostofAddSeconds(uint256 timestamp, uint256 _seconds)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 gasBefore = gasleft();\n        BokkyPooBahsDateTimeLibrary.addSeconds(timestamp, _seconds);\n\n        return gasBefore - gasleft();\n    }\n\n    function subYears(uint256 timestamp, uint256 _years)\n        public\n        pure\n        returns (uint256 newTimestamp)\n    {\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subYears(timestamp, _years);\n    }\n\n    function subMonths(uint256 timestamp, uint256 _months)\n        public\n        pure\n        returns (uint256 newTimestamp)\n    {\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subMonths(timestamp, _months);\n    }\n\n    function subDays(uint256 timestamp, uint256 _days) public pure returns (uint256 newTimestamp) {\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subDays(timestamp, _days);\n    }\n\n    function subHours(uint256 timestamp, uint256 _hours)\n        public\n        pure\n        returns (uint256 newTimestamp)\n    {\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subHours(timestamp, _hours);\n    }\n\n    function subMinutes(uint256 timestamp, uint256 _minutes)\n        public\n        pure\n        returns (uint256 newTimestamp)\n    {\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subMinutes(timestamp, _minutes);\n    }\n\n    function subSeconds(uint256 timestamp, uint256 _seconds)\n        public\n        pure\n        returns (uint256 newTimestamp)\n    {\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subSeconds(timestamp, _seconds);\n    }\n\n    function diffYears(uint256 fromTimestamp, uint256 toTimestamp)\n        public\n        pure\n        returns (uint256 _years)\n    {\n        _years = BokkyPooBahsDateTimeLibrary.diffYears(fromTimestamp, toTimestamp);\n    }\n\n    function diffMonths(uint256 fromTimestamp, uint256 toTimestamp)\n        public\n        pure\n        returns (uint256 _months)\n    {\n        _months = BokkyPooBahsDateTimeLibrary.diffMonths(fromTimestamp, toTimestamp);\n    }\n\n    function diffDays(uint256 fromTimestamp, uint256 toTimestamp)\n        public\n        pure\n        returns (uint256 _days)\n    {\n        _days = BokkyPooBahsDateTimeLibrary.diffDays(fromTimestamp, toTimestamp);\n    }\n\n    function diffHours(uint256 fromTimestamp, uint256 toTimestamp)\n        public\n        pure\n        returns (uint256 _hours)\n    {\n        _hours = BokkyPooBahsDateTimeLibrary.diffHours(fromTimestamp, toTimestamp);\n    }\n\n    function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp)\n        public\n        pure\n        returns (uint256 _minutes)\n    {\n        _minutes = BokkyPooBahsDateTimeLibrary.diffMinutes(fromTimestamp, toTimestamp);\n    }\n\n    function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp)\n        public\n        pure\n        returns (uint256 _seconds)\n    {\n        _seconds = BokkyPooBahsDateTimeLibrary.diffSeconds(fromTimestamp, toTimestamp);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}