{
  "address": "0x596fe0f4053b85024E078F07A1fE1BE106585684",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "collateralCcy",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "debtCcy",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "debtMaturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        }
      ],
      "name": "LiquidationExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "futureValue",
          "type": "uint256"
        }
      ],
      "name": "OrderFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "futureValue",
          "type": "uint256"
        }
      ],
      "name": "OrdersFilledInAsync",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "name": "RedemptionExecuted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateActualFunds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "presentValue",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtAmount",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "futureValue",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "workingLendOrdersAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "workingBorrowOrdersAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowedAmount",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "genesisValue",
              "type": "int256"
            }
          ],
          "internalType": "struct FundManagementLogic.ActualFunds",
          "name": "actualFunds",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "workingLendOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "workingBorrowOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_depositCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_depositAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateTotalFundsInBaseCurrency",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalWorkingLendOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCollateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalWorkingBorrowOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDebtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrowedAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isEnoughDeposit",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUsedMaturities",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "maturities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x84f5d26d53cc81af8f1109c5e89ea284bc8c7752710e32cb2aee9ac2e237ed9f",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x596fe0f4053b85024E078F07A1fE1BE106585684",
    "transactionIndex": 68,
    "gasUsed": "4616285",
    "logsBloom": "0x
    "blockHash": "0x0ed7d7fd04137b9caa0ba5ce59ff19a9bd8094762709f3727f2dc6612a9b5fd5",
    "transactionHash": "0x84f5d26d53cc81af8f1109c5e89ea284bc8c7752710e32cb2aee9ac2e237ed9f",
    "logs": [],
    "blockNumber": 3629053,
    "cumulativeGasUsed": "8389969",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6f01400ba717e365335694f7dd4a1baf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralCcy\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"debtCcy\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtMaturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidationExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"futureValue\",\"type\":\"uint256\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"futureValue\",\"type\":\"uint256\"}],\"name\":\"OrdersFilledInAsync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"RedemptionExecuted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateActualFunds\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"presentValue\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"futureValue\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"workingLendOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"workingBorrowOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"genesisValue\",\"type\":\"int256\"}],\"internalType\":\"struct FundManagementLogic.ActualFunds\",\"name\":\"actualFunds\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"workingLendOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"workingBorrowOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_depositCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTotalFundsInBaseCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalWorkingLendOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWorkingBorrowOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnoughDeposit\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUsedMaturities\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"maturities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"convertFutureValueToGenesisValue(bytes32,uint256,address)\":{\"params\":{\"_ccy\":\"Currency for pausing all lending markets\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"Current future value amount after update\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"convertFutureValueToGenesisValue(bytes32,uint256,address)\":{\"notice\":\"Converts the future value to the genesis value if there is balance in the past maturity.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/libraries/logics/FundManagementLogic.sol\":\"FundManagementLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dependencies/chainlink/contracts/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Chainlink Contracts v0.4.0 (v0.8/interfaces/AggregatorV3Interface.sol)\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x81b0c18c07c8c031d5b34e4e41d2451b836355aad1b3c04c26578c92f73585f9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(\\n            value >= type(int248).min && value <= type(int248).max,\\n            \\\"SafeCast: value doesn't fit in 248 bits\\\"\\n        );\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(\\n            value >= type(int240).min && value <= type(int240).max,\\n            \\\"SafeCast: value doesn't fit in 240 bits\\\"\\n        );\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(\\n            value >= type(int232).min && value <= type(int232).max,\\n            \\\"SafeCast: value doesn't fit in 232 bits\\\"\\n        );\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(\\n            value >= type(int224).min && value <= type(int224).max,\\n            \\\"SafeCast: value doesn't fit in 224 bits\\\"\\n        );\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(\\n            value >= type(int216).min && value <= type(int216).max,\\n            \\\"SafeCast: value doesn't fit in 216 bits\\\"\\n        );\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(\\n            value >= type(int208).min && value <= type(int208).max,\\n            \\\"SafeCast: value doesn't fit in 208 bits\\\"\\n        );\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(\\n            value >= type(int200).min && value <= type(int200).max,\\n            \\\"SafeCast: value doesn't fit in 200 bits\\\"\\n        );\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(\\n            value >= type(int192).min && value <= type(int192).max,\\n            \\\"SafeCast: value doesn't fit in 192 bits\\\"\\n        );\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(\\n            value >= type(int184).min && value <= type(int184).max,\\n            \\\"SafeCast: value doesn't fit in 184 bits\\\"\\n        );\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(\\n            value >= type(int176).min && value <= type(int176).max,\\n            \\\"SafeCast: value doesn't fit in 176 bits\\\"\\n        );\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(\\n            value >= type(int168).min && value <= type(int168).max,\\n            \\\"SafeCast: value doesn't fit in 168 bits\\\"\\n        );\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(\\n            value >= type(int160).min && value <= type(int160).max,\\n            \\\"SafeCast: value doesn't fit in 160 bits\\\"\\n        );\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(\\n            value >= type(int152).min && value <= type(int152).max,\\n            \\\"SafeCast: value doesn't fit in 152 bits\\\"\\n        );\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(\\n            value >= type(int144).min && value <= type(int144).max,\\n            \\\"SafeCast: value doesn't fit in 144 bits\\\"\\n        );\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(\\n            value >= type(int136).min && value <= type(int136).max,\\n            \\\"SafeCast: value doesn't fit in 136 bits\\\"\\n        );\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(\\n            value >= type(int128).min && value <= type(int128).max,\\n            \\\"SafeCast: value doesn't fit in 128 bits\\\"\\n        );\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(\\n            value >= type(int120).min && value <= type(int120).max,\\n            \\\"SafeCast: value doesn't fit in 120 bits\\\"\\n        );\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(\\n            value >= type(int112).min && value <= type(int112).max,\\n            \\\"SafeCast: value doesn't fit in 112 bits\\\"\\n        );\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(\\n            value >= type(int104).min && value <= type(int104).max,\\n            \\\"SafeCast: value doesn't fit in 104 bits\\\"\\n        );\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(\\n            value >= type(int96).min && value <= type(int96).max,\\n            \\\"SafeCast: value doesn't fit in 96 bits\\\"\\n        );\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(\\n            value >= type(int88).min && value <= type(int88).max,\\n            \\\"SafeCast: value doesn't fit in 88 bits\\\"\\n        );\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(\\n            value >= type(int80).min && value <= type(int80).max,\\n            \\\"SafeCast: value doesn't fit in 80 bits\\\"\\n        );\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(\\n            value >= type(int72).min && value <= type(int72).max,\\n            \\\"SafeCast: value doesn't fit in 72 bits\\\"\\n        );\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(\\n            value >= type(int64).min && value <= type(int64).max,\\n            \\\"SafeCast: value doesn't fit in 64 bits\\\"\\n        );\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(\\n            value >= type(int56).min && value <= type(int56).max,\\n            \\\"SafeCast: value doesn't fit in 56 bits\\\"\\n        );\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(\\n            value >= type(int48).min && value <= type(int48).max,\\n            \\\"SafeCast: value doesn't fit in 48 bits\\\"\\n        );\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(\\n            value >= type(int40).min && value <= type(int40).max,\\n            \\\"SafeCast: value doesn't fit in 40 bits\\\"\\n        );\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(\\n            value >= type(int32).min && value <= type(int32).max,\\n            \\\"SafeCast: value doesn't fit in 32 bits\\\"\\n        );\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(\\n            value >= type(int24).min && value <= type(int24).max,\\n            \\\"SafeCast: value doesn't fit in 24 bits\\\"\\n        );\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(\\n            value >= type(int16).min && value <= type(int16).max,\\n            \\\"SafeCast: value doesn't fit in 16 bits\\\"\\n        );\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(\\n            value >= type(int8).min && value <= type(int8).max,\\n            \\\"SafeCast: value doesn't fit in 8 bits\\\"\\n        );\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xb26db2e7d4c8d73ceda86a482ab8b3302b6a5f222f4a333361ca9b57a209fc0c\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/liquidators/interfaces/ILiquidationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ILiquidationReceiver {\\n    event OperationExecuteForCollateral(\\n        address liquidator,\\n        address user,\\n        bytes32 ccy,\\n        uint256 receivedAmount\\n    );\\n    event OperationExecuteForDebt(\\n        address liquidator,\\n        address user,\\n        bytes32 collateralCcy,\\n        uint256 receivedCollateralAmount,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        uint256 receivedDebtAmount\\n    );\\n\\n    function executeOperationForCollateral(\\n        address liquidator,\\n        address user,\\n        bytes32 ccy,\\n        uint256 receivedAmount\\n    ) external returns (bool);\\n\\n    function executeOperationForDebt(\\n        address liquidator,\\n        address user,\\n        bytes32 collateralCcy,\\n        uint256 receivedCollateralAmount,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        uint256 receivedDebtAmount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x86cc27e719ebaec04154b93efa641ac0423ea0bdac449295132bd4bea9ff2e29\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IBeaconProxyController {\\n    event BeaconProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function deployFutureValueVault() external returns (address futureValueVault);\\n\\n    function deployLendingMarket(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 openingDate\\n    ) external returns (address market);\\n}\\n\",\"keccak256\":\"0xcedc431629fa9537e673fc37ceae4cc645cf1f4ff9071b05396b9e3944ce6dd9\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Currency} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CurrencyAdded(bytes32 indexed ccy, uint256 haircut);\\n    event CurrencyRemoved(bytes32 indexed ccy);\\n\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n\\n    event PriceFeedUpdated(bytes32 ccy, uint256 decimals, address[] indexed priceFeeds);\\n    event PriceFeedRemoved(bytes32 ccy);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256 _amount\\n    ) external view returns (uint256 amount);\\n\\n    function convertFromBaseCurrency(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, uint256 _amount)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, int256 _amount)\\n        external\\n        view\\n        returns (int256 amount);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getBaseCurrency() external view returns (bytes32);\\n\\n    function getDecimals(bytes32) external view returns (uint8);\\n\\n    function getCurrencies() external view returns (bytes32[] memory);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getLastPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function currencyExists(bytes32 _ccy) external view returns (bool);\\n\\n    function updatePriceFeed(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        address[] calldata _priceFeeds\\n    ) external;\\n\\n    function removePriceFeed(bytes32 _ccy) external;\\n\\n    function addCurrency(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        uint256 _haircut,\\n        address[] calldata _priceFeeds\\n    ) external;\\n\\n    function updateHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function removeCurrency(bytes32 _ccy) external;\\n}\\n\",\"keccak256\":\"0xabd4040d990a6af80ce27496a643e167de301ef11dea8f1281755a4936712b39\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IFutureValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IFutureValueVault {\\n    event Transfer(address indexed from, address indexed to, int256 value);\\n\\n    function getTotalSupply(uint256 maturity) external view returns (uint256);\\n\\n    function getFutureValue(address user)\\n        external\\n        view\\n        returns (int256 futureValue, uint256 maturity);\\n\\n    function hasFutureValueInPastMaturity(address user, uint256 maturity)\\n        external\\n        view\\n        returns (bool);\\n\\n    function addLendFutureValue(\\n        address user,\\n        uint256 amount,\\n        uint256 maturity,\\n        bool isTaker\\n    ) external returns (bool);\\n\\n    function addBorrowFutureValue(\\n        address user,\\n        uint256 amount,\\n        uint256 maturity,\\n        bool isTaker\\n    ) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address receiver,\\n        int256 amount,\\n        uint256 maturity\\n    ) external;\\n\\n    function removeFutureValue(address user, uint256 activeMaturity)\\n        external\\n        returns (\\n            int256 removedAmount,\\n            int256 currentAmount,\\n            uint256 maturity,\\n            bool removeFutureValue\\n        );\\n\\n    function addInitialTotalSupply(uint256 maturity, int256 amount) external;\\n\\n    function resetFutureValue(address _user) external;\\n}\\n\",\"keccak256\":\"0x6847c88d892183b81aa0a6381c1e2eb58968cfb0bf5260b585b38d585c9a283a\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AutoRollLog} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\\n    event AutoRollExecuted(\\n        bytes32 indexed ccy,\\n        uint256 lendingCompoundFactor,\\n        uint256 borrowingCompoundFactor,\\n        uint256 unitPrice,\\n        uint256 currentMaturity,\\n        uint256 previousMaturity\\n    );\\n\\n    function isInitialized(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getMaturityGenesisValue(bytes32 _ccy, uint256 _maturity)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getAutoRollLog(bytes32 ccy, uint256 maturity)\\n        external\\n        view\\n        returns (AutoRollLog memory);\\n\\n    function getLatestAutoRollLog(bytes32 _ccy) external view returns (AutoRollLog memory);\\n\\n    function getGenesisValueInFutureValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function calculateFVFromFV(\\n        bytes32 _ccy,\\n        uint256 _basisMaturity,\\n        uint256 _destinationMaturity,\\n        int256 _futureValue\\n    ) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function getBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function calculateBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        int256 balance,\\n        uint256 fromMaturity,\\n        uint256 toMaturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function initializeCurrencySetting(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor,\\n        uint256 maturity\\n    ) external;\\n\\n    function updateInitialCompoundFactor(bytes32 _ccy, uint256 _unitPrice) external;\\n\\n    function executeAutoRoll(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice,\\n        uint256 feeRate\\n    ) external;\\n\\n    function updateGenesisValueWithFutureValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 fvAmount\\n    ) external;\\n\\n    function updateGenesisValueWithResidualAmount(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity\\n    ) external;\\n\\n    function transferFrom(\\n        bytes32 _ccy,\\n        address _sender,\\n        address _receiver,\\n        int256 _amount\\n    ) external;\\n\\n    function cleanUpGenesisValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external;\\n\\n    function resetGenesisValue(bytes32 _ccy, address _user) external;\\n}\\n\",\"keccak256\":\"0xe7f448ce594b9503483dd8071d18c3123022a6add49ca9878bde17a8e71078df\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport {MarketOrder} from \\\"../storages/LendingMarketStorage.sol\\\";\\n\\ninterface ILendingMarket {\\n    struct FilledOrder {\\n        uint256 unitPrice;\\n        uint256 amount;\\n        uint256 futureValue;\\n        uint256 ignoredAmount;\\n    }\\n\\n    struct PartiallyFilledOrder {\\n        address maker;\\n        uint256 amount;\\n        uint256 futureValue;\\n    }\\n\\n    event OrderCanceled(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n\\n    event OrderMade(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n\\n    event OrdersTaken(\\n        address indexed taker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 filledAmount,\\n        uint256 unitPrice,\\n        uint256 filledFutureValue\\n    );\\n\\n    event OrderPartiallyTaken(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 maturity,\\n        uint256 filledAmount,\\n        uint256 filledFutureValue\\n    );\\n\\n    event OrdersCleaned(\\n        uint48[] orderIds,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 maturity\\n    );\\n\\n    event OrderBlockedByCircuitBreaker(\\n        address indexed user,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 thresholdUnitPrice\\n    );\\n\\n    event MarketOpened(uint256 maturity, uint256 prevMaturity);\\n\\n    event ItayoseExecuted(bytes32 ccy, uint256 maturity, uint256 openingPrice);\\n\\n    struct Market {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        uint256 openingDate;\\n        uint256 borrowUnitPrice;\\n        uint256 lendUnitPrice;\\n        uint256 midUnitPrice;\\n        bool isReady;\\n    }\\n\\n    function getMarket() external view returns (Market memory);\\n\\n    function getBorrowUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getLendUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getMidUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getBorrowOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturity() external view returns (uint256);\\n\\n    function getCurrency() external view returns (bytes32);\\n\\n    function getOpeningDate() external view returns (uint256);\\n\\n    function getOpeningUnitPrice() external view returns (uint256);\\n\\n    function isReady() external view returns (bool);\\n\\n    function isMatured() external view returns (bool);\\n\\n    function isOpened() external view returns (bool);\\n\\n    function isItayosePeriod() external view returns (bool);\\n\\n    function isPreOrderPeriod() external returns (bool);\\n\\n    function getOrder(uint48 orderId)\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        );\\n\\n    function getTotalAmountFromLendOrders(address user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getTotalAmountFromBorrowOrders(address user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getLendOrderIds(address user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds);\\n\\n    function getBorrowOrderIds(address user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds);\\n\\n    function estimateFilledAmount(ProtocolTypes.Side side, uint256 futureValue)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function openMarket(uint256 maturity, uint256 openingDate) external returns (uint256);\\n\\n    function cancelOrder(address user, uint48 orderId)\\n        external\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        );\\n\\n    function createOrder(\\n        ProtocolTypes.Side side,\\n        address account,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        uint256 circuitBreakerLimitRange\\n    )\\n        external\\n        returns (FilledOrder memory filledOrder, PartiallyFilledOrder memory partiallyFilledOrder);\\n\\n    function createPreOrder(\\n        ProtocolTypes.Side side,\\n        address user,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external;\\n\\n    function unwind(\\n        ProtocolTypes.Side side,\\n        address user,\\n        uint256 futureValue,\\n        uint256 circuitBreakerLimitRange\\n    )\\n        external\\n        returns (FilledOrder memory filledOrder, PartiallyFilledOrder memory partiallyFilledOrder);\\n\\n    function executeItayoseCall()\\n        external\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 totalOffsetAmount,\\n            uint256 openingDate,\\n            PartiallyFilledOrder memory partiallyFilledLendingOrder,\\n            PartiallyFilledOrder memory partiallyFilledBorrowingOrder\\n        );\\n\\n    function cleanUpOrders(address user)\\n        external\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        );\\n\\n    function pauseMarket() external;\\n\\n    function unpauseMarket() external;\\n}\\n\",\"keccak256\":\"0x5c10f60625a1c9118d56767bc5efe665b0e6f00456e9a3027a4bb0bba2d57b22\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ILendingMarketController {\\n    struct Order {\\n        uint48 orderId;\\n        bytes32 ccy;\\n        uint256 maturity;\\n        ProtocolTypes.Side side;\\n        uint256 unitPrice;\\n        uint256 amount;\\n        uint256 timestamp;\\n    }\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarkets(bytes32 ccy) external view returns (address[] memory);\\n\\n    function getLendingMarket(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getBorrowUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getLendUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getMidUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getBorrowOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getFutureValue(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        address user\\n    ) external view returns (int256 futureValue);\\n\\n    function getPresentValue(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        address user\\n    ) external view returns (int256 presentValue);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInBaseCurrency(address user)\\n        external\\n        view\\n        returns (int256 totalPresentValue);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256 genesisValue);\\n\\n    function calculateFunds(bytes32 ccy, address user)\\n        external\\n        view\\n        returns (\\n            uint256 workingLendOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 collateralAmount,\\n            uint256 lentAmount,\\n            uint256 workingBorrowOrdersAmount,\\n            uint256 debtAmount,\\n            uint256 borrowedAmount\\n        );\\n\\n    function calculateTotalFundsInBaseCurrency(\\n        address user,\\n        bytes32 depositCcy,\\n        uint256 depositAmount\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalWorkingLendOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalCollateralAmount,\\n            uint256 totalLentAmount,\\n            uint256 totalWorkingBorrowOrdersAmount,\\n            uint256 totalDebtAmount,\\n            uint256 totalBorrowedAmount,\\n            bool isEnoughDeposit\\n        );\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor,\\n        uint256 orderFeeRate,\\n        uint256 autoRollFeeRate,\\n        uint256 circuitBreakerLimitRange\\n    ) external;\\n\\n    function createLendingMarket(bytes32 ccy, uint256 marketOpeningDate) external;\\n\\n    function createOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndCreateOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function createPreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndCreatePreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function unwindPosition(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function executeItayoseCalls(bytes32[] memory currencies, uint256 maturity)\\n        external\\n        returns (bool);\\n\\n    function executeRedemption(bytes32 redemptionCcy, bytes32 collateralCcy)\\n        external\\n        returns (bool);\\n\\n    function executeLiquidationCall(\\n        bytes32 collateralCcy,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        address user\\n    ) external returns (bool);\\n\\n    function cancelOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint48 orderId\\n    ) external returns (bool);\\n\\n    function rotateLendingMarkets(bytes32 ccy) external;\\n\\n    function executeEmergencyTermination() external;\\n\\n    function pauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function cleanUpAllFunds(address user) external returns (bool);\\n\\n    function cleanUpFunds(bytes32 ccy, address user) external returns (uint256 activeOrderCount);\\n}\\n\",\"keccak256\":\"0x16ce3845318165953ba5fba623bc35f155f5fc25e1f7e25c6ee4141a7595b12b\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IReserveFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IReserveFund {\\n    event Pause(address account);\\n    event Unpause(address account);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xa2a6df7a095ca8f8874d26672f75fe1f09c45caf041cb27d5e265bcb974a9754\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ITokenVault {\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress, bool isCollateral);\\n    event CurrencyUpdated(bytes32 ccy, bool isCollateral);\\n\\n    function isCovered(\\n        address user,\\n        bytes32 ccy,\\n        uint256 unsettledExp,\\n        ProtocolTypes.Side unsettledOrderSide\\n    ) external view returns (bool);\\n\\n    function isCovered(address user) external view returns (bool);\\n\\n    function isCollateral(bytes32 _ccy) external view returns (bool);\\n\\n    function isCollateral(bytes32[] calldata _ccys)\\n        external\\n        view\\n        returns (bool[] memory isCollateralCurrencies);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getTokenAddress(bytes32 ccy) external view returns (address);\\n\\n    function getCollateralCurrencies() external view returns (bytes32[] memory);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256 maxWithdraw);\\n\\n    function getWithdrawableCollateral(bytes32 _ccy, address _user) external view returns (uint256);\\n\\n    function getCoverage(address user) external view returns (uint256 coverage);\\n\\n    function getUnusedCollateral(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address party) external view returns (uint256);\\n\\n    function getLiquidationAmount(\\n        address user,\\n        bytes32 liquidationCcy,\\n        uint256 liquidationAmountMaximum\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liquidationAmount,\\n            uint256 protocolFee,\\n            uint256 liquidatorFee\\n        );\\n\\n    function getTotalDepositAmount(bytes32 _ccy) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getCollateralParameters()\\n        external\\n        view\\n        returns (\\n            uint256 liquidationThresholdRate,\\n            uint256 liquidationProtocolFeeRate,\\n            uint256 liquidatorFeeRate\\n        );\\n\\n    function setCollateralParameters(\\n        uint256 liquidationThresholdRate,\\n        uint256 liquidationProtocolFeeRate,\\n        uint256 liquidatorFeeRate\\n    ) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositFrom(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function removeDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function transferFrom(\\n        bytes32 _ccy,\\n        address _sender,\\n        address _receiver,\\n        uint256 _amount\\n    ) external returns (uint256 untransferredAmount);\\n}\\n\",\"keccak256\":\"0xa0b9e2447498ff3181f8675bf19efd836805a1feb602a22d395871767e705681\",\"license\":\"MIT\"},\"contracts/protocol/libraries/AddressResolverLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/MixinAddressResolverStorage.sol\\\";\\n\\nlibrary AddressResolverLib {\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return IReserveFund(getAddress(Contracts.RESERVE_FUND));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0x65d55399d6c8b753ddaa36c1370fae1c68dfbfb8b6b2d09b1717ba037b079998\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Constants {\\n    /// @dev Used for price digits in the basis (10000 -> 1)\\n    uint256 public constant PRICE_DIGIT = 10000;\\n\\n    /// @dev Used for percentage digits in the basis (10000 -> 100%)\\n    uint256 public constant PCT_DIGIT = 10000;\\n\\n    /// @dev Used for seconds in year (60 * 60 * 24 * 365)\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000;\\n\\n    /// @dev Used for maximum order count per currency\\n    uint256 internal constant MAXIMUM_ORDER_COUNT = 20;\\n}\\n\",\"keccak256\":\"0x89fe39938c9a7dd4133dba6099285937c94718a355bd904f48989b795cee2898\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant RESERVE_FUND = \\\"ReserveFund\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE_VAULT = \\\"FutureValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0x8e73eead72efa03bcc03c1cdf72cdcebed0f7e6f5a58cda1fd74e0fc03f356e6\",\"license\":\"MIT\"},\"contracts/protocol/libraries/OrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// libraries\\nimport {Constants} from \\\"../libraries/Constants.sol\\\";\\n// types\\nimport {RoundingUint256} from \\\"./math/RoundingUint256.sol\\\";\\n\\nstruct RemainingOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 unitPrice;\\n}\\n\\nstruct PartiallyFilledOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 futureValue;\\n}\\n\\nstruct OrderItem {\\n    uint48 orderId;\\n    uint48 next;\\n    uint48 prev;\\n    address maker;\\n    uint256 timestamp;\\n    uint256 amount;\\n}\\n\\n/**\\n * @notice OrderStatisticsTreeLib is a Red-Black Tree binary search library\\n * based on the following library that is extended to manage order data.\\n *\\n * https://github.com/rob-Hitchens/OrderStatisticsTree\\n *\\n */\\nlibrary OrderStatisticsTreeLib {\\n    using RoundingUint256 for uint256;\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint48 head;\\n        uint48 tail;\\n        uint256 orderCounter;\\n        uint256 orderTotalAmount;\\n        mapping(uint256 => OrderItem) orders;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].right != EMPTY) {\\n            _value = self.nodes[_value].right;\\n        }\\n    }\\n\\n    function hasOrders(Tree storage self) internal view returns (bool) {\\n        return self.root != EMPTY;\\n    }\\n\\n    function next(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(401) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].right != EMPTY) {\\n            _cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(402) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].left != EMPTY) {\\n            _cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint256 value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        // if (self.nodes[value].parent != EMPTY) return true;\\n        uint256 cursor = value;\\n        while (self.nodes[cursor].parent != EMPTY) {\\n            uint256 parent = self.nodes[cursor].parent;\\n            if (self.nodes[parent].left != cursor && self.nodes[parent].right != cursor) {\\n                return false;\\n            }\\n            if (parent == self.root) {\\n                return true;\\n            }\\n            cursor = self.nodes[cursor].parent;\\n        }\\n        return false;\\n    }\\n\\n    function isActiveOrderId(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        return orderIdExists(self, value, orderId) && exists(self, value);\\n    }\\n\\n    function getNode(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n        return (\\n            gn.parent,\\n            gn.left,\\n            gn.right,\\n            gn.red,\\n            gn.head,\\n            gn.tail,\\n            gn.orderCounter,\\n            gn.orderTotalAmount\\n        );\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function getNodeTotalAmount(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint256 totalAmount)\\n    {\\n        return self.nodes[value].orderTotalAmount;\\n    }\\n\\n    function getNodeOrderIds(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint48[] memory orderIds)\\n    {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[gn.head];\\n        orderIds = new uint48[](gn.orderCounter);\\n\\n        for (uint256 i = 0; i < gn.orderCounter; i++) {\\n            orderIds[i] = order.orderId;\\n            order = gn.orders[order.next];\\n        }\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256 _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(405) - Value to insert cannot be zero\\\");\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                return;\\n            }\\n        }\\n\\n        Node storage nValue = self.nodes[value];\\n        // Update order info as a new one if there is already an old node\\n        if (\\n            self.root == EMPTY ||\\n            (self.nodes[cursor].left != value && self.nodes[cursor].right != value)\\n        ) {\\n            nValue.orderCounter = 0;\\n            nValue.orderTotalAmount = 0;\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        }\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(407) - Value to delete cannot be zero\\\");\\n        Node storage nValue = self.nodes[value];\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint256 a,\\n        uint256 b\\n    ) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    function estimateDroppedAmountFromLeft(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = first(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV).div(\\n                    cursorNodeAmountInFV\\n                );\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n    }\\n\\n    function estimateDroppedAmountFromRight(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = last(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV).div(\\n                    cursorNodeAmountInFV\\n                );\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n    }\\n\\n    function dropLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue,\\n        uint256 limitFutureValue\\n    )\\n        internal\\n        returns (\\n            uint256 value,\\n            uint256 filledAmount,\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            PartiallyFilledOrder memory partiallyFilledOrder\\n        )\\n    {\\n        uint256 cursor = first(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor <= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        uint256 amountDiff;\\n        uint256 futureValueDiff;\\n        while (\\n            (totalAmount < amount || amount == EMPTY) &&\\n            (filledFutureValue < limitFutureValue || limitFutureValue == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor <= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            filledFutureValue += _calculateFutureValue(cursor, cursorNodeAmount);\\n            filledAmount += cursorNodeAmount;\\n\\n            if (totalAmount > amount && amount != EMPTY) {\\n                amountDiff = totalAmount - amount;\\n                futureValueDiff = _calculateFutureValue(cursor, amountDiff);\\n            } else if (filledFutureValue > limitFutureValue && limitFutureValue != EMPTY) {\\n                futureValueDiff = filledFutureValue - limitFutureValue;\\n                amountDiff = _calculatePresentValue(cursor, futureValueDiff);\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n\\n        if (amountDiff > 0) {\\n            filledAmount -= amountDiff;\\n        }\\n        if (futureValueDiff > 0) {\\n            filledFutureValue -= futureValueDiff;\\n        }\\n\\n        if (totalAmount > 0) {\\n            if (amountDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(self, cursor, cursorNodeAmount - amountDiff);\\n            } else if (futureValueDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, futureValueDiff)\\n                );\\n            }\\n\\n            self.nodes[cursor].left = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent > cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].left = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        uint256 lastNode = last(self);\\n\\n        if (lastNode == value && self.nodes[lastNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value > self.root || (value == self.root && filledAmount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToLeft(self);\\n    }\\n\\n    function dropRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue,\\n        uint256 limitFutureValue\\n    )\\n        internal\\n        returns (\\n            uint256 value,\\n            uint256 filledAmount,\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            PartiallyFilledOrder memory partiallyFilledOrder\\n        )\\n    {\\n        uint256 cursor = last(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor >= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        uint256 amountDiff;\\n        uint256 futureValueDiff;\\n        while (\\n            (totalAmount < amount || amount == EMPTY) &&\\n            (filledFutureValue < limitFutureValue || limitFutureValue == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor >= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            filledFutureValue += _calculateFutureValue(cursor, cursorNodeAmount);\\n            filledAmount += cursorNodeAmount;\\n\\n            if (totalAmount > amount && amount != EMPTY) {\\n                amountDiff = totalAmount - amount;\\n                futureValueDiff = _calculateFutureValue(cursor, amountDiff);\\n            } else if (filledFutureValue > limitFutureValue && limitFutureValue != EMPTY) {\\n                futureValueDiff = filledFutureValue - limitFutureValue;\\n                amountDiff = _calculatePresentValue(cursor, futureValueDiff);\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n\\n        if (amountDiff > 0) {\\n            filledAmount -= amountDiff;\\n        }\\n        if (futureValueDiff > 0) {\\n            filledFutureValue -= futureValueDiff;\\n        }\\n\\n        if (totalAmount > 0) {\\n            if (amountDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(self, cursor, cursorNodeAmount - amountDiff);\\n            } else if (futureValueDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, futureValueDiff)\\n                );\\n            }\\n\\n            self.nodes[cursor].right = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent < cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].right = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        uint256 firstNode = first(self);\\n\\n        if (firstNode == value && self.nodes[firstNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value < self.root || (value == self.root && filledAmount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToRight(self);\\n    }\\n\\n    function rotateTreeToLeft(Tree storage self) internal {\\n        if (self.nodes[self.root].left == 0 && self.nodes[self.root].right != 0) {\\n            if (self.nodes[self.nodes[self.root].right].left != 0) {\\n                rotateRight(self, self.nodes[self.root].right);\\n            }\\n            rotateLeft(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function rotateTreeToRight(Tree storage self) internal {\\n        if (self.nodes[self.root].right == 0 && self.nodes[self.root].left != 0) {\\n            if (self.nodes[self.nodes[self.root].left].right != 0) {\\n                rotateLeft(self, self.nodes[self.root].left);\\n            }\\n            rotateRight(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function getFutureValue(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (uint256) {\\n        return _calculateFutureValue(value, self.nodes[value].orders[orderId].amount);\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (OrderItem memory) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orders[orderId];\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function orderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        uint48 cursor = orderId;\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[cursor];\\n\\n        if (order.orderId != cursor) {\\n            return false;\\n        }\\n\\n        while (order.prev != EMPTY) {\\n            cursor = order.prev;\\n            order = gn.orders[cursor];\\n        }\\n\\n        return cursor == gn.head;\\n    }\\n\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal {\\n        require(amount > 0, \\\"Insufficient amount\\\");\\n        require(value <= Constants.PRICE_DIGIT, \\\"Insufficient value\\\");\\n        insert(self, value);\\n\\n        addTail(self, value, orderId, user, amount);\\n    }\\n\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        amount = _removeOrder(self, value, orderId);\\n        remove(self, value);\\n    }\\n\\n    /**\\n     * @dev Reduces order amount once market order taken.\\n     */\\n    function fillOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount\\n    ) internal returns (PartiallyFilledOrder memory partiallyFilledOrder) {\\n        Node storage gn = self.nodes[value];\\n\\n        require(\\n            gn.orderTotalAmount >= _amount,\\n            \\\"OrderStatisticsTree(410) - Amount to fill is insufficient\\\"\\n        );\\n\\n        uint256 remainingAmount = _amount;\\n        OrderItem memory currentOrder = gn.orders[gn.head];\\n        uint48 orderId = gn.head;\\n\\n        while (orderId != 0 && remainingAmount != 0) {\\n            currentOrder = gn.orders[orderId];\\n\\n            if (currentOrder.amount <= remainingAmount) {\\n                remainingAmount -= currentOrder.amount;\\n                orderId = currentOrder.next;\\n            } else {\\n                partiallyFilledOrder = PartiallyFilledOrder(\\n                    currentOrder.orderId,\\n                    currentOrder.maker,\\n                    remainingAmount,\\n                    _calculateFutureValue(value, remainingAmount)\\n                );\\n                currentOrder = gn.orders[currentOrder.prev];\\n                break;\\n            }\\n        }\\n\\n        if (currentOrder.orderId != 0) {\\n            _dropOrders(self, value, currentOrder.orderId);\\n        }\\n\\n        if (partiallyFilledOrder.amount > 0) {\\n            self.nodes[value].orders[partiallyFilledOrder.orderId].amount -= partiallyFilledOrder\\n                .amount;\\n            self.nodes[value].orderTotalAmount -= partiallyFilledOrder.amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n        uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n        _link(self, _value, orderId, gn.head);\\n        _setHead(self, _value, orderId);\\n        if (gn.tail == 0) _setTail(self, _value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, _value, _orderId, _user, _amount);\\n        } else {\\n            uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n            _link(self, _value, gn.tail, orderId);\\n            _setTail(self, _value, orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint48) {\\n        Node storage gn = self.nodes[value];\\n        require(\\n            gn.orders[orderId].timestamp == 0,\\n            \\\"OrderStatisticsTree(409) - Order id already exist.\\\"\\n        );\\n\\n        gn.orderCounter += 1;\\n        gn.orderTotalAmount += amount;\\n        OrderItem memory order = OrderItem(orderId, 0, 0, user, block.timestamp, amount);\\n        gn.orders[orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the list.\\n     */\\n    function _removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n        gn.orderTotalAmount -= order.amount;\\n    }\\n\\n    /**\\n     * @dev Drop the OrderItems older than or equal `orderId` from the list\\n     */\\n    function _dropOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n        uint256 cursor = gn.head;\\n        uint256 removedCount = 1;\\n        uint256 removedAmount = gn.orders[cursor].amount;\\n\\n        while (cursor != orderId) {\\n            cursor = gn.orders[cursor].next;\\n            removedCount++;\\n            removedAmount += gn.orders[cursor].amount;\\n        }\\n\\n        if (gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        }\\n\\n        gn.orderCounter -= removedCount;\\n        gn.orderTotalAmount -= removedAmount;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 _prevId,\\n        uint48 _nextId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[_prevId].next = _nextId;\\n        gn.orders[_nextId].prev = _prevId;\\n    }\\n\\n    function _calculateFutureValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * Constants.PRICE_DIGIT).div(unitPrice);\\n    }\\n\\n    function _calculatePresentValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * unitPrice).div(Constants.PRICE_DIGIT);\\n    }\\n}\\n\",\"keccak256\":\"0x82f693fffbd1f1657b73d69598c7856b403fcccd41ac1c3143e8082e5dc9344d\",\"license\":\"MIT\"},\"contracts/protocol/libraries/QuickSort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary QuickSort {\\n    function sort(uint256[] memory data) public pure returns (uint256[] memory) {\\n        quickSort(data, int256(0), int256(data.length - 1));\\n        return data;\\n    }\\n\\n    function quickSort(\\n        uint256[] memory arr,\\n        int256 left,\\n        int256 right\\n    ) internal pure {\\n        int256 i = left;\\n        int256 j = right;\\n        if (i == j) return;\\n        uint256 pivot = arr[uint256(left + (right - left) / 2)];\\n        while (i <= j) {\\n            while (arr[uint256(i)] < pivot) i++;\\n            while (pivot < arr[uint256(j)]) j--;\\n            if (i <= j) {\\n                (arr[uint256(i)], arr[uint256(j)]) = (arr[uint256(j)], arr[uint256(i)]);\\n                i++;\\n                j--;\\n            }\\n        }\\n        if (left < j) quickSort(arr, left, j);\\n        if (i < right) quickSort(arr, i, right);\\n    }\\n}\\n\",\"keccak256\":\"0x2cce94db4f423d70543c79888f77ed57fad6e6638e6a1d1399daabb99676643a\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/FundManagementLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"../../../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {SafeCast} from \\\"../../../dependencies/openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n// interfaces\\nimport {ILendingMarket} from \\\"../../interfaces/ILendingMarket.sol\\\";\\nimport {ILendingMarketController} from \\\"../../interfaces/ILendingMarketController.sol\\\";\\nimport {IFutureValueVault} from \\\"../../interfaces/IFutureValueVault.sol\\\";\\n// libraries\\nimport {AddressResolverLib} from \\\"../AddressResolverLib.sol\\\";\\nimport {QuickSort} from \\\"../QuickSort.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\nimport {RoundingInt256} from \\\"../math/RoundingInt256.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"../../types/ProtocolTypes.sol\\\";\\n// storages\\nimport {LendingMarketControllerStorage as Storage} from \\\"../../storages/LendingMarketControllerStorage.sol\\\";\\n// liquidation\\nimport {ILiquidationReceiver} from \\\"../../../liquidators/interfaces/ILiquidationReceiver.sol\\\";\\n\\nlibrary FundManagementLogic {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using RoundingUint256 for uint256;\\n    using RoundingInt256 for int256;\\n\\n    struct ExecuteLiquidationVars {\\n        address reserveFund;\\n        uint256 liquidationAmountInCollateralCcy;\\n        uint256 protocolFeeInCollateralCcy;\\n        uint256 liquidatorFeeInCollateralCcy;\\n        bool isDefaultMarket;\\n        bool isReserveFundPaused;\\n        uint256 receivedCollateralAmount;\\n        uint256 receivedDebtAmount;\\n    }\\n\\n    struct CalculatedTotalFundInBaseCurrencyVars {\\n        bool[] isCollateral;\\n        bytes32 ccy;\\n        uint256[] amounts;\\n        uint256[] amountsInBaseCurrency;\\n        uint256 plusDepositAmount;\\n        uint256 minusDepositAmount;\\n    }\\n\\n    struct ActualFunds {\\n        int256 presentValue;\\n        uint256 claimableAmount;\\n        uint256 debtAmount;\\n        int256 futureValue;\\n        uint256 workingLendOrdersAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 borrowedAmount;\\n        int256 genesisValue;\\n    }\\n\\n    struct CalculateActualFundsVars {\\n        bool isTotal;\\n        address market;\\n        bool isDefaultMarket;\\n        uint256[] maturities;\\n        int256 presentValueOfDefaultMarket;\\n    }\\n\\n    struct FutureValueVaultFunds {\\n        int256 genesisValue;\\n        int256 presentValue;\\n        int256 futureValue;\\n    }\\n\\n    struct InactiveBorrowOrdersFunds {\\n        int256 genesisValue;\\n        int256 presentValue;\\n        int256 futureValue;\\n        uint256 workingOrdersAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct InactiveLendOrdersFunds {\\n        int256 genesisValue;\\n        int256 presentValue;\\n        int256 futureValue;\\n        uint256 workingOrdersAmount;\\n        uint256 lentAmount;\\n    }\\n\\n    event OrderFilled(\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 amount,\\n        uint256 futureValue\\n    );\\n\\n    event OrdersFilledInAsync(\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 amount,\\n        uint256 futureValue\\n    );\\n\\n    event RedemptionExecuted(bytes32 ccy, address indexed user, int256 amount);\\n\\n    event LiquidationExecuted(\\n        address indexed user,\\n        bytes32 collateralCcy,\\n        bytes32 indexed debtCcy,\\n        uint256 indexed debtMaturity,\\n        uint256 debtAmount\\n    );\\n\\n    /**\\n     * @notice Converts the future value to the genesis value if there is balance in the past maturity.\\n     * @param _ccy Currency for pausing all lending markets\\n     * @param _user User's address\\n     * @return Current future value amount after update\\n     */\\n    function convertFutureValueToGenesisValue(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) public returns (int256) {\\n        address futureValueVault = Storage.slot().futureValueVaults[_ccy][\\n            Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n        ];\\n        (\\n            int256 removedAmount,\\n            int256 currentAmount,\\n            uint256 basisMaturity,\\n            bool isAllRemoved\\n        ) = IFutureValueVault(futureValueVault).removeFutureValue(_user, _maturity);\\n\\n        if (removedAmount != 0) {\\n            // Overwrite the `removedAmount` with the unsettled amount left of the Genesis Value\\n            // to handle the fractional amount generated by the lazy evaluation.\\n            if (isAllRemoved) {\\n                AddressResolverLib.genesisValueVault().updateGenesisValueWithResidualAmount(\\n                    _ccy,\\n                    _user,\\n                    basisMaturity\\n                );\\n            } else {\\n                AddressResolverLib.genesisValueVault().updateGenesisValueWithFutureValue(\\n                    _ccy,\\n                    _user,\\n                    basisMaturity,\\n                    removedAmount\\n                );\\n            }\\n        }\\n\\n        return currentAmount;\\n    }\\n\\n    function executeLiquidation(\\n        address _liquidator,\\n        address _user,\\n        bytes32 _collateralCcy,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity\\n    ) external {\\n        ExecuteLiquidationVars memory vars;\\n\\n        // In order to liquidate using user collateral, inactive order IDs must be cleaned\\n        // and converted to actual funds first.\\n        cleanUpFunds(_collateralCcy, _user);\\n        cleanUpFunds(_debtCcy, _user);\\n\\n        uint256 debtAmount = calculateActualFunds(_debtCcy, _debtMaturity, _user).debtAmount;\\n\\n        require(debtAmount != 0, \\\"No debt in the selected maturity\\\");\\n\\n        (\\n            vars.liquidationAmountInCollateralCcy,\\n            vars.protocolFeeInCollateralCcy,\\n            vars.liquidatorFeeInCollateralCcy\\n        ) = AddressResolverLib.tokenVault().getLiquidationAmount(\\n            _user,\\n            _collateralCcy,\\n            AddressResolverLib.currencyController().convert(_debtCcy, _collateralCcy, debtAmount)\\n        );\\n\\n        require(vars.liquidationAmountInCollateralCcy != 0, \\\"User has enough collateral\\\");\\n\\n        uint256 totalLiquidatedDebtAmount = AddressResolverLib.currencyController().convert(\\n            _collateralCcy,\\n            _debtCcy,\\n            vars.liquidationAmountInCollateralCcy\\n        );\\n\\n        vars.isDefaultMarket =\\n            Storage.slot().maturityLendingMarkets[_debtCcy][_debtMaturity] ==\\n            Storage.slot().lendingMarkets[_debtCcy][0];\\n        vars.isReserveFundPaused = AddressResolverLib.reserveFund().isPaused();\\n        vars.reserveFund = address(AddressResolverLib.reserveFund());\\n\\n        // Transfer collateral from users to liquidators and reserve funds.\\n        vars.receivedCollateralAmount =\\n            vars.liquidationAmountInCollateralCcy +\\n            vars.liquidatorFeeInCollateralCcy;\\n\\n        uint256 untransferredAmount = AddressResolverLib.tokenVault().transferFrom(\\n            _collateralCcy,\\n            _user,\\n            vars.reserveFund,\\n            vars.protocolFeeInCollateralCcy\\n        );\\n\\n        // If `untransferredAmount` is not 0, the user has not enough deposit in the collateral currency.\\n        // Therefore, the liquidators and the reserve fund obtain zero-coupon bonds instead of the user's collateral.\\n        if (untransferredAmount > 0) {\\n            _transferFunds(_user, vars.reserveFund, _collateralCcy, untransferredAmount.toInt256());\\n            untransferredAmount = vars.receivedCollateralAmount;\\n        } else {\\n            untransferredAmount = AddressResolverLib.tokenVault().transferFrom(\\n                _collateralCcy,\\n                _user,\\n                _liquidator,\\n                vars.receivedCollateralAmount\\n            );\\n        }\\n\\n        if (untransferredAmount > 0) {\\n            untransferredAmount = _transferFunds(\\n                _user,\\n                _liquidator,\\n                _collateralCcy,\\n                untransferredAmount.toInt256()\\n            ).toUint256();\\n        }\\n\\n        // Cover insolvent amounts using reserve funds.\\n        if (untransferredAmount > 0 && !vars.isReserveFundPaused) {\\n            uint256 insolventAmountInDebtCcy = AddressResolverLib.currencyController().convert(\\n                _collateralCcy,\\n                _debtCcy,\\n                untransferredAmount\\n            );\\n\\n            if (AddressResolverLib.tokenVault().getTotalCollateralAmount(_user) == 0) {\\n                insolventAmountInDebtCcy = _transferFunds(\\n                    vars.reserveFund,\\n                    _liquidator,\\n                    _debtCcy,\\n                    _debtMaturity,\\n                    insolventAmountInDebtCcy.toInt256(),\\n                    vars.isDefaultMarket\\n                ).toUint256();\\n            }\\n\\n            totalLiquidatedDebtAmount -= insolventAmountInDebtCcy;\\n        }\\n\\n        if (_liquidator.code.length > 0) {\\n            require(\\n                ILiquidationReceiver(_liquidator).executeOperationForCollateral(\\n                    _liquidator,\\n                    _user,\\n                    _collateralCcy,\\n                    vars.receivedCollateralAmount\\n                ),\\n                \\\"Invalid operation execution\\\"\\n            );\\n        }\\n\\n        // Transfer the debt from users to liquidators\\n        if (totalLiquidatedDebtAmount > 0) {\\n            vars.receivedDebtAmount = totalLiquidatedDebtAmount;\\n\\n            _transferFunds(\\n                _user,\\n                _liquidator,\\n                _debtCcy,\\n                _debtMaturity,\\n                -vars.receivedDebtAmount.toInt256(),\\n                vars.isDefaultMarket\\n            );\\n\\n            if (_liquidator.code.length > 0) {\\n                require(\\n                    ILiquidationReceiver(_liquidator).executeOperationForDebt(\\n                        _liquidator,\\n                        _user,\\n                        _collateralCcy,\\n                        vars.receivedCollateralAmount,\\n                        _debtCcy,\\n                        _debtMaturity,\\n                        vars.receivedDebtAmount\\n                    ),\\n                    \\\"Invalid operation execution\\\"\\n                );\\n            }\\n        }\\n\\n        require(AddressResolverLib.tokenVault().isCovered(msg.sender), \\\"Invalid liquidation\\\");\\n\\n        emit LiquidationExecuted(\\n            _user,\\n            _collateralCcy,\\n            _debtCcy,\\n            _debtMaturity,\\n            totalLiquidatedDebtAmount\\n        );\\n    }\\n\\n    function updateFunds(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        ProtocolTypes.Side _side,\\n        uint256 _filledAmount,\\n        uint256 _filledAmountInFV,\\n        uint256 _orderFeeRate,\\n        bool _isTaker\\n    ) external {\\n        address futureValueVault = Storage.slot().futureValueVaults[_ccy][\\n            Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n        ];\\n\\n        uint256 feeInFV = _isTaker\\n            ? _calculateOrderFeeAmount(_maturity, _filledAmountInFV, _orderFeeRate)\\n            : 0;\\n\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            AddressResolverLib.tokenVault().addDepositAmount(_user, _ccy, _filledAmount);\\n            IFutureValueVault(futureValueVault).addBorrowFutureValue(\\n                _user,\\n                _filledAmountInFV + feeInFV,\\n                _maturity,\\n                _isTaker\\n            );\\n        } else {\\n            AddressResolverLib.tokenVault().removeDepositAmount(_user, _ccy, _filledAmount);\\n            IFutureValueVault(futureValueVault).addLendFutureValue(\\n                _user,\\n                _filledAmountInFV - feeInFV,\\n                _maturity,\\n                _isTaker\\n            );\\n        }\\n\\n        if (feeInFV > 0) {\\n            address reserveFundAddr = address(AddressResolverLib.reserveFund());\\n            IFutureValueVault(futureValueVault).addLendFutureValue(\\n                reserveFundAddr,\\n                feeInFV,\\n                _maturity,\\n                _side == ProtocolTypes.Side.LEND\\n            );\\n\\n            registerCurrencyAndMaturity(_ccy, _maturity, reserveFundAddr);\\n        }\\n\\n        emit OrderFilled(_user, _ccy, _side, _maturity, _filledAmount, _filledAmountInFV);\\n    }\\n\\n    function registerCurrencyAndMaturity(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) public {\\n        if (!Storage.slot().usedMaturities[_ccy][_user].contains(_maturity)) {\\n            Storage.slot().usedMaturities[_ccy][_user].add(_maturity);\\n\\n            if (!Storage.slot().usedCurrencies[_user].contains(_ccy)) {\\n                Storage.slot().usedCurrencies[_user].add(_ccy);\\n            }\\n        }\\n    }\\n\\n    function executeRedemption(\\n        bytes32 _redemptionCcy,\\n        bytes32 _collateralCcy,\\n        address _user\\n    ) external {\\n        int256 redemptionAmount = _resetFunds(_redemptionCcy, _user);\\n\\n        if (redemptionAmount > 0) {\\n            _addDepositAtMarketTerminationPrice(\\n                _redemptionCcy,\\n                _user,\\n                redemptionAmount.toUint256()\\n            );\\n\\n            emit RedemptionExecuted(_redemptionCcy, _user, redemptionAmount);\\n        } else if (redemptionAmount < 0) {\\n            _removeDepositAtMarketTerminationPrice(\\n                _redemptionCcy,\\n                _user,\\n                (-redemptionAmount).toUint256(),\\n                _collateralCcy\\n            );\\n            emit RedemptionExecuted(_redemptionCcy, _user, redemptionAmount);\\n        }\\n    }\\n\\n    function calculateActualFunds(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) public view returns (ActualFunds memory actualFunds) {\\n        CalculateActualFundsVars memory vars;\\n\\n        if (_maturity == 0) {\\n            vars.isTotal = true;\\n            vars.market = Storage.slot().lendingMarkets[_ccy][0];\\n            vars.isDefaultMarket = true;\\n        } else {\\n            vars.isTotal = false;\\n            vars.market = Storage.slot().maturityLendingMarkets[_ccy][_maturity];\\n            vars.isDefaultMarket = vars.market == Storage.slot().lendingMarkets[_ccy][0];\\n        }\\n        actualFunds.genesisValue = AddressResolverLib.genesisValueVault().getGenesisValue(\\n            _ccy,\\n            _user\\n        );\\n\\n        vars.maturities = getUsedMaturities(_ccy, _user);\\n\\n        for (uint256 i = 0; i < vars.maturities.length; i++) {\\n            address currentMarket = Storage.slot().maturityLendingMarkets[_ccy][vars.maturities[i]];\\n            uint256 currentMaturity = ILendingMarket(currentMarket).getMaturity();\\n            bool isDefaultMarket = currentMarket == Storage.slot().lendingMarkets[_ccy][0];\\n\\n            if (vars.isDefaultMarket || currentMarket == vars.market) {\\n                // Get current funds from Future Value Vault by lazy evaluations.\\n                FutureValueVaultFunds memory futureValueVaultFunds = _getFundsFromFutureValueVault(\\n                    _ccy,\\n                    _user,\\n                    vars,\\n                    currentMaturity,\\n                    currentMarket,\\n                    isDefaultMarket\\n                );\\n                // Get current funds from borrowing orders by lazy evaluations.\\n                InactiveBorrowOrdersFunds\\n                    memory borrowOrdersFunds = _getFundsFromInactiveBorrowOrders(\\n                        _ccy,\\n                        _user,\\n                        vars,\\n                        currentMaturity,\\n                        currentMarket,\\n                        isDefaultMarket\\n                    );\\n                // Get current funds from lending orders by lazy evaluations.\\n                InactiveLendOrdersFunds memory lendOrdersFunds = _getFundsFromInactiveLendOrders(\\n                    _ccy,\\n                    _user,\\n                    vars,\\n                    currentMaturity,\\n                    currentMarket,\\n                    isDefaultMarket\\n                );\\n\\n                // Set genesis value.\\n                actualFunds.genesisValue +=\\n                    futureValueVaultFunds.genesisValue -\\n                    borrowOrdersFunds.genesisValue +\\n                    lendOrdersFunds.genesisValue;\\n\\n                // Set present value.\\n                int256 presentValue = futureValueVaultFunds.presentValue -\\n                    borrowOrdersFunds.presentValue +\\n                    lendOrdersFunds.presentValue;\\n\\n                actualFunds.presentValue += presentValue;\\n\\n                if (isDefaultMarket) {\\n                    vars.presentValueOfDefaultMarket = presentValue;\\n                }\\n\\n                if (presentValue > 0) {\\n                    actualFunds.claimableAmount += presentValue.toUint256();\\n                } else if (presentValue < 0) {\\n                    actualFunds.debtAmount += (-presentValue).toUint256();\\n                }\\n\\n                // Set future value.\\n                // Note: When calculating total funds, total future value will be 0 because different maturities can not be added.\\n                if (!vars.isTotal) {\\n                    actualFunds.futureValue +=\\n                        futureValueVaultFunds.futureValue -\\n                        borrowOrdersFunds.futureValue +\\n                        lendOrdersFunds.futureValue;\\n                }\\n\\n                actualFunds.workingBorrowOrdersAmount += borrowOrdersFunds.workingOrdersAmount;\\n                actualFunds.workingLendOrdersAmount += lendOrdersFunds.workingOrdersAmount;\\n                actualFunds.borrowedAmount += borrowOrdersFunds.borrowedAmount;\\n                actualFunds.lentAmount += lendOrdersFunds.lentAmount;\\n\\n                // Get balance fluctuation amount by auto-rolls\\n                if (actualFunds.genesisValue < 0) {\\n                    int256 fluctuation = AddressResolverLib\\n                        .genesisValueVault()\\n                        .calculateBalanceFluctuationByAutoRolls(\\n                            _ccy,\\n                            actualFunds.genesisValue,\\n                            vars.maturities[i],\\n                            i == vars.maturities.length - 1 ? 0 : vars.maturities[i + 1]\\n                        );\\n\\n                    actualFunds.genesisValue += fluctuation;\\n                }\\n            }\\n        }\\n\\n        // Add GV to PV & FV if the market is that the lending position is rolled to.\\n        if (vars.isDefaultMarket && actualFunds.genesisValue != 0) {\\n            int256 futureValue = AddressResolverLib.genesisValueVault().calculateFVFromGV(\\n                _ccy,\\n                0,\\n                actualFunds.genesisValue\\n            );\\n\\n            int256 presentValue = _calculatePVFromFV(\\n                futureValue,\\n                ILendingMarket(Storage.slot().lendingMarkets[_ccy][0]).getMidUnitPrice()\\n            );\\n\\n            actualFunds.presentValue += presentValue;\\n\\n            // Add GV to the claimable amount or debt amount.\\n            // Before that, offset the present value of the default market and the genesis value in addition.\\n            if (presentValue > 0) {\\n                if (vars.presentValueOfDefaultMarket < 0) {\\n                    int256 offsetAmount = presentValue > -vars.presentValueOfDefaultMarket\\n                        ? -vars.presentValueOfDefaultMarket\\n                        : presentValue;\\n                    actualFunds.debtAmount -= (offsetAmount).toUint256();\\n                    presentValue -= offsetAmount;\\n                }\\n\\n                actualFunds.claimableAmount += presentValue.toUint256();\\n            } else if (presentValue < 0) {\\n                if (vars.presentValueOfDefaultMarket > 0) {\\n                    int256 offsetAmount = -presentValue > vars.presentValueOfDefaultMarket\\n                        ? vars.presentValueOfDefaultMarket\\n                        : -presentValue;\\n\\n                    actualFunds.claimableAmount -= (offsetAmount).toUint256();\\n                    presentValue += offsetAmount;\\n                }\\n\\n                actualFunds.debtAmount += (-presentValue).toUint256();\\n            }\\n\\n            if (!vars.isTotal) {\\n                actualFunds.futureValue += futureValue;\\n            }\\n        }\\n    }\\n\\n    function calculateFunds(bytes32 _ccy, address _user)\\n        public\\n        view\\n        returns (\\n            uint256 workingLendOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 collateralAmount,\\n            uint256 lentAmount,\\n            uint256 workingBorrowOrdersAmount,\\n            uint256 debtAmount,\\n            uint256 borrowedAmount\\n        )\\n    {\\n        ActualFunds memory funds = calculateActualFunds(_ccy, 0, _user);\\n\\n        workingLendOrdersAmount = funds.workingLendOrdersAmount;\\n        lentAmount = funds.lentAmount;\\n        workingBorrowOrdersAmount = funds.workingBorrowOrdersAmount;\\n        borrowedAmount = funds.borrowedAmount;\\n        claimableAmount = funds.claimableAmount;\\n        debtAmount = funds.debtAmount;\\n\\n        if (claimableAmount > 0) {\\n            uint256 haircut = AddressResolverLib.currencyController().getHaircut(_ccy);\\n            collateralAmount = (claimableAmount * haircut).div(Constants.PCT_DIGIT);\\n        }\\n    }\\n\\n    function calculateTotalFundsInBaseCurrency(\\n        address _user,\\n        bytes32 _depositCcy,\\n        uint256 _depositAmount\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalWorkingLendOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalCollateralAmount,\\n            uint256 totalLentAmount,\\n            uint256 totalWorkingBorrowOrdersAmount,\\n            uint256 totalDebtAmount,\\n            uint256 totalBorrowedAmount,\\n            bool isEnoughDeposit\\n        )\\n    {\\n        EnumerableSet.Bytes32Set storage currencySet = Storage.slot().usedCurrencies[_user];\\n        CalculatedTotalFundInBaseCurrencyVars memory vars;\\n\\n        vars.isCollateral = AddressResolverLib.tokenVault().isCollateral(currencySet.values());\\n        vars.plusDepositAmount = _depositAmount;\\n\\n        // Calculate total funds from the user's order list\\n        for (uint256 i = 0; i < currencySet.length(); i++) {\\n            vars.ccy = currencySet.at(i);\\n            vars.amounts = new uint256[](7);\\n\\n            // 0: workingLendOrdersAmount\\n            // 1: claimableAmount\\n            // 2: collateralAmount\\n            // 3: lentAmount\\n            // 4: workingBorrowOrdersAmount\\n            // 5: debtAmount\\n            // 6: borrowedAmount\\n            (\\n                vars.amounts[0],\\n                vars.amounts[1],\\n                vars.amounts[2],\\n                vars.amounts[3],\\n                vars.amounts[4],\\n                vars.amounts[5],\\n                vars.amounts[6]\\n            ) = calculateFunds(vars.ccy, _user);\\n\\n            if (vars.ccy == _depositCcy) {\\n                // plusDepositAmount: depositAmount + borrowedAmount\\n                // minusDepositAmount: workingLendOrdersAmount + lentAmount\\n                vars.plusDepositAmount += vars.amounts[6];\\n                vars.minusDepositAmount += vars.amounts[0] + vars.amounts[3];\\n            }\\n\\n            vars.amountsInBaseCurrency = AddressResolverLib\\n                .currencyController()\\n                .convertToBaseCurrency(vars.ccy, vars.amounts);\\n\\n            totalClaimableAmount += vars.amountsInBaseCurrency[1];\\n            totalCollateralAmount += vars.amountsInBaseCurrency[2];\\n            totalWorkingBorrowOrdersAmount += vars.amountsInBaseCurrency[4];\\n            totalDebtAmount += vars.amountsInBaseCurrency[5];\\n\\n            // NOTE: Lent amount and working lend orders amount are excluded here as they are not used\\n            // for the collateral calculation.\\n            // Those amounts need only to check whether there is enough deposit amount in the selected currency.\\n            if (vars.isCollateral[i]) {\\n                totalWorkingLendOrdersAmount += vars.amountsInBaseCurrency[0];\\n                totalLentAmount += vars.amountsInBaseCurrency[3];\\n                totalBorrowedAmount += vars.amountsInBaseCurrency[6];\\n            }\\n        }\\n\\n        // Check if the user has enough collateral in the selected currency.\\n        isEnoughDeposit = vars.plusDepositAmount >= vars.minusDepositAmount;\\n    }\\n\\n    function getUsedMaturities(bytes32 _ccy, address _user)\\n        public\\n        view\\n        returns (uint256[] memory maturities)\\n    {\\n        maturities = Storage.slot().usedMaturities[_ccy][_user].values();\\n        if (maturities.length > 0) {\\n            maturities = QuickSort.sort(maturities);\\n        }\\n    }\\n\\n    function cleanUpAllFunds(address _user) external {\\n        EnumerableSet.Bytes32Set storage ccySet = Storage.slot().usedCurrencies[_user];\\n        for (uint256 i = 0; i < ccySet.length(); i++) {\\n            cleanUpFunds(ccySet.at(i), _user);\\n        }\\n    }\\n\\n    function cleanUpFunds(bytes32 _ccy, address _user)\\n        public\\n        returns (uint256 totalActiveOrderCount)\\n    {\\n        bool futureValueExists = false;\\n        uint256[] memory maturities = getUsedMaturities(_ccy, _user);\\n\\n        for (uint256 j = 0; j < maturities.length; j++) {\\n            ILendingMarket market = ILendingMarket(\\n                Storage.slot().maturityLendingMarkets[_ccy][maturities[j]]\\n            );\\n            uint256 activeMaturity = market.getMaturity();\\n            int256 currentFutureValue = convertFutureValueToGenesisValue(\\n                _ccy,\\n                activeMaturity,\\n                _user\\n            );\\n            (uint256 activeOrderCount, bool isCleaned) = _cleanUpOrders(\\n                _ccy,\\n                activeMaturity,\\n                _user\\n            );\\n\\n            totalActiveOrderCount += activeOrderCount;\\n\\n            if (isCleaned) {\\n                currentFutureValue = convertFutureValueToGenesisValue(_ccy, activeMaturity, _user);\\n            }\\n\\n            if (currentFutureValue != 0) {\\n                futureValueExists = true;\\n            }\\n\\n            if (currentFutureValue == 0 && activeOrderCount == 0) {\\n                Storage.slot().usedMaturities[_ccy][_user].remove(maturities[j]);\\n            }\\n\\n            AddressResolverLib.genesisValueVault().cleanUpGenesisValue(\\n                _ccy,\\n                _user,\\n                j == maturities.length - 1 ? 0 : maturities[j + 1]\\n            );\\n        }\\n\\n        if (\\n            totalActiveOrderCount == 0 &&\\n            !futureValueExists &&\\n            AddressResolverLib.genesisValueVault().getGenesisValue(_ccy, _user) == 0\\n        ) {\\n            Storage.slot().usedCurrencies[_user].remove(_ccy);\\n        }\\n    }\\n\\n    function _cleanUpOrders(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) internal returns (uint256 activeOrderCount, bool isCleaned) {\\n        address futureValueVault = Storage.slot().futureValueVaults[_ccy][\\n            Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n        ];\\n\\n        (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 userCurrentMaturity\\n        ) = ILendingMarket(Storage.slot().maturityLendingMarkets[_ccy][_maturity]).cleanUpOrders(\\n                _user\\n            );\\n\\n        if (removedLendOrderAmount > removedBorrowOrderAmount) {\\n            AddressResolverLib.tokenVault().removeDepositAmount(\\n                _user,\\n                _ccy,\\n                removedLendOrderAmount - removedBorrowOrderAmount\\n            );\\n        } else if (removedLendOrderAmount < removedBorrowOrderAmount) {\\n            AddressResolverLib.tokenVault().addDepositAmount(\\n                _user,\\n                _ccy,\\n                removedBorrowOrderAmount - removedLendOrderAmount\\n            );\\n        }\\n\\n        if (removedLendOrderFutureValue > 0) {\\n            IFutureValueVault(futureValueVault).addLendFutureValue(\\n                _user,\\n                removedLendOrderFutureValue,\\n                userCurrentMaturity,\\n                false\\n            );\\n            emit OrdersFilledInAsync(\\n                _user,\\n                _ccy,\\n                ProtocolTypes.Side.LEND,\\n                userCurrentMaturity,\\n                removedLendOrderAmount,\\n                removedLendOrderFutureValue\\n            );\\n        }\\n\\n        if (removedBorrowOrderFutureValue > 0) {\\n            IFutureValueVault(futureValueVault).addBorrowFutureValue(\\n                _user,\\n                removedBorrowOrderFutureValue,\\n                userCurrentMaturity,\\n                false\\n            );\\n            emit OrdersFilledInAsync(\\n                _user,\\n                _ccy,\\n                ProtocolTypes.Side.BORROW,\\n                userCurrentMaturity,\\n                removedBorrowOrderAmount,\\n                removedBorrowOrderFutureValue\\n            );\\n        }\\n\\n        isCleaned = (removedLendOrderFutureValue + removedBorrowOrderFutureValue) > 0;\\n        activeOrderCount = activeLendOrderCount + activeBorrowOrderCount;\\n    }\\n\\n    function _getFundsFromFutureValueVault(\\n        bytes32 _ccy,\\n        address _user,\\n        CalculateActualFundsVars memory vars,\\n        uint256 currentMaturity,\\n        address currentMarket,\\n        bool isDefaultMarket\\n    ) internal view returns (FutureValueVaultFunds memory funds) {\\n        (int256 futureValueInMaturity, uint256 fvMaturity) = IFutureValueVault(\\n            Storage.slot().futureValueVaults[_ccy][currentMarket]\\n        ).getFutureValue(_user);\\n\\n        if (futureValueInMaturity != 0) {\\n            if (currentMaturity != fvMaturity) {\\n                if (vars.isDefaultMarket) {\\n                    funds.genesisValue = AddressResolverLib.genesisValueVault().calculateGVFromFV(\\n                        _ccy,\\n                        fvMaturity,\\n                        futureValueInMaturity\\n                    );\\n                }\\n            } else if (currentMaturity == fvMaturity) {\\n                if (vars.isTotal && !isDefaultMarket) {\\n                    (funds.presentValue, funds.futureValue) = _calculatePVandFVInDefaultMarket(\\n                        _ccy,\\n                        fvMaturity,\\n                        futureValueInMaturity\\n                    );\\n                } else if (vars.isTotal || !vars.isDefaultMarket || isDefaultMarket) {\\n                    funds.futureValue = futureValueInMaturity;\\n                    funds.presentValue = _calculatePVFromFV(\\n                        _ccy,\\n                        fvMaturity,\\n                        futureValueInMaturity\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getFundsFromInactiveBorrowOrders(\\n        bytes32 _ccy,\\n        address _user,\\n        CalculateActualFundsVars memory vars,\\n        uint256 currentMaturity,\\n        address currentMarket,\\n        bool isDefaultMarket\\n    ) internal view returns (InactiveBorrowOrdersFunds memory funds) {\\n        uint256 filledFutureValue;\\n        uint256 orderMaturity;\\n        (\\n            funds.workingOrdersAmount,\\n            funds.borrowedAmount,\\n            filledFutureValue,\\n            orderMaturity\\n        ) = ILendingMarket(currentMarket).getTotalAmountFromBorrowOrders(_user);\\n\\n        if (filledFutureValue != 0) {\\n            if (currentMaturity != orderMaturity) {\\n                if (vars.isDefaultMarket) {\\n                    funds.genesisValue = AddressResolverLib.genesisValueVault().calculateGVFromFV(\\n                        _ccy,\\n                        orderMaturity,\\n                        filledFutureValue.toInt256()\\n                    );\\n                }\\n            } else if (currentMaturity == orderMaturity) {\\n                if (vars.isTotal && !isDefaultMarket) {\\n                    (funds.presentValue, funds.futureValue) = _calculatePVandFVInDefaultMarket(\\n                        _ccy,\\n                        orderMaturity,\\n                        filledFutureValue.toInt256()\\n                    );\\n                } else if (vars.isTotal || !vars.isDefaultMarket || isDefaultMarket) {\\n                    funds.futureValue = filledFutureValue.toInt256();\\n                    funds.presentValue = _calculatePVFromFV(_ccy, orderMaturity, funds.futureValue);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getFundsFromInactiveLendOrders(\\n        bytes32 _ccy,\\n        address _user,\\n        CalculateActualFundsVars memory vars,\\n        uint256 currentMaturity,\\n        address currentMarket,\\n        bool isDefaultMarket\\n    ) internal view returns (InactiveLendOrdersFunds memory funds) {\\n        uint256 filledFutureValue;\\n        uint256 orderMaturity;\\n        (\\n            funds.workingOrdersAmount,\\n            funds.lentAmount,\\n            filledFutureValue,\\n            orderMaturity\\n        ) = ILendingMarket(currentMarket).getTotalAmountFromLendOrders(_user);\\n\\n        if (filledFutureValue != 0) {\\n            if (currentMaturity != orderMaturity) {\\n                if (vars.isDefaultMarket) {\\n                    funds.genesisValue += AddressResolverLib.genesisValueVault().calculateGVFromFV(\\n                        _ccy,\\n                        orderMaturity,\\n                        filledFutureValue.toInt256()\\n                    );\\n                }\\n            } else if (currentMaturity == orderMaturity) {\\n                if (vars.isTotal && !isDefaultMarket) {\\n                    (funds.presentValue, funds.futureValue) = _calculatePVandFVInDefaultMarket(\\n                        _ccy,\\n                        orderMaturity,\\n                        filledFutureValue.toInt256()\\n                    );\\n                } else if (vars.isTotal || !vars.isDefaultMarket || isDefaultMarket) {\\n                    funds.futureValue = filledFutureValue.toInt256();\\n                    funds.presentValue = _calculatePVFromFV(_ccy, orderMaturity, funds.futureValue);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _calculatePVandFVInDefaultMarket(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        int256 _futureValueInMaturity\\n    ) internal view returns (int256 presentValue, int256 futureValue) {\\n        address destinationMarket = Storage.slot().lendingMarkets[_ccy][0];\\n        uint256 unitPriceInDestinationMaturity = ILendingMarket(destinationMarket)\\n            .getMidUnitPrice();\\n\\n        if (AddressResolverLib.genesisValueVault().getAutoRollLog(_ccy, _maturity).unitPrice == 0) {\\n            presentValue = _calculatePVFromFV(_ccy, _maturity, _futureValueInMaturity);\\n            futureValue = (presentValue * Constants.PRICE_DIGIT.toInt256()).div(\\n                unitPriceInDestinationMaturity.toInt256()\\n            );\\n        } else {\\n            futureValue = AddressResolverLib.genesisValueVault().calculateFVFromFV(\\n                _ccy,\\n                _maturity,\\n                0,\\n                _futureValueInMaturity\\n            );\\n            presentValue = _calculatePVFromFV(futureValue, unitPriceInDestinationMaturity);\\n        }\\n    }\\n\\n    function _calculatePVFromFV(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        int256 _futureValue\\n    ) internal view returns (int256 presentValue) {\\n        uint256 unitPriceInBasisMaturity = ILendingMarket(\\n            Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n        ).getMidUnitPrice();\\n        presentValue = _calculatePVFromFV(_futureValue, unitPriceInBasisMaturity);\\n    }\\n\\n    function _calculateFVFromPV(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        int256 _presentValue\\n    ) internal view returns (int256) {\\n        int256 unitPrice = ILendingMarket(Storage.slot().maturityLendingMarkets[_ccy][_maturity])\\n            .getMidUnitPrice()\\n            .toInt256();\\n\\n        // NOTE: The formula is: futureValue = presentValue / unitPrice.\\n        return (_presentValue * Constants.PRICE_DIGIT.toInt256()).div(unitPrice);\\n    }\\n\\n    function _calculatePVFromFV(int256 _futureValue, uint256 _unitPrice)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        // NOTE: The formula is: presentValue = futureValue * unitPrice.\\n        return (_futureValue * _unitPrice.toInt256()).div(Constants.PRICE_DIGIT.toInt256());\\n    }\\n\\n    function _convertToBaseCurrencyAtMarketTerminationPrice(bytes32 _ccy, uint256 _amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_ccy == Storage.slot().baseCurrency) {\\n            return _amount;\\n        } else {\\n            uint8 decimals = AddressResolverLib.currencyController().getDecimals(_ccy);\\n\\n            return\\n                (_amount * Storage.slot().marketTerminationPrices[_ccy].toUint256()).div(\\n                    (10**decimals)\\n                );\\n        }\\n    }\\n\\n    function _convertFromBaseCurrencyAtMarketTerminationPrice(bytes32 _ccy, uint256 _amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_ccy == Storage.slot().baseCurrency) {\\n            return _amount;\\n        } else {\\n            uint8 decimals = AddressResolverLib.currencyController().getDecimals(_ccy);\\n            return\\n                (_amount * 10**decimals).div(\\n                    Storage.slot().marketTerminationPrices[_ccy].toUint256()\\n                );\\n        }\\n    }\\n\\n    function _transferFunds(\\n        address _from,\\n        address _to,\\n        bytes32 _ccy,\\n        int256 _amount\\n    ) internal returns (int256 untransferredAmount) {\\n        uint256[] memory maturities = getUsedMaturities(_ccy, _from);\\n        address defaultMarketAddress = Storage.slot().lendingMarkets[_ccy][0];\\n        untransferredAmount = _amount;\\n\\n        for (uint256 i; i < maturities.length; i++) {\\n            if (untransferredAmount == 0) {\\n                break;\\n            }\\n\\n            untransferredAmount = _transferFunds(\\n                _from,\\n                _to,\\n                _ccy,\\n                maturities[i],\\n                untransferredAmount,\\n                Storage.slot().maturityLendingMarkets[_ccy][maturities[i]] == defaultMarketAddress\\n            );\\n        }\\n    }\\n\\n    function _transferFunds(\\n        address _from,\\n        address _to,\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        int256 _amount,\\n        bool _isDefaultMarket\\n    ) internal returns (int256 untransferredAmount) {\\n        untransferredAmount = _amount;\\n        bool isDebt = _amount < 0;\\n\\n        if (_isDefaultMarket) {\\n            int256 userGVAmount = AddressResolverLib.genesisValueVault().getGenesisValue(\\n                _ccy,\\n                _from\\n            );\\n\\n            if ((isDebt && userGVAmount < 0) || (!isDebt && userGVAmount > 0)) {\\n                uint256 currentMaturity = AddressResolverLib.genesisValueVault().getCurrentMaturity(\\n                    _ccy\\n                );\\n\\n                int256 gvAmount = AddressResolverLib.genesisValueVault().calculateGVFromFV(\\n                    _ccy,\\n                    0,\\n                    _calculateFVFromPV(_ccy, currentMaturity, untransferredAmount)\\n                );\\n\\n                if ((isDebt && userGVAmount > gvAmount) || (!isDebt && userGVAmount < gvAmount)) {\\n                    gvAmount = userGVAmount;\\n                }\\n\\n                // Due to the negative genesis value, the liquidator's genesis value is decreased.\\n                AddressResolverLib.genesisValueVault().transferFrom(_ccy, _from, _to, gvAmount);\\n\\n                untransferredAmount -= _calculatePVFromFV(\\n                    _ccy,\\n                    currentMaturity,\\n                    AddressResolverLib.genesisValueVault().calculateFVFromGV(_ccy, 0, gvAmount)\\n                );\\n            }\\n        }\\n\\n        IFutureValueVault futureValueVault = IFutureValueVault(\\n            Storage.slot().futureValueVaults[_ccy][\\n                Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n            ]\\n        );\\n\\n        (int256 userFVAmount, ) = futureValueVault.getFutureValue(_from);\\n\\n        if ((isDebt && userFVAmount < 0) || (!isDebt && userFVAmount > 0)) {\\n            int256 fvAmount = _calculateFVFromPV(_ccy, _maturity, untransferredAmount);\\n\\n            if ((isDebt && userFVAmount > fvAmount) || (!isDebt && userFVAmount < fvAmount)) {\\n                fvAmount = userFVAmount;\\n            }\\n\\n            futureValueVault.transferFrom(_from, _to, fvAmount, _maturity);\\n            untransferredAmount -= _calculatePVFromFV(_ccy, _maturity, fvAmount);\\n        }\\n\\n        if (_amount != untransferredAmount) {\\n            registerCurrencyAndMaturity(_ccy, _maturity, _to);\\n        }\\n    }\\n\\n    function _calculateOrderFeeAmount(\\n        uint256 _maturity,\\n        uint256 _amount,\\n        uint256 _orderFeeRate\\n    ) internal view returns (uint256 orderFeeAmount) {\\n        require(block.timestamp < _maturity, \\\"Invalid maturity\\\");\\n        uint256 currentMaturity = _maturity - block.timestamp;\\n\\n        // NOTE: The formula is:\\n        // actualRate = feeRate * (currentMaturity / SECONDS_IN_YEAR)\\n        // orderFeeAmount = amount * actualRate\\n        orderFeeAmount = (_orderFeeRate * currentMaturity * _amount).div(\\n            Constants.SECONDS_IN_YEAR * Constants.PCT_DIGIT\\n        );\\n    }\\n\\n    function _resetFunds(bytes32 _ccy, address _user) internal returns (int256 amount) {\\n        // First, clean up future values and genesis values to redeem those amounts.\\n        cleanUpFunds(_ccy, _user);\\n\\n        amount = calculateActualFunds(_ccy, 0, _user).presentValue;\\n\\n        uint256[] memory maturities = Storage.slot().usedMaturities[_ccy][_user].values();\\n        for (uint256 j; j < maturities.length; j++) {\\n            IFutureValueVault(\\n                Storage.slot().futureValueVaults[_ccy][\\n                    Storage.slot().maturityLendingMarkets[_ccy][maturities[j]]\\n                ]\\n            ).resetFutureValue(_user);\\n        }\\n\\n        AddressResolverLib.genesisValueVault().resetGenesisValue(_ccy, _user);\\n    }\\n\\n    function _addDepositAtMarketTerminationPrice(\\n        bytes32 _ccy,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        bytes32[] memory collateralCurrencies = AddressResolverLib\\n            .tokenVault()\\n            .getCollateralCurrencies();\\n\\n        uint256[] memory marketTerminationRatios = new uint256[](collateralCurrencies.length);\\n        uint256 marketTerminationRatioTotal;\\n\\n        for (uint256 i; i < collateralCurrencies.length; i++) {\\n            bytes32 ccy = collateralCurrencies[i];\\n            marketTerminationRatios[i] = Storage.slot().marketTerminationRatios[ccy];\\n            marketTerminationRatioTotal += marketTerminationRatios[i];\\n        }\\n\\n        uint256 amountInBaseCurrency = _convertToBaseCurrencyAtMarketTerminationPrice(\\n            _ccy,\\n            _amount\\n        );\\n\\n        for (uint256 i; i < collateralCurrencies.length; i++) {\\n            bytes32 ccy = collateralCurrencies[i];\\n            uint256 addedAmount = _convertFromBaseCurrencyAtMarketTerminationPrice(\\n                ccy,\\n                (amountInBaseCurrency * marketTerminationRatios[i]).div(marketTerminationRatioTotal)\\n            );\\n\\n            AddressResolverLib.tokenVault().addDepositAmount(_user, ccy, addedAmount);\\n        }\\n    }\\n\\n    function _removeDepositAtMarketTerminationPrice(\\n        bytes32 _ccy,\\n        address _user,\\n        uint256 _amount,\\n        bytes32 _collateralCcy\\n    ) internal {\\n        require(\\n            AddressResolverLib.tokenVault().isCollateral(_collateralCcy),\\n            \\\"Not registered as collateral\\\"\\n        );\\n\\n        uint256 depositAmount = AddressResolverLib.tokenVault().getDepositAmount(\\n            _user,\\n            _collateralCcy\\n        );\\n\\n        uint256 removedAmount = _convertFromBaseCurrencyAtMarketTerminationPrice(\\n            _collateralCcy,\\n            _convertToBaseCurrencyAtMarketTerminationPrice(_ccy, _amount)\\n        );\\n\\n        require(depositAmount >= removedAmount, \\\"Not enough collateral\\\");\\n\\n        AddressResolverLib.tokenVault().removeDepositAmount(_user, _collateralCcy, removedAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xd3ee64e3589b7e1170c3a754f04386cbb9c06cb6b67834eb0bb5713df89de639\",\"license\":\"MIT\"},\"contracts/protocol/libraries/math/RoundingInt256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoundingInt256 {\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0);\\n\\n        int256 diff = (a * 10) / b - (a / b) * 10;\\n        if (diff >= 5) {\\n            return (a / b) + 1;\\n        } else if (diff <= -5) {\\n            return (a / b) - 1;\\n        } else {\\n            return a / b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7ab7168f709ecb8d28c017b8c074fe83ae88de347d3aed6ce13f2188d854cb9\",\"license\":\"MIT\"},\"contracts/protocol/libraries/math/RoundingUint256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoundingUint256 {\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0);\\n\\n        if ((a * 10) / b - (a / b) * 10 < 5) {\\n            return a / b;\\n        } else {\\n            return (a / b) + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc360f39a82f1a9a7454726e3db802407d305b5e525aa8c3236fe49ca6ca534d\",\"license\":\"MIT\"},\"contracts/protocol/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../dependencies/chainlink/contracts/AggregatorV3Interface.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct Currency {\\n    bool isSupported;\\n    string name;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.currencyController\\\");\\n\\n    struct Storage {\\n        bytes32 baseCurrency;\\n        // Protocol currencies\\n        EnumerableSet.Bytes32Set currencies;\\n        mapping(bytes32 => uint256) haircuts;\\n        // Array of the price feeds\\n        mapping(bytes32 => AggregatorV3Interface[]) priceFeeds;\\n        // Total cached decimals of the price feeds\\n        mapping(bytes32 => uint8) decimalsCaches;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8bf03b6346d11a110e916796a9cc09c8a331b61dcf119d3fe929b393c0a701b6\",\"license\":\"MIT\"},\"contracts/protocol/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nstruct AutoRollLog {\\n    uint256 unitPrice;\\n    uint256 lendingCompoundFactor;\\n    uint256 borrowingCompoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.genesisValueVault\\\");\\n\\n    struct Storage {\\n        mapping(bytes32 => bool) isInitialized;\\n        mapping(bytes32 => uint256) initialCompoundFactors;\\n        mapping(bytes32 => uint256) lendingCompoundFactors;\\n        mapping(bytes32 => uint256) borrowingCompoundFactors;\\n        mapping(bytes32 => uint256) currentMaturity;\\n        mapping(bytes32 => uint8) decimals;\\n        // Mapping from user to balance per currency\\n        mapping(bytes32 => mapping(address => int256)) balances;\\n        mapping(bytes32 => uint256) totalLendingSupplies;\\n        mapping(bytes32 => uint256) totalBorrowingSupplies;\\n        // Mapping from maturity balance per currency\\n        mapping(bytes32 => mapping(uint256 => int256)) maturityBalances;\\n        // Mapping from maturity to auto-roll log per currency\\n        mapping(bytes32 => mapping(uint256 => AutoRollLog)) autoRollLogs;\\n        // Mapping from user to maturity per currency\\n        mapping(bytes32 => mapping(address => uint256)) userMaturities;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x887ce7f8c0dbbd8c7f6310e109fa6bf14b5520068d299fcf224faae13bd8de46\",\"license\":\"MIT\"},\"contracts/protocol/storages/LendingMarketControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct ObservationPeriodLog {\\n    uint256 totalAmount;\\n    uint256 totalFutureValue;\\n}\\n\\nlibrary LendingMarketControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarketController\\\");\\n\\n    struct Storage {\\n        bytes32 baseCurrency;\\n        uint256 marketBasePeriod;\\n        uint256 marketTerminationDate;\\n        mapping(bytes32 => int256) marketTerminationPrices;\\n        mapping(bytes32 => uint256) marketTerminationRatios;\\n        // Mapping from currency to lending market contract addresses\\n        mapping(bytes32 => address[]) lendingMarkets;\\n        // Mapping from lending market contract address to future value vault contract address per currency\\n        mapping(bytes32 => mapping(address => address)) futureValueVaults;\\n        // Mapping from maturity to lending market contract address per currency\\n        mapping(bytes32 => mapping(uint256 => address)) maturityLendingMarkets;\\n        // Mapping from currency to genesis date in the lending market\\n        mapping(bytes32 => uint256) genesisDates;\\n        // Mapping from user to used currency\\n        mapping(address => EnumerableSet.Bytes32Set) usedCurrencies;\\n        // Mapping from user to used market maturity per currency\\n        mapping(bytes32 => mapping(address => EnumerableSet.UintSet)) usedMaturities;\\n        // Mapping from maturity to observation period log per currency\\n        mapping(bytes32 => mapping(uint256 => ObservationPeriodLog)) observationPeriodLogs;\\n        // Mapping from maturity to latest estimated auto roll unit price per currency\\n        mapping(bytes32 => mapping(uint256 => uint256)) estimatedAutoRollUnitPrice;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd1b06b393618d8be766fefa889bde3939c60b0fcc933b5819955687f32c2a62d\",\"license\":\"MIT\"},\"contracts/protocol/storages/LendingMarketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {OrderStatisticsTreeLib} from \\\"../libraries/OrderStatisticsTreeLib.sol\\\";\\n\\nstruct MarketOrder {\\n    ProtocolTypes.Side side;\\n    uint256 unitPrice; // in basis points\\n    uint256 maturity;\\n    uint256 timestamp;\\n}\\n\\nlibrary LendingMarketStorage {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarket\\\");\\n\\n    struct Storage {\\n        bytes32 ccy;\\n        uint48 lastOrderId;\\n        uint256 openingDate;\\n        uint256 maturity;\\n        // Mapping from maturity to opening unit price\\n        mapping(uint256 => uint256) openingUnitPrices;\\n        // Mapping from maturity to boolean if the market is ready or not\\n        mapping(uint256 => bool) isReady;\\n        // Mapping from user to active lend order ids\\n        mapping(address => uint48[]) activeLendOrderIds;\\n        // Mapping from user to active borrow order ids\\n        mapping(address => uint48[]) activeBorrowOrderIds;\\n        // Mapping from user to current maturity\\n        mapping(address => uint256) userCurrentMaturities;\\n        // Mapping from orderId to order\\n        mapping(uint256 => MarketOrder) orders;\\n        // Mapping from orderId to boolean for pre-order or not\\n        mapping(uint256 => bool) isPreOrder;\\n        // Mapping from maturity to lending orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) lendOrders;\\n        // Mapping from maturity to borrowing orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) borrowOrders;\\n        // Mapping from order side to threshold unit price of circuit breaker per block\\n        mapping(uint256 => mapping(ProtocolTypes.Side => uint256)) circuitBreakerThresholdUnitPrices;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b248489383f35251b60bf1d02c644912ae0271699f652343c9afe2f86cd031\",\"license\":\"MIT\"},\"contracts/protocol/storages/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.mixinAddressResolver\\\");\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 => address) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x852b885b6264a58930a0945c68842717e19f954eaefc0137235e6f263e17fa9d\",\"license\":\"MIT\"},\"contracts/protocol/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0x7b05f97661e6dfe1142eec9be3dcf86d1eec55ed4fb1dea4a5859f75a0c84c13\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61528c61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100b35760003560e01c80639519832b1161007b5780639519832b146101f5578063a86c2a3e14610215578063b61ef55a14610235578063b6eb033d14610255578063c86f6da414610275578063fd4584e61461029557600080fd5b8063300074c9146100b8578063390e5d12146100eb5780634ad238801461010d5780635c3477651461018d578063826b47e8146101d5575b600080fd5b8180156100c457600080fd5b506100d86100d33660046148ce565b6102e5565b6040519081526020015b60405180910390f35b8180156100f757600080fd5b5061010b610106366004614914565b6104de565b005b61012061011b3660046148ce565b610875565b6040516100e29190600061012082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525092915050565b6101a061019b366004614992565b611195565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016100e2565b8180156101e157600080fd5b5061010b6101f03660046149be565b611292565b81801561020157600080fd5b506100d8610210366004614992565b6112f6565b81801561022157600080fd5b5061010b6102303660046149d9565b611662565b610248610243366004614992565b61209e565b6040516100e29190614a26565b81801561026157600080fd5b5061010b6102703660046148ce565b612174565b81801561028157600080fd5b5061010b6102903660046148ce565b61224f565b6102a86102a3366004614a6a565b61232c565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c0830152151560e0820152610100016100e2565b6000806102f061283b565b6000868152600691909101602052604081209061030b61283b565b6000888152600791909101602090815260408083208984528252808320546001600160a01b03908116855291840194909452918301812054925163ae100e6d60e01b815286831660048201526024810188905292909116925090819081908190859063ae100e6d90604401608060405180830381600087803b15801561039057600080fd5b505af11580156103a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c89190614a9d565b9350935093509350836000146104d1578015610456576103e661285f565b60405163312c474560e01b8152600481018b90526001600160a01b03898116602483015260448201859052919091169063312c474590606401600060405180830381600087803b15801561043957600080fd5b505af115801561044d573d6000803e3d6000fd5b505050506104d1565b61045e61285f565b6040516360e3f72960e11b8152600481018b90526001600160a01b0389811660248301526044820185905260648201879052919091169063c1c7ee5290608401600060405180830381600087803b1580156104b857600080fd5b505af11580156104cc573d6000803e3d6000fd5b505050505b5090979650505050505050565b60006104e861283b565b60008a8152600691909101602052604081209061050361283b565b60008c8152600791909101602090815260408083208d84528252808320546001600160a01b03908116855291840194909452919092018220541691508261054b576000610556565b610556898686612883565b9050600187600181111561056c5761056c614ade565b14156106705761057a612906565b6001600160a01b0316634ba0c9b5898c896040518463ffffffff1660e01b81526004016105a993929190614af4565b600060405180830381600087803b1580156105c357600080fd5b505af11580156105d7573d6000803e3d6000fd5b50505050816001600160a01b0316635b0b29308983886105f79190614b2b565b8c876040518563ffffffff1660e01b81526004016106189493929190614b43565b602060405180830381600087803b15801561063257600080fd5b505af1158015610646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066a9190614b6b565b5061076a565b610678612906565b6001600160a01b031663fb7bd3b4898c896040518463ffffffff1660e01b81526004016106a793929190614af4565b600060405180830381600087803b1580156106c157600080fd5b505af11580156106d5573d6000803e3d6000fd5b50505050816001600160a01b0316639e8d3d558983886106f59190614b88565b8c876040518563ffffffff1660e01b81526004016107169493929190614b43565b602060405180830381600087803b15801561073057600080fd5b505af1158015610744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107689190614b6b565b505b801561082257600061077a61291e565b90506001600160a01b038316639e8d3d5582848d60008d60018111156107a2576107a2614ade565b146040518563ffffffff1660e01b81526004016107c29493929190614b43565b602060405180830381600087803b1580156107dc57600080fd5b505af11580156107f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108149190614b6b565b506108208b8b83612174565b505b888a896001600160a01b03167ff80dd09632f046e05472e1c239271a3b2ad3de73c27a1b03d0bb0329ba6716df8a8a8a60405161086193929190614b9f565b60405180910390a450505050505050505050565b6108c46040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805160a08101825260008082526020820181905291810182905260608082015260808101919091528361094b57600181526108ff61283b565b600501600086815260200190815260200160002060008154811061092557610925614bd5565b600091825260209182902001546001600160a01b031690820152600160408201526109d5565b6000815261095761283b565b6000868152600791909101602090815260408083208784528252909120546001600160a01b03169082015261098a61283b565b60050160008681526020019081526020016000206000815481106109b0576109b0614bd5565b60009182526020918290200154908201516001600160a01b0390811691161460408201525b6109dd61285f565b60405163386320d360e11b8152600481018790526001600160a01b03858116602483015291909116906370c641a69060440160206040518083038186803b158015610a2757600080fd5b505afa158015610a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5f9190614beb565b610100830152610a6f858461209e565b606082015260005b816060015151811015610eca576000610a8e61283b565b6007016000888152602001908152602001600020600084606001518481518110610aba57610aba614bd5565b6020026020010151815260200190815260200160002060009054906101000a90046001600160a01b031690506000816001600160a01b031663e16695b56040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2157600080fd5b505afa158015610b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b599190614beb565b90506000610b6561283b565b60050160008a8152602001908152602001600020600081548110610b8b57610b8b614bd5565b60009182526020909120015460408601516001600160a01b03858116921691909114915080610bcf575084602001516001600160a01b0316836001600160a01b0316145b15610eb4576000610be48a8988868887612937565b90506000610bf68b8a89878988612b27565b90506000610c088c8b8a888a89612cba565b8051835185519293509091610c1d9190614c04565b610c279190614c43565b8961010001818151610c399190614c43565b9052506020808201518382015191850151600092610c5691614c04565b610c609190614c43565b9050808a600001818151610c749190614c43565b9052508415610c8557608089018190525b6000811315610cb057610c9781612e4a565b8a602001818151610ca89190614b2b565b905250610cdf565b6000811215610cdf57610cca610cc582614c84565b612e4a565b8a604001818151610cdb9190614b2b565b9052505b8851610d1d57816040015183604001518560400151610cfe9190614c04565b610d089190614c43565b8a606001818151610d199190614c43565b9052505b82606001518a60c001818151610d339190614b2b565b905250606082015160808b018051610d4c908390614b2b565b905250608083015160e08b018051610d65908390614b2b565b905250608082015160a08b018051610d7e908390614b2b565b9052506101008a015160001315610eaf576000610d9961285f565b6001600160a01b031663aee1311e8f8d61010001518d606001518d81518110610dc457610dc4614bd5565b602002602001015160018f6060015151610dde9190614b88565b8e14610e115760608f0151610df48f6001614b2b565b81518110610e0457610e04614bd5565b6020026020010151610e14565b60005b6040516001600160e01b031960e087901b168152600481019490945260248401929092526044830152606482015260840160206040518083038186803b158015610e5d57600080fd5b505afa158015610e71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e959190614beb565b9050808b61010001818151610eaa9190614c43565b905250505b505050505b5050508080610ec290614ca1565b915050610a77565b5080604001518015610ee0575061010082015115155b1561118d576000610eef61285f565b610100840151604051637636e94160e01b8152600481018990526000602482015260448101919091526001600160a01b039190911690637636e9419060640160206040518083038186803b158015610f4657600080fd5b505afa158015610f5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7e9190614beb565b9050600061103a82610f8e61283b565b60050160008a8152602001908152602001600020600081548110610fb457610fb4614bd5565b60009182526020918290200154604080516371613c2d60e01b815290516001600160a01b03909216926371613c2d92600480840193829003018186803b158015610ffd57600080fd5b505afa158015611011573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110359190614beb565b612ea0565b9050808460000181815161104e9190614c43565b90525060008113156110e0576000836080015112156110be576000836080015161107790614c84565b82136110835781611091565b836080015161109190614c84565b905061109c81612e4a565b856040018181516110ad9190614b88565b9052506110ba8183614c04565b9150505b6110c781612e4a565b846020018181516110d89190614b2b565b90525061116e565b600081121561116e5760008360800151131561114d57600083608001518261110790614c84565b1361111a5761111582614c84565b611120565b83608001515b905061112b81612e4a565b8560200181815161113c9190614b88565b9052506111498183614c43565b9150505b611159610cc582614c84565b8460400181815161116a9190614b2b565b9052505b825161118a5781846060018181516111869190614c43565b9052505b50505b509392505050565b6000806000806000806000806111ad8a60008b610875565b9050806080015197508060a0015194508060c0015193508060e001519150806020015196508060400151925060008711156112855760006111ec612ec9565b6001600160a01b0316639abdb38a8c6040518263ffffffff1660e01b815260040161121991815260200190565b60206040518083038186803b15801561123157600080fd5b505afa158015611245573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112699190614beb565b905061128161271061127b838b614cbc565b90612ee9565b9650505b5092959891949750929550565b600061129c61283b565b6001600160a01b03831660009081526009919091016020526040812091505b6112c482612f5a565b8110156112f1576112de6112d88383612f64565b846112f6565b50806112e981614ca1565b9150506112bb565b505050565b60008080611304858561209e565b905060005b815181101561158557600061131c61283b565b6007016000888152602001908152602001600020600084848151811061134457611344614bd5565b6020026020010151815260200190815260200160002060009054906101000a90046001600160a01b031690506000816001600160a01b031663e16695b56040518163ffffffff1660e01b815260040160206040518083038186803b1580156113ab57600080fd5b505afa1580156113bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e39190614beb565b905060006113f289838a6102e5565b90506000806114028b858c612f70565b9092509050611411828a614b2b565b98508015611427576114248b858c6102e5565b92505b821561143257600197505b8215801561143e575081155b156114af576114ad87878151811061145857611458614bd5565b602002602001015161146861283b565b600a0160008e815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002061335a90919063ffffffff16565b505b6114b761285f565b6001600160a01b031663eeac29d88c8c60018b516114d59190614b88565b8a14611504578a6114e78b6001614b2b565b815181106114f7576114f7614bd5565b6020026020010151611507565b60005b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526044820152606401600060405180830381600087803b15801561155557600080fd5b505af1158015611569573d6000803e3d6000fd5b505050505050505050808061157d90614ca1565b915050611309565b5082158015611592575081155b801561162557506115a161285f565b60405163386320d360e11b8152600481018790526001600160a01b03868116602483015291909116906370c641a69060440160206040518083038186803b1580156115eb57600080fd5b505afa1580156115ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116239190614beb565b155b1561165a576116588561163661283b565b6001600160a01b0387166000908152600991909101602052604090209061335a565b505b505092915050565b6116b760405180610100016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160001515815260200160001515815260200160008152602001600081525090565b6116c184866112f6565b506116cc83866112f6565b5060006116da848488610875565b604001519050806117325760405162461bcd60e51b815260206004820181905260248201527f4e6f206465627420696e207468652073656c6563746564206d6174757269747960448201526064015b60405180910390fd5b61173a612906565b6001600160a01b0316635257ed678787611752612ec9565b6040516317338d9560e31b8152600481018a9052602481018b9052604481018790526001600160a01b03919091169063b99c6ca89060640160206040518083038186803b1580156117a257600080fd5b505afa1580156117b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117da9190614beb565b6040518463ffffffff1660e01b81526004016117f893929190614af4565b60606040518083038186803b15801561181057600080fd5b505afa158015611824573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118489190614cdb565b60608501526040840152602083018190526118a55760405162461bcd60e51b815260206004820152601a60248201527f557365722068617320656e6f75676820636f6c6c61746572616c0000000000006044820152606401611729565b60006118af612ec9565b60208401516040516317338d9560e31b8152600481018990526024810188905260448101919091526001600160a01b03919091169063b99c6ca89060640160206040518083038186803b15801561190557600080fd5b505afa158015611919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193d9190614beb565b905061194761283b565b600501600086815260200190815260200160002060008154811061196d5761196d614bd5565b6000918252602090912001546001600160a01b031661198a61283b565b6000878152600791909101602090815260408083208884529091529020546001600160a01b03161460808401526119bf61291e565b6001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b1580156119f757600080fd5b505afa158015611a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2f9190614b6b565b151560a0840152611a3e61291e565b6001600160a01b0316835260608301516020840151611a5d9190614b2b565b60c08401526000611a6c612906565b8451604080870151905163500d2f6d60e01b8152600481018b90526001600160a01b038c811660248301529283166044820152606481019190915291169063500d2f6d90608401602060405180830381600087803b158015611acd57600080fd5b505af1158015611ae1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b059190614beb565b90508015611b3157611b2588856000015189611b2085613366565b6133d0565b505060c0830151611bd3565b611b39612906565b60c085015160405163500d2f6d60e01b8152600481018a90526001600160a01b038b811660248301528c81166044830152606482019290925291169063500d2f6d90608401602060405180830381600087803b158015611b9857600080fd5b505af1158015611bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd09190614beb565b90505b8015611bee57611beb610cc5898b8a611b2086613366565b90505b600081118015611c0057508360a00151155b15611d52576000611c0f612ec9565b6040516317338d9560e31b8152600481018a905260248101899052604481018490526001600160a01b03919091169063b99c6ca89060640160206040518083038186803b158015611c5f57600080fd5b505afa158015611c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c979190614beb565b9050611ca1612906565b6040516354821c2160e01b81526001600160a01b038b8116600483015291909116906354821c219060240160206040518083038186803b158015611ce457600080fd5b505afa158015611cf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1c9190614beb565b611d4457611d41610cc586600001518c8a8a611d3787613366565b8b608001516134e0565b90505b611d4e8184614b88565b9250505b6001600160a01b0389163b15611e445760c0840151604051630fa3ece160e11b81526001600160a01b038b811660048301819052908b166024830152604482018a90526064820192909252631f47d9c290608401602060405180830381600087803b158015611dc057600080fd5b505af1158015611dd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df89190614b6b565b611e445760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206f7065726174696f6e20657865637574696f6e00000000006044820152606401611729565b8115611f825760e08401829052611e74888a8888611e6187613366565b611e6a90614c84565b89608001516134e0565b506001600160a01b0389163b15611f825760c084015160e085015160405163091cad1b60e31b81526001600160a01b038c811660048301819052908c166024830152604482018b905260648201939093526084810189905260a4810188905260c48101919091526348e568d89060e401602060405180830381600087803b158015611efe57600080fd5b505af1158015611f12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f369190614b6b565b611f825760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206f7065726174696f6e20657865637574696f6e00000000006044820152606401611729565b611f8a612906565b6040516325e1f09f60e01b81523360048201526001600160a01b0391909116906325e1f09f9060240160206040518083038186803b158015611fcb57600080fd5b505afa158015611fdf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120039190614b6b565b6120455760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2103634b8bab4b230ba34b7b760691b6044820152606401611729565b8486896001600160a01b03167f347d8f9576f47b3bd7a4821cd3d3d4171968cdd36680d4abaca7de302d836f998a8660405161208b929190918252602082015260400190565b60405180910390a4505050505050505050565b60606120d66120ab61283b565b6000858152600a91909101602090815260408083206001600160a01b038716845290915290206139f3565b80519091501561216e57604051634f64581360e11b815273DEaafdfd0E28973EC8ff292547BfD190260DfC6C90639ec8b02690612117908490600401614a26565b60006040518083038186803b15801561212f57600080fd5b505af4158015612143573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261216b9190810190614d74565b90505b92915050565b6121ac8261218061283b565b6000868152600a91909101602090815260408083206001600160a01b0387168452909152902090613a07565b6112f1576121e8826121bc61283b565b6000868152600a91909101602090815260408083206001600160a01b0387168452909152902090613a1f565b50612217836121f561283b565b6001600160a01b03841660009081526009919091016020526040902090613a07565b6112f1576122498361222761283b565b6001600160a01b03841660009081526009919091016020526040902090613a1f565b50505050565b600061225b8483613a2b565b905060008113156122c257612279848361227484612e4a565b613bec565b60408051858152602081018390526001600160a01b038416917f93b0301fda99bfd2e8af22161527848125b3a6ae8e5bb83eed2f0313e758fa9c910160405180910390a2612249565b6000811215612249576122e284836122dc610cc585614c84565b86613e4c565b60408051858152602081018390526001600160a01b038416917f93b0301fda99bfd2e8af22161527848125b3a6ae8e5bb83eed2f0313e758fa9c910160405180910390a250505050565b600080600080600080600080600061234261283b565b60090160008d6001600160a01b03166001600160a01b0316815260200190815260200160002090506123a66040518060c001604052806060815260200160008019168152602001606081526020016060815260200160008152602001600081525090565b6123ae612906565b6001600160a01b0316633f90a08e6123c584614076565b6040518263ffffffff1660e01b81526004016123e19190614a26565b60006040518083038186803b1580156123f957600080fd5b505afa15801561240d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124359190810190614e0a565b8152608081018b905260005b61244a83612f5a565b81101561281d5761245b8382612f64565b602083015260408051600780825261010082019092529081602001602082028036833750505060408301526020820151612495908f611195565b88604001516000815181106124ac576124ac614bd5565b6020026020010189604001516001815181106124ca576124ca614bd5565b602002602001018a604001516002815181106124e8576124e8614bd5565b602002602001018b6040015160038151811061250657612506614bd5565b602002602001018c6040015160048151811061252457612524614bd5565b602002602001018d6040015160058151811061254257612542614bd5565b602002602001018e6040015160068151811061256057612560614bd5565b6020908102919091018101979097529690965295909452949093529390529290529190528201518d141561261f5781604001516006815181106125a5576125a5614bd5565b6020026020010151826080018181516125be9190614b2b565b9052506040820151805160039081106125d9576125d9614bd5565b602002602001015182604001516000815181106125f8576125f8614bd5565b602002602001015161260a9190614b2b565b8260a00181815161261b9190614b2b565b9052505b612627612ec9565b6001600160a01b0316638a2eae92836020015184604001516040518363ffffffff1660e01b815260040161265c929190614e99565b60006040518083038186803b15801561267457600080fd5b505afa158015612688573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126b09190810190614d74565b60608301819052805160019081106126ca576126ca614bd5565b60200260200101518a6126dd9190614b2b565b995081606001516002815181106126f6576126f6614bd5565b6020026020010151896127099190614b2b565b9850816060015160048151811061272257612722614bd5565b6020026020010151876127359190614b2b565b9650816060015160058151811061274e5761274e614bd5565b6020026020010151866127619190614b2b565b95508160000151818151811061277957612779614bd5565b60200260200101511561280b57816060015160008151811061279d5761279d614bd5565b60200260200101518b6127b09190614b2b565b9a5081606001516003815181106127c9576127c9614bd5565b6020026020010151886127dc9190614b2b565b975081606001516006815181106127f5576127f5614bd5565b6020026020010151856128089190614b2b565b94505b8061281581614ca1565b915050612441565b508060a0015181608001511015925050509397509397509397509397565b7f8041b8421ebd495cc61f38c788c9eb100daccf9bd36aa0bb920b7a15b2e0496590565b600061287e7011d95b995cda5cd5985b1d5955985d5b1d607a1b614081565b905090565b60008342106128c75760405162461bcd60e51b815260206004820152601060248201526f496e76616c6964206d6174757269747960801b6044820152606401611729565b60006128d34286614b88565b90506128fd6128e86127106301e13380614cbc565b856128f38487614cbc565b61127b9190614cbc565b95945050505050565b600061287e69151bdad95b95985d5b1d60b21b614081565b600061287e6a14995cd95c9d99519d5b9960aa1b614081565b61295b60405180606001604052806000815260200160008152602001600081525090565b60008061296661283b565b60008a8152600691909101602090815260408083206001600160a01b03898116855292529182902054915163070da1af60e11b81528a82166004820152911690630e1b435e90602401604080518083038186803b1580156129c657600080fd5b505afa1580156129da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129fe9190614eda565b9150915081600014612b1b57808614612ab457866040015115612aaf57612a2361285f565b604051630c30971960e11b8152600481018b905260248101839052604481018490526001600160a01b0391909116906318612e32906064015b60206040518083038186803b158015612a7457600080fd5b505afa158015612a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aac9190614beb565b83525b612b1b565b80861415612b1b5786518015612ac8575083155b15612ae757612ad8898284614119565b60408501526020840152612b1b565b865180612af657508660400151155b80612afe5750835b15612b1b5760408301829052612b15898284614346565b60208401525b50509695505050505050565b612b596040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b604051631c7b209b60e31b81526001600160a01b038781166004830152600091829186169063e3d904d89060240160806040518083038186803b158015612b9f57600080fd5b505afa158015612bb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd79190614efe565b6080870192909252606086019290925290925090508115612b1b57808614612c5557866040015115612aaf57612c0b61285f565b6001600160a01b03166318612e328a83612c2486613366565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401612a5c565b80861415612b1b5786518015612c69575083155b15612c8157612ad88982612c7c85613366565b614119565b865180612c9057508660400151155b80612c985750835b15612b1b57612ca682613366565b60408401819052612b15908a908390614346565b612cec6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040516339f7dda360e21b81526001600160a01b038781166004830152600091829186169063e7df768c9060240160806040518083038186803b158015612d3257600080fd5b505afa158015612d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6a9190614efe565b6080870192909252606086019290925290925090508115612b1b57808614612c5557866040015115612aaf57612d9e61285f565b6001600160a01b03166318612e328a83612db786613366565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b158015612dfb57600080fd5b505afa158015612e0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e339190614beb565b83518490612e42908390614c43565b905250612b1b565b600080821215612e9c5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401611729565b5090565b600061216b612eb0612710613366565b612eb984613366565b612ec39086614f34565b906143f0565b600061287e7121bab93932b731bca1b7b73a3937b63632b960711b614081565b6000808211612ef757600080fd5b6005612f038385614fcf565b612f0e90600a614cbc565b83612f1a86600a614cbc565b612f249190614fcf565b612f2e9190614b88565b1015612f4557612f3e8284614fcf565b905061216e565b612f4f8284614fcf565b612f3e906001614b2b565b600061216e825490565b600061216b8383614483565b6000806000612f7d61283b565b60008781526006919091016020526040812090612f9861283b565b6000898152600791909101602090815260408083208a84528252808320546001600160a01b0390811685529184019490945291909201822054169150808080808080612fe261283b565b60008e8152600791909101602090815260408083208f845290915290819020549051633d4eccdf60e01b81526001600160a01b038d8116600483015290911690633d4eccdf9060240160e060405180830381600087803b15801561304557600080fd5b505af1158015613059573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307d9190614fe3565b96509650965096509650965096508183111561310a5761309b612906565b6001600160a01b031663fb7bd3b48c8f6130b58688614b88565b6040518463ffffffff1660e01b81526004016130d393929190614af4565b600060405180830381600087803b1580156130ed57600080fd5b505af1158015613101573d6000803e3d6000fd5b50505050613185565b818310156131855761311a612906565b6001600160a01b0316634ba0c9b58c8f6131348787614b88565b6040518463ffffffff1660e01b815260040161315293929190614af4565b600060405180830381600087803b15801561316c57600080fd5b505af1158015613180573d6000803e3d6000fd5b505050505b841561325a57604051639e8d3d5560e01b81526001600160a01b03891690639e8d3d55906131be908e9089908690600090600401614b43565b602060405180830381600087803b1580156131d857600080fd5b505af11580156131ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132109190614b6b565b50808d8c6001600160a01b03167fba00994778888e87ce0908fd360c4b0417bfe7e274cce4cb72ed8a60b38b3e386000878a60405161325193929190614b9f565b60405180910390a45b831561332f576040516305b0b29360e41b81526001600160a01b03891690635b0b293090613293908e9088908690600090600401614b43565b602060405180830381600087803b1580156132ad57600080fd5b505af11580156132c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e59190614b6b565b50808d8c6001600160a01b03167fba00994778888e87ce0908fd360c4b0417bfe7e274cce4cb72ed8a60b38b3e386001868960405161332693929190614b9f565b60405180910390a45b600061333b8587614b2b565b1198506133488688614b2b565b99505050505050505050935093915050565b600061216b83836144ad565b60006001600160ff1b03821115612e9c5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401611729565b6000806133dd848761209e565b905060006133e961283b565b600501600086815260200190815260200160002060008154811061340f5761340f614bd5565b60009182526020822001548594506001600160a01b031691505b82518110156134d5578361343c576134d5565b6134c188888886858151811061345457613454614bd5565b602002602001015188876001600160a01b031661346f61283b565b60070160008e815260200190815260200160002060008b8a8151811061349757613497614bd5565b6020908102919091018101518252810191909152604001600020546001600160a01b0316146134e0565b9350806134cd81614ca1565b915050613429565b505050949350505050565b816000811282156138195760006134f561285f565b60405163386320d360e11b8152600481018990526001600160a01b038b8116602483015291909116906370c641a69060440160206040518083038186803b15801561353f57600080fd5b505afa158015613553573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135779190614beb565b90508180156135865750600081125b8061359a57508115801561359a5750600081135b156138175760006135a961285f565b6001600160a01b03166349a1d218896040518263ffffffff1660e01b81526004016135d691815260200190565b60206040518083038186803b1580156135ee57600080fd5b505afa158015613602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136269190614beb565b9050600061363261285f565b6001600160a01b03166318612e328a600061364e8d878b6145a0565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b15801561369257600080fd5b505afa1580156136a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136ca9190614beb565b90508380156136d857508083135b806136eb5750831580156136eb57508083125b156136f35750815b6136fb61285f565b604051633916cf2b60e21b8152600481018b90526001600160a01b038d811660248301528c8116604483015260648201849052919091169063e45b3cac90608401600060405180830381600087803b15801561375657600080fd5b505af115801561376a573d6000803e3d6000fd5b50505050613808898361377b61285f565b604051637636e94160e01b8152600481018e905260006024820152604481018690526001600160a01b039190911690637636e9419060640160206040518083038186803b1580156137cb57600080fd5b505afa1580156137df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138039190614beb565b614346565b6138129086614c04565b945050505b505b600061382361283b565b6000888152600691909101602052604081209061383e61283b565b60008a8152600791909101602090815260408083208b84528252808320546001600160a01b03908116855291840194909452918301812054925163070da1af60e11b81528c83166004820152929091169250908290630e1b435e90602401604080518083038186803b1580156138b357600080fd5b505afa1580156138c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138eb9190614eda565b5090508280156138fb5750600081125b8061390f57508215801561390f5750600081135b156139d45760006139218989876145a0565b905083801561392f57508082135b8061394257508315801561394257508082125b1561394a5750805b604051630c02764960e31b81526001600160a01b038c811660048301528b8116602483015260448201839052606482018a9052841690636013b24890608401600060405180830381600087803b1580156139a357600080fd5b505af11580156139b7573d6000803e3d6000fd5b505050506139c6898983614346565b6139d09086614c04565b9450505b8386146139e6576139e688888b612174565b5050509695505050505050565b60606000613a0083614657565b9392505050565b6000818152600183016020526040812054151561216b565b600061216b83836146b3565b6000613a3783836112f6565b50613a4483600084610875565b5190506000613a7f613a5461283b565b6000868152600a91909101602090815260408083206001600160a01b038816845290915290206139f3565b905060005b8151811015613b7857613a9561283b565b60008681526006919091016020526040812090613ab061283b565b60070160008881526020019081526020016000206000858581518110613ad857613ad8614bd5565b60209081029190910181015182528181019290925260409081016000908120546001600160a01b039081168552928401949094529182019092205490516366c9d55160e01b815286831660048201529116906366c9d55190602401600060405180830381600087803b158015613b4d57600080fd5b505af1158015613b61573d6000803e3d6000fd5b505050508080613b7090614ca1565b915050613a84565b50613b8161285f565b60405163b340398d60e01b8152600481018690526001600160a01b038581166024830152919091169063b340398d90604401600060405180830381600087803b158015613bcd57600080fd5b505af1158015613be1573d6000803e3d6000fd5b505050505092915050565b6000613bf6612906565b6001600160a01b031663d5e190d06040518163ffffffff1660e01b815260040160006040518083038186803b158015613c2e57600080fd5b505afa158015613c42573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613c6a9190810190614d74565b90506000815167ffffffffffffffff811115613c8857613c88614d09565b604051908082528060200260200182016040528015613cb1578160200160208202803683370190505b5090506000805b8351811015613d55576000848281518110613cd557613cd5614bd5565b60200260200101519050613ce761283b565b600401600082815260200190815260200160002054848381518110613d0e57613d0e614bd5565b602002602001018181525050838281518110613d2c57613d2c614bd5565b602002602001015183613d3f9190614b2b565b9250508080613d4d90614ca1565b915050613cb8565b506000613d628786614702565b905060005b8451811015613e42576000858281518110613d8457613d84614bd5565b602002602001015190506000613dc282613dbd87898781518110613daa57613daa614bd5565b60200260200101518861127b9190614cbc565b6147df565b9050613dcc612906565b6001600160a01b0316634ba0c9b58a84846040518463ffffffff1660e01b8152600401613dfb93929190614af4565b600060405180830381600087803b158015613e1557600080fd5b505af1158015613e29573d6000803e3d6000fd5b5050505050508080613e3a90614ca1565b915050613d67565b5050505050505050565b613e54612906565b6001600160a01b0316635d95df8a826040518263ffffffff1660e01b8152600401613e8191815260200190565b60206040518083038186803b158015613e9957600080fd5b505afa158015613ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ed19190614b6b565b613f1d5760405162461bcd60e51b815260206004820152601c60248201527f4e6f74207265676973746572656420617320636f6c6c61746572616c000000006044820152606401611729565b6000613f27612906565b604051630129e6bf60e11b81526001600160a01b038681166004830152602482018590529190911690630253cd7e9060440160206040518083038186803b158015613f7157600080fd5b505afa158015613f85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fa99190614beb565b90506000613fbb83613dbd8887614702565b9050808210156140055760405162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da0818dbdb1b185d195c985b605a1b6044820152606401611729565b61400d612906565b6001600160a01b031663fb7bd3b48685846040518463ffffffff1660e01b815260040161403c93929190614af4565b600060405180830381600087803b15801561405657600080fd5b505af115801561406a573d6000803e3d6000fd5b50505050505050505050565b606061216e82614657565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b031690816141125760405162461bcd60e51b81526004016117299190615037565b5092915050565b600080600061412661283b565b600501600087815260200190815260200160002060008154811061414c5761414c614bd5565b6000918252602080832090910154604080516371613c2d60e01b815290516001600160a01b03909216945084926371613c2d92600480840193829003018186803b15801561419957600080fd5b505afa1580156141ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141d19190614beb565b90506141db61285f565b60405163474611f160e01b815260048101899052602481018890526001600160a01b03919091169063474611f19060440160a06040518083038186803b15801561422457600080fd5b505afa158015614238573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061425c919061508c565b516142965761426c878787614346565b935061428f61427a82613366565b614285612710613366565b612ec39087614f34565b925061433c565b61429e61285f565b604051631b736f6760e31b8152600481018990526024810188905260006044820152606481018790526001600160a01b03919091169063db9b7b389060840160206040518083038186803b1580156142f557600080fd5b505afa158015614309573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061432d9190614beb565b92506143398382612ea0565b93505b5050935093915050565b60008061435161283b565b6000868152600791909101602090815260408083208784528252918290205482516371613c2d60e01b815292516001600160a01b03909116926371613c2d926004808301939192829003018186803b1580156143ac57600080fd5b505afa1580156143c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143e49190614beb565b90506128fd8382612ea0565b6000816143fc57600080fd5b600061440883856150fc565b61441390600a614f34565b8361441f86600a614f34565b61442991906150fc565b6144339190614c04565b90506005811261445a5761444783856150fc565b614452906001614c43565b91505061216e565b600419811361447957600161446f84866150fc565b6144529190614c04565b61445283856150fc565b600082600001828154811061449a5761449a614bd5565b9060005260206000200154905092915050565b600081815260018301602052604081205480156145965760006144d1600183614b88565b85549091506000906144e590600190614b88565b905081811461454a57600086600001828154811061450557614505614bd5565b906000526020600020015490508087600001848154811061452857614528614bd5565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061455b5761455b61512a565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061216e565b600091505061216e565b6000806146466145ae61283b565b6000878152600791909101602090815260408083208884528252918290205482516371613c2d60e01b815292516001600160a01b03909116926371613c2d926004808301939192829003018186803b15801561460957600080fd5b505afa15801561461d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146419190614beb565b613366565b90506128fd81612eb9612710613366565b6060816000018054806020026020016040519081016040528092919081815260200182805480156146a757602002820191906000526020600020905b815481526020019060010190808311614693575b50505050509050919050565b60008181526001830160205260408120546146fa5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561216e565b50600061216e565b600061470c61283b565b5483141561471b57508061216e565b6000614725612ec9565b6001600160a01b03166312105fea856040518263ffffffff1660e01b815260040161475291815260200190565b60206040518083038186803b15801561476a57600080fd5b505afa15801561477e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147a29190615140565b90506144526147b282600a615247565b6147d56147bd61283b565b60008881526003919091016020526040902054612e4a565b61127b9086614cbc565b60006147e961283b565b548314156147f857508061216e565b6000614802612ec9565b6001600160a01b03166312105fea856040518263ffffffff1660e01b815260040161482f91815260200190565b60206040518083038186803b15801561484757600080fd5b505afa15801561485b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061487f9190615140565b90506144526148a761488f61283b565b60008781526003919091016020526040902054612e4a565b6147d583600a615247565b80356001600160a01b03811681146148c957600080fd5b919050565b6000806000606084860312156148e357600080fd5b83359250602084013591506148fa604085016148b2565b90509250925092565b801515811461491157600080fd5b50565b600080600080600080600080610100898b03121561493157600080fd5b883597506020890135965061494860408a016148b2565b955060608901356002811061495c57600080fd5b94506080890135935060a0890135925060c0890135915060e089013561498181614903565b809150509295985092959890939650565b600080604083850312156149a557600080fd5b823591506149b5602084016148b2565b90509250929050565b6000602082840312156149d057600080fd5b61216b826148b2565b600080600080600060a086880312156149f157600080fd5b6149fa866148b2565b9450614a08602087016148b2565b94979496505050506040830135926060810135926080909101359150565b6020808252825182820181905260009190848201906040850190845b81811015614a5e57835183529284019291840191600101614a42565b50909695505050505050565b600080600060608486031215614a7f57600080fd5b614a88846148b2565b95602085013595506040909401359392505050565b60008060008060808587031215614ab357600080fd5b8451935060208501519250604085015191506060850151614ad381614903565b939692955090935050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b039390931683526020830191909152604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115614b3e57614b3e614b15565b500190565b6001600160a01b03949094168452602084019290925260408301521515606082015260800190565b600060208284031215614b7d57600080fd5b8151613a0081614903565b600082821015614b9a57614b9a614b15565b500390565b6060810160028510614bc157634e487b7160e01b600052602160045260246000fd5b938152602081019290925260409091015290565b634e487b7160e01b600052603260045260246000fd5b600060208284031215614bfd57600080fd5b5051919050565b60008083128015600160ff1b850184121615614c2257614c22614b15565b6001600160ff1b0384018313811615614c3d57614c3d614b15565b50500390565b600080821280156001600160ff1b0384900385131615614c6557614c65614b15565b600160ff1b8390038412811615614c7e57614c7e614b15565b50500190565b6000600160ff1b821415614c9a57614c9a614b15565b5060000390565b6000600019821415614cb557614cb5614b15565b5060010190565b6000816000190483118215151615614cd657614cd6614b15565b500290565b600080600060608486031215614cf057600080fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614d4857614d48614d09565b604052919050565b600067ffffffffffffffff821115614d6a57614d6a614d09565b5060051b60200190565b60006020808385031215614d8757600080fd5b825167ffffffffffffffff811115614d9e57600080fd5b8301601f81018513614daf57600080fd5b8051614dc2614dbd82614d50565b614d1f565b81815260059190911b82018301908381019087831115614de157600080fd5b928401925b82841015614dff57835182529284019290840190614de6565b979650505050505050565b60006020808385031215614e1d57600080fd5b825167ffffffffffffffff811115614e3457600080fd5b8301601f81018513614e4557600080fd5b8051614e53614dbd82614d50565b81815260059190911b82018301908381019087831115614e7257600080fd5b928401925b82841015614dff578351614e8a81614903565b82529284019290840190614e77565b6000604082018483526020604081850152818551808452606086019150828701935060005b818110156104d157845183529383019391830191600101614ebe565b60008060408385031215614eed57600080fd5b505080516020909101519092909150565b60008060008060808587031215614f1457600080fd5b505082516020840151604085015160609095015191969095509092509050565b60006001600160ff1b0381841382841380821686840486111615614f5a57614f5a614b15565b600160ff1b6000871282811687830589121615614f7957614f79614b15565b60008712925087820587128484161615614f9557614f95614b15565b87850587128184161615614fab57614fab614b15565b505050929093029392505050565b634e487b7160e01b600052601260045260246000fd5b600082614fde57614fde614fb9565b500490565b600080600080600080600060e0888a031215614ffe57600080fd5b5050855160208701516040880151606089015160808a015160a08b015160c0909b0151949c939b50919990985090965094509092509050565b600060208083528351808285015260005b8181101561506457858101830151858201604001528201615048565b81811115615076576000604083870101525b50601f01601f1916929092016040019392505050565b600060a0828403121561509e57600080fd5b60405160a0810181811067ffffffffffffffff821117156150c1576150c1614d09565b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b60008261510b5761510b614fb9565b600160ff1b82146000198414161561512557615125614b15565b500590565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561515257600080fd5b815160ff81168114613a0057600080fd5b600181815b8085111561519e57816000190482111561518457615184614b15565b8085161561519157918102915b93841c9390800290615168565b509250929050565b6000826151b55750600161216e565b816151c25750600061216e565b81600181146151d857600281146151e2576151fe565b600191505061216e565b60ff8411156151f3576151f3614b15565b50506001821b61216e565b5060208310610133831016604e8410600b8410161715615221575081810a61216e565b61522b8383615163565b806000190482111561523f5761523f614b15565b029392505050565b600061216b60ff8416836151a656fea264697066735822122088d79dfd5caf0440b6770f9275d83d4290d001f7651f4032dd760480494b438364736f6c63430008090033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100b35760003560e01c80639519832b1161007b5780639519832b146101f5578063a86c2a3e14610215578063b61ef55a14610235578063b6eb033d14610255578063c86f6da414610275578063fd4584e61461029557600080fd5b8063300074c9146100b8578063390e5d12146100eb5780634ad238801461010d5780635c3477651461018d578063826b47e8146101d5575b600080fd5b8180156100c457600080fd5b506100d86100d33660046148ce565b6102e5565b6040519081526020015b60405180910390f35b8180156100f757600080fd5b5061010b610106366004614914565b6104de565b005b61012061011b3660046148ce565b610875565b6040516100e29190600061012082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525092915050565b6101a061019b366004614992565b611195565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016100e2565b8180156101e157600080fd5b5061010b6101f03660046149be565b611292565b81801561020157600080fd5b506100d8610210366004614992565b6112f6565b81801561022157600080fd5b5061010b6102303660046149d9565b611662565b610248610243366004614992565b61209e565b6040516100e29190614a26565b81801561026157600080fd5b5061010b6102703660046148ce565b612174565b81801561028157600080fd5b5061010b6102903660046148ce565b61224f565b6102a86102a3366004614a6a565b61232c565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c0830152151560e0820152610100016100e2565b6000806102f061283b565b6000868152600691909101602052604081209061030b61283b565b6000888152600791909101602090815260408083208984528252808320546001600160a01b03908116855291840194909452918301812054925163ae100e6d60e01b815286831660048201526024810188905292909116925090819081908190859063ae100e6d90604401608060405180830381600087803b15801561039057600080fd5b505af11580156103a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c89190614a9d565b9350935093509350836000146104d1578015610456576103e661285f565b60405163312c474560e01b8152600481018b90526001600160a01b03898116602483015260448201859052919091169063312c474590606401600060405180830381600087803b15801561043957600080fd5b505af115801561044d573d6000803e3d6000fd5b505050506104d1565b61045e61285f565b6040516360e3f72960e11b8152600481018b90526001600160a01b0389811660248301526044820185905260648201879052919091169063c1c7ee5290608401600060405180830381600087803b1580156104b857600080fd5b505af11580156104cc573d6000803e3d6000fd5b505050505b5090979650505050505050565b60006104e861283b565b60008a8152600691909101602052604081209061050361283b565b60008c8152600791909101602090815260408083208d84528252808320546001600160a01b03908116855291840194909452919092018220541691508261054b576000610556565b610556898686612883565b9050600187600181111561056c5761056c614ade565b14156106705761057a612906565b6001600160a01b0316634ba0c9b5898c896040518463ffffffff1660e01b81526004016105a993929190614af4565b600060405180830381600087803b1580156105c357600080fd5b505af11580156105d7573d6000803e3d6000fd5b50505050816001600160a01b0316635b0b29308983886105f79190614b2b565b8c876040518563ffffffff1660e01b81526004016106189493929190614b43565b602060405180830381600087803b15801561063257600080fd5b505af1158015610646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066a9190614b6b565b5061076a565b610678612906565b6001600160a01b031663fb7bd3b4898c896040518463ffffffff1660e01b81526004016106a793929190614af4565b600060405180830381600087803b1580156106c157600080fd5b505af11580156106d5573d6000803e3d6000fd5b50505050816001600160a01b0316639e8d3d558983886106f59190614b88565b8c876040518563ffffffff1660e01b81526004016107169493929190614b43565b602060405180830381600087803b15801561073057600080fd5b505af1158015610744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107689190614b6b565b505b801561082257600061077a61291e565b90506001600160a01b038316639e8d3d5582848d60008d60018111156107a2576107a2614ade565b146040518563ffffffff1660e01b81526004016107c29493929190614b43565b602060405180830381600087803b1580156107dc57600080fd5b505af11580156107f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108149190614b6b565b506108208b8b83612174565b505b888a896001600160a01b03167ff80dd09632f046e05472e1c239271a3b2ad3de73c27a1b03d0bb0329ba6716df8a8a8a60405161086193929190614b9f565b60405180910390a450505050505050505050565b6108c46040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805160a08101825260008082526020820181905291810182905260608082015260808101919091528361094b57600181526108ff61283b565b600501600086815260200190815260200160002060008154811061092557610925614bd5565b600091825260209182902001546001600160a01b031690820152600160408201526109d5565b6000815261095761283b565b6000868152600791909101602090815260408083208784528252909120546001600160a01b03169082015261098a61283b565b60050160008681526020019081526020016000206000815481106109b0576109b0614bd5565b60009182526020918290200154908201516001600160a01b0390811691161460408201525b6109dd61285f565b60405163386320d360e11b8152600481018790526001600160a01b03858116602483015291909116906370c641a69060440160206040518083038186803b158015610a2757600080fd5b505afa158015610a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5f9190614beb565b610100830152610a6f858461209e565b606082015260005b816060015151811015610eca576000610a8e61283b565b6007016000888152602001908152602001600020600084606001518481518110610aba57610aba614bd5565b6020026020010151815260200190815260200160002060009054906101000a90046001600160a01b031690506000816001600160a01b031663e16695b56040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2157600080fd5b505afa158015610b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b599190614beb565b90506000610b6561283b565b60050160008a8152602001908152602001600020600081548110610b8b57610b8b614bd5565b60009182526020909120015460408601516001600160a01b03858116921691909114915080610bcf575084602001516001600160a01b0316836001600160a01b0316145b15610eb4576000610be48a8988868887612937565b90506000610bf68b8a89878988612b27565b90506000610c088c8b8a888a89612cba565b8051835185519293509091610c1d9190614c04565b610c279190614c43565b8961010001818151610c399190614c43565b9052506020808201518382015191850151600092610c5691614c04565b610c609190614c43565b9050808a600001818151610c749190614c43565b9052508415610c8557608089018190525b6000811315610cb057610c9781612e4a565b8a602001818151610ca89190614b2b565b905250610cdf565b6000811215610cdf57610cca610cc582614c84565b612e4a565b8a604001818151610cdb9190614b2b565b9052505b8851610d1d57816040015183604001518560400151610cfe9190614c04565b610d089190614c43565b8a606001818151610d199190614c43565b9052505b82606001518a60c001818151610d339190614b2b565b905250606082015160808b018051610d4c908390614b2b565b905250608083015160e08b018051610d65908390614b2b565b905250608082015160a08b018051610d7e908390614b2b565b9052506101008a015160001315610eaf576000610d9961285f565b6001600160a01b031663aee1311e8f8d61010001518d606001518d81518110610dc457610dc4614bd5565b602002602001015160018f6060015151610dde9190614b88565b8e14610e115760608f0151610df48f6001614b2b565b81518110610e0457610e04614bd5565b6020026020010151610e14565b60005b6040516001600160e01b031960e087901b168152600481019490945260248401929092526044830152606482015260840160206040518083038186803b158015610e5d57600080fd5b505afa158015610e71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e959190614beb565b9050808b61010001818151610eaa9190614c43565b905250505b505050505b5050508080610ec290614ca1565b915050610a77565b5080604001518015610ee0575061010082015115155b1561118d576000610eef61285f565b610100840151604051637636e94160e01b8152600481018990526000602482015260448101919091526001600160a01b039190911690637636e9419060640160206040518083038186803b158015610f4657600080fd5b505afa158015610f5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7e9190614beb565b9050600061103a82610f8e61283b565b60050160008a8152602001908152602001600020600081548110610fb457610fb4614bd5565b60009182526020918290200154604080516371613c2d60e01b815290516001600160a01b03909216926371613c2d92600480840193829003018186803b158015610ffd57600080fd5b505afa158015611011573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110359190614beb565b612ea0565b9050808460000181815161104e9190614c43565b90525060008113156110e0576000836080015112156110be576000836080015161107790614c84565b82136110835781611091565b836080015161109190614c84565b905061109c81612e4a565b856040018181516110ad9190614b88565b9052506110ba8183614c04565b9150505b6110c781612e4a565b846020018181516110d89190614b2b565b90525061116e565b600081121561116e5760008360800151131561114d57600083608001518261110790614c84565b1361111a5761111582614c84565b611120565b83608001515b905061112b81612e4a565b8560200181815161113c9190614b88565b9052506111498183614c43565b9150505b611159610cc582614c84565b8460400181815161116a9190614b2b565b9052505b825161118a5781846060018181516111869190614c43565b9052505b50505b509392505050565b6000806000806000806000806111ad8a60008b610875565b9050806080015197508060a0015194508060c0015193508060e001519150806020015196508060400151925060008711156112855760006111ec612ec9565b6001600160a01b0316639abdb38a8c6040518263ffffffff1660e01b815260040161121991815260200190565b60206040518083038186803b15801561123157600080fd5b505afa158015611245573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112699190614beb565b905061128161271061127b838b614cbc565b90612ee9565b9650505b5092959891949750929550565b600061129c61283b565b6001600160a01b03831660009081526009919091016020526040812091505b6112c482612f5a565b8110156112f1576112de6112d88383612f64565b846112f6565b50806112e981614ca1565b9150506112bb565b505050565b60008080611304858561209e565b905060005b815181101561158557600061131c61283b565b6007016000888152602001908152602001600020600084848151811061134457611344614bd5565b6020026020010151815260200190815260200160002060009054906101000a90046001600160a01b031690506000816001600160a01b031663e16695b56040518163ffffffff1660e01b815260040160206040518083038186803b1580156113ab57600080fd5b505afa1580156113bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e39190614beb565b905060006113f289838a6102e5565b90506000806114028b858c612f70565b9092509050611411828a614b2b565b98508015611427576114248b858c6102e5565b92505b821561143257600197505b8215801561143e575081155b156114af576114ad87878151811061145857611458614bd5565b602002602001015161146861283b565b600a0160008e815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002061335a90919063ffffffff16565b505b6114b761285f565b6001600160a01b031663eeac29d88c8c60018b516114d59190614b88565b8a14611504578a6114e78b6001614b2b565b815181106114f7576114f7614bd5565b6020026020010151611507565b60005b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526044820152606401600060405180830381600087803b15801561155557600080fd5b505af1158015611569573d6000803e3d6000fd5b505050505050505050808061157d90614ca1565b915050611309565b5082158015611592575081155b801561162557506115a161285f565b60405163386320d360e11b8152600481018790526001600160a01b03868116602483015291909116906370c641a69060440160206040518083038186803b1580156115eb57600080fd5b505afa1580156115ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116239190614beb565b155b1561165a576116588561163661283b565b6001600160a01b0387166000908152600991909101602052604090209061335a565b505b505092915050565b6116b760405180610100016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160001515815260200160001515815260200160008152602001600081525090565b6116c184866112f6565b506116cc83866112f6565b5060006116da848488610875565b604001519050806117325760405162461bcd60e51b815260206004820181905260248201527f4e6f206465627420696e207468652073656c6563746564206d6174757269747960448201526064015b60405180910390fd5b61173a612906565b6001600160a01b0316635257ed678787611752612ec9565b6040516317338d9560e31b8152600481018a9052602481018b9052604481018790526001600160a01b03919091169063b99c6ca89060640160206040518083038186803b1580156117a257600080fd5b505afa1580156117b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117da9190614beb565b6040518463ffffffff1660e01b81526004016117f893929190614af4565b60606040518083038186803b15801561181057600080fd5b505afa158015611824573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118489190614cdb565b60608501526040840152602083018190526118a55760405162461bcd60e51b815260206004820152601a60248201527f557365722068617320656e6f75676820636f6c6c61746572616c0000000000006044820152606401611729565b60006118af612ec9565b60208401516040516317338d9560e31b8152600481018990526024810188905260448101919091526001600160a01b03919091169063b99c6ca89060640160206040518083038186803b15801561190557600080fd5b505afa158015611919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193d9190614beb565b905061194761283b565b600501600086815260200190815260200160002060008154811061196d5761196d614bd5565b6000918252602090912001546001600160a01b031661198a61283b565b6000878152600791909101602090815260408083208884529091529020546001600160a01b03161460808401526119bf61291e565b6001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b1580156119f757600080fd5b505afa158015611a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2f9190614b6b565b151560a0840152611a3e61291e565b6001600160a01b0316835260608301516020840151611a5d9190614b2b565b60c08401526000611a6c612906565b8451604080870151905163500d2f6d60e01b8152600481018b90526001600160a01b038c811660248301529283166044820152606481019190915291169063500d2f6d90608401602060405180830381600087803b158015611acd57600080fd5b505af1158015611ae1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b059190614beb565b90508015611b3157611b2588856000015189611b2085613366565b6133d0565b505060c0830151611bd3565b611b39612906565b60c085015160405163500d2f6d60e01b8152600481018a90526001600160a01b038b811660248301528c81166044830152606482019290925291169063500d2f6d90608401602060405180830381600087803b158015611b9857600080fd5b505af1158015611bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd09190614beb565b90505b8015611bee57611beb610cc5898b8a611b2086613366565b90505b600081118015611c0057508360a00151155b15611d52576000611c0f612ec9565b6040516317338d9560e31b8152600481018a905260248101899052604481018490526001600160a01b03919091169063b99c6ca89060640160206040518083038186803b158015611c5f57600080fd5b505afa158015611c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c979190614beb565b9050611ca1612906565b6040516354821c2160e01b81526001600160a01b038b8116600483015291909116906354821c219060240160206040518083038186803b158015611ce457600080fd5b505afa158015611cf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1c9190614beb565b611d4457611d41610cc586600001518c8a8a611d3787613366565b8b608001516134e0565b90505b611d4e8184614b88565b9250505b6001600160a01b0389163b15611e445760c0840151604051630fa3ece160e11b81526001600160a01b038b811660048301819052908b166024830152604482018a90526064820192909252631f47d9c290608401602060405180830381600087803b158015611dc057600080fd5b505af1158015611dd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df89190614b6b565b611e445760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206f7065726174696f6e20657865637574696f6e00000000006044820152606401611729565b8115611f825760e08401829052611e74888a8888611e6187613366565b611e6a90614c84565b89608001516134e0565b506001600160a01b0389163b15611f825760c084015160e085015160405163091cad1b60e31b81526001600160a01b038c811660048301819052908c166024830152604482018b905260648201939093526084810189905260a4810188905260c48101919091526348e568d89060e401602060405180830381600087803b158015611efe57600080fd5b505af1158015611f12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f369190614b6b565b611f825760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206f7065726174696f6e20657865637574696f6e00000000006044820152606401611729565b611f8a612906565b6040516325e1f09f60e01b81523360048201526001600160a01b0391909116906325e1f09f9060240160206040518083038186803b158015611fcb57600080fd5b505afa158015611fdf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120039190614b6b565b6120455760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2103634b8bab4b230ba34b7b760691b6044820152606401611729565b8486896001600160a01b03167f347d8f9576f47b3bd7a4821cd3d3d4171968cdd36680d4abaca7de302d836f998a8660405161208b929190918252602082015260400190565b60405180910390a4505050505050505050565b60606120d66120ab61283b565b6000858152600a91909101602090815260408083206001600160a01b038716845290915290206139f3565b80519091501561216e57604051634f64581360e11b815273__$cd9358e65801d13c280787f44717df25ed$__90639ec8b02690612117908490600401614a26565b60006040518083038186803b15801561212f57600080fd5b505af4158015612143573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261216b9190810190614d74565b90505b92915050565b6121ac8261218061283b565b6000868152600a91909101602090815260408083206001600160a01b0387168452909152902090613a07565b6112f1576121e8826121bc61283b565b6000868152600a91909101602090815260408083206001600160a01b0387168452909152902090613a1f565b50612217836121f561283b565b6001600160a01b03841660009081526009919091016020526040902090613a07565b6112f1576122498361222761283b565b6001600160a01b03841660009081526009919091016020526040902090613a1f565b50505050565b600061225b8483613a2b565b905060008113156122c257612279848361227484612e4a565b613bec565b60408051858152602081018390526001600160a01b038416917f93b0301fda99bfd2e8af22161527848125b3a6ae8e5bb83eed2f0313e758fa9c910160405180910390a2612249565b6000811215612249576122e284836122dc610cc585614c84565b86613e4c565b60408051858152602081018390526001600160a01b038416917f93b0301fda99bfd2e8af22161527848125b3a6ae8e5bb83eed2f0313e758fa9c910160405180910390a250505050565b600080600080600080600080600061234261283b565b60090160008d6001600160a01b03166001600160a01b0316815260200190815260200160002090506123a66040518060c001604052806060815260200160008019168152602001606081526020016060815260200160008152602001600081525090565b6123ae612906565b6001600160a01b0316633f90a08e6123c584614076565b6040518263ffffffff1660e01b81526004016123e19190614a26565b60006040518083038186803b1580156123f957600080fd5b505afa15801561240d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124359190810190614e0a565b8152608081018b905260005b61244a83612f5a565b81101561281d5761245b8382612f64565b602083015260408051600780825261010082019092529081602001602082028036833750505060408301526020820151612495908f611195565b88604001516000815181106124ac576124ac614bd5565b6020026020010189604001516001815181106124ca576124ca614bd5565b602002602001018a604001516002815181106124e8576124e8614bd5565b602002602001018b6040015160038151811061250657612506614bd5565b602002602001018c6040015160048151811061252457612524614bd5565b602002602001018d6040015160058151811061254257612542614bd5565b602002602001018e6040015160068151811061256057612560614bd5565b6020908102919091018101979097529690965295909452949093529390529290529190528201518d141561261f5781604001516006815181106125a5576125a5614bd5565b6020026020010151826080018181516125be9190614b2b565b9052506040820151805160039081106125d9576125d9614bd5565b602002602001015182604001516000815181106125f8576125f8614bd5565b602002602001015161260a9190614b2b565b8260a00181815161261b9190614b2b565b9052505b612627612ec9565b6001600160a01b0316638a2eae92836020015184604001516040518363ffffffff1660e01b815260040161265c929190614e99565b60006040518083038186803b15801561267457600080fd5b505afa158015612688573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126b09190810190614d74565b60608301819052805160019081106126ca576126ca614bd5565b60200260200101518a6126dd9190614b2b565b995081606001516002815181106126f6576126f6614bd5565b6020026020010151896127099190614b2b565b9850816060015160048151811061272257612722614bd5565b6020026020010151876127359190614b2b565b9650816060015160058151811061274e5761274e614bd5565b6020026020010151866127619190614b2b565b95508160000151818151811061277957612779614bd5565b60200260200101511561280b57816060015160008151811061279d5761279d614bd5565b60200260200101518b6127b09190614b2b565b9a5081606001516003815181106127c9576127c9614bd5565b6020026020010151886127dc9190614b2b565b975081606001516006815181106127f5576127f5614bd5565b6020026020010151856128089190614b2b565b94505b8061281581614ca1565b915050612441565b508060a0015181608001511015925050509397509397509397509397565b7f8041b8421ebd495cc61f38c788c9eb100daccf9bd36aa0bb920b7a15b2e0496590565b600061287e7011d95b995cda5cd5985b1d5955985d5b1d607a1b614081565b905090565b60008342106128c75760405162461bcd60e51b815260206004820152601060248201526f496e76616c6964206d6174757269747960801b6044820152606401611729565b60006128d34286614b88565b90506128fd6128e86127106301e13380614cbc565b856128f38487614cbc565b61127b9190614cbc565b95945050505050565b600061287e69151bdad95b95985d5b1d60b21b614081565b600061287e6a14995cd95c9d99519d5b9960aa1b614081565b61295b60405180606001604052806000815260200160008152602001600081525090565b60008061296661283b565b60008a8152600691909101602090815260408083206001600160a01b03898116855292529182902054915163070da1af60e11b81528a82166004820152911690630e1b435e90602401604080518083038186803b1580156129c657600080fd5b505afa1580156129da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129fe9190614eda565b9150915081600014612b1b57808614612ab457866040015115612aaf57612a2361285f565b604051630c30971960e11b8152600481018b905260248101839052604481018490526001600160a01b0391909116906318612e32906064015b60206040518083038186803b158015612a7457600080fd5b505afa158015612a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aac9190614beb565b83525b612b1b565b80861415612b1b5786518015612ac8575083155b15612ae757612ad8898284614119565b60408501526020840152612b1b565b865180612af657508660400151155b80612afe5750835b15612b1b5760408301829052612b15898284614346565b60208401525b50509695505050505050565b612b596040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b604051631c7b209b60e31b81526001600160a01b038781166004830152600091829186169063e3d904d89060240160806040518083038186803b158015612b9f57600080fd5b505afa158015612bb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd79190614efe565b6080870192909252606086019290925290925090508115612b1b57808614612c5557866040015115612aaf57612c0b61285f565b6001600160a01b03166318612e328a83612c2486613366565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401612a5c565b80861415612b1b5786518015612c69575083155b15612c8157612ad88982612c7c85613366565b614119565b865180612c9057508660400151155b80612c985750835b15612b1b57612ca682613366565b60408401819052612b15908a908390614346565b612cec6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040516339f7dda360e21b81526001600160a01b038781166004830152600091829186169063e7df768c9060240160806040518083038186803b158015612d3257600080fd5b505afa158015612d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6a9190614efe565b6080870192909252606086019290925290925090508115612b1b57808614612c5557866040015115612aaf57612d9e61285f565b6001600160a01b03166318612e328a83612db786613366565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b158015612dfb57600080fd5b505afa158015612e0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e339190614beb565b83518490612e42908390614c43565b905250612b1b565b600080821215612e9c5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401611729565b5090565b600061216b612eb0612710613366565b612eb984613366565b612ec39086614f34565b906143f0565b600061287e7121bab93932b731bca1b7b73a3937b63632b960711b614081565b6000808211612ef757600080fd5b6005612f038385614fcf565b612f0e90600a614cbc565b83612f1a86600a614cbc565b612f249190614fcf565b612f2e9190614b88565b1015612f4557612f3e8284614fcf565b905061216e565b612f4f8284614fcf565b612f3e906001614b2b565b600061216e825490565b600061216b8383614483565b6000806000612f7d61283b565b60008781526006919091016020526040812090612f9861283b565b6000898152600791909101602090815260408083208a84528252808320546001600160a01b0390811685529184019490945291909201822054169150808080808080612fe261283b565b60008e8152600791909101602090815260408083208f845290915290819020549051633d4eccdf60e01b81526001600160a01b038d8116600483015290911690633d4eccdf9060240160e060405180830381600087803b15801561304557600080fd5b505af1158015613059573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307d9190614fe3565b96509650965096509650965096508183111561310a5761309b612906565b6001600160a01b031663fb7bd3b48c8f6130b58688614b88565b6040518463ffffffff1660e01b81526004016130d393929190614af4565b600060405180830381600087803b1580156130ed57600080fd5b505af1158015613101573d6000803e3d6000fd5b50505050613185565b818310156131855761311a612906565b6001600160a01b0316634ba0c9b58c8f6131348787614b88565b6040518463ffffffff1660e01b815260040161315293929190614af4565b600060405180830381600087803b15801561316c57600080fd5b505af1158015613180573d6000803e3d6000fd5b505050505b841561325a57604051639e8d3d5560e01b81526001600160a01b03891690639e8d3d55906131be908e9089908690600090600401614b43565b602060405180830381600087803b1580156131d857600080fd5b505af11580156131ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132109190614b6b565b50808d8c6001600160a01b03167fba00994778888e87ce0908fd360c4b0417bfe7e274cce4cb72ed8a60b38b3e386000878a60405161325193929190614b9f565b60405180910390a45b831561332f576040516305b0b29360e41b81526001600160a01b03891690635b0b293090613293908e9088908690600090600401614b43565b602060405180830381600087803b1580156132ad57600080fd5b505af11580156132c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e59190614b6b565b50808d8c6001600160a01b03167fba00994778888e87ce0908fd360c4b0417bfe7e274cce4cb72ed8a60b38b3e386001868960405161332693929190614b9f565b60405180910390a45b600061333b8587614b2b565b1198506133488688614b2b565b99505050505050505050935093915050565b600061216b83836144ad565b60006001600160ff1b03821115612e9c5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401611729565b6000806133dd848761209e565b905060006133e961283b565b600501600086815260200190815260200160002060008154811061340f5761340f614bd5565b60009182526020822001548594506001600160a01b031691505b82518110156134d5578361343c576134d5565b6134c188888886858151811061345457613454614bd5565b602002602001015188876001600160a01b031661346f61283b565b60070160008e815260200190815260200160002060008b8a8151811061349757613497614bd5565b6020908102919091018101518252810191909152604001600020546001600160a01b0316146134e0565b9350806134cd81614ca1565b915050613429565b505050949350505050565b816000811282156138195760006134f561285f565b60405163386320d360e11b8152600481018990526001600160a01b038b8116602483015291909116906370c641a69060440160206040518083038186803b15801561353f57600080fd5b505afa158015613553573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135779190614beb565b90508180156135865750600081125b8061359a57508115801561359a5750600081135b156138175760006135a961285f565b6001600160a01b03166349a1d218896040518263ffffffff1660e01b81526004016135d691815260200190565b60206040518083038186803b1580156135ee57600080fd5b505afa158015613602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136269190614beb565b9050600061363261285f565b6001600160a01b03166318612e328a600061364e8d878b6145a0565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b15801561369257600080fd5b505afa1580156136a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136ca9190614beb565b90508380156136d857508083135b806136eb5750831580156136eb57508083125b156136f35750815b6136fb61285f565b604051633916cf2b60e21b8152600481018b90526001600160a01b038d811660248301528c8116604483015260648201849052919091169063e45b3cac90608401600060405180830381600087803b15801561375657600080fd5b505af115801561376a573d6000803e3d6000fd5b50505050613808898361377b61285f565b604051637636e94160e01b8152600481018e905260006024820152604481018690526001600160a01b039190911690637636e9419060640160206040518083038186803b1580156137cb57600080fd5b505afa1580156137df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138039190614beb565b614346565b6138129086614c04565b945050505b505b600061382361283b565b6000888152600691909101602052604081209061383e61283b565b60008a8152600791909101602090815260408083208b84528252808320546001600160a01b03908116855291840194909452918301812054925163070da1af60e11b81528c83166004820152929091169250908290630e1b435e90602401604080518083038186803b1580156138b357600080fd5b505afa1580156138c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138eb9190614eda565b5090508280156138fb5750600081125b8061390f57508215801561390f5750600081135b156139d45760006139218989876145a0565b905083801561392f57508082135b8061394257508315801561394257508082125b1561394a5750805b604051630c02764960e31b81526001600160a01b038c811660048301528b8116602483015260448201839052606482018a9052841690636013b24890608401600060405180830381600087803b1580156139a357600080fd5b505af11580156139b7573d6000803e3d6000fd5b505050506139c6898983614346565b6139d09086614c04565b9450505b8386146139e6576139e688888b612174565b5050509695505050505050565b60606000613a0083614657565b9392505050565b6000818152600183016020526040812054151561216b565b600061216b83836146b3565b6000613a3783836112f6565b50613a4483600084610875565b5190506000613a7f613a5461283b565b6000868152600a91909101602090815260408083206001600160a01b038816845290915290206139f3565b905060005b8151811015613b7857613a9561283b565b60008681526006919091016020526040812090613ab061283b565b60070160008881526020019081526020016000206000858581518110613ad857613ad8614bd5565b60209081029190910181015182528181019290925260409081016000908120546001600160a01b039081168552928401949094529182019092205490516366c9d55160e01b815286831660048201529116906366c9d55190602401600060405180830381600087803b158015613b4d57600080fd5b505af1158015613b61573d6000803e3d6000fd5b505050508080613b7090614ca1565b915050613a84565b50613b8161285f565b60405163b340398d60e01b8152600481018690526001600160a01b038581166024830152919091169063b340398d90604401600060405180830381600087803b158015613bcd57600080fd5b505af1158015613be1573d6000803e3d6000fd5b505050505092915050565b6000613bf6612906565b6001600160a01b031663d5e190d06040518163ffffffff1660e01b815260040160006040518083038186803b158015613c2e57600080fd5b505afa158015613c42573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613c6a9190810190614d74565b90506000815167ffffffffffffffff811115613c8857613c88614d09565b604051908082528060200260200182016040528015613cb1578160200160208202803683370190505b5090506000805b8351811015613d55576000848281518110613cd557613cd5614bd5565b60200260200101519050613ce761283b565b600401600082815260200190815260200160002054848381518110613d0e57613d0e614bd5565b602002602001018181525050838281518110613d2c57613d2c614bd5565b602002602001015183613d3f9190614b2b565b9250508080613d4d90614ca1565b915050613cb8565b506000613d628786614702565b905060005b8451811015613e42576000858281518110613d8457613d84614bd5565b602002602001015190506000613dc282613dbd87898781518110613daa57613daa614bd5565b60200260200101518861127b9190614cbc565b6147df565b9050613dcc612906565b6001600160a01b0316634ba0c9b58a84846040518463ffffffff1660e01b8152600401613dfb93929190614af4565b600060405180830381600087803b158015613e1557600080fd5b505af1158015613e29573d6000803e3d6000fd5b5050505050508080613e3a90614ca1565b915050613d67565b5050505050505050565b613e54612906565b6001600160a01b0316635d95df8a826040518263ffffffff1660e01b8152600401613e8191815260200190565b60206040518083038186803b158015613e9957600080fd5b505afa158015613ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ed19190614b6b565b613f1d5760405162461bcd60e51b815260206004820152601c60248201527f4e6f74207265676973746572656420617320636f6c6c61746572616c000000006044820152606401611729565b6000613f27612906565b604051630129e6bf60e11b81526001600160a01b038681166004830152602482018590529190911690630253cd7e9060440160206040518083038186803b158015613f7157600080fd5b505afa158015613f85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fa99190614beb565b90506000613fbb83613dbd8887614702565b9050808210156140055760405162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da0818dbdb1b185d195c985b605a1b6044820152606401611729565b61400d612906565b6001600160a01b031663fb7bd3b48685846040518463ffffffff1660e01b815260040161403c93929190614af4565b600060405180830381600087803b15801561405657600080fd5b505af115801561406a573d6000803e3d6000fd5b50505050505050505050565b606061216e82614657565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b031690816141125760405162461bcd60e51b81526004016117299190615037565b5092915050565b600080600061412661283b565b600501600087815260200190815260200160002060008154811061414c5761414c614bd5565b6000918252602080832090910154604080516371613c2d60e01b815290516001600160a01b03909216945084926371613c2d92600480840193829003018186803b15801561419957600080fd5b505afa1580156141ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141d19190614beb565b90506141db61285f565b60405163474611f160e01b815260048101899052602481018890526001600160a01b03919091169063474611f19060440160a06040518083038186803b15801561422457600080fd5b505afa158015614238573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061425c919061508c565b516142965761426c878787614346565b935061428f61427a82613366565b614285612710613366565b612ec39087614f34565b925061433c565b61429e61285f565b604051631b736f6760e31b8152600481018990526024810188905260006044820152606481018790526001600160a01b03919091169063db9b7b389060840160206040518083038186803b1580156142f557600080fd5b505afa158015614309573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061432d9190614beb565b92506143398382612ea0565b93505b5050935093915050565b60008061435161283b565b6000868152600791909101602090815260408083208784528252918290205482516371613c2d60e01b815292516001600160a01b03909116926371613c2d926004808301939192829003018186803b1580156143ac57600080fd5b505afa1580156143c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143e49190614beb565b90506128fd8382612ea0565b6000816143fc57600080fd5b600061440883856150fc565b61441390600a614f34565b8361441f86600a614f34565b61442991906150fc565b6144339190614c04565b90506005811261445a5761444783856150fc565b614452906001614c43565b91505061216e565b600419811361447957600161446f84866150fc565b6144529190614c04565b61445283856150fc565b600082600001828154811061449a5761449a614bd5565b9060005260206000200154905092915050565b600081815260018301602052604081205480156145965760006144d1600183614b88565b85549091506000906144e590600190614b88565b905081811461454a57600086600001828154811061450557614505614bd5565b906000526020600020015490508087600001848154811061452857614528614bd5565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061455b5761455b61512a565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061216e565b600091505061216e565b6000806146466145ae61283b565b6000878152600791909101602090815260408083208884528252918290205482516371613c2d60e01b815292516001600160a01b03909116926371613c2d926004808301939192829003018186803b15801561460957600080fd5b505afa15801561461d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146419190614beb565b613366565b90506128fd81612eb9612710613366565b6060816000018054806020026020016040519081016040528092919081815260200182805480156146a757602002820191906000526020600020905b815481526020019060010190808311614693575b50505050509050919050565b60008181526001830160205260408120546146fa5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561216e565b50600061216e565b600061470c61283b565b5483141561471b57508061216e565b6000614725612ec9565b6001600160a01b03166312105fea856040518263ffffffff1660e01b815260040161475291815260200190565b60206040518083038186803b15801561476a57600080fd5b505afa15801561477e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147a29190615140565b90506144526147b282600a615247565b6147d56147bd61283b565b60008881526003919091016020526040902054612e4a565b61127b9086614cbc565b60006147e961283b565b548314156147f857508061216e565b6000614802612ec9565b6001600160a01b03166312105fea856040518263ffffffff1660e01b815260040161482f91815260200190565b60206040518083038186803b15801561484757600080fd5b505afa15801561485b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061487f9190615140565b90506144526148a761488f61283b565b60008781526003919091016020526040902054612e4a565b6147d583600a615247565b80356001600160a01b03811681146148c957600080fd5b919050565b6000806000606084860312156148e357600080fd5b83359250602084013591506148fa604085016148b2565b90509250925092565b801515811461491157600080fd5b50565b600080600080600080600080610100898b03121561493157600080fd5b883597506020890135965061494860408a016148b2565b955060608901356002811061495c57600080fd5b94506080890135935060a0890135925060c0890135915060e089013561498181614903565b809150509295985092959890939650565b600080604083850312156149a557600080fd5b823591506149b5602084016148b2565b90509250929050565b6000602082840312156149d057600080fd5b61216b826148b2565b600080600080600060a086880312156149f157600080fd5b6149fa866148b2565b9450614a08602087016148b2565b94979496505050506040830135926060810135926080909101359150565b6020808252825182820181905260009190848201906040850190845b81811015614a5e57835183529284019291840191600101614a42565b50909695505050505050565b600080600060608486031215614a7f57600080fd5b614a88846148b2565b95602085013595506040909401359392505050565b60008060008060808587031215614ab357600080fd5b8451935060208501519250604085015191506060850151614ad381614903565b939692955090935050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b039390931683526020830191909152604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115614b3e57614b3e614b15565b500190565b6001600160a01b03949094168452602084019290925260408301521515606082015260800190565b600060208284031215614b7d57600080fd5b8151613a0081614903565b600082821015614b9a57614b9a614b15565b500390565b6060810160028510614bc157634e487b7160e01b600052602160045260246000fd5b938152602081019290925260409091015290565b634e487b7160e01b600052603260045260246000fd5b600060208284031215614bfd57600080fd5b5051919050565b60008083128015600160ff1b850184121615614c2257614c22614b15565b6001600160ff1b0384018313811615614c3d57614c3d614b15565b50500390565b600080821280156001600160ff1b0384900385131615614c6557614c65614b15565b600160ff1b8390038412811615614c7e57614c7e614b15565b50500190565b6000600160ff1b821415614c9a57614c9a614b15565b5060000390565b6000600019821415614cb557614cb5614b15565b5060010190565b6000816000190483118215151615614cd657614cd6614b15565b500290565b600080600060608486031215614cf057600080fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614d4857614d48614d09565b604052919050565b600067ffffffffffffffff821115614d6a57614d6a614d09565b5060051b60200190565b60006020808385031215614d8757600080fd5b825167ffffffffffffffff811115614d9e57600080fd5b8301601f81018513614daf57600080fd5b8051614dc2614dbd82614d50565b614d1f565b81815260059190911b82018301908381019087831115614de157600080fd5b928401925b82841015614dff57835182529284019290840190614de6565b979650505050505050565b60006020808385031215614e1d57600080fd5b825167ffffffffffffffff811115614e3457600080fd5b8301601f81018513614e4557600080fd5b8051614e53614dbd82614d50565b81815260059190911b82018301908381019087831115614e7257600080fd5b928401925b82841015614dff578351614e8a81614903565b82529284019290840190614e77565b6000604082018483526020604081850152818551808452606086019150828701935060005b818110156104d157845183529383019391830191600101614ebe565b60008060408385031215614eed57600080fd5b505080516020909101519092909150565b60008060008060808587031215614f1457600080fd5b505082516020840151604085015160609095015191969095509092509050565b60006001600160ff1b0381841382841380821686840486111615614f5a57614f5a614b15565b600160ff1b6000871282811687830589121615614f7957614f79614b15565b60008712925087820587128484161615614f9557614f95614b15565b87850587128184161615614fab57614fab614b15565b505050929093029392505050565b634e487b7160e01b600052601260045260246000fd5b600082614fde57614fde614fb9565b500490565b600080600080600080600060e0888a031215614ffe57600080fd5b5050855160208701516040880151606089015160808a015160a08b015160c0909b0151949c939b50919990985090965094509092509050565b600060208083528351808285015260005b8181101561506457858101830151858201604001528201615048565b81811115615076576000604083870101525b50601f01601f1916929092016040019392505050565b600060a0828403121561509e57600080fd5b60405160a0810181811067ffffffffffffffff821117156150c1576150c1614d09565b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b60008261510b5761510b614fb9565b600160ff1b82146000198414161561512557615125614b15565b500590565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561515257600080fd5b815160ff81168114613a0057600080fd5b600181815b8085111561519e57816000190482111561518457615184614b15565b8085161561519157918102915b93841c9390800290615168565b509250929050565b6000826151b55750600161216e565b816151c25750600061216e565b81600181146151d857600281146151e2576151fe565b600191505061216e565b60ff8411156151f3576151f3614b15565b50506001821b61216e565b5060208310610133831016604e8410600b8410161715615221575081810a61216e565b61522b8383615163565b806000190482111561523f5761523f614b15565b029392505050565b600061216b60ff8416836151a656fea264697066735822122088d79dfd5caf0440b6770f9275d83d4290d001f7651f4032dd760480494b438364736f6c63430008090033",
  "libraries": {
    "QuickSort": "0xDEaafdfd0E28973EC8ff292547BfD190260DfC6C"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "convertFutureValueToGenesisValue(bytes32,uint256,address)": {
        "params": {
          "_ccy": "Currency for pausing all lending markets",
          "_user": "User's address"
        },
        "returns": {
          "_0": "Current future value amount after update"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "convertFutureValueToGenesisValue(bytes32,uint256,address)": {
        "notice": "Converts the future value to the genesis value if there is balance in the past maturity."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}