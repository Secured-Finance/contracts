{
  "address": "0x2767a5DdBe9Baa7bBCC2e5f873089e383D9e1369",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "futureValue",
          "type": "uint256"
        }
      ],
      "name": "OrderFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "futureValue",
          "type": "uint256"
        }
      ],
      "name": "OrdersFilledInAsync",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateActualFunds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "presentValue",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "futureValue",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "workingLendOrdersAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "workingBorrowOrdersAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowedAmount",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "genesisValue",
              "type": "int256"
            }
          ],
          "internalType": "struct FundManagementLogic.ActualFunds",
          "name": "actualFunds",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "workingLendOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "workingBorrowOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_depositCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_depositAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateTotalFundsInETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalWorkingLendOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCollateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalWorkingBorrowOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDebtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrowedAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isEnoughDeposit",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUsedMaturities",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "maturities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5ed5e538a3d26e22549845481c5333651b31ac30157398bd4db59a23c4bdaa3e",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x2767a5DdBe9Baa7bBCC2e5f873089e383D9e1369",
    "transactionIndex": 26,
    "gasUsed": "4472112",
    "logsBloom": "0x
    "blockHash": "0x06eebfce0be8f32d22076935370a31fe719dd1eefc215ec0a29bfaadca241abf",
    "transactionHash": "0x5ed5e538a3d26e22549845481c5333651b31ac30157398bd4db59a23c4bdaa3e",
    "logs": [],
    "blockNumber": 8933514,
    "cumulativeGasUsed": "7876556",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1ac2fb69d48f421b49df5db0f40e0e97",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"futureValue\",\"type\":\"uint256\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"futureValue\",\"type\":\"uint256\"}],\"name\":\"OrdersFilledInAsync\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateActualFunds\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"presentValue\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"futureValue\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"workingLendOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"workingBorrowOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"genesisValue\",\"type\":\"int256\"}],\"internalType\":\"struct FundManagementLogic.ActualFunds\",\"name\":\"actualFunds\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"workingLendOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"workingBorrowOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_depositCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTotalFundsInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalWorkingLendOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWorkingBorrowOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnoughDeposit\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUsedMaturities\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"maturities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"convertFutureValueToGenesisValue(bytes32,uint256,address)\":{\"params\":{\"_ccy\":\"Currency for pausing all lending markets\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"Current future value amount after update\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"convertFutureValueToGenesisValue(bytes32,uint256,address)\":{\"notice\":\"Converts the future value to the genesis value if there is balance in the past maturity.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/libraries/logics/FundManagementLogic.sol\":\"FundManagementLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/liquidators/interfaces/ILiquidationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ILiquidationReceiver {\\n    event OperationExecute(\\n        address liquidator,\\n        address user,\\n        bytes32 collateralCcy,\\n        uint256 receivedCollateralAmount,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        uint256 receivedDebtAmount,\\n        address initiator\\n    );\\n\\n    function executeOperation(\\n        address liquidator,\\n        address user,\\n        bytes32 collateralCcy,\\n        uint256 receivedCollateralAmount,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        uint256 receivedDebtAmount,\\n        address initiator\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf9bcf671dca5cea19a66b2bbaa276ca564409647d17e3f53a379b7ed2c14f4a2\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IBeaconProxyController {\\n    event BeaconProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function deployFutureValueVault() external returns (address futureValueVault);\\n\\n    function deployLendingMarket(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 openingDate\\n    ) external returns (address market);\\n}\\n\",\"keccak256\":\"0xcedc431629fa9537e673fc37ceae4cc645cf1f4ff9071b05396b9e3944ce6dd9\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Currency} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CurrencyAdded(bytes32 indexed ccy, uint256 haircut);\\n    event CurrencyRemoved(bytes32 indexed ccy);\\n\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n\\n    event PriceFeedAdded(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n    event PriceFeedRemoved(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256 _amount\\n    ) external view returns (uint256 amount);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256 amount);\\n\\n    function convertToETH(bytes32 _ccy, int256 _amount) external view returns (int256 amount);\\n\\n    function convertToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getEthDecimals(bytes32) external view returns (uint8);\\n\\n    function getUsdDecimals(bytes32) external view returns (uint8);\\n\\n    function getCurrencies() external view returns (bytes32[] memory);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function currencyExists(bytes32 _ccy) external view returns (bool);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function addCurrency(\\n        bytes32 _ccy,\\n        address _ethPriceFeed,\\n        uint256 _haircut\\n    ) external;\\n\\n    function updateHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function removeCurrency(bytes32 _ccy) external;\\n}\\n\",\"keccak256\":\"0x492cf55991a1bcd041cffe256317ab0c03c413dc41dee6dfc63071be4cad2057\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IFutureValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IFutureValueVault {\\n    event Transfer(address indexed from, address indexed to, int256 value);\\n\\n    function getTotalSupply(uint256 maturity) external view returns (uint256);\\n\\n    function getFutureValue(address user)\\n        external\\n        view\\n        returns (int256 futureValue, uint256 maturity);\\n\\n    function hasFutureValueInPastMaturity(address user, uint256 maturity)\\n        external\\n        view\\n        returns (bool);\\n\\n    function addLendFutureValue(\\n        address user,\\n        uint256 amount,\\n        uint256 maturity,\\n        bool isTaker\\n    ) external returns (bool);\\n\\n    function addBorrowFutureValue(\\n        address user,\\n        uint256 amount,\\n        uint256 maturity,\\n        bool isTaker\\n    ) external returns (bool);\\n\\n    function offsetFutureValue(\\n        address lender,\\n        address borrower,\\n        uint256 maximumFVAmount\\n    ) external returns (uint256 offsetAmount);\\n\\n    function transferFrom(\\n        address sender,\\n        address receiver,\\n        int256 amount,\\n        uint256 maturity\\n    ) external;\\n\\n    function removeFutureValue(address user, uint256 activeMaturity)\\n        external\\n        returns (\\n            int256 removedAmount,\\n            int256 currentAmount,\\n            uint256 maturity,\\n            bool removeFutureValue\\n        );\\n\\n    function addInitialTotalSupply(uint256 maturity, int256 amount) external;\\n\\n    function resetFutureValue(address _user) external;\\n}\\n\",\"keccak256\":\"0x5e742fca8b654c8aa4c21b6386ba4c0389da229f05aa3ffd013448ead1472c3b\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AutoRollLog} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\\n    event AutoRollExecuted(\\n        bytes32 indexed ccy,\\n        uint256 lendingCompoundFactor,\\n        uint256 borrowingCompoundFactor,\\n        uint256 unitPrice,\\n        uint256 currentMaturity,\\n        uint256 previousMaturity\\n    );\\n\\n    function isInitialized(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getMaturityGenesisValue(bytes32 _ccy, uint256 _maturity)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getAutoRollLog(bytes32 ccy, uint256 maturity)\\n        external\\n        view\\n        returns (AutoRollLog memory);\\n\\n    function getLatestAutoRollLog(bytes32 _ccy) external view returns (AutoRollLog memory);\\n\\n    function getGenesisValueInFutureValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function calculateFVFromFV(\\n        bytes32 _ccy,\\n        uint256 _basisMaturity,\\n        uint256 _destinationMaturity,\\n        int256 _futureValue\\n    ) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function getBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function calculateBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        int256 balance,\\n        uint256 fromMaturity,\\n        uint256 toMaturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function initializeCurrencySetting(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor,\\n        uint256 maturity\\n    ) external;\\n\\n    function updateInitialCompoundFactor(bytes32 _ccy, uint256 _unitPrice) external;\\n\\n    function executeAutoRoll(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice,\\n        uint256 feeRate,\\n        uint256 totalFVAmount\\n    ) external;\\n\\n    function updateGenesisValueWithFutureValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 fvAmount\\n    ) external;\\n\\n    function updateGenesisValueWithResidualAmount(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity\\n    ) external;\\n\\n    function offsetGenesisValue(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        address lender,\\n        address borrower,\\n        int256 maximumGVAmount\\n    ) external returns (int256 offsetAmount);\\n\\n    function transferFrom(\\n        bytes32 _ccy,\\n        address _sender,\\n        address _receiver,\\n        int256 _amount\\n    ) external;\\n\\n    function cleanUpGenesisValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external;\\n\\n    function resetGenesisValue(bytes32 _ccy, address _user) external;\\n}\\n\",\"keccak256\":\"0xdc7cdad4e7fc8f3bcc4b96f01ea7ea051395ada94e6300a98aecc948762171fa\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport {MarketOrder} from \\\"../storages/LendingMarketStorage.sol\\\";\\n\\ninterface ILendingMarket {\\n    struct PartiallyFilledOrder {\\n        address maker;\\n        uint256 amount;\\n        uint256 futureValue;\\n    }\\n\\n    event OrderCanceled(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n\\n    event OrderMade(\\n        uint48 orderId,\\n        uint48 originalOrderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n\\n    event OrdersTaken(\\n        address indexed taker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 filledAmount,\\n        uint256 unitPrice,\\n        uint256 filledFutureValue\\n    );\\n\\n    event OrderPartiallyTaken(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 maturity,\\n        uint256 filledAmount,\\n        uint256 filledFutureValue\\n    );\\n\\n    event OrdersCleaned(\\n        uint48[] orderIds,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 maturity\\n    );\\n\\n    event MarketOpened(uint256 maturity, uint256 prevMaturity);\\n\\n    event ItayoseExecuted(bytes32 ccy, uint256 maturity, uint256 openingPrice);\\n\\n    struct Market {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        uint256 openingDate;\\n        uint256 borrowUnitPrice;\\n        uint256 lendUnitPrice;\\n        uint256 midUnitPrice;\\n        bool isReady;\\n    }\\n\\n    function getMarket() external view returns (Market memory);\\n\\n    function getBorrowUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getLendUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getMidUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getBorrowOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturity() external view returns (uint256);\\n\\n    function getCurrency() external view returns (bytes32);\\n\\n    function getOpeningDate() external view returns (uint256);\\n\\n    function getOpeningUnitPrice() external view returns (uint256);\\n\\n    function isReady() external view returns (bool);\\n\\n    function isMatured() external view returns (bool);\\n\\n    function isOpened() external view returns (bool);\\n\\n    function isItayosePeriod() external view returns (bool);\\n\\n    function isPreOrderPeriod() external returns (bool);\\n\\n    function getOrder(uint48 _orderId)\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        );\\n\\n    function getTotalAmountFromLendOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getTotalAmountFromBorrowOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getLendOrderIds(address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds);\\n\\n    function getBorrowOrderIds(address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds);\\n\\n    function estimateFilledAmount(ProtocolTypes.Side _side, uint256 _futureValue)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function openMarket(uint256 maturity, uint256 openingDate) external returns (uint256);\\n\\n    function cancelOrder(address user, uint48 orderId)\\n        external\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        );\\n\\n    function createPreOrder(\\n        ProtocolTypes.Side side,\\n        address user,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external;\\n\\n    function unwindOrder(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _futureValue\\n    )\\n        external\\n        returns (\\n            uint256 filledUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledFutureValue,\\n            PartiallyFilledOrder memory partiallyFilledOrder\\n        );\\n\\n    function executeItayoseCall()\\n        external\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 totalOffsetAmount,\\n            uint256 openingDate,\\n            PartiallyFilledOrder memory partiallyFilledLendingOrder,\\n            PartiallyFilledOrder memory partiallyFilledBorrowingOrder\\n        );\\n\\n    function cleanUpOrders(address _user)\\n        external\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        );\\n\\n    function createOrder(\\n        ProtocolTypes.Side side,\\n        address account,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        bool ignoreRemainingAmount\\n    )\\n        external\\n        returns (\\n            uint256 filledUnitPrice,\\n            uint256 filledFutureValue,\\n            PartiallyFilledOrder memory partiallyFilledOrder,\\n            uint256 remainingAmount\\n        );\\n\\n    function pauseMarket() external;\\n\\n    function unpauseMarket() external;\\n}\\n\",\"keccak256\":\"0x0f5b88f4806791555925d5ae0a51b71d47aa823df20ddb43a45a055a4b56d6e1\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ILendingMarketController {\\n    event LendingMarketCreated(\\n        bytes32 indexed ccy,\\n        address indexed marketAddr,\\n        address futureValueVault,\\n        uint256 index,\\n        uint256 openingDate,\\n        uint256 maturity\\n    );\\n    event LendingMarketsRotated(bytes32 ccy, uint256 oldMaturity, uint256 newMaturity);\\n    event RedemptionExecuted(bytes32 ccy, address indexed user, int256 amount);\\n    event LiquidationExecuted(\\n        address indexed user,\\n        bytes32 collateralCcy,\\n        bytes32 indexed debtCcy,\\n        uint256 indexed debtMaturity,\\n        uint256 debtAmount\\n    );\\n    event EmergencyTerminationExecuted(uint256 timestamp);\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarkets(bytes32 ccy) external view returns (address[] memory);\\n\\n    function getLendingMarket(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getBorrowUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getLendUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getMidUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getBorrowOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getFutureValue(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        address user\\n    ) external view returns (int256 futureValue);\\n\\n    function getPresentValue(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        address user\\n    ) external view returns (int256 presentValue);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInETH(address user)\\n        external\\n        view\\n        returns (int256 totalPresentValue);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256 genesisValue);\\n\\n    function calculateFunds(bytes32 ccy, address user)\\n        external\\n        view\\n        returns (\\n            uint256 workingLendOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 collateralAmount,\\n            uint256 lentAmount,\\n            uint256 workingBorrowOrdersAmount,\\n            uint256 debtAmount,\\n            uint256 borrowedAmount\\n        );\\n\\n    function calculateTotalFundsInETH(\\n        address user,\\n        bytes32 depositCcy,\\n        uint256 depositAmount\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalWorkingLendOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalCollateralAmount,\\n            uint256 totalLentAmount,\\n            uint256 totalWorkingBorrowOrdersAmount,\\n            uint256 totalDebtAmount,\\n            uint256 totalBorrowedAmount,\\n            bool isEnoughDeposit\\n        );\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor,\\n        uint256 orderFeeRate,\\n        uint256 autoRollFeeRate\\n    ) external;\\n\\n    function createLendingMarket(bytes32 ccy, uint256 marketOpeningDate) external;\\n\\n    function createOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndCreateOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function createPreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndCreatePreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function unwindOrder(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function executeItayoseCalls(bytes32[] memory currencies, uint256 maturity)\\n        external\\n        returns (bool);\\n\\n    function executeRedemption(bytes32 redemptionCcy, bytes32 collateralCcy)\\n        external\\n        returns (bool);\\n\\n    function executeLiquidationCall(\\n        bytes32 collateralCcy,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        address user\\n    ) external returns (bool);\\n\\n    function cancelOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint48 orderId\\n    ) external returns (bool);\\n\\n    function rotateLendingMarkets(bytes32 ccy) external;\\n\\n    function pauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function cleanUpAllFunds(address user) external;\\n\\n    function cleanUpFunds(bytes32 ccy, address user) external returns (uint256 activeOrderCount);\\n}\\n\",\"keccak256\":\"0xb60f756cc59f09066460f8c57d086eac01441531ea570b789b0203c71b800da1\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IReserveFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IReserveFund {\\n    event Pause(address account);\\n    event Unpause(address account);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xa2a6df7a095ca8f8874d26672f75fe1f09c45caf041cb27d5e265bcb974a9754\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ITokenVault {\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress, bool isCollateral);\\n    event CurrencyUpdated(bytes32 ccy, bool isCollateral);\\n\\n    function isCovered(\\n        address user,\\n        bytes32 ccy,\\n        uint256 unsettledExp,\\n        ProtocolTypes.Side unsettledOrderSide\\n    ) external view returns (bool);\\n\\n    function isCovered(address user) external view returns (bool);\\n\\n    function isCollateral(bytes32 _ccy) external view returns (bool);\\n\\n    function isCollateral(bytes32[] calldata _ccys)\\n        external\\n        view\\n        returns (bool[] memory isCollateralCurrencies);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getTokenAddress(bytes32 ccy) external view returns (address);\\n\\n    function getCollateralCurrencies() external view returns (bytes32[] memory);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256 maxWithdraw);\\n\\n    function getCoverage(address user) external view returns (uint256 coverage);\\n\\n    function getUnusedCollateral(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address party) external view returns (uint256);\\n\\n    function getLiquidationAmount(\\n        address user,\\n        bytes32 liquidationCcy,\\n        uint256 liquidationAmountMaximum\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liquidationAmount,\\n            uint256 protocolFee,\\n            uint256 liquidatorFee,\\n            uint256 insolventAmount\\n        );\\n\\n    function getTotalDepositAmount(bytes32 _ccy) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getCollateralParameters()\\n        external\\n        view\\n        returns (\\n            uint256 liquidationThresholdRate,\\n            uint256 liquidationProtocolFeeRate,\\n            uint256 liquidatorFeeRate\\n        );\\n\\n    function setCollateralParameters(\\n        uint256 liquidationThresholdRate,\\n        uint256 liquidationProtocolFeeRate,\\n        uint256 liquidatorFeeRate\\n    ) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositFrom(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function removeDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function transferFrom(\\n        bytes32 _ccy,\\n        address _sender,\\n        address _receiver,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd0a7fa807d8ee872d50710ae22de790d06061763e4c1dab23b4dece15374caa9\",\"license\":\"MIT\"},\"contracts/protocol/libraries/AddressResolverLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/MixinAddressResolverStorage.sol\\\";\\n\\nlibrary AddressResolverLib {\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return IReserveFund(getAddress(Contracts.RESERVE_FUND));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0x65d55399d6c8b753ddaa36c1370fae1c68dfbfb8b6b2d09b1717ba037b079998\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Constants {\\n    /// @dev Used for price digits in the basis (10000 -> 1)\\n    uint256 public constant PRICE_DIGIT = 10000;\\n\\n    /// @dev Used for percentage digits in the basis (10000 -> 100%)\\n    uint256 public constant PCT_DIGIT = 10000;\\n\\n    /// @dev Used for seconds in year (60 * 60 * 24 * 365)\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000;\\n\\n    /// @dev Used for maximum order count per currency\\n    uint256 internal constant MAXIMUM_ORDER_COUNT = 20;\\n}\\n\",\"keccak256\":\"0x89fe39938c9a7dd4133dba6099285937c94718a355bd904f48989b795cee2898\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant RESERVE_FUND = \\\"ReserveFund\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE_VAULT = \\\"FutureValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0x8e73eead72efa03bcc03c1cdf72cdcebed0f7e6f5a58cda1fd74e0fc03f356e6\",\"license\":\"MIT\"},\"contracts/protocol/libraries/OrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// libraries\\nimport {Constants} from \\\"../libraries/Constants.sol\\\";\\n// types\\nimport {RoundingUint256} from \\\"./math/RoundingUint256.sol\\\";\\n\\nstruct RemainingOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 unitPrice;\\n}\\n\\nstruct PartiallyFilledOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 futureValue;\\n}\\n\\nstruct OrderItem {\\n    uint48 orderId;\\n    uint48 next;\\n    uint48 prev;\\n    address maker;\\n    uint256 timestamp;\\n    uint256 amount;\\n}\\n\\n/**\\n * @notice OrderStatisticsTreeLib is a Red-Black Tree binary search library\\n * based on the following library that is extended to manage order data.\\n *\\n * https://github.com/rob-Hitchens/OrderStatisticsTree\\n *\\n */\\nlibrary OrderStatisticsTreeLib {\\n    using RoundingUint256 for uint256;\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint48 head;\\n        uint48 tail;\\n        uint256 orderCounter;\\n        uint256 orderTotalAmount;\\n        mapping(uint256 => OrderItem) orders;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].right != EMPTY) {\\n            _value = self.nodes[_value].right;\\n        }\\n    }\\n\\n    function next(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(401) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].right != EMPTY) {\\n            _cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(402) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].left != EMPTY) {\\n            _cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint256 value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        // if (self.nodes[value].parent != EMPTY) return true;\\n        uint256 cursor = value;\\n        while (self.nodes[cursor].parent != EMPTY) {\\n            uint256 parent = self.nodes[cursor].parent;\\n            if (self.nodes[parent].left != cursor && self.nodes[parent].right != cursor) {\\n                return false;\\n            }\\n            if (parent == self.root) {\\n                return true;\\n            }\\n            cursor = self.nodes[cursor].parent;\\n        }\\n        return false;\\n    }\\n\\n    function isActiveOrderId(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        return orderIdExists(self, value, orderId) && exists(self, value);\\n    }\\n\\n    function getNode(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n        return (\\n            gn.parent,\\n            gn.left,\\n            gn.right,\\n            gn.red,\\n            gn.head,\\n            gn.tail,\\n            gn.orderCounter,\\n            gn.orderTotalAmount\\n        );\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function getNodeTotalAmount(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint256 totalAmount)\\n    {\\n        return self.nodes[value].orderTotalAmount;\\n    }\\n\\n    function getNodeOrderIds(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint48[] memory orderIds)\\n    {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[gn.head];\\n        orderIds = new uint48[](gn.orderCounter);\\n\\n        for (uint256 i = 0; i < gn.orderCounter; i++) {\\n            orderIds[i] = order.orderId;\\n            order = gn.orders[order.next];\\n        }\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256 _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(405) - Value to insert cannot be zero\\\");\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                return;\\n            }\\n        }\\n\\n        Node storage nValue = self.nodes[value];\\n        // Update order info as a new one if there is already an old node\\n        if (\\n            self.root == EMPTY ||\\n            (self.nodes[cursor].left != value && self.nodes[cursor].right != value)\\n        ) {\\n            nValue.orderCounter = 0;\\n            nValue.orderTotalAmount = 0;\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        }\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(407) - Value to delete cannot be zero\\\");\\n        Node storage nValue = self.nodes[value];\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint256 a,\\n        uint256 b\\n    ) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    function estimateDroppedAmountFromLeft(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = first(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV).div(\\n                    cursorNodeAmountInFV\\n                );\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n    }\\n\\n    function estimateDroppedAmountFromRight(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = last(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV).div(\\n                    cursorNodeAmountInFV\\n                );\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n    }\\n\\n    function dropLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue,\\n        uint256 limitFutureValue\\n    )\\n        internal\\n        returns (\\n            uint256 value,\\n            uint256 filledAmount,\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            PartiallyFilledOrder memory partiallyFilledOrder\\n        )\\n    {\\n        uint256 cursor = first(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor <= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        uint256 amountDiff;\\n        uint256 futureValueDiff;\\n        while (\\n            (totalAmount < amount || amount == EMPTY) &&\\n            (filledFutureValue < limitFutureValue || limitFutureValue == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor <= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            filledFutureValue += _calculateFutureValue(cursor, cursorNodeAmount);\\n            filledAmount += cursorNodeAmount;\\n\\n            if (totalAmount > amount && amount != EMPTY) {\\n                amountDiff = totalAmount - amount;\\n                futureValueDiff = _calculateFutureValue(cursor, amountDiff);\\n            } else if (filledFutureValue > limitFutureValue && limitFutureValue != EMPTY) {\\n                futureValueDiff = filledFutureValue - limitFutureValue;\\n                amountDiff = _calculatePresentValue(cursor, futureValueDiff);\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n\\n        if (amountDiff > 0) {\\n            filledAmount -= amountDiff;\\n        }\\n        if (futureValueDiff > 0) {\\n            filledFutureValue -= futureValueDiff;\\n        }\\n\\n        if (totalAmount > 0) {\\n            if (amountDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(self, cursor, cursorNodeAmount - amountDiff);\\n            } else if (futureValueDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, futureValueDiff)\\n                );\\n            }\\n\\n            self.nodes[cursor].left = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent > cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].left = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        uint256 lastNode = last(self);\\n\\n        if (lastNode == value && self.nodes[lastNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value > self.root || (value == self.root && filledAmount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToLeft(self);\\n    }\\n\\n    function dropRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue,\\n        uint256 limitFutureValue\\n    )\\n        internal\\n        returns (\\n            uint256 value,\\n            uint256 filledAmount,\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            PartiallyFilledOrder memory partiallyFilledOrder\\n        )\\n    {\\n        uint256 cursor = last(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor >= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        uint256 amountDiff;\\n        uint256 futureValueDiff;\\n        while (\\n            (totalAmount < amount || amount == EMPTY) &&\\n            (filledFutureValue < limitFutureValue || limitFutureValue == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor >= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            filledFutureValue += _calculateFutureValue(cursor, cursorNodeAmount);\\n            filledAmount += cursorNodeAmount;\\n\\n            if (totalAmount > amount && amount != EMPTY) {\\n                amountDiff = totalAmount - amount;\\n                futureValueDiff = _calculateFutureValue(cursor, amountDiff);\\n            } else if (filledFutureValue > limitFutureValue && limitFutureValue != EMPTY) {\\n                futureValueDiff = filledFutureValue - limitFutureValue;\\n                amountDiff = _calculatePresentValue(cursor, futureValueDiff);\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n\\n        if (amountDiff > 0) {\\n            filledAmount -= amountDiff;\\n        }\\n        if (futureValueDiff > 0) {\\n            filledFutureValue -= futureValueDiff;\\n        }\\n\\n        if (totalAmount > 0) {\\n            if (amountDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(self, cursor, cursorNodeAmount - amountDiff);\\n            } else if (futureValueDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, futureValueDiff)\\n                );\\n            }\\n\\n            self.nodes[cursor].right = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent < cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].right = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        uint256 firstNode = first(self);\\n\\n        if (firstNode == value && self.nodes[firstNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value < self.root || (value == self.root && filledAmount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToRight(self);\\n    }\\n\\n    function rotateTreeToLeft(Tree storage self) internal {\\n        if (self.nodes[self.root].left == 0 && self.nodes[self.root].right != 0) {\\n            if (self.nodes[self.nodes[self.root].right].left != 0) {\\n                rotateRight(self, self.nodes[self.root].right);\\n            }\\n            rotateLeft(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function rotateTreeToRight(Tree storage self) internal {\\n        if (self.nodes[self.root].right == 0 && self.nodes[self.root].left != 0) {\\n            if (self.nodes[self.nodes[self.root].left].right != 0) {\\n                rotateLeft(self, self.nodes[self.root].left);\\n            }\\n            rotateRight(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function getFutureValue(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (uint256) {\\n        return _calculateFutureValue(value, self.nodes[value].orders[orderId].amount);\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (OrderItem memory) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orders[orderId];\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function orderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        uint48 cursor = orderId;\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[cursor];\\n\\n        if (order.orderId != cursor) {\\n            return false;\\n        }\\n\\n        while (order.prev != EMPTY) {\\n            cursor = order.prev;\\n            order = gn.orders[cursor];\\n        }\\n\\n        return cursor == gn.head;\\n    }\\n\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount,\\n        bool isInterruption\\n    ) internal {\\n        require(amount > 0, \\\"Insufficient amount\\\");\\n        require(value <= Constants.PRICE_DIGIT, \\\"Insufficient value\\\");\\n        insert(self, value);\\n\\n        if (isInterruption) {\\n            addHead(self, value, orderId, user, amount);\\n        } else {\\n            addTail(self, value, orderId, user, amount);\\n        }\\n    }\\n\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        amount = _removeOrder(self, value, orderId);\\n        remove(self, value);\\n    }\\n\\n    /**\\n     * @dev Reduces order amount once market order taken.\\n     */\\n    function fillOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount\\n    ) internal returns (PartiallyFilledOrder memory partiallyFilledOrder) {\\n        Node storage gn = self.nodes[value];\\n\\n        require(\\n            gn.orderTotalAmount >= _amount,\\n            \\\"OrderStatisticsTree(410) - Amount to fill is insufficient\\\"\\n        );\\n\\n        uint256 remainingAmount = _amount;\\n        OrderItem memory currentOrder = gn.orders[gn.head];\\n        uint48 orderId = gn.head;\\n\\n        while (orderId != 0 && remainingAmount != 0) {\\n            currentOrder = gn.orders[orderId];\\n\\n            if (currentOrder.amount <= remainingAmount) {\\n                remainingAmount -= currentOrder.amount;\\n                orderId = currentOrder.next;\\n            } else {\\n                partiallyFilledOrder = PartiallyFilledOrder(\\n                    currentOrder.orderId,\\n                    currentOrder.maker,\\n                    remainingAmount,\\n                    _calculateFutureValue(value, remainingAmount)\\n                );\\n                currentOrder = gn.orders[currentOrder.prev];\\n                break;\\n            }\\n        }\\n\\n        if (currentOrder.orderId != 0) {\\n            _dropOrders(self, value, currentOrder.orderId);\\n        }\\n\\n        if (partiallyFilledOrder.amount > 0) {\\n            self.nodes[value].orders[partiallyFilledOrder.orderId].amount -= partiallyFilledOrder\\n                .amount;\\n            self.nodes[value].orderTotalAmount -= partiallyFilledOrder.amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n        uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n        _link(self, _value, orderId, gn.head);\\n        _setHead(self, _value, orderId);\\n        if (gn.tail == 0) _setTail(self, _value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, _value, _orderId, _user, _amount);\\n        } else {\\n            uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n            _link(self, _value, gn.tail, orderId);\\n            _setTail(self, _value, orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint48) {\\n        Node storage gn = self.nodes[value];\\n        require(\\n            gn.orders[orderId].timestamp == 0,\\n            \\\"OrderStatisticsTree(409) - Order id already exist.\\\"\\n        );\\n\\n        gn.orderCounter += 1;\\n        gn.orderTotalAmount += amount;\\n        OrderItem memory order = OrderItem(orderId, 0, 0, user, block.timestamp, amount);\\n        gn.orders[orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the list.\\n     */\\n    function _removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n        gn.orderTotalAmount -= order.amount;\\n    }\\n\\n    /**\\n     * @dev Drop the OrderItems older than or equal `orderId` from the list\\n     */\\n    function _dropOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n        uint256 cursor = gn.head;\\n        uint256 removedCount = 1;\\n        uint256 removedAmount = gn.orders[cursor].amount;\\n\\n        while (cursor != orderId) {\\n            cursor = gn.orders[cursor].next;\\n            removedCount++;\\n            removedAmount += gn.orders[cursor].amount;\\n        }\\n\\n        if (gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        }\\n\\n        gn.orderCounter -= removedCount;\\n        gn.orderTotalAmount -= removedAmount;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 _prevId,\\n        uint48 _nextId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[_prevId].next = _nextId;\\n        gn.orders[_nextId].prev = _prevId;\\n    }\\n\\n    function _calculateFutureValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * Constants.PRICE_DIGIT).div(unitPrice);\\n    }\\n\\n    function _calculatePresentValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * unitPrice).div(Constants.PRICE_DIGIT);\\n    }\\n}\\n\",\"keccak256\":\"0x9939366c92691be79ef253abd932be3a77804559ac9991c5d3d301b269a0549f\",\"license\":\"MIT\"},\"contracts/protocol/libraries/QuickSort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary QuickSort {\\n    function sort(uint256[] memory data) public pure returns (uint256[] memory) {\\n        quickSort(data, int256(0), int256(data.length - 1));\\n        return data;\\n    }\\n\\n    function quickSort(\\n        uint256[] memory arr,\\n        int256 left,\\n        int256 right\\n    ) internal pure {\\n        int256 i = left;\\n        int256 j = right;\\n        if (i == j) return;\\n        uint256 pivot = arr[uint256(left + (right - left) / 2)];\\n        while (i <= j) {\\n            while (arr[uint256(i)] < pivot) i++;\\n            while (pivot < arr[uint256(j)]) j--;\\n            if (i <= j) {\\n                (arr[uint256(i)], arr[uint256(j)]) = (arr[uint256(j)], arr[uint256(i)]);\\n                i++;\\n                j--;\\n            }\\n        }\\n        if (left < j) quickSort(arr, left, j);\\n        if (i < right) quickSort(arr, i, right);\\n    }\\n}\\n\",\"keccak256\":\"0x2cce94db4f423d70543c79888f77ed57fad6e6638e6a1d1399daabb99676643a\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/FundManagementLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n// interfaces\\nimport {ILendingMarket} from \\\"../../interfaces/ILendingMarket.sol\\\";\\nimport {ILendingMarketController} from \\\"../../interfaces/ILendingMarketController.sol\\\";\\nimport {IFutureValueVault} from \\\"../../interfaces/IFutureValueVault.sol\\\";\\n// libraries\\nimport {AddressResolverLib} from \\\"../AddressResolverLib.sol\\\";\\nimport {QuickSort} from \\\"../QuickSort.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\nimport {RoundingInt256} from \\\"../math/RoundingInt256.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"../../types/ProtocolTypes.sol\\\";\\n// storages\\nimport {LendingMarketControllerStorage as Storage} from \\\"../../storages/LendingMarketControllerStorage.sol\\\";\\n// liquidation\\nimport {ILiquidationReceiver} from \\\"../../../liquidators/interfaces/ILiquidationReceiver.sol\\\";\\n\\nlibrary FundManagementLogic {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using RoundingUint256 for uint256;\\n    using RoundingInt256 for int256;\\n\\n    struct ExecuteLiquidationVars {\\n        uint256 liquidationAmountInCollateralCcy;\\n        uint256 liquidationAmountInDebtCcy;\\n        uint256 protocolFeeInCollateralCcy;\\n        uint256 liquidatorFeeInCollateralCcy;\\n        uint256 insolventAmountInCollateralCcy;\\n        uint256 offsetPVAmount;\\n        uint256 offsetPVAmountInCollateralCcy;\\n        bool isDefaultMarket;\\n        bool isReserveFundPaused;\\n        uint256 receivedCollateralAmount;\\n        uint256 receivedDebtAmount;\\n    }\\n\\n    struct CalculatedTotalFundInETHVars {\\n        bool[] isCollateral;\\n        bytes32 ccy;\\n        uint256[] amounts;\\n        uint256[] amountsInETH;\\n        uint256 plusDepositAmount;\\n        uint256 minusDepositAmount;\\n    }\\n\\n    struct ActualFunds {\\n        int256 presentValue;\\n        int256 futureValue;\\n        uint256 workingLendOrdersAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 borrowedAmount;\\n        int256 genesisValue;\\n    }\\n\\n    struct CalculateActualFundsVars {\\n        bool isTotal;\\n        address market;\\n        bool isDefaultMarket;\\n        uint256[] maturities;\\n    }\\n\\n    struct FutureValueVaultFunds {\\n        int256 genesisValue;\\n        int256 presentValue;\\n        int256 futureValue;\\n    }\\n\\n    struct InactiveBorrowOrdersFunds {\\n        int256 genesisValue;\\n        int256 presentValue;\\n        int256 futureValue;\\n        uint256 workingOrdersAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct InactiveLendOrdersFunds {\\n        int256 genesisValue;\\n        int256 presentValue;\\n        int256 futureValue;\\n        uint256 workingOrdersAmount;\\n        uint256 lentAmount;\\n    }\\n\\n    event OrderFilled(\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 amount,\\n        uint256 futureValue\\n    );\\n\\n    event OrdersFilledInAsync(\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 amount,\\n        uint256 futureValue\\n    );\\n\\n    /**\\n     * @notice Converts the future value to the genesis value if there is balance in the past maturity.\\n     * @param _ccy Currency for pausing all lending markets\\n     * @param _user User's address\\n     * @return Current future value amount after update\\n     */\\n    function convertFutureValueToGenesisValue(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) public returns (int256) {\\n        address futureValueVault = Storage.slot().futureValueVaults[_ccy][\\n            Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n        ];\\n        (\\n            int256 removedAmount,\\n            int256 currentAmount,\\n            uint256 basisMaturity,\\n            bool isAllRemoved\\n        ) = IFutureValueVault(futureValueVault).removeFutureValue(_user, _maturity);\\n\\n        if (removedAmount != 0) {\\n            // Overwrite the `removedAmount` with the unsettled amount left of the Genesis Value\\n            // to handle the fractional amount generated by the lazy evaluation.\\n            if (isAllRemoved) {\\n                AddressResolverLib.genesisValueVault().updateGenesisValueWithResidualAmount(\\n                    _ccy,\\n                    _user,\\n                    basisMaturity\\n                );\\n            } else {\\n                AddressResolverLib.genesisValueVault().updateGenesisValueWithFutureValue(\\n                    _ccy,\\n                    _user,\\n                    basisMaturity,\\n                    removedAmount\\n                );\\n            }\\n        }\\n\\n        return currentAmount;\\n    }\\n\\n    function executeLiquidation(\\n        address _liquidator,\\n        address _user,\\n        bytes32 _collateralCcy,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity\\n    ) external returns (uint256 totalLiquidatedDebtAmount) {\\n        ExecuteLiquidationVars memory vars;\\n\\n        int256 debtFVAmount = calculateActualFunds(_debtCcy, _debtMaturity, _user).futureValue;\\n        require(debtFVAmount < 0, \\\"No debt in the selected maturity\\\");\\n\\n        (int256 debtPVAmount, ) = _calculatePVandFVInDefaultMarket(\\n            _debtCcy,\\n            _debtMaturity,\\n            -debtFVAmount\\n        );\\n\\n        (\\n            vars.liquidationAmountInCollateralCcy,\\n            vars.protocolFeeInCollateralCcy,\\n            vars.liquidatorFeeInCollateralCcy,\\n            vars.insolventAmountInCollateralCcy\\n        ) = AddressResolverLib.tokenVault().getLiquidationAmount(\\n            _user,\\n            _collateralCcy,\\n            AddressResolverLib.currencyController().convert(\\n                _debtCcy,\\n                _collateralCcy,\\n                debtPVAmount.toUint256()\\n            )\\n        );\\n\\n        require(vars.liquidationAmountInCollateralCcy != 0, \\\"User has enough collateral\\\");\\n\\n        vars.liquidationAmountInDebtCcy = AddressResolverLib.currencyController().convert(\\n            _collateralCcy,\\n            _debtCcy,\\n            vars.liquidationAmountInCollateralCcy\\n        );\\n        totalLiquidatedDebtAmount += vars.liquidationAmountInDebtCcy;\\n\\n        vars.isDefaultMarket =\\n            Storage.slot().maturityLendingMarkets[_debtCcy][_debtMaturity] ==\\n            Storage.slot().lendingMarkets[_debtCcy][0];\\n        vars.isReserveFundPaused = AddressResolverLib.reserveFund().isPaused();\\n\\n        if (!vars.isReserveFundPaused) {\\n            // Offset the user's debt using the future value amount and the genesis value amount hold by the reserve fund contract.\\n            // Before this step, the target user's order must be cleaned up by `LendingMarketController#cleanUpFunds` function.\\n            // If the target market is the nearest market(default market), the genesis value is used for the offset.\\n            vars.offsetPVAmount = _offsetFunds(\\n                address(AddressResolverLib.reserveFund()),\\n                _user,\\n                _debtCcy,\\n                _debtMaturity,\\n                _calculateFVFromPV(_debtCcy, _debtMaturity, vars.liquidationAmountInDebtCcy),\\n                vars.isDefaultMarket\\n            );\\n\\n            vars.offsetPVAmountInCollateralCcy = AddressResolverLib.currencyController().convert(\\n                _debtCcy,\\n                _collateralCcy,\\n                vars.offsetPVAmount\\n            );\\n        }\\n\\n        // Transfer collateral from users to liquidators and reserve funds.\\n        vars.receivedCollateralAmount =\\n            vars.liquidationAmountInCollateralCcy +\\n            vars.liquidatorFeeInCollateralCcy -\\n            vars.offsetPVAmountInCollateralCcy;\\n\\n        AddressResolverLib.tokenVault().transferFrom(\\n            _collateralCcy,\\n            _user,\\n            _liquidator,\\n            vars.receivedCollateralAmount\\n        );\\n        AddressResolverLib.tokenVault().transferFrom(\\n            _collateralCcy,\\n            _user,\\n            address(AddressResolverLib.reserveFund()),\\n            vars.protocolFeeInCollateralCcy + vars.offsetPVAmountInCollateralCcy\\n        );\\n\\n        // Cover insolvent amounts using reserve funds.\\n        if (vars.insolventAmountInCollateralCcy > 0 && !vars.isReserveFundPaused) {\\n            if (AddressResolverLib.tokenVault().getTotalCollateralAmount(_user) == 0) {\\n                uint256 insolventAmountInDebtCcy = AddressResolverLib.currencyController().convert(\\n                    _collateralCcy,\\n                    _debtCcy,\\n                    vars.insolventAmountInCollateralCcy\\n                );\\n\\n                _transferFunds(\\n                    address(AddressResolverLib.reserveFund()),\\n                    _user,\\n                    _debtCcy,\\n                    _debtMaturity,\\n                    insolventAmountInDebtCcy,\\n                    vars.isDefaultMarket\\n                );\\n\\n                totalLiquidatedDebtAmount += insolventAmountInDebtCcy;\\n            }\\n        }\\n\\n        // Transfer the debt from users to liquidators\\n        if (vars.liquidationAmountInDebtCcy > vars.offsetPVAmount) {\\n            vars.receivedDebtAmount = vars.liquidationAmountInDebtCcy - vars.offsetPVAmount;\\n\\n            _transferFunds(\\n                _user,\\n                _liquidator,\\n                _debtCcy,\\n                _debtMaturity,\\n                vars.receivedDebtAmount,\\n                vars.isDefaultMarket\\n            );\\n        }\\n\\n        if (_liquidator.code.length > 0) {\\n            require(\\n                ILiquidationReceiver(_liquidator).executeOperation(\\n                    _liquidator,\\n                    _user,\\n                    _collateralCcy,\\n                    vars.receivedCollateralAmount,\\n                    _debtCcy,\\n                    _debtMaturity,\\n                    vars.receivedDebtAmount,\\n                    msg.sender\\n                ),\\n                \\\"Invalid operation execution\\\"\\n            );\\n        }\\n    }\\n\\n    function updateFunds(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        ProtocolTypes.Side _side,\\n        uint256 _filledFutureValue,\\n        uint256 _filledAmount,\\n        uint256 _feeFutureValue,\\n        bool _isTaker\\n    ) external {\\n        address futureValueVault = Storage.slot().futureValueVaults[_ccy][\\n            Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n        ];\\n\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            AddressResolverLib.tokenVault().addDepositAmount(_user, _ccy, _filledAmount);\\n            IFutureValueVault(futureValueVault).addBorrowFutureValue(\\n                _user,\\n                _filledFutureValue + _feeFutureValue,\\n                _maturity,\\n                _isTaker\\n            );\\n        } else {\\n            AddressResolverLib.tokenVault().removeDepositAmount(_user, _ccy, _filledAmount);\\n            IFutureValueVault(futureValueVault).addLendFutureValue(\\n                _user,\\n                _filledFutureValue - _feeFutureValue,\\n                _maturity,\\n                _isTaker\\n            );\\n        }\\n\\n        if (_feeFutureValue > 0) {\\n            address reserveFundAddr = address(AddressResolverLib.reserveFund());\\n            IFutureValueVault(futureValueVault).addLendFutureValue(\\n                reserveFundAddr,\\n                _feeFutureValue,\\n                _maturity,\\n                _side == ProtocolTypes.Side.LEND\\n            );\\n\\n            registerCurrencyAndMaturity(_ccy, _maturity, reserveFundAddr);\\n        }\\n\\n        emit OrderFilled(_user, _ccy, _side, _maturity, _filledAmount, _filledFutureValue);\\n    }\\n\\n    function registerCurrencyAndMaturity(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) public {\\n        if (!Storage.slot().usedMaturities[_ccy][_user].contains(_maturity)) {\\n            Storage.slot().usedMaturities[_ccy][_user].add(_maturity);\\n\\n            if (!Storage.slot().usedCurrencies[_user].contains(_ccy)) {\\n                Storage.slot().usedCurrencies[_user].add(_ccy);\\n            }\\n        }\\n    }\\n\\n    function resetFunds(bytes32 _ccy, address _user) external returns (int256 amount) {\\n        // First, clean up future values and genesis values to redeem those amounts.\\n        cleanUpFunds(_ccy, _user);\\n\\n        amount = calculateActualFunds(_ccy, 0, _user).presentValue;\\n\\n        uint256[] memory maturities = Storage.slot().usedMaturities[_ccy][_user].values();\\n        for (uint256 j; j < maturities.length; j++) {\\n            IFutureValueVault(\\n                Storage.slot().futureValueVaults[_ccy][\\n                    Storage.slot().maturityLendingMarkets[_ccy][maturities[j]]\\n                ]\\n            ).resetFutureValue(_user);\\n        }\\n\\n        AddressResolverLib.genesisValueVault().resetGenesisValue(_ccy, _user);\\n    }\\n\\n    function addDepositAtMarketTerminationPrice(\\n        bytes32 _ccy,\\n        address _user,\\n        uint256 _amount\\n    ) external {\\n        bytes32[] memory collateralCurrencies = AddressResolverLib\\n            .tokenVault()\\n            .getCollateralCurrencies();\\n\\n        uint256[] memory marketTerminationRatios = new uint256[](collateralCurrencies.length);\\n        uint256 marketTerminationRatioTotal;\\n\\n        for (uint256 i; i < collateralCurrencies.length; i++) {\\n            bytes32 ccy = collateralCurrencies[i];\\n            marketTerminationRatios[i] = Storage.slot().marketTerminationRatios[ccy];\\n            marketTerminationRatioTotal += marketTerminationRatios[i];\\n        }\\n\\n        uint256 amountInETH = _convertToETHAtMarketTerminationPrice(_ccy, _amount);\\n\\n        for (uint256 i; i < collateralCurrencies.length; i++) {\\n            bytes32 ccy = collateralCurrencies[i];\\n            uint256 addedAmount = _convertFromETHAtMarketTerminationPrice(\\n                ccy,\\n                (amountInETH * marketTerminationRatios[i]).div(marketTerminationRatioTotal)\\n            );\\n\\n            AddressResolverLib.tokenVault().addDepositAmount(_user, ccy, addedAmount);\\n        }\\n    }\\n\\n    function removeDepositAtMarketTerminationPrice(\\n        bytes32 _ccy,\\n        address _user,\\n        uint256 _amount,\\n        bytes32 _collateralCcy\\n    ) external {\\n        require(\\n            AddressResolverLib.tokenVault().isCollateral(_collateralCcy),\\n            \\\"Not registered as collateral\\\"\\n        );\\n\\n        uint256 depositAmount = AddressResolverLib.tokenVault().getDepositAmount(\\n            _user,\\n            _collateralCcy\\n        );\\n\\n        uint256 removedAmount = _convertFromETHAtMarketTerminationPrice(\\n            _collateralCcy,\\n            _convertToETHAtMarketTerminationPrice(_ccy, _amount)\\n        );\\n\\n        require(depositAmount >= removedAmount, \\\"Not enough collateral\\\");\\n\\n        AddressResolverLib.tokenVault().removeDepositAmount(_user, _collateralCcy, removedAmount);\\n    }\\n\\n    function calculateActualFunds(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) public view returns (ActualFunds memory actualFunds) {\\n        CalculateActualFundsVars memory vars;\\n\\n        if (_maturity == 0) {\\n            vars.isTotal = true;\\n            vars.market = Storage.slot().lendingMarkets[_ccy][0];\\n            vars.isDefaultMarket = true;\\n        } else {\\n            vars.isTotal = false;\\n            vars.market = Storage.slot().maturityLendingMarkets[_ccy][_maturity];\\n            vars.isDefaultMarket = vars.market == Storage.slot().lendingMarkets[_ccy][0];\\n        }\\n        actualFunds.genesisValue = AddressResolverLib.genesisValueVault().getGenesisValue(\\n            _ccy,\\n            _user\\n        );\\n\\n        vars.maturities = getUsedMaturities(_ccy, _user);\\n\\n        for (uint256 i = 0; i < vars.maturities.length; i++) {\\n            address currentMarket = Storage.slot().maturityLendingMarkets[_ccy][vars.maturities[i]];\\n            uint256 currentMaturity = ILendingMarket(currentMarket).getMaturity();\\n            bool isDefaultMarket = currentMarket == Storage.slot().lendingMarkets[_ccy][0];\\n\\n            if (vars.isDefaultMarket || currentMarket == vars.market) {\\n                // Get current funds from Future Value Vault by lazy evaluations.\\n                FutureValueVaultFunds memory futureValueVaultFunds = _getFundsFromFutureValueVault(\\n                    _ccy,\\n                    _user,\\n                    vars,\\n                    currentMaturity,\\n                    currentMarket,\\n                    isDefaultMarket\\n                );\\n                // Get current funds from borrowing orders by lazy evaluations.\\n                InactiveBorrowOrdersFunds\\n                    memory borrowOrdersFunds = _getFundsFromInactiveBorrowOrders(\\n                        _ccy,\\n                        _user,\\n                        vars,\\n                        currentMaturity,\\n                        currentMarket,\\n                        isDefaultMarket\\n                    );\\n                // Get current funds from lending orders by lazy evaluations.\\n                InactiveLendOrdersFunds memory lendOrdersFunds = _getFundsFromInactiveLendOrders(\\n                    _ccy,\\n                    _user,\\n                    vars,\\n                    currentMaturity,\\n                    currentMarket,\\n                    isDefaultMarket\\n                );\\n\\n                actualFunds.genesisValue +=\\n                    futureValueVaultFunds.genesisValue -\\n                    borrowOrdersFunds.genesisValue +\\n                    lendOrdersFunds.genesisValue;\\n\\n                actualFunds.futureValue +=\\n                    futureValueVaultFunds.futureValue -\\n                    borrowOrdersFunds.futureValue +\\n                    lendOrdersFunds.futureValue;\\n\\n                actualFunds.presentValue +=\\n                    futureValueVaultFunds.presentValue -\\n                    borrowOrdersFunds.presentValue +\\n                    lendOrdersFunds.presentValue;\\n\\n                actualFunds.workingBorrowOrdersAmount += borrowOrdersFunds.workingOrdersAmount;\\n                actualFunds.workingLendOrdersAmount += lendOrdersFunds.workingOrdersAmount;\\n                actualFunds.borrowedAmount += borrowOrdersFunds.borrowedAmount;\\n                actualFunds.lentAmount += lendOrdersFunds.lentAmount;\\n\\n                // Get balance fluctuation amount by auto-rolls\\n                if (actualFunds.genesisValue < 0) {\\n                    int256 fluctuation = AddressResolverLib\\n                        .genesisValueVault()\\n                        .calculateBalanceFluctuationByAutoRolls(\\n                            _ccy,\\n                            actualFunds.genesisValue,\\n                            vars.maturities[i],\\n                            i == vars.maturities.length - 1 ? 0 : vars.maturities[i + 1]\\n                        );\\n\\n                    actualFunds.genesisValue += fluctuation;\\n                }\\n            }\\n        }\\n\\n        // Add GV to PV & FV if the market is that the lending position is rolled to.\\n        if (vars.isDefaultMarket && actualFunds.genesisValue != 0) {\\n            int256 futureValue = AddressResolverLib.genesisValueVault().calculateFVFromGV(\\n                _ccy,\\n                0,\\n                actualFunds.genesisValue\\n            );\\n            actualFunds.presentValue += _calculatePVFromFV(\\n                futureValue,\\n                ILendingMarket(Storage.slot().lendingMarkets[_ccy][0]).getMidUnitPrice()\\n            );\\n            actualFunds.futureValue += futureValue;\\n        }\\n    }\\n\\n    function calculateFunds(bytes32 _ccy, address _user)\\n        public\\n        view\\n        returns (\\n            uint256 workingLendOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 collateralAmount,\\n            uint256 lentAmount,\\n            uint256 workingBorrowOrdersAmount,\\n            uint256 debtAmount,\\n            uint256 borrowedAmount\\n        )\\n    {\\n        ActualFunds memory funds = calculateActualFunds(_ccy, 0, _user);\\n        workingLendOrdersAmount = funds.workingLendOrdersAmount;\\n        lentAmount = funds.lentAmount;\\n        workingBorrowOrdersAmount = funds.workingBorrowOrdersAmount;\\n        borrowedAmount = funds.borrowedAmount;\\n\\n        if (funds.presentValue > 0) {\\n            claimableAmount = (funds.presentValue).toUint256();\\n            uint256 haircut = AddressResolverLib.currencyController().getHaircut(_ccy);\\n            collateralAmount = (claimableAmount * haircut).div(Constants.PCT_DIGIT);\\n        } else if (funds.presentValue < 0) {\\n            debtAmount = (-funds.presentValue).toUint256();\\n        }\\n    }\\n\\n    function calculateTotalFundsInETH(\\n        address _user,\\n        bytes32 _depositCcy,\\n        uint256 _depositAmount\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalWorkingLendOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalCollateralAmount,\\n            uint256 totalLentAmount,\\n            uint256 totalWorkingBorrowOrdersAmount,\\n            uint256 totalDebtAmount,\\n            uint256 totalBorrowedAmount,\\n            bool isEnoughDeposit\\n        )\\n    {\\n        EnumerableSet.Bytes32Set storage currencySet = Storage.slot().usedCurrencies[_user];\\n        CalculatedTotalFundInETHVars memory vars;\\n\\n        vars.isCollateral = AddressResolverLib.tokenVault().isCollateral(currencySet.values());\\n        vars.plusDepositAmount = _depositAmount;\\n\\n        // Calculate total funds from the user's order list\\n        for (uint256 i = 0; i < currencySet.length(); i++) {\\n            vars.ccy = currencySet.at(i);\\n            vars.amounts = new uint256[](7);\\n\\n            // 0: workingLendOrdersAmount\\n            // 1: claimableAmount\\n            // 2: collateralAmount\\n            // 3: lentAmount\\n            // 4: workingBorrowOrdersAmount\\n            // 5: debtAmount\\n            // 6: borrowedAmount\\n            (\\n                vars.amounts[0],\\n                vars.amounts[1],\\n                vars.amounts[2],\\n                vars.amounts[3],\\n                vars.amounts[4],\\n                vars.amounts[5],\\n                vars.amounts[6]\\n            ) = calculateFunds(vars.ccy, _user);\\n\\n            if (vars.ccy == _depositCcy) {\\n                // plusDepositAmount: depositAmount + borrowedAmount\\n                // minusDepositAmount: workingLendOrdersAmount + lentAmount\\n                vars.plusDepositAmount += vars.amounts[6];\\n                vars.minusDepositAmount += vars.amounts[0] + vars.amounts[3];\\n            }\\n\\n            vars.amountsInETH = AddressResolverLib.currencyController().convertToETH(\\n                vars.ccy,\\n                vars.amounts\\n            );\\n\\n            totalClaimableAmount += vars.amountsInETH[1];\\n            totalCollateralAmount += vars.amountsInETH[2];\\n            totalWorkingBorrowOrdersAmount += vars.amountsInETH[4];\\n            totalDebtAmount += vars.amountsInETH[5];\\n\\n            // NOTE: Lent amount and working lend orders amount are excluded here as they are not used\\n            // for the collateral calculation.\\n            // Those amounts need only to check whether there is enough deposit amount in the selected currency.\\n            if (vars.isCollateral[i]) {\\n                totalWorkingLendOrdersAmount += vars.amountsInETH[0];\\n                totalLentAmount += vars.amountsInETH[3];\\n                totalBorrowedAmount += vars.amountsInETH[6];\\n            }\\n        }\\n\\n        // Check if the user has enough collateral in the selected currency.\\n        isEnoughDeposit = vars.plusDepositAmount >= vars.minusDepositAmount;\\n    }\\n\\n    function getUsedMaturities(bytes32 _ccy, address _user)\\n        public\\n        view\\n        returns (uint256[] memory maturities)\\n    {\\n        maturities = Storage.slot().usedMaturities[_ccy][_user].values();\\n        if (maturities.length > 0) {\\n            maturities = QuickSort.sort(maturities);\\n        }\\n    }\\n\\n    function cleanUpFunds(bytes32 _ccy, address _user)\\n        public\\n        returns (uint256 totalActiveOrderCount)\\n    {\\n        bool futureValueExists = false;\\n        uint256[] memory maturities = getUsedMaturities(_ccy, _user);\\n\\n        for (uint256 j = 0; j < maturities.length; j++) {\\n            ILendingMarket market = ILendingMarket(\\n                Storage.slot().maturityLendingMarkets[_ccy][maturities[j]]\\n            );\\n            uint256 activeMaturity = market.getMaturity();\\n            int256 currentFutureValue = convertFutureValueToGenesisValue(\\n                _ccy,\\n                activeMaturity,\\n                _user\\n            );\\n            (uint256 activeOrderCount, bool isCleaned) = _cleanUpOrders(\\n                _ccy,\\n                activeMaturity,\\n                _user\\n            );\\n\\n            totalActiveOrderCount += activeOrderCount;\\n\\n            if (isCleaned) {\\n                currentFutureValue = convertFutureValueToGenesisValue(_ccy, activeMaturity, _user);\\n            }\\n\\n            if (currentFutureValue != 0) {\\n                futureValueExists = true;\\n            }\\n\\n            if (currentFutureValue == 0 && activeOrderCount == 0) {\\n                Storage.slot().usedMaturities[_ccy][_user].remove(maturities[j]);\\n            }\\n\\n            AddressResolverLib.genesisValueVault().cleanUpGenesisValue(\\n                _ccy,\\n                _user,\\n                j == maturities.length - 1 ? 0 : maturities[j + 1]\\n            );\\n        }\\n\\n        if (\\n            totalActiveOrderCount == 0 &&\\n            !futureValueExists &&\\n            AddressResolverLib.genesisValueVault().getGenesisValue(_ccy, _user) == 0\\n        ) {\\n            Storage.slot().usedCurrencies[_user].remove(_ccy);\\n        }\\n    }\\n\\n    function _cleanUpOrders(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) internal returns (uint256 activeOrderCount, bool isCleaned) {\\n        address futureValueVault = Storage.slot().futureValueVaults[_ccy][\\n            Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n        ];\\n\\n        (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 userCurrentMaturity\\n        ) = ILendingMarket(Storage.slot().maturityLendingMarkets[_ccy][_maturity]).cleanUpOrders(\\n                _user\\n            );\\n\\n        if (removedLendOrderAmount > removedBorrowOrderAmount) {\\n            AddressResolverLib.tokenVault().removeDepositAmount(\\n                _user,\\n                _ccy,\\n                removedLendOrderAmount - removedBorrowOrderAmount\\n            );\\n        } else if (removedLendOrderAmount < removedBorrowOrderAmount) {\\n            AddressResolverLib.tokenVault().addDepositAmount(\\n                _user,\\n                _ccy,\\n                removedBorrowOrderAmount - removedLendOrderAmount\\n            );\\n        }\\n\\n        if (removedLendOrderFutureValue > 0) {\\n            IFutureValueVault(futureValueVault).addLendFutureValue(\\n                _user,\\n                removedLendOrderFutureValue,\\n                userCurrentMaturity,\\n                false\\n            );\\n            emit OrdersFilledInAsync(\\n                _user,\\n                _ccy,\\n                ProtocolTypes.Side.LEND,\\n                userCurrentMaturity,\\n                removedLendOrderAmount,\\n                removedLendOrderFutureValue\\n            );\\n        }\\n\\n        if (removedBorrowOrderFutureValue > 0) {\\n            IFutureValueVault(futureValueVault).addBorrowFutureValue(\\n                _user,\\n                removedBorrowOrderFutureValue,\\n                userCurrentMaturity,\\n                false\\n            );\\n            emit OrdersFilledInAsync(\\n                _user,\\n                _ccy,\\n                ProtocolTypes.Side.BORROW,\\n                userCurrentMaturity,\\n                removedBorrowOrderAmount,\\n                removedBorrowOrderFutureValue\\n            );\\n        }\\n\\n        isCleaned = (removedLendOrderFutureValue + removedBorrowOrderFutureValue) > 0;\\n        activeOrderCount = activeLendOrderCount + activeBorrowOrderCount;\\n    }\\n\\n    function _getFundsFromFutureValueVault(\\n        bytes32 _ccy,\\n        address _user,\\n        CalculateActualFundsVars memory vars,\\n        uint256 currentMaturity,\\n        address currentMarket,\\n        bool isDefaultMarket\\n    ) internal view returns (FutureValueVaultFunds memory funds) {\\n        (int256 futureValueInMaturity, uint256 fvMaturity) = IFutureValueVault(\\n            Storage.slot().futureValueVaults[_ccy][currentMarket]\\n        ).getFutureValue(_user);\\n\\n        if (futureValueInMaturity != 0) {\\n            if (currentMaturity != fvMaturity) {\\n                if (vars.isDefaultMarket) {\\n                    funds.genesisValue = AddressResolverLib.genesisValueVault().calculateGVFromFV(\\n                        _ccy,\\n                        fvMaturity,\\n                        futureValueInMaturity\\n                    );\\n                }\\n            } else if (currentMaturity == fvMaturity) {\\n                if (vars.isTotal && !isDefaultMarket) {\\n                    (funds.presentValue, funds.futureValue) = _calculatePVandFVInDefaultMarket(\\n                        _ccy,\\n                        fvMaturity,\\n                        futureValueInMaturity\\n                    );\\n                } else if (vars.isTotal || !vars.isDefaultMarket || isDefaultMarket) {\\n                    funds.futureValue = futureValueInMaturity;\\n                    funds.presentValue = _calculatePVFromFVByMidUnitPrice(\\n                        _ccy,\\n                        fvMaturity,\\n                        futureValueInMaturity\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getFundsFromInactiveBorrowOrders(\\n        bytes32 _ccy,\\n        address _user,\\n        CalculateActualFundsVars memory vars,\\n        uint256 currentMaturity,\\n        address currentMarket,\\n        bool isDefaultMarket\\n    ) internal view returns (InactiveBorrowOrdersFunds memory funds) {\\n        uint256 filledFutureValue;\\n        uint256 orderMaturity;\\n        (\\n            funds.workingOrdersAmount,\\n            funds.borrowedAmount,\\n            filledFutureValue,\\n            orderMaturity\\n        ) = ILendingMarket(currentMarket).getTotalAmountFromBorrowOrders(_user);\\n\\n        if (filledFutureValue != 0) {\\n            if (currentMaturity != orderMaturity) {\\n                if (vars.isDefaultMarket) {\\n                    funds.genesisValue = AddressResolverLib.genesisValueVault().calculateGVFromFV(\\n                        _ccy,\\n                        orderMaturity,\\n                        filledFutureValue.toInt256()\\n                    );\\n                }\\n            } else if (currentMaturity == orderMaturity) {\\n                if (vars.isTotal && !isDefaultMarket) {\\n                    (funds.presentValue, funds.futureValue) = _calculatePVandFVInDefaultMarket(\\n                        _ccy,\\n                        orderMaturity,\\n                        filledFutureValue.toInt256()\\n                    );\\n                } else if (vars.isTotal || !vars.isDefaultMarket || isDefaultMarket) {\\n                    funds.futureValue = filledFutureValue.toInt256();\\n                    funds.presentValue = _calculatePVFromFVByMidUnitPrice(\\n                        _ccy,\\n                        orderMaturity,\\n                        funds.futureValue\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getFundsFromInactiveLendOrders(\\n        bytes32 _ccy,\\n        address _user,\\n        CalculateActualFundsVars memory vars,\\n        uint256 currentMaturity,\\n        address currentMarket,\\n        bool isDefaultMarket\\n    ) internal view returns (InactiveLendOrdersFunds memory funds) {\\n        uint256 filledFutureValue;\\n        uint256 orderMaturity;\\n        (\\n            funds.workingOrdersAmount,\\n            funds.lentAmount,\\n            filledFutureValue,\\n            orderMaturity\\n        ) = ILendingMarket(currentMarket).getTotalAmountFromLendOrders(_user);\\n\\n        if (filledFutureValue != 0) {\\n            if (currentMaturity != orderMaturity) {\\n                if (vars.isDefaultMarket) {\\n                    funds.genesisValue += AddressResolverLib.genesisValueVault().calculateGVFromFV(\\n                        _ccy,\\n                        orderMaturity,\\n                        filledFutureValue.toInt256()\\n                    );\\n                }\\n            } else if (currentMaturity == orderMaturity) {\\n                if (vars.isTotal && !isDefaultMarket) {\\n                    (funds.presentValue, funds.futureValue) = _calculatePVandFVInDefaultMarket(\\n                        _ccy,\\n                        orderMaturity,\\n                        filledFutureValue.toInt256()\\n                    );\\n                } else if (vars.isTotal || !vars.isDefaultMarket || isDefaultMarket) {\\n                    funds.futureValue = filledFutureValue.toInt256();\\n                    funds.presentValue = _calculatePVFromFVByMidUnitPrice(\\n                        _ccy,\\n                        orderMaturity,\\n                        funds.futureValue\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function _calculatePVandFVInDefaultMarket(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        int256 _futureValueInMaturity\\n    ) internal view returns (int256 presentValue, int256 futureValue) {\\n        address destinationMarket = Storage.slot().lendingMarkets[_ccy][0];\\n        uint256 unitPriceInDestinationMaturity = ILendingMarket(destinationMarket)\\n            .getMidUnitPrice();\\n\\n        if (AddressResolverLib.genesisValueVault().getAutoRollLog(_ccy, _maturity).unitPrice == 0) {\\n            presentValue = _calculatePVFromFVByMidUnitPrice(\\n                _ccy,\\n                _maturity,\\n                _futureValueInMaturity\\n            );\\n            futureValue = (presentValue * Constants.PRICE_DIGIT.toInt256()).div(\\n                unitPriceInDestinationMaturity.toInt256()\\n            );\\n        } else {\\n            futureValue = AddressResolverLib.genesisValueVault().calculateFVFromFV(\\n                _ccy,\\n                _maturity,\\n                0,\\n                _futureValueInMaturity\\n            );\\n            presentValue = _calculatePVFromFV(futureValue, unitPriceInDestinationMaturity);\\n        }\\n    }\\n\\n    function _calculatePVFromFVByMidUnitPrice(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        int256 _futureValue\\n    ) internal view returns (int256 presentValue) {\\n        uint256 unitPriceInBasisMaturity = ILendingMarket(\\n            Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n        ).getMidUnitPrice();\\n        presentValue = _calculatePVFromFV(_futureValue, unitPriceInBasisMaturity);\\n    }\\n\\n    function _calculateFVFromPV(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _presentValue\\n    ) internal view returns (uint256) {\\n        uint256 unitPrice = ILendingMarket(Storage.slot().maturityLendingMarkets[_ccy][_maturity])\\n            .getMidUnitPrice();\\n\\n        // NOTE: The formula is: futureValue = presentValue / unitPrice.\\n        return (_presentValue * Constants.PRICE_DIGIT).div(unitPrice);\\n    }\\n\\n    function _calculatePVFromFV(int256 _futureValue, uint256 _unitPrice)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        // NOTE: The formula is: presentValue = futureValue * unitPrice.\\n        return (_futureValue * _unitPrice.toInt256()).div(Constants.PRICE_DIGIT.toInt256());\\n    }\\n\\n    function _convertToETHAtMarketTerminationPrice(bytes32 _ccy, uint256 _amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_ccy == \\\"ETH\\\") {\\n            return _amount;\\n        } else {\\n            uint8 decimals = AddressResolverLib.currencyController().getEthDecimals(_ccy);\\n\\n            return\\n                (_amount * Storage.slot().marketTerminationPrices[_ccy].toUint256()).div(\\n                    (10**decimals)\\n                );\\n        }\\n    }\\n\\n    function _convertFromETHAtMarketTerminationPrice(bytes32 _ccy, uint256 _amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_ccy == \\\"ETH\\\") {\\n            return _amount;\\n        } else {\\n            uint8 decimals = AddressResolverLib.currencyController().getEthDecimals(_ccy);\\n            return\\n                (_amount * 10**decimals).div(\\n                    Storage.slot().marketTerminationPrices[_ccy].toUint256()\\n                );\\n        }\\n    }\\n\\n    function _offsetFutureValue(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _lender,\\n        address _borrower,\\n        uint256 _maximumFVAmount\\n    ) internal returns (uint256 offsetAmount) {\\n        address market = Storage.slot().maturityLendingMarkets[_ccy][_maturity];\\n        address futureValueVault = Storage.slot().futureValueVaults[_ccy][market];\\n\\n        offsetAmount = IFutureValueVault(futureValueVault).offsetFutureValue(\\n            _lender,\\n            _borrower,\\n            _maximumFVAmount\\n        );\\n    }\\n\\n    function _offsetFunds(\\n        address _user0,\\n        address _user1,\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _fvAmount,\\n        bool _isDefaultMarket\\n    ) internal returns (uint256 offsetPVAmount) {\\n        if (_isDefaultMarket) {\\n            int256 offsetGVAmount = AddressResolverLib.genesisValueVault().offsetGenesisValue(\\n                _ccy,\\n                _maturity,\\n                _user0,\\n                _user1,\\n                AddressResolverLib.genesisValueVault().calculateGVFromFV(\\n                    _ccy,\\n                    _maturity,\\n                    _fvAmount.toInt256()\\n                )\\n            );\\n\\n            if (offsetGVAmount > 0) {\\n                (int256 pvAmount, ) = _calculatePVandFVInDefaultMarket(\\n                    _ccy,\\n                    _maturity,\\n                    AddressResolverLib.genesisValueVault().calculateFVFromGV(\\n                        _ccy,\\n                        _maturity,\\n                        offsetGVAmount\\n                    )\\n                );\\n                offsetPVAmount = pvAmount.toUint256();\\n            }\\n        }\\n\\n        uint256 offsetFVAmount = _offsetFutureValue(\\n            _ccy,\\n            _maturity,\\n            _user0,\\n            _user1,\\n            _fvAmount - _calculateFVFromPV(_ccy, _maturity, offsetPVAmount)\\n        );\\n\\n        if (offsetFVAmount > 0) {\\n            (int256 pvAmount, ) = _calculatePVandFVInDefaultMarket(\\n                _ccy,\\n                _maturity,\\n                offsetFVAmount.toInt256()\\n            );\\n            offsetPVAmount += pvAmount.toUint256();\\n        }\\n    }\\n\\n    function _transferFunds(\\n        address _from,\\n        address _to,\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _amount,\\n        bool _isDefaultMarket\\n    ) internal returns (uint256 remainingAmount) {\\n        remainingAmount = _amount;\\n\\n        if (_isDefaultMarket) {\\n            int256 userGVAmount = AddressResolverLib.genesisValueVault().getGenesisValue(\\n                _ccy,\\n                _from\\n            );\\n\\n            if (userGVAmount < 0) {\\n                uint256 currentMaturity = AddressResolverLib.genesisValueVault().getCurrentMaturity(\\n                    _ccy\\n                );\\n\\n                int256 gvAmount = AddressResolverLib.genesisValueVault().calculateGVFromFV(\\n                    _ccy,\\n                    0,\\n                    -_calculateFVFromPV(_ccy, currentMaturity, remainingAmount).toInt256()\\n                );\\n\\n                if (userGVAmount > gvAmount) {\\n                    gvAmount = userGVAmount;\\n                }\\n\\n                // Due to the negative genesis value, the liquidator's genesis value is decreased.\\n                AddressResolverLib.genesisValueVault().transferFrom(_ccy, _from, _to, gvAmount);\\n\\n                remainingAmount -= _calculatePVFromFVByMidUnitPrice(\\n                    _ccy,\\n                    currentMaturity,\\n                    AddressResolverLib.genesisValueVault().calculateFVFromGV(_ccy, 0, -gvAmount)\\n                ).toUint256();\\n            }\\n        }\\n\\n        IFutureValueVault futureValueVault = IFutureValueVault(\\n            Storage.slot().futureValueVaults[_ccy][\\n                Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n            ]\\n        );\\n\\n        (int256 userFVAmount, ) = futureValueVault.getFutureValue(_from);\\n\\n        if (userFVAmount < 0) {\\n            int256 fvAmount = -_calculateFVFromPV(_ccy, _maturity, remainingAmount).toInt256();\\n\\n            if (userFVAmount > fvAmount) {\\n                fvAmount = userFVAmount;\\n            }\\n            futureValueVault.transferFrom(_from, _to, fvAmount, _maturity);\\n\\n            remainingAmount -= _calculatePVFromFVByMidUnitPrice(_ccy, _maturity, -fvAmount)\\n                .toUint256();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x384c62d963216a3982c625d7a596f172d33df523446589c18ac730962e6c9c60\",\"license\":\"MIT\"},\"contracts/protocol/libraries/math/RoundingInt256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoundingInt256 {\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0);\\n\\n        int256 diff = (a * 10) / b - (a / b) * 10;\\n        if (diff >= 5) {\\n            return (a / b) + 1;\\n        } else if (diff <= -5) {\\n            return (a / b) - 1;\\n        } else {\\n            return a / b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7ab7168f709ecb8d28c017b8c074fe83ae88de347d3aed6ce13f2188d854cb9\",\"license\":\"MIT\"},\"contracts/protocol/libraries/math/RoundingUint256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoundingUint256 {\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0);\\n\\n        if ((a * 10) / b - (a / b) * 10 < 5) {\\n            return a / b;\\n        } else {\\n            return (a / b) + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc360f39a82f1a9a7454726e3db802407d305b5e525aa8c3236fe49ca6ca534d\",\"license\":\"MIT\"},\"contracts/protocol/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct Currency {\\n    bool isSupported;\\n    string name;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.currencyController\\\");\\n\\n    struct Storage {\\n        // Protocol currencies\\n        EnumerableSet.Bytes32Set currencies;\\n        mapping(bytes32 => uint256) haircuts;\\n        // PriceFeed\\n        mapping(bytes32 => AggregatorV3Interface) usdPriceFeeds;\\n        mapping(bytes32 => AggregatorV3Interface) ethPriceFeeds;\\n        mapping(bytes32 => uint8) usdDecimals;\\n        mapping(bytes32 => uint8) ethDecimals;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x318293c6e7a2b9129e4c4e05a873c772e3a0cc4a92b40cc88749586f716c6643\",\"license\":\"MIT\"},\"contracts/protocol/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nstruct AutoRollLog {\\n    uint256 unitPrice;\\n    uint256 lendingCompoundFactor;\\n    uint256 borrowingCompoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.genesisValueVault\\\");\\n\\n    struct Storage {\\n        mapping(bytes32 => bool) isInitialized;\\n        mapping(bytes32 => uint256) initialCompoundFactors;\\n        mapping(bytes32 => uint256) lendingCompoundFactors;\\n        mapping(bytes32 => uint256) borrowingCompoundFactors;\\n        mapping(bytes32 => uint256) currentMaturity;\\n        mapping(bytes32 => uint8) decimals;\\n        // Mapping from user to balance per currency\\n        mapping(bytes32 => mapping(address => int256)) balances;\\n        mapping(bytes32 => uint256) totalLendingSupplies;\\n        mapping(bytes32 => uint256) totalBorrowingSupplies;\\n        // Mapping from maturity balance per currency\\n        mapping(bytes32 => mapping(uint256 => int256)) maturityBalances;\\n        // Mapping from maturity to auto-roll log per currency\\n        mapping(bytes32 => mapping(uint256 => AutoRollLog)) autoRollLogs;\\n        // Mapping from user to maturity per currency\\n        mapping(bytes32 => mapping(address => uint256)) userMaturities;\\n        // Mapping from maturity to maximum total supply per currency\\n        mapping(bytes32 => mapping(uint256 => uint256)) maximumTotalSupply;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa3bdb289513fa796d60fa49b83af011113a693377e1466ab4088cb5fd11a2917\",\"license\":\"MIT\"},\"contracts/protocol/storages/LendingMarketControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct ObservationPeriodLog {\\n    uint256 totalAmount;\\n    uint256 totalFutureValue;\\n}\\n\\nlibrary LendingMarketControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarketController\\\");\\n\\n    struct Storage {\\n        uint256 marketBasePeriod;\\n        uint256 marketTerminationDate;\\n        mapping(bytes32 => int256) marketTerminationPrices;\\n        mapping(bytes32 => uint256) marketTerminationRatios;\\n        // Mapping from currency to lending market contract addresses\\n        mapping(bytes32 => address[]) lendingMarkets;\\n        // Mapping from lending market contract address to future value vault contract address per currency\\n        mapping(bytes32 => mapping(address => address)) futureValueVaults;\\n        // Mapping from maturity to lending market contract address per currency\\n        mapping(bytes32 => mapping(uint256 => address)) maturityLendingMarkets;\\n        // Mapping from currency to genesis date in the lending market\\n        mapping(bytes32 => uint256) genesisDates;\\n        // Mapping from user to used currency\\n        mapping(address => EnumerableSet.Bytes32Set) usedCurrencies;\\n        // Mapping from user to used market maturity per currency\\n        mapping(bytes32 => mapping(address => EnumerableSet.UintSet)) usedMaturities;\\n        // Mapping from user to active order existence per currency and maturity\\n        mapping(address => mapping(bytes32 => mapping(uint256 => bool))) activeOrderExistences;\\n        // Mapping from maturity to observation period log per currency\\n        mapping(bytes32 => mapping(uint256 => ObservationPeriodLog)) observationPeriodLogs;\\n        // Mapping from maturity to latest estimated auto roll unit price per currency\\n        mapping(bytes32 => mapping(uint256 => uint256)) estimatedAutoRollUnitPrice;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x325f9521bc7ecfc7358a77461e36daffdf03fef138be54728aac5ec53a1e4981\",\"license\":\"MIT\"},\"contracts/protocol/storages/LendingMarketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {OrderStatisticsTreeLib} from \\\"../libraries/OrderStatisticsTreeLib.sol\\\";\\n\\nstruct MarketOrder {\\n    ProtocolTypes.Side side;\\n    uint256 unitPrice; // in basis points\\n    uint256 maturity;\\n    uint256 timestamp;\\n}\\n\\nlibrary LendingMarketStorage {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarket\\\");\\n\\n    struct Storage {\\n        bytes32 ccy;\\n        uint48 lastOrderId;\\n        uint256 openingDate;\\n        uint256 maturity;\\n        // Mapping from maturity to opening unit price\\n        mapping(uint256 => uint256) openingUnitPrices;\\n        // Mapping from maturity to boolean if the market is ready or not\\n        mapping(uint256 => bool) isReady;\\n        // Mapping from user to active lend order ids\\n        mapping(address => uint48[]) activeLendOrderIds;\\n        // Mapping from user to active borrow order ids\\n        mapping(address => uint48[]) activeBorrowOrderIds;\\n        // Mapping from user to current maturity\\n        mapping(address => uint256) userCurrentMaturities;\\n        // Mapping from orderId to order\\n        mapping(uint256 => MarketOrder) orders;\\n        // Mapping from orderId to boolean for pre-order or not\\n        mapping(uint256 => bool) isPreOrder;\\n        // Mapping from maturity to lending orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) lendOrders;\\n        // Mapping from maturity to borrowing orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) borrowOrders;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf1e8a94bddc8815e546bd6261e9580eea0d14e918d4dac8f3e3abf193bcd929\",\"license\":\"MIT\"},\"contracts/protocol/storages/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.mixinAddressResolver\\\");\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 => address) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x852b885b6264a58930a0945c68842717e19f954eaefc0137235e6f263e17fa9d\",\"license\":\"MIT\"},\"contracts/protocol/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0x7b05f97661e6dfe1142eec9be3dcf86d1eec55ed4fb1dea4a5859f75a0c84c13\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x614ff061003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100be5760003560e01c80639519832b1161007b5780639519832b146102395780639aaf864914610259578063a86c2a3e14610279578063b61ef55a14610299578063b6eb033d146102b9578063bab7ae17146102d957600080fd5b80630312b528146100c35780631696a4cd14610118578063300074c91461013a578063390e5d12146101685780634ad23880146101885780635c347765146101f1575b600080fd5b6100d66100d136600461460b565b6102f9565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c0830152151560e0820152610100015b60405180910390f35b81801561012457600080fd5b5061013861013336600461463e565b610808565b005b81801561014657600080fd5b5061015a610155366004614673565b610a6e565b60405190815260200161010f565b81801561017457600080fd5b506101386101833660046146b9565b610c67565b61019b610196366004614673565b610fe5565b60405161010f9190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b6102046101ff366004614737565b611748565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e00161010f565b81801561024557600080fd5b5061015a610254366004614737565b611867565b81801561026557600080fd5b50610138610274366004614763565b611bd3565b81801561028557600080fd5b5061015a61029436600461479e565b611e02565b6102ac6102a7366004614737565b6126e2565b60405161010f91906147eb565b8180156102c557600080fd5b506101386102d4366004614673565b6127b8565b8180156102e557600080fd5b5061015a6102f4366004614737565b612894565b600080600080600080600080600061030f612a55565b60080160008d6001600160a01b03166001600160a01b0316815260200190815260200160002090506103736040518060c001604052806060815260200160008019168152602001606081526020016060815260200160008152602001600081525090565b61037b612a79565b6001600160a01b0316633f90a08e61039284612a96565b6040518263ffffffff1660e01b81526004016103ae91906147eb565b60006040518083038186803b1580156103c657600080fd5b505afa1580156103da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610402919081019061489a565b8152608081018b905260005b61041783612aa1565b8110156107ea576104288382612aab565b602083015260408051600780825261010082019092529081602001602082028036833750505060408301526020820151610462908f611748565b886040015160008151811061047957610479614939565b60200260200101896040015160018151811061049757610497614939565b602002602001018a604001516002815181106104b5576104b5614939565b602002602001018b604001516003815181106104d3576104d3614939565b602002602001018c604001516004815181106104f1576104f1614939565b602002602001018d6040015160058151811061050f5761050f614939565b602002602001018e6040015160068151811061052d5761052d614939565b6020908102919091018101979097529690965295909452949093529390529290529190528201518d14156105ec57816040015160068151811061057257610572614939565b60200260200101518260800181815161058b9190614965565b9052506040820151805160039081106105a6576105a6614939565b602002602001015182604001516000815181106105c5576105c5614939565b60200260200101516105d79190614965565b8260a0018181516105e89190614965565b9052505b6105f4612ab7565b6001600160a01b031663939fe622836020015184604001516040518363ffffffff1660e01b815260040161062992919061497d565b60006040518083038186803b15801561064157600080fd5b505afa158015610655573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261067d91908101906149be565b606083018190528051600190811061069757610697614939565b60200260200101518a6106aa9190614965565b995081606001516002815181106106c3576106c3614939565b6020026020010151896106d69190614965565b985081606001516004815181106106ef576106ef614939565b6020026020010151876107029190614965565b9650816060015160058151811061071b5761071b614939565b60200260200101518661072e9190614965565b95508160000151818151811061074657610746614939565b6020026020010151156107d857816060015160008151811061076a5761076a614939565b60200260200101518b61077d9190614965565b9a50816060015160038151811061079657610796614939565b6020026020010151886107a99190614965565b975081606001516006815181106107c2576107c2614939565b6020026020010151856107d59190614965565b94505b806107e281614a44565b91505061040e565b508060a0015181608001511015925050509397509397509397509397565b6000610812612a79565b6001600160a01b031663d5e190d06040518163ffffffff1660e01b815260040160006040518083038186803b15801561084a57600080fd5b505afa15801561085e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261088691908101906149be565b90506000815167ffffffffffffffff8111156108a4576108a461482f565b6040519080825280602002602001820160405280156108cd578160200160208202803683370190505b5090506000805b83518110156109715760008482815181106108f1576108f1614939565b60200260200101519050610903612a55565b60030160008281526020019081526020016000205484838151811061092a5761092a614939565b60200260200101818152505083828151811061094857610948614939565b60200260200101518361095b9190614965565b925050808061096990614a44565b9150506108d4565b50600061097e8786612ad7565b905060005b8451811015610a645760008582815181106109a0576109a0614939565b6020026020010151905060006109e4826109df878987815181106109c6576109c6614939565b6020026020010151886109d99190614a5f565b90612bba565b612c2b565b90506109ee612a79565b6001600160a01b0316634ba0c9b58a84846040518463ffffffff1660e01b8152600401610a1d93929190614a7e565b600060405180830381600087803b158015610a3757600080fd5b505af1158015610a4b573d6000803e3d6000fd5b5050505050508080610a5c90614a44565b915050610983565b5050505050505050565b600080610a79612a55565b60008681526005919091016020526040812090610a94612a55565b6000888152600691909101602090815260408083208984528252808320546001600160a01b03908116855291840194909452918301812054925163ae100e6d60e01b815286831660048201526024810188905292909116925090819081908190859063ae100e6d90604401608060405180830381600087803b158015610b1957600080fd5b505af1158015610b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b519190614a9f565b935093509350935083600014610c5a578015610bdf57610b6f612cfc565b60405163312c474560e01b8152600481018b90526001600160a01b03898116602483015260448201859052919091169063312c474590606401600060405180830381600087803b158015610bc257600080fd5b505af1158015610bd6573d6000803e3d6000fd5b50505050610c5a565b610be7612cfc565b6040516360e3f72960e11b8152600481018b90526001600160a01b0389811660248301526044820185905260648201879052919091169063c1c7ee5290608401600060405180830381600087803b158015610c4157600080fd5b505af1158015610c55573d6000803e3d6000fd5b505050505b5090979650505050505050565b6000610c71612a55565b60008a81526005919091016020526040812090610c8c612a55565b60008c8152600691909101602090815260408083208d84528252808320546001600160a01b0390811685529184019490945291909201909120541690506001866001811115610cdd57610cdd614ae0565b1415610de157610ceb612a79565b6001600160a01b0316634ba0c9b5888b876040518463ffffffff1660e01b8152600401610d1a93929190614a7e565b600060405180830381600087803b158015610d3457600080fd5b505af1158015610d48573d6000803e3d6000fd5b50505050806001600160a01b0316635b0b2930888588610d689190614965565b8b866040518563ffffffff1660e01b8152600401610d899493929190614af6565b602060405180830381600087803b158015610da357600080fd5b505af1158015610db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddb9190614b1e565b50610edb565b610de9612a79565b6001600160a01b031663fb7bd3b4888b876040518463ffffffff1660e01b8152600401610e1893929190614a7e565b600060405180830381600087803b158015610e3257600080fd5b505af1158015610e46573d6000803e3d6000fd5b50505050806001600160a01b0316639e8d3d55888588610e669190614b3b565b8b866040518563ffffffff1660e01b8152600401610e879493929190614af6565b602060405180830381600087803b158015610ea157600080fd5b505af1158015610eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed99190614b1e565b505b8215610f93576000610eeb612d1b565b90506001600160a01b038216639e8d3d5582868c60008c6001811115610f1357610f13614ae0565b146040518563ffffffff1660e01b8152600401610f339493929190614af6565b602060405180830381600087803b158015610f4d57600080fd5b505af1158015610f61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f859190614b1e565b50610f918a8a836127b8565b505b8789886001600160a01b03167ff80dd09632f046e05472e1c239271a3b2ad3de73c27a1b03d0bb0329ba6716df89888a604051610fd293929190614b52565b60405180910390a4505050505050505050565b6110256040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805160808101825260008082526020820181905291810191909152606080820152836110a55760018152611059612a55565b600401600086815260200190815260200160002060008154811061107f5761107f614939565b600091825260209182902001546001600160a01b0316908201526001604082015261112f565b600081526110b1612a55565b6000868152600691909101602090815260408083208784528252909120546001600160a01b0316908201526110e4612a55565b600401600086815260200190815260200160002060008154811061110a5761110a614939565b60009182526020918290200154908201516001600160a01b0390811691161460408201525b611137612cfc565b60405163386320d360e11b8152600481018790526001600160a01b03858116602483015291909116906370c641a69060440160206040518083038186803b15801561118157600080fd5b505afa158015611195573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b99190614b88565b60c08301526111c885846126e2565b606082015260005b8160600151518110156115a95760006111e7612a55565b600601600088815260200190815260200160002060008460600151848151811061121357611213614939565b6020026020010151815260200190815260200160002060009054906101000a90046001600160a01b031690506000816001600160a01b031663e16695b56040518163ffffffff1660e01b815260040160206040518083038186803b15801561127a57600080fd5b505afa15801561128e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b29190614b88565b905060006112be612a55565b60040160008a81526020019081526020016000206000815481106112e4576112e4614939565b60009182526020909120015460408601516001600160a01b03858116921691909114915080611328575084602001516001600160a01b0316836001600160a01b0316145b1561159357600061133d8a8988868887612d34565b9050600061134f8b8a89878988612f24565b905060006113618c8b8a888a896130b2565b80518351855192935090916113769190614ba1565b6113809190614be0565b8960c0018181516113919190614be0565b905250604080820151838201519185015190916113ad91614ba1565b6113b79190614be0565b896020018181516113c89190614be0565b905250602080820151838201519185015190916113e491614ba1565b6113ee9190614be0565b89518a906113fd908390614be0565b905250606082015160808a018051611416908390614965565b905250606081015160408a01805161142f908390614965565b905250608082015160a08a018051611448908390614965565b905250608081015160608a018051611461908390614965565b90525060c08901516000131561158f57600061147b612cfc565b6001600160a01b031663aee1311e8e8c60c001518c606001518c815181106114a5576114a5614939565b602002602001015160018e60600151516114bf9190614b3b565b8d146114f25760608e01516114d58e6001614965565b815181106114e5576114e5614939565b60200260200101516114f5565b60005b6040516001600160e01b031960e087901b168152600481019490945260248401929092526044830152606482015260840160206040518083038186803b15801561153e57600080fd5b505afa158015611552573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115769190614b88565b9050808a60c00181815161158a9190614be0565b905250505b5050505b50505080806115a190614a44565b9150506111d0565b50806040015180156115be575060c082015115155b156117405760006115cd612cfc565b60c0840151604051637636e94160e01b8152600481018990526000602482015260448101919091526001600160a01b039190911690637636e9419060640160206040518083038186803b15801561162357600080fd5b505afa158015611637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165b9190614b88565b905061171581611669612a55565b600401600089815260200190815260200160002060008154811061168f5761168f614939565b60009182526020918290200154604080516371613c2d60e01b815290516001600160a01b03909216926371613c2d92600480840193829003018186803b1580156116d857600080fd5b505afa1580156116ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117109190614b88565b613242565b83518490611724908390614be0565b90525060208301805182919061173b908390614be0565b905250505b509392505050565b6000806000806000806000806117608a60008b610fe5565b90508060400151975080606001519450806080015193508060a0015191506000816000015113156118395780516117969061326b565b965060006117a2612ab7565b6001600160a01b0316639abdb38a8c6040518263ffffffff1660e01b81526004016117cf91815260200190565b60206040518083038186803b1580156117e757600080fd5b505afa1580156117fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181f9190614b88565b90506118316127106109d9838b614a5f565b96505061185a565b80516000131561185a5780516118579061185290614c21565b61326b565b92505b5092959891949750929550565b6000808061187585856126e2565b905060005b8151811015611af657600061188d612a55565b600601600088815260200190815260200160002060008484815181106118b5576118b5614939565b6020026020010151815260200190815260200160002060009054906101000a90046001600160a01b031690506000816001600160a01b031663e16695b56040518163ffffffff1660e01b815260040160206040518083038186803b15801561191c57600080fd5b505afa158015611930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119549190614b88565b9050600061196389838a610a6e565b90506000806119738b858c6132c1565b9092509050611982828a614965565b98508015611998576119958b858c610a6e565b92505b82156119a357600197505b821580156119af575081155b15611a2057611a1e8787815181106119c9576119c9614939565b60200260200101516119d9612a55565b60090160008e815260200190815260200160002060008d6001600160a01b03166001600160a01b031681526020019081526020016000206136ab90919063ffffffff16565b505b611a28612cfc565b6001600160a01b031663eeac29d88c8c60018b51611a469190614b3b565b8a14611a75578a611a588b6001614965565b81518110611a6857611a68614939565b6020026020010151611a78565b60005b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526044820152606401600060405180830381600087803b158015611ac657600080fd5b505af1158015611ada573d6000803e3d6000fd5b5050505050505050508080611aee90614a44565b91505061187a565b5082158015611b03575081155b8015611b965750611b12612cfc565b60405163386320d360e11b8152600481018790526001600160a01b03868116602483015291909116906370c641a69060440160206040518083038186803b158015611b5c57600080fd5b505afa158015611b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b949190614b88565b155b15611bcb57611bc985611ba7612a55565b6001600160a01b038716600090815260089190910160205260409020906136ab565b505b505092915050565b611bdb612a79565b6001600160a01b0316635d95df8a826040518263ffffffff1660e01b8152600401611c0891815260200190565b60206040518083038186803b158015611c2057600080fd5b505afa158015611c34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c589190614b1e565b611ca95760405162461bcd60e51b815260206004820152601c60248201527f4e6f74207265676973746572656420617320636f6c6c61746572616c0000000060448201526064015b60405180910390fd5b6000611cb3612a79565b604051630129e6bf60e11b81526001600160a01b038681166004830152602482018590529190911690630253cd7e9060440160206040518083038186803b158015611cfd57600080fd5b505afa158015611d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d359190614b88565b90506000611d47836109df8887612ad7565b905080821015611d915760405162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da0818dbdb1b185d195c985b605a1b6044820152606401611ca0565b611d99612a79565b6001600160a01b031663fb7bd3b48685846040518463ffffffff1660e01b8152600401611dc893929190614a7e565b600060405180830381600087803b158015611de257600080fd5b505af1158015611df6573d6000803e3d6000fd5b50505050505050505050565b6000611e656040518061016001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160001515815260200160008152602001600081525090565b6000611e72858589610fe5565b60200151905060008112611ec85760405162461bcd60e51b815260206004820181905260248201527f4e6f206465627420696e207468652073656c6563746564206d617475726974796044820152606401611ca0565b6000611edd8686611ed885614c21565b6136b7565b509050611ee8612a79565b6001600160a01b0316635257ed678989611f00612ab7565b6001600160a01b031663b99c6ca88b8d611f198961326b565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b158015611f5d57600080fd5b505afa158015611f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f959190614b88565b6040518463ffffffff1660e01b8152600401611fb393929190614a7e565b60806040518083038186803b158015611fcb57600080fd5b505afa158015611fdf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120039190614c3e565b6080870152606086015260408501528084526120615760405162461bcd60e51b815260206004820152601a60248201527f557365722068617320656e6f75676820636f6c6c61746572616c0000000000006044820152606401611ca0565b612069612ab7565b83516040516317338d9560e31b8152600481018a90526024810189905260448101919091526001600160a01b03919091169063b99c6ca89060640160206040518083038186803b1580156120bc57600080fd5b505afa1580156120d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f49190614b88565b602084018190526121059085614965565b935061210f612a55565b600401600087815260200190815260200160002060008154811061213557612135614939565b6000918252602090912001546001600160a01b0316612152612a55565b6000888152600691909101602090815260408083208984529091529020546001600160a01b03161460e0840152612187612d1b565b6001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b1580156121bf57600080fd5b505afa1580156121d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f79190614b1e565b151561010084018190526122cd5761222c612210612d1b565b8988886122228b8b8a602001516138e4565b8860e0015161399d565b60a0840152612239612ab7565b60a08401516040516317338d9560e31b815260048101899052602481018a905260448101919091526001600160a01b03919091169063b99c6ca89060640160206040518083038186803b15801561228f57600080fd5b505afa1580156122a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c79190614b88565b60c08401525b60c0830151606084015184516122e39190614965565b6122ed9190614b3b565b6101208401526122fb612a79565b61012084015160405163500d2f6d60e01b8152600481018a90526001600160a01b038b811660248301528c81166044830152606482019290925291169063500d2f6d90608401600060405180830381600087803b15801561235b57600080fd5b505af115801561236f573d6000803e3d6000fd5b5050505061237b612a79565b6001600160a01b031663500d2f6d888a612393612d1b565b8760c0015188604001516123a79190614965565b6040516001600160e01b031960e087901b16815260048101949094526001600160a01b039283166024850152911660448301526064820152608401600060405180830381600087803b1580156123fc57600080fd5b505af1158015612410573d6000803e3d6000fd5b505050506000836080015111801561242b5750826101000151155b1561257957612438612a79565b6040516354821c2160e01b81526001600160a01b038a8116600483015291909116906354821c219060240160206040518083038186803b15801561247b57600080fd5b505afa15801561248f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b39190614b88565b6125795760006124c1612ab7565b60808501516040516317338d9560e31b8152600481018b9052602481018a905260448101919091526001600160a01b03919091169063b99c6ca89060640160206040518083038186803b15801561251757600080fd5b505afa15801561252b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254f9190614b88565b905061256a61255c612d1b565b8a8989858960e00151613c06565b506125758186614965565b9450505b8260a00151836020015111156125c0578260a00151836020015161259d9190614b3b565b836101400181815250506125be888a88888761014001518860e00151613c06565b505b6001600160a01b0389163b156126d6576101208301516101408401516040516372d5a2ef60e11b81526001600160a01b038c811660048301819052908c166024830152604482018b905260648201939093526084810189905260a4810188905260c48101919091523360e482015263e5ab45de9061010401602060405180830381600087803b15801561265257600080fd5b505af1158015612666573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268a9190614b1e565b6126d65760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206f7065726174696f6e20657865637574696f6e00000000006044820152606401611ca0565b50505095945050505050565b606061271a6126ef612a55565b6000858152600991909101602090815260408083206001600160a01b038716845290915290206140c3565b8051909150156127b257604051634f64581360e11b81527344691dD3dF1E59176B3FeBDe91C27c29dF6b373490639ec8b0269061275b9084906004016147eb565b60006040518083038186803b15801561277357600080fd5b505af4158015612787573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127af91908101906149be565b90505b92915050565b6127f0826127c4612a55565b6000868152600991909101602090815260408083206001600160a01b03871684529091529020906140d7565b61288f5761282c82612800612a55565b6000868152600991909101602090815260408083206001600160a01b03871684529091529020906140ef565b5061285b83612839612a55565b6001600160a01b038416600090815260089190910160205260409020906140d7565b61288f5761288d8361286b612a55565b6001600160a01b038416600090815260089190910160205260409020906140ef565b505b505050565b60006128a08383611867565b506128ad83600084610fe5565b51905060006128e86128bd612a55565b6000868152600991909101602090815260408083206001600160a01b038816845290915290206140c3565b905060005b81518110156129e1576128fe612a55565b60008681526005919091016020526040812090612919612a55565b6006016000888152602001908152602001600020600085858151811061294157612941614939565b60209081029190910181015182528181019290925260409081016000908120546001600160a01b039081168552928401949094529182019092205490516366c9d55160e01b815286831660048201529116906366c9d55190602401600060405180830381600087803b1580156129b657600080fd5b505af11580156129ca573d6000803e3d6000fd5b5050505080806129d990614a44565b9150506128ed565b506129ea612cfc565b60405163b340398d60e01b8152600481018690526001600160a01b038581166024830152919091169063b340398d90604401600060405180830381600087803b158015612a3657600080fd5b505af1158015612a4a573d6000803e3d6000fd5b505050505092915050565b7f8041b8421ebd495cc61f38c788c9eb100daccf9bd36aa0bb920b7a15b2e0496590565b6000612a9169151bdad95b95985d5b1d60b21b6140fb565b905090565b60606127b282614193565b60006127b2825490565b60006127af83836141ef565b6000612a917121bab93932b731bca1b7b73a3937b63632b960711b6140fb565b6000826208aa8960eb1b1415612aee5750806127b2565b6000612af8612ab7565b6001600160a01b031663facae93f856040518263ffffffff1660e01b8152600401612b2591815260200190565b60206040518083038186803b158015612b3d57600080fd5b505afa158015612b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b759190614c74565b9050612bb2612b8582600a614d7b565b612ba8612b90612a55565b6000888152600291909101602052604090205461326b565b6109d99086614a5f565b9150506127b2565b6000808211612bc857600080fd5b6005612bd48385614da0565b612bdf90600a614a5f565b83612beb86600a614a5f565b612bf59190614da0565b612bff9190614b3b565b1015612c1657612c0f8284614da0565b90506127b2565b612c208284614da0565b612c0f906001614965565b6000826208aa8960eb1b1415612c425750806127b2565b6000612c4c612ab7565b6001600160a01b031663facae93f856040518263ffffffff1660e01b8152600401612c7991815260200190565b60206040518083038186803b158015612c9157600080fd5b505afa158015612ca5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc99190614c74565b9050612bb2612cf1612cd9612a55565b6000878152600291909101602052604090205461326b565b612ba883600a614d7b565b6000612a917011d95b995cda5cd5985b1d5955985d5b1d607a1b6140fb565b6000612a916a14995cd95c9d99519d5b9960aa1b6140fb565b612d5860405180606001604052806000815260200160008152602001600081525090565b600080612d63612a55565b60008a8152600591909101602090815260408083206001600160a01b03898116855292529182902054915163070da1af60e11b81528a82166004820152911690630e1b435e90602401604080518083038186803b158015612dc357600080fd5b505afa158015612dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfb9190614db4565b9150915081600014612f1857808614612eb157866040015115612eac57612e20612cfc565b604051630c30971960e11b8152600481018b905260248101839052604481018490526001600160a01b0391909116906318612e32906064015b60206040518083038186803b158015612e7157600080fd5b505afa158015612e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea99190614b88565b83525b612f18565b80861415612f185786518015612ec5575083155b15612ee457612ed58982846136b7565b60408501526020840152612f18565b865180612ef357508660400151155b80612efb5750835b15612f185760408301829052612f12898284614219565b60208401525b50509695505050505050565b612f566040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b604051631c7b209b60e31b81526001600160a01b038781166004830152600091829186169063e3d904d89060240160806040518083038186803b158015612f9c57600080fd5b505afa158015612fb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd49190614c3e565b6080870192909252606086019290925290925090508115612f185780861461305257866040015115612eac57613008612cfc565b6001600160a01b03166318612e328a83613021866142c3565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401612e59565b80861415612f185786518015613066575083155b1561307957612ed58982611ed8856142c3565b86518061308857508660400151155b806130905750835b15612f185761309e826142c3565b60408401819052612f12908a908390614219565b6130e46040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040516339f7dda360e21b81526001600160a01b038781166004830152600091829186169063e7df768c9060240160806040518083038186803b15801561312a57600080fd5b505afa15801561313e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131629190614c3e565b6080870192909252606086019290925290925090508115612f185780861461305257866040015115612eac57613196612cfc565b6001600160a01b03166318612e328a836131af866142c3565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b1580156131f357600080fd5b505afa158015613207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061322b9190614b88565b8351849061323a908390614be0565b905250612f18565b60006127af6132526127106142c3565b61325b846142c3565b6132659086614dd8565b9061432d565b6000808212156132bd5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401611ca0565b5090565b60008060006132ce612a55565b600087815260059190910160205260408120906132e9612a55565b6000898152600691909101602090815260408083208a84528252808320546001600160a01b0390811685529184019490945291909201822054169150808080808080613333612a55565b60008e8152600691909101602090815260408083208f845290915290819020549051633d4eccdf60e01b81526001600160a01b038d8116600483015290911690633d4eccdf9060240160e060405180830381600087803b15801561339657600080fd5b505af11580156133aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ce9190614e5d565b96509650965096509650965096508183111561345b576133ec612a79565b6001600160a01b031663fb7bd3b48c8f6134068688614b3b565b6040518463ffffffff1660e01b815260040161342493929190614a7e565b600060405180830381600087803b15801561343e57600080fd5b505af1158015613452573d6000803e3d6000fd5b505050506134d6565b818310156134d65761346b612a79565b6001600160a01b0316634ba0c9b58c8f6134858787614b3b565b6040518463ffffffff1660e01b81526004016134a393929190614a7e565b600060405180830381600087803b1580156134bd57600080fd5b505af11580156134d1573d6000803e3d6000fd5b505050505b84156135ab57604051639e8d3d5560e01b81526001600160a01b03891690639e8d3d559061350f908e9089908690600090600401614af6565b602060405180830381600087803b15801561352957600080fd5b505af115801561353d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135619190614b1e565b50808d8c6001600160a01b03167fba00994778888e87ce0908fd360c4b0417bfe7e274cce4cb72ed8a60b38b3e386000878a6040516135a293929190614b52565b60405180910390a45b8315613680576040516305b0b29360e41b81526001600160a01b03891690635b0b2930906135e4908e9088908690600090600401614af6565b602060405180830381600087803b1580156135fe57600080fd5b505af1158015613612573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136369190614b1e565b50808d8c6001600160a01b03167fba00994778888e87ce0908fd360c4b0417bfe7e274cce4cb72ed8a60b38b3e386001868960405161367793929190614b52565b60405180910390a45b600061368c8587614965565b1198506136998688614965565b99505050505050505050935093915050565b60006127af83836143b8565b60008060006136c4612a55565b60040160008781526020019081526020016000206000815481106136ea576136ea614939565b6000918252602080832090910154604080516371613c2d60e01b815290516001600160a01b03909216945084926371613c2d92600480840193829003018186803b15801561373757600080fd5b505afa15801561374b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061376f9190614b88565b9050613779612cfc565b60405163474611f160e01b815260048101899052602481018890526001600160a01b03919091169063474611f19060440160a06040518083038186803b1580156137c257600080fd5b505afa1580156137d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137fa9190614eb1565b516138345761380a878787614219565b935061382d613818826142c3565b6138236127106142c3565b6132659087614dd8565b92506138da565b61383c612cfc565b604051631b736f6760e31b8152600481018990526024810188905260006044820152606481018790526001600160a01b03919091169063db9b7b389060840160206040518083038186803b15801561389357600080fd5b505afa1580156138a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138cb9190614b88565b92506138d78382613242565b93505b5050935093915050565b6000806138ef612a55565b6000868152600691909101602090815260408083208784528252918290205482516371613c2d60e01b815292516001600160a01b03909116926371613c2d926004808301939192829003018186803b15801561394a57600080fd5b505afa15801561395e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139829190614b88565b9050613994816109d961271086614a5f565b95945050505050565b60008115613ba65760006139af612cfc565b6001600160a01b03166388c0520e87878b8b6139c9612cfc565b6001600160a01b03166318612e328d8d6139e28e6142c3565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b158015613a2657600080fd5b505afa158015613a3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a5e9190614b88565b6040516001600160e01b031960e088901b168152600481019590955260248501939093526001600160a01b039182166044850152166064830152608482015260a401602060405180830381600087803b158015613aba57600080fd5b505af1158015613ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613af29190614b88565b90506000811315613ba4576000613b948787613b0c612cfc565b604051637636e94160e01b8152600481018c9052602481018b9052604481018790526001600160a01b039190911690637636e9419060640160206040518083038186803b158015613b5c57600080fd5b505afa158015613b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed89190614b88565b509050613ba08161326b565b9250505b505b6000613bc986868a8a613bba8b8b896138e4565b613bc4908a614b3b565b6144ab565b90508015613bfb576000613be18787611ed8856142c3565b509050613bed8161326b565b613bf79084614965565b9250505b509695505050505050565b818115613f24576000613c17612cfc565b60405163386320d360e11b8152600481018890526001600160a01b038a8116602483015291909116906370c641a69060440160206040518083038186803b158015613c6157600080fd5b505afa158015613c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c999190614b88565b90506000811215613f22576000613cae612cfc565b6001600160a01b03166349a1d218886040518263ffffffff1660e01b8152600401613cdb91815260200190565b60206040518083038186803b158015613cf357600080fd5b505afa158015613d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d2b9190614b88565b90506000613d37612cfc565b6001600160a01b03166318612e32896000613d5b613d568d888b6138e4565b6142c3565b613d6490614c21565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b158015613da857600080fd5b505afa158015613dbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613de09190614b88565b905080831315613ded5750815b613df5612cfc565b604051633916cf2b60e21b8152600481018a90526001600160a01b038c811660248301528b8116604483015260648201849052919091169063e45b3cac90608401600060405180830381600087803b158015613e5057600080fd5b505af1158015613e64573d6000803e3d6000fd5b50505050613f136118528984613e78612cfc565b6001600160a01b0316637636e9418d6000613e9289614c21565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b158015613ed657600080fd5b505afa158015613eea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f0e9190614b88565b614219565b613f1d9085614b3b565b935050505b505b6000613f2e612a55565b60008781526005919091016020526040812090613f49612a55565b6000898152600691909101602090815260408083208a84528252808320546001600160a01b03908116855291840194909452918301812054925163070da1af60e11b81528b83166004820152929091169250908290630e1b435e90602401604080518083038186803b158015613fbe57600080fd5b505afa158015613fd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ff69190614db4565b5090506000811215612f18576000614012613d568989876138e4565b61401b90614c21565b9050808213156140285750805b604051630c02764960e31b81526001600160a01b038b811660048301528a811660248301526044820183905260648201899052841690636013b24890608401600060405180830381600087803b15801561408157600080fd5b505af1158015614095573d6000803e3d6000fd5b505050506140ab611852898984613f0e90614c21565b6140b59085614b3b565b9a9950505050505050505050565b606060006140d083614193565b9392505050565b600081815260018301602052604081205415156127af565b60006127af83836145a0565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b0316908161418c5760405162461bcd60e51b8152600401611ca09190614f21565b5092915050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156141e357602002820191906000526020600020905b8154815260200190600101908083116141cf575b50505050509050919050565b600082600001828154811061420657614206614939565b9060005260206000200154905092915050565b600080614224612a55565b6000868152600691909101602090815260408083208784528252918290205482516371613c2d60e01b815292516001600160a01b03909116926371613c2d926004808301939192829003018186803b15801561427f57600080fd5b505afa158015614293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142b79190614b88565b90506139948382613242565b60006001600160ff1b038211156132bd5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401611ca0565b60008161433957600080fd5b60006143458385614f76565b61435090600a614dd8565b8361435c86600a614dd8565b6143669190614f76565b6143709190614ba1565b90506005811261438f576143848385614f76565b612bb2906001614be0565b60041981136143ae5760016143a48486614f76565b612bb29190614ba1565b612bb28385614f76565b600081815260018301602052604081205480156144a15760006143dc600183614b3b565b85549091506000906143f090600190614b3b565b905081811461445557600086600001828154811061441057614410614939565b906000526020600020015490508087600001848154811061443357614433614939565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061446657614466614fa4565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506127b2565b60009150506127b2565b6000806144b6612a55565b6000888152600691909101602090815260408083208984529091528120546001600160a01b031691506144e7612a55565b6000898152600591909101602090815260408083206001600160a01b038681168552925291829020549151632900b99560e01b81528882166004820152878216602482015260448101879052911691508190632900b99590606401602060405180830381600087803b15801561455c57600080fd5b505af1158015614570573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145949190614b88565b98975050505050505050565b60008181526001830160205260408120546145e7575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556127b2565b5060006127b2565b80356001600160a01b038116811461460657600080fd5b919050565b60008060006060848603121561462057600080fd5b614629846145ef565b95602085013595506040909401359392505050565b60008060006060848603121561465357600080fd5b83359250614663602085016145ef565b9150604084013590509250925092565b60008060006060848603121561468857600080fd5b833592506020840135915061469f604085016145ef565b90509250925092565b80151581146146b657600080fd5b50565b600080600080600080600080610100898b0312156146d657600080fd5b88359750602089013596506146ed60408a016145ef565b955060608901356002811061470157600080fd5b94506080890135935060a0890135925060c0890135915060e0890135614726816146a8565b809150509295985092959890939650565b6000806040838503121561474a57600080fd5b8235915061475a602084016145ef565b90509250929050565b6000806000806080858703121561477957600080fd5b84359350614789602086016145ef565b93969395505050506040820135916060013590565b600080600080600060a086880312156147b657600080fd5b6147bf866145ef565b94506147cd602087016145ef565b94979496505050506040830135926060810135926080909101359150565b6020808252825182820181905260009190848201906040850190845b8181101561482357835183529284019291840191600101614807565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561486e5761486e61482f565b604052919050565b600067ffffffffffffffff8211156148905761489061482f565b5060051b60200190565b600060208083850312156148ad57600080fd5b825167ffffffffffffffff8111156148c457600080fd5b8301601f810185136148d557600080fd5b80516148e86148e382614876565b614845565b81815260059190911b8201830190838101908783111561490757600080fd5b928401925b8284101561492e57835161491f816146a8565b8252928401929084019061490c565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156149785761497861494f565b500190565b6000604082018483526020604081850152818551808452606086019150828701935060005b81811015610c5a578451835293830193918301916001016149a2565b600060208083850312156149d157600080fd5b825167ffffffffffffffff8111156149e857600080fd5b8301601f810185136149f957600080fd5b8051614a076148e382614876565b81815260059190911b82018301908381019087831115614a2657600080fd5b928401925b8284101561492e57835182529284019290840190614a2b565b6000600019821415614a5857614a5861494f565b5060010190565b6000816000190483118215151615614a7957614a7961494f565b500290565b6001600160a01b039390931683526020830191909152604082015260600190565b60008060008060808587031215614ab557600080fd5b8451935060208501519250604085015191506060850151614ad5816146a8565b939692955090935050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b03949094168452602084019290925260408301521515606082015260800190565b600060208284031215614b3057600080fd5b81516140d0816146a8565b600082821015614b4d57614b4d61494f565b500390565b6060810160028510614b7457634e487b7160e01b600052602160045260246000fd5b938152602081019290925260409091015290565b600060208284031215614b9a57600080fd5b5051919050565b60008083128015600160ff1b850184121615614bbf57614bbf61494f565b6001600160ff1b0384018313811615614bda57614bda61494f565b50500390565b600080821280156001600160ff1b0384900385131615614c0257614c0261494f565b600160ff1b8390038412811615614c1b57614c1b61494f565b50500190565b6000600160ff1b821415614c3757614c3761494f565b5060000390565b60008060008060808587031215614c5457600080fd5b505082516020840151604085015160609095015191969095509092509050565b600060208284031215614c8657600080fd5b815160ff811681146140d057600080fd5b600181815b80851115614cd2578160001904821115614cb857614cb861494f565b80851615614cc557918102915b93841c9390800290614c9c565b509250929050565b600082614ce9575060016127b2565b81614cf6575060006127b2565b8160018114614d0c5760028114614d1657614d32565b60019150506127b2565b60ff841115614d2757614d2761494f565b50506001821b6127b2565b5060208310610133831016604e8410600b8410161715614d55575081810a6127b2565b614d5f8383614c97565b8060001904821115614d7357614d7361494f565b029392505050565b60006127af60ff841683614cda565b634e487b7160e01b600052601260045260246000fd5b600082614daf57614daf614d8a565b500490565b60008060408385031215614dc757600080fd5b505080516020909101519092909150565b60006001600160ff1b0381841382841380821686840486111615614dfe57614dfe61494f565b600160ff1b6000871282811687830589121615614e1d57614e1d61494f565b60008712925087820587128484161615614e3957614e3961494f565b87850587128184161615614e4f57614e4f61494f565b505050929093029392505050565b600080600080600080600060e0888a031215614e7857600080fd5b5050855160208701516040880151606089015160808a015160a08b015160c0909b0151949c939b50919990985090965094509092509050565b600060a08284031215614ec357600080fd5b60405160a0810181811067ffffffffffffffff82111715614ee657614ee661482f565b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b600060208083528351808285015260005b81811015614f4e57858101830151858201604001528201614f32565b81811115614f60576000604083870101525b50601f01601f1916929092016040019392505050565b600082614f8557614f85614d8a565b600160ff1b821460001984141615614f9f57614f9f61494f565b500590565b634e487b7160e01b600052603160045260246000fdfea26469706673582212200b501565de3ba7e93d8c562993da354e9066b99960ac86e846ea5e464368288064736f6c63430008090033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100be5760003560e01c80639519832b1161007b5780639519832b146102395780639aaf864914610259578063a86c2a3e14610279578063b61ef55a14610299578063b6eb033d146102b9578063bab7ae17146102d957600080fd5b80630312b528146100c35780631696a4cd14610118578063300074c91461013a578063390e5d12146101685780634ad23880146101885780635c347765146101f1575b600080fd5b6100d66100d136600461460b565b6102f9565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c0830152151560e0820152610100015b60405180910390f35b81801561012457600080fd5b5061013861013336600461463e565b610808565b005b81801561014657600080fd5b5061015a610155366004614673565b610a6e565b60405190815260200161010f565b81801561017457600080fd5b506101386101833660046146b9565b610c67565b61019b610196366004614673565b610fe5565b60405161010f9190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b6102046101ff366004614737565b611748565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e00161010f565b81801561024557600080fd5b5061015a610254366004614737565b611867565b81801561026557600080fd5b50610138610274366004614763565b611bd3565b81801561028557600080fd5b5061015a61029436600461479e565b611e02565b6102ac6102a7366004614737565b6126e2565b60405161010f91906147eb565b8180156102c557600080fd5b506101386102d4366004614673565b6127b8565b8180156102e557600080fd5b5061015a6102f4366004614737565b612894565b600080600080600080600080600061030f612a55565b60080160008d6001600160a01b03166001600160a01b0316815260200190815260200160002090506103736040518060c001604052806060815260200160008019168152602001606081526020016060815260200160008152602001600081525090565b61037b612a79565b6001600160a01b0316633f90a08e61039284612a96565b6040518263ffffffff1660e01b81526004016103ae91906147eb565b60006040518083038186803b1580156103c657600080fd5b505afa1580156103da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610402919081019061489a565b8152608081018b905260005b61041783612aa1565b8110156107ea576104288382612aab565b602083015260408051600780825261010082019092529081602001602082028036833750505060408301526020820151610462908f611748565b886040015160008151811061047957610479614939565b60200260200101896040015160018151811061049757610497614939565b602002602001018a604001516002815181106104b5576104b5614939565b602002602001018b604001516003815181106104d3576104d3614939565b602002602001018c604001516004815181106104f1576104f1614939565b602002602001018d6040015160058151811061050f5761050f614939565b602002602001018e6040015160068151811061052d5761052d614939565b6020908102919091018101979097529690965295909452949093529390529290529190528201518d14156105ec57816040015160068151811061057257610572614939565b60200260200101518260800181815161058b9190614965565b9052506040820151805160039081106105a6576105a6614939565b602002602001015182604001516000815181106105c5576105c5614939565b60200260200101516105d79190614965565b8260a0018181516105e89190614965565b9052505b6105f4612ab7565b6001600160a01b031663939fe622836020015184604001516040518363ffffffff1660e01b815260040161062992919061497d565b60006040518083038186803b15801561064157600080fd5b505afa158015610655573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261067d91908101906149be565b606083018190528051600190811061069757610697614939565b60200260200101518a6106aa9190614965565b995081606001516002815181106106c3576106c3614939565b6020026020010151896106d69190614965565b985081606001516004815181106106ef576106ef614939565b6020026020010151876107029190614965565b9650816060015160058151811061071b5761071b614939565b60200260200101518661072e9190614965565b95508160000151818151811061074657610746614939565b6020026020010151156107d857816060015160008151811061076a5761076a614939565b60200260200101518b61077d9190614965565b9a50816060015160038151811061079657610796614939565b6020026020010151886107a99190614965565b975081606001516006815181106107c2576107c2614939565b6020026020010151856107d59190614965565b94505b806107e281614a44565b91505061040e565b508060a0015181608001511015925050509397509397509397509397565b6000610812612a79565b6001600160a01b031663d5e190d06040518163ffffffff1660e01b815260040160006040518083038186803b15801561084a57600080fd5b505afa15801561085e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261088691908101906149be565b90506000815167ffffffffffffffff8111156108a4576108a461482f565b6040519080825280602002602001820160405280156108cd578160200160208202803683370190505b5090506000805b83518110156109715760008482815181106108f1576108f1614939565b60200260200101519050610903612a55565b60030160008281526020019081526020016000205484838151811061092a5761092a614939565b60200260200101818152505083828151811061094857610948614939565b60200260200101518361095b9190614965565b925050808061096990614a44565b9150506108d4565b50600061097e8786612ad7565b905060005b8451811015610a645760008582815181106109a0576109a0614939565b6020026020010151905060006109e4826109df878987815181106109c6576109c6614939565b6020026020010151886109d99190614a5f565b90612bba565b612c2b565b90506109ee612a79565b6001600160a01b0316634ba0c9b58a84846040518463ffffffff1660e01b8152600401610a1d93929190614a7e565b600060405180830381600087803b158015610a3757600080fd5b505af1158015610a4b573d6000803e3d6000fd5b5050505050508080610a5c90614a44565b915050610983565b5050505050505050565b600080610a79612a55565b60008681526005919091016020526040812090610a94612a55565b6000888152600691909101602090815260408083208984528252808320546001600160a01b03908116855291840194909452918301812054925163ae100e6d60e01b815286831660048201526024810188905292909116925090819081908190859063ae100e6d90604401608060405180830381600087803b158015610b1957600080fd5b505af1158015610b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b519190614a9f565b935093509350935083600014610c5a578015610bdf57610b6f612cfc565b60405163312c474560e01b8152600481018b90526001600160a01b03898116602483015260448201859052919091169063312c474590606401600060405180830381600087803b158015610bc257600080fd5b505af1158015610bd6573d6000803e3d6000fd5b50505050610c5a565b610be7612cfc565b6040516360e3f72960e11b8152600481018b90526001600160a01b0389811660248301526044820185905260648201879052919091169063c1c7ee5290608401600060405180830381600087803b158015610c4157600080fd5b505af1158015610c55573d6000803e3d6000fd5b505050505b5090979650505050505050565b6000610c71612a55565b60008a81526005919091016020526040812090610c8c612a55565b60008c8152600691909101602090815260408083208d84528252808320546001600160a01b0390811685529184019490945291909201909120541690506001866001811115610cdd57610cdd614ae0565b1415610de157610ceb612a79565b6001600160a01b0316634ba0c9b5888b876040518463ffffffff1660e01b8152600401610d1a93929190614a7e565b600060405180830381600087803b158015610d3457600080fd5b505af1158015610d48573d6000803e3d6000fd5b50505050806001600160a01b0316635b0b2930888588610d689190614965565b8b866040518563ffffffff1660e01b8152600401610d899493929190614af6565b602060405180830381600087803b158015610da357600080fd5b505af1158015610db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddb9190614b1e565b50610edb565b610de9612a79565b6001600160a01b031663fb7bd3b4888b876040518463ffffffff1660e01b8152600401610e1893929190614a7e565b600060405180830381600087803b158015610e3257600080fd5b505af1158015610e46573d6000803e3d6000fd5b50505050806001600160a01b0316639e8d3d55888588610e669190614b3b565b8b866040518563ffffffff1660e01b8152600401610e879493929190614af6565b602060405180830381600087803b158015610ea157600080fd5b505af1158015610eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed99190614b1e565b505b8215610f93576000610eeb612d1b565b90506001600160a01b038216639e8d3d5582868c60008c6001811115610f1357610f13614ae0565b146040518563ffffffff1660e01b8152600401610f339493929190614af6565b602060405180830381600087803b158015610f4d57600080fd5b505af1158015610f61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f859190614b1e565b50610f918a8a836127b8565b505b8789886001600160a01b03167ff80dd09632f046e05472e1c239271a3b2ad3de73c27a1b03d0bb0329ba6716df89888a604051610fd293929190614b52565b60405180910390a4505050505050505050565b6110256040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805160808101825260008082526020820181905291810191909152606080820152836110a55760018152611059612a55565b600401600086815260200190815260200160002060008154811061107f5761107f614939565b600091825260209182902001546001600160a01b0316908201526001604082015261112f565b600081526110b1612a55565b6000868152600691909101602090815260408083208784528252909120546001600160a01b0316908201526110e4612a55565b600401600086815260200190815260200160002060008154811061110a5761110a614939565b60009182526020918290200154908201516001600160a01b0390811691161460408201525b611137612cfc565b60405163386320d360e11b8152600481018790526001600160a01b03858116602483015291909116906370c641a69060440160206040518083038186803b15801561118157600080fd5b505afa158015611195573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b99190614b88565b60c08301526111c885846126e2565b606082015260005b8160600151518110156115a95760006111e7612a55565b600601600088815260200190815260200160002060008460600151848151811061121357611213614939565b6020026020010151815260200190815260200160002060009054906101000a90046001600160a01b031690506000816001600160a01b031663e16695b56040518163ffffffff1660e01b815260040160206040518083038186803b15801561127a57600080fd5b505afa15801561128e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b29190614b88565b905060006112be612a55565b60040160008a81526020019081526020016000206000815481106112e4576112e4614939565b60009182526020909120015460408601516001600160a01b03858116921691909114915080611328575084602001516001600160a01b0316836001600160a01b0316145b1561159357600061133d8a8988868887612d34565b9050600061134f8b8a89878988612f24565b905060006113618c8b8a888a896130b2565b80518351855192935090916113769190614ba1565b6113809190614be0565b8960c0018181516113919190614be0565b905250604080820151838201519185015190916113ad91614ba1565b6113b79190614be0565b896020018181516113c89190614be0565b905250602080820151838201519185015190916113e491614ba1565b6113ee9190614be0565b89518a906113fd908390614be0565b905250606082015160808a018051611416908390614965565b905250606081015160408a01805161142f908390614965565b905250608082015160a08a018051611448908390614965565b905250608081015160608a018051611461908390614965565b90525060c08901516000131561158f57600061147b612cfc565b6001600160a01b031663aee1311e8e8c60c001518c606001518c815181106114a5576114a5614939565b602002602001015160018e60600151516114bf9190614b3b565b8d146114f25760608e01516114d58e6001614965565b815181106114e5576114e5614939565b60200260200101516114f5565b60005b6040516001600160e01b031960e087901b168152600481019490945260248401929092526044830152606482015260840160206040518083038186803b15801561153e57600080fd5b505afa158015611552573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115769190614b88565b9050808a60c00181815161158a9190614be0565b905250505b5050505b50505080806115a190614a44565b9150506111d0565b50806040015180156115be575060c082015115155b156117405760006115cd612cfc565b60c0840151604051637636e94160e01b8152600481018990526000602482015260448101919091526001600160a01b039190911690637636e9419060640160206040518083038186803b15801561162357600080fd5b505afa158015611637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165b9190614b88565b905061171581611669612a55565b600401600089815260200190815260200160002060008154811061168f5761168f614939565b60009182526020918290200154604080516371613c2d60e01b815290516001600160a01b03909216926371613c2d92600480840193829003018186803b1580156116d857600080fd5b505afa1580156116ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117109190614b88565b613242565b83518490611724908390614be0565b90525060208301805182919061173b908390614be0565b905250505b509392505050565b6000806000806000806000806117608a60008b610fe5565b90508060400151975080606001519450806080015193508060a0015191506000816000015113156118395780516117969061326b565b965060006117a2612ab7565b6001600160a01b0316639abdb38a8c6040518263ffffffff1660e01b81526004016117cf91815260200190565b60206040518083038186803b1580156117e757600080fd5b505afa1580156117fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181f9190614b88565b90506118316127106109d9838b614a5f565b96505061185a565b80516000131561185a5780516118579061185290614c21565b61326b565b92505b5092959891949750929550565b6000808061187585856126e2565b905060005b8151811015611af657600061188d612a55565b600601600088815260200190815260200160002060008484815181106118b5576118b5614939565b6020026020010151815260200190815260200160002060009054906101000a90046001600160a01b031690506000816001600160a01b031663e16695b56040518163ffffffff1660e01b815260040160206040518083038186803b15801561191c57600080fd5b505afa158015611930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119549190614b88565b9050600061196389838a610a6e565b90506000806119738b858c6132c1565b9092509050611982828a614965565b98508015611998576119958b858c610a6e565b92505b82156119a357600197505b821580156119af575081155b15611a2057611a1e8787815181106119c9576119c9614939565b60200260200101516119d9612a55565b60090160008e815260200190815260200160002060008d6001600160a01b03166001600160a01b031681526020019081526020016000206136ab90919063ffffffff16565b505b611a28612cfc565b6001600160a01b031663eeac29d88c8c60018b51611a469190614b3b565b8a14611a75578a611a588b6001614965565b81518110611a6857611a68614939565b6020026020010151611a78565b60005b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526044820152606401600060405180830381600087803b158015611ac657600080fd5b505af1158015611ada573d6000803e3d6000fd5b5050505050505050508080611aee90614a44565b91505061187a565b5082158015611b03575081155b8015611b965750611b12612cfc565b60405163386320d360e11b8152600481018790526001600160a01b03868116602483015291909116906370c641a69060440160206040518083038186803b158015611b5c57600080fd5b505afa158015611b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b949190614b88565b155b15611bcb57611bc985611ba7612a55565b6001600160a01b038716600090815260089190910160205260409020906136ab565b505b505092915050565b611bdb612a79565b6001600160a01b0316635d95df8a826040518263ffffffff1660e01b8152600401611c0891815260200190565b60206040518083038186803b158015611c2057600080fd5b505afa158015611c34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c589190614b1e565b611ca95760405162461bcd60e51b815260206004820152601c60248201527f4e6f74207265676973746572656420617320636f6c6c61746572616c0000000060448201526064015b60405180910390fd5b6000611cb3612a79565b604051630129e6bf60e11b81526001600160a01b038681166004830152602482018590529190911690630253cd7e9060440160206040518083038186803b158015611cfd57600080fd5b505afa158015611d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d359190614b88565b90506000611d47836109df8887612ad7565b905080821015611d915760405162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da0818dbdb1b185d195c985b605a1b6044820152606401611ca0565b611d99612a79565b6001600160a01b031663fb7bd3b48685846040518463ffffffff1660e01b8152600401611dc893929190614a7e565b600060405180830381600087803b158015611de257600080fd5b505af1158015611df6573d6000803e3d6000fd5b50505050505050505050565b6000611e656040518061016001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160001515815260200160008152602001600081525090565b6000611e72858589610fe5565b60200151905060008112611ec85760405162461bcd60e51b815260206004820181905260248201527f4e6f206465627420696e207468652073656c6563746564206d617475726974796044820152606401611ca0565b6000611edd8686611ed885614c21565b6136b7565b509050611ee8612a79565b6001600160a01b0316635257ed678989611f00612ab7565b6001600160a01b031663b99c6ca88b8d611f198961326b565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b158015611f5d57600080fd5b505afa158015611f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f959190614b88565b6040518463ffffffff1660e01b8152600401611fb393929190614a7e565b60806040518083038186803b158015611fcb57600080fd5b505afa158015611fdf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120039190614c3e565b6080870152606086015260408501528084526120615760405162461bcd60e51b815260206004820152601a60248201527f557365722068617320656e6f75676820636f6c6c61746572616c0000000000006044820152606401611ca0565b612069612ab7565b83516040516317338d9560e31b8152600481018a90526024810189905260448101919091526001600160a01b03919091169063b99c6ca89060640160206040518083038186803b1580156120bc57600080fd5b505afa1580156120d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f49190614b88565b602084018190526121059085614965565b935061210f612a55565b600401600087815260200190815260200160002060008154811061213557612135614939565b6000918252602090912001546001600160a01b0316612152612a55565b6000888152600691909101602090815260408083208984529091529020546001600160a01b03161460e0840152612187612d1b565b6001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b1580156121bf57600080fd5b505afa1580156121d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f79190614b1e565b151561010084018190526122cd5761222c612210612d1b565b8988886122228b8b8a602001516138e4565b8860e0015161399d565b60a0840152612239612ab7565b60a08401516040516317338d9560e31b815260048101899052602481018a905260448101919091526001600160a01b03919091169063b99c6ca89060640160206040518083038186803b15801561228f57600080fd5b505afa1580156122a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c79190614b88565b60c08401525b60c0830151606084015184516122e39190614965565b6122ed9190614b3b565b6101208401526122fb612a79565b61012084015160405163500d2f6d60e01b8152600481018a90526001600160a01b038b811660248301528c81166044830152606482019290925291169063500d2f6d90608401600060405180830381600087803b15801561235b57600080fd5b505af115801561236f573d6000803e3d6000fd5b5050505061237b612a79565b6001600160a01b031663500d2f6d888a612393612d1b565b8760c0015188604001516123a79190614965565b6040516001600160e01b031960e087901b16815260048101949094526001600160a01b039283166024850152911660448301526064820152608401600060405180830381600087803b1580156123fc57600080fd5b505af1158015612410573d6000803e3d6000fd5b505050506000836080015111801561242b5750826101000151155b1561257957612438612a79565b6040516354821c2160e01b81526001600160a01b038a8116600483015291909116906354821c219060240160206040518083038186803b15801561247b57600080fd5b505afa15801561248f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b39190614b88565b6125795760006124c1612ab7565b60808501516040516317338d9560e31b8152600481018b9052602481018a905260448101919091526001600160a01b03919091169063b99c6ca89060640160206040518083038186803b15801561251757600080fd5b505afa15801561252b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254f9190614b88565b905061256a61255c612d1b565b8a8989858960e00151613c06565b506125758186614965565b9450505b8260a00151836020015111156125c0578260a00151836020015161259d9190614b3b565b836101400181815250506125be888a88888761014001518860e00151613c06565b505b6001600160a01b0389163b156126d6576101208301516101408401516040516372d5a2ef60e11b81526001600160a01b038c811660048301819052908c166024830152604482018b905260648201939093526084810189905260a4810188905260c48101919091523360e482015263e5ab45de9061010401602060405180830381600087803b15801561265257600080fd5b505af1158015612666573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268a9190614b1e565b6126d65760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206f7065726174696f6e20657865637574696f6e00000000006044820152606401611ca0565b50505095945050505050565b606061271a6126ef612a55565b6000858152600991909101602090815260408083206001600160a01b038716845290915290206140c3565b8051909150156127b257604051634f64581360e11b815273__$cd9358e65801d13c280787f44717df25ed$__90639ec8b0269061275b9084906004016147eb565b60006040518083038186803b15801561277357600080fd5b505af4158015612787573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127af91908101906149be565b90505b92915050565b6127f0826127c4612a55565b6000868152600991909101602090815260408083206001600160a01b03871684529091529020906140d7565b61288f5761282c82612800612a55565b6000868152600991909101602090815260408083206001600160a01b03871684529091529020906140ef565b5061285b83612839612a55565b6001600160a01b038416600090815260089190910160205260409020906140d7565b61288f5761288d8361286b612a55565b6001600160a01b038416600090815260089190910160205260409020906140ef565b505b505050565b60006128a08383611867565b506128ad83600084610fe5565b51905060006128e86128bd612a55565b6000868152600991909101602090815260408083206001600160a01b038816845290915290206140c3565b905060005b81518110156129e1576128fe612a55565b60008681526005919091016020526040812090612919612a55565b6006016000888152602001908152602001600020600085858151811061294157612941614939565b60209081029190910181015182528181019290925260409081016000908120546001600160a01b039081168552928401949094529182019092205490516366c9d55160e01b815286831660048201529116906366c9d55190602401600060405180830381600087803b1580156129b657600080fd5b505af11580156129ca573d6000803e3d6000fd5b5050505080806129d990614a44565b9150506128ed565b506129ea612cfc565b60405163b340398d60e01b8152600481018690526001600160a01b038581166024830152919091169063b340398d90604401600060405180830381600087803b158015612a3657600080fd5b505af1158015612a4a573d6000803e3d6000fd5b505050505092915050565b7f8041b8421ebd495cc61f38c788c9eb100daccf9bd36aa0bb920b7a15b2e0496590565b6000612a9169151bdad95b95985d5b1d60b21b6140fb565b905090565b60606127b282614193565b60006127b2825490565b60006127af83836141ef565b6000612a917121bab93932b731bca1b7b73a3937b63632b960711b6140fb565b6000826208aa8960eb1b1415612aee5750806127b2565b6000612af8612ab7565b6001600160a01b031663facae93f856040518263ffffffff1660e01b8152600401612b2591815260200190565b60206040518083038186803b158015612b3d57600080fd5b505afa158015612b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b759190614c74565b9050612bb2612b8582600a614d7b565b612ba8612b90612a55565b6000888152600291909101602052604090205461326b565b6109d99086614a5f565b9150506127b2565b6000808211612bc857600080fd5b6005612bd48385614da0565b612bdf90600a614a5f565b83612beb86600a614a5f565b612bf59190614da0565b612bff9190614b3b565b1015612c1657612c0f8284614da0565b90506127b2565b612c208284614da0565b612c0f906001614965565b6000826208aa8960eb1b1415612c425750806127b2565b6000612c4c612ab7565b6001600160a01b031663facae93f856040518263ffffffff1660e01b8152600401612c7991815260200190565b60206040518083038186803b158015612c9157600080fd5b505afa158015612ca5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc99190614c74565b9050612bb2612cf1612cd9612a55565b6000878152600291909101602052604090205461326b565b612ba883600a614d7b565b6000612a917011d95b995cda5cd5985b1d5955985d5b1d607a1b6140fb565b6000612a916a14995cd95c9d99519d5b9960aa1b6140fb565b612d5860405180606001604052806000815260200160008152602001600081525090565b600080612d63612a55565b60008a8152600591909101602090815260408083206001600160a01b03898116855292529182902054915163070da1af60e11b81528a82166004820152911690630e1b435e90602401604080518083038186803b158015612dc357600080fd5b505afa158015612dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfb9190614db4565b9150915081600014612f1857808614612eb157866040015115612eac57612e20612cfc565b604051630c30971960e11b8152600481018b905260248101839052604481018490526001600160a01b0391909116906318612e32906064015b60206040518083038186803b158015612e7157600080fd5b505afa158015612e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea99190614b88565b83525b612f18565b80861415612f185786518015612ec5575083155b15612ee457612ed58982846136b7565b60408501526020840152612f18565b865180612ef357508660400151155b80612efb5750835b15612f185760408301829052612f12898284614219565b60208401525b50509695505050505050565b612f566040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b604051631c7b209b60e31b81526001600160a01b038781166004830152600091829186169063e3d904d89060240160806040518083038186803b158015612f9c57600080fd5b505afa158015612fb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd49190614c3e565b6080870192909252606086019290925290925090508115612f185780861461305257866040015115612eac57613008612cfc565b6001600160a01b03166318612e328a83613021866142c3565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401612e59565b80861415612f185786518015613066575083155b1561307957612ed58982611ed8856142c3565b86518061308857508660400151155b806130905750835b15612f185761309e826142c3565b60408401819052612f12908a908390614219565b6130e46040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040516339f7dda360e21b81526001600160a01b038781166004830152600091829186169063e7df768c9060240160806040518083038186803b15801561312a57600080fd5b505afa15801561313e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131629190614c3e565b6080870192909252606086019290925290925090508115612f185780861461305257866040015115612eac57613196612cfc565b6001600160a01b03166318612e328a836131af866142c3565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b1580156131f357600080fd5b505afa158015613207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061322b9190614b88565b8351849061323a908390614be0565b905250612f18565b60006127af6132526127106142c3565b61325b846142c3565b6132659086614dd8565b9061432d565b6000808212156132bd5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401611ca0565b5090565b60008060006132ce612a55565b600087815260059190910160205260408120906132e9612a55565b6000898152600691909101602090815260408083208a84528252808320546001600160a01b0390811685529184019490945291909201822054169150808080808080613333612a55565b60008e8152600691909101602090815260408083208f845290915290819020549051633d4eccdf60e01b81526001600160a01b038d8116600483015290911690633d4eccdf9060240160e060405180830381600087803b15801561339657600080fd5b505af11580156133aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ce9190614e5d565b96509650965096509650965096508183111561345b576133ec612a79565b6001600160a01b031663fb7bd3b48c8f6134068688614b3b565b6040518463ffffffff1660e01b815260040161342493929190614a7e565b600060405180830381600087803b15801561343e57600080fd5b505af1158015613452573d6000803e3d6000fd5b505050506134d6565b818310156134d65761346b612a79565b6001600160a01b0316634ba0c9b58c8f6134858787614b3b565b6040518463ffffffff1660e01b81526004016134a393929190614a7e565b600060405180830381600087803b1580156134bd57600080fd5b505af11580156134d1573d6000803e3d6000fd5b505050505b84156135ab57604051639e8d3d5560e01b81526001600160a01b03891690639e8d3d559061350f908e9089908690600090600401614af6565b602060405180830381600087803b15801561352957600080fd5b505af115801561353d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135619190614b1e565b50808d8c6001600160a01b03167fba00994778888e87ce0908fd360c4b0417bfe7e274cce4cb72ed8a60b38b3e386000878a6040516135a293929190614b52565b60405180910390a45b8315613680576040516305b0b29360e41b81526001600160a01b03891690635b0b2930906135e4908e9088908690600090600401614af6565b602060405180830381600087803b1580156135fe57600080fd5b505af1158015613612573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136369190614b1e565b50808d8c6001600160a01b03167fba00994778888e87ce0908fd360c4b0417bfe7e274cce4cb72ed8a60b38b3e386001868960405161367793929190614b52565b60405180910390a45b600061368c8587614965565b1198506136998688614965565b99505050505050505050935093915050565b60006127af83836143b8565b60008060006136c4612a55565b60040160008781526020019081526020016000206000815481106136ea576136ea614939565b6000918252602080832090910154604080516371613c2d60e01b815290516001600160a01b03909216945084926371613c2d92600480840193829003018186803b15801561373757600080fd5b505afa15801561374b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061376f9190614b88565b9050613779612cfc565b60405163474611f160e01b815260048101899052602481018890526001600160a01b03919091169063474611f19060440160a06040518083038186803b1580156137c257600080fd5b505afa1580156137d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137fa9190614eb1565b516138345761380a878787614219565b935061382d613818826142c3565b6138236127106142c3565b6132659087614dd8565b92506138da565b61383c612cfc565b604051631b736f6760e31b8152600481018990526024810188905260006044820152606481018790526001600160a01b03919091169063db9b7b389060840160206040518083038186803b15801561389357600080fd5b505afa1580156138a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138cb9190614b88565b92506138d78382613242565b93505b5050935093915050565b6000806138ef612a55565b6000868152600691909101602090815260408083208784528252918290205482516371613c2d60e01b815292516001600160a01b03909116926371613c2d926004808301939192829003018186803b15801561394a57600080fd5b505afa15801561395e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139829190614b88565b9050613994816109d961271086614a5f565b95945050505050565b60008115613ba65760006139af612cfc565b6001600160a01b03166388c0520e87878b8b6139c9612cfc565b6001600160a01b03166318612e328d8d6139e28e6142c3565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b158015613a2657600080fd5b505afa158015613a3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a5e9190614b88565b6040516001600160e01b031960e088901b168152600481019590955260248501939093526001600160a01b039182166044850152166064830152608482015260a401602060405180830381600087803b158015613aba57600080fd5b505af1158015613ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613af29190614b88565b90506000811315613ba4576000613b948787613b0c612cfc565b604051637636e94160e01b8152600481018c9052602481018b9052604481018790526001600160a01b039190911690637636e9419060640160206040518083038186803b158015613b5c57600080fd5b505afa158015613b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed89190614b88565b509050613ba08161326b565b9250505b505b6000613bc986868a8a613bba8b8b896138e4565b613bc4908a614b3b565b6144ab565b90508015613bfb576000613be18787611ed8856142c3565b509050613bed8161326b565b613bf79084614965565b9250505b509695505050505050565b818115613f24576000613c17612cfc565b60405163386320d360e11b8152600481018890526001600160a01b038a8116602483015291909116906370c641a69060440160206040518083038186803b158015613c6157600080fd5b505afa158015613c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c999190614b88565b90506000811215613f22576000613cae612cfc565b6001600160a01b03166349a1d218886040518263ffffffff1660e01b8152600401613cdb91815260200190565b60206040518083038186803b158015613cf357600080fd5b505afa158015613d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d2b9190614b88565b90506000613d37612cfc565b6001600160a01b03166318612e32896000613d5b613d568d888b6138e4565b6142c3565b613d6490614c21565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b158015613da857600080fd5b505afa158015613dbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613de09190614b88565b905080831315613ded5750815b613df5612cfc565b604051633916cf2b60e21b8152600481018a90526001600160a01b038c811660248301528b8116604483015260648201849052919091169063e45b3cac90608401600060405180830381600087803b158015613e5057600080fd5b505af1158015613e64573d6000803e3d6000fd5b50505050613f136118528984613e78612cfc565b6001600160a01b0316637636e9418d6000613e9289614c21565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b158015613ed657600080fd5b505afa158015613eea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f0e9190614b88565b614219565b613f1d9085614b3b565b935050505b505b6000613f2e612a55565b60008781526005919091016020526040812090613f49612a55565b6000898152600691909101602090815260408083208a84528252808320546001600160a01b03908116855291840194909452918301812054925163070da1af60e11b81528b83166004820152929091169250908290630e1b435e90602401604080518083038186803b158015613fbe57600080fd5b505afa158015613fd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ff69190614db4565b5090506000811215612f18576000614012613d568989876138e4565b61401b90614c21565b9050808213156140285750805b604051630c02764960e31b81526001600160a01b038b811660048301528a811660248301526044820183905260648201899052841690636013b24890608401600060405180830381600087803b15801561408157600080fd5b505af1158015614095573d6000803e3d6000fd5b505050506140ab611852898984613f0e90614c21565b6140b59085614b3b565b9a9950505050505050505050565b606060006140d083614193565b9392505050565b600081815260018301602052604081205415156127af565b60006127af83836145a0565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b0316908161418c5760405162461bcd60e51b8152600401611ca09190614f21565b5092915050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156141e357602002820191906000526020600020905b8154815260200190600101908083116141cf575b50505050509050919050565b600082600001828154811061420657614206614939565b9060005260206000200154905092915050565b600080614224612a55565b6000868152600691909101602090815260408083208784528252918290205482516371613c2d60e01b815292516001600160a01b03909116926371613c2d926004808301939192829003018186803b15801561427f57600080fd5b505afa158015614293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142b79190614b88565b90506139948382613242565b60006001600160ff1b038211156132bd5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401611ca0565b60008161433957600080fd5b60006143458385614f76565b61435090600a614dd8565b8361435c86600a614dd8565b6143669190614f76565b6143709190614ba1565b90506005811261438f576143848385614f76565b612bb2906001614be0565b60041981136143ae5760016143a48486614f76565b612bb29190614ba1565b612bb28385614f76565b600081815260018301602052604081205480156144a15760006143dc600183614b3b565b85549091506000906143f090600190614b3b565b905081811461445557600086600001828154811061441057614410614939565b906000526020600020015490508087600001848154811061443357614433614939565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061446657614466614fa4565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506127b2565b60009150506127b2565b6000806144b6612a55565b6000888152600691909101602090815260408083208984529091528120546001600160a01b031691506144e7612a55565b6000898152600591909101602090815260408083206001600160a01b038681168552925291829020549151632900b99560e01b81528882166004820152878216602482015260448101879052911691508190632900b99590606401602060405180830381600087803b15801561455c57600080fd5b505af1158015614570573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145949190614b88565b98975050505050505050565b60008181526001830160205260408120546145e7575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556127b2565b5060006127b2565b80356001600160a01b038116811461460657600080fd5b919050565b60008060006060848603121561462057600080fd5b614629846145ef565b95602085013595506040909401359392505050565b60008060006060848603121561465357600080fd5b83359250614663602085016145ef565b9150604084013590509250925092565b60008060006060848603121561468857600080fd5b833592506020840135915061469f604085016145ef565b90509250925092565b80151581146146b657600080fd5b50565b600080600080600080600080610100898b0312156146d657600080fd5b88359750602089013596506146ed60408a016145ef565b955060608901356002811061470157600080fd5b94506080890135935060a0890135925060c0890135915060e0890135614726816146a8565b809150509295985092959890939650565b6000806040838503121561474a57600080fd5b8235915061475a602084016145ef565b90509250929050565b6000806000806080858703121561477957600080fd5b84359350614789602086016145ef565b93969395505050506040820135916060013590565b600080600080600060a086880312156147b657600080fd5b6147bf866145ef565b94506147cd602087016145ef565b94979496505050506040830135926060810135926080909101359150565b6020808252825182820181905260009190848201906040850190845b8181101561482357835183529284019291840191600101614807565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561486e5761486e61482f565b604052919050565b600067ffffffffffffffff8211156148905761489061482f565b5060051b60200190565b600060208083850312156148ad57600080fd5b825167ffffffffffffffff8111156148c457600080fd5b8301601f810185136148d557600080fd5b80516148e86148e382614876565b614845565b81815260059190911b8201830190838101908783111561490757600080fd5b928401925b8284101561492e57835161491f816146a8565b8252928401929084019061490c565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156149785761497861494f565b500190565b6000604082018483526020604081850152818551808452606086019150828701935060005b81811015610c5a578451835293830193918301916001016149a2565b600060208083850312156149d157600080fd5b825167ffffffffffffffff8111156149e857600080fd5b8301601f810185136149f957600080fd5b8051614a076148e382614876565b81815260059190911b82018301908381019087831115614a2657600080fd5b928401925b8284101561492e57835182529284019290840190614a2b565b6000600019821415614a5857614a5861494f565b5060010190565b6000816000190483118215151615614a7957614a7961494f565b500290565b6001600160a01b039390931683526020830191909152604082015260600190565b60008060008060808587031215614ab557600080fd5b8451935060208501519250604085015191506060850151614ad5816146a8565b939692955090935050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b03949094168452602084019290925260408301521515606082015260800190565b600060208284031215614b3057600080fd5b81516140d0816146a8565b600082821015614b4d57614b4d61494f565b500390565b6060810160028510614b7457634e487b7160e01b600052602160045260246000fd5b938152602081019290925260409091015290565b600060208284031215614b9a57600080fd5b5051919050565b60008083128015600160ff1b850184121615614bbf57614bbf61494f565b6001600160ff1b0384018313811615614bda57614bda61494f565b50500390565b600080821280156001600160ff1b0384900385131615614c0257614c0261494f565b600160ff1b8390038412811615614c1b57614c1b61494f565b50500190565b6000600160ff1b821415614c3757614c3761494f565b5060000390565b60008060008060808587031215614c5457600080fd5b505082516020840151604085015160609095015191969095509092509050565b600060208284031215614c8657600080fd5b815160ff811681146140d057600080fd5b600181815b80851115614cd2578160001904821115614cb857614cb861494f565b80851615614cc557918102915b93841c9390800290614c9c565b509250929050565b600082614ce9575060016127b2565b81614cf6575060006127b2565b8160018114614d0c5760028114614d1657614d32565b60019150506127b2565b60ff841115614d2757614d2761494f565b50506001821b6127b2565b5060208310610133831016604e8410600b8410161715614d55575081810a6127b2565b614d5f8383614c97565b8060001904821115614d7357614d7361494f565b029392505050565b60006127af60ff841683614cda565b634e487b7160e01b600052601260045260246000fd5b600082614daf57614daf614d8a565b500490565b60008060408385031215614dc757600080fd5b505080516020909101519092909150565b60006001600160ff1b0381841382841380821686840486111615614dfe57614dfe61494f565b600160ff1b6000871282811687830589121615614e1d57614e1d61494f565b60008712925087820587128484161615614e3957614e3961494f565b87850587128184161615614e4f57614e4f61494f565b505050929093029392505050565b600080600080600080600060e0888a031215614e7857600080fd5b5050855160208701516040880151606089015160808a015160a08b015160c0909b0151949c939b50919990985090965094509092509050565b600060a08284031215614ec357600080fd5b60405160a0810181811067ffffffffffffffff82111715614ee657614ee661482f565b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b600060208083528351808285015260005b81811015614f4e57858101830151858201604001528201614f32565b81811115614f60576000604083870101525b50601f01601f1916929092016040019392505050565b600082614f8557614f85614d8a565b600160ff1b821460001984141615614f9f57614f9f61494f565b500590565b634e487b7160e01b600052603160045260246000fdfea26469706673582212200b501565de3ba7e93d8c562993da354e9066b99960ac86e846ea5e464368288064736f6c63430008090033",
  "libraries": {
    "QuickSort": "0x44691dD3dF1E59176B3FeBDe91C27c29dF6b3734"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "convertFutureValueToGenesisValue(bytes32,uint256,address)": {
        "params": {
          "_ccy": "Currency for pausing all lending markets",
          "_user": "User's address"
        },
        "returns": {
          "_0": "Current future value amount after update"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "convertFutureValueToGenesisValue(bytes32,uint256,address)": {
        "notice": "Converts the future value to the genesis value if there is balance in the past maturity."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}