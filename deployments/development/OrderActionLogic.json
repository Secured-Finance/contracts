{
  "address": "0x96E6d51839fa0a67FF76c338c882468CAa43D56D",
  "abi": [
    {
      "inputs": [],
      "name": "EmptyOrderBook",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFutureValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OppositeSideOrderExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PastMaturityOrderExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "orderId",
          "type": "uint48"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        }
      ],
      "name": "OrderCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputUnitPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "filledAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "filledUnitPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "filledAmountInFV",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeInFV",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "placedOrderId",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "placedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "placedUnitPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isCircuitBreakerTriggered",
          "type": "bool"
        }
      ],
      "name": "OrderExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint48[]",
          "name": "orderIds",
          "type": "uint48[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "futureValue",
          "type": "uint256"
        }
      ],
      "name": "OrdersCleaned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputFutureValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "filledAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "filledUnitPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "filledAmountInFV",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeInFV",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isCircuitBreakerTriggered",
          "type": "bool"
        }
      ],
      "name": "PositionUnwound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "orderId",
          "type": "uint48"
        }
      ],
      "name": "PreOrderExecuted",
      "type": "event"
    }
  ],
  "transactionHash": "0x92f8221f8dacfab1e7b51b5cd7b5701e91f771f19ddc3399a2474b002c1cf519",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x96E6d51839fa0a67FF76c338c882468CAa43D56D",
    "transactionIndex": 39,
    "gasUsed": "4409821",
    "logsBloom": "0x
    "blockHash": "0x2b83113f3bdfa883d03a0ac38d820d06233feac2f569825a8009172ebebfa90f",
    "transactionHash": "0x92f8221f8dacfab1e7b51b5cd7b5701e91f771f19ddc3399a2474b002c1cf519",
    "logs": [],
    "blockNumber": 4272399,
    "cumulativeGasUsed": "11045342",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5f272548a4eadb3cee57b31fd7d705a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EmptyOrderBook\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFutureValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OppositeSideOrderExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PastMaturityOrderExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"orderId\",\"type\":\"uint48\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"}],\"name\":\"OrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputUnitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filledUnitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filledAmountInFV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeInFV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"placedOrderId\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"placedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"placedUnitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCircuitBreakerTriggered\",\"type\":\"bool\"}],\"name\":\"OrderExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint48[]\",\"name\":\"orderIds\",\"type\":\"uint48[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"futureValue\",\"type\":\"uint256\"}],\"name\":\"OrdersCleaned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputFutureValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filledUnitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filledAmountInFV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeInFV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCircuitBreakerTriggered\",\"type\":\"bool\"}],\"name\":\"PositionUnwound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"orderId\",\"type\":\"uint48\"}],\"name\":\"PreOrderExecuted\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/libraries/logics/OrderActionLogic.sol\":\"OrderActionLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dependencies/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Chainlink Contracts v0.4.0 (v0.8/interfaces/AggregatorV3Interface.sol)\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x81b0c18c07c8c031d5b34e4e41d2451b836355aad1b3c04c26578c92f73585f9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    error UnmatchedInputs();\\n\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x40e18c26bde79091749a80c311436872a4bc5b960ec77739cb3d3a0d08bd78ac\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IBeaconProxyController {\\n    error NoBeaconProxyContract();\\n    error InvalidProxyContract();\\n\\n    event BeaconProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function deployFutureValueVault() external returns (address futureValueVault);\\n\\n    function deployLendingMarket(\\n        bytes32 ccy,\\n        uint256 orderFeeRate,\\n        uint256 cbLimitRange\\n    ) external returns (address market);\\n}\\n\",\"keccak256\":\"0x94069c565a7f5f6ddf8c155cf11b53821b466d07a7c24f142feb4c375ce29b55\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {PriceFeed} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    error InvalidCurrency();\\n    error InvalidHaircut();\\n    error InvalidPriceFeed();\\n    error InvalidPrice();\\n    error InvalidDecimals();\\n    error NoPriceFeedExists();\\n    error StalePriceFeed(\\n        address priceFeed,\\n        uint256 heartbeat,\\n        uint256 updatedAt,\\n        uint256 blockTimestamp\\n    );\\n\\n    event CurrencyAdded(bytes32 indexed ccy, uint256 haircut);\\n    event CurrencyRemoved(bytes32 indexed ccy);\\n\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n\\n    event PriceFeedUpdated(bytes32 ccy, uint256 decimals, address[] indexed priceFeeds);\\n    event PriceFeedRemoved(bytes32 ccy);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256 _amount\\n    ) external view returns (uint256 amount);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256[] calldata _amounts\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, uint256 _amount)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, int256 _amount)\\n        external\\n        view\\n        returns (int256 amount);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, uint256[] calldata _amounts)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function convertFromBaseCurrency(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertFromBaseCurrency(bytes32 _ccy, uint256[] calldata _amounts)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getDecimals(bytes32) external view returns (uint8);\\n\\n    function getCurrencies() external view returns (bytes32[] memory);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getPriceFeed(bytes32 _ccy) external view returns (PriceFeed memory);\\n\\n    function getLastPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function currencyExists(bytes32 _ccy) external view returns (bool);\\n\\n    function updatePriceFeed(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        address[] calldata _priceFeeds,\\n        uint256 _heartbeat\\n    ) external;\\n\\n    function removePriceFeed(bytes32 _ccy) external;\\n\\n    function addCurrency(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        uint256 _haircut,\\n        address[] calldata _priceFeeds,\\n        uint256 _heartbeat\\n    ) external;\\n\\n    function updateHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function removeCurrency(bytes32 _ccy) external;\\n}\\n\",\"keccak256\":\"0xcb157f980a3f915240c80fe657c7d876a722e03e8d2861419dffe9ee28133a21\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AutoRollLog} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    error NoCompoundFactorExists(uint256 maturity);\\n    error CompoundFactorIsZero();\\n    error ResidualAmountIsNotZero();\\n    error UnitPriceIsZero();\\n    error InvalidMaturity();\\n    error InvalidAmount();\\n    error InvalidOrderFeeRate();\\n    error CurrencyAlreadyInitialized();\\n    error InitialCompoundFactorAlreadyFinalized();\\n    error AutoRollLogAlreadyUpdated(uint256 currentMaturity, uint256 nextMaturity);\\n\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\\n    event AutoRollExecuted(\\n        bytes32 indexed ccy,\\n        uint256 lendingCompoundFactor,\\n        uint256 borrowingCompoundFactor,\\n        uint256 unitPrice,\\n        uint256 currentMaturity,\\n        uint256 previousMaturity\\n    );\\n\\n    function isInitialized(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getBalance(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getBalanceInFutureValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getMaturityGenesisValue(bytes32 ccy, uint256 maturity) external view returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getAutoRollLog(bytes32 ccy, uint256 maturity)\\n        external\\n        view\\n        returns (AutoRollLog memory);\\n\\n    function getLatestAutoRollLog(bytes32 ccy) external view returns (AutoRollLog memory);\\n\\n    function calculateFVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        uint256 destinationMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function getBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function calculateBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        int256 balance,\\n        uint256 fromMaturity,\\n        uint256 toMaturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function initializeCurrencySetting(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor,\\n        uint256 maturity\\n    ) external;\\n\\n    function updateInitialCompoundFactor(bytes32 ccy, uint256 unitPrice) external;\\n\\n    function executeAutoRoll(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice,\\n        uint256 orderFeeRate\\n    ) external;\\n\\n    function updateGenesisValueWithFutureValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 fvAmount\\n    ) external;\\n\\n    function updateGenesisValueWithResidualAmount(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity\\n    ) external;\\n\\n    function transferFrom(\\n        bytes32 ccy,\\n        address sender,\\n        address receiver,\\n        int256 amount\\n    ) external;\\n\\n    function cleanUpBalance(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external;\\n\\n    function executeForcedReset(bytes32 _ccy, address _user) external;\\n\\n    function executeForcedReset(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        int256 _amountInFV\\n    ) external returns (int256 removedAmount, int256 balance);\\n}\\n\",\"keccak256\":\"0x042f013b829505a30b3799d3d602e7c38e59335de6b3ba0b64cfabd8ddae4b0e\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ILendingMarketController {\\n    error InvalidMaturity();\\n    error InvalidCurrency();\\n    error AlreadyTerminated();\\n    error NotTerminated();\\n    error AlreadyInitialized();\\n\\n    struct Order {\\n        uint48 orderId;\\n        bytes32 ccy;\\n        uint256 maturity;\\n        ProtocolTypes.Side side;\\n        uint256 unitPrice;\\n        uint256 amount;\\n        uint256 timestamp;\\n        bool isPreOrder;\\n    }\\n\\n    struct Position {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        int256 presentValue;\\n        int256 futureValue;\\n    }\\n\\n    struct OrderBookDetail {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        uint256 bestLendUnitPrice;\\n        uint256 bestBorrowUnitPrice;\\n        uint256 marketUnitPrice;\\n        uint256 maxLendUnitPrice;\\n        uint256 minBorrowUnitPrice;\\n        uint256 openingUnitPrice;\\n        uint256 openingDate;\\n        bool isReady;\\n    }\\n\\n    struct AdditionalFunds {\\n        bytes32 ccy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 lentAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct GetOrderEstimationParams {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        address user;\\n        ProtocolTypes.Side side;\\n        uint256 amount;\\n        uint256 unitPrice;\\n        uint256 additionalDepositAmount;\\n        bool ignoreBorrowedAmount;\\n    }\\n\\n    function isTerminated() external view returns (bool);\\n\\n    function isRedemptionRequired(address _user) external view returns (bool);\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarket(bytes32 ccy) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy) external view returns (address);\\n\\n    function getOrderBookId(bytes32 _ccy, uint256 _maturity) external view returns (uint8);\\n\\n    function getOrderBookDetail(bytes32 _ccy, uint256 _maturity)\\n        external\\n        view\\n        returns (\\n            uint256 bestLendUnitPrice,\\n            uint256 bestBorrowUnitPrice,\\n            uint256 marketUnitPrice,\\n            uint256 maxLendUnitPrice,\\n            uint256 minBorrowUnitPrice,\\n            uint256 openingUnitPrice,\\n            uint256 openingDate,\\n            bool isReady\\n        );\\n\\n    function getOrderBookDetails(bytes32[] calldata _ccys)\\n        external\\n        view\\n        returns (OrderBookDetail[] memory orderBookDetails);\\n\\n    function getBestLendUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getBestBorrowUnitPrices(bytes32 ccy)\\n        external\\n        view\\n        returns (uint256[] memory unitPrices);\\n\\n    function getOrderEstimation(GetOrderEstimationParams calldata params)\\n        external\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV,\\n            uint256 orderFeeInFV,\\n            uint256 placedAmount,\\n            uint256 coverage,\\n            bool isInsufficientDepositAmount\\n        );\\n\\n    function getBorrowOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getOrderBookIds(bytes32 ccy) external view returns (uint8[] memory);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInBaseCurrency(address user)\\n        external\\n        view\\n        returns (int256 totalPresentValue);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256 genesisValue);\\n\\n    function getOrders(bytes32[] calldata ccys, address user)\\n        external\\n        view\\n        returns (Order[] memory activeOrders, Order[] memory inactiveOrders);\\n\\n    function getPosition(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) external view returns (int256 presentValue, int256 futureValue);\\n\\n    function getPositions(bytes32[] calldata ccys, address user)\\n        external\\n        view\\n        returns (Position[] memory positions);\\n\\n    function calculateFunds(\\n        bytes32 ccy,\\n        address user,\\n        uint256 liquidationThresholdRate\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 workingLendOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 collateralAmount,\\n            uint256 lentAmount,\\n            uint256 workingBorrowOrdersAmount,\\n            uint256 debtAmount,\\n            uint256 borrowedAmount\\n        );\\n\\n    function calculateTotalFundsInBaseCurrency(\\n        address user,\\n        AdditionalFunds calldata _additionalFunds,\\n        uint256 liquidationThresholdRate\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 plusDepositAmountInAdditionalFundsCcy,\\n            uint256 minusDepositAmountInAdditionalFundsCcy,\\n            uint256 totalWorkingLendOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalCollateralAmount,\\n            uint256 totalLentAmount,\\n            uint256 totalWorkingBorrowOrdersAmount,\\n            uint256 totalDebtAmount,\\n            uint256 totalBorrowedAmount\\n        );\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor,\\n        uint256 orderFeeRate,\\n        uint256 circuitBreakerLimitRange\\n    ) external;\\n\\n    function createOrderBook(bytes32 ccy, uint256 marketOpeningDate) external;\\n\\n    function executeOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecuteOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function executePreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecutesPreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function unwindPosition(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function executeItayoseCalls(bytes32[] calldata currencies, uint256 maturity)\\n        external\\n        returns (bool);\\n\\n    function executeRedemption(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeRepayment(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeEmergencySettlement() external returns (bool);\\n\\n    function executeLiquidationCall(\\n        bytes32 collateralCcy,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        address user\\n    ) external returns (bool);\\n\\n    function executeForcedRepayment(\\n        bytes32 _collateralCcy,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity,\\n        address _user\\n    ) external returns (bool);\\n\\n    function cancelOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint48 orderId\\n    ) external returns (bool);\\n\\n    function rotateOrderBooks(bytes32 ccy) external;\\n\\n    function executeEmergencyTermination() external;\\n\\n    function pauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function cleanUpAllFunds(address user) external returns (bool);\\n\\n    function cleanUpFunds(bytes32 ccy, address user) external returns (uint256 activeOrderCount);\\n}\\n\",\"keccak256\":\"0xb8eff1270fa41e26fe677fa73ffb9a2d4af96e8fe4fd802590ceb73a55022000\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IReserveFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IReserveFund {\\n    event Pause(address account);\\n    event Unpause(address account);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xa2a6df7a095ca8f8874d26672f75fe1f09c45caf041cb27d5e265bcb974a9754\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\n\\ninterface ITokenVault {\\n    error UnregisteredCurrency();\\n    error InvalidCurrency();\\n    error InvalidAmount();\\n    error CallerNotBaseCurrency(address caller);\\n    error MarketTerminated();\\n    error RedemptionIsRequired();\\n\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress, bool isCollateral);\\n    event CurrencyUpdated(bytes32 ccy, bool isCollateral);\\n\\n    function isCovered(address user) external view returns (bool);\\n\\n    function isCollateral(bytes32 ccy) external view returns (bool);\\n\\n    function isCollateral(bytes32[] calldata ccys)\\n        external\\n        view\\n        returns (bool[] memory isCollateralCurrencies);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getTokenAddress(bytes32 ccy) external view returns (address);\\n\\n    function getCollateralCurrencies() external view returns (bytes32[] memory);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256 maxWithdraw);\\n\\n    function getWithdrawableCollateral(bytes32 ccy, address user) external view returns (uint256);\\n\\n    function getCoverage(address user) external view returns (uint256 coverage);\\n\\n    function getUnusedCollateral(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address user) external view returns (uint256);\\n\\n    function getCollateralAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getLiquidationAmount(\\n        address user,\\n        bytes32 liquidationCcy,\\n        uint256 liquidationAmountMaximum\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liquidationAmount,\\n            uint256 protocolFee,\\n            uint256 liquidatorFee\\n        );\\n\\n    function getTotalDepositAmount(bytes32 ccy) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function calculateCoverage(address user, ILendingMarketController.AdditionalFunds memory funds)\\n        external\\n        view\\n        returns (uint256 coverage, bool isInsufficientDepositAmount);\\n\\n    function calculateLiquidationFees(uint256 liquidationAmount)\\n        external\\n        view\\n        returns (uint256 protocolFee, uint256 liquidatorFee);\\n\\n    function getCollateralParameters()\\n        external\\n        view\\n        returns (\\n            uint256 liquidationThresholdRate,\\n            uint256 liquidationProtocolFeeRate,\\n            uint256 liquidatorFeeRate\\n        );\\n\\n    function setCollateralParameters(\\n        uint256 liquidationThresholdRate,\\n        uint256 liquidationProtocolFeeRate,\\n        uint256 liquidatorFeeRate\\n    ) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositFrom(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function removeDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function executeForcedReset(address user, bytes32 ccy) external returns (uint256 removedAmount);\\n\\n    function transferFrom(\\n        bytes32 ccy,\\n        address sender,\\n        address receiver,\\n        uint256 amount\\n    ) external returns (uint256 untransferredAmount);\\n\\n    function pauseVault() external;\\n\\n    function unpauseVault() external;\\n}\\n\",\"keccak256\":\"0xdf53814c521aabc42e191beb19f2ac7e761d15accc1a7dc230ae0e1d7d163c08\",\"license\":\"MIT\"},\"contracts/protocol/libraries/AddressResolverLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/mixins/MixinAddressResolverStorage.sol\\\";\\n\\nlibrary AddressResolverLib {\\n    error MissingAddress(string name);\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        if (_foundAddress == address(0)) revert MissingAddress(string(abi.encodePacked(name)));\\n        return _foundAddress;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return IReserveFund(getAddress(Contracts.RESERVE_FUND));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0xbde5bbe81b0252665c84ea5cfc5b60cc9ff5ab1bc0dd53e4b01be070b9d72021\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Constants {\\n    /// @dev Used for price digits in the basis (10000 -> 1)\\n    uint256 internal constant PRICE_DIGIT = 10000;\\n\\n    /// @dev Used for percentage digits in the basis (10000 -> 100%)\\n    uint256 internal constant PCT_DIGIT = 10000;\\n\\n    /// @dev Used for seconds in year (60 * 60 * 24 * 365)\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000;\\n\\n    /// @dev Used for maximum order count per currency\\n    uint256 internal constant MAXIMUM_ORDER_COUNT = 20;\\n\\n    /// @dev Used for minimum range for circuit breaker unit price\\n    uint256 internal constant MINIMUM_CIRCUIT_BREAKER_RANGE = 100;\\n}\\n\",\"keccak256\":\"0x8ab1b7b6191ba0f20fe1d26c937d130cdc52b0f21827aa34103c3b6b425a4c7e\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant RESERVE_FUND = \\\"ReserveFund\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE_VAULT = \\\"FutureValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0x8e73eead72efa03bcc03c1cdf72cdcebed0f7e6f5a58cda1fd74e0fc03f356e6\",\"license\":\"MIT\"},\"contracts/protocol/libraries/OrderBookLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Constants} from \\\"./Constants.sol\\\";\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {OrderStatisticsTreeLib, PartiallyRemovedOrder} from \\\"./OrderStatisticsTreeLib.sol\\\";\\nimport {RoundingUint256} from \\\"./math/RoundingUint256.sol\\\";\\n\\nstruct PlacedOrder {\\n    ProtocolTypes.Side side;\\n    uint256 unitPrice;\\n    uint256 maturity;\\n    uint256 timestamp;\\n}\\n\\nstruct FilledOrder {\\n    uint256 amount;\\n    uint256 unitPrice;\\n    uint256 futureValue;\\n    uint256 ignoredAmount;\\n}\\n\\nstruct PartiallyFilledOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 futureValue;\\n}\\n\\nlibrary OrderBookLib {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n    using RoundingUint256 for uint256;\\n\\n    uint256 public constant PRE_ORDER_PERIOD = 7 days;\\n    uint256 public constant ITAYOSE_PERIOD = 1 hours;\\n\\n    error EmptyOrderBook();\\n    error PastMaturityOrderExists();\\n\\n    struct OrderBook {\\n        uint48 lastOrderId;\\n        uint48 lastOrderBlockNumber;\\n        bool isReliableBlock;\\n        // Micro slots for block unit price history\\n        uint80 blockUnitPriceHistory;\\n        uint256 blockTotalAmount;\\n        uint256 blockTotalFutureValue;\\n        uint256 openingDate;\\n        uint256 maturity;\\n        // Mapping from user to active lend order ids\\n        mapping(address => uint48[]) activeLendOrderIds;\\n        // Mapping from user to active borrow order ids\\n        mapping(address => uint48[]) activeBorrowOrderIds;\\n        // Mapping from user to current maturity\\n        mapping(address => uint256) userCurrentMaturities;\\n        // Mapping from orderId to order micro slots\\n        mapping(uint256 => uint256) orders;\\n        // Mapping from orderId to boolean for pre-order or not\\n        mapping(uint256 => bool) isPreOrder;\\n        // Mapping from maturity to lending orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) lendOrders;\\n        // Mapping from maturity to borrowing orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) borrowOrders;\\n    }\\n\\n    function initialize(\\n        OrderBook storage self,\\n        uint256 _maturity,\\n        uint256 _openingDate\\n    ) internal returns (bool isReady) {\\n        self.maturity = _maturity;\\n        self.openingDate = _openingDate;\\n\\n        self.lastOrderId = 0;\\n        self.lastOrderBlockNumber = 0;\\n        self.blockTotalAmount = 0;\\n        self.blockTotalFutureValue = 0;\\n        self.blockUnitPriceHistory = 0;\\n        self.isReliableBlock = false;\\n\\n        if (block.timestamp >= (_openingDate - ITAYOSE_PERIOD)) {\\n            isReady = true;\\n        }\\n    }\\n\\n    function isMatured(OrderBook storage self) internal view returns (bool) {\\n        return block.timestamp >= self.maturity;\\n    }\\n\\n    function getBestBorrowUnitPrice(OrderBook storage self) internal view returns (uint256) {\\n        return self.lendOrders[self.maturity].last();\\n    }\\n\\n    function getBestLendUnitPrice(OrderBook storage self) internal view returns (uint256) {\\n        uint256 unitPrice = self.borrowOrders[self.maturity].first();\\n        return unitPrice == 0 ? Constants.PRICE_DIGIT : unitPrice;\\n    }\\n\\n    function hasBorrowOrder(OrderBook storage self, address _user) internal view returns (bool) {\\n        return self.activeBorrowOrderIds[_user].length != 0;\\n    }\\n\\n    function hasLendOrder(OrderBook storage self, address _user) internal view returns (bool) {\\n        return self.activeLendOrderIds[_user].length != 0;\\n    }\\n\\n    function getOrder(OrderBook storage self, uint256 _orderId)\\n        internal\\n        view\\n        returns (PlacedOrder memory order)\\n    {\\n        (\\n            ProtocolTypes.Side side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            uint256 timestamp\\n        ) = _unpackOrder(self.orders[_orderId]);\\n        order = PlacedOrder(side, unitPrice, maturity, timestamp);\\n    }\\n\\n    function getMarketUnitPrice(OrderBook storage self) internal view returns (uint256 unitPrice) {\\n        unitPrice = _unpackBlockUnitPriceHistory(self.blockUnitPriceHistory)[0];\\n\\n        // NOTE: If an order is in the first block of the order book, the block unit price history is empty.\\n        // In this case, the market unit price is calculated from the current block total amount and total future value\\n        // to avoid unwinding or liquidation the order in the same block using 0 as the market unit price.\\n        if ((self.lastOrderBlockNumber != block.number || unitPrice == 0) && self.isReliableBlock) {\\n            unitPrice = (self.blockTotalAmount * Constants.PRICE_DIGIT).div(\\n                self.blockTotalFutureValue\\n            );\\n        }\\n    }\\n\\n    function getBlockUnitPriceAverage(OrderBook storage self, uint256 _maxCount)\\n        internal\\n        view\\n        returns (uint256 unitPrice)\\n    {\\n        uint256[] memory unitPrices = _unpackBlockUnitPriceHistory(self.blockUnitPriceHistory);\\n        uint256 length = unitPrices.length;\\n        uint256 sum;\\n        uint256 count;\\n\\n        if (self.lastOrderBlockNumber != block.number && self.isReliableBlock) {\\n            sum = (self.blockTotalAmount * Constants.PRICE_DIGIT).div(self.blockTotalFutureValue);\\n            count = 1;\\n            _maxCount--;\\n        }\\n\\n        for (uint256 i; i < _maxCount; i++) {\\n            if (i >= length || unitPrices[i] == 0) {\\n                break;\\n            }\\n\\n            sum += unitPrices[i];\\n            count++;\\n        }\\n\\n        unitPrice = count > 0 ? sum.div(count) : 0;\\n    }\\n\\n    function getLendOrderBook(OrderBook storage self, uint256 _limit)\\n        internal\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = self.lendOrders[self.maturity].last();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = self.lendOrders[self.maturity].getNodeTotalAmount(unitPrice);\\n        quantities[0] = self.lendOrders[self.maturity].getNodeCount(unitPrice);\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = self.lendOrders[self.maturity].prev(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = self.lendOrders[self.maturity].getNodeTotalAmount(unitPrice);\\n            quantities[i] = self.lendOrders[self.maturity].getNodeCount(unitPrice);\\n        }\\n    }\\n\\n    function getBorrowOrderBook(OrderBook storage self, uint256 _limit)\\n        internal\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = self.borrowOrders[self.maturity].first();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = self.borrowOrders[self.maturity].getNodeTotalAmount(unitPrice);\\n        quantities[0] = self.borrowOrders[self.maturity].getNodeCount(unitPrice);\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = self.borrowOrders[self.maturity].next(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = self.borrowOrders[self.maturity].getNodeTotalAmount(unitPrice);\\n            quantities[i] = self.borrowOrders[self.maturity].getNodeCount(unitPrice);\\n        }\\n    }\\n\\n    function getLendOrderIds(OrderBook storage self, address _user)\\n        internal\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        uint256 userMaturity = self.userCurrentMaturities[_user];\\n        bool isPastMaturity = userMaturity != self.maturity;\\n\\n        uint48[] memory orderIds = self.activeLendOrderIds[_user];\\n        uint256 orderIdLength = orderIds.length;\\n        activeOrderIds = new uint48[](isPastMaturity ? 0 : orderIdLength);\\n        inActiveOrderIds = new uint48[](orderIdLength);\\n\\n        for (uint256 i; i < orderIdLength; i++) {\\n            uint48 orderId = orderIds[i];\\n            (, uint256 unitPrice, , ) = _unpackOrder(self.orders[orderId]);\\n\\n            if (!self.lendOrders[userMaturity].isActiveOrderId(unitPrice, orderId)) {\\n                unchecked {\\n                    inActiveOrderCount += 1;\\n                }\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                if (!isPastMaturity) {\\n                    unchecked {\\n                        activeOrderCount += 1;\\n                    }\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function getBorrowOrderIds(OrderBook storage self, address _user)\\n        internal\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        uint256 userMaturity = self.userCurrentMaturities[_user];\\n        bool isPastMaturity = userMaturity != self.maturity;\\n\\n        uint48[] memory orderIds = self.activeBorrowOrderIds[_user];\\n        uint256 orderIdLength = orderIds.length;\\n        activeOrderIds = new uint48[](isPastMaturity ? 0 : orderIdLength);\\n        inActiveOrderIds = new uint48[](orderIdLength);\\n\\n        for (uint256 i; i < orderIdLength; i++) {\\n            uint48 orderId = orderIds[i];\\n            (, uint256 unitPrice, , ) = _unpackOrder(self.orders[orderId]);\\n\\n            if (!self.borrowOrders[userMaturity].isActiveOrderId(unitPrice, orderId)) {\\n                unchecked {\\n                    inActiveOrderCount += 1;\\n                }\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                unchecked {\\n                    activeOrderCount += 1;\\n                }\\n                if (!isPastMaturity) {\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function calculateFilledAmount(\\n        OrderBook storage self,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV\\n        )\\n    {\\n        if (_amount == 0) return (0, 0, 0);\\n\\n        if (_side == ProtocolTypes.Side.LEND) {\\n            return\\n                self.borrowOrders[self.maturity].calculateDroppedAmountFromLeft(\\n                    _amount,\\n                    0,\\n                    _unitPrice\\n                );\\n        } else {\\n            return\\n                self.lendOrders[self.maturity].calculateDroppedAmountFromRight(\\n                    _amount,\\n                    0,\\n                    _unitPrice\\n                );\\n        }\\n    }\\n\\n    function updateUserMaturity(OrderBook storage self, address _user) internal {\\n        uint256 userMaturity = self.userCurrentMaturities[_user];\\n        uint256 orderBookMaturity = self.maturity;\\n\\n        if (userMaturity != orderBookMaturity) {\\n            if (\\n                self.activeLendOrderIds[_user].length > 0 ||\\n                self.activeBorrowOrderIds[_user].length > 0\\n            ) {\\n                revert PastMaturityOrderExists();\\n            }\\n\\n            self.userCurrentMaturities[_user] = orderBookMaturity;\\n        }\\n    }\\n\\n    function placeOrder(\\n        OrderBook storage self,\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) internal returns (uint48 orderId) {\\n        orderId = _nextOrderId(self);\\n        self.orders[orderId] = _packOrder(_side, _unitPrice, self.maturity, block.timestamp);\\n\\n        if (_side == ProtocolTypes.Side.LEND) {\\n            self.lendOrders[self.maturity].insertOrder(_unitPrice, orderId, _user, _amount);\\n            self.activeLendOrderIds[_user].push(orderId);\\n        } else if (_side == ProtocolTypes.Side.BORROW) {\\n            self.borrowOrders[self.maturity].insertOrder(_unitPrice, orderId, _user, _amount);\\n            self.activeBorrowOrderIds[_user].push(orderId);\\n        }\\n    }\\n\\n    function fillOrders(\\n        OrderBook storage self,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _amountInFV,\\n        uint256 _unitPrice\\n    )\\n        internal\\n        returns (\\n            FilledOrder memory filledOrder,\\n            PartiallyFilledOrder memory partiallyFilledOrder,\\n            uint256 remainingAmount,\\n            bool orderExists\\n        )\\n    {\\n        PartiallyRemovedOrder memory partiallyRemovedOrder;\\n\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            OrderStatisticsTreeLib.Tree storage orders = self.lendOrders[self.maturity];\\n            (\\n                filledOrder.unitPrice,\\n                filledOrder.amount,\\n                filledOrder.futureValue,\\n                remainingAmount,\\n                partiallyRemovedOrder\\n            ) = orders.dropRight(_amount, _amountInFV, _unitPrice);\\n            orderExists = orders.hasOrders();\\n        } else if (_side == ProtocolTypes.Side.LEND) {\\n            OrderStatisticsTreeLib.Tree storage orders = self.borrowOrders[self.maturity];\\n            (\\n                filledOrder.unitPrice,\\n                filledOrder.amount,\\n                filledOrder.futureValue,\\n                remainingAmount,\\n                partiallyRemovedOrder\\n            ) = orders.dropLeft(_amount, _amountInFV, _unitPrice);\\n            orderExists = orders.hasOrders();\\n        }\\n\\n        partiallyFilledOrder = PartiallyFilledOrder(\\n            partiallyRemovedOrder.orderId,\\n            partiallyRemovedOrder.maker,\\n            partiallyRemovedOrder.amount,\\n            partiallyRemovedOrder.futureValue\\n        );\\n    }\\n\\n    function setInitialBlockUnitPrice(OrderBook storage self, uint256 _unitPrice) internal {\\n        self.blockUnitPriceHistory = uint16(_unitPrice);\\n        self.lastOrderBlockNumber = uint48(block.number);\\n    }\\n\\n    function updateBlockUnitPriceHistory(\\n        OrderBook storage self,\\n        uint256 _filledAmount,\\n        uint256 _filledFutureValue,\\n        uint256 _minimumReliableAmount\\n    ) internal {\\n        uint256 latestBlockUnitPrice = _unpackBlockUnitPriceHistory(self.blockUnitPriceHistory)[0];\\n\\n        if (self.lastOrderBlockNumber != block.number) {\\n            if (self.isReliableBlock) {\\n                latestBlockUnitPrice = (self.blockTotalAmount * Constants.PRICE_DIGIT).div(\\n                    self.blockTotalFutureValue\\n                );\\n\\n                // Remove the oldest block unit price and add the latest block unit price\\n                self.blockUnitPriceHistory =\\n                    uint16(latestBlockUnitPrice) |\\n                    (self.blockUnitPriceHistory << 16);\\n            }\\n\\n            self.lastOrderBlockNumber = uint48(block.number);\\n            self.blockTotalAmount = _filledAmount;\\n            self.blockTotalFutureValue = _filledFutureValue;\\n            self.isReliableBlock = false;\\n        } else {\\n            self.blockTotalAmount += _filledAmount;\\n            self.blockTotalFutureValue += _filledFutureValue;\\n        }\\n\\n        if (\\n            self.blockTotalAmount >= _minimumReliableAmount ||\\n            (self.blockTotalAmount > 0 && latestBlockUnitPrice == 0)\\n        ) {\\n            self.isReliableBlock = true;\\n        }\\n    }\\n\\n    function removeOrder(\\n        OrderBook storage self,\\n        address _user,\\n        uint48 _orderId\\n    )\\n        internal\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (ProtocolTypes.Side side, uint256 unitPrice, , ) = _unpackOrder(self.orders[_orderId]);\\n        uint256 removedAmount;\\n\\n        if (side == ProtocolTypes.Side.LEND) {\\n            removedAmount = self.lendOrders[self.maturity].removeOrder(unitPrice, _orderId);\\n            _removeOrderIdFromOrders(self.activeLendOrderIds[_user], _orderId);\\n        } else if (side == ProtocolTypes.Side.BORROW) {\\n            removedAmount = self.borrowOrders[self.maturity].removeOrder(unitPrice, _orderId);\\n            _removeOrderIdFromOrders(self.activeBorrowOrderIds[_user], _orderId);\\n        }\\n\\n        delete self.orders[_orderId];\\n\\n        return (side, removedAmount, unitPrice);\\n    }\\n\\n    function getOpeningUnitPrice(OrderBook storage self)\\n        internal\\n        view\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 lastLendUnitPrice,\\n            uint256 lastBorrowUnitPrice,\\n            uint256 totalOffsetAmount\\n        )\\n    {\\n        uint256 lendUnitPrice = getBestBorrowUnitPrice(self);\\n        uint256 borrowUnitPrice = getBestLendUnitPrice(self);\\n        uint256 lendAmount = self.lendOrders[self.maturity].getNodeTotalAmount(lendUnitPrice);\\n        uint256 borrowAmount = self.borrowOrders[self.maturity].getNodeTotalAmount(borrowUnitPrice);\\n\\n        OrderStatisticsTreeLib.Tree storage borrowOrders = self.borrowOrders[self.maturity];\\n        OrderStatisticsTreeLib.Tree storage lendOrders = self.lendOrders[self.maturity];\\n\\n        // return mid price when no lending and borrowing orders overwrap\\n        if (borrowUnitPrice > lendUnitPrice) {\\n            openingUnitPrice = (lendUnitPrice + borrowUnitPrice).div(2);\\n            return (openingUnitPrice, 0, 0, 0);\\n        }\\n\\n        while (borrowUnitPrice <= lendUnitPrice && borrowUnitPrice > 0 && lendUnitPrice > 0) {\\n            lastLendUnitPrice = lendUnitPrice;\\n            lastBorrowUnitPrice = borrowUnitPrice;\\n\\n            if (lendAmount > borrowAmount) {\\n                openingUnitPrice = lendUnitPrice;\\n                totalOffsetAmount += borrowAmount;\\n                lendAmount -= borrowAmount;\\n                borrowUnitPrice = borrowOrders.next(borrowUnitPrice);\\n                borrowAmount = borrowOrders.getNodeTotalAmount(borrowUnitPrice);\\n            } else if (lendAmount < borrowAmount) {\\n                openingUnitPrice = borrowUnitPrice;\\n                totalOffsetAmount += lendAmount;\\n                borrowAmount -= lendAmount;\\n                lendUnitPrice = lendOrders.prev(lendUnitPrice);\\n                lendAmount = lendOrders.getNodeTotalAmount(lendUnitPrice);\\n            } else {\\n                openingUnitPrice = (lendUnitPrice + borrowUnitPrice).div(2);\\n                totalOffsetAmount += lendAmount;\\n                lendUnitPrice = lendOrders.prev(lendUnitPrice);\\n                borrowUnitPrice = borrowOrders.next(borrowUnitPrice);\\n                lendAmount = lendOrders.getNodeTotalAmount(lendUnitPrice);\\n                borrowAmount = borrowOrders.getNodeTotalAmount(borrowUnitPrice);\\n            }\\n        }\\n    }\\n\\n    function getOrderExecutionConditions(\\n        OrderBook storage self,\\n        ProtocolTypes.Side _side,\\n        uint256 _unitPrice,\\n        uint256 _circuitBreakerLimitRange\\n    )\\n        internal\\n        view\\n        returns (\\n            bool isFilled,\\n            uint256 executedUnitPrice,\\n            bool ignoreRemainingAmount,\\n            bool orderExists\\n        )\\n    {\\n        bool isLend = _side == ProtocolTypes.Side.LEND;\\n        uint256 cbThresholdUnitPrice;\\n        uint256 bestUnitPrice;\\n\\n        if (isLend) {\\n            bestUnitPrice = self.borrowOrders[self.maturity].first();\\n            cbThresholdUnitPrice = getLendCircuitBreakerThreshold(self, _circuitBreakerLimitRange);\\n        } else {\\n            bestUnitPrice = self.lendOrders[self.maturity].last();\\n            cbThresholdUnitPrice = getBorrowCircuitBreakerThreshold(\\n                self,\\n                _circuitBreakerLimitRange\\n            );\\n        }\\n\\n        orderExists = bestUnitPrice != 0;\\n\\n        if (\\n            _unitPrice == 0 ||\\n            (orderExists &&\\n                cbThresholdUnitPrice != 0 &&\\n                ((isLend && _unitPrice > cbThresholdUnitPrice) ||\\n                    (!isLend && _unitPrice < cbThresholdUnitPrice)))\\n        ) {\\n            executedUnitPrice = cbThresholdUnitPrice;\\n            ignoreRemainingAmount = true;\\n        } else {\\n            executedUnitPrice = _unitPrice;\\n            ignoreRemainingAmount = false;\\n        }\\n\\n        if (orderExists) {\\n            isFilled = isLend\\n                ? bestUnitPrice <= executedUnitPrice\\n                : bestUnitPrice >= executedUnitPrice;\\n        }\\n    }\\n\\n    function getLendCircuitBreakerThreshold(\\n        OrderBook storage self,\\n        uint256 _circuitBreakerLimitRange\\n    ) internal view returns (uint256 cbThresholdUnitPrice) {\\n        uint256 blockUnitPriceAverage = getBlockUnitPriceAverage(self, 3);\\n        cbThresholdUnitPrice = (blockUnitPriceAverage *\\n            (Constants.PCT_DIGIT + _circuitBreakerLimitRange * 2)).div(Constants.PCT_DIGIT);\\n\\n        if (cbThresholdUnitPrice > Constants.PRICE_DIGIT || blockUnitPriceAverage == 0) {\\n            cbThresholdUnitPrice = Constants.PRICE_DIGIT;\\n        } else if (\\n            cbThresholdUnitPrice < blockUnitPriceAverage + Constants.MINIMUM_CIRCUIT_BREAKER_RANGE\\n        ) {\\n            cbThresholdUnitPrice = blockUnitPriceAverage + Constants.MINIMUM_CIRCUIT_BREAKER_RANGE;\\n        }\\n    }\\n\\n    function getBorrowCircuitBreakerThreshold(\\n        OrderBook storage self,\\n        uint256 _circuitBreakerLimitRange\\n    ) internal view returns (uint256 cbThresholdUnitPrice) {\\n        uint256 blockUnitPriceAverage = getBlockUnitPriceAverage(self, 5);\\n        cbThresholdUnitPrice = (blockUnitPriceAverage *\\n            (Constants.PCT_DIGIT - _circuitBreakerLimitRange)).div(Constants.PCT_DIGIT);\\n\\n        if (\\n            cbThresholdUnitPrice == 0 ||\\n            blockUnitPriceAverage == 0 ||\\n            blockUnitPriceAverage <= Constants.MINIMUM_CIRCUIT_BREAKER_RANGE\\n        ) {\\n            cbThresholdUnitPrice = 1;\\n        } else if (\\n            blockUnitPriceAverage < cbThresholdUnitPrice + Constants.MINIMUM_CIRCUIT_BREAKER_RANGE\\n        ) {\\n            cbThresholdUnitPrice = blockUnitPriceAverage - Constants.MINIMUM_CIRCUIT_BREAKER_RANGE;\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases and returns id of last order in order book.\\n     * @return The new order id\\n     */\\n    function _nextOrderId(OrderBook storage self) private returns (uint48) {\\n        self.lastOrderId++;\\n        return self.lastOrderId;\\n    }\\n\\n    function _removeOrderIdFromOrders(uint48[] storage orders, uint256 orderId) private {\\n        uint256 lastOrderIndex = orders.length - 1;\\n        for (uint256 i; i <= lastOrderIndex; i++) {\\n            if (orders[i] == orderId) {\\n                if (i != lastOrderIndex) {\\n                    uint48 lastOrderId = orders[lastOrderIndex];\\n                    orders[i] = lastOrderId;\\n                }\\n\\n                orders.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Packs order parameters into uint256\\n     */\\n    function _packOrder(\\n        ProtocolTypes.Side _side,\\n        uint256 _unitPrice,\\n        uint256 _maturity,\\n        uint256 _timestamp\\n    ) private pure returns (uint256) {\\n        return uint256(_side) | (_unitPrice << 8) | (_maturity << 24) | (_timestamp << 88);\\n    }\\n\\n    /**\\n     * @notice Unpacks order parameters from uint256\\n     */\\n    function _unpackOrder(uint256 _order)\\n        private\\n        pure\\n        returns (\\n            ProtocolTypes.Side side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            uint256 timestamp\\n        )\\n    {\\n        side = ProtocolTypes.Side(uint8(_order));\\n        unitPrice = uint16(_order >> 8);\\n        maturity = uint64(_order >> 24);\\n        timestamp = uint64(_order >> 88);\\n    }\\n\\n    function _unpackBlockUnitPriceHistory(uint80 _blockUnitPriceHistory)\\n        private\\n        pure\\n        returns (uint256[] memory prices)\\n    {\\n        prices = new uint256[](5);\\n\\n        prices[0] = uint16(_blockUnitPriceHistory);\\n        prices[1] = uint16(_blockUnitPriceHistory >> 16);\\n        prices[2] = uint16(_blockUnitPriceHistory >> 32);\\n        prices[3] = uint16(_blockUnitPriceHistory >> 48);\\n        prices[4] = uint16(_blockUnitPriceHistory >> 64);\\n    }\\n}\\n\",\"keccak256\":\"0x95631457f8e201b70dd97052899135881df51f9d389cfd0a41b302d92cc2db4f\",\"license\":\"MIT\"},\"contracts/protocol/libraries/OrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// libraries\\nimport {Constants} from \\\"../libraries/Constants.sol\\\";\\n// types\\nimport {RoundingUint256} from \\\"./math/RoundingUint256.sol\\\";\\n\\nstruct RemainingOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 unitPrice;\\n}\\n\\nstruct PartiallyRemovedOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 futureValue;\\n}\\n\\n/**\\n * @notice OrderStatisticsTreeLib is a Red-Black Tree binary search library\\n * based on the following library that is extended to manage order data.\\n *\\n * https://github.com/rob-Hitchens/OrderStatisticsTree\\n *\\n */\\nlibrary OrderStatisticsTreeLib {\\n    using RoundingUint256 for uint256;\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint48 head;\\n        uint48 tail;\\n        uint256 orderCounter;\\n        uint256 orderTotalAmount;\\n        mapping(uint256 => OrderItem) orders;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    struct OrderItem {\\n        uint48 orderId;\\n        uint48 next;\\n        uint48 prev;\\n        address maker;\\n        uint256 amount;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].right != EMPTY) {\\n            _value = self.nodes[_value].right;\\n        }\\n    }\\n\\n    function hasOrders(Tree storage self) internal view returns (bool) {\\n        return self.root != EMPTY;\\n    }\\n\\n    function next(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTreeLib: Starting value cannot be zero\\\");\\n        if (self.nodes[value].right != EMPTY) {\\n            _cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTreeLib: Starting value cannot be zero\\\");\\n        if (self.nodes[value].left != EMPTY) {\\n            _cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint256 value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        // if (self.nodes[value].parent != EMPTY) return true;\\n        uint256 cursor = value;\\n        while (self.nodes[cursor].parent != EMPTY) {\\n            uint256 parent = self.nodes[cursor].parent;\\n            if (self.nodes[parent].left != cursor && self.nodes[parent].right != cursor) {\\n                return false;\\n            }\\n            if (parent == self.root) {\\n                return true;\\n            }\\n            cursor = self.nodes[cursor].parent;\\n        }\\n        return false;\\n    }\\n\\n    function isActiveOrderId(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        return orderIdExists(self, value, orderId) && exists(self, value);\\n    }\\n\\n    function getNode(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTreeLib: Value does not exist\\\");\\n        Node storage gn = self.nodes[value];\\n        return (\\n            gn.parent,\\n            gn.left,\\n            gn.right,\\n            gn.red,\\n            gn.head,\\n            gn.tail,\\n            gn.orderCounter,\\n            gn.orderTotalAmount\\n        );\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function getNodeTotalAmount(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint256 totalAmount)\\n    {\\n        return self.nodes[value].orderTotalAmount;\\n    }\\n\\n    function getNodeOrderIds(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint48[] memory orderIds)\\n    {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[gn.head];\\n        orderIds = new uint48[](gn.orderCounter);\\n\\n        for (uint256 i; i < gn.orderCounter; i++) {\\n            orderIds[i] = order.orderId;\\n            order = gn.orders[order.next];\\n        }\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256 _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTreeLib: Value to insert cannot be zero\\\");\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                return;\\n            }\\n        }\\n\\n        Node storage nValue = self.nodes[value];\\n        // Update order info as a new one if there is already an old node\\n        if (\\n            self.root == EMPTY ||\\n            (self.nodes[cursor].left != value && self.nodes[cursor].right != value)\\n        ) {\\n            nValue.orderCounter = 0;\\n            nValue.orderTotalAmount = 0;\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        }\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTreeLib: Value to remove cannot be zero\\\");\\n        Node storage nValue = self.nodes[value];\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint256 a,\\n        uint256 b\\n    ) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    function calculateDroppedAmountFromLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 droppedValue,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV\\n        )\\n    {\\n        (droppedValue, , , droppedAmount, droppedAmountInFV, , ) = _calculateDroppedAmountFromLeft(\\n            self,\\n            amount,\\n            amountInFV,\\n            limitValue,\\n            first(self)\\n        );\\n    }\\n\\n    function calculateDroppedAmountFromRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 droppedValue,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV\\n        )\\n    {\\n        (droppedValue, , , droppedAmount, droppedAmountInFV, , ) = _calculateDroppedAmountFromRight(\\n            self,\\n            amount,\\n            amountInFV,\\n            limitValue,\\n            last(self)\\n        );\\n    }\\n\\n    function dropLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 droppedValue,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV,\\n            uint256 remainingAmount,\\n            PartiallyRemovedOrder memory partiallyRemovedOrder\\n        )\\n    {\\n        uint256 cursor = first(self);\\n        uint256 cursorNodeAmount;\\n        uint256 exceededAmount;\\n        uint256 exceededAmountInFV;\\n\\n        require(cursor <= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        (\\n            droppedValue,\\n            cursor,\\n            cursorNodeAmount,\\n            droppedAmount,\\n            droppedAmountInFV,\\n            exceededAmount,\\n            exceededAmountInFV\\n        ) = _calculateDroppedAmountFromLeft(self, amount, amountInFV, limitValue, cursor);\\n\\n        uint256 totalNodeAmount = droppedAmount + exceededAmount;\\n\\n        if (totalNodeAmount > 0) {\\n            if (exceededAmount > 0) {\\n                cursor = droppedValue;\\n                // Update order ids in the node.\\n                partiallyRemovedOrder = removeOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - exceededAmount\\n                );\\n            } else if (exceededAmountInFV > 0) {\\n                cursor = droppedValue;\\n                // Update order ids in the node.\\n                partiallyRemovedOrder = removeOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, exceededAmountInFV)\\n                );\\n            }\\n\\n            self.nodes[cursor].left = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent > cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].left = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalNodeAmount) {\\n            remainingAmount = amount - totalNodeAmount;\\n        }\\n\\n        uint256 lastNode = last(self);\\n\\n        if (lastNode == droppedValue && self.nodes[lastNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (\\n            droppedValue > self.root ||\\n            (droppedValue == self.root && droppedAmount >= totalNodeAmount)\\n        ) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToLeft(self);\\n    }\\n\\n    function dropRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 droppedValue,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV,\\n            uint256 remainingAmount,\\n            PartiallyRemovedOrder memory partiallyRemovedOrder\\n        )\\n    {\\n        uint256 cursor = last(self);\\n        uint256 cursorNodeAmount;\\n        uint256 exceededAmount;\\n        uint256 exceededAmountInFV;\\n\\n        require(cursor >= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        (\\n            droppedValue,\\n            cursor,\\n            cursorNodeAmount,\\n            droppedAmount,\\n            droppedAmountInFV,\\n            exceededAmount,\\n            exceededAmountInFV\\n        ) = _calculateDroppedAmountFromRight(self, amount, amountInFV, limitValue, cursor);\\n\\n        uint256 totalNodeAmount = droppedAmount + exceededAmount;\\n\\n        if (totalNodeAmount > 0) {\\n            if (exceededAmount > 0) {\\n                cursor = droppedValue;\\n                // Update order ids in the node.\\n                partiallyRemovedOrder = removeOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - exceededAmount\\n                );\\n            } else if (exceededAmountInFV > 0) {\\n                cursor = droppedValue;\\n                // Update order ids in the node.\\n                partiallyRemovedOrder = removeOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, exceededAmountInFV)\\n                );\\n            }\\n\\n            self.nodes[cursor].right = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent < cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].right = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalNodeAmount) {\\n            remainingAmount = amount - totalNodeAmount;\\n        }\\n\\n        uint256 firstNode = first(self);\\n\\n        if (firstNode == droppedValue && self.nodes[firstNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (\\n            droppedValue < self.root ||\\n            (droppedValue == self.root && droppedAmount >= totalNodeAmount)\\n        ) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToRight(self);\\n    }\\n\\n    function rotateTreeToLeft(Tree storage self) internal {\\n        if (self.nodes[self.root].left == 0 && self.nodes[self.root].right != 0) {\\n            if (self.nodes[self.nodes[self.root].right].left != 0) {\\n                rotateRight(self, self.nodes[self.root].right);\\n            }\\n            rotateLeft(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function rotateTreeToRight(Tree storage self) internal {\\n        if (self.nodes[self.root].right == 0 && self.nodes[self.root].left != 0) {\\n            if (self.nodes[self.nodes[self.root].left].right != 0) {\\n                rotateLeft(self, self.nodes[self.root].left);\\n            }\\n            rotateRight(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function getFutureValue(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (uint256) {\\n        return _calculateFutureValue(value, self.nodes[value].orders[orderId].amount);\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (address maker, uint256 amount) {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[orderId];\\n\\n        maker = order.maker;\\n        amount = order.amount;\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function orderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        uint48 cursor = orderId;\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[cursor];\\n\\n        if (order.orderId != cursor) {\\n            return false;\\n        }\\n\\n        while (order.prev != EMPTY) {\\n            cursor = order.prev;\\n            order = gn.orders[cursor];\\n        }\\n\\n        return cursor == gn.head;\\n    }\\n\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal {\\n        require(amount > 0, \\\"Insufficient amount\\\");\\n        require(value <= Constants.PRICE_DIGIT, \\\"Insufficient value\\\");\\n        insert(self, value);\\n\\n        addTail(self, value, orderId, user, amount);\\n    }\\n\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        amount = _removeOrder(self, value, orderId);\\n        remove(self, value);\\n    }\\n\\n    function removeOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount\\n    ) internal returns (PartiallyRemovedOrder memory partiallyRemovedOrder) {\\n        Node storage gn = self.nodes[value];\\n\\n        require(\\n            gn.orderTotalAmount >= _amount,\\n            \\\"OrderStatisticsTreeLib: Amount to remove is insufficient\\\"\\n        );\\n\\n        uint256 remainingAmount = _amount;\\n        OrderItem memory currentOrder = gn.orders[gn.head];\\n        uint48 orderId = gn.head;\\n\\n        while (orderId != 0 && remainingAmount != 0) {\\n            currentOrder = gn.orders[orderId];\\n\\n            if (currentOrder.amount <= remainingAmount) {\\n                remainingAmount -= currentOrder.amount;\\n                orderId = currentOrder.next;\\n            } else {\\n                partiallyRemovedOrder = PartiallyRemovedOrder(\\n                    currentOrder.orderId,\\n                    currentOrder.maker,\\n                    remainingAmount,\\n                    _calculateFutureValue(value, remainingAmount)\\n                );\\n                currentOrder = gn.orders[currentOrder.prev];\\n                break;\\n            }\\n        }\\n\\n        if (currentOrder.orderId != 0) {\\n            _removeOrders(self, value, currentOrder.orderId);\\n        }\\n\\n        if (partiallyRemovedOrder.amount > 0) {\\n            self.nodes[value].orders[partiallyRemovedOrder.orderId].amount -= partiallyRemovedOrder\\n                .amount;\\n            self.nodes[value].orderTotalAmount -= partiallyRemovedOrder.amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n        uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n        _link(self, _value, orderId, gn.head);\\n        _setHead(self, _value, orderId);\\n        if (gn.tail == 0) _setTail(self, _value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, _value, _orderId, _user, _amount);\\n        } else {\\n            uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n            _link(self, _value, gn.tail, orderId);\\n            _setTail(self, _value, orderId);\\n        }\\n    }\\n\\n    function _calculateDroppedAmountFromLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue,\\n        uint256 firstValue\\n    )\\n        private\\n        view\\n        returns (\\n            uint256 droppedValue,\\n            uint256 cursor,\\n            uint256 cursorNodeAmount,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV,\\n            uint256 exceededAmount,\\n            uint256 exceededAmountInFV\\n        )\\n    {\\n        cursor = firstValue;\\n\\n        while (\\n            (droppedAmount < amount || amount == EMPTY) &&\\n            (droppedAmountInFV < amountInFV || amountInFV == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor <= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            droppedValue = cursor;\\n\\n            droppedAmountInFV += _calculateFutureValue(cursor, cursorNodeAmount);\\n            droppedAmount += cursorNodeAmount;\\n\\n            if (droppedAmount > amount && amount != EMPTY) {\\n                exceededAmount = droppedAmount - amount;\\n                exceededAmountInFV = _calculateFutureValue(cursor, exceededAmount);\\n            } else if (droppedAmountInFV > amountInFV && amountInFV != EMPTY) {\\n                exceededAmountInFV = droppedAmountInFV - amountInFV;\\n                exceededAmount = _calculatePresentValue(cursor, exceededAmountInFV);\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n\\n        if (exceededAmount > 0) {\\n            droppedAmount -= exceededAmount;\\n        }\\n        if (exceededAmountInFV > 0) {\\n            droppedAmountInFV -= exceededAmountInFV;\\n        }\\n    }\\n\\n    function _calculateDroppedAmountFromRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue,\\n        uint256 lastValue\\n    )\\n        private\\n        view\\n        returns (\\n            uint256 droppedValue,\\n            uint256 cursor,\\n            uint256 cursorNodeAmount,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV,\\n            uint256 exceededAmount,\\n            uint256 exceededAmountInFV\\n        )\\n    {\\n        cursor = lastValue;\\n\\n        while (\\n            (droppedAmount < amount || amount == EMPTY) &&\\n            (droppedAmountInFV < amountInFV || amountInFV == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor >= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            droppedValue = cursor;\\n\\n            droppedAmountInFV += _calculateFutureValue(cursor, cursorNodeAmount);\\n            droppedAmount += cursorNodeAmount;\\n\\n            if (droppedAmount > amount && amount != EMPTY) {\\n                exceededAmount = droppedAmount - amount;\\n                exceededAmountInFV = _calculateFutureValue(cursor, exceededAmount);\\n            } else if (droppedAmountInFV > amountInFV && amountInFV != EMPTY) {\\n                exceededAmountInFV = droppedAmountInFV - amountInFV;\\n                exceededAmount = _calculatePresentValue(cursor, exceededAmountInFV);\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n\\n        if (exceededAmount > 0) {\\n            droppedAmount -= exceededAmount;\\n        }\\n        if (exceededAmountInFV > 0) {\\n            droppedAmountInFV -= exceededAmountInFV;\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint48) {\\n        Node storage gn = self.nodes[value];\\n        require(\\n            gn.orders[orderId].maker == address(0),\\n            \\\"OrderStatisticsTreeLib: Order id already exists\\\"\\n        );\\n\\n        gn.orderCounter += 1;\\n        gn.orderTotalAmount += amount;\\n        OrderItem memory order = OrderItem(orderId, 0, 0, user, amount);\\n        gn.orders[orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the list.\\n     */\\n    function _removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTreeLib: Order does not exist\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n        gn.orderTotalAmount -= order.amount;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItems older than or equal `orderId` from the list\\n     */\\n    function _removeOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTreeLib: Order does not exist\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n        uint256 cursor = gn.head;\\n        uint256 removedCount = 1;\\n        uint256 removedAmount = gn.orders[cursor].amount;\\n\\n        while (cursor != orderId) {\\n            cursor = gn.orders[cursor].next;\\n            removedCount++;\\n            removedAmount += gn.orders[cursor].amount;\\n        }\\n\\n        if (gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        }\\n\\n        gn.orderCounter -= removedCount;\\n        gn.orderTotalAmount -= removedAmount;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 _prevId,\\n        uint48 _nextId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[_prevId].next = _nextId;\\n        gn.orders[_nextId].prev = _prevId;\\n    }\\n\\n    function _calculateFutureValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * Constants.PRICE_DIGIT).div(unitPrice);\\n    }\\n\\n    function _calculatePresentValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * unitPrice).div(Constants.PRICE_DIGIT);\\n    }\\n}\\n\",\"keccak256\":\"0x51b3ea03bea403512eda801fc0735f94153bfcec8f3ac41d822bf6d7315e75be\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/OrderActionLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {OrderBookLib, FilledOrder, PartiallyFilledOrder} from \\\"../OrderBookLib.sol\\\";\\nimport {ProtocolTypes} from \\\"../../types/ProtocolTypes.sol\\\";\\nimport {LendingMarketStorage as Storage} from \\\"../../storages/LendingMarketStorage.sol\\\";\\n// libraries\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {AddressResolverLib} from \\\"../AddressResolverLib.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\nimport {OrderReaderLogic} from \\\"./OrderReaderLogic.sol\\\";\\n\\nlibrary OrderActionLogic {\\n    using OrderBookLib for OrderBookLib.OrderBook;\\n    using RoundingUint256 for uint256;\\n\\n    error InvalidAmount();\\n    error InvalidFutureValue();\\n    error EmptyOrderBook();\\n    error OppositeSideOrderExists();\\n\\n    struct OrderExecutionConditions {\\n        bool isFilled;\\n        uint256 executedUnitPrice;\\n        bool ignoreRemainingAmount;\\n        bool orderExists;\\n    }\\n\\n    struct PlacedOrder {\\n        uint48 orderId;\\n        uint256 amount;\\n        uint256 unitPrice;\\n    }\\n\\n    struct ExecuteOrderVars {\\n        OrderExecutionConditions conditions;\\n        PlacedOrder placedOrder;\\n        bool isCircuitBreakerTriggered;\\n        uint256 maturity;\\n    }\\n\\n    struct FillOrdersVars {\\n        uint8 orderBookId;\\n        uint256 remainingAmount;\\n        bool orderExists;\\n    }\\n\\n    event OrderCanceled(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n\\n    event OrdersCleaned(\\n        uint48[] orderIds,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 futureValue\\n    );\\n\\n    event OrderExecuted(\\n        address indexed user,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 indexed maturity,\\n        uint256 inputAmount,\\n        uint256 inputUnitPrice,\\n        uint256 filledAmount,\\n        uint256 filledUnitPrice,\\n        uint256 filledAmountInFV,\\n        uint256 feeInFV,\\n        uint48 placedOrderId,\\n        uint256 placedAmount,\\n        uint256 placedUnitPrice,\\n        bool isCircuitBreakerTriggered\\n    );\\n\\n    event PreOrderExecuted(\\n        address indexed user,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 indexed maturity,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        uint48 orderId\\n    );\\n\\n    event PositionUnwound(\\n        address indexed user,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 indexed maturity,\\n        uint256 inputFutureValue,\\n        uint256 filledAmount,\\n        uint256 filledUnitPrice,\\n        uint256 filledAmountInFV,\\n        uint256 feeInFV,\\n        bool isCircuitBreakerTriggered\\n    );\\n\\n    function cancelOrder(\\n        uint8 _orderBookId,\\n        address _user,\\n        uint48 _orderId\\n    ) external {\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n\\n        (ProtocolTypes.Side side, uint256 removedAmount, uint256 unitPrice) = orderBook.removeOrder(\\n            _user,\\n            _orderId\\n        );\\n\\n        emit OrderCanceled(\\n            _orderId,\\n            _user,\\n            side,\\n            Storage.slot().ccy,\\n            orderBook.maturity,\\n            removedAmount,\\n            unitPrice\\n        );\\n    }\\n\\n    function cleanUpOrders(uint8 _orderBookId, address _user)\\n        external\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        )\\n    {\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n        maturity = orderBook.userCurrentMaturities[_user];\\n\\n        uint48[] memory lendOrderIds;\\n        uint48[] memory borrowOrderIds;\\n\\n        (\\n            lendOrderIds,\\n            activeLendOrderCount,\\n            removedLendOrderFutureValue,\\n            removedLendOrderAmount\\n        ) = _cleanLendOrders(_orderBookId, _user);\\n\\n        (\\n            borrowOrderIds,\\n            activeBorrowOrderCount,\\n            removedBorrowOrderFutureValue,\\n            removedBorrowOrderAmount\\n        ) = _cleanBorrowOrders(_orderBookId, _user);\\n\\n        if (removedLendOrderAmount > 0) {\\n            emit OrdersCleaned(\\n                lendOrderIds,\\n                _user,\\n                ProtocolTypes.Side.LEND,\\n                Storage.slot().ccy,\\n                orderBook.maturity,\\n                removedLendOrderAmount,\\n                removedLendOrderFutureValue\\n            );\\n        }\\n\\n        if (removedBorrowOrderAmount > 0) {\\n            emit OrdersCleaned(\\n                borrowOrderIds,\\n                _user,\\n                ProtocolTypes.Side.BORROW,\\n                Storage.slot().ccy,\\n                orderBook.maturity,\\n                removedBorrowOrderAmount,\\n                removedBorrowOrderFutureValue\\n            );\\n        }\\n    }\\n\\n    function executeOrder(\\n        uint8 _orderBookId,\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice,\\n        uint256 _minimumReliableAmount\\n    )\\n        external\\n        returns (\\n            FilledOrder memory filledOrder,\\n            PartiallyFilledOrder memory partiallyFilledOrder,\\n            uint256 feeInFV\\n        )\\n    {\\n        if (_amount == 0) revert InvalidAmount();\\n\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n        orderBook.updateUserMaturity(_user);\\n\\n        ExecuteOrderVars memory vars;\\n        vars.maturity = orderBook.maturity;\\n\\n        (\\n            vars.conditions.isFilled,\\n            vars.conditions.executedUnitPrice,\\n            vars.conditions.ignoreRemainingAmount,\\n            vars.conditions.orderExists\\n        ) = orderBook.getOrderExecutionConditions(\\n            _side,\\n            _unitPrice,\\n            Storage.slot().circuitBreakerLimitRange\\n        );\\n\\n        if (_unitPrice == 0 && !vars.conditions.orderExists) revert EmptyOrderBook();\\n\\n        if (vars.conditions.isFilled) {\\n            (\\n                filledOrder,\\n                partiallyFilledOrder,\\n                vars.placedOrder,\\n                vars.isCircuitBreakerTriggered\\n            ) = _fillOrders(\\n                _orderBookId,\\n                _side,\\n                _user,\\n                _amount,\\n                vars.conditions.executedUnitPrice,\\n                vars.conditions.ignoreRemainingAmount\\n            );\\n            feeInFV = OrderReaderLogic.calculateOrderFeeAmount(\\n                vars.maturity,\\n                filledOrder.futureValue\\n            );\\n            orderBook.updateBlockUnitPriceHistory(\\n                filledOrder.amount,\\n                filledOrder.futureValue,\\n                _minimumReliableAmount\\n            );\\n        } else {\\n            if (!vars.conditions.ignoreRemainingAmount) {\\n                vars.placedOrder = PlacedOrder(\\n                    orderBook.placeOrder(_side, _user, _amount, vars.conditions.executedUnitPrice),\\n                    _amount,\\n                    vars.conditions.executedUnitPrice\\n                );\\n            }\\n\\n            vars.isCircuitBreakerTriggered = _unitPrice == 0\\n                ? vars.conditions.orderExists\\n                : _unitPrice != vars.conditions.executedUnitPrice;\\n        }\\n\\n        emit OrderExecuted(\\n            _user,\\n            _side,\\n            Storage.slot().ccy,\\n            vars.maturity,\\n            _amount,\\n            _unitPrice,\\n            filledOrder.amount,\\n            filledOrder.unitPrice,\\n            filledOrder.futureValue,\\n            feeInFV,\\n            vars.placedOrder.orderId,\\n            vars.placedOrder.amount,\\n            vars.placedOrder.unitPrice,\\n            vars.isCircuitBreakerTriggered\\n        );\\n    }\\n\\n    function executePreOrder(\\n        uint8 _orderBookId,\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) external {\\n        if (_amount == 0) revert InvalidAmount();\\n\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n        orderBook.updateUserMaturity(_user);\\n\\n        if (\\n            (_side == ProtocolTypes.Side.LEND && orderBook.hasBorrowOrder(_user)) ||\\n            (_side == ProtocolTypes.Side.BORROW && orderBook.hasLendOrder(_user))\\n        ) {\\n            revert OppositeSideOrderExists();\\n        }\\n\\n        uint48 orderId = orderBook.placeOrder(_side, _user, _amount, _unitPrice);\\n        orderBook.isPreOrder[orderId] = true;\\n\\n        emit PreOrderExecuted(\\n            _user,\\n            _side,\\n            Storage.slot().ccy,\\n            orderBook.maturity,\\n            _amount,\\n            _unitPrice,\\n            orderId\\n        );\\n    }\\n\\n    function unwindPosition(\\n        uint8 _orderBookId,\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _futureValue,\\n        uint256 _minimumReliableAmount\\n    )\\n        external\\n        returns (\\n            FilledOrder memory filledOrder,\\n            PartiallyFilledOrder memory partiallyFilledOrder,\\n            uint256 feeInFV\\n        )\\n    {\\n        if (_futureValue == 0) revert InvalidFutureValue();\\n\\n        OrderExecutionConditions memory conditions;\\n        bool isCircuitBreakerTriggered;\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n        uint256 maturity = orderBook.maturity;\\n\\n        (\\n            conditions.isFilled,\\n            conditions.executedUnitPrice,\\n            conditions.ignoreRemainingAmount,\\n            conditions.orderExists\\n        ) = orderBook.getOrderExecutionConditions(\\n            _side,\\n            0,\\n            Storage.slot().circuitBreakerLimitRange\\n        );\\n\\n        if (!conditions.orderExists) revert EmptyOrderBook();\\n\\n        if (conditions.isFilled) {\\n            (filledOrder, partiallyFilledOrder, isCircuitBreakerTriggered) = _unwindPosition(\\n                _orderBookId,\\n                _side,\\n                _futureValue,\\n                conditions.executedUnitPrice\\n            );\\n            feeInFV = OrderReaderLogic.calculateOrderFeeAmount(maturity, filledOrder.futureValue);\\n            orderBook.updateBlockUnitPriceHistory(\\n                filledOrder.amount,\\n                filledOrder.futureValue,\\n                _minimumReliableAmount\\n            );\\n        } else {\\n            isCircuitBreakerTriggered = conditions.orderExists;\\n        }\\n\\n        emit PositionUnwound(\\n            _user,\\n            _side,\\n            Storage.slot().ccy,\\n            maturity,\\n            _futureValue,\\n            filledOrder.amount,\\n            filledOrder.unitPrice,\\n            filledOrder.futureValue,\\n            feeInFV,\\n            isCircuitBreakerTriggered\\n        );\\n    }\\n\\n    function _cleanLendOrders(uint8 _orderBookId, address _user)\\n        internal\\n        returns (\\n            uint48[] memory orderIds,\\n            uint256 activeOrderCount,\\n            uint256 removedFutureValue,\\n            uint256 removedOrderAmount\\n        )\\n    {\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n\\n        (uint48[] memory activeLendOrderIds, uint48[] memory inActiveLendOrderIds) = orderBook\\n            .getLendOrderIds(_user);\\n\\n        orderBook.activeLendOrderIds[_user] = activeLendOrderIds;\\n        activeOrderCount = activeLendOrderIds.length;\\n        uint256 inactiveOrderCount = inActiveLendOrderIds.length;\\n        orderIds = new uint48[](inactiveOrderCount);\\n\\n        for (uint256 i; i < inactiveOrderCount; i++) {\\n            (uint256 presentValue, uint256 futureValue) = OrderReaderLogic.getLendOrderAmounts(\\n                orderBook,\\n                inActiveLendOrderIds[i]\\n            );\\n\\n            removedOrderAmount += presentValue;\\n            removedFutureValue += futureValue;\\n            orderIds[i] = inActiveLendOrderIds[i];\\n        }\\n    }\\n\\n    function _cleanBorrowOrders(uint8 _orderBookId, address _user)\\n        internal\\n        returns (\\n            uint48[] memory orderIds,\\n            uint256 activeOrderCount,\\n            uint256 removedFutureValue,\\n            uint256 removedOrderAmount\\n        )\\n    {\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n\\n        (uint48[] memory activeBorrowOrderIds, uint48[] memory inActiveBorrowOrderIds) = orderBook\\n            .getBorrowOrderIds(_user);\\n\\n        orderBook.activeBorrowOrderIds[_user] = activeBorrowOrderIds;\\n        activeOrderCount = activeBorrowOrderIds.length;\\n        uint256 inactiveOrderCount = inActiveBorrowOrderIds.length;\\n        orderIds = new uint48[](inactiveOrderCount);\\n\\n        for (uint256 i; i < inactiveOrderCount; i++) {\\n            (uint256 presentValue, uint256 futureValue) = OrderReaderLogic.getBorrowOrderAmounts(\\n                orderBook,\\n                inActiveBorrowOrderIds[i]\\n            );\\n\\n            removedOrderAmount += presentValue;\\n            removedFutureValue += futureValue;\\n            orderIds[i] = inActiveBorrowOrderIds[i];\\n        }\\n    }\\n\\n    /**\\n     * @notice Fills orders in the order book.\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _user User's address\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _unitPrice Unit price taken\\n     * @param _ignoreRemainingAmount Boolean for whether to ignore the remaining amount after filling orders\\n     */\\n    function _fillOrders(\\n        uint8 _orderBookId,\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice,\\n        bool _ignoreRemainingAmount\\n    )\\n        private\\n        returns (\\n            FilledOrder memory filledOrder,\\n            PartiallyFilledOrder memory partiallyFilledOrder,\\n            PlacedOrder memory placedOrder,\\n            bool isCircuitBreakerTriggered\\n        )\\n    {\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n        FillOrdersVars memory vars;\\n        vars.orderBookId = _orderBookId;\\n\\n        (filledOrder, partiallyFilledOrder, vars.remainingAmount, vars.orderExists) = orderBook\\n            .fillOrders(_side, _amount, 0, _unitPrice);\\n        filledOrder.amount = _amount - vars.remainingAmount;\\n\\n        if (vars.remainingAmount > 0) {\\n            if (_ignoreRemainingAmount) {\\n                filledOrder.ignoredAmount = vars.remainingAmount;\\n            } else {\\n                // Place a new order with the remaining amount of the input amount\\n                placedOrder = PlacedOrder(\\n                    orderBook.placeOrder(_side, _user, vars.remainingAmount, _unitPrice),\\n                    vars.remainingAmount,\\n                    _unitPrice\\n                );\\n            }\\n        }\\n\\n        isCircuitBreakerTriggered =\\n            vars.orderExists &&\\n            _ignoreRemainingAmount &&\\n            _amount != filledOrder.amount;\\n    }\\n\\n    function _unwindPosition(\\n        uint8 _orderBookId,\\n        ProtocolTypes.Side _side,\\n        uint256 _futureValue,\\n        uint256 _unitPrice\\n    )\\n        private\\n        returns (\\n            FilledOrder memory filledOrder,\\n            PartiallyFilledOrder memory partiallyFilledOrder,\\n            bool isCircuitBreakerTriggered\\n        )\\n    {\\n        bool orderExists;\\n        uint256 futureValueWithFee;\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n        uint256 maturity = orderBook.maturity;\\n        uint256 currentMaturity = maturity >= block.timestamp ? maturity - block.timestamp : 0;\\n\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            // To unwind all positions, calculate the future value taking into account\\n            // the added portion of the fee.\\n            // NOTE: The formula is:\\n            // actualRate = feeRate * (currentMaturity / SECONDS_IN_YEAR)\\n            // amount = totalAmountInFV / (1 + actualRate)\\n            futureValueWithFee = (_futureValue * Constants.SECONDS_IN_YEAR * Constants.PCT_DIGIT)\\n                .div(\\n                    Constants.SECONDS_IN_YEAR *\\n                        Constants.PCT_DIGIT +\\n                        (Storage.slot().orderFeeRate * currentMaturity)\\n                );\\n        } else {\\n            // To unwind all positions, calculate the future value taking into account\\n            // the subtracted portion of the fee.\\n            // NOTE: The formula is:\\n            // actualRate = feeRate * (currentMaturity / SECONDS_IN_YEAR)\\n            // amount = totalAmountInFV / (1 - actualRate)\\n            futureValueWithFee = (_futureValue * Constants.SECONDS_IN_YEAR * Constants.PCT_DIGIT)\\n                .div(\\n                    Constants.SECONDS_IN_YEAR *\\n                        Constants.PCT_DIGIT -\\n                        (Storage.slot().orderFeeRate * currentMaturity)\\n                );\\n        }\\n\\n        (filledOrder, partiallyFilledOrder, , orderExists) = orderBook.fillOrders(\\n            _side,\\n            0,\\n            futureValueWithFee,\\n            _unitPrice\\n        );\\n\\n        isCircuitBreakerTriggered = orderExists && _futureValue != filledOrder.futureValue;\\n    }\\n\\n    function _getOrderBook(uint8 _orderBookId)\\n        private\\n        view\\n        returns (OrderBookLib.OrderBook storage)\\n    {\\n        return Storage.slot().orderBooks[_orderBookId];\\n    }\\n}\\n\",\"keccak256\":\"0x197df5ab9d8e43bae3209dcf02b73c66876f7aa102e0088d033cb54aeda16fbf\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/OrderReaderLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {OrderBookLib, PlacedOrder} from \\\"../OrderBookLib.sol\\\";\\nimport {ProtocolTypes} from \\\"../../types/ProtocolTypes.sol\\\";\\nimport {LendingMarketStorage as Storage, ItayoseLog} from \\\"../../storages/LendingMarketStorage.sol\\\";\\nimport {OrderStatisticsTreeLib} from \\\"../OrderStatisticsTreeLib.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\n\\nlibrary OrderReaderLogic {\\n    using OrderBookLib for OrderBookLib.OrderBook;\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n    using RoundingUint256 for uint256;\\n\\n    function getOrder(uint8 _orderBookId, uint48 _orderId)\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp,\\n            bool isPreOrder\\n        )\\n    {\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n        PlacedOrder memory order = orderBook.getOrder(_orderId);\\n\\n        if (order.side == ProtocolTypes.Side.LEND) {\\n            (maker, amount) = orderBook.lendOrders[order.maturity].getOrderById(\\n                order.unitPrice,\\n                _orderId\\n            );\\n        } else {\\n            (maker, amount) = orderBook.borrowOrders[order.maturity].getOrderById(\\n                order.unitPrice,\\n                _orderId\\n            );\\n        }\\n\\n        if (maker != address(0)) {\\n            side = order.side;\\n            maturity = order.maturity;\\n            timestamp = order.timestamp;\\n            isPreOrder = orderBook.isPreOrder[_orderId];\\n            unitPrice = _getOrderUnitPrice(side, maturity, order.unitPrice, isPreOrder);\\n        }\\n    }\\n\\n    function getTotalAmountFromLendOrders(uint8 _orderBookId, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n\\n        (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds) = orderBook\\n            .getLendOrderIds(_user);\\n        maturity = orderBook.userCurrentMaturities[_user];\\n\\n        for (uint256 i; i < activeOrderIds.length; ) {\\n            PlacedOrder memory order = orderBook.getOrder(activeOrderIds[i]);\\n            // Sum future values in the current maturity.\\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\\n            // as an order canceled in the past market.\\n            (, uint256 orderAmount) = orderBook.lendOrders[orderBook.maturity].getOrderById(\\n                order.unitPrice,\\n                activeOrderIds[i]\\n            );\\n            activeAmount += orderAmount;\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        for (uint256 i; i < inActiveOrderIds.length; ) {\\n            // Sum future values in the maturity of orders.\\n            // It will be the future value when the order is created, even if the market is rotated\\n            // and maturity is updated.\\n            (uint256 presentValue, uint256 futureValue) = getLendOrderAmounts(\\n                orderBook,\\n                inActiveOrderIds[i]\\n            );\\n            inactiveAmount += presentValue;\\n            inactiveFutureValue += futureValue;\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function getTotalAmountFromBorrowOrders(uint8 _orderBookId, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n\\n        (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds) = orderBook\\n            .getBorrowOrderIds(_user);\\n        maturity = orderBook.userCurrentMaturities[_user];\\n\\n        for (uint256 i; i < activeOrderIds.length; ) {\\n            PlacedOrder memory order = orderBook.getOrder(activeOrderIds[i]);\\n            // Sum future values in the current maturity.\\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\\n            // as an order canceled in the past market.\\n            (, uint256 orderAmount) = orderBook.borrowOrders[orderBook.maturity].getOrderById(\\n                order.unitPrice,\\n                activeOrderIds[i]\\n            );\\n            activeAmount += orderAmount;\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        maturity = orderBook.userCurrentMaturities[_user];\\n\\n        for (uint256 i; i < inActiveOrderIds.length; ) {\\n            // Sum future values in the maturity of orders\\n            // It will be the future value when the order is created, even if the market is rotated\\n            // and maturity is updated.\\n            (uint256 presentValue, uint256 futureValue) = getBorrowOrderAmounts(\\n                orderBook,\\n                inActiveOrderIds[i]\\n            );\\n            inactiveAmount += presentValue;\\n            inactiveFutureValue += futureValue;\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function getLendOrderIds(uint8 _orderBookId, address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        (activeOrderIds, inActiveOrderIds) = _getOrderBook(_orderBookId).getLendOrderIds(_user);\\n    }\\n\\n    function getBorrowOrderIds(uint8 _orderBookId, address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        (activeOrderIds, inActiveOrderIds) = _getOrderBook(_orderBookId).getBorrowOrderIds(_user);\\n    }\\n\\n    function calculateFilledAmount(\\n        uint8 _orderBookId,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV,\\n            uint256 orderFeeInFV,\\n            uint256 placedAmount\\n        )\\n    {\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n\\n        (bool isFilled, uint256 executedUnitPrice, bool ignoreRemainingAmount, ) = orderBook\\n            .getOrderExecutionConditions(\\n                _side,\\n                _unitPrice,\\n                Storage.slot().circuitBreakerLimitRange\\n            );\\n\\n        if (isFilled) {\\n            (lastUnitPrice, filledAmount, filledAmountInFV) = orderBook.calculateFilledAmount(\\n                _side,\\n                _amount,\\n                executedUnitPrice\\n            );\\n            placedAmount = _amount - filledAmount;\\n            orderFeeInFV = calculateOrderFeeAmount(orderBook.maturity, filledAmountInFV);\\n        } else {\\n            if (!ignoreRemainingAmount) {\\n                placedAmount = _amount;\\n            }\\n        }\\n    }\\n\\n    function calculateOrderFeeAmount(uint256 _maturity, uint256 _amount)\\n        public\\n        view\\n        returns (uint256 orderFeeAmount)\\n    {\\n        if (block.timestamp >= _maturity) return 0;\\n\\n        uint256 currentMaturity = _maturity - block.timestamp;\\n\\n        // NOTE: The formula is:\\n        // actualRate = feeRate * (currentMaturity / SECONDS_IN_YEAR)\\n        // orderFeeAmount = amount * actualRate\\n        orderFeeAmount = (Storage.slot().orderFeeRate * currentMaturity * _amount).div(\\n            Constants.SECONDS_IN_YEAR * Constants.PCT_DIGIT\\n        );\\n    }\\n\\n    function getLendOrderAmounts(OrderBookLib.OrderBook storage orderBook, uint48 _orderId)\\n        public\\n        view\\n        returns (uint256 presentValue, uint256 futureValue)\\n    {\\n        PlacedOrder memory order = orderBook.getOrder(_orderId);\\n        (, uint256 orderAmount) = orderBook.lendOrders[order.maturity].getOrderById(\\n            order.unitPrice,\\n            _orderId\\n        );\\n\\n        uint256 unitPrice = _getOrderUnitPrice(\\n            order.side,\\n            order.maturity,\\n            order.unitPrice,\\n            orderBook.isPreOrder[_orderId]\\n        );\\n\\n        presentValue = orderAmount;\\n        futureValue = (orderAmount * Constants.PRICE_DIGIT).div(unitPrice);\\n    }\\n\\n    function getBorrowOrderAmounts(OrderBookLib.OrderBook storage orderBook, uint48 _orderId)\\n        public\\n        view\\n        returns (uint256 presentValue, uint256 futureValue)\\n    {\\n        PlacedOrder memory order = orderBook.getOrder(_orderId);\\n        (, uint256 orderAmount) = orderBook.borrowOrders[order.maturity].getOrderById(\\n            order.unitPrice,\\n            _orderId\\n        );\\n        uint256 unitPrice = _getOrderUnitPrice(\\n            order.side,\\n            order.maturity,\\n            order.unitPrice,\\n            orderBook.isPreOrder[_orderId]\\n        );\\n\\n        presentValue = orderAmount;\\n        futureValue = (orderAmount * Constants.PRICE_DIGIT).div(unitPrice);\\n    }\\n\\n    function _getOrderUnitPrice(\\n        ProtocolTypes.Side _side,\\n        uint256 _maturity,\\n        uint256 _unitPrice,\\n        bool _isPreOrder\\n    ) private view returns (uint256) {\\n        if (!_isPreOrder) return _unitPrice;\\n        ItayoseLog memory itayoseLog = Storage.slot().itayoseLogs[_maturity];\\n        if (\\n            itayoseLog.openingUnitPrice != 0 &&\\n            ((_side == ProtocolTypes.Side.BORROW && _unitPrice <= itayoseLog.lastBorrowUnitPrice) ||\\n                (_side == ProtocolTypes.Side.LEND && _unitPrice >= itayoseLog.lastLendUnitPrice))\\n        ) {\\n            return itayoseLog.openingUnitPrice;\\n        } else {\\n            return _unitPrice;\\n        }\\n    }\\n\\n    function _getOrderBook(uint8 _orderBookId)\\n        private\\n        view\\n        returns (OrderBookLib.OrderBook storage)\\n    {\\n        return Storage.slot().orderBooks[_orderBookId];\\n    }\\n}\\n\",\"keccak256\":\"0xfe895e4ee7f0b7fb02912fade2821e213dc23476e5068e9dbc55883f4694a77b\",\"license\":\"MIT\"},\"contracts/protocol/libraries/math/RoundingUint256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoundingUint256 {\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0);\\n\\n        if ((a * 10) / b - (a / b) * 10 < 5) {\\n            return a / b;\\n        } else {\\n            return (a / b) + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc360f39a82f1a9a7454726e3db802407d305b5e525aa8c3236fe49ca6ca534d\",\"license\":\"MIT\"},\"contracts/protocol/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../dependencies/chainlink/AggregatorV3Interface.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct PriceFeed {\\n    AggregatorV3Interface[] instances;\\n    uint256 heartbeat;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.currencyController\\\");\\n\\n    struct Storage {\\n        // Protocol currencies\\n        EnumerableSet.Bytes32Set currencies;\\n        mapping(bytes32 => uint256) haircuts;\\n        // Total cached decimals of the price feeds\\n        mapping(bytes32 => uint8) decimalsCaches;\\n        // Mapping from currency to price feed\\n        mapping(bytes32 => PriceFeed) priceFeeds;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2391452e53ba1ee96fd57919d6833317ee4bbb2977363dd4476ad3464c43d0b4\",\"license\":\"MIT\"},\"contracts/protocol/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nstruct AutoRollLog {\\n    uint256 unitPrice;\\n    uint256 lendingCompoundFactor;\\n    uint256 borrowingCompoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.genesisValueVault\\\");\\n\\n    struct Storage {\\n        mapping(bytes32 => bool) isInitialized;\\n        mapping(bytes32 => uint256) initialCompoundFactors;\\n        mapping(bytes32 => uint256) lendingCompoundFactors;\\n        mapping(bytes32 => uint256) borrowingCompoundFactors;\\n        mapping(bytes32 => uint256) currentMaturity;\\n        mapping(bytes32 => uint8) decimals;\\n        // Mapping from user to balance per currency\\n        mapping(bytes32 => mapping(address => int256)) balances;\\n        mapping(bytes32 => uint256) totalLendingSupplies;\\n        mapping(bytes32 => uint256) totalBorrowingSupplies;\\n        // Mapping from maturity balance per currency\\n        mapping(bytes32 => mapping(uint256 => int256)) maturityBalances;\\n        // Mapping from maturity to auto-roll log per currency\\n        mapping(bytes32 => mapping(uint256 => AutoRollLog)) autoRollLogs;\\n        // Mapping from user to maturity per currency\\n        mapping(bytes32 => mapping(address => uint256)) userMaturities;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x887ce7f8c0dbbd8c7f6310e109fa6bf14b5520068d299fcf224faae13bd8de46\",\"license\":\"MIT\"},\"contracts/protocol/storages/LendingMarketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {OrderStatisticsTreeLib} from \\\"../libraries/OrderStatisticsTreeLib.sol\\\";\\nimport {OrderBookLib} from \\\"../libraries/OrderBookLib.sol\\\";\\n\\nstruct ItayoseLog {\\n    uint256 openingUnitPrice;\\n    uint256 lastLendUnitPrice;\\n    uint256 lastBorrowUnitPrice;\\n}\\n\\nlibrary LendingMarketStorage {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarket\\\");\\n\\n    struct Storage {\\n        bytes32 ccy;\\n        uint8 lastOrderBookId;\\n        // Order fee rate received by protocol (in basis point)\\n        uint256 orderFeeRate;\\n        // Rate limit range of yield for the circuit breaker\\n        uint256 circuitBreakerLimitRange;\\n        // Mapping from order book id to order book\\n        mapping(uint8 => OrderBookLib.OrderBook) orderBooks;\\n        // Mapping from maturity to boolean if the market is ready or not per maturity\\n        mapping(uint256 => bool) isReady;\\n        // // Mapping from maturity to Itayose log\\n        mapping(uint256 => ItayoseLog) itayoseLogs;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfdf72a429c0b4e97c4dc09ce5bc5ae4f39ab90678d33211589992eb7a53d870a\",\"license\":\"MIT\"},\"contracts/protocol/storages/mixins/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressResolver} from \\\"../../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.mixinAddressResolver\\\");\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 => address) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44cd2358adc27b82cf3b9a498ada2646991684634ee0f3d67a42ecebd333a9d3\",\"license\":\"MIT\"},\"contracts/protocol/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0x7b05f97661e6dfe1142eec9be3dcf86d1eec55ed4fb1dea4a5859f75a0c84c13\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x614ecb61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c8063447265be14610066578063ad89fe1a146100f1578063ed94d50f14610111578063f3f7f45214610133578063f506ad3014610153575b600080fd5b81801561007257600080fd5b5061008661008136600461497f565b6101a8565b604080518451815260208086015181830152858301518284015260609586015186830152845165ffffffffffff1660808301528401516001600160a01b031660a08201529083015160c0820152929091015160e0830152610100820152610120015b60405180910390f35b8180156100fd57600080fd5b5061008661010c3660046149de565b6104f0565b81801561011d57600080fd5b5061013161012c3660046149de565b61071d565b005b81801561013f57600080fd5b5061013161014e366004614a33565b61087a565b81801561015f57600080fd5b5061017361016e366004614a85565b610909565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016100e8565b6101d36040518060800160405280600081526020016000815260200160008152602001600081525090565b6101db614845565b6000856101fb5760405163162908e360e11b815260040160405180910390fd5b60006102068a610a45565b90506102128189610a78565b604080516101008101825260006080820181815260a0830182905260c0830182905260e08301829052825282516060808201855282825260208083018490528286018490528401919091529282015260048301549181019190915261028f8a88600080516020614e768339815191525b6003015485929190610b22565b84519015156060820152901515604082015260208101919091529015159052861580156102bf5750805160600151155b156102dd57604051630ae548fd60e11b815260040160405180910390fd5b805151156103d0576103038b8b8b8b856000015160200151866000015160400151610c27565b15156040808601919091526020850191909152606084015183820151915163601104bd60e11b815293985091965073ca5C1F6c42237a358D6C047341f11efDCB97Dab69263c022097a92610364929091600401918252602082015260400190565b60206040518083038186803b15801561037c57600080fd5b505af4158015610390573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b49190614ab8565b855160408701519194506103cb9184919089610d74565b61044d565b80516040015161042a5760405180606001604052806104068c8c8c86600001516020015188610ee690949392919063ffffffff16565b65ffffffffffff16815260208082018b905283518101516040909201919091528201525b861561043e57805160200151871415610445565b8051606001515b151560408201525b6060810151600080516020614e76833981519152600001548a6001600160a01b03167f2b4d4aa0b23575a6ce7bb1f8a7d3c2f8bdd72e336356047bb2e606d9363760158d8c8c8b600001518c602001518d604001518c8b60200151600001518c60200151602001518d60200151604001518e604001516040516104da9b9a99989796959493929190614b09565b60405180910390a4505096509650969350505050565b61051b6040518060800160405280600081526020016000815260200160008152602001600081525090565b610523614845565b60008461054357604051636d2b73c560e11b815260040160405180910390fd5b604080516080810182526000808252602082018190529181018290526060810182905290806105718b610a45565b60048101549091506105938b6000600080516020614e76833981519152610282565b1515606088018190529015156040880152602087019190915290151585526105ce57604051630ae548fd60e11b815260040160405180910390fd5b835115610699576105e58c8c8b8760200151611049565b604083810151905163601104bd60e11b8152600481018690526024810191909152929950909750935073ca5C1F6c42237a358D6C047341f11efDCB97Dab69063c022097a9060440160206040518083038186803b15801561064557600080fd5b505af4158015610659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067d9190614ab8565b87516040890151919650610694918491908b610d74565b6106a1565b836060015192505b80600080516020614e76833981519152600001548b6001600160a01b03167fe4afd68f87d14439f7e6df3debc4983a8c0066cd2a5469dbbc4ce5b9a8bedb708e8d8c600001518d602001518e604001518d8c6040516107069796959493929190614b6f565b60405180910390a450505050955095509592505050565b8161073b5760405163162908e360e11b815260040160405180910390fd5b600061074686610a45565b90506107528185610a78565b600085600181111561076657610766614ad1565b148015610778575061077881856111c0565b806107b85750600185600181111561079257610792614ad1565b1480156107b857506001600160a01b038416600090815260058201602052604090205415155b156107d657604051631893733560e31b815260040160405180910390fd5b60006107e58287878787610ee6565b65ffffffffffff811660009081526009840160205260409020805460ff191660011790556004830154909150610826600080516020614e7683398151915290565b60000154866001600160a01b03167fe5bd5bc42fd564596c82c75ff1f40630d9c4ff3cfc0568a7bd45dbcf2bcee2c5898888876040516108699493929190614baf565b60405180910390a450505050505050565b600061088584610a45565b9050600080806108968487876111e4565b925092509250856001600160a01b03167f8a73e656799f8fbd4ea08e9420225176f98f85ef9a2a11a5a011580b65c8f14586856108de600080516020614e7683398151915290565b5460048901546040516108f8949392919089908990614be0565b60405180910390a250505050505050565b60008060008060008060008061091e8a610a45565b6001600160a01b038a1660009081526007820160205260409020549250905060608061094a8c8c61131d565b919c5099509650915061095d8c8c611506565b919b5098509550905085156109ce57600080516020614e76833981519152600001548b6001600160a01b03167f055a5e3b875d6074396a3180bcea85a0f751dbf1c69ef5570c5f9bbaca6aa7fa84600087600401548b8e6040516109c5959493929190614c1f565b60405180910390a35b8415610a3657600080516020614e76833981519152600001548b6001600160a01b03167f055a5e3b875d6074396a3180bcea85a0f751dbf1c69ef5570c5f9bbaca6aa7fa83600187600401548a8d604051610a2d959493929190614c1f565b60405180910390a35b50505092959891949750929550565b60ff1660009081527ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0e6020526040902090565b6001600160a01b03811660009081526007830160205260409020546004830154808214610b1c576001600160a01b0383166000908152600585016020526040902054151580610ae057506001600160a01b038316600090815260068501602052604090205415155b15610afe57604051634bab5e2760e11b815260040160405180910390fd5b6001600160a01b038316600090815260078501602052604090208190555b50505050565b60008080808080886001811115610b3b57610b3b614ad1565b1490506000808215610b785760048b01546000908152600b8c0160205260409020610b65906116e1565b9050610b718b89611728565b9150610ba5565b60048b01546000908152600a8c0160205260409020610b96906117a5565b9050610ba28b896117e7565b91505b8015159350881580610be45750838015610bbe57508115155b8015610be45750828015610bd157508189115b80610be4575082158015610be457508189105b15610bf55781955060019450610bfd565b889550600094505b8315610c195782610c115785811015610c16565b858111155b96505b505050945094509450949050565b610c526040518060800160405280600081526020016000815260200160008152602001600081525090565b610c5a614845565b610c866040518060600160405280600065ffffffffffff16815260200160008152602001600081525090565b600080610c928b610a45565b6040805160608101825260006020820181905291810182905260ff8e168152919250610cc49083908d908c908c61184b565b15156040850152602084018190529197509550610ce1908a614ca6565b8652602081015115610d48578615610d025760208101516060870152610d48565b6040518060600160405280610d2a8d8d85602001518d88610ee690949392919063ffffffff16565b65ffffffffffff168152602001826020015181526020018981525093505b80604001518015610d565750865b8015610d63575085518914155b925050509650965096509692505050565b8354600090610d9290600160681b90046001600160501b031661199e565b600081518110610da457610da4614cbd565b6020908102919091010151855490915065ffffffffffff600160301b909104164314610e73578454600160601b900460ff1615610e3557610dfb85600201546127108760010154610df59190614cd3565b90611aae565b855469ffffffffffffffffffff60681b19811661ffff8316600160681b9283900460101b69ffffffffffffffff0000161790910217865590505b845460018601859055600286018490556cffffffffffffff0000000000001916600160301b4365ffffffffffff160260ff60601b1916178555610ea8565b83856001016000828254610e879190614cf2565b9250508190555082856002016000828254610ea29190614cf2565b90915550505b818560010154101580610ec8575060008560010154118015610ec8575080155b15610edf57845460ff60601b1916600160601b1785555b5050505050565b6000610ef186611b1f565b9050610f038583886004015442611b61565b65ffffffffffff82166000908152600888016020526040812091909155856001811115610f3257610f32614ad1565b1415610faf5760048601546000908152600a870160205260409020610f5a9083838787611b90565b6001600160a01b0384166000908152600587810160209081526040832080546001810182559084529220818304018054919092066006026101000a65ffffffffffff8181021990921691841602179055611040565b6001856001811115610fc357610fc3614ad1565b14156110405760048601546000908152600b870160205260409020610feb9083838787611b90565b6001600160a01b038416600090815260068781016020908152604083208054600181018255908452922060058084049091018054919093069091026101000a65ffffffffffff81810219909216918416021790555b95945050505050565b6110746040518060800160405280600081526020016000815260200160008152602001600081525090565b61107c614845565b60008060008061108b8a610a45565b60048101549091506000428210156110a45760006110ae565b6110ae4283614ca6565b905060018b60018111156110c4576110c4614ad1565b1415611137577ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0c54611130906110fb908390614cd3565b61110b6127106301e13380614cd3565b6111159190614cf2565b6127106111266301e133808e614cd3565b610df59190614cd3565b9350611185565b7ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0c5461118290611168908390614cd3565b6111786127106301e13380614cd3565b6111159190614ca6565b93505b611193838c6000878d61184b565b929a5090985090955085905080156111af575087604001518a14155b955050505050509450945094915050565b6001600160a01b038116600090815260068301602052604090205415155b92915050565b60008060008060006112128860080160008865ffffffffffff16815260200190815260200160002054611c39565b509193509150600090508083600181111561122f5761122f614ad1565b14156112895760048901546000908152600a8a0160205260409020611255908389611c7f565b6001600160a01b038916600090815260058b01602052604090209091506112849065ffffffffffff8916611c9f565b6112f2565b600183600181111561129d5761129d614ad1565b14156112f25760048901546000908152600b8a01602052604090206112c3908389611c7f565b6001600160a01b038916600090815260068b01602052604090209091506112f29065ffffffffffff8916611c9f565b65ffffffffffff8716600090815260088a016020526040812055919450909250905093509350939050565b606060008060008061132e87610a45565b905060008061133d8389611def565b6001600160a01b038a1660009081526005860160209081526040909120835193955091935061136f929085019061487e565b50815181519096508067ffffffffffffffff81111561139057611390614d0a565b6040519080825280602002602001820160405280156113b9578160200160208202803683370190505b50975060005b818110156114f85760008073ca5C1F6c42237a358D6C047341f11efDCB97Dab6633d0157ef888786815181106113f7576113f7614cbd565b60200260200101516040518363ffffffff1660e01b815260040161142d92919091825265ffffffffffff16602082015260400190565b604080518083038186803b15801561144457600080fd5b505af4158015611458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147c9190614d20565b909250905061148b8289614cf2565b9750611497818a614cf2565b98508483815181106114ab576114ab614cbd565b60200260200101518b84815181106114c5576114c5614cbd565b602002602001019065ffffffffffff16908165ffffffffffff1681525050505080806114f090614d44565b9150506113bf565b505050505092959194509250565b606060008060008061151787610a45565b9050600080611526838961208c565b6001600160a01b038a16600090815260068601602090815260409091208351939550919350611558929085019061487e565b50815181519096508067ffffffffffffffff81111561157957611579614d0a565b6040519080825280602002602001820160405280156115a2578160200160208202803683370190505b50975060005b818110156114f85760008073ca5C1F6c42237a358D6C047341f11efDCB97Dab663c8707723888786815181106115e0576115e0614cbd565b60200260200101516040518363ffffffff1660e01b815260040161161692919091825265ffffffffffff16602082015260400190565b604080518083038186803b15801561162d57600080fd5b505af4158015611641573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116659190614d20565b90925090506116748289614cf2565b9750611680818a614cf2565b985084838151811061169457611694614cbd565b60200260200101518b84815181106116ae576116ae614cbd565b602002602001019065ffffffffffff16908165ffffffffffff1681525050505080806116d990614d44565b9150506115a8565b8054806116f057506000919050565b5b6000818152600180840160205260409091200154156117235760009081526001808301602052604090912001546116f1565b919050565b60008061173684600361231a565b905061175f612710611749856002614cd3565b61175590612710614cf2565b610df59084614cd3565b915061271082118061176f575080155b1561177e57612710915061179e565b611789606482614cf2565b82101561179e5761179b606482614cf2565b91505b5092915050565b8054806117b457506000919050565b5b6000818152600183016020526040902060020154156117235760009081526001820160205260409020600201546117b5565b6000806117f584600561231a565b90506118076127106117558582614ca6565b9150811580611814575080155b80611820575060648111155b1561182e576001915061179e565b611839606483614cf2565b81101561179e5761179b606482614ca6565b6118766040518060800160405280600081526020016000815260200160008152602001600081525090565b61187e614845565b600080611889614845565b600189600181111561189d5761189d614ad1565b14156118ed5760048a01546000908152600a8b01602052604090206118c4818a8a8a61244a565b60408b01929092529189526020890192909252945091506118e58154151590565b92505061194d565b600089600181111561190157611901614ad1565b141561194d5760048a01546000908152600b8b0160205260409020611928818a8a8a612695565b60408b01929092529189526020890192909252945091506119498154151590565b9250505b6040518060800160405280826000015165ffffffffffff16815260200182602001516001600160a01b0316815260200182604001518152602001826060015181525093505095509550955095915050565b60408051600580825260c082019092526060916020820160a0803683370190505090508161ffff16816000815181106119d9576119d9614cbd565b6020026020010181815250506010826001600160501b0316901c61ffff1681600181518110611a0a57611a0a614cbd565b6020026020010181815250506020826001600160501b0316901c61ffff1681600281518110611a3b57611a3b614cbd565b6020026020010181815250506030826001600160501b0316901c61ffff1681600381518110611a6c57611a6c614cbd565b6020026020010181815250506040826001600160501b0316901c61ffff1681600481518110611a9d57611a9d614cbd565b602002602001018181525050919050565b6000808211611abc57600080fd5b6005611ac88385614d5f565b611ad390600a614cd3565b83611adf86600a614cd3565b611ae99190614d5f565b611af39190614ca6565b1015611b0a57611b038284614d5f565b90506111de565b611b148284614d5f565b611b03906001614cf2565b805460009065ffffffffffff168282611b3783614d81565b82546101009290920a65ffffffffffff818102199093169183160217909155925490921692915050565b6000605882901b601884901b600886901b876001811115611b8457611b84614ad1565b17171795945050505050565b60008111611bdb5760405162461bcd60e51b8152602060048201526013602482015272125b9cdd59999a58da595b9d08185b5bdd5b9d606a1b60448201526064015b60405180910390fd5b612710841115611c225760405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742076616c756560701b6044820152606401611bd2565b611c2c85856128e4565b610edf8585858585612aa6565b6000806000808460ff166001811115611c5457611c54614ad1565b9561ffff600887901c169567ffffffffffffffff601882901c8116965060589190911c169350915050565b6000611c8c848484612b26565b9050611c988484612d80565b9392505050565b8154600090611cb090600190614ca6565b905060005b818111610b1c5782848281548110611ccf57611ccf614cbd565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff161415611ddd57818114611d96576000848381548110611d2057611d20614cbd565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff16905080858381548110611d5d57611d5d614cbd565b90600052602060002090600591828204019190066006026101000a81548165ffffffffffff021916908365ffffffffffff160217905550505b83805480611da657611da6614da7565b60019003818190600052602060002090600591828204019190066006026101000a81549065ffffffffffff02191690559055610b1c565b80611de781614d44565b915050611cb5565b6001600160a01b038116600090815260078301602090815260408083205460048601546005870184528285208054845181870281018701909552808552606096879690958695948514159386939192909190830182828015611ea057602002820191906000526020600020906000905b82829054906101000a900465ffffffffffff1665ffffffffffff1681526020019060060190602082600501049283019260010382029150808411611e5f5790505b5050505050905060008151905082611eb85780611ebb565b60005b67ffffffffffffffff811115611ed357611ed3614d0a565b604051908082528060200260200182016040528015611efc578160200160208202803683370190505b5097508067ffffffffffffffff811115611f1857611f18614d0a565b604051908082528060200260200182016040528015611f41578160200160208202803683370190505b50965060005b8181101561207e576000838281518110611f6357611f63614cbd565b602002602001015190506000611f958d60080160008465ffffffffffff16815260200190815260200160002054611c39565b5050915050611fc381838f600a0160008b81526020019081526020016000206130369092919063ffffffff16565b61201a5760019790970196818a611fda8b86614ca6565b81518110611fea57611fea614cbd565b602002602001019065ffffffffffff16908165ffffffffffff1681525050856120155760018b51038b525b612069565b856120615760019890980197818b6120328a86614ca6565b8151811061204257612042614cbd565b602002602001019065ffffffffffff16908165ffffffffffff16815250505b60018a51038a525b5050808061207690614d44565b915050611f47565b505050505050509250929050565b6001600160a01b03811660009081526007830160209081526040808320546004860154600687018452828520805484518187028101870190955280855260609687969095869594851415938693919290919083018282801561213d57602002820191906000526020600020906000905b82829054906101000a900465ffffffffffff1665ffffffffffff16815260200190600601906020826005010492830192600103820291508084116120fc5790505b50505050509050600081519050826121555780612158565b60005b67ffffffffffffffff81111561217057612170614d0a565b604051908082528060200260200182016040528015612199578160200160208202803683370190505b5097508067ffffffffffffffff8111156121b5576121b5614d0a565b6040519080825280602002602001820160405280156121de578160200160208202803683370190505b50965060005b8181101561207e57600083828151811061220057612200614cbd565b6020026020010151905060006122328d60080160008465ffffffffffff16815260200190815260200160002054611c39565b505091505061226081838f600b0160008b81526020019081526020016000206130369092919063ffffffff16565b6122b75760019790970196818a6122778b86614ca6565b8151811061228757612287614cbd565b602002602001019065ffffffffffff16908165ffffffffffff1681525050856122b25760018b51038b525b612305565b600189019850856122fd57818b6122ce8a86614ca6565b815181106122de576122de614cbd565b602002602001019065ffffffffffff16908165ffffffffffff16815250505b60018a51038a525b5050808061231290614d44565b9150506121e4565b8154600090819061233a90600160681b90046001600160501b031661199e565b8051855491925090600090819065ffffffffffff600160301b90910416431480159061236e57508654600160601b900460ff165b156123a15761238d87600201546127108960010154610df59190614cd3565b9150600190508561239d81614dbd565b9650505b60005b868110156124255783811015806123d457508481815181106123c8576123c8614cbd565b60200260200101516000145b156123de57612425565b8481815181106123f0576123f0614cbd565b6020026020010151836124039190614cf2565b92508161240f81614d44565b925050808061241d90614d44565b9150506123a4565b506000811161243557600061243f565b61243f8282611aae565b979650505050505050565b600080600080612458614845565b60006124638a6117a5565b905060008060008984101580612477575089155b6124be5760405162461bcd60e51b8152602060048201526018602482015277496e73756666696369656e74206c696d69742076616c756560401b6044820152606401611bd2565b6124cb8d8d8d8d8861305c565b959e50919c509a5091965094509250905060006124e8838a614cf2565b905080156125dd5782156125145789945061250d8e866125088688614ca6565b613187565b9550612539565b8115612539578994506125368e8661252c88866134a0565b6125089088614ca6565b95505b600085815260018f016020526040812060028101919091555485156125db575b80156125db57858110156125c557808f600101600088815260200190815260200160002060000154146125c157808f600101600088815260200190815260200160002060000181905550858f6001016000838152602001908152602001600020600201819055505b8095505b600090815260018f016020526040902054612559565b505b808d11156125f2576125ef818e614ca6565b96505b60006125fd8f6116e1565b90508a8114801561262657508e6001016000828152602001908152602001600020600501546000145b156126345760008f5561267b565b8e548b108061264e57508e548b14801561264e5750818a10155b1561267b57858f6000018190555060008f6001016000888152602001908152602001600020600001819055505b6126848f6134b2565b505050505050945094509450945094565b6000806000806126a3614845565b60006126ae8a6116e1565b9050600080600089841115806126c2575089155b6127095760405162461bcd60e51b8152602060048201526018602482015277496e73756666696369656e74206c696d69742076616c756560401b6044820152606401611bd2565b6127168d8d8d8d88613581565b959e50919c509a509196509450925090506000612733838a614cf2565b9050801561283d57821561275a578994506127538e866125088688614ca6565b9550612775565b8115612775578994506127728e8661252c88866134a0565b95505b60008e60010160008781526020019081526020016000206001018190555060008e60010160008781526020019081526020016000206000015490506000861461283b575b801561283b578581111561282557808f6001016000888152602001908152602001600020600001541461282157808f600101600088815260200190815260200160002060000181905550858f6001016000838152602001908152602001600020600101819055505b8095505b600090815260018f0160205260409020546127b9565b505b808d11156128525761284f818e614ca6565b96505b600061285d8f6117a5565b90508a8114801561288657508e6001016000828152602001908152602001600020600501546000145b156128945760008f556128db565b8e548b11806128ae57508e548b1480156128ae5750818a10155b156128db57858f6000018190555060008f6001016000888152602001908152602001600020600001819055505b6126848f613677565b806129505760405162461bcd60e51b815260206004820152603660248201527f4f7264657253746174697374696373547265654c69623a2056616c756520746f60448201527520696e736572742063616e6e6f74206265207a65726f60501b6064820152608401611bd2565b81546000905b80156129b45780915080831015612980576000908152600180850160205260409091200154612956565b808311156129a1576000908152600184016020526040902060020154612956565b808314156129af5750505050565b612956565b6000838152600185016020526040902084541580612a03575060008381526001808701602052604090912001548414801590612a03575060008381526001860160205260409020600201548414155b15612a315760006004820181905560058201819055612a259086908690613706565b612a318585600061373e565b82815560006001808301829055600283019190915560038201805460ff1916909117905582612a6257838555612a9c565b82841015612a855760008381526001808701602052604090912001849055612a9c565b600083815260018601602052604090206002018490555b610edf858561377e565b600084815260018601602052604090206003810154610100900465ffffffffffff16612ade57612ad986868686866139e9565b612b1e565b6000612aed8787878787613a59565b9050612b1187878460030160079054906101000a900465ffffffffffff1684613bee565b612b1c87878361373e565b505b505050505050565b6000612b33848484613036565b612b4f5760405162461bcd60e51b8152600401611bd290614dd4565b50600082815260018085016020908152604080842065ffffffffffff80871680875260068301855295839020835160a08101855281548084168252600160301b8104841696820196909652600160601b909504821693850193909352938201546001600160a01b031660608401526002909101546080830181905260038201549094919361010090910416148015612bfc5750600382015465ffffffffffff858116600160381b90920416145b15612c1e57612c0d86866000613706565b612c198686600061373e565b612cf0565b600382015465ffffffffffff858116610100909204161415612c7c57612c4986868360200151613706565b60208082015165ffffffffffff1660009081526006840190915260409020805465ffffffffffff60601b19169055612cf0565b600382015465ffffffffffff858116600160381b909204161415612cdc57612ca98686836040015161373e565b60408082015165ffffffffffff166000908152600684016020522080546bffffffffffff00000000000019169055612cf0565b612cf0868683604001518460200151613bee565b805165ffffffffffff1660009081526006830160205260408120805471ffffffffffffffffffffffffffffffffffff19168155600180820180546001600160a01b0319169055600290910182905560048401805491929091612d53908490614ca6565b90915550506080810151600583018054600090612d71908490614ca6565b90915550929695505050505050565b80612dec5760405162461bcd60e51b815260206004820152603660248201527f4f7264657253746174697374696373547265654c69623a2056616c756520746f6044820152752072656d6f76652063616e6e6f74206265207a65726f60501b6064820152608401611bd2565b6000818152600183016020526040812060048101549091908190610edf5760008481526001808701602052604090912001541580612e3b57506000848152600186016020526040902060020154155b15612e47575082612e8f565b5060008381526001850160205260409020600201545b600081815260018087016020526040909120015415612e8f576000908152600180860160205260409091200154612e5d565b600081815260018087016020526040909120015415612ec35760008181526001808701602052604090912001549150612eda565b600081815260018601602052604090206002015491505b60008181526001860160205260408082205484835291208190558015612f4b576000818152600180880160205260409091200154821415612f305760008181526001808801602052604090912001839055612f4f565b60008181526001870160205260409020600201839055612f4f565b8286555b600082815260018701602052604090206003015460ff1615858314612fd957612f79878488613c63565b60008681526001888101602052604080832080830154878552828520938401819055845281842087905560028082015490840181905584529083208690556003908101549286905201805460ff191660ff90921615159190911790559194915b8015612fe957612fe98785613cda565b50506000818152600180870160205260408220828155908101829055600281018290556003810180546cffffffffffffffffffffffffff1916905560048101829055600501555050505050565b60006130438484846140f4565b801561305457506130548484614229565b949350505050565b60008181808080805b8a84108061307157508a155b8015613084575089831080613084575089155b801561308f57508515155b80156130a3575088861015806130a3575088155b1561315257600086815260018d016020526040902060050154959650869594506130cd86866142e2565b6130d79084614cf2565b92506130e38585614cf2565b93508a841180156130f357508a15155b15613115576131028b85614ca6565b915061310e86836142e2565b9050613141565b898311801561312357508915155b15613141576131328a84614ca6565b905061313e86826134a0565b91505b61314b8c876142f4565b9550613065565b8115613165576131628285614ca6565b93505b8015613178576131758184614ca6565b92505b959b949a509550955095509550565b61318f614845565b6000838152600185016020526040902060058101548311156132195760405162461bcd60e51b815260206004820152603860248201527f4f7264657253746174697374696373547265654c69623a20416d6f756e74207460448201527f6f2072656d6f766520697320696e73756666696369656e7400000000000000006064820152608401611bd2565b600381015465ffffffffffff61010090910481166000818152600684016020908152604091829020825160a08101845281548087168252600160301b8104871693820193909352600160601b9092049094169181019190915260018301546001600160a01b0316606082015260029092015460808301528491905b65ffffffffffff8116158015906132aa57508215155b156133f85765ffffffffffff8082166000908152600686016020908152604091829020825160a08101845281548086168252600160301b8104861693820193909352600160601b9092049093169181019190915260018201546001600160a01b031660608201526002909101546080820181905290925083106133445760808201516133369084614ca6565b925081602001519050613294565b6040518060800160405280836000015165ffffffffffff16815260200183606001516001600160a01b0316815260200184815260200161338489866142e2565b905260409283015165ffffffffffff908116600090815260068701602090815290859020855160a08101875281548085168252600160301b8104851693820193909352600160601b9092049092169481019490945260018101546001600160a01b0316606085015260020154608084015294505b815165ffffffffffff1615613418576134168888846000015161439d565b505b60408501511561349557604080860151600089815260018b016020908152838220895165ffffffffffff1683526006019052918220600201805491929091613461908490614ca6565b9091555050604080860151600089815260018b0160205291822060050180549192909161348f908490614ca6565b90915550505b505050509392505050565b6000611c98612710610df58585614cd3565b805460009081526001820160205260409020600201541580156134e957508054600090815260018083016020526040909120015415155b1561354257805460009081526001808301602052604080832090910154825290206002015415613534578054600090815260018083016020526040909120015461353490829061457a565b613542818260000154614652565b8054600090815260018201602052604090206003015460ff161561357e57805460009081526001820160205260409020600301805460ff191690555b50565b60008181808080805b8a84108061359657508a155b80156135a95750898310806135a9575089155b80156135b457508515155b80156135c8575088861115806135c8575088155b1561315257600086815260018d016020526040902060050154959650869594506135f286866142e2565b6135fc9084614cf2565b92506136088585614cf2565b93508a8411801561361857508a15155b1561363a576136278b85614ca6565b915061363386836142e2565b9050613666565b898311801561364857508915155b15613666576136578a84614ca6565b905061366386826134a0565b91505b6136708c87614727565b955061358a565b805460009081526001808301602052604090912001541580156136ae57508054600090815260018201602052604090206002015415155b156135425780546000908152600180830160205260408083206002015483529091200154156136f857805460009081526001820160205260409020600201546136f8908290614652565b61354281826000015461457a565b6000918252600190920160205260409020600301805465ffffffffffff9092166101000266ffffffffffff0019909216919091179055565b6000918252600190920160205260409020600301805465ffffffffffff909216600160381b026cffffffffffff0000000000000019909216919091179055565b60005b825482148015906137ab5750600082815260018401602052604080822054825290206003015460ff165b156139c75760008281526001808501602052604080832054808452818420548452922001548114156138ce5760008181526001850160205260408082205482528082206002015480835291206003015490925060ff1615613854576000818152600180860160205260408083206003808201805460ff199081169091558786528386208201805482169055825486529285200180549092169092179055908290525492506139c1565b600081815260018501602052604090206002015483141561387c5780925061387c848461457a565b50600082815260018085016020526040808320548084528184206003808201805460ff199081169091558254875293862001805490931690931790915591829052546138c9908590614652565b6139c1565b6000818152600180860160205260408083205483528083209091015480835291206003015490925060ff161561394c576000818152600180860160205260408083206003808201805460ff199081169091558786528386208201805482169055825486529285200180549092169092179055908290525492506139c1565b6000818152600180860160205260409091200154831415613974578092506139748484614652565b50600082815260018085016020526040808320548084528184206003808201805460ff199081169091558254875293862001805490931690931790915591829052546139c190859061457a565b50613781565b505080546000908152600190910160205260409020600301805460ff19169055565b6000848152600186016020526040812090613a078787878787613a59565b9050613a2b8787838560030160019054906101000a900465ffffffffffff16613bee565b613a36878783613706565b6003820154600160381b900465ffffffffffff16612b1c57612b1c87878361373e565b600084815260018087016020908152604080842065ffffffffffff88168552600681019092528320909101546001600160a01b031615613af35760405162461bcd60e51b815260206004820152602f60248201527f4f7264657253746174697374696373547265654c69623a204f7264657220696460448201526e20616c72656164792065786973747360881b6064820152608401611bd2565b6001816004016000828254613b089190614cf2565b9250508190555082816005016000828254613b239190614cf2565b90915550506040805160a08101825265ffffffffffff968716808252600060208084018281528486018381526001600160a01b039a8b1660608701908152608087019a8b5294845260069790970190915293902091518254935194518916600160601b0265ffffffffffff60601b19958a16600160301b026bffffffffffffffffffffffff199095169982169990991793909317939093169690961786559051600186018054919095166001600160a01b031990911617909355505160029092019190915592915050565b60009283526001939093016020908152604080842065ffffffffffff938416808652600690910190925280842080546bffffffffffff0000000000001916600160301b9490961693840295909517909455908252919020805465ffffffffffff60601b1916600160601b909202919091179055565b600081815260018401602052604080822054848352912081905580613c8a57828455610b1c565b6000818152600180860160205260409091200154821415613cc05760008181526001808601602052604090912001839055610b1c565b600090815260019390930160205250604090912060020155565b60005b82548214801590613d025750600082815260018401602052604090206003015460ff16155b156140d5576000828152600180850160205260408083205480845292200154831415613efe5760008181526001850160205260408082206002015480835291206003015490925060ff1615613da6576000828152600180860160205260408083206003908101805460ff19908116909155858552919093209092018054909216179055613d8f848261457a565b600081815260018501602052604090206002015491505b60008281526001808601602052604080832090910154825290206003015460ff16158015613df15750600082815260018501602052604080822060020154825290206003015460ff16155b15613e1e57600082815260018581016020526040909120600301805460ff191690911790559150816140cf565b600082815260018501602052604080822060020154825290206003015460ff16613e9b576000828152600180860160205260408083208083015484529083206003908101805460ff1990811690915593869052018054909216179055613e848483614652565b600081815260018501602052604090206002015491505b600081815260018501602052604080822060039081018054868552838520808401805460ff909316151560ff199384161790558254821690925560029091015484529190922090910180549091169055613ef5848261457a565b835492506140cf565b6000818152600180860160205260408083209091015480835291206003015490925060ff1615613f7d576000828152600180860160205260408083206003908101805460ff19908116909155858552919093209092018054909216179055613f668482614652565b600081815260018086016020526040909120015491505b600082815260018501602052604080822060020154825290206003015460ff16158015613fc8575060008281526001808601602052604080832090910154825290206003015460ff16155b15613ff557600082815260018581016020526040909120600301805460ff191690911790559150816140cf565b60008281526001808601602052604080832090910154825290206003015460ff1661407457600082815260018086016020526040808320600281015484529083206003908101805460ff199081169091559386905201805490921617905561405d848361457a565b600081815260018086016020526040909120015491505b60008181526001808601602052604080832060039081018054878652838620808401805460ff909316151560ff199384161790558254821690925593015484529220909101805490911690556140ca8482614652565b835492505b50613cdd565b506000908152600190910160205260409020600301805460ff19169055565b600082815260018085016020908152604080842065ffffffffffff808716808752600683018552838720845160a0810186528154808516808352600160301b8204861698830198909852600160601b900490931694830194909452948301546001600160a01b03166060820152600290920154608083015285939092146141815760009350505050611c98565b5b604081015165ffffffffffff161561420a5760409081015165ffffffffffff808216600090815260068501602090815290849020845160a08101865281548085168252600160301b8104851693820193909352600160601b9092049092169381019390935260018101546001600160a01b031660608401526002015460808301529250614182565b5060030154610100900465ffffffffffff908116911614949350505050565b600081614238575060006111de565b8254821415614249575060016111de565b815b6000818152600185016020526040902054156142d8576000818152600180860160205260408083205480845292200154821480159061429d575060008181526001860160205260409020600201548214155b156142ad576000925050506111de565b84548114156142c1576001925050506111de565b50600090815260018401602052604090205461424b565b5060009392505050565b6000611c9883610df561271085614cd3565b6000816143135760405162461bcd60e51b8152600401611bd290614e20565b60008281526001808501602052604090912001541561434b576000828152600180850160205260409091200154611b039084906147d0565b5060008181526001830160205260409020545b801580159061437f5750600081815260018085016020526040909120015482145b156111de57600081815260018401602052604090205490915061435e565b60006143aa848484613036565b6143c65760405162461bcd60e51b8152600401611bd290614dd4565b50600082815260018085016020908152604080842065ffffffffffff808716865260068201808552838720845160a08101865281548085168252600160301b8104851682890152600160601b9004841681870152818801546001600160a01b031660608201526002918201546080820181905260038601546101009004909416808a529290965293909620909201549194909390915b8665ffffffffffff1683146144c057600092835260068501602052604090922054600160301b900465ffffffffffff16918161449781614d44565b60008581526006880160205260409020600201549093506144b9915082614cf2565b905061445c565b600385015465ffffffffffff888116600160381b9092041614156144fb576144ea89896000613706565b6144f68989600061373e565b614539565b61450a89898660200151613706565b60208085015165ffffffffffff1660009081526006870190915260409020805465ffffffffffff60601b191690555b8185600401600082825461454d9190614ca6565b92505081905550808560050160008282546145689190614ca6565b90915550959998505050505050505050565b6000818152600180840160205260408083206002810180549154828652928520909301549385905291839055909180156145c257600081815260018601602052604090208490555b60008381526001860160205260409020829055816145e25782855561462f565b6000828152600180870160205260409091200154841415614618576000828152600180870160205260409091200183905561462f565b600082815260018601602052604090206002018390555b505060008181526001938401602052604080822090940183905591825291902055565b6000818152600180840160205260408083209182018054925483855291842060020154938590528390559091801561469857600081815260018601602052604090208490555b60008381526001860160205260409020829055816146b857828555614705565b60008281526001860160205260409020600201548414156146ee5760008281526001860160205260409020600201839055614705565b600082815260018087016020526040909120018390555b5050600081815260019093016020526040808420600201839055918352912055565b6000816147465760405162461bcd60e51b8152600401611bd290614e20565b60008281526001840160205260409020600201541561477e576000828152600184016020526040902060020154611b0390849061480d565b5060008181526001830160205260409020545b80158015906147b25750600081815260018401602052604090206002015482145b156111de576000818152600184016020526040902054909150614791565b60005b60008281526001840160205260409020600201541561480757600091825260018301602052604090912060020154906147d3565b50919050565b60005b600082815260018085016020526040909120015415614807576000918252600180840160205260409092209091015490614810565b6040518060800160405280600065ffffffffffff16815260200160006001600160a01b0316815260200160008152602001600081525090565b828054828255906000526020600020906004016005900481019282156149235791602002820160005b838211156148ef57835183826101000a81548165ffffffffffff021916908365ffffffffffff16021790555092602001926006016020816005010492830192600103026148a7565b80156149215782816101000a81549065ffffffffffff02191690556006016020816005010492830192600103026148ef565b505b5061492f929150614933565b5090565b5b8082111561492f5760008155600101614934565b803560ff8116811461172357600080fd5b80356002811061172357600080fd5b80356001600160a01b038116811461172357600080fd5b60008060008060008060c0878903121561499857600080fd5b6149a187614948565b95506149af60208801614959565b94506149bd60408801614968565b9350606087013592506080870135915060a087013590509295509295509295565b600080600080600060a086880312156149f657600080fd5b6149ff86614948565b9450614a0d60208701614959565b9350614a1b60408701614968565b94979396509394606081013594506080013592915050565b600080600060608486031215614a4857600080fd5b614a5184614948565b9250614a5f60208501614968565b9150604084013565ffffffffffff81168114614a7a57600080fd5b809150509250925092565b60008060408385031215614a9857600080fd5b614aa183614948565b9150614aaf60208401614968565b90509250929050565b600060208284031215614aca57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b60028110614b0557634e487b7160e01b600052602160045260246000fd5b9052565b6101608101614b18828e614ae7565b602082019b909b5260408101999099526060890197909752608088019590955260a087019390935260c086019190915265ffffffffffff1660e0850152610100840152610120830152151561014090910152919050565b60e08101614b7d828a614ae7565b8760208301528660408301528560608301528460808301528360a083015282151560c083015298975050505050505050565b60808101614bbd8287614ae7565b84602083015283604083015265ffffffffffff8316606083015295945050505050565b65ffffffffffff8716815260c08101614bfc6020830188614ae7565b8560408301528460608301528360808301528260a0830152979650505050505050565b60a0808252865190820181905260009060209060c0840190828a01845b82811015614c6057815165ffffffffffff1684529284019290840190600101614c3c565b50505080925050614c7381840188614ae7565b508460408301528360608301528260808301529695505050505050565b634e487b7160e01b600052601160045260246000fd5b600082821015614cb857614cb8614c90565b500390565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615614ced57614ced614c90565b500290565b60008219821115614d0557614d05614c90565b500190565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215614d3357600080fd5b505080516020909101519092909150565b6000600019821415614d5857614d58614c90565b5060010190565b600082614d7c57634e487b7160e01b600052601260045260246000fd5b500490565b600065ffffffffffff80831681811415614d9d57614d9d614c90565b6001019392505050565b634e487b7160e01b600052603160045260246000fd5b600081614dcc57614dcc614c90565b506000190190565b6020808252602c908201527f4f7264657253746174697374696373547265654c69623a204f7264657220646f60408201526b195cc81b9bdd08195e1a5cdd60a21b606082015260800190565b60208082526035908201527f4f7264657253746174697374696373547265654c69623a205374617274696e676040820152742076616c75652063616e6e6f74206265207a65726f60581b60608201526080019056fefc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0aa2646970667358221220fb1feefc4a61dbff6c10e351cdeb8e1bfa1dad41643a6217292d26dc9751546b64736f6c63430008090033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c8063447265be14610066578063ad89fe1a146100f1578063ed94d50f14610111578063f3f7f45214610133578063f506ad3014610153575b600080fd5b81801561007257600080fd5b5061008661008136600461497f565b6101a8565b604080518451815260208086015181830152858301518284015260609586015186830152845165ffffffffffff1660808301528401516001600160a01b031660a08201529083015160c0820152929091015160e0830152610100820152610120015b60405180910390f35b8180156100fd57600080fd5b5061008661010c3660046149de565b6104f0565b81801561011d57600080fd5b5061013161012c3660046149de565b61071d565b005b81801561013f57600080fd5b5061013161014e366004614a33565b61087a565b81801561015f57600080fd5b5061017361016e366004614a85565b610909565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016100e8565b6101d36040518060800160405280600081526020016000815260200160008152602001600081525090565b6101db614845565b6000856101fb5760405163162908e360e11b815260040160405180910390fd5b60006102068a610a45565b90506102128189610a78565b604080516101008101825260006080820181815260a0830182905260c0830182905260e08301829052825282516060808201855282825260208083018490528286018490528401919091529282015260048301549181019190915261028f8a88600080516020614e768339815191525b6003015485929190610b22565b84519015156060820152901515604082015260208101919091529015159052861580156102bf5750805160600151155b156102dd57604051630ae548fd60e11b815260040160405180910390fd5b805151156103d0576103038b8b8b8b856000015160200151866000015160400151610c27565b15156040808601919091526020850191909152606084015183820151915163601104bd60e11b815293985091965073__$62400fcf056c2b33063fc11a9740c72847$__9263c022097a92610364929091600401918252602082015260400190565b60206040518083038186803b15801561037c57600080fd5b505af4158015610390573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b49190614ab8565b855160408701519194506103cb9184919089610d74565b61044d565b80516040015161042a5760405180606001604052806104068c8c8c86600001516020015188610ee690949392919063ffffffff16565b65ffffffffffff16815260208082018b905283518101516040909201919091528201525b861561043e57805160200151871415610445565b8051606001515b151560408201525b6060810151600080516020614e76833981519152600001548a6001600160a01b03167f2b4d4aa0b23575a6ce7bb1f8a7d3c2f8bdd72e336356047bb2e606d9363760158d8c8c8b600001518c602001518d604001518c8b60200151600001518c60200151602001518d60200151604001518e604001516040516104da9b9a99989796959493929190614b09565b60405180910390a4505096509650969350505050565b61051b6040518060800160405280600081526020016000815260200160008152602001600081525090565b610523614845565b60008461054357604051636d2b73c560e11b815260040160405180910390fd5b604080516080810182526000808252602082018190529181018290526060810182905290806105718b610a45565b60048101549091506105938b6000600080516020614e76833981519152610282565b1515606088018190529015156040880152602087019190915290151585526105ce57604051630ae548fd60e11b815260040160405180910390fd5b835115610699576105e58c8c8b8760200151611049565b604083810151905163601104bd60e11b8152600481018690526024810191909152929950909750935073__$62400fcf056c2b33063fc11a9740c72847$__9063c022097a9060440160206040518083038186803b15801561064557600080fd5b505af4158015610659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067d9190614ab8565b87516040890151919650610694918491908b610d74565b6106a1565b836060015192505b80600080516020614e76833981519152600001548b6001600160a01b03167fe4afd68f87d14439f7e6df3debc4983a8c0066cd2a5469dbbc4ce5b9a8bedb708e8d8c600001518d602001518e604001518d8c6040516107069796959493929190614b6f565b60405180910390a450505050955095509592505050565b8161073b5760405163162908e360e11b815260040160405180910390fd5b600061074686610a45565b90506107528185610a78565b600085600181111561076657610766614ad1565b148015610778575061077881856111c0565b806107b85750600185600181111561079257610792614ad1565b1480156107b857506001600160a01b038416600090815260058201602052604090205415155b156107d657604051631893733560e31b815260040160405180910390fd5b60006107e58287878787610ee6565b65ffffffffffff811660009081526009840160205260409020805460ff191660011790556004830154909150610826600080516020614e7683398151915290565b60000154866001600160a01b03167fe5bd5bc42fd564596c82c75ff1f40630d9c4ff3cfc0568a7bd45dbcf2bcee2c5898888876040516108699493929190614baf565b60405180910390a450505050505050565b600061088584610a45565b9050600080806108968487876111e4565b925092509250856001600160a01b03167f8a73e656799f8fbd4ea08e9420225176f98f85ef9a2a11a5a011580b65c8f14586856108de600080516020614e7683398151915290565b5460048901546040516108f8949392919089908990614be0565b60405180910390a250505050505050565b60008060008060008060008061091e8a610a45565b6001600160a01b038a1660009081526007820160205260409020549250905060608061094a8c8c61131d565b919c5099509650915061095d8c8c611506565b919b5098509550905085156109ce57600080516020614e76833981519152600001548b6001600160a01b03167f055a5e3b875d6074396a3180bcea85a0f751dbf1c69ef5570c5f9bbaca6aa7fa84600087600401548b8e6040516109c5959493929190614c1f565b60405180910390a35b8415610a3657600080516020614e76833981519152600001548b6001600160a01b03167f055a5e3b875d6074396a3180bcea85a0f751dbf1c69ef5570c5f9bbaca6aa7fa83600187600401548a8d604051610a2d959493929190614c1f565b60405180910390a35b50505092959891949750929550565b60ff1660009081527ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0e6020526040902090565b6001600160a01b03811660009081526007830160205260409020546004830154808214610b1c576001600160a01b0383166000908152600585016020526040902054151580610ae057506001600160a01b038316600090815260068501602052604090205415155b15610afe57604051634bab5e2760e11b815260040160405180910390fd5b6001600160a01b038316600090815260078501602052604090208190555b50505050565b60008080808080886001811115610b3b57610b3b614ad1565b1490506000808215610b785760048b01546000908152600b8c0160205260409020610b65906116e1565b9050610b718b89611728565b9150610ba5565b60048b01546000908152600a8c0160205260409020610b96906117a5565b9050610ba28b896117e7565b91505b8015159350881580610be45750838015610bbe57508115155b8015610be45750828015610bd157508189115b80610be4575082158015610be457508189105b15610bf55781955060019450610bfd565b889550600094505b8315610c195782610c115785811015610c16565b858111155b96505b505050945094509450949050565b610c526040518060800160405280600081526020016000815260200160008152602001600081525090565b610c5a614845565b610c866040518060600160405280600065ffffffffffff16815260200160008152602001600081525090565b600080610c928b610a45565b6040805160608101825260006020820181905291810182905260ff8e168152919250610cc49083908d908c908c61184b565b15156040850152602084018190529197509550610ce1908a614ca6565b8652602081015115610d48578615610d025760208101516060870152610d48565b6040518060600160405280610d2a8d8d85602001518d88610ee690949392919063ffffffff16565b65ffffffffffff168152602001826020015181526020018981525093505b80604001518015610d565750865b8015610d63575085518914155b925050509650965096509692505050565b8354600090610d9290600160681b90046001600160501b031661199e565b600081518110610da457610da4614cbd565b6020908102919091010151855490915065ffffffffffff600160301b909104164314610e73578454600160601b900460ff1615610e3557610dfb85600201546127108760010154610df59190614cd3565b90611aae565b855469ffffffffffffffffffff60681b19811661ffff8316600160681b9283900460101b69ffffffffffffffff0000161790910217865590505b845460018601859055600286018490556cffffffffffffff0000000000001916600160301b4365ffffffffffff160260ff60601b1916178555610ea8565b83856001016000828254610e879190614cf2565b9250508190555082856002016000828254610ea29190614cf2565b90915550505b818560010154101580610ec8575060008560010154118015610ec8575080155b15610edf57845460ff60601b1916600160601b1785555b5050505050565b6000610ef186611b1f565b9050610f038583886004015442611b61565b65ffffffffffff82166000908152600888016020526040812091909155856001811115610f3257610f32614ad1565b1415610faf5760048601546000908152600a870160205260409020610f5a9083838787611b90565b6001600160a01b0384166000908152600587810160209081526040832080546001810182559084529220818304018054919092066006026101000a65ffffffffffff8181021990921691841602179055611040565b6001856001811115610fc357610fc3614ad1565b14156110405760048601546000908152600b870160205260409020610feb9083838787611b90565b6001600160a01b038416600090815260068781016020908152604083208054600181018255908452922060058084049091018054919093069091026101000a65ffffffffffff81810219909216918416021790555b95945050505050565b6110746040518060800160405280600081526020016000815260200160008152602001600081525090565b61107c614845565b60008060008061108b8a610a45565b60048101549091506000428210156110a45760006110ae565b6110ae4283614ca6565b905060018b60018111156110c4576110c4614ad1565b1415611137577ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0c54611130906110fb908390614cd3565b61110b6127106301e13380614cd3565b6111159190614cf2565b6127106111266301e133808e614cd3565b610df59190614cd3565b9350611185565b7ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0c5461118290611168908390614cd3565b6111786127106301e13380614cd3565b6111159190614ca6565b93505b611193838c6000878d61184b565b929a5090985090955085905080156111af575087604001518a14155b955050505050509450945094915050565b6001600160a01b038116600090815260068301602052604090205415155b92915050565b60008060008060006112128860080160008865ffffffffffff16815260200190815260200160002054611c39565b509193509150600090508083600181111561122f5761122f614ad1565b14156112895760048901546000908152600a8a0160205260409020611255908389611c7f565b6001600160a01b038916600090815260058b01602052604090209091506112849065ffffffffffff8916611c9f565b6112f2565b600183600181111561129d5761129d614ad1565b14156112f25760048901546000908152600b8a01602052604090206112c3908389611c7f565b6001600160a01b038916600090815260068b01602052604090209091506112f29065ffffffffffff8916611c9f565b65ffffffffffff8716600090815260088a016020526040812055919450909250905093509350939050565b606060008060008061132e87610a45565b905060008061133d8389611def565b6001600160a01b038a1660009081526005860160209081526040909120835193955091935061136f929085019061487e565b50815181519096508067ffffffffffffffff81111561139057611390614d0a565b6040519080825280602002602001820160405280156113b9578160200160208202803683370190505b50975060005b818110156114f85760008073__$62400fcf056c2b33063fc11a9740c72847$__633d0157ef888786815181106113f7576113f7614cbd565b60200260200101516040518363ffffffff1660e01b815260040161142d92919091825265ffffffffffff16602082015260400190565b604080518083038186803b15801561144457600080fd5b505af4158015611458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147c9190614d20565b909250905061148b8289614cf2565b9750611497818a614cf2565b98508483815181106114ab576114ab614cbd565b60200260200101518b84815181106114c5576114c5614cbd565b602002602001019065ffffffffffff16908165ffffffffffff1681525050505080806114f090614d44565b9150506113bf565b505050505092959194509250565b606060008060008061151787610a45565b9050600080611526838961208c565b6001600160a01b038a16600090815260068601602090815260409091208351939550919350611558929085019061487e565b50815181519096508067ffffffffffffffff81111561157957611579614d0a565b6040519080825280602002602001820160405280156115a2578160200160208202803683370190505b50975060005b818110156114f85760008073__$62400fcf056c2b33063fc11a9740c72847$__63c8707723888786815181106115e0576115e0614cbd565b60200260200101516040518363ffffffff1660e01b815260040161161692919091825265ffffffffffff16602082015260400190565b604080518083038186803b15801561162d57600080fd5b505af4158015611641573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116659190614d20565b90925090506116748289614cf2565b9750611680818a614cf2565b985084838151811061169457611694614cbd565b60200260200101518b84815181106116ae576116ae614cbd565b602002602001019065ffffffffffff16908165ffffffffffff1681525050505080806116d990614d44565b9150506115a8565b8054806116f057506000919050565b5b6000818152600180840160205260409091200154156117235760009081526001808301602052604090912001546116f1565b919050565b60008061173684600361231a565b905061175f612710611749856002614cd3565b61175590612710614cf2565b610df59084614cd3565b915061271082118061176f575080155b1561177e57612710915061179e565b611789606482614cf2565b82101561179e5761179b606482614cf2565b91505b5092915050565b8054806117b457506000919050565b5b6000818152600183016020526040902060020154156117235760009081526001820160205260409020600201546117b5565b6000806117f584600561231a565b90506118076127106117558582614ca6565b9150811580611814575080155b80611820575060648111155b1561182e576001915061179e565b611839606483614cf2565b81101561179e5761179b606482614ca6565b6118766040518060800160405280600081526020016000815260200160008152602001600081525090565b61187e614845565b600080611889614845565b600189600181111561189d5761189d614ad1565b14156118ed5760048a01546000908152600a8b01602052604090206118c4818a8a8a61244a565b60408b01929092529189526020890192909252945091506118e58154151590565b92505061194d565b600089600181111561190157611901614ad1565b141561194d5760048a01546000908152600b8b0160205260409020611928818a8a8a612695565b60408b01929092529189526020890192909252945091506119498154151590565b9250505b6040518060800160405280826000015165ffffffffffff16815260200182602001516001600160a01b0316815260200182604001518152602001826060015181525093505095509550955095915050565b60408051600580825260c082019092526060916020820160a0803683370190505090508161ffff16816000815181106119d9576119d9614cbd565b6020026020010181815250506010826001600160501b0316901c61ffff1681600181518110611a0a57611a0a614cbd565b6020026020010181815250506020826001600160501b0316901c61ffff1681600281518110611a3b57611a3b614cbd565b6020026020010181815250506030826001600160501b0316901c61ffff1681600381518110611a6c57611a6c614cbd565b6020026020010181815250506040826001600160501b0316901c61ffff1681600481518110611a9d57611a9d614cbd565b602002602001018181525050919050565b6000808211611abc57600080fd5b6005611ac88385614d5f565b611ad390600a614cd3565b83611adf86600a614cd3565b611ae99190614d5f565b611af39190614ca6565b1015611b0a57611b038284614d5f565b90506111de565b611b148284614d5f565b611b03906001614cf2565b805460009065ffffffffffff168282611b3783614d81565b82546101009290920a65ffffffffffff818102199093169183160217909155925490921692915050565b6000605882901b601884901b600886901b876001811115611b8457611b84614ad1565b17171795945050505050565b60008111611bdb5760405162461bcd60e51b8152602060048201526013602482015272125b9cdd59999a58da595b9d08185b5bdd5b9d606a1b60448201526064015b60405180910390fd5b612710841115611c225760405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742076616c756560701b6044820152606401611bd2565b611c2c85856128e4565b610edf8585858585612aa6565b6000806000808460ff166001811115611c5457611c54614ad1565b9561ffff600887901c169567ffffffffffffffff601882901c8116965060589190911c169350915050565b6000611c8c848484612b26565b9050611c988484612d80565b9392505050565b8154600090611cb090600190614ca6565b905060005b818111610b1c5782848281548110611ccf57611ccf614cbd565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff161415611ddd57818114611d96576000848381548110611d2057611d20614cbd565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff16905080858381548110611d5d57611d5d614cbd565b90600052602060002090600591828204019190066006026101000a81548165ffffffffffff021916908365ffffffffffff160217905550505b83805480611da657611da6614da7565b60019003818190600052602060002090600591828204019190066006026101000a81549065ffffffffffff02191690559055610b1c565b80611de781614d44565b915050611cb5565b6001600160a01b038116600090815260078301602090815260408083205460048601546005870184528285208054845181870281018701909552808552606096879690958695948514159386939192909190830182828015611ea057602002820191906000526020600020906000905b82829054906101000a900465ffffffffffff1665ffffffffffff1681526020019060060190602082600501049283019260010382029150808411611e5f5790505b5050505050905060008151905082611eb85780611ebb565b60005b67ffffffffffffffff811115611ed357611ed3614d0a565b604051908082528060200260200182016040528015611efc578160200160208202803683370190505b5097508067ffffffffffffffff811115611f1857611f18614d0a565b604051908082528060200260200182016040528015611f41578160200160208202803683370190505b50965060005b8181101561207e576000838281518110611f6357611f63614cbd565b602002602001015190506000611f958d60080160008465ffffffffffff16815260200190815260200160002054611c39565b5050915050611fc381838f600a0160008b81526020019081526020016000206130369092919063ffffffff16565b61201a5760019790970196818a611fda8b86614ca6565b81518110611fea57611fea614cbd565b602002602001019065ffffffffffff16908165ffffffffffff1681525050856120155760018b51038b525b612069565b856120615760019890980197818b6120328a86614ca6565b8151811061204257612042614cbd565b602002602001019065ffffffffffff16908165ffffffffffff16815250505b60018a51038a525b5050808061207690614d44565b915050611f47565b505050505050509250929050565b6001600160a01b03811660009081526007830160209081526040808320546004860154600687018452828520805484518187028101870190955280855260609687969095869594851415938693919290919083018282801561213d57602002820191906000526020600020906000905b82829054906101000a900465ffffffffffff1665ffffffffffff16815260200190600601906020826005010492830192600103820291508084116120fc5790505b50505050509050600081519050826121555780612158565b60005b67ffffffffffffffff81111561217057612170614d0a565b604051908082528060200260200182016040528015612199578160200160208202803683370190505b5097508067ffffffffffffffff8111156121b5576121b5614d0a565b6040519080825280602002602001820160405280156121de578160200160208202803683370190505b50965060005b8181101561207e57600083828151811061220057612200614cbd565b6020026020010151905060006122328d60080160008465ffffffffffff16815260200190815260200160002054611c39565b505091505061226081838f600b0160008b81526020019081526020016000206130369092919063ffffffff16565b6122b75760019790970196818a6122778b86614ca6565b8151811061228757612287614cbd565b602002602001019065ffffffffffff16908165ffffffffffff1681525050856122b25760018b51038b525b612305565b600189019850856122fd57818b6122ce8a86614ca6565b815181106122de576122de614cbd565b602002602001019065ffffffffffff16908165ffffffffffff16815250505b60018a51038a525b5050808061231290614d44565b9150506121e4565b8154600090819061233a90600160681b90046001600160501b031661199e565b8051855491925090600090819065ffffffffffff600160301b90910416431480159061236e57508654600160601b900460ff165b156123a15761238d87600201546127108960010154610df59190614cd3565b9150600190508561239d81614dbd565b9650505b60005b868110156124255783811015806123d457508481815181106123c8576123c8614cbd565b60200260200101516000145b156123de57612425565b8481815181106123f0576123f0614cbd565b6020026020010151836124039190614cf2565b92508161240f81614d44565b925050808061241d90614d44565b9150506123a4565b506000811161243557600061243f565b61243f8282611aae565b979650505050505050565b600080600080612458614845565b60006124638a6117a5565b905060008060008984101580612477575089155b6124be5760405162461bcd60e51b8152602060048201526018602482015277496e73756666696369656e74206c696d69742076616c756560401b6044820152606401611bd2565b6124cb8d8d8d8d8861305c565b959e50919c509a5091965094509250905060006124e8838a614cf2565b905080156125dd5782156125145789945061250d8e866125088688614ca6565b613187565b9550612539565b8115612539578994506125368e8661252c88866134a0565b6125089088614ca6565b95505b600085815260018f016020526040812060028101919091555485156125db575b80156125db57858110156125c557808f600101600088815260200190815260200160002060000154146125c157808f600101600088815260200190815260200160002060000181905550858f6001016000838152602001908152602001600020600201819055505b8095505b600090815260018f016020526040902054612559565b505b808d11156125f2576125ef818e614ca6565b96505b60006125fd8f6116e1565b90508a8114801561262657508e6001016000828152602001908152602001600020600501546000145b156126345760008f5561267b565b8e548b108061264e57508e548b14801561264e5750818a10155b1561267b57858f6000018190555060008f6001016000888152602001908152602001600020600001819055505b6126848f6134b2565b505050505050945094509450945094565b6000806000806126a3614845565b60006126ae8a6116e1565b9050600080600089841115806126c2575089155b6127095760405162461bcd60e51b8152602060048201526018602482015277496e73756666696369656e74206c696d69742076616c756560401b6044820152606401611bd2565b6127168d8d8d8d88613581565b959e50919c509a509196509450925090506000612733838a614cf2565b9050801561283d57821561275a578994506127538e866125088688614ca6565b9550612775565b8115612775578994506127728e8661252c88866134a0565b95505b60008e60010160008781526020019081526020016000206001018190555060008e60010160008781526020019081526020016000206000015490506000861461283b575b801561283b578581111561282557808f6001016000888152602001908152602001600020600001541461282157808f600101600088815260200190815260200160002060000181905550858f6001016000838152602001908152602001600020600101819055505b8095505b600090815260018f0160205260409020546127b9565b505b808d11156128525761284f818e614ca6565b96505b600061285d8f6117a5565b90508a8114801561288657508e6001016000828152602001908152602001600020600501546000145b156128945760008f556128db565b8e548b11806128ae57508e548b1480156128ae5750818a10155b156128db57858f6000018190555060008f6001016000888152602001908152602001600020600001819055505b6126848f613677565b806129505760405162461bcd60e51b815260206004820152603660248201527f4f7264657253746174697374696373547265654c69623a2056616c756520746f60448201527520696e736572742063616e6e6f74206265207a65726f60501b6064820152608401611bd2565b81546000905b80156129b45780915080831015612980576000908152600180850160205260409091200154612956565b808311156129a1576000908152600184016020526040902060020154612956565b808314156129af5750505050565b612956565b6000838152600185016020526040902084541580612a03575060008381526001808701602052604090912001548414801590612a03575060008381526001860160205260409020600201548414155b15612a315760006004820181905560058201819055612a259086908690613706565b612a318585600061373e565b82815560006001808301829055600283019190915560038201805460ff1916909117905582612a6257838555612a9c565b82841015612a855760008381526001808701602052604090912001849055612a9c565b600083815260018601602052604090206002018490555b610edf858561377e565b600084815260018601602052604090206003810154610100900465ffffffffffff16612ade57612ad986868686866139e9565b612b1e565b6000612aed8787878787613a59565b9050612b1187878460030160079054906101000a900465ffffffffffff1684613bee565b612b1c87878361373e565b505b505050505050565b6000612b33848484613036565b612b4f5760405162461bcd60e51b8152600401611bd290614dd4565b50600082815260018085016020908152604080842065ffffffffffff80871680875260068301855295839020835160a08101855281548084168252600160301b8104841696820196909652600160601b909504821693850193909352938201546001600160a01b031660608401526002909101546080830181905260038201549094919361010090910416148015612bfc5750600382015465ffffffffffff858116600160381b90920416145b15612c1e57612c0d86866000613706565b612c198686600061373e565b612cf0565b600382015465ffffffffffff858116610100909204161415612c7c57612c4986868360200151613706565b60208082015165ffffffffffff1660009081526006840190915260409020805465ffffffffffff60601b19169055612cf0565b600382015465ffffffffffff858116600160381b909204161415612cdc57612ca98686836040015161373e565b60408082015165ffffffffffff166000908152600684016020522080546bffffffffffff00000000000019169055612cf0565b612cf0868683604001518460200151613bee565b805165ffffffffffff1660009081526006830160205260408120805471ffffffffffffffffffffffffffffffffffff19168155600180820180546001600160a01b0319169055600290910182905560048401805491929091612d53908490614ca6565b90915550506080810151600583018054600090612d71908490614ca6565b90915550929695505050505050565b80612dec5760405162461bcd60e51b815260206004820152603660248201527f4f7264657253746174697374696373547265654c69623a2056616c756520746f6044820152752072656d6f76652063616e6e6f74206265207a65726f60501b6064820152608401611bd2565b6000818152600183016020526040812060048101549091908190610edf5760008481526001808701602052604090912001541580612e3b57506000848152600186016020526040902060020154155b15612e47575082612e8f565b5060008381526001850160205260409020600201545b600081815260018087016020526040909120015415612e8f576000908152600180860160205260409091200154612e5d565b600081815260018087016020526040909120015415612ec35760008181526001808701602052604090912001549150612eda565b600081815260018601602052604090206002015491505b60008181526001860160205260408082205484835291208190558015612f4b576000818152600180880160205260409091200154821415612f305760008181526001808801602052604090912001839055612f4f565b60008181526001870160205260409020600201839055612f4f565b8286555b600082815260018701602052604090206003015460ff1615858314612fd957612f79878488613c63565b60008681526001888101602052604080832080830154878552828520938401819055845281842087905560028082015490840181905584529083208690556003908101549286905201805460ff191660ff90921615159190911790559194915b8015612fe957612fe98785613cda565b50506000818152600180870160205260408220828155908101829055600281018290556003810180546cffffffffffffffffffffffffff1916905560048101829055600501555050505050565b60006130438484846140f4565b801561305457506130548484614229565b949350505050565b60008181808080805b8a84108061307157508a155b8015613084575089831080613084575089155b801561308f57508515155b80156130a3575088861015806130a3575088155b1561315257600086815260018d016020526040902060050154959650869594506130cd86866142e2565b6130d79084614cf2565b92506130e38585614cf2565b93508a841180156130f357508a15155b15613115576131028b85614ca6565b915061310e86836142e2565b9050613141565b898311801561312357508915155b15613141576131328a84614ca6565b905061313e86826134a0565b91505b61314b8c876142f4565b9550613065565b8115613165576131628285614ca6565b93505b8015613178576131758184614ca6565b92505b959b949a509550955095509550565b61318f614845565b6000838152600185016020526040902060058101548311156132195760405162461bcd60e51b815260206004820152603860248201527f4f7264657253746174697374696373547265654c69623a20416d6f756e74207460448201527f6f2072656d6f766520697320696e73756666696369656e7400000000000000006064820152608401611bd2565b600381015465ffffffffffff61010090910481166000818152600684016020908152604091829020825160a08101845281548087168252600160301b8104871693820193909352600160601b9092049094169181019190915260018301546001600160a01b0316606082015260029092015460808301528491905b65ffffffffffff8116158015906132aa57508215155b156133f85765ffffffffffff8082166000908152600686016020908152604091829020825160a08101845281548086168252600160301b8104861693820193909352600160601b9092049093169181019190915260018201546001600160a01b031660608201526002909101546080820181905290925083106133445760808201516133369084614ca6565b925081602001519050613294565b6040518060800160405280836000015165ffffffffffff16815260200183606001516001600160a01b0316815260200184815260200161338489866142e2565b905260409283015165ffffffffffff908116600090815260068701602090815290859020855160a08101875281548085168252600160301b8104851693820193909352600160601b9092049092169481019490945260018101546001600160a01b0316606085015260020154608084015294505b815165ffffffffffff1615613418576134168888846000015161439d565b505b60408501511561349557604080860151600089815260018b016020908152838220895165ffffffffffff1683526006019052918220600201805491929091613461908490614ca6565b9091555050604080860151600089815260018b0160205291822060050180549192909161348f908490614ca6565b90915550505b505050509392505050565b6000611c98612710610df58585614cd3565b805460009081526001820160205260409020600201541580156134e957508054600090815260018083016020526040909120015415155b1561354257805460009081526001808301602052604080832090910154825290206002015415613534578054600090815260018083016020526040909120015461353490829061457a565b613542818260000154614652565b8054600090815260018201602052604090206003015460ff161561357e57805460009081526001820160205260409020600301805460ff191690555b50565b60008181808080805b8a84108061359657508a155b80156135a95750898310806135a9575089155b80156135b457508515155b80156135c8575088861115806135c8575088155b1561315257600086815260018d016020526040902060050154959650869594506135f286866142e2565b6135fc9084614cf2565b92506136088585614cf2565b93508a8411801561361857508a15155b1561363a576136278b85614ca6565b915061363386836142e2565b9050613666565b898311801561364857508915155b15613666576136578a84614ca6565b905061366386826134a0565b91505b6136708c87614727565b955061358a565b805460009081526001808301602052604090912001541580156136ae57508054600090815260018201602052604090206002015415155b156135425780546000908152600180830160205260408083206002015483529091200154156136f857805460009081526001820160205260409020600201546136f8908290614652565b61354281826000015461457a565b6000918252600190920160205260409020600301805465ffffffffffff9092166101000266ffffffffffff0019909216919091179055565b6000918252600190920160205260409020600301805465ffffffffffff909216600160381b026cffffffffffff0000000000000019909216919091179055565b60005b825482148015906137ab5750600082815260018401602052604080822054825290206003015460ff165b156139c75760008281526001808501602052604080832054808452818420548452922001548114156138ce5760008181526001850160205260408082205482528082206002015480835291206003015490925060ff1615613854576000818152600180860160205260408083206003808201805460ff199081169091558786528386208201805482169055825486529285200180549092169092179055908290525492506139c1565b600081815260018501602052604090206002015483141561387c5780925061387c848461457a565b50600082815260018085016020526040808320548084528184206003808201805460ff199081169091558254875293862001805490931690931790915591829052546138c9908590614652565b6139c1565b6000818152600180860160205260408083205483528083209091015480835291206003015490925060ff161561394c576000818152600180860160205260408083206003808201805460ff199081169091558786528386208201805482169055825486529285200180549092169092179055908290525492506139c1565b6000818152600180860160205260409091200154831415613974578092506139748484614652565b50600082815260018085016020526040808320548084528184206003808201805460ff199081169091558254875293862001805490931690931790915591829052546139c190859061457a565b50613781565b505080546000908152600190910160205260409020600301805460ff19169055565b6000848152600186016020526040812090613a078787878787613a59565b9050613a2b8787838560030160019054906101000a900465ffffffffffff16613bee565b613a36878783613706565b6003820154600160381b900465ffffffffffff16612b1c57612b1c87878361373e565b600084815260018087016020908152604080842065ffffffffffff88168552600681019092528320909101546001600160a01b031615613af35760405162461bcd60e51b815260206004820152602f60248201527f4f7264657253746174697374696373547265654c69623a204f7264657220696460448201526e20616c72656164792065786973747360881b6064820152608401611bd2565b6001816004016000828254613b089190614cf2565b9250508190555082816005016000828254613b239190614cf2565b90915550506040805160a08101825265ffffffffffff968716808252600060208084018281528486018381526001600160a01b039a8b1660608701908152608087019a8b5294845260069790970190915293902091518254935194518916600160601b0265ffffffffffff60601b19958a16600160301b026bffffffffffffffffffffffff199095169982169990991793909317939093169690961786559051600186018054919095166001600160a01b031990911617909355505160029092019190915592915050565b60009283526001939093016020908152604080842065ffffffffffff938416808652600690910190925280842080546bffffffffffff0000000000001916600160301b9490961693840295909517909455908252919020805465ffffffffffff60601b1916600160601b909202919091179055565b600081815260018401602052604080822054848352912081905580613c8a57828455610b1c565b6000818152600180860160205260409091200154821415613cc05760008181526001808601602052604090912001839055610b1c565b600090815260019390930160205250604090912060020155565b60005b82548214801590613d025750600082815260018401602052604090206003015460ff16155b156140d5576000828152600180850160205260408083205480845292200154831415613efe5760008181526001850160205260408082206002015480835291206003015490925060ff1615613da6576000828152600180860160205260408083206003908101805460ff19908116909155858552919093209092018054909216179055613d8f848261457a565b600081815260018501602052604090206002015491505b60008281526001808601602052604080832090910154825290206003015460ff16158015613df15750600082815260018501602052604080822060020154825290206003015460ff16155b15613e1e57600082815260018581016020526040909120600301805460ff191690911790559150816140cf565b600082815260018501602052604080822060020154825290206003015460ff16613e9b576000828152600180860160205260408083208083015484529083206003908101805460ff1990811690915593869052018054909216179055613e848483614652565b600081815260018501602052604090206002015491505b600081815260018501602052604080822060039081018054868552838520808401805460ff909316151560ff199384161790558254821690925560029091015484529190922090910180549091169055613ef5848261457a565b835492506140cf565b6000818152600180860160205260408083209091015480835291206003015490925060ff1615613f7d576000828152600180860160205260408083206003908101805460ff19908116909155858552919093209092018054909216179055613f668482614652565b600081815260018086016020526040909120015491505b600082815260018501602052604080822060020154825290206003015460ff16158015613fc8575060008281526001808601602052604080832090910154825290206003015460ff16155b15613ff557600082815260018581016020526040909120600301805460ff191690911790559150816140cf565b60008281526001808601602052604080832090910154825290206003015460ff1661407457600082815260018086016020526040808320600281015484529083206003908101805460ff199081169091559386905201805490921617905561405d848361457a565b600081815260018086016020526040909120015491505b60008181526001808601602052604080832060039081018054878652838620808401805460ff909316151560ff199384161790558254821690925593015484529220909101805490911690556140ca8482614652565b835492505b50613cdd565b506000908152600190910160205260409020600301805460ff19169055565b600082815260018085016020908152604080842065ffffffffffff808716808752600683018552838720845160a0810186528154808516808352600160301b8204861698830198909852600160601b900490931694830194909452948301546001600160a01b03166060820152600290920154608083015285939092146141815760009350505050611c98565b5b604081015165ffffffffffff161561420a5760409081015165ffffffffffff808216600090815260068501602090815290849020845160a08101865281548085168252600160301b8104851693820193909352600160601b9092049092169381019390935260018101546001600160a01b031660608401526002015460808301529250614182565b5060030154610100900465ffffffffffff908116911614949350505050565b600081614238575060006111de565b8254821415614249575060016111de565b815b6000818152600185016020526040902054156142d8576000818152600180860160205260408083205480845292200154821480159061429d575060008181526001860160205260409020600201548214155b156142ad576000925050506111de565b84548114156142c1576001925050506111de565b50600090815260018401602052604090205461424b565b5060009392505050565b6000611c9883610df561271085614cd3565b6000816143135760405162461bcd60e51b8152600401611bd290614e20565b60008281526001808501602052604090912001541561434b576000828152600180850160205260409091200154611b039084906147d0565b5060008181526001830160205260409020545b801580159061437f5750600081815260018085016020526040909120015482145b156111de57600081815260018401602052604090205490915061435e565b60006143aa848484613036565b6143c65760405162461bcd60e51b8152600401611bd290614dd4565b50600082815260018085016020908152604080842065ffffffffffff808716865260068201808552838720845160a08101865281548085168252600160301b8104851682890152600160601b9004841681870152818801546001600160a01b031660608201526002918201546080820181905260038601546101009004909416808a529290965293909620909201549194909390915b8665ffffffffffff1683146144c057600092835260068501602052604090922054600160301b900465ffffffffffff16918161449781614d44565b60008581526006880160205260409020600201549093506144b9915082614cf2565b905061445c565b600385015465ffffffffffff888116600160381b9092041614156144fb576144ea89896000613706565b6144f68989600061373e565b614539565b61450a89898660200151613706565b60208085015165ffffffffffff1660009081526006870190915260409020805465ffffffffffff60601b191690555b8185600401600082825461454d9190614ca6565b92505081905550808560050160008282546145689190614ca6565b90915550959998505050505050505050565b6000818152600180840160205260408083206002810180549154828652928520909301549385905291839055909180156145c257600081815260018601602052604090208490555b60008381526001860160205260409020829055816145e25782855561462f565b6000828152600180870160205260409091200154841415614618576000828152600180870160205260409091200183905561462f565b600082815260018601602052604090206002018390555b505060008181526001938401602052604080822090940183905591825291902055565b6000818152600180840160205260408083209182018054925483855291842060020154938590528390559091801561469857600081815260018601602052604090208490555b60008381526001860160205260409020829055816146b857828555614705565b60008281526001860160205260409020600201548414156146ee5760008281526001860160205260409020600201839055614705565b600082815260018087016020526040909120018390555b5050600081815260019093016020526040808420600201839055918352912055565b6000816147465760405162461bcd60e51b8152600401611bd290614e20565b60008281526001840160205260409020600201541561477e576000828152600184016020526040902060020154611b0390849061480d565b5060008181526001830160205260409020545b80158015906147b25750600081815260018401602052604090206002015482145b156111de576000818152600184016020526040902054909150614791565b60005b60008281526001840160205260409020600201541561480757600091825260018301602052604090912060020154906147d3565b50919050565b60005b600082815260018085016020526040909120015415614807576000918252600180840160205260409092209091015490614810565b6040518060800160405280600065ffffffffffff16815260200160006001600160a01b0316815260200160008152602001600081525090565b828054828255906000526020600020906004016005900481019282156149235791602002820160005b838211156148ef57835183826101000a81548165ffffffffffff021916908365ffffffffffff16021790555092602001926006016020816005010492830192600103026148a7565b80156149215782816101000a81549065ffffffffffff02191690556006016020816005010492830192600103026148ef565b505b5061492f929150614933565b5090565b5b8082111561492f5760008155600101614934565b803560ff8116811461172357600080fd5b80356002811061172357600080fd5b80356001600160a01b038116811461172357600080fd5b60008060008060008060c0878903121561499857600080fd5b6149a187614948565b95506149af60208801614959565b94506149bd60408801614968565b9350606087013592506080870135915060a087013590509295509295509295565b600080600080600060a086880312156149f657600080fd5b6149ff86614948565b9450614a0d60208701614959565b9350614a1b60408701614968565b94979396509394606081013594506080013592915050565b600080600060608486031215614a4857600080fd5b614a5184614948565b9250614a5f60208501614968565b9150604084013565ffffffffffff81168114614a7a57600080fd5b809150509250925092565b60008060408385031215614a9857600080fd5b614aa183614948565b9150614aaf60208401614968565b90509250929050565b600060208284031215614aca57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b60028110614b0557634e487b7160e01b600052602160045260246000fd5b9052565b6101608101614b18828e614ae7565b602082019b909b5260408101999099526060890197909752608088019590955260a087019390935260c086019190915265ffffffffffff1660e0850152610100840152610120830152151561014090910152919050565b60e08101614b7d828a614ae7565b8760208301528660408301528560608301528460808301528360a083015282151560c083015298975050505050505050565b60808101614bbd8287614ae7565b84602083015283604083015265ffffffffffff8316606083015295945050505050565b65ffffffffffff8716815260c08101614bfc6020830188614ae7565b8560408301528460608301528360808301528260a0830152979650505050505050565b60a0808252865190820181905260009060209060c0840190828a01845b82811015614c6057815165ffffffffffff1684529284019290840190600101614c3c565b50505080925050614c7381840188614ae7565b508460408301528360608301528260808301529695505050505050565b634e487b7160e01b600052601160045260246000fd5b600082821015614cb857614cb8614c90565b500390565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615614ced57614ced614c90565b500290565b60008219821115614d0557614d05614c90565b500190565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215614d3357600080fd5b505080516020909101519092909150565b6000600019821415614d5857614d58614c90565b5060010190565b600082614d7c57634e487b7160e01b600052601260045260246000fd5b500490565b600065ffffffffffff80831681811415614d9d57614d9d614c90565b6001019392505050565b634e487b7160e01b600052603160045260246000fd5b600081614dcc57614dcc614c90565b506000190190565b6020808252602c908201527f4f7264657253746174697374696373547265654c69623a204f7264657220646f60408201526b195cc81b9bdd08195e1a5cdd60a21b606082015260800190565b60208082526035908201527f4f7264657253746174697374696373547265654c69623a205374617274696e676040820152742076616c75652063616e6e6f74206265207a65726f60581b60608201526080019056fefc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0aa2646970667358221220fb1feefc4a61dbff6c10e351cdeb8e1bfa1dad41643a6217292d26dc9751546b64736f6c63430008090033",
  "libraries": {
    "OrderReaderLogic": "0xca5C1F6c42237a358D6C047341f11efDCB97Dab6"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}