{
  "address": "0xeCD990444C152C2C49b042cC32eC871A4c917dbC",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "payer",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "receiver",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "txHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "settlementId",
          "type": "bytes32"
        }
      ],
      "name": "CrosschainSettlementRequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "txHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "CrosschainSettlementRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        }
      ],
      "name": "ExternalAdapterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH9",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "addExternalAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "from",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "to",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "txHash",
              "type": "string"
            }
          ],
          "internalType": "struct IExternalAdapterTxResponse.FulfillData",
          "name": "_txData",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "fulfillSettlementRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getExternalAdapters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        }
      ],
      "name": "getSettlementRequests",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "chainId",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "txHash",
              "type": "string"
            }
          ],
          "internalType": "struct ProtocolTypes.SettlementRequest",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "WETH9",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_counterparty",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_payment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_txHash",
          "type": "string"
        }
      ],
      "name": "verifyPayment",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3179b1af245dde8220916a3905757efd5b5a8319e93122c9fe17d3811088d613",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0xc769efB5C3f01826b61B4096ee5d72567b866b94",
    "transactionIndex": 17,
    "gasUsed": "2248056",
    "logsBloom": "0x
    "blockHash": "0x914a89ba9e505690396d6c1ea9e5ab530c3ca174c653f1ef55b4e9b9d5a504eb",
    "transactionHash": "0x3179b1af245dde8220916a3905757efd5b5a8319e93122c9fe17d3811088d613",
    "logs": [],
    "blockNumber": 11010203,
    "cumulativeGasUsed": "11161389",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "59521d43dda390ded85a5f23871f6cb8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"payer\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"settlementId\",\"type\":\"bytes32\"}],\"name\":\"CrosschainSettlementRequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"CrosschainSettlementRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"}],\"name\":\"ExternalAdapterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"addExternalAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"from\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txHash\",\"type\":\"string\"}],\"internalType\":\"struct IExternalAdapterTxResponse.FulfillData\",\"name\":\"_txData\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"fulfillSettlementRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getExternalAdapters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"getSettlementRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txHash\",\"type\":\"string\"}],\"internalType\":\"struct ProtocolTypes.SettlementRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"WETH9\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_counterparty\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_txHash\",\"type\":\"string\"}],\"name\":\"verifyPayment\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptedContracts()\":{\"details\":\"Returns contract names that can call this contract.\"},\"addExternalAdapter(address,bytes32)\":{\"details\":\"Triggers to add new external adapter for specific `_ccy`\",\"params\":{\"_adapter\":\"External adapter contract address\",\"_ccy\":\"Short identifier of a currency\"}},\"fulfillSettlementRequest(bytes32,(string,string,uint256,uint256,string),bytes32)\":{\"details\":\"External function to fulfill cross-chain settlement request. Expects to get transaction object to validate the correct settlement values on the PaymentAggregator contract level\",\"params\":{\"_ccy\":\"Main currency of the external adapter\",\"_txData\":\"Transaction object from external adapter\"}},\"getExternalAdapters(bytes32)\":{\"details\":\"Triggers to get external adapter for specific currency.\",\"params\":{\"_ccy\":\"Short identifier of a currency\"}},\"getSettlementRequests(bytes32)\":{\"details\":\"Triggers to get settlement request\",\"params\":{\"_requestId\":\"The id to specify a request\"}},\"getVersion()\":{\"details\":\"Get the version of the underlying contract\",\"returns\":{\"_0\":\"implementation version\"}},\"initialize(address,address,address)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requiredContracts()\":{\"details\":\"Returns required contract names in this contract\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"verifyPayment(address,bytes32,uint256,uint256,string)\":{\"details\":\"External function to verify payment by msg.sender as a part of a settlement process It could validate either a cross-chain settlement or native settlement\",\"params\":{\"_ccy\":\"Main payment settlement currency\",\"_counterparty\":\"Counterparty address\",\"_payment\":\"Payment amount in currency\",\"_timestamp\":\"Timeslot timestamp for settlement operation\",\"_txHash\":\"Cross-chain transfer txHash\"}}},\"title\":\"Settlement Engine contract is used in settlement operations of the Secured Finance protocol. Settlement is divided per 1 calendar day and verified by either external adapters (for cross-chain transaction) or native ETH-chain settlement. Contract linked to the PaymentAggregator contract and all External Adapters per target chain.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addExternalAdapter(address,bytes32)\":{\"notice\":\"Triggers only be contract ownerReverts on saving 0x0 address\"},\"fulfillSettlementRequest(bytes32,(string,string,uint256,uint256,string),bytes32)\":{\"notice\":\"Triggers only be external adapter for specific chain\"},\"initialize(address,address,address)\":{\"notice\":\"Initializes the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SettlementEngine.sol\":\"SettlementEngine\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"contracts/SettlementEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./libraries/Strings.sol\\\";\\nimport \\\"./libraries/SafeTransfer.sol\\\";\\nimport \\\"./interfaces/IExternalAdapter.sol\\\";\\nimport \\\"./interfaces/ISettlementEngine.sol\\\";\\nimport \\\"./interfaces/IExternalAdapterTxResponse.sol\\\";\\nimport \\\"./mixins/MixinAddressResolver.sol\\\";\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"./utils/Proxyable.sol\\\";\\nimport \\\"./types/ProtocolTypes.sol\\\";\\nimport {SettlementEngineStorage as Storage} from \\\"./storages/SettlementEngineStorage.sol\\\";\\n\\n/**\\n * @title Settlement Engine contract is used in settlement operations\\n * of the Secured Finance protocol. Settlement is divided per 1 calendar\\n * day and verified by either external adapters (for cross-chain transaction)\\n * or native ETH-chain settlement.\\n *\\n * Contract linked to the PaymentAggregator contract and all External Adapters per target chain.\\n */\\ncontract SettlementEngine is\\n    ISettlementEngine,\\n    IExternalAdapterTxResponse,\\n    MixinAddressResolver,\\n    SafeTransfer,\\n    Ownable,\\n    Proxyable\\n{\\n    using Address for address;\\n    using Strings for string;\\n\\n    uint16 private constant VERSION = 1;\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController\\n     */\\n    function initialize(\\n        address owner,\\n        address resolver,\\n        address WETH9\\n    ) public initializer onlyProxy {\\n        _transferOwnership(owner);\\n        _registerToken(WETH9);\\n        registerAddressResolver(resolver);\\n    }\\n\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](3);\\n        contracts[0] = Contracts.CROSSCHAIN_ADDRESS_RESOLVER;\\n        contracts[1] = Contracts.CURRENCY_CONTROLLER;\\n        contracts[2] = Contracts.PAYMENT_AGGREGATOR;\\n    }\\n\\n    /**\\n     * @dev Triggers to add new external adapter for specific `_ccy`\\n     * @param _adapter External adapter contract address\\n     * @param _ccy Short identifier of a currency\\n     *\\n     * @notice Triggers only be contract owner\\n     * @notice Reverts on saving 0x0 address\\n     */\\n    function addExternalAdapter(address _adapter, bytes32 _ccy) public override onlyOwner {\\n        require(_adapter.isContract(), \\\"NOT_CONTRACT\\\");\\n        require(currencyController().isSupportedCcy(_ccy), \\\"NON_SUPPORTED_CCY\\\");\\n\\n        uint16 chainId = currencyController().getChainId(_ccy);\\n        require(chainId != 60, \\\"NOT_ANOTHER_CHAIN\\\");\\n\\n        Storage.slot().externalAdapters[chainId] = _adapter;\\n\\n        emit ExternalAdapterAdded(_adapter, _ccy);\\n    }\\n\\n    /**\\n     * @dev Triggers to get external adapter for specific currency.\\n     * @param _ccy Short identifier of a currency\\n     */\\n    function getExternalAdapters(bytes32 _ccy) external view returns (address) {\\n        uint16 chainId = currencyController().getChainId(_ccy);\\n        return Storage.slot().externalAdapters[chainId];\\n    }\\n\\n    /**\\n     * @dev Triggers to get settlement request\\n     * @param _requestId The id to specify a request\\n     */\\n    function getSettlementRequests(bytes32 _requestId)\\n        external\\n        view\\n        returns (ProtocolTypes.SettlementRequest memory)\\n    {\\n        return Storage.slot().settlementRequests[_requestId];\\n    }\\n\\n    /**\\n     * @dev External function to verify payment by msg.sender as a part of a settlement process\\n     * It could validate either a cross-chain settlement or native settlement\\n     * @param _counterparty Counterparty address\\n     * @param _ccy Main payment settlement currency\\n     * @param _payment Payment amount in currency\\n     * @param _timestamp Timeslot timestamp for settlement operation\\n     * @param _txHash Cross-chain transfer txHash\\n     */\\n    function verifyPayment(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _payment,\\n        uint256 _timestamp,\\n        string memory _txHash\\n    ) external payable override returns (bytes32) {\\n        // TODO: add a way for third party to trigger ERC20 approved coupon payments\\n        uint16 chainId = currencyController().getChainId(_ccy);\\n        bytes32 requestId;\\n\\n        require(\\n            !paymentAggregator().isSettled(msg.sender, _counterparty, _ccy, _timestamp),\\n            \\\"TIMESLOT_SETTLED_ALREADY\\\"\\n        );\\n\\n        if (chainId == 60) {\\n            _performNativeSettlement(msg.sender, _counterparty, _ccy, _payment, _timestamp);\\n        } else {\\n            requestId = _performCrosschainSettlement(\\n                msg.sender,\\n                _counterparty,\\n                chainId,\\n                _timestamp,\\n                _txHash\\n            );\\n        }\\n\\n        return requestId;\\n    }\\n\\n    /**\\n     * @dev External function to fulfill cross-chain settlement request.\\n     * Expects to get transaction object to validate the correct settlement values\\n     * on the PaymentAggregator contract level\\n     * @param _txData Transaction object from external adapter\\n     * @param _ccy Main currency of the external adapter\\n     *\\n     * @notice Triggers only be external adapter for specific chain\\n     */\\n    function fulfillSettlementRequest(\\n        bytes32 _requestId,\\n        FulfillData memory _txData,\\n        bytes32 _ccy\\n    ) external override {\\n        uint16 chainId = currencyController().getChainId(_ccy);\\n        require(Storage.slot().externalAdapters[chainId] == msg.sender, \\\"NOT_EXTERNAL_ADAPTER\\\");\\n\\n        ProtocolTypes.SettlementRequest memory request = Storage.slot().settlementRequests[\\n            _requestId\\n        ];\\n        _validateSettlementRequest(chainId, request, _txData);\\n\\n        bytes32 _settlementId = keccak256(abi.encodePacked(_txData.txHash));\\n\\n        paymentAggregator().verifyPayment(\\n            request.payer,\\n            request.receiver,\\n            _ccy,\\n            request.timestamp,\\n            _txData.value,\\n            _settlementId\\n        );\\n\\n        emit CrosschainSettlementRequestFulfilled(\\n            _txData.from,\\n            _txData.to,\\n            chainId,\\n            _txData.value,\\n            _txData.timestamp,\\n            _txData.txHash,\\n            _settlementId\\n        );\\n\\n        delete Storage.slot().settlementRequests[_requestId];\\n    }\\n\\n    // TODO: Add cancel external adapter request function\\n\\n    /**\\n     * @dev Internal function to create a settlement validation request for an external adapter\\n     * @param _payer Payer of the settlement transfer\\n     * @param _counterparty Receiver of the settlement transfer\\n     * @param _chainId Target chain id\\n     * @param _txHash Target chain transaction hash\\n     */\\n    function _performCrosschainSettlement(\\n        address _payer,\\n        address _counterparty,\\n        uint16 _chainId,\\n        uint256 _timestamp,\\n        string memory _txHash\\n    ) internal returns (bytes32) {\\n        require(msg.value == 0, \\\"INCORRECT_ETH_VALUE\\\");\\n        require(paymentAggregator().checkSettlementWindow(_timestamp), \\\"OUT_OF_SETTLEMENT_WINDOW\\\");\\n\\n        address adapterAddr = Storage.slot().externalAdapters[_chainId];\\n        require(adapterAddr != address(0), \\\"ADAPTER_DOESN'T_EXIST\\\");\\n        IExternalAdapter adapter = IExternalAdapter(adapterAddr);\\n\\n        bytes32 requestId = adapter.createRequest(_txHash);\\n        // TODO: make sure we're not duplicating requests with the same txHashes\\n        // on external adapter contract\\n\\n        Storage.slot().settlementRequests[requestId] = ProtocolTypes.SettlementRequest({\\n            payer: _payer,\\n            receiver: _counterparty,\\n            chainId: _chainId,\\n            timestamp: _timestamp,\\n            txHash: _txHash\\n        });\\n\\n        emit CrosschainSettlementRequested(\\n            _payer,\\n            _counterparty,\\n            _chainId,\\n            _timestamp,\\n            _txHash,\\n            requestId\\n        );\\n\\n        return requestId;\\n    }\\n\\n    /**\\n     * @dev Internal function to settle payments on native ETH-based settlement.\\n     * If currency is a ERC20 token it would transfer the `_payment` amount of tokens\\n     * from msg.sender to `_counterparty` address.\\n     * If currency is ETH, native Ether would be transfered accordingly\\n     *\\n     * @param _payer Payment sender address\\n     * @param _counterparty Payment receiver address\\n     * @param _ccy Main payment settlement currency\\n     * @param _payment Payment amount in currency\\n     */\\n    function _performNativeSettlement(\\n        address _payer,\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _payment,\\n        uint256 _timestamp\\n    ) internal {\\n        if (_ccy == \\\"ETH\\\") {\\n            require(msg.value == _payment, \\\"INCORRECT_ETH_VALUE\\\");\\n            _safeTransferETH(_counterparty, msg.value);\\n        } else {\\n            require(msg.value == 0, \\\"INCORRECT_ETH_VALUE\\\");\\n            address token = currencyController().getTokenAddresses(_ccy);\\n            require(token != address(0), \\\"INVALID_TOKEN_ADDRESS\\\");\\n            _safeTransferFrom(token, _payer, _counterparty, _payment);\\n        }\\n\\n        bytes32 _settlementId = keccak256(\\n            abi.encodePacked(_payer, _counterparty, _ccy, _payment, _timestamp)\\n        );\\n\\n        paymentAggregator().verifyPayment(\\n            _payer,\\n            _counterparty,\\n            _ccy,\\n            _timestamp,\\n            _payment,\\n            _settlementId\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function to cross-chain settlement request against\\n     * a transaction object from an external adapter\\n     */\\n    function _validateSettlementRequest(\\n        uint16 _chainId,\\n        ProtocolTypes.SettlementRequest memory _request,\\n        FulfillData memory _txData\\n    ) internal view {\\n        require(_request.txHash.isEqual(_txData.txHash), \\\"INCORRECT_TX_HASH\\\");\\n\\n        string memory payerAddress = crosschainAddressResolver().getUserAddress(\\n            _request.payer,\\n            _chainId\\n        );\\n\\n        string memory receiverAddress = crosschainAddressResolver().getUserAddress(\\n            _request.receiver,\\n            _chainId\\n        );\\n\\n        require(payerAddress.isEqual(_txData.from), \\\"INCORRECT_ADDRESS_FROM\\\");\\n        require(receiverAddress.isEqual(_txData.to), \\\"INCORRECT_ADDRESS_TO\\\");\\n    }\\n\\n    /**\\n     * @dev Get the version of the underlying contract\\n     * @return implementation version\\n     */\\n    function getVersion() public pure override returns (uint16) {\\n        return VERSION;\\n    }\\n}\\n\",\"keccak256\":\"0x7ea491882b980f7c57e343ab161f8ee4a662ee0d5cbbcb206c1689b3873d4140\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/interfaces/ICloseOutNetting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICloseOutNetting {\\n    event AddCloseOutPayments(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event RemoveCloseOutPayments(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event SettleCloseOut(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 netPayment,\\n        bytes32 txHash\\n    );\\n    event VerifyCloseOut(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 netPayment,\\n        bytes32 txHash\\n    );\\n\\n    function addPayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) external;\\n\\n    function checkDefault(address _party) external view returns (bool);\\n\\n    function removePayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6bbe6c9de500443c72cde8832c0ff9c921c6f38ace09523d3a1769f6e855830e\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralAggregatorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICollateralAggregator {\\n    event Register(address indexed addr);\\n    event Release(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    );\\n    event Liquidate(address indexed from, address indexed to, bytes32 ccy, uint256 amount);\\n    event ReleaseUnsettled(address indexed party, bytes32 ccy, uint256 amount);\\n    event SettleCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event UpdatePV(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    );\\n    event UseCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    );\\n    event UseUnsettledCollateral(address indexed party, bytes32 ccy, uint256 amount);\\n\\n    function checkRegisteredUser(address addr) external view returns (bool);\\n\\n    function getCcyExposures(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getCoverage(address _party0, address _party1) external view returns (uint256, uint256);\\n\\n    function getExposedCurrencies(address partyA, address partyB)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getMaxCollateralBookWidthdraw(address _user)\\n        external\\n        view\\n        returns (uint256 maxWithdraw);\\n\\n    function getMaxCollateralWidthdraw(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getNetAndTotalPV(address _party0, address _party1)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getRebalanceCollateralAmounts(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getTotalUnsettledExp(address _user) external view returns (uint256);\\n\\n    function getUnsettledCoverage(address _user) external view returns (uint256 coverage);\\n\\n    function isCovered(\\n        address _party0,\\n        address _party1,\\n        bytes32 _ccy,\\n        uint256 _party0PV,\\n        uint256 _party1PV,\\n        bool _isSettled\\n    ) external view returns (bool, bool);\\n\\n    function isCoveredUnsettled(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) external view returns (bool);\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        uint256 liquidationInETH\\n    ) external;\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        bytes32 ccy,\\n        uint256 liquidationAmount,\\n        uint256 pv,\\n        bool isSettled\\n    ) external;\\n\\n    function register() external;\\n\\n    function register(string[] memory _addresses, uint256[] memory _chainIds) external;\\n\\n    function releaseCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function releaseUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function settleCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external;\\n\\n    function updatePV(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    ) external;\\n\\n    function useCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function useUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function getUnsettledCollateral(address user, bytes32 ccy) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6ce0f77af603bba3166a03eebf4b1679a78491c64cce912331765889583a4369\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICollateralVault {\\n    event Deposit(address user, bytes32 ccy, uint256 amount);\\n    event PositionDeposit(address user, address counterparty, bytes32 ccy, uint256 amount);\\n    event RebalanceBetween(\\n        address user,\\n        address fromCounterparty,\\n        address toCounterparty,\\n        bytes32 ccy,\\n        uint256 amount\\n    );\\n    event RebalanceFrom(address user, address counterparty, bytes32 ccy, uint256 amount);\\n    event RebalanceTo(address user, address counterparty, bytes32 ccy, uint256 amount);\\n    event Withdraw(address from, bytes32 ccy, uint256 amount);\\n    event PositionWithdraw(address from, address counterparty, bytes32 ccy, uint256 amount);\\n    event Liquidate(address from, address to, bytes32 ccy, uint256 amount);\\n    event LiquidateIndependent(address from, address to, bytes32 ccy, uint256 amount);\\n\\n    function deposit(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external;\\n\\n    function deposit(bytes32 _ccy, uint256 _amount) external payable;\\n\\n    function getIndependentCollateral(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getIndependentCollateralInETH(address _user, bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLockedCollateral(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getLockedCollateralInETH(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getLockedCollateral(\\n        address _partyA,\\n        address _partyB,\\n        bytes32 _ccy\\n    ) external view returns (uint256, uint256);\\n\\n    function getLockedCollateralInETH(\\n        address _partyA,\\n        address _partyB,\\n        bytes32 _ccy\\n    ) external view returns (uint256, uint256);\\n\\n    function liquidate(\\n        address _from,\\n        address _to,\\n        uint256 _liquidationTarget\\n    ) external returns (bool);\\n\\n    function rebalanceCollateral(\\n        address _party0,\\n        address _party1,\\n        uint256 _rebalanceTarget,\\n        bool isRebalanceFrom\\n    ) external returns (bool);\\n\\n    function rebalanceBetween(\\n        address _user,\\n        address _fromParty,\\n        address _toParty,\\n        bytes32 _ccy,\\n        uint256 _amountETH\\n    ) external returns (uint256);\\n\\n    function withdraw(bytes32 _ccy, uint256 _amount) external;\\n\\n    function withdrawFrom(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external;\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getUsedCurrencies(address party0, address party1)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getTotalIndependentCollateralInETH(address _party) external view returns (uint256);\\n\\n    function getTotalLockedCollateralInETH(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x05a973a84165750802bf97f2c889467191ae0a99fb50221149f46b9df35bdd6e\",\"license\":\"MIT\"},\"contracts/interfaces/ICrosschainAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICrosschainAddressResolver {\\n    event UpdateAddress(address _user, uint256 _chainId, string _address);\\n\\n    /**\\n     * @dev Trigers to register multiple cross-chain addresses per chainId for user\\n     * @param _user Secured Finance user ETH address\\n     * @param _chainIds Array of chain ID number\\n     * @param _addresses Array of the target blockchain addresses\\n     *\\n     * @notice This function triggers by the Collateral Aggregator while user is registered in a system\\n     *\\n     */\\n    function updateAddresses(\\n        address _user,\\n        uint256[] memory _chainIds,\\n        string[] memory _addresses\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to register cross-chain address per chainId by user\\n     * @param _chainId Chain ID number\\n     * @param _address Target blockchain address\\n     *\\n     */\\n    function updateAddress(uint256 _chainId, string memory _address) external;\\n\\n    /**\\n     * @dev Trigers to register cross-chain address per chainId by user\\n     * @param _user Secured Finance user ETH address\\n     * @param _chainId Chain ID number\\n     * @param _address Target blockchain address\\n     *\\n     */\\n    function updateAddress(\\n        address _user,\\n        uint256 _chainId,\\n        string memory _address\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to get target blockchain address for a specific user.\\n     * @param _user Ethereum address of the Secured Finance user\\n     * @param _user Chain ID number\\n     */\\n    function getUserAddress(address _user, uint256 _chainId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ef89efa2bd508258da18e2ca2699cb07847d75d6df996cde56b8f6d524d7db8\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CcyAdded(bytes32 indexed ccy, string name, uint16 chainId, uint256 haircut);\\n    event CcyCollateralUpdate(bytes32 indexed ccy, bool isCollateral);\\n    event CcySupportUpdate(bytes32 indexed ccy, bool isSupported);\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n    event MinMarginUpdated(bytes32 indexed ccy, uint256 minMargin);\\n    event PriceFeedAdded(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n    event PriceFeedRemoved(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n\\n    function convertBulkToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH) external view returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256);\\n\\n    function getCurrencies(bytes32) external view returns (ProtocolTypes.Currency memory);\\n\\n    function getEthDecimals(bytes32) external view returns (uint8);\\n\\n    function getUsdDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getMinMargin(bytes32 _ccy) external view returns (uint256);\\n\\n    function getChainId(bytes32 _ccy) external view returns (uint16);\\n\\n    function isCollateral(bytes32) external view returns (bool);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        uint16 _chainId,\\n        address _ethPriceFeed,\\n        uint256 _haircut,\\n        address _tokenAddress\\n    ) external;\\n\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function updateCollateralSupport(bytes32 _ccy, bool _isSupported) external;\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported) external;\\n\\n    function updateMinMargin(bytes32 _ccy, uint256 _minMargin) external;\\n\\n    function getTokenAddresses(bytes32) external view returns (address);\\n}\\n\",\"keccak256\":\"0x0bad90929934b6a43200ae276697a9e428d47b119120ea81208778ced9abbe76\",\"license\":\"MIT\"},\"contracts/interfaces/IExternalAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IExternalAdapter {\\n    function createRequest(string memory _txHash) external returns (bytes32 requestId);\\n\\n    function cancelRequest(\\n        string memory _txHash,\\n        bytes32 _requestId,\\n        bytes4 _callbackFunctionId,\\n        uint256 _expiration\\n    ) external;\\n\\n    function fulfill(\\n        bytes32 _requestId,\\n        string calldata _from,\\n        string calldata _to,\\n        uint256 _value,\\n        uint256 _timestamp\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6d5b4b3116a7308f51200d20e563366d9160c6f989978dcf94a13ef4e7ec3e67\",\"license\":\"MIT\"},\"contracts/interfaces/IExternalAdapterTxResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IExternalAdapterTxResponse {\\n    struct FulfillData {\\n        string from;\\n        string to;\\n        uint256 value;\\n        uint256 timestamp;\\n        string txHash;\\n    }\\n}\\n\",\"keccak256\":\"0x2fde36d406ead00758aeccdf58fd8be1b32cf2fd3fd2061824d538bd06d4ab4c\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\nstruct Order {\\n    bytes32 ccy;\\n    uint256 term;\\n    ProtocolTypes.Side side;\\n    uint256 amount;\\n    uint256 rate;\\n}\\n\\ninterface ILendingMarketController {\\n    event LendingMarketCreated(bytes32 ccy, uint256 term, address indexed marketAddr);\\n    event LendingMarketsPaused(bytes32 ccy);\\n    event LendingMarketsUnpaused(bytes32 ccy);\\n\\n    function deployLendingMarket(bytes32 _ccy, uint256 _term) external returns (address market);\\n\\n    function getBorrowRatesForCcy(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getDiscountFactorsForCcy(bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256[] memory, uint256[] memory);\\n\\n    function getLendRatesForCcy(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getMidRatesForCcy(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getLendingMarket(bytes32, uint256) external view returns (address);\\n\\n    function pauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function placeBulkOrders(Order[] memory orders) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function getSupportedTerms(bytes32 _ccy) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x8c2a321d93fb14a1878ffb332e03d8201c4998ecca88b8862347855787ebf49c\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ILiquidations {\\n    event DealAddedToLiquidationQueue(address party0, address party1, bytes32 dealId);\\n    event DealRemovedFromLiquidationQueue(address party0, address party1, bytes32 dealId);\\n    event LiquidationAgentAdded(address indexed liquidationAgent);\\n    event LiquidationAgentRemoved(address indexed liquidationAgent);\\n    event OffsetUpdated(uint256 oldOffset, uint256 newOffset);\\n\\n    function addDealToLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external;\\n\\n    function addLiquidationAgent(address _liquidationAgent) external;\\n\\n    function liquidateDeals(\\n        address party0,\\n        address party1,\\n        bytes32[] memory dealIds\\n    ) external;\\n\\n    function liquidateDeals(address party0, address party1) external;\\n\\n    function getOffset() external view returns (uint256);\\n\\n    function removeDealFromLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external;\\n\\n    function removeLiquidationAgent(address _liquidationAgent) external;\\n\\n    function updateLiquidationOffset(uint256 _offset) external;\\n}\\n\",\"keccak256\":\"0x4e2784b0014ff688a60c4628cc1ebab63ca0aa40aa9949dbde6d53c69dbe3746\",\"license\":\"MIT\"},\"contracts/interfaces/IMarkToMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IMarkToMarket {\\n    function updatePV(bytes32 dealId) external;\\n\\n    function updatePVs(bytes32[] memory dealIds) external;\\n}\\n\",\"keccak256\":\"0xb100f8c173fda11136c5579306d99065752bb797bff6ffe91c64eee228ae2df9\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct Slot {\\n    uint256 totalPayment0;\\n    uint256 totalPayment1;\\n    uint256 netPayment;\\n    bool flipped;\\n    bytes32 paymentProof;\\n    address verificationParty;\\n    bool isSettled;\\n}\\n\\ninterface IPaymentAggregator {\\n    event RegisterPayment(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event VerifyPayment(\\n        address indexed verifier,\\n        address indexed counterparty,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment,\\n        bytes32 settlementId\\n    );\\n    event SettlePayment(\\n        address indexed verifier,\\n        address indexed counterparty,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        bytes32 settlementId\\n    );\\n    event RemovePayment(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n\\n    function registerPayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 dealId,\\n        uint256[] memory timestamps,\\n        uint256[] memory payments0,\\n        uint256[] memory payments1\\n    ) external;\\n\\n    function removePayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 dealId,\\n        uint256[] calldata timestamps,\\n        uint256[] calldata payments0,\\n        uint256[] calldata payments1\\n    ) external;\\n\\n    function verifyPayment(\\n        address verifier,\\n        address counterparty,\\n        bytes32 ccy,\\n        uint256 timestamp,\\n        uint256 payment,\\n        bytes32 settlementId\\n    ) external;\\n\\n    function isSettled(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 timestamp\\n    ) external view returns (bool status);\\n\\n    function getDealsFromSlot(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 slotPosition\\n    ) external view returns (bytes32[] memory);\\n\\n    // function getTimeSlotByDate(\\n    //     address party0,\\n    //     address party1,\\n    //     bytes32 ccy,\\n    //     uint256 year,\\n    //     uint256 month,\\n    //     uint256 day\\n    // ) external view returns (Slot memory timeSlot);\\n\\n    // function getTimeSlotBySlotId(\\n    //     address party0,\\n    //     address party1,\\n    //     bytes32 ccy,\\n    //     bytes32 slot\\n    // ) external view returns (Slot memory timeSlot);\\n\\n    function checkSettlementWindow(uint256 targetTime) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x626f4bb7d28a476b21c2bc18278a091f134fbd98a6e06e586cd63180184518f4\",\"license\":\"MIT\"},\"contracts/interfaces/IProductAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IProductAddressResolver {\\n    event RegisterProduct(bytes4 prefix, address indexed product, address indexed controller);\\n\\n    /**\\n     * @dev Triggers to register new product type in a address resolver\\n     * @param _prefix Bytes4 prefix for product type\\n     * @param _contract Product contract address\\n     * @param _controller Market controller address\\n     *\\n     * @notice Triggers only be contract owner\\n     * @notice Reverts on saving contract which is not supporting a common interface\\n     */\\n    function registerProduct(\\n        bytes4 _prefix,\\n        address _contract,\\n        address _controller\\n    ) external;\\n\\n    /**\\n     * @dev Triggers to register several product types in a address resolver\\n     * @param _prefixes Array of Bytes4 prefixes for each product type\\n     * @param _contracts Array of smart contract addresses for each product\\n     * @param _controllers Array of market controller addresses\\n     *\\n     * @notice Triggers only be contract owner\\n     * @notice Reverts on saving contract which is not supporting common interface\\n     */\\n    function registerProducts(\\n        bytes4[] calldata _prefixes,\\n        address[] calldata _contracts,\\n        address[] calldata _controllers\\n    ) external;\\n\\n    /**\\n     * @dev Triggers to get product address by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContract(bytes4 _prefix) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to get product addresses\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContracts() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Triggers to get product address by deal id\\n     * @param _dealId Product deal idenfitier\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContractByDealId(bytes32 _dealId) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to get market controller address by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     * @notice To work with the contract this address should be wrapped around IYieldCurve interface\\n     */\\n    function getControllerContract(bytes4 _prefix) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to get market controller address by deal id\\n     * @param _dealId Product deal idenfitier\\n     * @notice To work with the contract this address should be wrapped around IYieldCurve interface\\n     */\\n    function getControllerContractByDealId(bytes32 _dealId) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product is supported by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     */\\n    function isSupportedProduct(bytes4 _prefix) external view returns (bool);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product is supported by deal id.\\n     * @param _dealId Product deal idenfitier\\n     */\\n    function isSupportedProductByDealId(bytes32 _dealId) external view returns (bool);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product contract is registered.\\n     * @param _product Product contract address\\n     */\\n    function isRegisteredProductContract(address _product) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x44855f57913172a86e203a89d7713efe1ec39351a0830b0f35fac9ffa24ec770\",\"license\":\"MIT\"},\"contracts/interfaces/ISettlementEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.3. SEE SOURCE BELOW. !!\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IExternalAdapterTxResponse.sol\\\";\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ISettlementEngine {\\n    event CrosschainSettlementRequested(\\n        address payer,\\n        address receiver,\\n        uint16 chainId,\\n        uint256 timestamp,\\n        string txHash,\\n        bytes32 requestId\\n    );\\n    event CrosschainSettlementRequestFulfilled(\\n        string payer,\\n        string receiver,\\n        uint16 chainId,\\n        uint256 amount,\\n        uint256 timestamp,\\n        string txHash,\\n        bytes32 settlementId\\n    );\\n    event ExternalAdapterAdded(address indexed adapter, bytes32 ccy);\\n\\n    function addExternalAdapter(address _adapter, bytes32 _ccy) external;\\n\\n    function getExternalAdapters(bytes32) external view returns (address);\\n\\n    function fulfillSettlementRequest(\\n        bytes32 _requestId,\\n        IExternalAdapterTxResponse.FulfillData calldata _txData,\\n        bytes32 _ccy\\n    ) external;\\n\\n    function getVersion() external view returns (uint16);\\n\\n    function getSettlementRequests(bytes32)\\n        external\\n        view\\n        returns (ProtocolTypes.SettlementRequest memory);\\n\\n    function verifyPayment(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _payment,\\n        uint256 _timestamp,\\n        string calldata _txHash\\n    ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3888a41e40b8eb2cebf8557436b0f09286dfaeb08a3762a33c0a6ae0521f67a3\",\"license\":\"MIT\"},\"contracts/interfaces/ITermStructure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ITermStructure {\\n    event TermAdded(uint256 numDays);\\n    event ProductTermSupportUpdated(\\n        uint256 numDays,\\n        bytes4 product,\\n        bytes32 _ccy,\\n        bool isSupported\\n    );\\n    event TermSupportUpdated(uint256 numDays, bool isSupported);\\n\\n    function getDfFrac(uint256 _numDays) external view returns (uint256);\\n\\n    function getNumDays(uint256 _numDays) external view returns (uint256);\\n\\n    function getNumPayments(uint256 _numDays, uint8 frequency) external view returns (uint256);\\n\\n    function getTerm(uint256 _numDays, uint8 frequency)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getTermSchedule(uint256 _numDays, uint8 frequency)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isSupportedTerm(\\n        uint256 _numDays,\\n        bytes4 _product,\\n        bytes32 _ccy\\n    ) external view returns (bool);\\n\\n    function supportTerm(\\n        uint256 _numDays,\\n        bytes4[] memory _products,\\n        bytes32[] memory _currencies\\n    ) external;\\n\\n    function updateTermSupport(\\n        uint256 _numDays,\\n        bytes4 _product,\\n        bytes32 _ccy,\\n        bool _isSupported\\n    ) external;\\n\\n    function getTermsForProductAndCcy(\\n        bytes4 _product,\\n        bytes32 _ccy,\\n        bool sort\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x8509c4f927878626ee8cb73d0fb2daa0cf0a7c9869bb6241ccc180d0854544f4\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH9 is IERC20 {\\n    event Deposit(address user, uint256 amount);\\n    event Withdrawal(address user, uint256 amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x5aefa06efedcbfe7d7605aa67217f066a0e84b450d416695254eb95239a251d7\",\"license\":\"MIT\"},\"contracts/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant CLOSE_OUT_NETTING = \\\"CloseOutNetting\\\";\\n    bytes32 internal constant COLLATERAL_AGGREGATOR = \\\"CollateralAggregator\\\";\\n    bytes32 internal constant COLLATERAL_VAULT = \\\"CollateralVault\\\";\\n    bytes32 internal constant CROSSCHAIN_ADDRESS_RESOLVER = \\\"CrosschainAddressResolver\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant LIQUIDATIONS = \\\"Liquidations\\\";\\n    bytes32 internal constant MARK_TO_MARKET = \\\"MarkToMarket\\\";\\n    bytes32 internal constant PAYMENT_AGGREGATOR = \\\"PaymentAggregator\\\";\\n    bytes32 internal constant PRODUCT_ADDRESS_RESOLVER = \\\"ProductAddressResolver\\\";\\n    bytes32 internal constant SETTLEMENT_ENGINE = \\\"SettlementEngine\\\";\\n    bytes32 internal constant TERM_STRUCTURE = \\\"TermStructure\\\";\\n}\\n\",\"keccak256\":\"0x939f50a87aa51db235c78c3c224edc9123271a5b44974e13557e4590958e83df\",\"license\":\"MIT\"},\"contracts/libraries/SafeTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IWETH9.sol\\\";\\n\\nabstract contract SafeTransfer {\\n    address public WETH9;\\n\\n    function _registerToken(address _WETH9) internal {\\n        require(WETH9 == address(0), \\\"WETH9 registered already\\\");\\n        WETH9 = _WETH9;\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == WETH9, \\\"Not WETH9\\\");\\n    }\\n\\n    function _depositAssets(\\n        address _token,\\n        address _payer,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == WETH9 && address(this).balance >= _amount) {\\n            _wrapWETH(_receiver, _amount);\\n        } else if (_receiver == address(this)) {\\n            _safeTransferFrom(_token, _payer, _amount);\\n        } else {\\n            _safeTransferFrom(_token, _payer, _receiver, _amount);\\n        }\\n    }\\n\\n    function _withdrawAssets(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == WETH9) {\\n            _unwrapWETH(_receiver, _amount);\\n        } else {\\n            _safeTransfer(_token, _receiver, _amount);\\n        }\\n    }\\n\\n    function _wrapWETH(address _receiver, uint256 _amount) internal {\\n        _amount = msg.value;\\n\\n        IWETH9(WETH9).deposit{value: _amount}();\\n        IWETH9(WETH9).transfer(_receiver, _amount);\\n    }\\n\\n    function _unwrapWETH(address _receiver, uint256 _amount) internal {\\n        uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));\\n        require(balanceWETH9 >= _amount, \\\"Insufficient WETH9\\\");\\n\\n        if (balanceWETH9 > 0) {\\n            IWETH9(WETH9).withdraw(_amount);\\n            _safeTransferETH(_receiver, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer helper from UniswapV2 Router\\n    function _safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    /**\\n     * There are many non-compliant ERC20 tokens... this can handle most, adapted from UniSwap V2\\n     * Im trying to make it a habit to put external calls last (reentrancy)\\n     * You can put this in an internal function if you like.\\n     */\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // 0xa9059cbb = bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n            abi.encodeWithSelector(0xa9059cbb, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        ); // ERC20 Transfer failed\\n    }\\n\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        uint256 amount\\n    ) internal virtual {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // 0x23b872dd = bytes4(keccak256(\\\"transferFrom(address,address,uint256)\\\"))\\n            abi.encodeWithSelector(0x23b872dd, from, address(this), amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        ); // ERC20 TransferFrom failed\\n    }\\n\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function _safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x647894c51d66d18d31ff9d006a9381c845e02e381798f2a1592b490022728b3d\",\"license\":\"MIT\"},\"contracts/libraries/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Strings {\\n    /**\\n     * @dev Helper function to check wether strings are equal\\n     * @param text0 First string to compare\\n     * @param text1 Second string to compare\\n     * @return Boolean statement\\n     */\\n    function isEqual(string memory text0, string memory text1) internal pure returns (bool) {\\n        return keccak256(abi.encodePacked(text0)) == keccak256(abi.encodePacked(text1));\\n    }\\n\\n    function toHex(bytes32 data) public pure returns (string memory) {\\n        return\\n            string(abi.encodePacked(\\\"0x\\\", toHex16(bytes16(data)), toHex16(bytes16(data << 128))));\\n    }\\n\\n    function toHex16(bytes16 data) internal pure returns (bytes32 result) {\\n        result =\\n            (bytes32(data) & 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000) |\\n            ((bytes32(data) & 0x0000000000000000FFFFFFFFFFFFFFFF00000000000000000000000000000000) >>\\n                64);\\n        result =\\n            (result & 0xFFFFFFFF000000000000000000000000FFFFFFFF000000000000000000000000) |\\n            ((result & 0x00000000FFFFFFFF000000000000000000000000FFFFFFFF0000000000000000) >> 32);\\n        result =\\n            (result & 0xFFFF000000000000FFFF000000000000FFFF000000000000FFFF000000000000) |\\n            ((result & 0x0000FFFF000000000000FFFF000000000000FFFF000000000000FFFF00000000) >> 16);\\n        result =\\n            (result & 0xFF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000) |\\n            ((result & 0x00FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF0000) >> 8);\\n        result =\\n            ((result & 0xF000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000) >> 4) |\\n            ((result & 0x0F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F00) >> 8);\\n        result = bytes32(\\n            0x3030303030303030303030303030303030303030303030303030303030303030 +\\n                uint256(result) +\\n                (((uint256(result) +\\n                    0x0606060606060606060606060606060606060606060606060606060606060606) >> 4) &\\n                    0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F) *\\n                7\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x52f26152f14a7970eb15b529f04d981112c11945f796e63c67fcb03575890cee\",\"license\":\"MIT\"},\"contracts/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../libraries/Contracts.sol\\\";\\nimport \\\"../interfaces/IAddressResolver.sol\\\";\\nimport \\\"../interfaces/ICloseOutNetting.sol\\\";\\nimport \\\"../interfaces/ICollateralAggregatorV2.sol\\\";\\nimport \\\"../interfaces/ICollateralVault.sol\\\";\\nimport \\\"../interfaces/ICrosschainAddressResolver.sol\\\";\\nimport \\\"../interfaces/ICurrencyController.sol\\\";\\nimport \\\"../interfaces/IMarkToMarket.sol\\\";\\nimport \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport \\\"../interfaces/ILiquidations.sol\\\";\\nimport \\\"../interfaces/IPaymentAggregator.sol\\\";\\nimport \\\"../interfaces/IProductAddressResolver.sol\\\";\\nimport \\\"../interfaces/ISettlementEngine.sol\\\";\\nimport \\\"../interfaces/ITermStructure.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    IAddressResolver public resolver;\\n\\n    mapping(bytes32 => address) private addressCache;\\n\\n    modifier onlyAcceptedContracts() {\\n        require(isAcceptedContract(msg.sender), \\\"Only Accepted Contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns required contract names in this contract\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @dev Returns contract names that can call this contract.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        require(address(resolver) == address(0), \\\"resolver registered already\\\");\\n        resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function closeOutNetting() internal view returns (ICloseOutNetting) {\\n        return ICloseOutNetting(getAddress(Contracts.CLOSE_OUT_NETTING));\\n    }\\n\\n    function collateralAggregator() internal view returns (ICollateralAggregator) {\\n        return ICollateralAggregator(getAddress(Contracts.COLLATERAL_AGGREGATOR));\\n    }\\n\\n    function collateralVault() internal view returns (ICollateralVault) {\\n        return ICollateralVault(getAddress(Contracts.COLLATERAL_VAULT));\\n    }\\n\\n    function crosschainAddressResolver() internal view returns (ICrosschainAddressResolver) {\\n        return ICrosschainAddressResolver(getAddress(Contracts.CROSSCHAIN_ADDRESS_RESOLVER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function markToMarket() internal view returns (IMarkToMarket) {\\n        return IMarkToMarket(getAddress(Contracts.MARK_TO_MARKET));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function liquidations() internal view returns (ILiquidations) {\\n        return ILiquidations(getAddress(Contracts.LIQUIDATIONS));\\n    }\\n\\n    function paymentAggregator() internal view returns (IPaymentAggregator) {\\n        return IPaymentAggregator(getAddress(Contracts.PAYMENT_AGGREGATOR));\\n    }\\n\\n    function productAddressResolver() internal view returns (IProductAddressResolver) {\\n        return IProductAddressResolver(getAddress(Contracts.PRODUCT_ADDRESS_RESOLVER));\\n    }\\n\\n    function settlementEngine() internal view returns (ISettlementEngine) {\\n        return ISettlementEngine(getAddress(Contracts.SETTLEMENT_ENGINE));\\n    }\\n\\n    function termStructure() internal view returns (ITermStructure) {\\n        return ITermStructure(getAddress(Contracts.TERM_STRUCTURE));\\n    }\\n}\\n\",\"keccak256\":\"0xa11e12f5ac8a1710ad3f16fb7d867e615ed13dd98324eea2f7eb36c00b21c2fb\",\"license\":\"MIT\"},\"contracts/storages/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary OwnableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.ownable\\\");\\n\\n    struct Storage {\\n        address owner;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ef8bfa06947cdb63d47248ad074ac42a1b1ba828a2c97e42486a5dbb2c03e1d\",\"license\":\"MIT\"},\"contracts/storages/SettlementEngineStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\nlibrary SettlementEngineStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.settlementEngine\\\");\\n\\n    struct Storage {\\n        // Mapping to external providers addresses by Chain Ids\\n        // for ETH-based currencies there is no need for external adapters\\n        mapping(uint16 => address) externalAdapters;\\n        // Mapping of cross-chain settlement requests per requestId\\n        mapping(bytes32 => ProtocolTypes.SettlementRequest) settlementRequests;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x63d73db12309ffcb418b0e3032335091b675b7ce461ad27d8167b0bd726b5baf\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant BP = 10000; // basis point\\n    uint256 public constant PCT = 10000; // percentage point in basis\\n    uint256 public constant PENALTYLEVEL = 1000; // 10% settlement failure penalty\\n    uint256 public constant MKTMAKELEVEL = 2000; // 20% for market making\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Loan common types\\n    enum LoanState {\\n        REGISTERED,\\n        WORKING,\\n        DUE,\\n        PAST_DUE,\\n        CLOSED,\\n        TERMINATED\\n    }\\n    enum DFTERM {\\n        _3m,\\n        _6m,\\n        _1y,\\n        _2y,\\n        _3y,\\n        _4y,\\n        _5y\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n\\n    // FXMarket common types\\n    enum CcyPair {\\n        FILETH,\\n        FILUSDC,\\n        ETHUSDC,\\n        BTCUSDC,\\n        BTCETH,\\n        BTCFIL\\n    }\\n    enum FXSide {\\n        BID,\\n        OFFER\\n    }\\n\\n    enum PaymentFrequency {\\n        ANNUAL,\\n        SEMI_ANNUAL,\\n        QUARTERLY,\\n        MONTHLY,\\n        FORWARD\\n    }\\n\\n    struct Currency {\\n        bool isSupported;\\n        string name;\\n        uint16 chainId; // chain id for address conversion\\n    }\\n\\n    struct SettlementRequest {\\n        address payer;\\n        address receiver;\\n        uint16 chainId;\\n        uint256 timestamp;\\n        string txHash;\\n    }\\n}\\n\",\"keccak256\":\"0x6419e0bcd07b8ff86e0ffce1e7f16e9a38a470f0ab2f697af0f5234cb943303f\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../storages/OwnableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return OwnableStorage.slot().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = OwnableStorage.slot().owner;\\n        OwnableStorage.slot().owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1c782b9deaf1f94d2af99826e6e8207f5e71f3fbb6ce18805913a3ca7dda9579\",\"license\":\"MIT\"},\"contracts/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9f02e4ae76f34a28299e4b6a10490ebf99b9c9a8454765bff7977cc4f3d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506127b5806100206000396000f3fe6080604052600436106100f75760003560e01c80634aa4a4fc1161008a578063c0c53b8b11610059578063c0c53b8b146102db578063e0997659146102fb578063e54189d91461030f578063f2fde38b1461032f57600080fd5b80634aa4a4fc14610271578063715018a6146102915780637c34ebc8146102a65780638da5cb5b146102c657600080fd5b80632ac53ebd116100c65780632ac53ebd146101dc5780632af64bd3146102095780632e4e6f101461022e5780633d03b9da1461024f57600080fd5b806304f3bcec1461014e5780630d8e6e2c1461018b5780631e0c0d21146101a757806329985e5a146101c757600080fd5b36610149576002546001600160a01b031633146101475760405162461bcd60e51b81526020600482015260096024820152684e6f7420574554483960b81b60448201526064015b60405180910390fd5b005b600080fd5b34801561015a57600080fd5b5060005461016e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561019757600080fd5b5060405160018152602001610182565b3480156101b357600080fd5b5061016e6101c236600461204e565b61034f565b3480156101d357600080fd5b50610147610407565b3480156101e857600080fd5b506101fc6101f736600461204e565b61059a565b60405161018291906120bf565b34801561021557600080fd5b5061021e6106f7565b6040519015158152602001610182565b61024161023c36600461221d565b610815565b604051908152602001610182565b34801561025b57600080fd5b506102646109bf565b604051610182919061228a565b34801561027d57600080fd5b5060025461016e906001600160a01b031681565b34801561029d57600080fd5b50610147610a89565b3480156102b257600080fd5b506101476102c13660046122ce565b610ac4565b3480156102d257600080fd5b5061016e610d47565b3480156102e757600080fd5b506101476102f63660046122fa565b610d7a565b34801561030757600080fd5b506060610264565b34801561031b57600080fd5b5061014761032a366004612345565b610e77565b34801561033b57600080fd5b5061014761034a366004612422565b61120a565b60008061035a6112aa565b6001600160a01b031663b43a9e6c846040518263ffffffff1660e01b815260040161038791815260200190565b60206040518083038186803b15801561039f57600080fd5b505afa1580156103b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d79190612446565b61ffff16600090815260008051602061276083398151915260205260409020546001600160a01b03169392505050565b60006104116109bf565b905060005b81518110156105965760008282815181106104335761043361246a565b6020026020010151905060008060009054906101000a90046001600160a01b03166001600160a01b0316636795dbcd83846040516020016104a091907f5265736f6c766572206d697373696e67207461726765743a20000000000000008152601981019190915260390190565b6040516020818303038152906040526040518363ffffffff1660e01b81526004016104cc929190612480565b60206040518083038186803b1580156104e457600080fd5b505afa1580156104f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051c9190612499565b60008381526001602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251868152918201529192507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68910160405180910390a15050808061058e906124b6565b915050610416565b5050565b6105e26040518060a0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600061ffff16815260200160008152602001606081525090565b60008281527f53c4c7442f06a0a487ac447715ea6975b98cb1fc62698a7defbb76ecacb5d5b86020908152604091829020825160a08101845281546001600160a01b039081168252600183015490811693820193909352600160a01b90920461ffff16928201929092526002820154606082015260038201805491929160808401919061066e906124df565b80601f016020809104026020016040519081016040528092919081815260200182805461069a906124df565b80156106e75780601f106106bc576101008083540402835291602001916106e7565b820191906000526020600020905b8154815290600101906020018083116106ca57829003601f168201915b5050505050815250509050919050565b6000806107026109bf565b905060005b815181101561080c5760008282815181106107245761072461246a565b60209081029190910181015160008181526001909252604080832054925490516321f8a72160e01b8152600481018390529193506001600160a01b039283169216906321f8a7219060240160206040518083038186803b15801561078757600080fd5b505afa15801561079b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bf9190612499565b6001600160a01b03161415806107ea57506000818152600160205260409020546001600160a01b0316155b156107f9576000935050505090565b5080610804816124b6565b915050610707565b50600191505090565b6000806108206112aa565b6001600160a01b031663b43a9e6c876040518263ffffffff1660e01b815260040161084d91815260200190565b60206040518083038186803b15801561086557600080fd5b505afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d9190612446565b905060006108a96112cf565b6040516375dc0d2160e01b81523360048201526001600160a01b038a81166024830152604482018a90526064820188905291909116906375dc0d219060840160206040518083038186803b15801561090057600080fd5b505afa158015610914573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610938919061251a565b156109855760405162461bcd60e51b815260206004820152601860248201527f54494d45534c4f545f534554544c45445f414c52454144590000000000000000604482015260640161013e565b8161ffff16603c14156109a45761099f33898989896112ee565b6109b4565b6109b13389848888611517565b90505b979650505050505050565b604080516003808252608082019092526060916020820183803683370190505090507821b937b9b9b1b430b4b720b2323932b9b9a932b9b7b63b32b960391b81600081518110610a1157610a1161246a565b6020026020010181815250507121bab93932b731bca1b7b73a3937b63632b960711b81600181518110610a4657610a4661246a565b602002602001018181525050702830bcb6b2b73a20b3b3b932b3b0ba37b960791b81600281518110610a7a57610a7a61246a565b60200260200101818152505090565b33610a92610d47565b6001600160a01b031614610ab85760405162461bcd60e51b815260040161013e9061253c565b610ac26000611828565b565b33610acd610d47565b6001600160a01b031614610af35760405162461bcd60e51b815260040161013e9061253c565b6001600160a01b0382163b610b395760405162461bcd60e51b815260206004820152600c60248201526b1393d517d0d3d395149050d560a21b604482015260640161013e565b610b416112aa565b6001600160a01b031663d4d4f6ce826040518263ffffffff1660e01b8152600401610b6e91815260200190565b60206040518083038186803b158015610b8657600080fd5b505afa158015610b9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbe919061251a565b610bfe5760405162461bcd60e51b81526020600482015260116024820152704e4f4e5f535550504f525445445f43435960781b604482015260640161013e565b6000610c086112aa565b6001600160a01b031663b43a9e6c836040518263ffffffff1660e01b8152600401610c3591815260200190565b60206040518083038186803b158015610c4d57600080fd5b505afa158015610c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c859190612446565b90508061ffff16603c1415610cd05760405162461bcd60e51b81526020600482015260116024820152702727aa2fa0a727aa2422a92fa1a420a4a760791b604482015260640161013e565b8260008051602061276083398151915261ffff83166000908152602091825260409081902080546001600160a01b0319166001600160a01b0394851617905551848152918516917f5a3894108bb15e1405981895b522e2bad5b7083559eef0c79abc8713e564e1e0910160405180910390a2505050565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa5b546001600160a01b0316919050565b6000610d866001611899565b90508015610da2576002805460ff60a81b1916600160a81b1790555b6000610dac611936565b6001600160a01b03161415610e0e5760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b606482015260840161013e565b610e1784611828565b610e208261195e565b610e29836119d9565b8015610e71576002805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6000610e816112aa565b6001600160a01b031663b43a9e6c836040518263ffffffff1660e01b8152600401610eae91815260200190565b60206040518083038186803b158015610ec657600080fd5b505afa158015610eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efe9190612446565b61ffff8116600090815260008051602061276083398151915260205260409020549091506001600160a01b03163314610f705760405162461bcd60e51b81526020600482015260146024820152732727aa2fa2ac2a22a92720a62fa0a220a82a22a960611b604482015260640161013e565b60008481527f53c4c7442f06a0a487ac447715ea6975b98cb1fc62698a7defbb76ecacb5d5b860209081526040808320815160a08101835281546001600160a01b039081168252600183015490811694820194909452600160a01b90930461ffff169183019190915260028101546060830152600381018054608084019190610ff8906124df565b80601f0160208091040260200160405190810160405280929190818152602001828054611024906124df565b80156110715780601f1061104657610100808354040283529160200191611071565b820191906000526020600020905b81548152906001019060200180831161105457829003601f168201915b5050505050815250509050611087828286611a54565b6000846080015160405160200161109e9190612571565b6040516020818303038152906040528051906020012090506110be6112cf565b8251602084015160608501516040808a01519051634aae439b60e11b81526001600160a01b0394851660048201529284166024840152604483018990526064830191909152608482015260a4810184905291169063955c87369060c401600060405180830381600087803b15801561113557600080fd5b505af1158015611149573d6000803e3d6000fd5b5050865160208801516040808a015160608b015160808c015192517f30f3dfec241561f2badda922320658321ac3fc69679b3e78dd3e9bf99abfd423975061119696508a9390899061258d565b60405180910390a160008681527f53c4c7442f06a0a487ac447715ea6975b98cb1fc62698a7defbb76ecacb5d5b86020526040812080546001600160a01b03191681556001810180546001600160b01b031916905560028101829055906112006003830182611f7b565b5050505050505050565b33611213610d47565b6001600160a01b0316146112395760405162461bcd60e51b815260040161013e9061253c565b6001600160a01b03811661129e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161013e565b6112a781611828565b50565b60006112ca7121bab93932b731bca1b7b73a3937b63632b960711b611c81565b905090565b60006112ca702830bcb6b2b73a20b3b3b932b3b0ba37b960791b611c81565b826208aa8960eb1b141561132a5781341461131b5760405162461bcd60e51b815260040161013e906125f1565b6113258434611cfd565b61142d565b34156113485760405162461bcd60e51b815260040161013e906125f1565b60006113526112aa565b6001600160a01b03166342e86391856040518263ffffffff1660e01b815260040161137f91815260200190565b60206040518083038186803b15801561139757600080fd5b505afa1580156113ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cf9190612499565b90506001600160a01b03811661141f5760405162461bcd60e51b8152602060048201526015602482015274494e56414c49445f544f4b454e5f4144445245535360581b604482015260640161013e565b61142b81878786611dcb565b505b6040516bffffffffffffffffffffffff19606087811b8216602084015286901b16603482015260488101849052606881018390526088810182905260009060a80160405160208183030381529060405280519060200120905061148e6112cf565b604051634aae439b60e11b81526001600160a01b038881166004830152878116602483015260448201879052606482018590526084820186905260a48201849052919091169063955c87369060c401600060405180830381600087803b1580156114f757600080fd5b505af115801561150b573d6000803e3d6000fd5b50505050505050505050565b600034156115375760405162461bcd60e51b815260040161013e906125f1565b61153f6112cf565b6001600160a01b031663690a6800846040518263ffffffff1660e01b815260040161156c91815260200190565b60206040518083038186803b15801561158457600080fd5b505afa158015611598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bc919061251a565b6116085760405162461bcd60e51b815260206004820152601860248201527f4f55545f4f465f534554544c454d454e545f57494e444f570000000000000000604482015260640161013e565b61ffff8416600090815260008051602061276083398151915260205260409020546001600160a01b0316806116775760405162461bcd60e51b81526020600482015260156024820152741051105415115497d113d154d389d517d1561254d5605a1b604482015260640161013e565b604051631b146ecf60e01b815281906000906001600160a01b03831690631b146ecf906116a890889060040161261e565b602060405180830381600087803b1580156116c257600080fd5b505af11580156116d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fa9190612631565b90506040518060a001604052808a6001600160a01b03168152602001896001600160a01b031681526020018861ffff1681526020018781526020018681525061174e60008051602061276083398151915290565b600083815260019182016020908152604091829020845181546001600160a01b0319166001600160a01b0391821617825585830151948201805494870151959091166001600160b01b031990941693909317600160a01b61ffff909516949094029390931790915560608301516002830155608083015180516117d79260038501920190611fb5565b509050507f699e9bc790173aa2390b5e2a7fd404ec61deec3899b067e9965ced88576d1dfb8989898989866040516118149695949392919061264a565b60405180910390a198975050505050505050565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600254600090600160a81b900460ff16156118e4578160ff1660011480156118c05750303b155b6118dc5760405162461bcd60e51b815260040161013e9061269a565b506000919050565b60025460ff808416600160a01b90920416106119125760405162461bcd60e51b815260040161013e9061269a565b506002805460ff909216600160a01b0260ff60a01b19909216919091179055600190565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610d6b565b6002546001600160a01b0316156119b75760405162461bcd60e51b815260206004820152601860248201527f5745544839207265676973746572656420616c72656164790000000000000000604482015260640161013e565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031615611a325760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c72656164790000000000604482015260640161013e565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60808082015190830151611a6791611efb565b611aa75760405162461bcd60e51b81526020600482015260116024820152700929c869ea4a48a86a8bea8b0be9082a69607b1b604482015260640161013e565b6000611ab1611f54565b835160405163231ca40b60e21b81526001600160a01b03918216600482015261ffff87166024820152911690638c72902c9060440160006040518083038186803b158015611afe57600080fd5b505afa158015611b12573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b3a91908101906126e8565b90506000611b46611f54565b602085015160405163231ca40b60e21b81526001600160a01b03918216600482015261ffff88166024820152911690638c72902c9060440160006040518083038186803b158015611b9657600080fd5b505afa158015611baa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bd291908101906126e8565b8351909150611be2908390611efb565b611c275760405162461bcd60e51b8152602060048201526016602482015275494e434f52524543545f414444524553535f46524f4d60501b604482015260640161013e565b6020830151611c37908290611efb565b611c7a5760405162461bcd60e51b8152602060048201526014602482015273494e434f52524543545f414444524553535f544f60601b604482015260640161013e565b5050505050565b600081815260016020908152604080832054905170026b4b9b9b4b7339030b2323932b9b99d1607d1b92810192909252603182018490526001600160a01b0316908115159060510160405160208183030381529060405290611cf65760405162461bcd60e51b815260040161013e919061261e565b5092915050565b604080516000808252602082019092526001600160a01b038416908390604051611d279190612571565b60006040518083038185875af1925050503d8060008114611d64576040519150601f19603f3d011682016040523d82523d6000602084013e611d69565b606091505b5050905080611dc65760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b606482015260840161013e565b505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691611e2f9190612571565b6000604051808303816000865af19150503d8060008114611e6c576040519150601f19603f3d011682016040523d82523d6000602084013e611e71565b606091505b5091509150818015611e9b575080511580611e9b575080806020019051810190611e9b919061251a565b611ef35760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416044820152631253115160e21b606482015260840161013e565b505050505050565b600081604051602001611f0e9190612571565b6040516020818303038152906040528051906020012083604051602001611f359190612571565b6040516020818303038152906040528051906020012014905092915050565b60006112ca7821b937b9b9b1b430b4b720b2323932b9b9a932b9b7b63b32b960391b611c81565b508054611f87906124df565b6000825580601f10611f97575050565b601f0160209004906000526020600020908101906112a79190612039565b828054611fc1906124df565b90600052602060002090601f016020900481019282611fe35760008555612029565b82601f10611ffc57805160ff1916838001178555612029565b82800160010185558215612029579182015b8281111561202957825182559160200191906001019061200e565b50612035929150612039565b5090565b5b80821115612035576000815560010161203a565b60006020828403121561206057600080fd5b5035919050565b60005b8381101561208257818101518382015260200161206a565b83811115610e715750506000910152565b600081518084526120ab816020860160208601612067565b601f01601f19169290920160200192915050565b60208152600060018060a01b038084511660208401528060208501511660408401525061ffff604084015116606083015260608301516080830152608083015160a08084015261211260c0840182612093565b949350505050565b6001600160a01b03811681146112a757600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156121685761216861212f565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156121975761219761212f565b604052919050565b600067ffffffffffffffff8211156121b9576121b961212f565b50601f01601f191660200190565b600082601f8301126121d857600080fd5b81356121eb6121e68261219f565b61216e565b81815284602083860101111561220057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561223557600080fd5b85356122408161211a565b9450602086013593506040860135925060608601359150608086013567ffffffffffffffff81111561227157600080fd5b61227d888289016121c7565b9150509295509295909350565b6020808252825182820181905260009190848201906040850190845b818110156122c2578351835292840192918401916001016122a6565b50909695505050505050565b600080604083850312156122e157600080fd5b82356122ec8161211a565b946020939093013593505050565b60008060006060848603121561230f57600080fd5b833561231a8161211a565b9250602084013561232a8161211a565b9150604084013561233a8161211a565b809150509250925092565b60008060006060848603121561235a57600080fd5b83359250602084013567ffffffffffffffff8082111561237957600080fd5b9085019060a0828803121561238d57600080fd5b612395612145565b8235828111156123a457600080fd5b6123b0898286016121c7565b8252506020830135828111156123c557600080fd5b6123d1898286016121c7565b60208301525060408301356040820152606083013560608201526080830135828111156123fd57600080fd5b612409898286016121c7565b6080830152509497949650505050604092909201359150565b60006020828403121561243457600080fd5b813561243f8161211a565b9392505050565b60006020828403121561245857600080fd5b815161ffff8116811461243f57600080fd5b634e487b7160e01b600052603260045260246000fd5b8281526040602082015260006121126040830184612093565b6000602082840312156124ab57600080fd5b815161243f8161211a565b60006000198214156124d857634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c908216806124f357607f821691505b6020821081141561251457634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561252c57600080fd5b8151801515811461243f57600080fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008251612583818460208701612067565b9190910192915050565b60e0815260006125a060e083018a612093565b82810360208401526125b2818a612093565b905061ffff8816604084015286606084015285608084015282810360a08401526125dc8186612093565b9150508260c083015298975050505050505050565b602080825260139082015272494e434f52524543545f4554485f56414c554560681b604082015260600190565b60208152600061243f6020830184612093565b60006020828403121561264357600080fd5b5051919050565b6001600160a01b0387811682528616602082015261ffff851660408201526060810184905260c06080820181905260009061268790830185612093565b90508260a0830152979650505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000602082840312156126fa57600080fd5b815167ffffffffffffffff81111561271157600080fd5b8201601f8101841361272257600080fd5b80516127306121e68261219f565b81815285602083850101111561274557600080fd5b612756826020830160208601612067565b9594505050505056fe53c4c7442f06a0a487ac447715ea6975b98cb1fc62698a7defbb76ecacb5d5b7a26469706673582212205d59bbede65af5f3e88f31d1df3c13c37aa91e4f949ffc3fa3720e5f6d7c445964736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100f75760003560e01c80634aa4a4fc1161008a578063c0c53b8b11610059578063c0c53b8b146102db578063e0997659146102fb578063e54189d91461030f578063f2fde38b1461032f57600080fd5b80634aa4a4fc14610271578063715018a6146102915780637c34ebc8146102a65780638da5cb5b146102c657600080fd5b80632ac53ebd116100c65780632ac53ebd146101dc5780632af64bd3146102095780632e4e6f101461022e5780633d03b9da1461024f57600080fd5b806304f3bcec1461014e5780630d8e6e2c1461018b5780631e0c0d21146101a757806329985e5a146101c757600080fd5b36610149576002546001600160a01b031633146101475760405162461bcd60e51b81526020600482015260096024820152684e6f7420574554483960b81b60448201526064015b60405180910390fd5b005b600080fd5b34801561015a57600080fd5b5060005461016e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561019757600080fd5b5060405160018152602001610182565b3480156101b357600080fd5b5061016e6101c236600461204e565b61034f565b3480156101d357600080fd5b50610147610407565b3480156101e857600080fd5b506101fc6101f736600461204e565b61059a565b60405161018291906120bf565b34801561021557600080fd5b5061021e6106f7565b6040519015158152602001610182565b61024161023c36600461221d565b610815565b604051908152602001610182565b34801561025b57600080fd5b506102646109bf565b604051610182919061228a565b34801561027d57600080fd5b5060025461016e906001600160a01b031681565b34801561029d57600080fd5b50610147610a89565b3480156102b257600080fd5b506101476102c13660046122ce565b610ac4565b3480156102d257600080fd5b5061016e610d47565b3480156102e757600080fd5b506101476102f63660046122fa565b610d7a565b34801561030757600080fd5b506060610264565b34801561031b57600080fd5b5061014761032a366004612345565b610e77565b34801561033b57600080fd5b5061014761034a366004612422565b61120a565b60008061035a6112aa565b6001600160a01b031663b43a9e6c846040518263ffffffff1660e01b815260040161038791815260200190565b60206040518083038186803b15801561039f57600080fd5b505afa1580156103b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d79190612446565b61ffff16600090815260008051602061276083398151915260205260409020546001600160a01b03169392505050565b60006104116109bf565b905060005b81518110156105965760008282815181106104335761043361246a565b6020026020010151905060008060009054906101000a90046001600160a01b03166001600160a01b0316636795dbcd83846040516020016104a091907f5265736f6c766572206d697373696e67207461726765743a20000000000000008152601981019190915260390190565b6040516020818303038152906040526040518363ffffffff1660e01b81526004016104cc929190612480565b60206040518083038186803b1580156104e457600080fd5b505afa1580156104f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051c9190612499565b60008381526001602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251868152918201529192507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68910160405180910390a15050808061058e906124b6565b915050610416565b5050565b6105e26040518060a0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600061ffff16815260200160008152602001606081525090565b60008281527f53c4c7442f06a0a487ac447715ea6975b98cb1fc62698a7defbb76ecacb5d5b86020908152604091829020825160a08101845281546001600160a01b039081168252600183015490811693820193909352600160a01b90920461ffff16928201929092526002820154606082015260038201805491929160808401919061066e906124df565b80601f016020809104026020016040519081016040528092919081815260200182805461069a906124df565b80156106e75780601f106106bc576101008083540402835291602001916106e7565b820191906000526020600020905b8154815290600101906020018083116106ca57829003601f168201915b5050505050815250509050919050565b6000806107026109bf565b905060005b815181101561080c5760008282815181106107245761072461246a565b60209081029190910181015160008181526001909252604080832054925490516321f8a72160e01b8152600481018390529193506001600160a01b039283169216906321f8a7219060240160206040518083038186803b15801561078757600080fd5b505afa15801561079b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bf9190612499565b6001600160a01b03161415806107ea57506000818152600160205260409020546001600160a01b0316155b156107f9576000935050505090565b5080610804816124b6565b915050610707565b50600191505090565b6000806108206112aa565b6001600160a01b031663b43a9e6c876040518263ffffffff1660e01b815260040161084d91815260200190565b60206040518083038186803b15801561086557600080fd5b505afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d9190612446565b905060006108a96112cf565b6040516375dc0d2160e01b81523360048201526001600160a01b038a81166024830152604482018a90526064820188905291909116906375dc0d219060840160206040518083038186803b15801561090057600080fd5b505afa158015610914573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610938919061251a565b156109855760405162461bcd60e51b815260206004820152601860248201527f54494d45534c4f545f534554544c45445f414c52454144590000000000000000604482015260640161013e565b8161ffff16603c14156109a45761099f33898989896112ee565b6109b4565b6109b13389848888611517565b90505b979650505050505050565b604080516003808252608082019092526060916020820183803683370190505090507821b937b9b9b1b430b4b720b2323932b9b9a932b9b7b63b32b960391b81600081518110610a1157610a1161246a565b6020026020010181815250507121bab93932b731bca1b7b73a3937b63632b960711b81600181518110610a4657610a4661246a565b602002602001018181525050702830bcb6b2b73a20b3b3b932b3b0ba37b960791b81600281518110610a7a57610a7a61246a565b60200260200101818152505090565b33610a92610d47565b6001600160a01b031614610ab85760405162461bcd60e51b815260040161013e9061253c565b610ac26000611828565b565b33610acd610d47565b6001600160a01b031614610af35760405162461bcd60e51b815260040161013e9061253c565b6001600160a01b0382163b610b395760405162461bcd60e51b815260206004820152600c60248201526b1393d517d0d3d395149050d560a21b604482015260640161013e565b610b416112aa565b6001600160a01b031663d4d4f6ce826040518263ffffffff1660e01b8152600401610b6e91815260200190565b60206040518083038186803b158015610b8657600080fd5b505afa158015610b9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbe919061251a565b610bfe5760405162461bcd60e51b81526020600482015260116024820152704e4f4e5f535550504f525445445f43435960781b604482015260640161013e565b6000610c086112aa565b6001600160a01b031663b43a9e6c836040518263ffffffff1660e01b8152600401610c3591815260200190565b60206040518083038186803b158015610c4d57600080fd5b505afa158015610c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c859190612446565b90508061ffff16603c1415610cd05760405162461bcd60e51b81526020600482015260116024820152702727aa2fa0a727aa2422a92fa1a420a4a760791b604482015260640161013e565b8260008051602061276083398151915261ffff83166000908152602091825260409081902080546001600160a01b0319166001600160a01b0394851617905551848152918516917f5a3894108bb15e1405981895b522e2bad5b7083559eef0c79abc8713e564e1e0910160405180910390a2505050565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa5b546001600160a01b0316919050565b6000610d866001611899565b90508015610da2576002805460ff60a81b1916600160a81b1790555b6000610dac611936565b6001600160a01b03161415610e0e5760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b606482015260840161013e565b610e1784611828565b610e208261195e565b610e29836119d9565b8015610e71576002805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6000610e816112aa565b6001600160a01b031663b43a9e6c836040518263ffffffff1660e01b8152600401610eae91815260200190565b60206040518083038186803b158015610ec657600080fd5b505afa158015610eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efe9190612446565b61ffff8116600090815260008051602061276083398151915260205260409020549091506001600160a01b03163314610f705760405162461bcd60e51b81526020600482015260146024820152732727aa2fa2ac2a22a92720a62fa0a220a82a22a960611b604482015260640161013e565b60008481527f53c4c7442f06a0a487ac447715ea6975b98cb1fc62698a7defbb76ecacb5d5b860209081526040808320815160a08101835281546001600160a01b039081168252600183015490811694820194909452600160a01b90930461ffff169183019190915260028101546060830152600381018054608084019190610ff8906124df565b80601f0160208091040260200160405190810160405280929190818152602001828054611024906124df565b80156110715780601f1061104657610100808354040283529160200191611071565b820191906000526020600020905b81548152906001019060200180831161105457829003601f168201915b5050505050815250509050611087828286611a54565b6000846080015160405160200161109e9190612571565b6040516020818303038152906040528051906020012090506110be6112cf565b8251602084015160608501516040808a01519051634aae439b60e11b81526001600160a01b0394851660048201529284166024840152604483018990526064830191909152608482015260a4810184905291169063955c87369060c401600060405180830381600087803b15801561113557600080fd5b505af1158015611149573d6000803e3d6000fd5b5050865160208801516040808a015160608b015160808c015192517f30f3dfec241561f2badda922320658321ac3fc69679b3e78dd3e9bf99abfd423975061119696508a9390899061258d565b60405180910390a160008681527f53c4c7442f06a0a487ac447715ea6975b98cb1fc62698a7defbb76ecacb5d5b86020526040812080546001600160a01b03191681556001810180546001600160b01b031916905560028101829055906112006003830182611f7b565b5050505050505050565b33611213610d47565b6001600160a01b0316146112395760405162461bcd60e51b815260040161013e9061253c565b6001600160a01b03811661129e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161013e565b6112a781611828565b50565b60006112ca7121bab93932b731bca1b7b73a3937b63632b960711b611c81565b905090565b60006112ca702830bcb6b2b73a20b3b3b932b3b0ba37b960791b611c81565b826208aa8960eb1b141561132a5781341461131b5760405162461bcd60e51b815260040161013e906125f1565b6113258434611cfd565b61142d565b34156113485760405162461bcd60e51b815260040161013e906125f1565b60006113526112aa565b6001600160a01b03166342e86391856040518263ffffffff1660e01b815260040161137f91815260200190565b60206040518083038186803b15801561139757600080fd5b505afa1580156113ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cf9190612499565b90506001600160a01b03811661141f5760405162461bcd60e51b8152602060048201526015602482015274494e56414c49445f544f4b454e5f4144445245535360581b604482015260640161013e565b61142b81878786611dcb565b505b6040516bffffffffffffffffffffffff19606087811b8216602084015286901b16603482015260488101849052606881018390526088810182905260009060a80160405160208183030381529060405280519060200120905061148e6112cf565b604051634aae439b60e11b81526001600160a01b038881166004830152878116602483015260448201879052606482018590526084820186905260a48201849052919091169063955c87369060c401600060405180830381600087803b1580156114f757600080fd5b505af115801561150b573d6000803e3d6000fd5b50505050505050505050565b600034156115375760405162461bcd60e51b815260040161013e906125f1565b61153f6112cf565b6001600160a01b031663690a6800846040518263ffffffff1660e01b815260040161156c91815260200190565b60206040518083038186803b15801561158457600080fd5b505afa158015611598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bc919061251a565b6116085760405162461bcd60e51b815260206004820152601860248201527f4f55545f4f465f534554544c454d454e545f57494e444f570000000000000000604482015260640161013e565b61ffff8416600090815260008051602061276083398151915260205260409020546001600160a01b0316806116775760405162461bcd60e51b81526020600482015260156024820152741051105415115497d113d154d389d517d1561254d5605a1b604482015260640161013e565b604051631b146ecf60e01b815281906000906001600160a01b03831690631b146ecf906116a890889060040161261e565b602060405180830381600087803b1580156116c257600080fd5b505af11580156116d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fa9190612631565b90506040518060a001604052808a6001600160a01b03168152602001896001600160a01b031681526020018861ffff1681526020018781526020018681525061174e60008051602061276083398151915290565b600083815260019182016020908152604091829020845181546001600160a01b0319166001600160a01b0391821617825585830151948201805494870151959091166001600160b01b031990941693909317600160a01b61ffff909516949094029390931790915560608301516002830155608083015180516117d79260038501920190611fb5565b509050507f699e9bc790173aa2390b5e2a7fd404ec61deec3899b067e9965ced88576d1dfb8989898989866040516118149695949392919061264a565b60405180910390a198975050505050505050565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600254600090600160a81b900460ff16156118e4578160ff1660011480156118c05750303b155b6118dc5760405162461bcd60e51b815260040161013e9061269a565b506000919050565b60025460ff808416600160a01b90920416106119125760405162461bcd60e51b815260040161013e9061269a565b506002805460ff909216600160a01b0260ff60a01b19909216919091179055600190565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610d6b565b6002546001600160a01b0316156119b75760405162461bcd60e51b815260206004820152601860248201527f5745544839207265676973746572656420616c72656164790000000000000000604482015260640161013e565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031615611a325760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c72656164790000000000604482015260640161013e565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60808082015190830151611a6791611efb565b611aa75760405162461bcd60e51b81526020600482015260116024820152700929c869ea4a48a86a8bea8b0be9082a69607b1b604482015260640161013e565b6000611ab1611f54565b835160405163231ca40b60e21b81526001600160a01b03918216600482015261ffff87166024820152911690638c72902c9060440160006040518083038186803b158015611afe57600080fd5b505afa158015611b12573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b3a91908101906126e8565b90506000611b46611f54565b602085015160405163231ca40b60e21b81526001600160a01b03918216600482015261ffff88166024820152911690638c72902c9060440160006040518083038186803b158015611b9657600080fd5b505afa158015611baa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bd291908101906126e8565b8351909150611be2908390611efb565b611c275760405162461bcd60e51b8152602060048201526016602482015275494e434f52524543545f414444524553535f46524f4d60501b604482015260640161013e565b6020830151611c37908290611efb565b611c7a5760405162461bcd60e51b8152602060048201526014602482015273494e434f52524543545f414444524553535f544f60601b604482015260640161013e565b5050505050565b600081815260016020908152604080832054905170026b4b9b9b4b7339030b2323932b9b99d1607d1b92810192909252603182018490526001600160a01b0316908115159060510160405160208183030381529060405290611cf65760405162461bcd60e51b815260040161013e919061261e565b5092915050565b604080516000808252602082019092526001600160a01b038416908390604051611d279190612571565b60006040518083038185875af1925050503d8060008114611d64576040519150601f19603f3d011682016040523d82523d6000602084013e611d69565b606091505b5050905080611dc65760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b606482015260840161013e565b505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691611e2f9190612571565b6000604051808303816000865af19150503d8060008114611e6c576040519150601f19603f3d011682016040523d82523d6000602084013e611e71565b606091505b5091509150818015611e9b575080511580611e9b575080806020019051810190611e9b919061251a565b611ef35760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416044820152631253115160e21b606482015260840161013e565b505050505050565b600081604051602001611f0e9190612571565b6040516020818303038152906040528051906020012083604051602001611f359190612571565b6040516020818303038152906040528051906020012014905092915050565b60006112ca7821b937b9b9b1b430b4b720b2323932b9b9a932b9b7b63b32b960391b611c81565b508054611f87906124df565b6000825580601f10611f97575050565b601f0160209004906000526020600020908101906112a79190612039565b828054611fc1906124df565b90600052602060002090601f016020900481019282611fe35760008555612029565b82601f10611ffc57805160ff1916838001178555612029565b82800160010185558215612029579182015b8281111561202957825182559160200191906001019061200e565b50612035929150612039565b5090565b5b80821115612035576000815560010161203a565b60006020828403121561206057600080fd5b5035919050565b60005b8381101561208257818101518382015260200161206a565b83811115610e715750506000910152565b600081518084526120ab816020860160208601612067565b601f01601f19169290920160200192915050565b60208152600060018060a01b038084511660208401528060208501511660408401525061ffff604084015116606083015260608301516080830152608083015160a08084015261211260c0840182612093565b949350505050565b6001600160a01b03811681146112a757600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156121685761216861212f565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156121975761219761212f565b604052919050565b600067ffffffffffffffff8211156121b9576121b961212f565b50601f01601f191660200190565b600082601f8301126121d857600080fd5b81356121eb6121e68261219f565b61216e565b81815284602083860101111561220057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561223557600080fd5b85356122408161211a565b9450602086013593506040860135925060608601359150608086013567ffffffffffffffff81111561227157600080fd5b61227d888289016121c7565b9150509295509295909350565b6020808252825182820181905260009190848201906040850190845b818110156122c2578351835292840192918401916001016122a6565b50909695505050505050565b600080604083850312156122e157600080fd5b82356122ec8161211a565b946020939093013593505050565b60008060006060848603121561230f57600080fd5b833561231a8161211a565b9250602084013561232a8161211a565b9150604084013561233a8161211a565b809150509250925092565b60008060006060848603121561235a57600080fd5b83359250602084013567ffffffffffffffff8082111561237957600080fd5b9085019060a0828803121561238d57600080fd5b612395612145565b8235828111156123a457600080fd5b6123b0898286016121c7565b8252506020830135828111156123c557600080fd5b6123d1898286016121c7565b60208301525060408301356040820152606083013560608201526080830135828111156123fd57600080fd5b612409898286016121c7565b6080830152509497949650505050604092909201359150565b60006020828403121561243457600080fd5b813561243f8161211a565b9392505050565b60006020828403121561245857600080fd5b815161ffff8116811461243f57600080fd5b634e487b7160e01b600052603260045260246000fd5b8281526040602082015260006121126040830184612093565b6000602082840312156124ab57600080fd5b815161243f8161211a565b60006000198214156124d857634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c908216806124f357607f821691505b6020821081141561251457634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561252c57600080fd5b8151801515811461243f57600080fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008251612583818460208701612067565b9190910192915050565b60e0815260006125a060e083018a612093565b82810360208401526125b2818a612093565b905061ffff8816604084015286606084015285608084015282810360a08401526125dc8186612093565b9150508260c083015298975050505050505050565b602080825260139082015272494e434f52524543545f4554485f56414c554560681b604082015260600190565b60208152600061243f6020830184612093565b60006020828403121561264357600080fd5b5051919050565b6001600160a01b0387811682528616602082015261ffff851660408201526060810184905260c06080820181905260009061268790830185612093565b90508260a0830152979650505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000602082840312156126fa57600080fd5b815167ffffffffffffffff81111561271157600080fd5b8201601f8101841361272257600080fd5b80516127306121e68261219f565b81815285602083850101111561274557600080fd5b612756826020830160208601612067565b9594505050505056fe53c4c7442f06a0a487ac447715ea6975b98cb1fc62698a7defbb76ecacb5d5b7a26469706673582212205d59bbede65af5f3e88f31d1df3c13c37aa91e4f949ffc3fa3720e5f6d7c445964736f6c63430008090033",
  "implementation": "0xc769efB5C3f01826b61B4096ee5d72567b866b94",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptedContracts()": {
        "details": "Returns contract names that can call this contract."
      },
      "addExternalAdapter(address,bytes32)": {
        "details": "Triggers to add new external adapter for specific `_ccy`",
        "params": {
          "_adapter": "External adapter contract address",
          "_ccy": "Short identifier of a currency"
        }
      },
      "fulfillSettlementRequest(bytes32,(string,string,uint256,uint256,string),bytes32)": {
        "details": "External function to fulfill cross-chain settlement request. Expects to get transaction object to validate the correct settlement values on the PaymentAggregator contract level",
        "params": {
          "_ccy": "Main currency of the external adapter",
          "_txData": "Transaction object from external adapter"
        }
      },
      "getExternalAdapters(bytes32)": {
        "details": "Triggers to get external adapter for specific currency.",
        "params": {
          "_ccy": "Short identifier of a currency"
        }
      },
      "getSettlementRequests(bytes32)": {
        "details": "Triggers to get settlement request",
        "params": {
          "_requestId": "The id to specify a request"
        }
      },
      "getVersion()": {
        "details": "Get the version of the underlying contract",
        "returns": {
          "_0": "implementation version"
        }
      },
      "initialize(address,address,address)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requiredContracts()": {
        "details": "Returns required contract names in this contract"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "verifyPayment(address,bytes32,uint256,uint256,string)": {
        "details": "External function to verify payment by msg.sender as a part of a settlement process It could validate either a cross-chain settlement or native settlement",
        "params": {
          "_ccy": "Main payment settlement currency",
          "_counterparty": "Counterparty address",
          "_payment": "Payment amount in currency",
          "_timestamp": "Timeslot timestamp for settlement operation",
          "_txHash": "Cross-chain transfer txHash"
        }
      }
    },
    "title": "Settlement Engine contract is used in settlement operations of the Secured Finance protocol. Settlement is divided per 1 calendar day and verified by either external adapters (for cross-chain transaction) or native ETH-chain settlement. Contract linked to the PaymentAggregator contract and all External Adapters per target chain.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addExternalAdapter(address,bytes32)": {
        "notice": "Triggers only be contract ownerReverts on saving 0x0 address"
      },
      "fulfillSettlementRequest(bytes32,(string,string,uint256,uint256,string),bytes32)": {
        "notice": "Triggers only be external adapter for specific chain"
      },
      "initialize(address,address,address)": {
        "notice": "Initializes the contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 35871,
        "contract": "contracts/SettlementEngine.sol:SettlementEngine",
        "label": "resolver",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAddressResolver)23433"
      },
      {
        "astId": 35875,
        "contract": "contracts/SettlementEngine.sol:SettlementEngine",
        "label": "addressCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 33877,
        "contract": "contracts/SettlementEngine.sol:SettlementEngine",
        "label": "WETH9",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2990,
        "contract": "contracts/SettlementEngine.sol:SettlementEngine",
        "label": "_initialized",
        "offset": 20,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 2993,
        "contract": "contracts/SettlementEngine.sol:SettlementEngine",
        "label": "_initializing",
        "offset": 21,
        "slot": "2",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAddressResolver)23433": {
        "encoding": "inplace",
        "label": "contract IAddressResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}