{
  "address": "0xafC87924634C3ab87F4FBA69995ae58a4F6D1Aea",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "CancelOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "MakeOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevMaturity",
          "type": "uint256"
        }
      ],
      "name": "OpenMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "TakeOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        }
      ],
      "name": "cancelOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "createOrder",
      "outputs": [
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "futureValueOf",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getBorrowRates",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "rates",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrency",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "currency",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getFutureValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLendRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getLendRates",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "rates",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        }
      ],
      "name": "getMaker",
      "outputs": [
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "ccy",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "maturity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basisDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lendRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "midRate",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILendingMarket.Market",
          "name": "market",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaturity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMidRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        }
      ],
      "name": "getOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ProtocolTypes.Side",
              "name": "side",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maturity",
              "type": "uint256"
            }
          ],
          "internalType": "struct MarketOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        }
      ],
      "name": "getOrderFromTree",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getTotalBorrowingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getTotalLendingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "name": "hasFutureValueInPastMaturity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_basisDate",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMatured",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOpened",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "matchOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "openMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "prevMaturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "presentValueOf",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "removeFutureValueInPastMaturity",
      "outputs": [
        {
          "internalType": "int256",
          "name": "removedAmount",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbedf13a777e6d9f01e3b6235b1683c3a7121ce85456ccb1956a7f3d2b5b278f1",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0xafC87924634C3ab87F4FBA69995ae58a4F6D1Aea",
    "transactionIndex": 26,
    "gasUsed": "4050573",
    "logsBloom": "0x
    "blockHash": "0x29b84e811322e1ec4f3b1b6ac54c5c575f74befa84074c8281cc7adbbfc80630",
    "transactionHash": "0xbedf13a777e6d9f01e3b6235b1683c3a7121ce85456ccb1956a7f3d2b5b278f1",
    "logs": [],
    "blockNumber": 11333316,
    "cumulativeGasUsed": "9238212",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "31a544e07a0fa934f1cc96cb0a7091e2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CancelOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"MakeOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevMaturity\",\"type\":\"uint256\"}],\"name\":\"OpenMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"TakeOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"futureValueOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getBorrowRates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrency\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getFutureValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getLendRates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"getMaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarket\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basisDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"midRate\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendingMarket.Market\",\"name\":\"market\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMidRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"getOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"getOrderFromTree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getTotalBorrowingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getTotalLendingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"name\":\"hasFutureValueInPastMaturity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_basisDate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMatured\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"matchOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"openMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"prevMaturity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"presentValueOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeFutureValueInPastMaturity\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"removedAmount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The market orders is stored in structured red-black trees and doubly linked lists in each node.\",\"kind\":\"dev\",\"methods\":{\"acceptedContracts()\":{\"details\":\"The contact name listed in this method is also needed to be listed `requiredContracts` method.\"},\"cancelOrder(address,uint256)\":{\"params\":{\"_orderId\":\"Market order id\",\"_user\":\"User address\"}},\"createOrder(uint8,address,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of funds the maker wants to borrow/lend\",\"_rate\":\"Amount of interest rate taker wish to borrow/lend\",\"_side\":\"Order position type, Borrow or Lend\",\"_user\":\"User's address\"},\"returns\":{\"amount\":\"The taken amount\",\"maker\":\"The maker address\"}},\"futureValueOf(address)\":{\"params\":{\"_user\":\"User address\"},\"returns\":{\"_0\":\"The future value in latest maturity\"}},\"getBorrowRate()\":{\"returns\":{\"rate\":\"The highest borrow rate\"}},\"getBorrowRates(uint256)\":{\"params\":{\"_limit\":\"Max limit to get rates\"},\"returns\":{\"rates\":\"The array of borrow rates\"}},\"getCurrency()\":{\"returns\":{\"currency\":\"The market currency\"}},\"getLendRate()\":{\"returns\":{\"rate\":\"The lowest lend rate\"}},\"getLendRates(uint256)\":{\"params\":{\"_limit\":\"Max limit to get rates\"},\"returns\":{\"rates\":\"The array of lending rates\"}},\"getMaker(uint256)\":{\"params\":{\"_orderId\":\"The market order id\"},\"returns\":{\"maker\":\"The order maker address\"}},\"getMarket()\":{\"returns\":{\"market\":\"The market data\"}},\"getMaturity()\":{\"returns\":{\"maturity\":\"The market maturity\"}},\"getMidRate()\":{\"returns\":{\"rate\":\"The mid rate\"}},\"getOrder(uint256)\":{\"params\":{\"_orderId\":\"The market order id\"},\"returns\":{\"order\":\"The market order information\"}},\"getOrderFromTree(uint256,uint256)\":{\"params\":{\"_maturity\":\"The maturity of the order book\",\"_orderId\":\"The market order id\"},\"returns\":{\"_0\":\"order The market order information\"}},\"initialize(address,bytes32,uint256,uint256)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController.\",\"params\":{\"_basisDate\":\"The basis date when the first market open\",\"_ccy\":\"The main currency for the order book\",\"_maturity\":\"The initial maturity of the market\",\"_resolver\":\"The address of the Address Resolver contract\"}},\"isMatured()\":{\"returns\":{\"_0\":\"The boolean if the market is matured or not\"}},\"isOpened()\":{\"returns\":{\"_0\":\"The boolean if the market is opened or not\"}},\"matchOrders(uint8,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of funds the maker wants to borrow/lend\",\"_rate\":\"Amount of interest rate taker wish to borrow/lend\",\"_side\":\"Order position type, Borrow or Lend\"}},\"openMarket(uint256)\":{\"params\":{\"_maturity\":\"The new maturity\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"presentValueOf(address)\":{\"params\":{\"_user\":\"User address\"},\"returns\":{\"_0\":\"The present value\"}},\"removeFutureValueInPastMaturity(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"maturity\":\"Maturity of future value\",\"removedAmount\":\"Removed future value amount\"}},\"requiredContracts()\":{\"details\":\"The contract name list is in `./libraries/Contracts.sol`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptedContracts()\":{\"notice\":\"Returns contract names that can call this contract.\"},\"cancelOrder(address,uint256)\":{\"notice\":\"Cancels the order.\"},\"createOrder(uint8,address,uint256,uint256)\":{\"notice\":\"Creates the order. Takes the order if the order is matched, and places new order if not match it.\"},\"futureValueOf(address)\":{\"notice\":\"Gets the future value in the latest maturity the user has. If the market is rotated, the maturity in the market is updated, so the existing future value is addressed as an old future value in old maturity. This method doesn't return those old future values.\"},\"getBorrowRate()\":{\"notice\":\"Gets the highest borrow rate.\"},\"getBorrowRates(uint256)\":{\"notice\":\"Gets the borrow rates.\"},\"getCurrency()\":{\"notice\":\"Gets the market currency.\"},\"getLendRate()\":{\"notice\":\"Gets the lowest lend rate.\"},\"getLendRates(uint256)\":{\"notice\":\"Gets the lend rates.\"},\"getMaker(uint256)\":{\"notice\":\"Gets the order maker address.\"},\"getMarket()\":{\"notice\":\"Gets the market data.\"},\"getMaturity()\":{\"notice\":\"Gets the current market maturity.\"},\"getMidRate()\":{\"notice\":\"Gets the mid rate.\"},\"getOrder(uint256)\":{\"notice\":\"Gets the market order information.\"},\"getOrderFromTree(uint256,uint256)\":{\"notice\":\"Gets the market order from the order book in the maturity.\"},\"initialize(address,bytes32,uint256,uint256)\":{\"notice\":\"Initializes the contract.\"},\"isMatured()\":{\"notice\":\"Gets if the market is matured.\"},\"isOpened()\":{\"notice\":\"Gets if the market is opened.\"},\"matchOrders(uint8,uint256,uint256)\":{\"notice\":\"Gets if the market order will be matched or not. Returns zero if there is not a matched order. Reverts if no orders for specified interest rate.\"},\"openMarket(uint256)\":{\"notice\":\"Opens market\"},\"pauseMarket()\":{\"notice\":\"Pauses the lending market.\"},\"presentValueOf(address)\":{\"notice\":\"Gets the present value calculated from the future value & market rate.\"},\"removeFutureValueInPastMaturity(address)\":{\"notice\":\"Remove all future values if there is an amount in the past maturity.\"},\"requiredContracts()\":{\"notice\":\"Returns the contract names used in this contract.\"},\"unpauseMarket()\":{\"notice\":\"Unpauses the lending market.\"}},\"notice\":\"Implements the module that allows lending market participants to create/cancel market orders, and also provides a future value calculation module. For updates, this contract is basically called from `LendingMarketController.sol`instead of being called \\\\ directly by the user.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LendingMarket.sol\":\"LendingMarket\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/LendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n// interfaces\\nimport {ILendingMarket} from \\\"./interfaces/ILendingMarket.sol\\\";\\n// libraries\\nimport {Contracts} from \\\"./libraries/Contracts.sol\\\";\\nimport {HitchensOrderStatisticsTreeLib} from \\\"./libraries/HitchensOrderStatisticsTreeLib.sol\\\";\\n// mixins\\nimport {MixinAddressResolver} from \\\"./mixins/MixinAddressResolver.sol\\\";\\nimport {MixinFutureValue} from \\\"./mixins/MixinFutureValue.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"./types/ProtocolTypes.sol\\\";\\n// utils\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\n// storages\\nimport {LendingMarketStorage as Storage, MarketOrder} from \\\"./storages/LendingMarketStorage.sol\\\";\\n\\n/**\\n * @notice Implements the module that allows lending market participants to create/cancel market orders,\\n * and also provides a future value calculation module.\\n *\\n * For updates, this contract is basically called from `LendingMarketController.sol`instead of being called \\\\\\n * directly by the user.\\n *\\n * @dev The market orders is stored in structured red-black trees and doubly linked lists in each node.\\n */\\ncontract LendingMarket is\\n    ILendingMarket,\\n    MixinAddressResolver,\\n    MixinFutureValue,\\n    Pausable,\\n    Proxyable\\n{\\n    using HitchensOrderStatisticsTreeLib for HitchensOrderStatisticsTreeLib.Tree;\\n\\n    /**\\n     * @notice Modifier to make a function callable only by order maker.\\n     * @param _orderId Market order id\\n     */\\n    modifier onlyMaker(address account, uint256 _orderId) {\\n        require(account == getMaker(_orderId), \\\"caller is not the maker\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to check if the market is opened.\\n     */\\n    modifier ifOpened() {\\n        require(isOpened(), \\\"Market is not opened\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to check if the market is matured.\\n     */\\n    modifier ifMatured() {\\n        require(isMatured(), \\\"Market is not matured\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\\n     * @param _resolver The address of the Address Resolver contract\\n     * @param _ccy The main currency for the order book\\n     * @param _maturity The initial maturity of the market\\n     * @param _basisDate The basis date when the first market open\\n     */\\n    function initialize(\\n        address _resolver,\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _basisDate\\n    ) public initializer onlyBeacon {\\n        registerAddressResolver(_resolver);\\n\\n        Storage.slot().ccy = _ccy;\\n        Storage.slot().maturity = _maturity;\\n        Storage.slot().basisDate = _basisDate;\\n\\n        buildCache();\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](1);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](1);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n    }\\n\\n    /**\\n     * @notice Gets the order maker address.\\n     * @param _orderId The market order id\\n     * @return maker The order maker address\\n     */\\n    function getMaker(uint256 _orderId) public view override returns (address maker) {\\n        return Storage.slot().orders[_orderId].maker;\\n    }\\n\\n    /**\\n     * @notice Gets the market data.\\n     * @return market The market data\\n     */\\n    function getMarket() external view override returns (Market memory market) {\\n        return\\n            Market({\\n                ccy: Storage.slot().ccy,\\n                maturity: Storage.slot().maturity,\\n                basisDate: Storage.slot().basisDate,\\n                borrowRate: getBorrowRate(),\\n                lendRate: getLendRate(),\\n                midRate: getMidRate()\\n            });\\n    }\\n\\n    /**\\n     * @notice Gets the highest borrow rate.\\n     * @return rate The highest borrow rate\\n     */\\n    function getBorrowRate() public view override returns (uint256 rate) {\\n        uint256 maturity = Storage.slot().maturity;\\n        return Storage.slot().borrowOrders[maturity].last();\\n    }\\n\\n    /**\\n     * @notice Gets the lowest lend rate.\\n     * @return rate The lowest lend rate\\n     */\\n    function getLendRate() public view override returns (uint256 rate) {\\n        return Storage.slot().lendOrders[Storage.slot().maturity].first();\\n    }\\n\\n    /**\\n     * @notice Gets the mid rate.\\n     * @return rate The mid rate\\n     */\\n    function getMidRate() public view override returns (uint256 rate) {\\n        uint256 borrowRate = getBorrowRate();\\n        uint256 lendRate = getLendRate();\\n        uint256 combinedRate = borrowRate + lendRate;\\n\\n        return combinedRate / 2;\\n    }\\n\\n    /**\\n     * @notice Gets the borrow rates.\\n     * @param _limit Max limit to get rates\\n     * @return rates The array of borrow rates\\n     */\\n    function getBorrowRates(uint256 _limit)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory rates)\\n    {\\n        rates = new uint256[](_limit);\\n\\n        uint256 rate = Storage.slot().borrowOrders[Storage.slot().maturity].last();\\n        rates[0] = rate;\\n\\n        for (uint256 i = 1; i < rates.length; i++) {\\n            if (rate == 0) {\\n                break;\\n            }\\n\\n            rate = Storage.slot().borrowOrders[Storage.slot().maturity].prev(rate);\\n            rates[i] = rate;\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the lend rates.\\n     * @param _limit Max limit to get rates\\n     * @return rates The array of lending rates\\n     */\\n    function getLendRates(uint256 _limit) external view override returns (uint256[] memory rates) {\\n        rates = new uint256[](_limit);\\n\\n        uint256 rate = Storage.slot().lendOrders[Storage.slot().maturity].first();\\n        rates[0] = rate;\\n\\n        for (uint256 i = 1; i < rates.length; i++) {\\n            if (rate == 0) {\\n                break;\\n            }\\n\\n            rate = Storage.slot().lendOrders[Storage.slot().maturity].next(rate);\\n            rates[i] = rate;\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the current market maturity.\\n     * @return maturity The market maturity\\n     */\\n    function getMaturity() external view override returns (uint256 maturity) {\\n        return Storage.slot().maturity;\\n    }\\n\\n    /**\\n     * @notice Gets the market currency.\\n     * @return currency The market currency\\n     */\\n    function getCurrency() external view override returns (bytes32 currency) {\\n        return Storage.slot().ccy;\\n    }\\n\\n    /**\\n     * @notice Gets if the market is matured.\\n     * @return The boolean if the market is matured or not\\n     */\\n    function isMatured() public view override returns (bool) {\\n        return block.timestamp >= Storage.slot().maturity;\\n    }\\n\\n    /**\\n     * @notice Gets if the market is opened.\\n     * @return The boolean if the market is opened or not\\n     */\\n    function isOpened() public view override returns (bool) {\\n        return !isMatured() && block.timestamp >= Storage.slot().basisDate;\\n    }\\n\\n    /**\\n     * @notice Gets the market order information.\\n     * @param _orderId The market order id\\n     * @return order The market order information\\n     */\\n    function getOrder(uint256 _orderId) external view override returns (MarketOrder memory order) {\\n        return Storage.slot().orders[_orderId];\\n    }\\n\\n    /**\\n     * @notice Gets the market order from the order book in the maturity.\\n     * @param _maturity The maturity of the order book\\n     * @param _orderId The market order id\\n     * @return order The market order information\\n     */\\n    function getOrderFromTree(uint256 _maturity, uint256 _orderId)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            return Storage.slot().lendOrders[_maturity].getOrderById(marketOrder.rate, _orderId);\\n        } else {\\n            return Storage.slot().borrowOrders[_maturity].getOrderById(marketOrder.rate, _orderId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the future value in the latest maturity the user has.\\n     *\\n     * If the market is rotated, the maturity in the market is updated, so the existing future value\\n     * is addressed as an old future value in old maturity.\\n     * This method doesn't return those old future values.\\n     *\\n     * @param _user User address\\n     * @return The future value in latest maturity\\n     */\\n    function futureValueOf(address _user) public view override returns (int256) {\\n        (int256 futureValue, uint256 maturity) = getFutureValue(_user);\\n\\n        if (Storage.slot().maturity == maturity) {\\n            return futureValue;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the present value calculated from the future value & market rate.\\n     * @param _user User address\\n     * @return The present value\\n     */\\n    function presentValueOf(address _user) external view override returns (int256) {\\n        int256 futureValue = futureValueOf(_user);\\n\\n        // NOTE: The formula is: presentValue = futureValue / (1 + rate * (maturity - now) / 360 days).\\n        uint256 rate = getMidRate();\\n        uint256 dt = Storage.slot().maturity >= block.timestamp\\n            ? Storage.slot().maturity - block.timestamp\\n            : 0;\\n\\n        return ((futureValue * int256(ProtocolTypes.BP * ProtocolTypes.SECONDS_IN_YEAR)) /\\n            int256(ProtocolTypes.BP * ProtocolTypes.SECONDS_IN_YEAR + rate * dt));\\n    }\\n\\n    /**\\n     * @notice Increases and returns id of last order in order book.\\n     * @return The new order id\\n     */\\n    function nextOrderId() internal returns (uint256) {\\n        Storage.slot().lastOrderId++;\\n        return Storage.slot().lastOrderId;\\n    }\\n\\n    /**\\n     * @notice Opens market\\n     * @param _maturity The new maturity\\n     */\\n    function openMarket(uint256 _maturity)\\n        external\\n        override\\n        ifMatured\\n        onlyAcceptedContracts\\n        returns (uint256 prevMaturity)\\n    {\\n        prevMaturity = Storage.slot().maturity;\\n        Storage.slot().maturity = _maturity;\\n\\n        emit OpenMarket(_maturity, prevMaturity);\\n    }\\n\\n    /**\\n     * @notice Cancels the order.\\n     * @param _user User address\\n     * @param _orderId Market order id\\n     */\\n    function cancelOrder(address _user, uint256 _orderId)\\n        public\\n        override\\n        onlyMaker(_user, _orderId)\\n        whenNotPaused\\n        returns (uint256)\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            Storage.slot().lendOrders[Storage.slot().maturity].remove(\\n                marketOrder.amount,\\n                marketOrder.rate,\\n                _orderId\\n            );\\n        } else if (marketOrder.side == ProtocolTypes.Side.BORROW) {\\n            Storage.slot().borrowOrders[Storage.slot().maturity].remove(\\n                marketOrder.amount,\\n                marketOrder.rate,\\n                _orderId\\n            );\\n        }\\n        delete Storage.slot().orders[_orderId];\\n\\n        emit CancelOrder(\\n            _orderId,\\n            marketOrder.maker,\\n            marketOrder.side,\\n            marketOrder.amount,\\n            marketOrder.rate\\n        );\\n\\n        return marketOrder.amount;\\n    }\\n\\n    /**\\n     * @notice Makes new market order.\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _user User's address\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _rate Preferable interest rate\\n     */\\n    function _makeOrder(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _rate\\n    ) internal returns (uint256 orderId) {\\n        MarketOrder memory marketOrder;\\n\\n        marketOrder.side = _side;\\n        marketOrder.amount = _amount;\\n        marketOrder.rate = _rate;\\n        marketOrder.maker = _user;\\n        marketOrder.maturity = Storage.slot().maturity;\\n        orderId = nextOrderId();\\n\\n        Storage.slot().orders[orderId] = marketOrder;\\n\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            Storage.slot().lendOrders[Storage.slot().maturity].insert(\\n                marketOrder.amount,\\n                marketOrder.rate,\\n                orderId\\n            );\\n        } else if (marketOrder.side == ProtocolTypes.Side.BORROW) {\\n            Storage.slot().borrowOrders[Storage.slot().maturity].insert(\\n                marketOrder.amount,\\n                marketOrder.rate,\\n                orderId\\n            );\\n        }\\n\\n        emit MakeOrder(\\n            orderId,\\n            marketOrder.maker,\\n            marketOrder.side,\\n            Storage.slot().ccy,\\n            marketOrder.maturity,\\n            marketOrder.amount,\\n            marketOrder.rate\\n        );\\n    }\\n\\n    /**\\n     * @notice Takes the market order.\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _user User's address\\n     * @param _orderId Market order id in the order book\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     */\\n    function _takeOrder(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _orderId,\\n        uint256 _amount\\n    ) internal returns (address) {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n        require(_amount <= marketOrder.amount, \\\"Insufficient amount\\\");\\n        require(marketOrder.maker != _user, \\\"Maker couldn't take its order\\\");\\n\\n        address lender;\\n        address borrower;\\n        Storage.slot().orders[_orderId].amount = marketOrder.amount - _amount;\\n\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            require(\\n                Storage.slot().lendOrders[Storage.slot().maturity].fillOrder(\\n                    marketOrder.rate,\\n                    _orderId,\\n                    _amount\\n                ),\\n                \\\"Couldn't fill order\\\"\\n            );\\n            lender = marketOrder.maker;\\n            borrower = _user;\\n        } else if (marketOrder.side == ProtocolTypes.Side.BORROW) {\\n            require(\\n                Storage.slot().borrowOrders[Storage.slot().maturity].fillOrder(\\n                    marketOrder.rate,\\n                    _orderId,\\n                    _amount\\n                ),\\n                \\\"Couldn't fill order\\\"\\n            );\\n            lender = _user;\\n            borrower = marketOrder.maker;\\n        }\\n\\n        // NOTE: The formula is: futureValue = amount * (1 + rate * (maturity - now) / 360 days).\\n        uint256 currentRate = (marketOrder.rate * (Storage.slot().maturity - block.timestamp)) /\\n            ProtocolTypes.SECONDS_IN_YEAR;\\n        uint256 fvAmount = (_amount * (ProtocolTypes.BP + currentRate)) / ProtocolTypes.BP;\\n\\n        _addFutureValue(lender, borrower, fvAmount, Storage.slot().maturity);\\n\\n        emit TakeOrder(_orderId, _user, _side, _amount, marketOrder.rate);\\n\\n        if (marketOrder.amount == 0) {\\n            delete Storage.slot().orders[_orderId];\\n        }\\n\\n        return marketOrder.maker;\\n    }\\n\\n    /**\\n     * @notice Gets if the market order will be matched or not.\\n     *\\n     * Returns zero if there is not a matched order.\\n     * Reverts if no orders for specified interest rate.\\n     *\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _rate Amount of interest rate taker wish to borrow/lend\\n     */\\n    function matchOrders(\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _rate\\n    ) external view override ifOpened returns (uint256) {\\n        if (_side == ProtocolTypes.Side.LEND) {\\n            require(\\n                Storage.slot().borrowOrders[Storage.slot().maturity].exists(_rate),\\n                \\\"No orders exists for selected interest rate\\\"\\n            );\\n            return\\n                Storage.slot().borrowOrders[Storage.slot().maturity].findOrderIdForAmount(\\n                    _rate,\\n                    _amount\\n                );\\n        } else {\\n            require(\\n                Storage.slot().lendOrders[Storage.slot().maturity].exists(_rate),\\n                \\\"No orders exists for selected interest rate\\\"\\n            );\\n            return\\n                Storage.slot().lendOrders[Storage.slot().maturity].findOrderIdForAmount(\\n                    _rate,\\n                    _amount\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Creates the order. Takes the order if the order is matched,\\n     * and places new order if not match it.\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _user User's address\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _rate Amount of interest rate taker wish to borrow/lend\\n     * @return maker The maker address\\n     * @return amount The taken amount\\n     */\\n    function createOrder(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _rate\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        onlyAcceptedContracts\\n        ifOpened\\n        returns (address maker, uint256 amount)\\n    {\\n        require(_amount > 0, \\\"Can't place empty amount\\\");\\n        require(_rate > 0, \\\"Can't place empty rate\\\");\\n        uint256 orderId;\\n\\n        if (_side == ProtocolTypes.Side.LEND) {\\n            orderId = Storage.slot().borrowOrders[Storage.slot().maturity].findOrderIdForAmount(\\n                _rate,\\n                _amount\\n            );\\n        } else {\\n            orderId = Storage.slot().lendOrders[Storage.slot().maturity].findOrderIdForAmount(\\n                _rate,\\n                _amount\\n            );\\n        }\\n\\n        if (orderId == 0) {\\n            _makeOrder(_side, _user, _amount, _rate);\\n            maker = _user;\\n            amount = 0;\\n        } else {\\n            maker = _takeOrder(_side, _user, orderId, _amount);\\n            amount = _amount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Pauses the lending market.\\n     */\\n    function pauseMarket() external override onlyAcceptedContracts {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses the lending market.\\n     */\\n    function unpauseMarket() external override onlyAcceptedContracts {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Remove all future values if there is an amount in the past maturity.\\n     * @param _user User's address\\n     * @return removedAmount Removed future value amount\\n     * @return maturity Maturity of future value\\n     */\\n    function removeFutureValueInPastMaturity(address _user)\\n        external\\n        onlyAcceptedContracts\\n        returns (int256 removedAmount, uint256 maturity)\\n    {\\n        if (hasFutureValueInPastMaturity(_user, Storage.slot().maturity)) {\\n            (removedAmount, maturity) = _removeFutureValue(_user);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb198d76c86925f98e397ddb12b5035672ba9f4ac9ab2f6ab0bca4e0eb71f3f5a\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICollateralAggregator {\\n    event Register(address indexed addr);\\n    event ReleaseUnsettled(address indexed party, bytes32 ccy, uint256 amount);\\n    event UseUnsettledCollateral(address indexed party, bytes32 ccy, uint256 amount);\\n\\n    function isCovered(address _user) external view returns (bool);\\n\\n    function isRegisteredUser(address addr) external view returns (bool);\\n\\n    function getWithdrawableCollateral(address _user) external view returns (uint256 maxWithdraw);\\n\\n    function getCoverage(address _user) external view returns (uint256 coverage);\\n\\n    function getUnsettledCollateral(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUnusedCollateral(address _user) external view returns (uint256);\\n\\n    function getTotalUnsettledExposure(address _user) external view returns (uint256);\\n\\n    function getCollateralParameters()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function register() external;\\n\\n    function useUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function releaseUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function setCollateralParameters(\\n        uint256 marginCallThresholdRate,\\n        uint256 autoLiquidationThresholdRate,\\n        uint256 liquidationPriceRate,\\n        uint256 minCollateralRate\\n    ) external;\\n}\\n\",\"keccak256\":\"0x044f9ce00b347c34307571cb24b3d8c3435db583f9d92b5554dbf847f7fcd477\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICollateralVault {\\n    event Deposit(address user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address from, bytes32 ccy, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress);\\n\\n    function deposit(bytes32 _ccy, uint256 _amount) external payable;\\n\\n    function getIndependentCollateral(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getIndependentCollateralInETH(address _user, bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function withdraw(bytes32 _ccy, uint256 _amount) external;\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getTotalIndependentCollateralInETH(address _party) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb67032b6e0eaf42b0eab142605bd2310d6432cee771ed1fe8a89546a7a1c2ef4\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CcyAdded(bytes32 indexed ccy, string name, uint256 haircut);\\n    event CcyCollateralUpdate(bytes32 indexed ccy, bool isCollateral);\\n    event CcySupportUpdate(bytes32 indexed ccy, bool isSupported);\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n    event MinMarginUpdated(bytes32 indexed ccy, uint256 minMargin);\\n    event PriceFeedAdded(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n    event PriceFeedRemoved(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH) external view returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, int256 _amount) external view returns (int256);\\n\\n    function getCurrencies(bytes32) external view returns (ProtocolTypes.Currency memory);\\n\\n    function getEthDecimals(bytes32) external view returns (uint8);\\n\\n    function getUsdDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function isCollateral(bytes32) external view returns (bool);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        address _ethPriceFeed,\\n        uint256 _haircut,\\n        address _tokenAddress\\n    ) external;\\n\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function updateCollateralSupport(bytes32 _ccy, bool _isSupported) external;\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported) external;\\n\\n    function getTokenAddresses(bytes32) external view returns (address);\\n}\\n\",\"keccak256\":\"0x1956cb9ac170250917d9b284882bc10d0fd025198f7b3e711cb7acd089a74a79\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport {MarketOrder} from \\\"../storages/LendingMarketStorage.sol\\\";\\n\\ninterface ILendingMarket {\\n    event CancelOrder(\\n        uint256 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n    event MakeOrder(\\n        uint256 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n    event TakeOrder(\\n        uint256 orderId,\\n        address indexed taker,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n\\n    event OpenMarket(uint256 maturity, uint256 prevMaturity);\\n\\n    struct Market {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        uint256 basisDate;\\n        uint256 borrowRate;\\n        uint256 lendRate;\\n        uint256 midRate;\\n    }\\n\\n    function getBorrowRate() external view returns (uint256 rate);\\n\\n    function getLendRate() external view returns (uint256 rate);\\n\\n    function getMaker(uint256 orderId) external view returns (address maker);\\n\\n    function getMarket() external view returns (Market memory);\\n\\n    function getMidRate() external view returns (uint256 rate);\\n\\n    function getBorrowRates(uint256 amount) external view returns (uint256[] memory rates);\\n\\n    function getLendRates(uint256 amount) external view returns (uint256[] memory rates);\\n\\n    function getMaturity() external view returns (uint256);\\n\\n    function getCurrency() external view returns (bytes32);\\n\\n    function isMatured() external view returns (bool);\\n\\n    function isOpened() external view returns (bool);\\n\\n    function getOrder(uint256 orderId) external view returns (MarketOrder memory);\\n\\n    function getOrderFromTree(uint256 _maturity, uint256 _orderId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function futureValueOf(address account) external view returns (int256);\\n\\n    function presentValueOf(address account) external view returns (int256);\\n\\n    function openMarket(uint256 maturity) external returns (uint256);\\n\\n    function cancelOrder(address account, uint256 orderId) external returns (uint256);\\n\\n    function matchOrders(\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 rate\\n    ) external view returns (uint256);\\n\\n    function createOrder(\\n        ProtocolTypes.Side side,\\n        address acount,\\n        uint256 amount,\\n        uint256 rate\\n    ) external returns (address maker, uint256 matchedAmount);\\n\\n    function pauseMarket() external;\\n\\n    function unpauseMarket() external;\\n\\n    function removeFutureValueInPastMaturity(address _account)\\n        external\\n        returns (int256 removedAmount, uint256 basisMaturity);\\n}\\n\",\"keccak256\":\"0x95d3556ee9ac8276defb6f3d0d2e2dd7b098a1050327b1ba378e26ce37f0f956\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\nstruct Order {\\n    bytes32 ccy;\\n    uint256 term;\\n    ProtocolTypes.Side side;\\n    uint256 amount;\\n    uint256 rate;\\n}\\n\\ninterface ILendingMarketController {\\n    event LendingMarketCreated(\\n        bytes32 ccy,\\n        address indexed marketAddr,\\n        uint256 index,\\n        uint256 maturity\\n    );\\n    event LendingMarketsRotated(bytes32 ccy, uint256 oldMaturity, uint256 newMaturity);\\n    event OrderFilled(\\n        address lender,\\n        address borrower,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n\\n    function getBasisDate(bytes32 _ccy) external view returns (uint256);\\n\\n    function getLendingMarkets(bytes32 _ccy) external view returns (address[] memory);\\n\\n    function getBorrowRates(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getLendRates(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getMidRates(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getMaturities(bytes32 _ccy) external view returns (uint256[] memory);\\n\\n    function getTotalPresentValue(bytes32 ccy, address account) external view returns (int256);\\n\\n    function getTotalPresentValueInETH(address account)\\n        external\\n        view\\n        returns (int256 totalPresentValue);\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function isInitializedLendingMarket(bytes32 _ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 _ccy,\\n        uint256 _basisDate,\\n        uint256 _compoundFactor\\n    ) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function createLendingMarket(bytes32 _ccy) external returns (address market);\\n\\n    function rotateLendingMarkets(bytes32 _ccy) external;\\n\\n    function pauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n}\\n\",\"keccak256\":\"0xed9acb9480a8978d74a85f28af34684c7c93f7cd8d99af818f160364cfcb9ba0\",\"license\":\"MIT\"},\"contracts/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant COLLATERAL_AGGREGATOR = \\\"CollateralAggregator\\\";\\n    bytes32 internal constant COLLATERAL_VAULT = \\\"CollateralVault\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0xd2dc9d943f2de1871ee4ffa4b801291c2369985b61b40508576c8770aed8eff4\",\"license\":\"MIT\"},\"contracts/libraries/HitchensOrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary HitchensOrderStatisticsTreeLib {\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint256 head;\\n        uint256 tail;\\n        uint256 orderCounter;\\n        mapping(uint256 => OrderItem) orders;\\n    }\\n\\n    struct OrderItem {\\n        uint256 orderId;\\n        uint256 next;\\n        uint256 prev;\\n        uint256 timestamp;\\n        uint256 amount;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].right != EMPTY) {\\n            _value = self.nodes[_value].right;\\n        }\\n    }\\n\\n    function next(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(401) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].right != EMPTY) {\\n            _cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(402) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].left != EMPTY) {\\n            _cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint256 value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        if (self.nodes[value].parent != EMPTY) return true;\\n        return false;\\n    }\\n\\n    function amountExistsInNode(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        if (!exists(self, value)) return false;\\n        return isAmountExistsInList(self, value, amount);\\n    }\\n\\n    function orderExistsInNode(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal view returns (bool) {\\n        if (!exists(self, value)) return false;\\n        return isOrderIdExists(self, value, amount, orderId);\\n    }\\n\\n    function getNode(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n        return (gn.parent, gn.left, gn.right, gn.red, gn.head, gn.tail, gn.orderCounter);\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256 _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(405) - Value to insert cannot be zero\\\");\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                insertOrder(self, probe, amount, orderId);\\n                return;\\n            }\\n        }\\n        Node storage nValue = self.nodes[value];\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n        insertOrder(self, value, amount, orderId);\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(407) - Value to delete cannot be zero\\\");\\n        require(\\n            orderExistsInNode(self, amount, value, orderId),\\n            \\\"OrderStatisticsTree(408) - Value to delete does not exist.\\\"\\n        );\\n        Node storage nValue = self.nodes[value];\\n        removeOrder(self, value, orderId);\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint256 a,\\n        uint256 b\\n    ) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        return (order.orderId, order.next, order.prev, order.timestamp, order.amount);\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function isOrderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 amount,\\n        uint256 orderId\\n    ) internal view returns (bool) {\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        if (order.amount != amount) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Return boolean if value and amount exist in doubly linked list.\\n     */\\n    function isAmountExistsInList(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 amount\\n    ) internal view returns (bool) {\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[gn.head];\\n        while (order.next != 0 && order.amount < amount) {\\n            order = gn.orders[order.next];\\n        }\\n        if (order.amount == 0) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Return the id of the first OrderItem matching `_amount` in the amount field.\\n     */\\n    function findOrderIdForAmount(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 amount\\n    ) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[gn.head];\\n        while (order.orderId != gn.tail && order.amount < amount) {\\n            order = gn.orders[order.next];\\n        }\\n        if (order.amount >= amount) {\\n            return order.orderId;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reduces order amount once market order taken.\\n     */\\n    function fillOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId,\\n        uint256 _amount\\n    ) internal returns (bool) {\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        uint256 newAmount = order.amount - _amount;\\n        gn.orders[orderId].amount = newAmount;\\n\\n        if (gn.orders[orderId].amount == 0) {\\n            remove(self, newAmount, value, orderId);\\n        } else {\\n            if (gn.orders[gn.head].amount < newAmount) {\\n                OrderItem memory rootOrder = gn.orders[gn.head];\\n                while (rootOrder.orderId != gn.tail && rootOrder.amount < newAmount) {\\n                    rootOrder = gn.orders[rootOrder.next];\\n                }\\n                if (order.amount > _amount) {\\n                    OrderItem memory prevOrder = gn.orders[rootOrder.prev];\\n                    _link(self, value, order.orderId, rootOrder.orderId);\\n                    _link(self, value, prevOrder.orderId, order.orderId);\\n                } else {\\n                    OrderItem memory nextOrder = gn.orders[rootOrder.next];\\n                    _link(self, value, order.orderId, nextOrder.orderId);\\n                    _link(self, value, rootOrder.orderId, order.orderId);\\n                }\\n            } else {\\n                _link(self, value, order.orderId, gn.head);\\n                _setHead(self, value, order.orderId);\\n                if (gn.tail == 0) _setTail(self, value, order.orderId);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Up size order by market maker.\\n     */\\n    function upSizeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId,\\n        uint256 _amount\\n    ) internal returns (bool) {\\n        require(_amount > 0, \\\"Couldn't up size order with 0\\\");\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        uint256 newAmount = order.amount + _amount;\\n        gn.orders[orderId].amount = newAmount;\\n\\n        if (gn.orders[gn.head].amount < newAmount) {\\n            OrderItem memory rootOrder = gn.orders[gn.head];\\n            while (rootOrder.orderId != gn.tail && rootOrder.amount < newAmount) {\\n                rootOrder = gn.orders[rootOrder.next];\\n            }\\n            if (order.amount > _amount) {\\n                OrderItem memory prevOrder = gn.orders[rootOrder.prev];\\n                _link(self, value, order.orderId, rootOrder.orderId);\\n                _link(self, value, prevOrder.orderId, order.orderId);\\n            } else {\\n                OrderItem memory nextOrder = gn.orders[rootOrder.next];\\n                _link(self, value, order.orderId, nextOrder.orderId);\\n                _link(self, value, rootOrder.orderId, order.orderId);\\n            }\\n        } else {\\n            _link(self, value, order.orderId, gn.head);\\n            _setHead(self, value, order.orderId);\\n            if (gn.tail == 0) _setTail(self, value, order.orderId);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount,\\n        uint256 _orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n        uint256 orderId = _createOrder(self, value, _amount, _orderId);\\n        _link(self, value, orderId, gn.head);\\n        _setHead(self, value, orderId);\\n        if (gn.tail == 0) _setTail(self, value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount,\\n        uint256 _orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, value, _amount, _orderId);\\n        } else {\\n            uint256 orderId = _createOrder(self, value, _amount, _orderId);\\n            _link(self, value, gn.tail, orderId);\\n            _setTail(self, value, orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the List.\\n     */\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem after the last OrderItem with the same `_amount`.\\n     */\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount,\\n        uint256 _orderId\\n    ) internal {\\n        require(_amount > 0, \\\"Insuficient amount\\\");\\n\\n        Node storage gn = self.nodes[value];\\n        if (gn.head == 0) {\\n            addHead(self, value, _amount, _orderId);\\n        } else {\\n            if (gn.orders[gn.head].amount < _amount) {\\n                OrderItem memory order = gn.orders[gn.head];\\n                while (order.next != 0 && order.amount <= _amount) {\\n                    order = gn.orders[order.next];\\n                }\\n                if (order.amount > _amount) {\\n                    insertOrderBefore(self, value, order.orderId, _amount, _orderId);\\n                } else {\\n                    insertOrderAfter(self, value, order.orderId, _amount, _orderId);\\n                }\\n            } else {\\n                addHead(self, value, _amount, _orderId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderImer after the Order denoted by `_id` with `_amount` and `_orderId` in the amount field.\\n     */\\n    function insertOrderAfter(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _prevId,\\n        uint256 _amount,\\n        uint256 _orderId\\n    ) internal {\\n        require(_amount > 0, \\\"Insuficient amount\\\");\\n\\n        Node storage gn = self.nodes[value];\\n\\n        if (_prevId == gn.tail) {\\n            addTail(self, value, _amount, _orderId);\\n        } else {\\n            OrderItem memory prevOrder = gn.orders[_prevId];\\n            OrderItem memory nextOrder = gn.orders[prevOrder.next];\\n            uint256 newOrderId = _createOrder(self, value, _amount, _orderId);\\n            _link(self, value, newOrderId, nextOrder.orderId);\\n            _link(self, value, prevOrder.orderId, newOrderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new Object before the Object denoted by `_id` with `_amount` and `_orderId` in the data field.\\n     */\\n    function insertOrderBefore(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _nextId,\\n        uint256 _amount,\\n        uint256 _orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        if (_nextId == gn.head) {\\n            addHead(self, value, _amount, _orderId);\\n        } else {\\n            insertOrderAfter(self, value, gn.orders[_nextId].prev, _amount, _orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 amount,\\n        uint256 orderId\\n    ) internal returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        uint256 newId;\\n        if (gn.orderCounter == 0) {\\n            newId = 1;\\n        }\\n        gn.orderCounter += 1;\\n        OrderItem memory order = OrderItem(orderId, 0, 0, block.timestamp, amount);\\n        gn.orders[order.orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _prevId,\\n        uint256 _nextId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[_prevId].next = _nextId;\\n        gn.orders[_nextId].prev = _prevId;\\n    }\\n}\\n\",\"keccak256\":\"0xbc8af297e346d090588b390043fc9d0a1916397a299700c046112945d3a74971\",\"license\":\"MIT\"},\"contracts/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../libraries/Contracts.sol\\\";\\nimport \\\"../interfaces/IAddressResolver.sol\\\";\\nimport \\\"../interfaces/ICollateralAggregator.sol\\\";\\nimport \\\"../interfaces/ICollateralVault.sol\\\";\\nimport \\\"../interfaces/ICurrencyController.sol\\\";\\nimport \\\"../interfaces/ILendingMarketController.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    IAddressResolver public resolver;\\n\\n    mapping(bytes32 => address) private addressCache;\\n\\n    modifier onlyAcceptedContracts() {\\n        require(isAcceptedContract(msg.sender), \\\"Only Accepted Contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the contract names used in this contract.\\n     * @dev The contract name list is in `./libraries/Contracts.sol`.\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @notice Returns contract names that can call this contract.\\n     * @dev The contact name listed in this method is also needed to be listed `requiredContracts` method.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        require(address(resolver) == address(0), \\\"resolver registered already\\\");\\n        resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function collateralAggregator() internal view returns (ICollateralAggregator) {\\n        return ICollateralAggregator(getAddress(Contracts.COLLATERAL_AGGREGATOR));\\n    }\\n\\n    function collateralVault() internal view returns (ICollateralVault) {\\n        return ICollateralVault(getAddress(Contracts.COLLATERAL_VAULT));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n}\\n\",\"keccak256\":\"0x98a8ba49db3740dd8f058343297f54713fa6859f0aea363a5444063ef7a11f5b\",\"license\":\"MIT\"},\"contracts/mixins/MixinFutureValue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {FutureValueStorage as Storage} from \\\"../storages/FutureValueStorage.sol\\\";\\n\\n/**\\n * @title MixinFutureValue contract is used to store the future value as a token for Lending deals.\\n */\\ncontract MixinFutureValue {\\n    event Transfer(address indexed from, address indexed to, int256 value);\\n\\n    function getTotalLendingSupply(uint256 _maturity) public view returns (uint256) {\\n        return Storage.slot().totalLendingSupply[_maturity];\\n    }\\n\\n    function getTotalBorrowingSupply(uint256 _maturity) public view returns (uint256) {\\n        return Storage.slot().totalBorrowingSupply[_maturity];\\n    }\\n\\n    function getFutureValue(address account) public view returns (int256, uint256) {\\n        return (Storage.slot().balances[account], Storage.slot().futureValueMaturities[account]);\\n    }\\n\\n    function hasFutureValueInPastMaturity(address account, uint256 maturity)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        if (Storage.slot().futureValueMaturities[account] == maturity) {\\n            return false;\\n        } else {\\n            return Storage.slot().balances[account] != 0;\\n        }\\n    }\\n\\n    function _addFutureValue(\\n        address lender,\\n        address borrower,\\n        uint256 amount,\\n        uint256 maturity\\n    ) internal returns (bool) {\\n        require(lender != borrower, \\\"borrower and lender are the same\\\");\\n        require(lender != address(0), \\\"add to the zero address of lender\\\");\\n        require(borrower != address(0), \\\"add to the zero address of borrower\\\");\\n        require(\\n            !hasFutureValueInPastMaturity(lender, maturity),\\n            \\\"lender has the future value in past maturity\\\"\\n        );\\n        require(\\n            !hasFutureValueInPastMaturity(borrower, maturity),\\n            \\\"borrower has the future value in past maturity\\\"\\n        );\\n\\n        Storage.slot().futureValueMaturities[lender] = maturity;\\n        Storage.slot().futureValueMaturities[borrower] = maturity;\\n\\n        Storage.slot().totalLendingSupply[maturity] += amount;\\n        Storage.slot().totalBorrowingSupply[maturity] += amount;\\n\\n        Storage.slot().balances[lender] += int256(amount);\\n        Storage.slot().balances[borrower] -= int256(amount);\\n\\n        emit Transfer(address(0), lender, int256(amount));\\n        emit Transfer(address(0), borrower, -int256(amount));\\n        return true;\\n    }\\n\\n    function _removeFutureValue(address account) internal returns (int256, uint256) {\\n        int256 balance = Storage.slot().balances[account];\\n        uint256 maturity = Storage.slot().futureValueMaturities[account];\\n\\n        if (balance >= 0) {\\n            Storage.slot().totalLendingSupply[maturity] -= uint256(balance);\\n        } else {\\n            Storage.slot().totalBorrowingSupply[maturity] -= uint256(-balance);\\n        }\\n\\n        Storage.slot().balances[account] = 0;\\n\\n        emit Transfer(account, address(0), balance);\\n\\n        return (balance, maturity);\\n    }\\n}\\n\",\"keccak256\":\"0xa88bc721e4dacd68fed0321aa5a03966911d2c75c6539c193badec57c53d31c8\",\"license\":\"MIT\"},\"contracts/storages/FutureValueStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary FutureValueStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.futureValue\\\");\\n\\n    struct Storage {\\n        uint256 maturity;\\n        // Mapping from user to balances\\n        mapping(address => int256) balances;\\n        // Mapping from user to maturity\\n        mapping(address => uint256) futureValueMaturities;\\n        // Mapping from maturity to total amount supplied of lending\\n        mapping(uint256 => uint256) totalLendingSupply;\\n        // Mapping from maturity to total amount supplied of borrowing\\n        mapping(uint256 => uint256) totalBorrowingSupply;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcc5a0e5112603b987b4392dce8368a2db9a0c42b522f3c0931e226c5b9ab9b10\",\"license\":\"MIT\"},\"contracts/storages/LendingMarketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport \\\"../libraries/HitchensOrderStatisticsTreeLib.sol\\\";\\n\\nstruct MarketOrder {\\n    ProtocolTypes.Side side;\\n    uint256 amount;\\n    uint256 rate; // in basis points\\n    address maker;\\n    uint256 maturity;\\n}\\n\\nlibrary LendingMarketStorage {\\n    using HitchensOrderStatisticsTreeLib for HitchensOrderStatisticsTreeLib.Tree;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarket\\\");\\n\\n    struct Storage {\\n        uint256 lastOrderId;\\n        bytes32 ccy;\\n        uint256 basisDate;\\n        uint256 maturity;\\n        // Mapping from maturity to rate\\n        mapping(uint256 => MarketOrder) orders;\\n        // Mapping from maturity to lending orders\\n        mapping(uint256 => HitchensOrderStatisticsTreeLib.Tree) lendOrders;\\n        // Mapping from maturity to borrowing orders\\n        mapping(uint256 => HitchensOrderStatisticsTreeLib.Tree) borrowOrders;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc9f3148c54efaed06c75e96c00dce949c7cce4ac610295035140553a9680d75d\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant BP = 10000; // basis point\\n    uint256 public constant PCT = 10000; // percentage point in basis\\n    uint256 public constant PENALTYLEVEL = 1000; // 10% settlement failure penalty\\n    uint256 public constant MKTMAKELEVEL = 2000; // 20% for market making\\n\\n    uint256 internal constant DAYS_IN_YEAR = 365;\\n    uint256 internal constant SECONDS_IN_YEAR = 31557600;\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n\\n    struct Currency {\\n        bool isSupported;\\n        string name;\\n    }\\n}\\n\",\"keccak256\":\"0xb7d72cd14320881eb1a6832ead684c89854fd643958d07e5d3476134f57328a8\",\"license\":\"MIT\"},\"contracts/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0xe59cd60631c7c754ed6b77caa6f3a06301ef0df07881a3dcfa85124abc1890b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c80637a5fc22b1161011a578063baa26757116100ad578063e09976591161007c578063e099765914610306578063e16695b5146104ad578063e224e8c0146104b5578063f1be1679146104c8578063fa6f5bfe1461051c57600080fd5b8063baa2675714610454578063c1e99bed14610467578063d09ef2411461047a578063dc2079a41461049a57600080fd5b80639eec6ead116100e95780639eec6ead146103f6578063a03738dc14610431578063b7c1d52714610439578063ba1c5e801461044c57600080fd5b80637a5fc22b146103945780637f2b6a0d146103a7578063870febf0146103af57806388e8c716146103ee57600080fd5b80633d03b9da116101925780635c975abb116101615780635c975abb14610366578063692aa97e146103715780636945c1fd146103795780636a2061371461038157600080fd5b80633d03b9da146103065780634eee44951461030e5780634f56c6df14610340578063568615321461035357600080fd5b806317e2d96a116101ce57806317e2d96a1461028657806329985e5a146102d35780632af64bd3146102db5780633644ca45146102f357600080fd5b8063021ca02e1461020057806304f3bcec146102295780630e1b435e146102545780631610c7ce1461027c575b600080fd5b61021361020e3660046141c3565b610524565b60405161022091906141dc565b60405180910390f35b60005461023c906001600160a01b031681565b6040516001600160a01b039091168152602001610220565b610267610262366004614238565b610645565b60408051928352602083019190915201610220565b610284610687565b005b6102c56102943660046141c3565b60009081527f102c2681ef7c98b80d6ee00bc89c73fe6b29b6cc81206242bfb4c5c32e608d39602052604090205490565b604051908152602001610220565b6102846106bf565b6102e3610852565b6040519015158152602001610220565b6102c5610301366004614264565b610970565b610213610ac4565b61032161031c366004614297565b610b29565b604080516001600160a01b039093168352602083019190915201610220565b61021361034e3660046141c3565b610cb6565b61023c6103613660046141c3565b610dd0565b60025460ff166102e3565b6102e3610dfa565b6102c5610e21565b6102c561038f3660046142db565b610e34565b6102676103a2366004614238565b611080565b6102e36110d6565b6102c56103bd3660046141c3565b60009081527f102c2681ef7c98b80d6ee00bc89c73fe6b29b6cc81206242bfb4c5c32e608d3a602052604090205490565b6102c56110ec565b610409610404366004614307565b6110f9565b604080519586526020860194909452928401919091526060830152608082015260a001610220565b610284611210565b610284610447366004614329565b61123d565b6102c5611428565b6102c56104623660046141c3565b611461565b6102c5610475366004614238565b61152d565b61048d6104883660046141c3565b611563565b604051610220919061439c565b6102c56104a8366004614238565b6115f4565b6102c5611694565b6102e36104c33660046142db565b6116a7565b6104d061170c565b6040516102209190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b6102c56117af565b60608167ffffffffffffffff81111561053f5761053f6143e5565b604051908082528060200260200182016040528015610568578160200160208202803683370190505b509050600061059c6105786117e9565b60060160006105856117e9565b60030154815260200190815260200160002061180d565b905080826000815181106105b2576105b26143fb565b602090810291909101015260015b825181101561063e57816105d35761063e565b61060c826105df6117e9565b60060160006105ec6117e9565b60030154815260200190815260200160002061185490919063ffffffff16565b915081838281518110610621576106216143fb565b60209081029190910101528061063681614427565b9150506105c0565b5050919050565b6001600160a01b031660009081526000805160206147d083398151915260209081526040808320546000805160206147f0833981519152909252909120549091565b61069033611955565b6106b55760405162461bcd60e51b81526004016106ac90614442565b60405180910390fd5b6106bd6119c5565b565b60006106c9610ac4565b905060005b815181101561084e5760008282815181106106eb576106eb6143fb565b6020026020010151905060008060009054906101000a90046001600160a01b03166001600160a01b0316636795dbcd838460405160200161075891907f5265736f6c766572206d697373696e67207461726765743a20000000000000008152601981019190915260390190565b6040516020818303038152906040526040518363ffffffff1660e01b81526004016107849291906144c6565b60206040518083038186803b15801561079c57600080fd5b505afa1580156107b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d491906144df565b60008381526001602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251868152918201529192507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68910160405180910390a15050808061084690614427565b9150506106ce565b5050565b60008061085d610ac4565b905060005b815181101561096757600082828151811061087f5761087f6143fb565b60209081029190910181015160008181526001909252604080832054925490516321f8a72160e01b8152600481018390529193506001600160a01b039283169216906321f8a7219060240160206040518083038186803b1580156108e257600080fd5b505afa1580156108f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091a91906144df565b6001600160a01b031614158061094557506000818152600160205260409020546001600160a01b0316155b15610954576000935050505090565b508061095f81614427565b915050610862565b50600191505090565b600061097a610dfa565b6109bd5760405162461bcd60e51b815260206004820152601460248201527313585c9ad95d081a5cc81b9bdd081bdc195b995960621b60448201526064016106ac565b60008460018111156109d1576109d1614364565b1415610a6e57610a10826109e36117e9565b60060160006109f06117e9565b600301548152602001908152602001600020611a1790919063ffffffff16565b610a2c5760405162461bcd60e51b81526004016106ac906144fc565b610a678284610a396117e9565b6006016000610a466117e9565b600301548152602001908152602001600020611a5e9092919063ffffffff16565b9050610abd565b610a8782610a7a6117e9565b60050160006109f06117e9565b610aa35760405162461bcd60e51b81526004016106ac906144fc565b610a678284610ab06117e9565b6005016000610a466117e9565b9392505050565b604080516001808252818301909252606091602080830190803683370190505090507f4c656e64696e674d61726b6574436f6e74726f6c6c657200000000000000000081600081518110610b1a57610b1a6143fb565b60200260200101818152505090565b600080610b34611b4a565b610b3d33611955565b610b595760405162461bcd60e51b81526004016106ac90614442565b610b61610dfa565b610ba45760405162461bcd60e51b815260206004820152601460248201527313585c9ad95d081a5cc81b9bdd081bdc195b995960621b60448201526064016106ac565b60008411610bf45760405162461bcd60e51b815260206004820152601860248201527f43616e277420706c61636520656d70747920616d6f756e74000000000000000060448201526064016106ac565b60008311610c3d5760405162461bcd60e51b815260206004820152601660248201527543616e277420706c61636520656d707479207261746560501b60448201526064016106ac565b600080876001811115610c5257610c52614364565b1415610c6c57610c658486610a396117e9565b9050610c7c565b610c798486610ab06117e9565b90505b80610c9a57610c8d87878787611b90565b5085925060009150610cac565b610ca687878388611d94565b92508491505b5094509492505050565b60608167ffffffffffffffff811115610cd157610cd16143e5565b604051908082528060200260200182016040528015610cfa578160200160208202803683370190505b5090506000610d2e610d0a6117e9565b6005016000610d176117e9565b600301548152602001908152602001600020612157565b90508082600081518110610d4457610d446143fb565b602090810291909101015260015b825181101561063e5781610d655761063e565b610d9e82610d716117e9565b6005016000610d7e6117e9565b60030154815260200190815260200160002061219990919063ffffffff16565b915081838281518110610db357610db36143fb565b602090810291909101015280610dc881614427565b915050610d52565b6000610dda6117e9565b60009283526004016020525060409020600301546001600160a01b031690565b6000610e046110d6565b158015610e1c5750610e146117e9565b600201544210155b905090565b6000610e2b6117e9565b60010154905090565b60008282610e4181610dd0565b6001600160a01b0316826001600160a01b031614610ea15760405162461bcd60e51b815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206d616b657200000000000000000060448201526064016106ac565b610ea9611b4a565b6000610eb36117e9565b6000868152600491909101602052604090819020815160a081019092528054829060ff166001811115610ee857610ee8614364565b6001811115610ef957610ef9614364565b8152600182015460208201526002820154604082015260038201546001600160a01b031660608201526004909101546080909101529050600081516001811115610f4557610f45614364565b1415610f9557610f908160200151826040015187610f616117e9565b6005016000610f6e6117e9565b600301548152602001908152602001600020612293909392919063ffffffff16565b610fd3565b600181516001811115610faa57610faa614364565b1415610fd357610fd38160200151826040015187610fc66117e9565b6006016000610f6e6117e9565b610fdb6117e9565b6000868152600491820160209081526040808320805460ff1916815560018101849055600281018490556003810180546001600160a01b03191690559093019190915560608301518351918401518484015193516001600160a01b03909216937ff523a00826d700cad9c1a6b2bb68b57937b6f76e89dc6fe5206389e1a97d3f809361106b938b93919290614547565b60405180910390a26020015195945050505050565b60008061108c33611955565b6110a85760405162461bcd60e51b81526004016106ac90614442565b6110bd836110b46117e9565b600301546116a7565b156110d1576110cb836125d9565b90925090505b915091565b60006110e06117e9565b60030154421015905090565b6000610e1c610d0a6117e9565b60008060008060008061110a6117e9565b6000888152600491909101602052604090819020815160a081019092528054829060ff16600181111561113f5761113f614364565b600181111561115057611150614364565b8152600182015460208201526002820154604082015260038201546001600160a01b03166060820152600490910154608090910152905060008151600181111561119c5761119c614364565b14156111dc576111cc8160400151886111b36117e9565b60008c815260059190910160205260409020919061271c565b9550955095509550955050611206565b6111cc8160400151886111ed6117e9565b60008c815260069190910160205260409020919061271c565b9295509295909350565b61121933611955565b6112355760405162461bcd60e51b81526004016106ac90614442565b6106bd6127b8565b60025462010000900460ff16158080156112625750600254600161010090910460ff16105b806112825750303b158015611282575060025460ff610100909104166001145b6112e55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106ac565b6002805461ff001916610100179055801561130c576002805462ff00001916620100001790555b600061133f7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b031614156113a25760405162461bcd60e51b815260206004820152602360248201527f4d7573742062652063616c6c65642066726f6d20626561636f6e20636f6e74726044820152621858dd60ea1b60648201526084016106ac565b6113ab856127f5565b836113b46117e9565b60010155826113c16117e9565b60030155816113ce6117e9565b600201556113da6106bf565b8015611421576002805462ff000019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6000806114336117e9565b60030154905061145b6114446117e9565b60008381526006919091016020526040902061180d565b91505090565b600061146b6110d6565b6114af5760405162461bcd60e51b815260206004820152601560248201527413585c9ad95d081a5cc81b9bdd081b585d1d5c9959605a1b60448201526064016106ac565b6114b833611955565b6114d45760405162461bcd60e51b81526004016106ac90614442565b6114dc6117e9565b600301549050816114eb6117e9565b6003015560408051838152602081018390527f974eb6a392aa4b5b16a285eae8ee9d9c75309faa295ffa928838efa6b00e438a910160405180910390a1919050565b600080600061153b84610645565b91509150806115486117e9565b600301541415611559575092915050565b5060009392505050565b61156b61418a565b6115736117e9565b6000838152600491909101602052604090819020815160a081019092528054829060ff1660018111156115a8576115a8614364565b60018111156115b9576115b9614364565b8152600182015460208201526002820154604082015260038201546001600160a01b0316606082015260049091015460809091015292915050565b6000806116008361152d565b9050600061160c6117af565b90506000426116196117e9565b60030154101561162a576000611641565b426116336117e9565b60030154611641919061456d565b905061164d8183614584565b61165d6301e187e0612710614584565b61166791906145a3565b6116776301e187e0612710614584565b61168190856145bb565b61168b9190614656565b95945050505050565b600061169e6117e9565b60030154905090565b6001600160a01b03821660009081526000805160206147f083398151915260205260408120548214156116dc57506000611706565b506001600160a01b03821660009081526000805160206147d0833981519152602052604090205415155b92915050565b6117486040518060c001604052806000801916815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060c0016040528061175b6117e9565b60010154815260200161176c6117e9565b60030154815260200161177d6117e9565b60020154815260200161178e611428565b815260200161179b6110ec565b81526020016117a86117af565b9052919050565b6000806117ba611428565b905060006117c66110ec565b905060006117d482846145a3565b90506117e1600282614684565b935050505090565b7ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0a90565b80548061181c57506000919050565b5b60008181526001830160205260409020600201541561184f57600090815260018201602052604090206002015461181d565b919050565b6000816118c45760405162461bcd60e51b815260206004820152603860248201527f4f7264657253746174697374696373547265652834303229202d205374617274604482015277696e672076616c75652063616e6e6f74206265207a65726f60401b60648201526084016106ac565b6000828152600180850160205260409091200154156119035760008281526001808501602052604090912001546118fc908490612870565b9050611706565b5060008181526001830160205260409020545b80158015906119375750600081815260018085016020526040909120015482145b15611706576000818152600184016020526040902054909150611916565b600080611960610ac4565b905060005b815181101561155957611990828281518110611983576119836143fb565b60200260200101516128ad565b6001600160a01b0316846001600160a01b031614156119b3575060019392505050565b806119bd81614427565b915050611965565b6119cd612929565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600081611a2657506000611706565b8254821415611a3757506001611706565b600082815260018401602052604090205415611a5557506001611706565b50600092915050565b60008281526001808501602090815260408084206004808201548652600782018452828620835160a081018552815481529581015494860194909452600284015492850192909252600383015460608501529101546080830152905b6005820154815114801590611ad25750838160800151105b15611b2a576020908101516000908152600783018252604090819020815160a0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600401546080820152611aba565b83816080015110611b3f57519150610abd9050565b600092505050610abd565b60025460ff16156106bd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ac565b6000611b9a61418a565b80866001811115611bad57611bad614364565b90816001811115611bc057611bc0614364565b90525060208101849052604081018390526001600160a01b0385166060820152611be86117e9565b600301546080820152611bf9612972565b915080611c046117e9565b60008481526004919091016020526040902081518154829060ff191660018381811115611c3357611c33614364565b0217905550602082015160018201556040820151600282015560608201516003820180546001600160a01b0319166001600160a01b03909216919091179055608090910151600490910155600081516001811115611c9357611c93614364565b1415611ce357611cde8160200151826040015184611caf6117e9565b6005016000611cbc6117e9565b60030154815260200190815260200160002061299d909392919063ffffffff16565b611d21565b600181516001811115611cf857611cf8614364565b1415611d2157611d218160200151826040015184611d146117e9565b6006016000611cbc6117e9565b80606001516001600160a01b03167f9baa679e9516a3acae8c0deb69798eb2824dd6984b54d21dd4942c76511f4d31838360000151611d5e6117e9565b60010154856080015186602001518760400151604051611d8396959493929190614698565b60405180910390a250949350505050565b600080611d9f6117e9565b6000858152600491909101602052604090819020815160a081019092528054829060ff166001811115611dd457611dd4614364565b6001811115611de557611de5614364565b815260018201546020808301919091526002830154604083015260038301546001600160a01b03166060830152600490920154608090910152810151909150831115611e695760405162461bcd60e51b8152602060048201526013602482015272125b9cdd59999a58da595b9d08185b5bdd5b9d606a1b60448201526064016106ac565b846001600160a01b031681606001516001600160a01b03161415611ecf5760405162461bcd60e51b815260206004820152601d60248201527f4d616b657220636f756c646e27742074616b6520697473206f7264657200000060448201526064016106ac565b600080848360200151611ee2919061456d565b611eea6117e9565b6000888152600491909101602052604081206001019190915583516001811115611f1657611f16614364565b1415611fac57611f5d83604001518787611f2e6117e9565b6005016000611f3b6117e9565b600301548152602001908152602001600020612b15909392919063ffffffff16565b611f9f5760405162461bcd60e51b815260206004820152601360248201527221b7bab6323713ba103334b6361037b93232b960691b60448201526064016106ac565b5050606081015185612032565b600183516001811115611fc157611fc1614364565b141561203257611fe683604001518787611fd96117e9565b6006016000611f3b6117e9565b6120285760405162461bcd60e51b815260206004820152601360248201527221b7bab6323713ba103334b6361037b93232b960691b60448201526064016106ac565b5050606081015185905b60006301e187e0426120426117e9565b60030154612050919061456d565b856040015161205f9190614584565b6120699190614684565b9050600061271061207a83826145a3565b6120849089614584565b61208e9190614684565b90506120a784848361209e6117e9565b60030154612deb565b50886001600160a01b03167f966c5ef9d077123e79f6a459e7ced8ef6f2a106683fa26d6ea3a4b0df8a34b5b898c8a89604001516040516120eb9493929190614547565b60405180910390a26020850151612142576121046117e9565b6000898152600491820160205260408120805460ff1916815560018101829055600281018290556003810180546001600160a01b0319169055909101555b8460600151955050505050505b949350505050565b80548061216657506000919050565b5b60008181526001808401602052604090912001541561184f576000908152600180830160205260409091200154612167565b6000816122095760405162461bcd60e51b815260206004820152603860248201527f4f7264657253746174697374696373547265652834303129202d205374617274604482015277696e672076616c75652063616e6e6f74206265207a65726f60401b60648201526084016106ac565b6000828152600184016020526040902060020154156122415760008281526001840160205260409020600201546118fc9084906131a9565b5060008181526001830160205260409020545b80158015906122755750600081815260018401602052604090206002015482145b15611706576000818152600184016020526040902054909150612254565b816123065760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303729202d2056616c756560448201527f20746f2064656c6574652063616e6e6f74206265207a65726f0000000000000060648201526084016106ac565b612312848484846131e1565b6123845760405162461bcd60e51b815260206004820152603a60248201527f4f7264657253746174697374696373547265652834303829202d2056616c756560448201527f20746f2064656c65746520646f6573206e6f742065786973742e00000000000060648201526084016106ac565b6000828152600185016020526040902061239f858484613205565b6000808260060154600014156125d057600085815260018089016020526040909120015415806123e057506000858152600188016020526040902060020154155b156123ec575083612434565b5060008481526001870160205260409020600201545b600081815260018089016020526040909120015415612434576000908152600180880160205260409091200154612402565b600081815260018089016020526040909120015415612468576000818152600180890160205260409091200154915061247f565b600081815260018801602052604090206002015491505b600081815260018801602052604080822054848352912081905580156124f05760008181526001808a01602052604090912001548214156124d55760008181526001808a016020526040909120018390556124f4565b600081815260018901602052604090206002018390556124f4565b8288555b600082815260018901602052604090206003015460ff161586831461257e5761251e8984896133b2565b600087815260018a8101602052604080832080830154878552828520938401819055845281842087905560028082015490840181905584529083208690556003908101549286905201805460ff191660ff90921615159190911790559195915b801561258e5761258e8985613429565b505060008181526001808901602052604082208281559081018290556002810182905560038101805460ff191690556004810182905560058101829055600601555b50505050505050565b6001600160a01b03811660009081526000805160206147d083398151915260209081526040808320546000805160206147f08339815191529092528220548291908282126126695760008181527f102c2681ef7c98b80d6ee00bc89c73fe6b29b6cc81206242bfb4c5c32e608d3960205260408120805484929061265e90849061456d565b909155506126b59050565b612672826146cf565b60008281527f102c2681ef7c98b80d6ee00bc89c73fe6b29b6cc81206242bfb4c5c32e608d3a6020526040812080549091906126af90849061456d565b90915550505b6001600160a01b03851660008181526000805160206147d083398151915260209081526040808320839055518581529192917f8b0c34a52f9e28d78caaa7066cd047b398dae74941a208b77777420f492bd7e1910160405180910390a39094909350915050565b600080600080600061272e8888611a17565b61274a5760405162461bcd60e51b81526004016106ac906146ec565b505050600093845250506001928301602090815260408084209284526007909201815291819020815160a08101835281548082529482015493810184905260028201549281018390526003820154606082018190526004909201546080909101819052939492939192909190565b6127c0611b4a565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586119fa3390565b6000546001600160a01b03161561284e5760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c7265616479000000000060448201526064016106ac565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60005b6000828152600184016020526040902060020154156128a75760009182526001830160205260409091206002015490612873565b50919050565b600081815260016020908152604080832054905170026b4b9b9b4b7339030b2323932b9b99d1607d1b92810192909252603182018490526001600160a01b03169081151590605101604051602081830303815290604052906129225760405162461bcd60e51b81526004016106ac919061473c565b5092915050565b60025460ff166106bd5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106ac565b600061297c6117e9565b805490600061298a83614427565b91905055506129976117e9565b54919050565b81612a105760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303529202d2056616c756560448201527f20746f20696e736572742063616e6e6f74206265207a65726f0000000000000060648201526084016106ac565b83546000905b8015612a815780915080841015612a40576000908152600180870160205260409091200154612a16565b80841115612a61576000908152600186016020526040902060020154612a16565b80841415612a7c57612a7586828786613843565b5050612b0f565b612a16565b6000848152600180880160205260408220848155808201839055600281019290925560038201805460ff19169091179055612abe87868887613843565b82612acb57848755612b05565b82851015612aee5760008381526001808901602052604090912001859055612b05565b600083815260018801602052604090206002018590555b6125d087866139d6565b50505050565b6000838152600180860160209081526040808420868552600781018352818520825160a08101845281548152948101549385019390935260028301549184019190915260038201546060840152600490910154608083018190529091908390612b7f90869061456d565b60008781526007850160205260409020600401819055905080612bad57612ba888828989612293565b612ddd565b600480840154600090815260078501602052604090200154811115612d93576004808401546000908152600785016020908152604091829020825160a081018452815481526001820154928101929092526002810154928201929092526003820154606082015291015460808201525b6005840154815114801590612c355750818160800151105b15612c8d576020908101516000908152600785018252604090819020815160a0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600401546080820152612c1d565b8583608001511115612d1657604080820151600090815260078601602090815290829020825160a0810184528154815260018201549281019290925260028101549282019290925260038201546060820152600490910154608082015283518251612cfc918c918c9190613c41565b612d108a8a83600001518760000151613c41565b50612d8d565b6020808201516000908152600786018252604090819020815160a08101835281548082526001830154948201949094526002820154928101929092526003810154606083015260040154608082015284519091612d77918c918c9190613c41565b612d8b8a8a84600001518760000151613c41565b505b50612ddd565b612da7888884600001518660040154613c41565b8151600088815260018a0160205260409020600401556005830154612ddd578151600088815260018a0160205260409020600501555b506001979650505050505050565b6000836001600160a01b0316856001600160a01b03161415612e4f5760405162461bcd60e51b815260206004820181905260248201527f626f72726f77657220616e64206c656e64657220617265207468652073616d6560448201526064016106ac565b6001600160a01b038516612eaf5760405162461bcd60e51b815260206004820152602160248201527f61646420746f20746865207a65726f2061646472657373206f66206c656e64656044820152603960f91b60648201526084016106ac565b6001600160a01b038416612f115760405162461bcd60e51b815260206004820152602360248201527f61646420746f20746865207a65726f2061646472657373206f6620626f72726f6044820152623bb2b960e91b60648201526084016106ac565b612f1b85836116a7565b15612f7d5760405162461bcd60e51b815260206004820152602c60248201527f6c656e6465722068617320746865206675747572652076616c756520696e207060448201526b617374206d6174757269747960a01b60648201526084016106ac565b612f8784836116a7565b15612feb5760405162461bcd60e51b815260206004820152602e60248201527f626f72726f7765722068617320746865206675747572652076616c756520696e60448201526d2070617374206d6174757269747960901b60648201526084016106ac565b6001600160a01b0385811660009081526000805160206147f08339815191526020908152604080832086905592871682528282208590558482527f102c2681ef7c98b80d6ee00bc89c73fe6b29b6cc81206242bfb4c5c32e608d399052908120805485929061305b9084906145a3565b909155505060008281527f102c2681ef7c98b80d6ee00bc89c73fe6b29b6cc81206242bfb4c5c32e608d3a60205260408120805485929061309d9084906145a3565b90915550506001600160a01b03851660009081526000805160206147d08339815191526020526040812080548592906130d790849061474f565b90915550506001600160a01b03841660009081526000805160206147d0833981519152602052604081208054859290613111908490614790565b90915550506040518381526001600160a01b038616906000907f8b0c34a52f9e28d78caaa7066cd047b398dae74941a208b77777420f492bd7e19060200160405180910390a36001600160a01b03841660007f8b0c34a52f9e28d78caaa7066cd047b398dae74941a208b77777420f492bd7e161318d866146cf565b60405190815260200160405180910390a3506001949350505050565b60005b6000828152600180850160205260409091200154156128a75760009182526001808401602052604090922090910154906131ac565b60006131ed8584611a17565b6131f95750600061214f565b61168b85848685613c72565b61320f8383611a17565b61322b5760405162461bcd60e51b81526004016106ac906146ec565b600082815260018085016020908152604080842085855260078101835293819020815160a081018352815481529381015492840192909252600282015490830152600381015460608301526004908101546080830152820154831480156132955750828260050154145b156132ba5760008481526001860160205260408120600481018290556005015561335e565b8282600401541415613306576132e785858360200151600091825260019092016020526040902060040155565b602080820151600090815260078401909152604081206002015561335e565b828260050154141561334a5760408082015160008681526001880160205291909120600501556040808201516000908152600784016020529081206001015561335e565b61335e858583604001518460200151613c41565b805160009081526007830160205260408120818155600180820183905560028201839055600382018390556004909101829055600684018054919290916133a690849061456d565b90915550505050505050565b6000818152600184016020526040808220548483529120819055806133d957828455612b0f565b600081815260018086016020526040909120015482141561340f5760008181526001808601602052604090912001839055612b0f565b600090815260019390930160205250604090912060020155565b60005b825482148015906134515750600082815260018401602052604090206003015460ff16155b1561382457600082815260018085016020526040808320548084529220015483141561364d5760008181526001850160205260408082206002015480835291206003015490925060ff16156134f5576000828152600180860160205260408083206003908101805460ff199081169091558585529190932090920180549092161790556134de8482613ced565b600081815260018501602052604090206002015491505b60008281526001808601602052604080832090910154825290206003015460ff161580156135405750600082815260018501602052604080822060020154825290206003015460ff16155b1561356d57600082815260018581016020526040909120600301805460ff1916909117905591508161381e565b600082815260018501602052604080822060020154825290206003015460ff166135ea576000828152600180860160205260408083208083015484529083206003908101805460ff19908116909155938690520180549092161790556135d38483613dc5565b600081815260018501602052604090206002015491505b600081815260018501602052604080822060039081018054868552838520808401805460ff909316151560ff1993841617905582548216909255600290910154845291909220909101805490911690556136448482613ced565b8354925061381e565b6000818152600180860160205260408083209091015480835291206003015490925060ff16156136cc576000828152600180860160205260408083206003908101805460ff199081169091558585529190932090920180549092161790556136b58482613dc5565b600081815260018086016020526040909120015491505b600082815260018501602052604080822060020154825290206003015460ff16158015613717575060008281526001808601602052604080832090910154825290206003015460ff16155b1561374457600082815260018581016020526040909120600301805460ff1916909117905591508161381e565b60008281526001808601602052604080832090910154825290206003015460ff166137c357600082815260018086016020526040808320600281015484529083206003908101805460ff19908116909155938690520180549092161790556137ac8483613ced565b600081815260018086016020526040909120015491505b60008181526001808601602052604080832060039081018054878652838620808401805460ff909316151560ff199384161790558254821690925593015484529220909101805490911690556138198482613dc5565b835492505b5061342c565b506000908152600190910160205260409020600301805460ff19169055565b600082116138885760405162461bcd60e51b8152602060048201526012602482015271125b9cdd599a58da595b9d08185b5bdd5b9d60721b60448201526064016106ac565b6000838152600185016020526040902060048101546138b2576138ad85858585613e9a565b611421565b6004808201546000908152600783016020526040902001548311156139ca576004808201546000908152600783016020908152604091829020825160a081018452815481526001820154928101929092526002810154928201929092526003820154606082015291015460808201525b602081015115801590613939575083816080015111155b15613991576020908101516000908152600783018252604090819020815160a0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600401546080820152613922565b83816080015111156139b3576139ae868683600001518787613f07565b6139c4565b6139c4868683600001518787613f53565b50611421565b61142185858585613e9a565b60005b82548214801590613a035750600082815260018401602052604080822054825290206003015460ff165b15613c1f576000828152600180850160205260408083205480845281842054845292200154811415613b265760008181526001850160205260408082205482528082206002015480835291206003015490925060ff1615613aac576000818152600180860160205260408083206003808201805460ff19908116909155878652838620820180548216905582548652928520018054909216909217905590829052549250613c19565b6000818152600185016020526040902060020154831415613ad457809250613ad48484613ced565b50600082815260018085016020526040808320548084528184206003808201805460ff19908116909155825487529386200180549093169093179091559182905254613b21908590613dc5565b613c19565b6000818152600180860160205260408083205483528083209091015480835291206003015490925060ff1615613ba4576000818152600180860160205260408083206003808201805460ff19908116909155878652838620820180548216905582548652928520018054909216909217905590829052549250613c19565b6000818152600180860160205260409091200154831415613bcc57809250613bcc8484613dc5565b50600082815260018085016020526040808320548084528184206003808201805460ff19908116909155825487529386200180549093169093179091559182905254613c19908590613ced565b506139d9565b505080546000908152600190910160205260409020600301805460ff19169055565b6000928352600193840160209081526040808520848652600701909152808420909401819055825291902060020155565b6000838152600180860160209081526040808420858552600781018352818520825160a08101845281548152948101549385019390935260028301549184019190915260038201546060840152600490910154608083018190529091908514613ce05760009250505061214f565b5060019695505050505050565b600081815260018084016020526040808320600281018054915482865292852090930154938590529183905590918015613d3557600081815260018601602052604090208490555b6000838152600186016020526040902082905581613d5557828555613da2565b6000828152600180870160205260409091200154841415613d8b5760008281526001808701602052604090912001839055613da2565b600082815260018601602052604090206002018390555b505060008181526001938401602052604080822090940183905591825291902055565b60008181526001808401602052604080832091820180549254838552918420600201549385905283905590918015613e0b57600081815260018601602052604090208490555b6000838152600186016020526040902082905581613e2b57828555613e78565b6000828152600186016020526040902060020154841415613e615760008281526001860160205260409020600201839055613e78565b600082815260018087016020526040909120018390555b5050600081815260019093016020526040808420600201839055918352912055565b6000838152600185016020526040812090613eb786868686614089565b9050613ec98686838560040154613c41565b600085815260018701602052604090206004018190556005820154613eff57600085815260018701602052604090206005018190555b505050505050565b600084815260018601602052604090206004810154841415613f3457613f2f86868585613e9a565b613eff565b6000848152600782016020526040902060020154613eff908790879086865b60008211613f985760405162461bcd60e51b8152602060048201526012602482015271125b9cdd599a58da595b9d08185b5bdd5b9d60721b60448201526064016106ac565b600084815260018601602052604090206005810154841415613fc057613f2f8686858561412a565b60008481526007820160208181526040808420815160a080820184528254825260018084015483870181905260028086015485880152600380870154606080880191909152600497880154608080890191909152938c52998952878b2088519586018952805486529384015498850198909852820154958301959095529485015495810195909552920154908301529161405c89898888614089565b905061406e8989838560000151613c41565b61407e8989856000015184613c41565b505050505050505050565b60008381526001850160205260408120600681015482906140a8575060015b60018260060160008282546140bd91906145a3565b90915550506040805160a081018252858152600060208083018281528385018381524260608601908152608086019b8c5299845260079790970190915292902090518082559151600182015592516002840155935160038301555092516004909301929092559392505050565b60008381526001850160205260409020600481015461414f576138ad85858585613e9a565b600061415d86868686614089565b905061416f8686846005015484613c41565b60008581526001870160205260409020600501819055613eff565b6040805160a081019091528060008152602001600081526020016000815260200160006001600160a01b03168152602001600081525090565b6000602082840312156141d557600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015614214578351835292840192918401916001016141f8565b50909695505050505050565b6001600160a01b038116811461423557600080fd5b50565b60006020828403121561424a57600080fd5b8135610abd81614220565b80356002811061184f57600080fd5b60008060006060848603121561427957600080fd5b61428284614255565b95602085013595506040909401359392505050565b600080600080608085870312156142ad57600080fd5b6142b685614255565b935060208501356142c681614220565b93969395505050506040820135916060013590565b600080604083850312156142ee57600080fd5b82356142f981614220565b946020939093013593505050565b6000806040838503121561431a57600080fd5b50508035926020909101359150565b6000806000806080858703121561433f57600080fd5b843561434a81614220565b966020860135965060408601359560600135945092505050565b634e487b7160e01b600052602160045260246000fd5b6002811061439857634e487b7160e01b600052602160045260246000fd5b9052565b600060a0820190506143af82845161437a565b602083015160208301526040830151604083015260018060a01b0360608401511660608301526080830151608083015292915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561443b5761443b614411565b5060010190565b60208082526017908201527f4f6e6c7920416363657074656420436f6e747261637473000000000000000000604082015260600190565b6000815180845260005b8181101561449f57602081850181015186830182015201614483565b818111156144b1576000602083870101525b50601f01601f19169290920160200192915050565b82815260406020820152600061214f6040830184614479565b6000602082840312156144f157600080fd5b8151610abd81614220565b6020808252602b908201527f4e6f206f72646572732065786973747320666f722073656c656374656420696e60408201526a746572657374207261746560a81b606082015260800190565b8481526080810161455b602083018661437a565b60408201939093526060015292915050565b60008282101561457f5761457f614411565b500390565b600081600019048311821515161561459e5761459e614411565b500290565b600082198211156145b6576145b6614411565b500190565b60006001600160ff1b03818413828413808216868404861116156145e1576145e1614411565b600160ff1b600087128281168783058912161561460057614600614411565b6000871292508782058712848416161561461c5761461c614411565b8785058712818416161561463257614632614411565b505050929093029392505050565b634e487b7160e01b600052601260045260246000fd5b60008261466557614665614640565b600160ff1b82146000198414161561467f5761467f614411565b500590565b60008261469357614693614640565b500490565b86815260c081016146ac602083018861437a565b8560408301528460608301528360808301528260a0830152979650505050505050565b6000600160ff1b8214156146e5576146e5614411565b5060000390565b60208082526030908201527f4f7264657253746174697374696373547265652834303329202d2056616c756560408201526f103237b2b9903737ba1032bc34b9ba1760811b606082015260800190565b602081526000610abd6020830184614479565b600080821280156001600160ff1b038490038513161561477157614771614411565b600160ff1b839003841281161561478a5761478a614411565b50500190565b60008083128015600160ff1b8501841216156147ae576147ae614411565b6001600160ff1b03840183138116156147c9576147c9614411565b5050039056fe102c2681ef7c98b80d6ee00bc89c73fe6b29b6cc81206242bfb4c5c32e608d37102c2681ef7c98b80d6ee00bc89c73fe6b29b6cc81206242bfb4c5c32e608d38a2646970667358221220dc2ae698c76abda7e05edcb16c355a6e8d86d4bc410bb9c95d29e9ed8cb85d0964736f6c63430008090033",
  "devdoc": {
    "details": "The market orders is stored in structured red-black trees and doubly linked lists in each node.",
    "kind": "dev",
    "methods": {
      "acceptedContracts()": {
        "details": "The contact name listed in this method is also needed to be listed `requiredContracts` method."
      },
      "cancelOrder(address,uint256)": {
        "params": {
          "_orderId": "Market order id",
          "_user": "User address"
        }
      },
      "createOrder(uint8,address,uint256,uint256)": {
        "params": {
          "_amount": "Amount of funds the maker wants to borrow/lend",
          "_rate": "Amount of interest rate taker wish to borrow/lend",
          "_side": "Order position type, Borrow or Lend",
          "_user": "User's address"
        },
        "returns": {
          "amount": "The taken amount",
          "maker": "The maker address"
        }
      },
      "futureValueOf(address)": {
        "params": {
          "_user": "User address"
        },
        "returns": {
          "_0": "The future value in latest maturity"
        }
      },
      "getBorrowRate()": {
        "returns": {
          "rate": "The highest borrow rate"
        }
      },
      "getBorrowRates(uint256)": {
        "params": {
          "_limit": "Max limit to get rates"
        },
        "returns": {
          "rates": "The array of borrow rates"
        }
      },
      "getCurrency()": {
        "returns": {
          "currency": "The market currency"
        }
      },
      "getLendRate()": {
        "returns": {
          "rate": "The lowest lend rate"
        }
      },
      "getLendRates(uint256)": {
        "params": {
          "_limit": "Max limit to get rates"
        },
        "returns": {
          "rates": "The array of lending rates"
        }
      },
      "getMaker(uint256)": {
        "params": {
          "_orderId": "The market order id"
        },
        "returns": {
          "maker": "The order maker address"
        }
      },
      "getMarket()": {
        "returns": {
          "market": "The market data"
        }
      },
      "getMaturity()": {
        "returns": {
          "maturity": "The market maturity"
        }
      },
      "getMidRate()": {
        "returns": {
          "rate": "The mid rate"
        }
      },
      "getOrder(uint256)": {
        "params": {
          "_orderId": "The market order id"
        },
        "returns": {
          "order": "The market order information"
        }
      },
      "getOrderFromTree(uint256,uint256)": {
        "params": {
          "_maturity": "The maturity of the order book",
          "_orderId": "The market order id"
        },
        "returns": {
          "_0": "order The market order information"
        }
      },
      "initialize(address,bytes32,uint256,uint256)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController.",
        "params": {
          "_basisDate": "The basis date when the first market open",
          "_ccy": "The main currency for the order book",
          "_maturity": "The initial maturity of the market",
          "_resolver": "The address of the Address Resolver contract"
        }
      },
      "isMatured()": {
        "returns": {
          "_0": "The boolean if the market is matured or not"
        }
      },
      "isOpened()": {
        "returns": {
          "_0": "The boolean if the market is opened or not"
        }
      },
      "matchOrders(uint8,uint256,uint256)": {
        "params": {
          "_amount": "Amount of funds the maker wants to borrow/lend",
          "_rate": "Amount of interest rate taker wish to borrow/lend",
          "_side": "Order position type, Borrow or Lend"
        }
      },
      "openMarket(uint256)": {
        "params": {
          "_maturity": "The new maturity"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "presentValueOf(address)": {
        "params": {
          "_user": "User address"
        },
        "returns": {
          "_0": "The present value"
        }
      },
      "removeFutureValueInPastMaturity(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "maturity": "Maturity of future value",
          "removedAmount": "Removed future value amount"
        }
      },
      "requiredContracts()": {
        "details": "The contract name list is in `./libraries/Contracts.sol`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptedContracts()": {
        "notice": "Returns contract names that can call this contract."
      },
      "cancelOrder(address,uint256)": {
        "notice": "Cancels the order."
      },
      "createOrder(uint8,address,uint256,uint256)": {
        "notice": "Creates the order. Takes the order if the order is matched, and places new order if not match it."
      },
      "futureValueOf(address)": {
        "notice": "Gets the future value in the latest maturity the user has. If the market is rotated, the maturity in the market is updated, so the existing future value is addressed as an old future value in old maturity. This method doesn't return those old future values."
      },
      "getBorrowRate()": {
        "notice": "Gets the highest borrow rate."
      },
      "getBorrowRates(uint256)": {
        "notice": "Gets the borrow rates."
      },
      "getCurrency()": {
        "notice": "Gets the market currency."
      },
      "getLendRate()": {
        "notice": "Gets the lowest lend rate."
      },
      "getLendRates(uint256)": {
        "notice": "Gets the lend rates."
      },
      "getMaker(uint256)": {
        "notice": "Gets the order maker address."
      },
      "getMarket()": {
        "notice": "Gets the market data."
      },
      "getMaturity()": {
        "notice": "Gets the current market maturity."
      },
      "getMidRate()": {
        "notice": "Gets the mid rate."
      },
      "getOrder(uint256)": {
        "notice": "Gets the market order information."
      },
      "getOrderFromTree(uint256,uint256)": {
        "notice": "Gets the market order from the order book in the maturity."
      },
      "initialize(address,bytes32,uint256,uint256)": {
        "notice": "Initializes the contract."
      },
      "isMatured()": {
        "notice": "Gets if the market is matured."
      },
      "isOpened()": {
        "notice": "Gets if the market is opened."
      },
      "matchOrders(uint8,uint256,uint256)": {
        "notice": "Gets if the market order will be matched or not. Returns zero if there is not a matched order. Reverts if no orders for specified interest rate."
      },
      "openMarket(uint256)": {
        "notice": "Opens market"
      },
      "pauseMarket()": {
        "notice": "Pauses the lending market."
      },
      "presentValueOf(address)": {
        "notice": "Gets the present value calculated from the future value & market rate."
      },
      "removeFutureValueInPastMaturity(address)": {
        "notice": "Remove all future values if there is an amount in the past maturity."
      },
      "requiredContracts()": {
        "notice": "Returns the contract names used in this contract."
      },
      "unpauseMarket()": {
        "notice": "Unpauses the lending market."
      }
    },
    "notice": "Implements the module that allows lending market participants to create/cancel market orders, and also provides a future value calculation module. For updates, this contract is basically called from `LendingMarketController.sol`instead of being called \\ directly by the user.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15161,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "resolver",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAddressResolver)8522"
      },
      {
        "astId": 15165,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "addressCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 952,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 790,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "_initialized",
        "offset": 1,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 793,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "_initializing",
        "offset": 2,
        "slot": "2",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAddressResolver)8522": {
        "encoding": "inplace",
        "label": "contract IAddressResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}