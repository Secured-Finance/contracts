{
  "address": "0x60E51D1da935bbF15a5787FD5a7dB79410bC83ba",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "CancelOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "MakeOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevMaturity",
          "type": "uint256"
        }
      ],
      "name": "OpenMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "TakeOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        }
      ],
      "name": "cancelOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "createOrder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "futureValueOf",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrency",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getFutureValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLendRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        }
      ],
      "name": "getMaker",
      "outputs": [
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "ccy",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "maturity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basisDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lendRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "midRate",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILendingMarket.Market",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaturity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMidRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        }
      ],
      "name": "getOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ProtocolTypes.Side",
              "name": "side",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maturity",
              "type": "uint256"
            }
          ],
          "internalType": "struct MarketOrder",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        }
      ],
      "name": "getOrderFromTree",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getTotalBorrowingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getTotalLendingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "name": "hasFutureValueInPastMaturity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_basisDate",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMatured",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOpened",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "matchOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "openMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "prevMaturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "presentValueOf",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "removeFutureValueInPastMaturity",
      "outputs": [
        {
          "internalType": "int256",
          "name": "removedAmount",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "basisMaturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xea2fa61d1cbe804ad9fd4d7ef8c818619770bc493e50dc5aa91f5c497e53ac8a",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x60E51D1da935bbF15a5787FD5a7dB79410bC83ba",
    "transactionIndex": 31,
    "gasUsed": "3769426",
    "logsBloom": "0x
    "blockHash": "0x1747efbf9760ffcb86d2896d1766edcd9d6c9289edc6a897835d167d5d42cffe",
    "transactionHash": "0xea2fa61d1cbe804ad9fd4d7ef8c818619770bc493e50dc5aa91f5c497e53ac8a",
    "logs": [],
    "blockNumber": 11290686,
    "cumulativeGasUsed": "7990659",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "dc7ed2ed2027649a76bc30077c8b6211",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CancelOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"MakeOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevMaturity\",\"type\":\"uint256\"}],\"name\":\"OpenMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"TakeOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"futureValueOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrency\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getFutureValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"getMaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarket\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basisDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"midRate\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendingMarket.Market\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMidRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"getOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketOrder\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"getOrderFromTree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getTotalBorrowingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getTotalLendingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"name\":\"hasFutureValueInPastMaturity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_basisDate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMatured\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"matchOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"openMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"prevMaturity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"presentValueOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeFutureValueInPastMaturity\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"removedAmount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"basisMaturity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"LendingMarket contract is the module that allows lending market participants to create/cancel market orders. It will store market orders in structured red-black tree and doubly linked list in each node.\",\"kind\":\"dev\",\"methods\":{\"acceptedContracts()\":{\"details\":\"Returns contract names that can call this contract.\"},\"cancelOrder(address,uint256)\":{\"details\":\"Cancels the market order.\",\"params\":{\"_orderId\":\"Market order id Requirements: - Order has to be cancelable by market maker\",\"_user\":\"User address\"}},\"createOrder(uint8,address,uint256,uint256)\":{\"details\":\"Executes the market order, if order matched it takes order, if not matched places new order.\",\"params\":{\"_amount\":\"Amount of funds maker/taker wish to borrow/lend\",\"_rate\":\"Amount of interest rate maker/taker wish to borrow/lend Returns true after successful execution\",\"_side\":\"Market order side it can be borrow or lend\",\"_user\":\"User address\"}},\"futureValueOf(address)\":{\"details\":\"Gets the future value in the latest maturity the user has. If the market is rotated, the future value maturity is addressed as the old one and return 0 here.\",\"params\":{\"_user\":\"User address\"}},\"getBorrowRate()\":{\"details\":\"Gets the highest borrow rate.\"},\"getCurrency()\":{\"details\":\"Gets the market currency.\"},\"getLendRate()\":{\"details\":\"Gets the highest lend rate.\"},\"getMaker(uint256)\":{\"details\":\"Gets the order maker address.\",\"params\":{\"_orderId\":\"Market order id\"}},\"getMarket()\":{\"details\":\"Gets the market data.\"},\"getMaturity()\":{\"details\":\"Gets the market maturity.\"},\"getMidRate()\":{\"details\":\"Gets mid rate.\"},\"getOrder(uint256)\":{\"details\":\"Gets the market order information.\",\"params\":{\"_orderId\":\"Market order id\"}},\"initialize(address,bytes32,uint256,uint256)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController\",\"params\":{\"_ccy\":\"The main currency for order book lending deals\",\"_maturity\":\"The initial maturity of the market\",\"_resolver\":\"The address of the Address Resolver contract\"}},\"isMatured()\":{\"details\":\"Gets if the market is matured.\"},\"isOpened()\":{\"details\":\"Gets if the market is opened.\"},\"matchOrders(uint8,uint256,uint256)\":{\"details\":\"Gets the matching market order.\",\"params\":{\"_amount\":\"Amount of funds taker wish to borrow/lend\",\"_rate\":\"Amount of interest rate taker wish to borrow/lend Returns zero if didn't find a matched order, reverts if no orders for specified interest rate\",\"_side\":\"Market order side it can be borrow or lend\"}},\"pauseMarket()\":{\"details\":\"Pauses the lending market.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"presentValueOf(address)\":{\"details\":\"Gets the future value calculated from the future value & market rate.\",\"params\":{\"_user\":\"User address\"}},\"removeFutureValueInPastMaturity(address)\":{\"details\":\"Remove future value if there is balance in the past maturity.\",\"params\":{\"_user\":\"Target address to mint token\"}},\"requiredContracts()\":{\"details\":\"Returns required contract names in this contract\"},\"unpauseMarket()\":{\"details\":\"Pauses the lending market.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,bytes32,uint256,uint256)\":{\"notice\":\"Initializes the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LendingMarket.sol\":\"LendingMarket\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/LendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n// interfaces\\nimport {ILendingMarket} from \\\"./interfaces/ILendingMarket.sol\\\";\\n// libraries\\nimport {Contracts} from \\\"./libraries/Contracts.sol\\\";\\nimport {HitchensOrderStatisticsTreeLib} from \\\"./libraries/HitchensOrderStatisticsTreeLib.sol\\\";\\n// mixins\\nimport {MixinAddressResolver} from \\\"./mixins/MixinAddressResolver.sol\\\";\\nimport {MixinFutureValue} from \\\"./mixins/MixinFutureValue.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"./types/ProtocolTypes.sol\\\";\\n// utils\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\n// storages\\nimport {LendingMarketStorage as Storage, MarketOrder} from \\\"./storages/LendingMarketStorage.sol\\\";\\n\\n/**\\n * @dev LendingMarket contract is the module that allows lending market participants\\n * to create/cancel market orders.\\n *\\n * It will store market orders in structured red-black tree and doubly linked list in each node.\\n */\\ncontract LendingMarket is\\n    ILendingMarket,\\n    MixinAddressResolver,\\n    MixinFutureValue,\\n    Pausable,\\n    Proxyable\\n{\\n    using HitchensOrderStatisticsTreeLib for HitchensOrderStatisticsTreeLib.Tree;\\n\\n    /**\\n     * @dev Modifier to make a function callable only by order maker.\\n     * @param _orderId Market order id\\n     */\\n    modifier onlyMaker(address account, uint256 _orderId) {\\n        require(account == getMaker(_orderId), \\\"caller is not the maker\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check if the market is opened.\\n     */\\n    modifier ifOpened() {\\n        require(isOpened(), \\\"Market is not opened\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check if the market is matured.\\n     */\\n    modifier ifMatured() {\\n        require(isMatured(), \\\"Market is not matured\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController\\n     * @param _resolver The address of the Address Resolver contract\\n     * @param _ccy The main currency for order book lending deals\\n     * @param _maturity The initial maturity of the market\\n     */\\n    function initialize(\\n        address _resolver,\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _basisDate\\n    ) public initializer onlyBeacon {\\n        registerAddressResolver(_resolver);\\n\\n        Storage.slot().ccy = _ccy;\\n        Storage.slot().maturity = _maturity;\\n        Storage.slot().basisDate = _basisDate;\\n\\n        buildCache();\\n    }\\n\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](1);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n    }\\n\\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](1);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n    }\\n\\n    /**\\n     * @dev Gets the order maker address.\\n     * @param _orderId Market order id\\n     */\\n    function getMaker(uint256 _orderId) public view override returns (address maker) {\\n        return Storage.slot().orders[_orderId].maker;\\n    }\\n\\n    /**\\n     * @dev Gets the market data.\\n     */\\n    function getMarket() external view override returns (Market memory) {\\n        return\\n            Market({\\n                ccy: Storage.slot().ccy,\\n                maturity: Storage.slot().maturity,\\n                basisDate: Storage.slot().basisDate,\\n                borrowRate: getBorrowRate(),\\n                lendRate: getLendRate(),\\n                midRate: getMidRate()\\n            });\\n    }\\n\\n    /**\\n     * @dev Gets the highest borrow rate.\\n     */\\n    function getBorrowRate() public view override returns (uint256 rate) {\\n        uint256 maturity = Storage.slot().maturity;\\n        return Storage.slot().borrowOrders[maturity].last();\\n    }\\n\\n    /**\\n     * @dev Gets the highest lend rate.\\n     */\\n    function getLendRate() public view override returns (uint256 rate) {\\n        return Storage.slot().lendOrders[Storage.slot().maturity].last();\\n    }\\n\\n    /**\\n     * @dev Gets mid rate.\\n     */\\n    function getMidRate() public view override returns (uint256 rate) {\\n        uint256 borrowRate = getBorrowRate();\\n        uint256 lendRate = getLendRate();\\n        uint256 combinedRate = borrowRate + lendRate;\\n\\n        return combinedRate / 2;\\n    }\\n\\n    /**\\n     * @dev Gets the market maturity.\\n     */\\n    function getMaturity() external view override returns (uint256) {\\n        return Storage.slot().maturity;\\n    }\\n\\n    /**\\n     * @dev Gets the market currency.\\n     */\\n    function getCurrency() external view override returns (bytes32) {\\n        return Storage.slot().ccy;\\n    }\\n\\n    /**\\n     * @dev Gets if the market is matured.\\n     */\\n    function isMatured() public view override returns (bool) {\\n        return block.timestamp >= Storage.slot().maturity;\\n    }\\n\\n    /**\\n     * @dev Gets if the market is opened.\\n     */\\n    function isOpened() public view override returns (bool) {\\n        return !isMatured() && block.timestamp >= Storage.slot().basisDate;\\n    }\\n\\n    /**\\n     * @dev Gets the market order information.\\n     * @param _orderId Market order id\\n     */\\n    function getOrder(uint256 _orderId) external view override returns (MarketOrder memory) {\\n        return Storage.slot().orders[_orderId];\\n    }\\n\\n    function getOrderFromTree(uint256 _maturity, uint256 _orderId)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            return Storage.slot().lendOrders[_maturity].getOrderById(marketOrder.rate, _orderId);\\n        } else {\\n            return Storage.slot().borrowOrders[_maturity].getOrderById(marketOrder.rate, _orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets the future value in the latest maturity the user has.\\n     * If the market is rotated, the future value maturity is addressed as the old one\\n     * and return 0 here.\\n     * @param _user User address\\n     */\\n    function futureValueOf(address _user) public view override returns (int256) {\\n        (int256 futureValue, uint256 maturity) = getFutureValue(_user);\\n\\n        if (Storage.slot().maturity == maturity) {\\n            return futureValue;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets the future value calculated from the future value & market rate.\\n     * @param _user User address\\n     */\\n    function presentValueOf(address _user) external view override returns (int256) {\\n        int256 futureValue = futureValueOf(_user);\\n\\n        // NOTE: The formula is: presentValue = futureValue / (1 + rate * (maturity - now) / 360 days).\\n        uint256 rate = getMidRate();\\n        uint256 dt = Storage.slot().maturity >= block.timestamp\\n            ? Storage.slot().maturity - block.timestamp\\n            : 0;\\n\\n        return ((futureValue * int256(ProtocolTypes.BP * ProtocolTypes.SECONDS_IN_YEAR)) /\\n            int256(ProtocolTypes.BP * ProtocolTypes.SECONDS_IN_YEAR + rate * dt));\\n    }\\n\\n    /**\\n     * @dev Internally triggered to increase and return id of last order in order book.\\n     */\\n    function nextOrderId() internal returns (uint256) {\\n        Storage.slot().lastOrderId++;\\n        return Storage.slot().lastOrderId;\\n    }\\n\\n    function openMarket(uint256 _maturity)\\n        external\\n        override\\n        ifMatured\\n        onlyAcceptedContracts\\n        returns (uint256 prevMaturity)\\n    {\\n        prevMaturity = Storage.slot().maturity;\\n        Storage.slot().maturity = _maturity;\\n\\n        emit OpenMarket(_maturity, prevMaturity);\\n    }\\n\\n    /**\\n     * @dev Cancels the market order.\\n     * @param _user User address\\n     * @param _orderId Market order id\\n     *\\n     * Requirements:\\n     * - Order has to be cancelable by market maker\\n     */\\n    function cancelOrder(address _user, uint256 _orderId)\\n        public\\n        override\\n        onlyMaker(_user, _orderId)\\n        whenNotPaused\\n        returns (uint256)\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            Storage.slot().lendOrders[Storage.slot().maturity].remove(\\n                marketOrder.amount,\\n                marketOrder.rate,\\n                _orderId\\n            );\\n        } else if (marketOrder.side == ProtocolTypes.Side.BORROW) {\\n            Storage.slot().borrowOrders[Storage.slot().maturity].remove(\\n                marketOrder.amount,\\n                marketOrder.rate,\\n                _orderId\\n            );\\n        }\\n        delete Storage.slot().orders[_orderId];\\n\\n        emit CancelOrder(\\n            _orderId,\\n            marketOrder.maker,\\n            marketOrder.side,\\n            marketOrder.amount,\\n            marketOrder.rate\\n        );\\n\\n        return marketOrder.amount;\\n    }\\n\\n    /**\\n     * @dev Makes new market order.\\n     * @param _side Borrow or Lend order position\\n     * @param _user Target address\\n     * @param _amount Amount of funds maker wish to borrow/lend\\n     * @param _rate Preferable interest rate\\n     */\\n    function makeOrder(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _rate\\n    ) internal returns (uint256 orderId) {\\n        MarketOrder memory marketOrder;\\n\\n        marketOrder.side = _side;\\n        marketOrder.amount = _amount;\\n        marketOrder.rate = _rate;\\n        marketOrder.maker = _user;\\n        marketOrder.maturity = Storage.slot().maturity;\\n        orderId = nextOrderId();\\n\\n        Storage.slot().orders[orderId] = marketOrder;\\n\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            Storage.slot().lendOrders[Storage.slot().maturity].insert(\\n                marketOrder.amount,\\n                marketOrder.rate,\\n                orderId\\n            );\\n        } else if (marketOrder.side == ProtocolTypes.Side.BORROW) {\\n            Storage.slot().borrowOrders[Storage.slot().maturity].insert(\\n                marketOrder.amount,\\n                marketOrder.rate,\\n                orderId\\n            );\\n        }\\n\\n        emit MakeOrder(\\n            orderId,\\n            marketOrder.maker,\\n            marketOrder.side,\\n            Storage.slot().ccy,\\n            marketOrder.maturity,\\n            marketOrder.amount,\\n            marketOrder.rate\\n        );\\n    }\\n\\n    /**\\n     * @dev Takes the market order.\\n     * @param _user User address\\n     * @param _orderId Market order id in the order book\\n     * @param _amount Amount of funds taker wish to borrow/lend\\n     *\\n     * Requirements:\\n     * - Market order has to be active\\n     */\\n    function takeOrder(\\n        ProtocolTypes.Side side,\\n        address _user,\\n        uint256 _orderId,\\n        uint256 _amount\\n    ) internal returns (address) {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n        require(_amount <= marketOrder.amount, \\\"Insufficient amount\\\");\\n        require(marketOrder.maker != _user, \\\"Maker couldn't take its order\\\");\\n\\n        address lender;\\n        address borrower;\\n        Storage.slot().orders[_orderId].amount = marketOrder.amount - _amount;\\n\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            require(\\n                Storage.slot().lendOrders[Storage.slot().maturity].fillOrder(\\n                    marketOrder.rate,\\n                    _orderId,\\n                    _amount\\n                ),\\n                \\\"Couldn't fill order\\\"\\n            );\\n            lender = marketOrder.maker;\\n            borrower = _user;\\n        } else if (marketOrder.side == ProtocolTypes.Side.BORROW) {\\n            require(\\n                Storage.slot().borrowOrders[Storage.slot().maturity].fillOrder(\\n                    marketOrder.rate,\\n                    _orderId,\\n                    _amount\\n                ),\\n                \\\"Couldn't fill order\\\"\\n            );\\n            lender = _user;\\n            borrower = marketOrder.maker;\\n        }\\n\\n        // NOTE: The formula is: futureValue = amount * (1 + rate * (maturity - now) / 360 days).\\n        uint256 currentRate = (marketOrder.rate * (Storage.slot().maturity - block.timestamp)) /\\n            ProtocolTypes.SECONDS_IN_YEAR;\\n        uint256 fvAmount = (_amount * (ProtocolTypes.BP + currentRate)) / ProtocolTypes.BP;\\n\\n        _addFutureValue(lender, borrower, fvAmount, Storage.slot().maturity);\\n\\n        emit TakeOrder(_orderId, _user, side, _amount, marketOrder.rate);\\n\\n        if (marketOrder.amount == 0) {\\n            delete Storage.slot().orders[_orderId];\\n        }\\n\\n        return marketOrder.maker;\\n    }\\n\\n    /**\\n     * @dev Gets the matching market order.\\n     * @param _side Market order side it can be borrow or lend\\n     * @param _amount Amount of funds taker wish to borrow/lend\\n     * @param _rate Amount of interest rate taker wish to borrow/lend\\n     *\\n     * Returns zero if didn't find a matched order, reverts if no orders for specified interest rate\\n     */\\n    function matchOrders(\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _rate\\n    ) external view override ifOpened returns (uint256) {\\n        if (_side == ProtocolTypes.Side.LEND) {\\n            require(\\n                Storage.slot().borrowOrders[Storage.slot().maturity].exists(_rate),\\n                \\\"No orders exists for selected interest rate\\\"\\n            );\\n            return\\n                Storage.slot().borrowOrders[Storage.slot().maturity].findOrderIdForAmount(\\n                    _rate,\\n                    _amount\\n                );\\n        } else {\\n            require(\\n                Storage.slot().lendOrders[Storage.slot().maturity].exists(_rate),\\n                \\\"No orders exists for selected interest rate\\\"\\n            );\\n            return\\n                Storage.slot().lendOrders[Storage.slot().maturity].findOrderIdForAmount(\\n                    _rate,\\n                    _amount\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @dev Executes the market order, if order matched it takes order, if not matched places new order.\\n     * @param _side Market order side it can be borrow or lend\\n     * @param _user User address\\n     * @param _amount Amount of funds maker/taker wish to borrow/lend\\n     * @param _rate Amount of interest rate maker/taker wish to borrow/lend\\n     *\\n     * Returns true after successful execution\\n     */\\n    function createOrder(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _rate\\n    ) external override whenNotPaused onlyAcceptedContracts ifOpened returns (address, uint256) {\\n        require(_amount > 0, \\\"Can't place empty amount\\\");\\n        require(_rate > 0, \\\"Can't place empty rate\\\");\\n        uint256 orderId;\\n\\n        if (_side == ProtocolTypes.Side.LEND) {\\n            orderId = Storage.slot().borrowOrders[Storage.slot().maturity].findOrderIdForAmount(\\n                _rate,\\n                _amount\\n            );\\n        } else {\\n            orderId = Storage.slot().lendOrders[Storage.slot().maturity].findOrderIdForAmount(\\n                _rate,\\n                _amount\\n            );\\n        }\\n\\n        if (orderId == 0) {\\n            makeOrder(_side, _user, _amount, _rate);\\n            return (_user, 0);\\n        } else {\\n            address maker = takeOrder(_side, _user, orderId, _amount);\\n            return (maker, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Pauses the lending market.\\n     */\\n    function pauseMarket() external override onlyAcceptedContracts {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Pauses the lending market.\\n     */\\n    function unpauseMarket() external override onlyAcceptedContracts {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Remove future value if there is balance in the past maturity.\\n     * @param _user Target address to mint token\\n     */\\n    function removeFutureValueInPastMaturity(address _user)\\n        external\\n        onlyAcceptedContracts\\n        returns (int256 removedAmount, uint256 basisMaturity)\\n    {\\n        if (hasFutureValueInPastMaturity(_user, Storage.slot().maturity)) {\\n            (removedAmount, basisMaturity) = _removeFutureValue(_user);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa981d19d129fa5124106d53428fd69af3a0655d77a45a5f9c2c9542d5cfb7e37\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICollateralAggregator {\\n    event Register(address indexed addr);\\n    event ReleaseUnsettled(address indexed party, bytes32 ccy, uint256 amount);\\n    event UseUnsettledCollateral(address indexed party, bytes32 ccy, uint256 amount);\\n\\n    function isCovered(address _user) external view returns (bool);\\n\\n    function isRegisteredUser(address addr) external view returns (bool);\\n\\n    function getWithdrawableCollateral(address _user) external view returns (uint256 maxWithdraw);\\n\\n    function getCoverage(address _user) external view returns (uint256 coverage);\\n\\n    function getUnsettledCollateral(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUnusedCollateral(address _user) external view returns (uint256);\\n\\n    function getTotalUnsettledExposure(address _user) external view returns (uint256);\\n\\n    function getCollateralParameters()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function register() external;\\n\\n    function useUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function releaseUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function setCollateralParameters(\\n        uint256 marginCallThresholdRate,\\n        uint256 autoLiquidationThresholdRate,\\n        uint256 liquidationPriceRate,\\n        uint256 minCollateralRate\\n    ) external;\\n}\\n\",\"keccak256\":\"0x044f9ce00b347c34307571cb24b3d8c3435db583f9d92b5554dbf847f7fcd477\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICollateralVault {\\n    event Deposit(address user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address from, bytes32 ccy, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress);\\n\\n    function deposit(bytes32 _ccy, uint256 _amount) external payable;\\n\\n    function getIndependentCollateral(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getIndependentCollateralInETH(address _user, bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function withdraw(bytes32 _ccy, uint256 _amount) external;\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getTotalIndependentCollateralInETH(address _party) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb67032b6e0eaf42b0eab142605bd2310d6432cee771ed1fe8a89546a7a1c2ef4\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CcyAdded(bytes32 indexed ccy, string name, uint256 haircut);\\n    event CcyCollateralUpdate(bytes32 indexed ccy, bool isCollateral);\\n    event CcySupportUpdate(bytes32 indexed ccy, bool isSupported);\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n    event MinMarginUpdated(bytes32 indexed ccy, uint256 minMargin);\\n    event PriceFeedAdded(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n    event PriceFeedRemoved(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n\\n    function convertBulkToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH) external view returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, int256 _amount) external view returns (int256);\\n\\n    function getCurrencies(bytes32) external view returns (ProtocolTypes.Currency memory);\\n\\n    function getEthDecimals(bytes32) external view returns (uint8);\\n\\n    function getUsdDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getMinMargin(bytes32 _ccy) external view returns (uint256);\\n\\n    function getChainId(bytes32 _ccy) external view returns (uint16);\\n\\n    function isCollateral(bytes32) external view returns (bool);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        address _ethPriceFeed,\\n        uint256 _haircut,\\n        address _tokenAddress\\n    ) external;\\n\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function updateCollateralSupport(bytes32 _ccy, bool _isSupported) external;\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported) external;\\n\\n    function updateMinMargin(bytes32 _ccy, uint256 _minMargin) external;\\n\\n    function getTokenAddresses(bytes32) external view returns (address);\\n}\\n\",\"keccak256\":\"0x76e6d32008b43f2d07106060f8eeb9e05242cdc3d772597f299cb3b2d5cda49d\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport {MarketOrder} from \\\"../storages/LendingMarketStorage.sol\\\";\\n\\ninterface ILendingMarket {\\n    event CancelOrder(\\n        uint256 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n    event MakeOrder(\\n        uint256 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n    event TakeOrder(\\n        uint256 orderId,\\n        address indexed taker,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n\\n    event OpenMarket(uint256 maturity, uint256 prevMaturity);\\n\\n    struct Market {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        uint256 basisDate;\\n        uint256 borrowRate;\\n        uint256 lendRate;\\n        uint256 midRate;\\n    }\\n\\n    function getBorrowRate() external view returns (uint256 rate);\\n\\n    function getLendRate() external view returns (uint256 rate);\\n\\n    function getMaker(uint256 orderId) external view returns (address maker);\\n\\n    function getMarket() external view returns (Market memory);\\n\\n    function getMidRate() external view returns (uint256 rate);\\n\\n    function getMaturity() external view returns (uint256);\\n\\n    function getCurrency() external view returns (bytes32);\\n\\n    function isMatured() external view returns (bool);\\n\\n    function isOpened() external view returns (bool);\\n\\n    function getOrder(uint256 orderId) external view returns (MarketOrder memory);\\n\\n    function getOrderFromTree(uint256 _maturity, uint256 _orderId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function futureValueOf(address account) external view returns (int256);\\n\\n    function presentValueOf(address account) external view returns (int256);\\n\\n    function openMarket(uint256 maturity) external returns (uint256);\\n\\n    function cancelOrder(address account, uint256 orderId) external returns (uint256);\\n\\n    function matchOrders(\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 rate\\n    ) external view returns (uint256);\\n\\n    function createOrder(\\n        ProtocolTypes.Side side,\\n        address acount,\\n        uint256 amount,\\n        uint256 rate\\n    ) external returns (address maker, uint256 matchedAmount);\\n\\n    function pauseMarket() external;\\n\\n    function unpauseMarket() external;\\n\\n    function removeFutureValueInPastMaturity(address _account)\\n        external\\n        returns (int256 removedAmount, uint256 basisMaturity);\\n}\\n\",\"keccak256\":\"0x172566c99caa9e3857f312023b5d12a9b93bc0e56f4f2d9720726904a07d875b\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\nstruct Order {\\n    bytes32 ccy;\\n    uint256 term;\\n    ProtocolTypes.Side side;\\n    uint256 amount;\\n    uint256 rate;\\n}\\n\\ninterface ILendingMarketController {\\n    event LendingMarketCreated(\\n        bytes32 ccy,\\n        address indexed marketAddr,\\n        uint256 index,\\n        uint256 maturity\\n    );\\n    event LendingMarketsRotated(bytes32 ccy, uint256 oldMaturity, uint256 newMaturity);\\n\\n    function getBasisDate(bytes32 _ccy) external view returns (uint256);\\n\\n    function getLendingMarkets(bytes32 _ccy) external view returns (address[] memory);\\n\\n    function getBorrowRates(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getLendRates(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getMidRates(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getMaturities(bytes32 _ccy) external view returns (uint256[] memory);\\n\\n    function getTotalPresentValue(bytes32 ccy, address account) external view returns (int256);\\n\\n    function getTotalPresentValueInETH(address account)\\n        external\\n        view\\n        returns (int256 totalPresentValue);\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function isInitializedLendingMarket(bytes32 _ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 _ccy,\\n        uint256 _basisDate,\\n        uint256 _compoundFactor\\n    ) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function createLendingMarket(bytes32 _ccy) external returns (address market);\\n\\n    function rotateLendingMarkets(bytes32 _ccy) external;\\n\\n    function pauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc97510b80b7f68387bbbb3ae3415554d3604c736c9a55fdc6d640aced9f62576\",\"license\":\"MIT\"},\"contracts/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant COLLATERAL_AGGREGATOR = \\\"CollateralAggregator\\\";\\n    bytes32 internal constant COLLATERAL_VAULT = \\\"CollateralVault\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0xd2dc9d943f2de1871ee4ffa4b801291c2369985b61b40508576c8770aed8eff4\",\"license\":\"MIT\"},\"contracts/libraries/HitchensOrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary HitchensOrderStatisticsTreeLib {\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint256 head;\\n        uint256 tail;\\n        uint256 orderCounter;\\n        mapping(uint256 => OrderItem) orders;\\n    }\\n\\n    struct OrderItem {\\n        uint256 orderId;\\n        uint256 next;\\n        uint256 prev;\\n        uint256 timestamp;\\n        uint256 amount;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].right != EMPTY) {\\n            _value = self.nodes[_value].right;\\n        }\\n    }\\n\\n    function next(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(401) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].right != EMPTY) {\\n            _cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(402) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].left != EMPTY) {\\n            _cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint256 value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        if (self.nodes[value].parent != EMPTY) return true;\\n        return false;\\n    }\\n\\n    function amountExistsInNode(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        if (!exists(self, value)) return false;\\n        return isAmountExistsInList(self, value, amount);\\n    }\\n\\n    function orderExistsInNode(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal view returns (bool) {\\n        if (!exists(self, value)) return false;\\n        return isOrderIdExists(self, value, amount, orderId);\\n    }\\n\\n    function getNode(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n        return (gn.parent, gn.left, gn.right, gn.red, gn.head, gn.tail, gn.orderCounter);\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256 _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(405) - Value to insert cannot be zero\\\");\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                insertOrder(self, probe, amount, orderId);\\n                return;\\n            }\\n        }\\n        Node storage nValue = self.nodes[value];\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n        insertOrder(self, value, amount, orderId);\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(407) - Value to delete cannot be zero\\\");\\n        require(\\n            orderExistsInNode(self, amount, value, orderId),\\n            \\\"OrderStatisticsTree(408) - Value to delete does not exist.\\\"\\n        );\\n        Node storage nValue = self.nodes[value];\\n        removeOrder(self, value, orderId);\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint256 a,\\n        uint256 b\\n    ) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        return (order.orderId, order.next, order.prev, order.timestamp, order.amount);\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function isOrderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 amount,\\n        uint256 orderId\\n    ) internal view returns (bool) {\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        if (order.amount != amount) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Return boolean if value and amount exist in doubly linked list.\\n     */\\n    function isAmountExistsInList(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 amount\\n    ) internal view returns (bool) {\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[gn.head];\\n        while (order.next != 0 && order.amount < amount) {\\n            order = gn.orders[order.next];\\n        }\\n        if (order.amount == 0) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Return the id of the first OrderItem matching `_amount` in the amount field.\\n     */\\n    function findOrderIdForAmount(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 amount\\n    ) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[gn.head];\\n        while (order.orderId != gn.tail && order.amount < amount) {\\n            order = gn.orders[order.next];\\n        }\\n        if (order.amount >= amount) {\\n            return order.orderId;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reduces order amount once market order taken.\\n     */\\n    function fillOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId,\\n        uint256 _amount\\n    ) internal returns (bool) {\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        uint256 newAmount = order.amount - _amount;\\n        gn.orders[orderId].amount = newAmount;\\n\\n        if (gn.orders[orderId].amount == 0) {\\n            remove(self, newAmount, value, orderId);\\n        } else {\\n            if (gn.orders[gn.head].amount < newAmount) {\\n                OrderItem memory rootOrder = gn.orders[gn.head];\\n                while (rootOrder.orderId != gn.tail && rootOrder.amount < newAmount) {\\n                    rootOrder = gn.orders[rootOrder.next];\\n                }\\n                if (order.amount > _amount) {\\n                    OrderItem memory prevOrder = gn.orders[rootOrder.prev];\\n                    _link(self, value, order.orderId, rootOrder.orderId);\\n                    _link(self, value, prevOrder.orderId, order.orderId);\\n                } else {\\n                    OrderItem memory nextOrder = gn.orders[rootOrder.next];\\n                    _link(self, value, order.orderId, nextOrder.orderId);\\n                    _link(self, value, rootOrder.orderId, order.orderId);\\n                }\\n            } else {\\n                _link(self, value, order.orderId, gn.head);\\n                _setHead(self, value, order.orderId);\\n                if (gn.tail == 0) _setTail(self, value, order.orderId);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Up size order by market maker.\\n     */\\n    function upSizeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId,\\n        uint256 _amount\\n    ) internal returns (bool) {\\n        require(_amount > 0, \\\"Couldn't up size order with 0\\\");\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        uint256 newAmount = order.amount + _amount;\\n        gn.orders[orderId].amount = newAmount;\\n\\n        if (gn.orders[gn.head].amount < newAmount) {\\n            OrderItem memory rootOrder = gn.orders[gn.head];\\n            while (rootOrder.orderId != gn.tail && rootOrder.amount < newAmount) {\\n                rootOrder = gn.orders[rootOrder.next];\\n            }\\n            if (order.amount > _amount) {\\n                OrderItem memory prevOrder = gn.orders[rootOrder.prev];\\n                _link(self, value, order.orderId, rootOrder.orderId);\\n                _link(self, value, prevOrder.orderId, order.orderId);\\n            } else {\\n                OrderItem memory nextOrder = gn.orders[rootOrder.next];\\n                _link(self, value, order.orderId, nextOrder.orderId);\\n                _link(self, value, rootOrder.orderId, order.orderId);\\n            }\\n        } else {\\n            _link(self, value, order.orderId, gn.head);\\n            _setHead(self, value, order.orderId);\\n            if (gn.tail == 0) _setTail(self, value, order.orderId);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount,\\n        uint256 _orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n        uint256 orderId = _createOrder(self, value, _amount, _orderId);\\n        _link(self, value, orderId, gn.head);\\n        _setHead(self, value, orderId);\\n        if (gn.tail == 0) _setTail(self, value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount,\\n        uint256 _orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, value, _amount, _orderId);\\n        } else {\\n            uint256 orderId = _createOrder(self, value, _amount, _orderId);\\n            _link(self, value, gn.tail, orderId);\\n            _setTail(self, value, orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the List.\\n     */\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem after the last OrderItem with the same `_amount`.\\n     */\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount,\\n        uint256 _orderId\\n    ) internal {\\n        require(_amount > 0, \\\"Insuficient amount\\\");\\n\\n        Node storage gn = self.nodes[value];\\n        if (gn.head == 0) {\\n            addHead(self, value, _amount, _orderId);\\n        } else {\\n            if (gn.orders[gn.head].amount < _amount) {\\n                OrderItem memory order = gn.orders[gn.head];\\n                while (order.next != 0 && order.amount <= _amount) {\\n                    order = gn.orders[order.next];\\n                }\\n                if (order.amount > _amount) {\\n                    insertOrderBefore(self, value, order.orderId, _amount, _orderId);\\n                } else {\\n                    insertOrderAfter(self, value, order.orderId, _amount, _orderId);\\n                }\\n            } else {\\n                addHead(self, value, _amount, _orderId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderImer after the Order denoted by `_id` with `_amount` and `_orderId` in the amount field.\\n     */\\n    function insertOrderAfter(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _prevId,\\n        uint256 _amount,\\n        uint256 _orderId\\n    ) internal {\\n        require(_amount > 0, \\\"Insuficient amount\\\");\\n\\n        Node storage gn = self.nodes[value];\\n\\n        if (_prevId == gn.tail) {\\n            addTail(self, value, _amount, _orderId);\\n        } else {\\n            OrderItem memory prevOrder = gn.orders[_prevId];\\n            OrderItem memory nextOrder = gn.orders[prevOrder.next];\\n            uint256 newOrderId = _createOrder(self, value, _amount, _orderId);\\n            _link(self, value, newOrderId, nextOrder.orderId);\\n            _link(self, value, prevOrder.orderId, newOrderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new Object before the Object denoted by `_id` with `_amount` and `_orderId` in the data field.\\n     */\\n    function insertOrderBefore(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _nextId,\\n        uint256 _amount,\\n        uint256 _orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        if (_nextId == gn.head) {\\n            addHead(self, value, _amount, _orderId);\\n        } else {\\n            insertOrderAfter(self, value, gn.orders[_nextId].prev, _amount, _orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 amount,\\n        uint256 orderId\\n    ) internal returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        uint256 newId;\\n        if (gn.orderCounter == 0) {\\n            newId = 1;\\n        }\\n        gn.orderCounter += 1;\\n        OrderItem memory order = OrderItem(orderId, 0, 0, block.timestamp, amount);\\n        gn.orders[order.orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _prevId,\\n        uint256 _nextId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[_prevId].next = _nextId;\\n        gn.orders[_nextId].prev = _prevId;\\n    }\\n}\\n\",\"keccak256\":\"0xbc8af297e346d090588b390043fc9d0a1916397a299700c046112945d3a74971\",\"license\":\"MIT\"},\"contracts/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../libraries/Contracts.sol\\\";\\nimport \\\"../interfaces/IAddressResolver.sol\\\";\\nimport \\\"../interfaces/ICollateralAggregator.sol\\\";\\nimport \\\"../interfaces/ICollateralVault.sol\\\";\\nimport \\\"../interfaces/ICurrencyController.sol\\\";\\nimport \\\"../interfaces/ILendingMarketController.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    IAddressResolver public resolver;\\n\\n    mapping(bytes32 => address) private addressCache;\\n\\n    modifier onlyAcceptedContracts() {\\n        require(isAcceptedContract(msg.sender), \\\"Only Accepted Contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns required contract names in this contract\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @dev Returns contract names that can call this contract.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        require(address(resolver) == address(0), \\\"resolver registered already\\\");\\n        resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function collateralAggregator() internal view returns (ICollateralAggregator) {\\n        return ICollateralAggregator(getAddress(Contracts.COLLATERAL_AGGREGATOR));\\n    }\\n\\n    function collateralVault() internal view returns (ICollateralVault) {\\n        return ICollateralVault(getAddress(Contracts.COLLATERAL_VAULT));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n}\\n\",\"keccak256\":\"0x1d5d5b1cf19de65c8468e0971a83b28aa1f6e6352bb41a39c8a400b84e6d89e2\",\"license\":\"MIT\"},\"contracts/mixins/MixinFutureValue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {FutureValueStorage as Storage} from \\\"../storages/FutureValueStorage.sol\\\";\\n\\n/**\\n * @title MixinFutureValue contract is used to store the future value as a token for Lending deals.\\n */\\ncontract MixinFutureValue {\\n    event Transfer(address indexed from, address indexed to, int256 value);\\n\\n    function getTotalLendingSupply(uint256 _maturity) public view returns (uint256) {\\n        return Storage.slot().totalLendingSupply[_maturity];\\n    }\\n\\n    function getTotalBorrowingSupply(uint256 _maturity) public view returns (uint256) {\\n        return Storage.slot().totalBorrowingSupply[_maturity];\\n    }\\n\\n    function getFutureValue(address account) public view returns (int256, uint256) {\\n        return (Storage.slot().balances[account], Storage.slot().futureValueMaturities[account]);\\n    }\\n\\n    function hasFutureValueInPastMaturity(address account, uint256 maturity)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        if (Storage.slot().futureValueMaturities[account] == maturity) {\\n            return false;\\n        } else {\\n            return Storage.slot().balances[account] != 0;\\n        }\\n    }\\n\\n    function _addFutureValue(\\n        address lender,\\n        address borrower,\\n        uint256 amount,\\n        uint256 maturity\\n    ) internal returns (bool) {\\n        require(lender != borrower, \\\"borrower and lender are the same\\\");\\n        require(lender != address(0), \\\"add to the zero address of lender\\\");\\n        require(borrower != address(0), \\\"add to the zero address of borrower\\\");\\n        require(\\n            !hasFutureValueInPastMaturity(lender, maturity),\\n            \\\"lender has the future value in past maturity\\\"\\n        );\\n        require(\\n            !hasFutureValueInPastMaturity(borrower, maturity),\\n            \\\"borrower has the future value in past maturity\\\"\\n        );\\n\\n        Storage.slot().futureValueMaturities[lender] = maturity;\\n        Storage.slot().futureValueMaturities[borrower] = maturity;\\n\\n        Storage.slot().totalLendingSupply[maturity] += amount;\\n        Storage.slot().totalBorrowingSupply[maturity] += amount;\\n\\n        Storage.slot().balances[lender] += int256(amount);\\n        Storage.slot().balances[borrower] -= int256(amount);\\n\\n        emit Transfer(address(0), lender, int256(amount));\\n        emit Transfer(address(0), borrower, -int256(amount));\\n        return true;\\n    }\\n\\n    function _removeFutureValue(address account) internal returns (int256, uint256) {\\n        int256 balance = Storage.slot().balances[account];\\n        uint256 maturity = Storage.slot().futureValueMaturities[account];\\n\\n        if (balance >= 0) {\\n            Storage.slot().totalLendingSupply[maturity] -= uint256(balance);\\n        } else {\\n            Storage.slot().totalBorrowingSupply[maturity] -= uint256(-balance);\\n        }\\n\\n        Storage.slot().balances[account] = 0;\\n\\n        emit Transfer(account, address(0), balance);\\n\\n        return (balance, maturity);\\n    }\\n}\\n\",\"keccak256\":\"0xa88bc721e4dacd68fed0321aa5a03966911d2c75c6539c193badec57c53d31c8\",\"license\":\"MIT\"},\"contracts/storages/FutureValueStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary FutureValueStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.futureValue\\\");\\n\\n    struct Storage {\\n        uint256 maturity;\\n        // Mapping from user to balances\\n        mapping(address => int256) balances;\\n        // Mapping from user to maturity\\n        mapping(address => uint256) futureValueMaturities;\\n        // Mapping from maturity to total amount supplied of lending\\n        mapping(uint256 => uint256) totalLendingSupply;\\n        // Mapping from maturity to total amount supplied of borrowing\\n        mapping(uint256 => uint256) totalBorrowingSupply;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcc5a0e5112603b987b4392dce8368a2db9a0c42b522f3c0931e226c5b9ab9b10\",\"license\":\"MIT\"},\"contracts/storages/LendingMarketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport \\\"../libraries/HitchensOrderStatisticsTreeLib.sol\\\";\\n\\nstruct MarketOrder {\\n    ProtocolTypes.Side side;\\n    uint256 amount;\\n    uint256 rate; // in basis points\\n    address maker;\\n    uint256 maturity;\\n}\\n\\nlibrary LendingMarketStorage {\\n    using HitchensOrderStatisticsTreeLib for HitchensOrderStatisticsTreeLib.Tree;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarket\\\");\\n\\n    struct Storage {\\n        uint256 lastOrderId;\\n        bytes32 ccy;\\n        uint256 basisDate;\\n        uint256 maturity;\\n        // Mapping from maturity to rate\\n        mapping(uint256 => MarketOrder) orders;\\n        // Mapping from maturity to lending orders\\n        mapping(uint256 => HitchensOrderStatisticsTreeLib.Tree) lendOrders;\\n        // Mapping from maturity to borrowing orders\\n        mapping(uint256 => HitchensOrderStatisticsTreeLib.Tree) borrowOrders;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc9f3148c54efaed06c75e96c00dce949c7cce4ac610295035140553a9680d75d\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant BP = 10000; // basis point\\n    uint256 public constant PCT = 10000; // percentage point in basis\\n    uint256 public constant PENALTYLEVEL = 1000; // 10% settlement failure penalty\\n    uint256 public constant MKTMAKELEVEL = 2000; // 20% for market making\\n\\n    uint256 internal constant DAYS_IN_YEAR = 365;\\n    uint256 internal constant SECONDS_IN_YEAR = 31557600;\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n\\n    struct Currency {\\n        bool isSupported;\\n        string name;\\n        uint16 chainId; // chain id for address conversion\\n    }\\n}\\n\",\"keccak256\":\"0x861d92708d6610f9e3378b4cfb3475c4c780df5b5ba3d23e1736bfe4267876f5\",\"license\":\"MIT\"},\"contracts/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0xe59cd60631c7c754ed6b77caa6f3a06301ef0df07881a3dcfa85124abc1890b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "LendingMarket contract is the module that allows lending market participants to create/cancel market orders. It will store market orders in structured red-black tree and doubly linked list in each node.",
    "kind": "dev",
    "methods": {
      "acceptedContracts()": {
        "details": "Returns contract names that can call this contract."
      },
      "cancelOrder(address,uint256)": {
        "details": "Cancels the market order.",
        "params": {
          "_orderId": "Market order id Requirements: - Order has to be cancelable by market maker",
          "_user": "User address"
        }
      },
      "createOrder(uint8,address,uint256,uint256)": {
        "details": "Executes the market order, if order matched it takes order, if not matched places new order.",
        "params": {
          "_amount": "Amount of funds maker/taker wish to borrow/lend",
          "_rate": "Amount of interest rate maker/taker wish to borrow/lend Returns true after successful execution",
          "_side": "Market order side it can be borrow or lend",
          "_user": "User address"
        }
      },
      "futureValueOf(address)": {
        "details": "Gets the future value in the latest maturity the user has. If the market is rotated, the future value maturity is addressed as the old one and return 0 here.",
        "params": {
          "_user": "User address"
        }
      },
      "getBorrowRate()": {
        "details": "Gets the highest borrow rate."
      },
      "getCurrency()": {
        "details": "Gets the market currency."
      },
      "getLendRate()": {
        "details": "Gets the highest lend rate."
      },
      "getMaker(uint256)": {
        "details": "Gets the order maker address.",
        "params": {
          "_orderId": "Market order id"
        }
      },
      "getMarket()": {
        "details": "Gets the market data."
      },
      "getMaturity()": {
        "details": "Gets the market maturity."
      },
      "getMidRate()": {
        "details": "Gets mid rate."
      },
      "getOrder(uint256)": {
        "details": "Gets the market order information.",
        "params": {
          "_orderId": "Market order id"
        }
      },
      "initialize(address,bytes32,uint256,uint256)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController",
        "params": {
          "_ccy": "The main currency for order book lending deals",
          "_maturity": "The initial maturity of the market",
          "_resolver": "The address of the Address Resolver contract"
        }
      },
      "isMatured()": {
        "details": "Gets if the market is matured."
      },
      "isOpened()": {
        "details": "Gets if the market is opened."
      },
      "matchOrders(uint8,uint256,uint256)": {
        "details": "Gets the matching market order.",
        "params": {
          "_amount": "Amount of funds taker wish to borrow/lend",
          "_rate": "Amount of interest rate taker wish to borrow/lend Returns zero if didn't find a matched order, reverts if no orders for specified interest rate",
          "_side": "Market order side it can be borrow or lend"
        }
      },
      "pauseMarket()": {
        "details": "Pauses the lending market."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "presentValueOf(address)": {
        "details": "Gets the future value calculated from the future value & market rate.",
        "params": {
          "_user": "User address"
        }
      },
      "removeFutureValueInPastMaturity(address)": {
        "details": "Remove future value if there is balance in the past maturity.",
        "params": {
          "_user": "Target address to mint token"
        }
      },
      "requiredContracts()": {
        "details": "Returns required contract names in this contract"
      },
      "unpauseMarket()": {
        "details": "Pauses the lending market."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address,bytes32,uint256,uint256)": {
        "notice": "Initializes the contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15145,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "resolver",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAddressResolver)8505"
      },
      {
        "astId": 15149,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "addressCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 952,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 790,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "_initialized",
        "offset": 1,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 793,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "_initializing",
        "offset": 2,
        "slot": "2",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAddressResolver)8505": {
        "encoding": "inplace",
        "label": "contract IAddressResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}