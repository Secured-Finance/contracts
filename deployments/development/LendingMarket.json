{
  "address": "0xEBB5c67D614192E3f11F482133dCe47bD1865dc7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_circuitBreakerLimitRange",
          "type": "uint256"
        }
      ],
      "name": "calculateFilledAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "filledAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "filledAmountInFV",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "_orderId",
          "type": "uint48"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "cleanUpOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeLendOrderCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "activeBorrowOrderCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "removedLendOrderFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "removedBorrowOrderFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "removedLendOrderAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "removedBorrowOrderAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_openingDate",
          "type": "uint256"
        }
      ],
      "name": "createOrderBook",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "orderBookId",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "executeItayoseCall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "openingUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalOffsetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openingDate",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint48",
              "name": "orderId",
              "type": "uint48"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "futureValue",
              "type": "uint256"
            }
          ],
          "internalType": "struct PartiallyFilledOrder",
          "name": "partiallyFilledLendingOrder",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint48",
              "name": "orderId",
              "type": "uint48"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "futureValue",
              "type": "uint256"
            }
          ],
          "internalType": "struct PartiallyFilledOrder",
          "name": "partiallyFilledBorrowingOrder",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_circuitBreakerLimitRange",
          "type": "uint256"
        }
      ],
      "name": "executeOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "futureValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ignoredAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct FilledOrder",
          "name": "filledOrder",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint48",
              "name": "orderId",
              "type": "uint48"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "futureValue",
              "type": "uint256"
            }
          ],
          "internalType": "struct PartiallyFilledOrder",
          "name": "partiallyFilledOrder",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        }
      ],
      "name": "executePreOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "getBestBorrowUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "_orderBookIds",
          "type": "uint8[]"
        }
      ],
      "name": "getBestBorrowUnitPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "getBestLendUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "_orderBookIds",
          "type": "uint8[]"
        }
      ],
      "name": "getBestLendUnitPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getBorrowOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getBorrowOrderIds",
      "outputs": [
        {
          "internalType": "uint48[]",
          "name": "activeOrderIds",
          "type": "uint48[]"
        },
        {
          "internalType": "uint48[]",
          "name": "inActiveOrderIds",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_circuitBreakerLimitRange",
          "type": "uint256"
        }
      ],
      "name": "getCircuitBreakerThresholds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxLendUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBorrowUnitPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrency",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "currency",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getItayoseLog",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "openingUnitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastLendUnitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastBorrowUnitPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct ItayoseLog",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getLendOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLendOrderIds",
      "outputs": [
        {
          "internalType": "uint48[]",
          "name": "activeOrderIds",
          "type": "uint48[]"
        },
        {
          "internalType": "uint48[]",
          "name": "inActiveOrderIds",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "_orderBookIds",
          "type": "uint8[]"
        }
      ],
      "name": "getMaturities",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "maturities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "getMaturity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "getMidUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "_orderBookIds",
          "type": "uint8[]"
        }
      ],
      "name": "getMidUnitPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "getOpeningDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "openingDate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "uint48",
          "name": "_orderId",
          "type": "uint48"
        }
      ],
      "name": "getOrder",
      "outputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPreOrder",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "getOrderBookDetail",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "ccy",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "maturity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowUnitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lendUnitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "midUnitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openingUnitPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isReady",
              "type": "bool"
            }
          ],
          "internalType": "struct ILendingMarket.OrderBook",
          "name": "market",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalAmountFromBorrowOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalAmountFromLendOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "isItayosePeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "isMatured",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "isOpened",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "isPreOrderPeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "isReady",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_newMaturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_openingDate",
          "type": "uint256"
        }
      ],
      "name": "reopenOrderBook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_futureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_circuitBreakerLimitRange",
          "type": "uint256"
        }
      ],
      "name": "unwindPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "futureValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ignoredAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct FilledOrder",
          "name": "filledOrder",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint48",
              "name": "orderId",
              "type": "uint48"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "futureValue",
              "type": "uint256"
            }
          ],
          "internalType": "struct PartiallyFilledOrder",
          "name": "partiallyFilledOrder",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8246dd7318084ba28e5634bee530273107a90a8b3ca521d40036b829f072237a",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0xEBB5c67D614192E3f11F482133dCe47bD1865dc7",
    "transactionIndex": 11,
    "gasUsed": "2768674",
    "logsBloom": "0x
    "blockHash": "0x68257b22a6fac2d359b43e6f6e06f667e6c6b29174e7c2659149a9bc889368ce",
    "transactionHash": "0x8246dd7318084ba28e5634bee530273107a90a8b3ca521d40036b829f072237a",
    "logs": [],
    "blockNumber": 4053449,
    "cumulativeGasUsed": "6869606",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7fb7821dadc9424227984a913e6112e9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_circuitBreakerLimitRange\",\"type\":\"uint256\"}],\"name\":\"calculateFilledAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"filledAmountInFV\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_orderId\",\"type\":\"uint48\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"cleanUpOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeLendOrderCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeBorrowOrderCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removedLendOrderFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removedBorrowOrderFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removedLendOrderAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removedBorrowOrderAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_openingDate\",\"type\":\"uint256\"}],\"name\":\"createOrderBook\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"orderBookId\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"executeItayoseCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"openingUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOffsetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openingDate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"orderId\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureValue\",\"type\":\"uint256\"}],\"internalType\":\"struct PartiallyFilledOrder\",\"name\":\"partiallyFilledLendingOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"orderId\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureValue\",\"type\":\"uint256\"}],\"internalType\":\"struct PartiallyFilledOrder\",\"name\":\"partiallyFilledBorrowingOrder\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_circuitBreakerLimitRange\",\"type\":\"uint256\"}],\"name\":\"executeOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ignoredAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct FilledOrder\",\"name\":\"filledOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"orderId\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureValue\",\"type\":\"uint256\"}],\"internalType\":\"struct PartiallyFilledOrder\",\"name\":\"partiallyFilledOrder\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"executePreOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"getBestBorrowUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_orderBookIds\",\"type\":\"uint8[]\"}],\"name\":\"getBestBorrowUnitPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"getBestLendUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_orderBookIds\",\"type\":\"uint8[]\"}],\"name\":\"getBestLendUnitPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getBorrowOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBorrowOrderIds\",\"outputs\":[{\"internalType\":\"uint48[]\",\"name\":\"activeOrderIds\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48[]\",\"name\":\"inActiveOrderIds\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_circuitBreakerLimitRange\",\"type\":\"uint256\"}],\"name\":\"getCircuitBreakerThresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLendUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBorrowUnitPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrency\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getItayoseLog\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"openingUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastLendUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBorrowUnitPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ItayoseLog\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getLendOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLendOrderIds\",\"outputs\":[{\"internalType\":\"uint48[]\",\"name\":\"activeOrderIds\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48[]\",\"name\":\"inActiveOrderIds\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_orderBookIds\",\"type\":\"uint8[]\"}],\"name\":\"getMaturities\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"maturities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"getMaturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"getMidUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_orderBookIds\",\"type\":\"uint8[]\"}],\"name\":\"getMidUnitPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"getOpeningDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"openingDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"uint48\",\"name\":\"_orderId\",\"type\":\"uint48\"}],\"name\":\"getOrder\",\"outputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPreOrder\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"getOrderBookDetail\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"midUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openingUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReady\",\"type\":\"bool\"}],\"internalType\":\"struct ILendingMarket.OrderBook\",\"name\":\"market\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalAmountFromBorrowOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalAmountFromLendOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"isItayosePeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"isMatured\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"isOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"isPreOrderPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"isReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_newMaturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_openingDate\",\"type\":\"uint256\"}],\"name\":\"reopenOrderBook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_futureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_circuitBreakerLimitRange\",\"type\":\"uint256\"}],\"name\":\"unwindPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ignoredAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct FilledOrder\",\"name\":\"filledOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"orderId\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureValue\",\"type\":\"uint256\"}],\"internalType\":\"struct PartiallyFilledOrder\",\"name\":\"partiallyFilledOrder\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The market orders is stored in structured red-black trees and doubly linked lists in each node.\",\"kind\":\"dev\",\"methods\":{\"acceptedContracts()\":{\"details\":\"The contact name listed in this method is also needed to be listed `requiredContracts` method.\"},\"calculateFilledAmount(uint8,uint8,uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of funds the user wants to borrow/lend\",\"_circuitBreakerLimitRange\":\"Rate limit range for the circuit breaker\",\"_orderBookId\":\"The order book id\",\"_side\":\"Order position type, Borrow or Lend\",\"_unitPrice\":\"Unit price user want to borrow/lend\"},\"returns\":{\"filledAmount\":\"The amount that is filled on the order book\",\"filledAmountInFV\":\"The amount in the future value that is filled on the order book\",\"lastUnitPrice\":\"The last unit price that is filled on the order book\"}},\"cancelOrder(uint8,address,uint48)\":{\"params\":{\"_orderBookId\":\"The order book id\",\"_orderId\":\"Market order id\",\"_user\":\"User address\"}},\"cleanUpOrders(uint8,address)\":{\"details\":\"The order list per user is not updated in real-time when an order is filled. This function removes the filled order from that order list per user to reduce gas costs for lazy evaluation if the collateral is enough or not.\",\"params\":{\"_user\":\"User address\"},\"returns\":{\"activeBorrowOrderCount\":\"The total amount of active borrow order on the order book\",\"activeLendOrderCount\":\"The total amount of active lend order on the order book\",\"maturity\":\"The maturity of the removed orders\",\"removedBorrowOrderAmount\":\"The total PV amount of the removed borrow order amount from the order book\",\"removedBorrowOrderFutureValue\":\"The total FV amount of the removed borrow order amount from the order book\",\"removedLendOrderAmount\":\"The total PV amount of the removed lend order amount from the order book\",\"removedLendOrderFutureValue\":\"The total FV amount of the removed lend order amount from the order book\"}},\"createOrderBook(uint256,uint256)\":{\"params\":{\"_maturity\":\"The initial maturity of the market\",\"_openingDate\":\"The timestamp when the market opens\"}},\"executeItayoseCall(uint8)\":{\"details\":\"If the opening date had already passed when this contract was created, this Itayose need not be executed.\",\"params\":{\"_orderBookId\":\"The order book id\"},\"returns\":{\"openingDate\":\"The timestamp when the market opens\",\"openingUnitPrice\":\"The opening price when Itayose is executed\",\"partiallyFilledBorrowingOrder\":\"Partially filled borrowing order on the order book\",\"partiallyFilledLendingOrder\":\"Partially filled lending order on the order book\",\"totalOffsetAmount\":\"The total filled amount when Itayose is executed\"}},\"executeOrder(uint8,uint8,address,uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of funds the user wants to borrow/lend\",\"_circuitBreakerLimitRange\":\"Rate limit range for the circuit breaker\",\"_orderBookId\":\"The order book id\",\"_side\":\"Order position type, Borrow or Lend\",\"_unitPrice\":\"Unit price user wish to borrow/lend\",\"_user\":\"User's address\"},\"returns\":{\"filledOrder\":\"User's Filled order of the user\",\"partiallyFilledOrder\":\"Partially filled order on the order book\"}},\"executePreOrder(uint8,uint8,address,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of funds the maker wants to borrow/lend\",\"_orderBookId\":\"The order book id\",\"_side\":\"Order position type, Borrow or Lend\",\"_unitPrice\":\"Unit price taker wish to borrow/lend\"}},\"getBestBorrowUnitPrice(uint8)\":{\"params\":{\"_orderBookId\":\"The order book id\"},\"returns\":{\"_0\":\"The best price for borrowing\"}},\"getBestBorrowUnitPrices(uint8[])\":{\"returns\":{\"_0\":\"The array of the best price for borrowing\"}},\"getBestLendUnitPrice(uint8)\":{\"params\":{\"_orderBookId\":\"The order book id\"},\"returns\":{\"_0\":\"The best price for lending\"}},\"getBestLendUnitPrices(uint8[])\":{\"returns\":{\"_0\":\"The array of the best price for lending\"}},\"getBorrowOrderBook(uint8,uint256)\":{\"params\":{\"_limit\":\"Max limit to get unit prices\",\"_orderBookId\":\"The order book id\"},\"returns\":{\"unitPrices\":\"The array of borrow unit prices\"}},\"getBorrowOrderIds(uint8,address)\":{\"params\":{\"_orderBookId\":\"The order book id\",\"_user\":\"User's address\"}},\"getCircuitBreakerThresholds(uint8,uint256)\":{\"params\":{\"_circuitBreakerLimitRange\":\"Rate limit range for the circuit breaker\",\"_orderBookId\":\"The order book id\"},\"returns\":{\"maxLendUnitPrice\":\"The maximum unit price for lending\",\"minBorrowUnitPrice\":\"The minimum unit price for borrowing\"}},\"getCurrency()\":{\"returns\":{\"currency\":\"The market currency\"}},\"getItayoseLog(uint256)\":{\"params\":{\"_maturity\":\"The market maturity\"},\"returns\":{\"_0\":\"ItayoseLog of the market\"}},\"getLendOrderBook(uint8,uint256)\":{\"params\":{\"_limit\":\"Max limit to get unit prices\",\"_orderBookId\":\"The order book id\"},\"returns\":{\"unitPrices\":\"The array of lending unit prices\"}},\"getLendOrderIds(uint8,address)\":{\"params\":{\"_orderBookId\":\"The order book id\",\"_user\":\"User's address\"}},\"getMaturities(uint8[])\":{\"returns\":{\"maturities\":\"The array of maturity\"}},\"getMaturity(uint8)\":{\"params\":{\"_orderBookId\":\"The order book id\"},\"returns\":{\"maturity\":\"The market maturity\"}},\"getMidUnitPrice(uint8)\":{\"params\":{\"_orderBookId\":\"The order book id\"},\"returns\":{\"_0\":\"The mid price per future value\"}},\"getMidUnitPrices(uint8[])\":{\"returns\":{\"_0\":\"The array of the the price per future value\"}},\"getOpeningDate(uint8)\":{\"params\":{\"_orderBookId\":\"The order book id\"},\"returns\":{\"openingDate\":\"The market opening date\"}},\"getOrder(uint8,uint48)\":{\"params\":{\"_orderBookId\":\"The order book id\",\"_orderId\":\"The market order id\"},\"returns\":{\"amount\":\"Order amount\",\"isPreOrder\":\"The boolean if the order is a pre-order.\",\"maker\":\"The order maker\",\"maturity\":\"The maturity of the selected order\",\"side\":\"Order position type, Borrow or Lend\",\"timestamp\":\"Timestamp when the order was created\",\"unitPrice\":\"Amount of interest unit price\"}},\"getOrderBookDetail(uint8)\":{\"params\":{\"_orderBookId\":\"The order book id\"},\"returns\":{\"market\":\"The market data\"}},\"getTotalAmountFromBorrowOrders(uint8,address)\":{\"params\":{\"_orderBookId\":\"The order book id\",\"_user\":\"User's address\"},\"returns\":{\"activeAmount\":\"The total amount of active order on the order book\",\"inactiveAmount\":\"The total amount of inactive orders filled on the order book\",\"inactiveFutureValue\":\"The total future value amount of inactive orders filled on the order book\",\"maturity\":\"The maturity of market that orders were placed.\"}},\"getTotalAmountFromLendOrders(uint8,address)\":{\"params\":{\"_orderBookId\":\"The order book id\",\"_user\":\"User's address\"},\"returns\":{\"activeAmount\":\"The total amount of active order on the order book\",\"inactiveAmount\":\"The total amount of inactive orders filled on the order book\",\"inactiveFutureValue\":\"The total future value amount of inactive orders filled on the order book\",\"maturity\":\"The maturity of market that orders were placed.\"}},\"initialize(address,bytes32)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController.\",\"params\":{\"_ccy\":\"The main currency for the order book\",\"_resolver\":\"The address of the Address Resolver contract\"}},\"isItayosePeriod(uint8)\":{\"params\":{\"_orderBookId\":\"The order book id\"},\"returns\":{\"_0\":\"The boolean if the market is under the Itayose period.\"}},\"isMatured(uint8)\":{\"params\":{\"_orderBookId\":\"The order book id\"},\"returns\":{\"_0\":\"The boolean if the market is matured or not\"}},\"isOpened(uint8)\":{\"params\":{\"_orderBookId\":\"The order book id\"},\"returns\":{\"_0\":\"The boolean if the market is opened or not\"}},\"isPreOrderPeriod(uint8)\":{\"params\":{\"_orderBookId\":\"The order book id\"},\"returns\":{\"_0\":\"The boolean if the market is under the pre-order period.\"}},\"isReady(uint8)\":{\"params\":{\"_orderBookId\":\"The order book id\"},\"returns\":{\"_0\":\"The boolean if the market is ready or not\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"requiredContracts()\":{\"details\":\"The contract name list is in `./libraries/Contracts.sol`.\"},\"unwindPosition(uint8,uint8,address,uint256,uint256)\":{\"params\":{\"_circuitBreakerLimitRange\":\"Rate limit range for the circuit breaker\",\"_futureValue\":\"Amount of future value unwound\",\"_orderBookId\":\"The order book id\",\"_side\":\"Order position type, Borrow or Lend\",\"_user\":\"User's address\"},\"returns\":{\"filledOrder\":\"User's Filled order of the user\",\"partiallyFilledOrder\":\"Partially filled order\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptedContracts()\":{\"notice\":\"Returns contract names that can call this contract.\"},\"calculateFilledAmount(uint8,uint8,uint256,uint256,uint256)\":{\"notice\":\"Calculates the amount to be filled when executing an order in the order book.\"},\"cancelOrder(uint8,address,uint48)\":{\"notice\":\"Cancels the order.\"},\"cleanUpOrders(uint8,address)\":{\"notice\":\"Cleans up own orders to remove order ids that are already filled on the order book.\"},\"createOrderBook(uint256,uint256)\":{\"notice\":\"Creates a new order book.\"},\"executeItayoseCall(uint8)\":{\"notice\":\"Executes Itayose to aggregate pre-orders and determine the opening unit price. After this action, the market opens.\"},\"executeOrder(uint8,uint8,address,uint256,uint256,uint256)\":{\"notice\":\"Executes an order. Takes orders if the order is matched, and places new order if not match it.\"},\"executePreOrder(uint8,uint8,address,uint256,uint256)\":{\"notice\":\"Executes a pre-order. A pre-order will only be accepted from 168 hours (7 days) to 1 hour before the market opens (Pre-order period). At the end of this period, Itayose will be executed.\"},\"getBestBorrowUnitPrice(uint8)\":{\"notice\":\"Gets the best price for borrowing.\"},\"getBestBorrowUnitPrices(uint8[])\":{\"notice\":\"Gets the best prices for borrowing.\"},\"getBestLendUnitPrice(uint8)\":{\"notice\":\"Gets the best price for lending.\"},\"getBestLendUnitPrices(uint8[])\":{\"notice\":\"Gets the best prices for lending.\"},\"getBorrowOrderBook(uint8,uint256)\":{\"notice\":\"Gets the order book of borrow.\"},\"getBorrowOrderIds(uint8,address)\":{\"notice\":\"Gets active and inactive order IDs in the borrowing order book.\"},\"getCircuitBreakerThresholds(uint8,uint256)\":{\"notice\":\"Gets unit price Thresholds by CircuitBreaker.\"},\"getCurrency()\":{\"notice\":\"Gets the market currency.\"},\"getItayoseLog(uint256)\":{\"notice\":\"Gets the market itayose logs.\"},\"getLendOrderBook(uint8,uint256)\":{\"notice\":\"Gets the order book of lend.\"},\"getLendOrderIds(uint8,address)\":{\"notice\":\"Gets active and inactive order IDs in the lending order book.\"},\"getMaturities(uint8[])\":{\"notice\":\"Gets the order book maturities.\"},\"getMaturity(uint8)\":{\"notice\":\"Gets the current market maturity.\"},\"getMidUnitPrice(uint8)\":{\"notice\":\"Gets the mid price per future value.\"},\"getMidUnitPrices(uint8[])\":{\"notice\":\"Gets the the prices per future value.\"},\"getOpeningDate(uint8)\":{\"notice\":\"Gets the market opening date.\"},\"getOrder(uint8,uint48)\":{\"notice\":\"Gets the market order from the order book.\"},\"getOrderBookDetail(uint8)\":{\"notice\":\"Gets the order book data.\"},\"getTotalAmountFromBorrowOrders(uint8,address)\":{\"notice\":\"Calculates and gets the active and inactive amounts from the user orders of borrowing deals.\"},\"getTotalAmountFromLendOrders(uint8,address)\":{\"notice\":\"Calculates and gets the active and inactive amounts from the user orders of lending deals.\"},\"initialize(address,bytes32)\":{\"notice\":\"Initializes the contract.\"},\"isItayosePeriod(uint8)\":{\"notice\":\"Gets if the market is under the Itayose period.\"},\"isMatured(uint8)\":{\"notice\":\"Gets if the market is matured.\"},\"isOpened(uint8)\":{\"notice\":\"Gets if the market is opened.\"},\"isPreOrderPeriod(uint8)\":{\"notice\":\"Gets if the market is under the pre-order period.\"},\"isReady(uint8)\":{\"notice\":\"Gets if the market is ready.\"},\"pauseMarket()\":{\"notice\":\"Pauses the lending market.\"},\"requiredContracts()\":{\"notice\":\"Returns the contract names used in this contract.\"},\"unpauseMarket()\":{\"notice\":\"Unpauses the lending market.\"},\"unwindPosition(uint8,uint8,address,uint256,uint256)\":{\"notice\":\"Unwinds lending or borrowing positions by a specified future value amount.\"}},\"notice\":\"Implements the module that allows lending market participants to create/cancel market orders, and also provides a future value calculation module. For updates, this contract is basically called from `LendingMarketController.sol`instead of being called \\\\ directly by the user.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/LendingMarket.sol\":\"LendingMarket\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dependencies/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Chainlink Contracts v0.4.0 (v0.8/interfaces/AggregatorV3Interface.sol)\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x81b0c18c07c8c031d5b34e4e41d2451b836355aad1b3c04c26578c92f73585f9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) ||\\n                (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(\\n            !_initializing && _initialized < version,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x47b358037bd02d2d68ae2f5685cf1f30af9d60de496258849b69a751a2ffdcde\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x21dc48f54af2ac9288ae3be6feb098ce4389a9392e52aa7056fab5f8b5a5e232\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/protocol/LendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// interfaces\\nimport {ILendingMarket} from \\\"./interfaces/ILendingMarket.sol\\\";\\n// libraries\\nimport {Contracts} from \\\"./libraries/Contracts.sol\\\";\\nimport {OrderActionLogic} from \\\"./libraries/logics/OrderActionLogic.sol\\\";\\nimport {OrderBookLogic} from \\\"./libraries/logics/OrderBookLogic.sol\\\";\\nimport {OrderReaderLogic} from \\\"./libraries/logics/OrderReaderLogic.sol\\\";\\nimport {RoundingUint256} from \\\"./libraries/math/RoundingUint256.sol\\\";\\nimport {FilledOrder, PartiallyFilledOrder} from \\\"./libraries/OrderBookLib.sol\\\";\\n// mixins\\nimport {MixinAddressResolver} from \\\"./mixins/MixinAddressResolver.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"./types/ProtocolTypes.sol\\\";\\n// utils\\nimport {Pausable} from \\\"./utils/Pausable.sol\\\";\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\n// storages\\nimport {LendingMarketStorage as Storage, ItayoseLog} from \\\"./storages/LendingMarketStorage.sol\\\";\\n\\n/**\\n * @notice Implements the module that allows lending market participants to create/cancel market orders,\\n * and also provides a future value calculation module.\\n *\\n * For updates, this contract is basically called from `LendingMarketController.sol`instead of being called \\\\\\n * directly by the user.\\n *\\n * @dev The market orders is stored in structured red-black trees and doubly linked lists in each node.\\n */\\ncontract LendingMarket is ILendingMarket, MixinAddressResolver, Pausable, Proxyable {\\n    using RoundingUint256 for uint256;\\n\\n    uint256 private constant PRE_ORDER_PERIOD = 7 days;\\n    uint256 private constant ITAYOSE_PERIOD = 1 hours;\\n\\n    /**\\n     * @notice Modifier to make a function callable only by order maker.\\n     * @param _orderBookId The order book id\\n     * @param _user User's address\\n     * @param _orderId Market order id\\n     */\\n    modifier onlyMaker(\\n        uint8 _orderBookId,\\n        address _user,\\n        uint48 _orderId\\n    ) {\\n        (, , , address maker, , , ) = getOrder(_orderBookId, _orderId);\\n        require(maker != address(0), \\\"Order not found\\\");\\n        require(_user == maker, \\\"Caller is not the maker\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to check if the market is opened.\\n     * @param _orderBookId The order book id\\n     */\\n    modifier ifOpened(uint8 _orderBookId) {\\n        require(isOpened(_orderBookId), \\\"Market is not opened\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to check if the market is under the Itayose period.\\n     * @param _orderBookId The order book id\\n     */\\n    modifier ifItayosePeriod(uint8 _orderBookId) {\\n        require(isItayosePeriod(_orderBookId), \\\"Not in the Itayose period\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to check if the market is under the pre-order period.\\n     * @param _orderBookId The order book id\\n     */\\n    modifier ifPreOrderPeriod(uint8 _orderBookId) {\\n        require(isPreOrderPeriod(_orderBookId), \\\"Not in the pre-order period\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\\n     * @param _resolver The address of the Address Resolver contract\\n     * @param _ccy The main currency for the order book\\n     */\\n    function initialize(address _resolver, bytes32 _ccy) public initializer onlyBeacon {\\n        registerAddressResolver(_resolver);\\n        Storage.slot().ccy = _ccy;\\n\\n        buildCache();\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](1);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](1);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n    }\\n\\n    /**\\n     * @notice Gets the order book data.\\n     * @param _orderBookId The order book id\\n     * @return market The market data\\n     */\\n    function getOrderBookDetail(uint8 _orderBookId)\\n        public\\n        view\\n        override\\n        returns (OrderBook memory market)\\n    {\\n        (\\n            market.ccy,\\n            market.maturity,\\n            market.openingDate,\\n            market.borrowUnitPrice,\\n            market.lendUnitPrice,\\n            market.midUnitPrice,\\n            market.openingUnitPrice,\\n            market.isReady\\n        ) = OrderBookLogic.getOrderBookDetail(_orderBookId);\\n    }\\n\\n    /**\\n     * @notice Gets unit price Thresholds by CircuitBreaker.\\n     * @param _orderBookId The order book id\\n     * @param _circuitBreakerLimitRange Rate limit range for the circuit breaker\\n     * @return maxLendUnitPrice The maximum unit price for lending\\n     * @return minBorrowUnitPrice The minimum unit price for borrowing\\n     */\\n    function getCircuitBreakerThresholds(uint8 _orderBookId, uint256 _circuitBreakerLimitRange)\\n        external\\n        view\\n        override\\n        returns (uint256 maxLendUnitPrice, uint256 minBorrowUnitPrice)\\n    {\\n        return OrderBookLogic.getCircuitBreakerThresholds(_orderBookId, _circuitBreakerLimitRange);\\n    }\\n\\n    /**\\n     * @notice Gets the best price for lending.\\n     * @param _orderBookId The order book id\\n     * @return The best price for lending\\n     */\\n    function getBestLendUnitPrice(uint8 _orderBookId) public view override returns (uint256) {\\n        return OrderBookLogic.getBestLendUnitPrice(_orderBookId);\\n    }\\n\\n    /**\\n     * @notice Gets the best prices for lending.\\n     * @return The array of the best price for lending\\n     */\\n    function getBestLendUnitPrices(uint8[] memory _orderBookIds)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return OrderBookLogic.getBestLendUnitPrices(_orderBookIds);\\n    }\\n\\n    /**\\n     * @notice Gets the best price for borrowing.\\n     * @param _orderBookId The order book id\\n     * @return The best price for borrowing\\n     */\\n    function getBestBorrowUnitPrice(uint8 _orderBookId) public view override returns (uint256) {\\n        return OrderBookLogic.getBestBorrowUnitPrice(_orderBookId);\\n    }\\n\\n    /**\\n     * @notice Gets the best prices for borrowing.\\n     * @return The array of the best price for borrowing\\n     */\\n    function getBestBorrowUnitPrices(uint8[] memory _orderBookIds)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return OrderBookLogic.getBestBorrowUnitPrices(_orderBookIds);\\n    }\\n\\n    /**\\n     * @notice Gets the mid price per future value.\\n     * @param _orderBookId The order book id\\n     * @return The mid price per future value\\n     */\\n    function getMidUnitPrice(uint8 _orderBookId) public view override returns (uint256) {\\n        return OrderBookLogic.getMidUnitPrice(_orderBookId);\\n    }\\n\\n    /**\\n     * @notice Gets the the prices per future value.\\n     * @return The array of the the price per future value\\n     */\\n    function getMidUnitPrices(uint8[] memory _orderBookIds)\\n        public\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return OrderBookLogic.getMidUnitPrices(_orderBookIds);\\n    }\\n\\n    /**\\n     * @notice Gets the order book of borrow.\\n     * @param _orderBookId The order book id\\n     * @param _limit Max limit to get unit prices\\n     * @return unitPrices The array of borrow unit prices\\n     */\\n    function getBorrowOrderBook(uint8 _orderBookId, uint256 _limit)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        return OrderBookLogic.getBorrowOrderBook(_orderBookId, _limit);\\n    }\\n\\n    /**\\n     * @notice Gets the order book of lend.\\n     * @param _orderBookId The order book id\\n     * @param _limit Max limit to get unit prices\\n     * @return unitPrices The array of lending unit prices\\n     */\\n    function getLendOrderBook(uint8 _orderBookId, uint256 _limit)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        return OrderBookLogic.getLendOrderBook(_orderBookId, _limit);\\n    }\\n\\n    /**\\n     * @notice Gets the current market maturity.\\n     * @param _orderBookId The order book id\\n     * @return maturity The market maturity\\n     */\\n    function getMaturity(uint8 _orderBookId) public view override returns (uint256 maturity) {\\n        return Storage.slot().orderBooks[_orderBookId].maturity;\\n    }\\n\\n    /**\\n     * @notice Gets the order book maturities.\\n     * @return maturities The array of maturity\\n     */\\n    function getMaturities(uint8[] memory _orderBookIds)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory maturities)\\n    {\\n        return OrderBookLogic.getMaturities(_orderBookIds);\\n    }\\n\\n    /**\\n     * @notice Gets the market currency.\\n     * @return currency The market currency\\n     */\\n    function getCurrency() external view override returns (bytes32 currency) {\\n        return Storage.slot().ccy;\\n    }\\n\\n    /**\\n     * @notice Gets the market opening date.\\n     * @param _orderBookId The order book id\\n     * @return openingDate The market opening date\\n     */\\n    function getOpeningDate(uint8 _orderBookId) public view override returns (uint256 openingDate) {\\n        return Storage.slot().orderBooks[_orderBookId].openingDate;\\n    }\\n\\n    /**\\n     * @notice Gets if the market is ready.\\n     * @param _orderBookId The order book id\\n     * @return The boolean if the market is ready or not\\n     */\\n    function isReady(uint8 _orderBookId) public view override returns (bool) {\\n        return Storage.slot().isReady[getMaturity(_orderBookId)];\\n    }\\n\\n    /**\\n     * @notice Gets if the market is matured.\\n     * @param _orderBookId The order book id\\n     * @return The boolean if the market is matured or not\\n     */\\n    function isMatured(uint8 _orderBookId) public view override returns (bool) {\\n        return OrderReaderLogic.isMatured(_orderBookId);\\n    }\\n\\n    /**\\n     * @notice Gets if the market is opened.\\n     * @param _orderBookId The order book id\\n     * @return The boolean if the market is opened or not\\n     */\\n    function isOpened(uint8 _orderBookId) public view override returns (bool) {\\n        return\\n            isReady(_orderBookId) &&\\n            !isMatured(_orderBookId) &&\\n            block.timestamp >= getOpeningDate(_orderBookId);\\n    }\\n\\n    /**\\n     * @notice Gets if the market is under the Itayose period.\\n     * @param _orderBookId The order book id\\n     * @return The boolean if the market is under the Itayose period.\\n     */\\n    function isItayosePeriod(uint8 _orderBookId) public view returns (bool) {\\n        return\\n            block.timestamp >= (getOpeningDate(_orderBookId) - ITAYOSE_PERIOD) &&\\n            !isReady(_orderBookId);\\n    }\\n\\n    /**\\n     * @notice Gets if the market is under the pre-order period.\\n     * @param _orderBookId The order book id\\n     * @return The boolean if the market is under the pre-order period.\\n     */\\n    function isPreOrderPeriod(uint8 _orderBookId) public view override returns (bool) {\\n        uint256 openingDate = getOpeningDate(_orderBookId);\\n        return\\n            block.timestamp >= (openingDate - PRE_ORDER_PERIOD) &&\\n            block.timestamp < (openingDate - ITAYOSE_PERIOD);\\n    }\\n\\n    /**\\n     * @notice Gets the market itayose logs.\\n     * @param _maturity The market maturity\\n     * @return ItayoseLog of the market\\n     */\\n    function getItayoseLog(uint256 _maturity) external view override returns (ItayoseLog memory) {\\n        return Storage.slot().itayoseLogs[_maturity];\\n    }\\n\\n    /**\\n     * @notice Gets the market order from the order book.\\n     * @param _orderBookId The order book id\\n     * @param _orderId The market order id\\n     * @return side Order position type, Borrow or Lend\\n     * @return unitPrice Amount of interest unit price\\n     * @return maturity The maturity of the selected order\\n     * @return maker The order maker\\n     * @return amount Order amount\\n     * @return timestamp Timestamp when the order was created\\n     * @return isPreOrder The boolean if the order is a pre-order.\\n     */\\n    function getOrder(uint8 _orderBookId, uint48 _orderId)\\n        public\\n        view\\n        override\\n        returns (\\n            ProtocolTypes.Side side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp,\\n            bool isPreOrder\\n        )\\n    {\\n        return OrderReaderLogic.getOrder(_orderBookId, _orderId);\\n    }\\n\\n    /**\\n     * @notice Calculates and gets the active and inactive amounts from the user orders of lending deals.\\n     * @param _orderBookId The order book id\\n     * @param _user User's address\\n     * @return activeAmount The total amount of active order on the order book\\n     * @return inactiveAmount The total amount of inactive orders filled on the order book\\n     * @return inactiveFutureValue The total future value amount of inactive orders filled on the order book\\n     * @return maturity The maturity of market that orders were placed.\\n     */\\n    function getTotalAmountFromLendOrders(uint8 _orderBookId, address _user)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        return OrderReaderLogic.getTotalAmountFromLendOrders(_orderBookId, _user);\\n    }\\n\\n    /**\\n     * @notice Calculates and gets the active and inactive amounts from the user orders of borrowing deals.\\n     * @param _orderBookId The order book id\\n     * @param _user User's address\\n     * @return activeAmount The total amount of active order on the order book\\n     * @return inactiveAmount The total amount of inactive orders filled on the order book\\n     * @return inactiveFutureValue The total future value amount of inactive orders filled on the order book\\n     * @return maturity The maturity of market that orders were placed.\\n     */\\n    function getTotalAmountFromBorrowOrders(uint8 _orderBookId, address _user)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        return OrderReaderLogic.getTotalAmountFromBorrowOrders(_orderBookId, _user);\\n    }\\n\\n    /**\\n     * @notice Gets active and inactive order IDs in the lending order book.\\n     * @param _orderBookId The order book id\\n     * @param _user User's address\\n     */\\n    function getLendOrderIds(uint8 _orderBookId, address _user)\\n        external\\n        view\\n        override\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        return OrderReaderLogic.getLendOrderIds(_orderBookId, _user);\\n    }\\n\\n    /**\\n     * @notice Gets active and inactive order IDs in the borrowing order book.\\n     * @param _orderBookId The order book id\\n     * @param _user User's address\\n     */\\n    function getBorrowOrderIds(uint8 _orderBookId, address _user)\\n        external\\n        view\\n        override\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        return OrderReaderLogic.getBorrowOrderIds(_orderBookId, _user);\\n    }\\n\\n    /**\\n     * @notice Calculates the amount to be filled when executing an order in the order book.\\n     * @param _orderBookId The order book id\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _amount Amount of funds the user wants to borrow/lend\\n     * @param _unitPrice Unit price user want to borrow/lend\\n     * @param _circuitBreakerLimitRange Rate limit range for the circuit breaker\\n     * @return lastUnitPrice The last unit price that is filled on the order book\\n     * @return filledAmount The amount that is filled on the order book\\n     * @return filledAmountInFV The amount in the future value that is filled on the order book\\n     */\\n    function calculateFilledAmount(\\n        uint8 _orderBookId,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice,\\n        uint256 _circuitBreakerLimitRange\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV\\n        )\\n    {\\n        return\\n            OrderReaderLogic.calculateFilledAmount(\\n                _orderBookId,\\n                _side,\\n                _amount,\\n                _unitPrice,\\n                _circuitBreakerLimitRange\\n            );\\n    }\\n\\n    /**\\n     * @notice Creates a new order book.\\n     * @param _maturity The initial maturity of the market\\n     * @param _openingDate The timestamp when the market opens\\n     */\\n    function createOrderBook(uint256 _maturity, uint256 _openingDate)\\n        external\\n        override\\n        onlyAcceptedContracts\\n        returns (uint8 orderBookId)\\n    {\\n        return OrderBookLogic.createOrderBook(_maturity, _openingDate);\\n    }\\n\\n    function reopenOrderBook(\\n        uint8 _orderBookId,\\n        uint256 _newMaturity,\\n        uint256 _openingDate\\n    ) external override onlyAcceptedContracts {\\n        OrderBookLogic.reopenOrderBook(_orderBookId, _newMaturity, _openingDate);\\n    }\\n\\n    /**\\n     * @notice Cancels the order.\\n     * @param _orderBookId The order book id\\n     * @param _user User address\\n     * @param _orderId Market order id\\n     */\\n    function cancelOrder(\\n        uint8 _orderBookId,\\n        address _user,\\n        uint48 _orderId\\n    )\\n        external\\n        override\\n        onlyMaker(_orderBookId, _user, _orderId)\\n        whenNotPaused\\n        onlyAcceptedContracts\\n    {\\n        OrderActionLogic.cancelOrder(_orderBookId, _user, _orderId);\\n    }\\n\\n    /**\\n     * @notice Cleans up own orders to remove order ids that are already filled on the order book.\\n     * @dev The order list per user is not updated in real-time when an order is filled.\\n     * This function removes the filled order from that order list per user to reduce gas costs\\n     * for lazy evaluation if the collateral is enough or not.\\n     *\\n     * @param _user User address\\n     * @return activeLendOrderCount The total amount of active lend order on the order book\\n     * @return activeBorrowOrderCount The total amount of active borrow order on the order book\\n     * @return removedLendOrderFutureValue The total FV amount of the removed lend order amount from the order book\\n     * @return removedBorrowOrderFutureValue The total FV amount of the removed borrow order amount from the order book\\n     * @return removedLendOrderAmount The total PV amount of the removed lend order amount from the order book\\n     * @return removedBorrowOrderAmount The total PV amount of the removed borrow order amount from the order book\\n     * @return maturity The maturity of the removed orders\\n     */\\n    function cleanUpOrders(uint8 _orderBookId, address _user)\\n        external\\n        override\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        )\\n    {\\n        return OrderActionLogic.cleanUpOrders(_orderBookId, _user);\\n    }\\n\\n    /**\\n     * @notice Executes an order. Takes orders if the order is matched,\\n     * and places new order if not match it.\\n     * @param _orderBookId The order book id\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _user User's address\\n     * @param _amount Amount of funds the user wants to borrow/lend\\n     * @param _unitPrice Unit price user wish to borrow/lend\\n     * @param _circuitBreakerLimitRange Rate limit range for the circuit breaker\\n     * @return filledOrder User's Filled order of the user\\n     * @return partiallyFilledOrder Partially filled order on the order book\\n     */\\n    function executeOrder(\\n        uint8 _orderBookId,\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice,\\n        uint256 _circuitBreakerLimitRange\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        onlyAcceptedContracts\\n        ifOpened(_orderBookId)\\n        returns (FilledOrder memory filledOrder, PartiallyFilledOrder memory partiallyFilledOrder)\\n    {\\n        return\\n            OrderActionLogic.executeOrder(\\n                _orderBookId,\\n                _side,\\n                _user,\\n                _amount,\\n                _unitPrice,\\n                _circuitBreakerLimitRange\\n            );\\n    }\\n\\n    /**\\n     * @notice Executes a pre-order. A pre-order will only be accepted from 168 hours (7 days) to 1 hour\\n     * before the market opens (Pre-order period). At the end of this period, Itayose will be executed.\\n     *\\n     * @param _orderBookId The order book id\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _unitPrice Unit price taker wish to borrow/lend\\n     */\\n    function executePreOrder(\\n        uint8 _orderBookId,\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) external override whenNotPaused onlyAcceptedContracts ifPreOrderPeriod(_orderBookId) {\\n        OrderActionLogic.executePreOrder(_orderBookId, _side, _user, _amount, _unitPrice);\\n    }\\n\\n    /**\\n     * @notice Unwinds lending or borrowing positions by a specified future value amount.\\n     * @param _orderBookId The order book id\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _user User's address\\n     * @param _futureValue Amount of future value unwound\\n     * @param _circuitBreakerLimitRange Rate limit range for the circuit breaker\\n     * @return filledOrder User's Filled order of the user\\n     * @return partiallyFilledOrder Partially filled order\\n     */\\n    function unwindPosition(\\n        uint8 _orderBookId,\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _futureValue,\\n        uint256 _circuitBreakerLimitRange\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        onlyAcceptedContracts\\n        ifOpened(_orderBookId)\\n        returns (FilledOrder memory filledOrder, PartiallyFilledOrder memory partiallyFilledOrder)\\n    {\\n        return\\n            OrderActionLogic.unwindPosition(\\n                _orderBookId,\\n                _side,\\n                _user,\\n                _futureValue,\\n                _circuitBreakerLimitRange\\n            );\\n    }\\n\\n    /**\\n     * @notice Executes Itayose to aggregate pre-orders and determine the opening unit price.\\n     * After this action, the market opens.\\n     * @dev If the opening date had already passed when this contract was created, this Itayose need not be executed.\\n     * @param _orderBookId The order book id\\n     * @return openingUnitPrice The opening price when Itayose is executed\\n     * @return totalOffsetAmount The total filled amount when Itayose is executed\\n     * @return openingDate The timestamp when the market opens\\n     * @return partiallyFilledLendingOrder Partially filled lending order on the order book\\n     * @return partiallyFilledBorrowingOrder Partially filled borrowing order on the order book\\n     */\\n    function executeItayoseCall(uint8 _orderBookId)\\n        external\\n        override\\n        whenNotPaused\\n        onlyAcceptedContracts\\n        ifItayosePeriod(_orderBookId)\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 totalOffsetAmount,\\n            uint256 openingDate,\\n            PartiallyFilledOrder memory partiallyFilledLendingOrder,\\n            PartiallyFilledOrder memory partiallyFilledBorrowingOrder\\n        )\\n    {\\n        return OrderBookLogic.executeItayoseCall(_orderBookId);\\n    }\\n\\n    /**\\n     * @notice Pauses the lending market.\\n     */\\n    function pauseMarket() external override onlyAcceptedContracts {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses the lending market.\\n     */\\n    function unpauseMarket() external override onlyAcceptedContracts {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0xf6abde5a8a57c382e4fdafc365035b879cc171030bdb49c07cdb7a095b49f9db\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IBeaconProxyController {\\n    event BeaconProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function deployFutureValueVault() external returns (address futureValueVault);\\n\\n    function deployLendingMarket(bytes32 ccy) external returns (address market);\\n}\\n\",\"keccak256\":\"0xe21ca443ec4d1e4c4c8d3fc079081b4c1a59bf6d44d19e98da5082595ceb5511\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Currency} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CurrencyAdded(bytes32 indexed ccy, uint256 haircut);\\n    event CurrencyRemoved(bytes32 indexed ccy);\\n\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n\\n    event PriceFeedUpdated(bytes32 ccy, uint256 decimals, address[] indexed priceFeeds);\\n    event PriceFeedRemoved(bytes32 ccy);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256 _amount\\n    ) external view returns (uint256 amount);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256[] calldata _amounts\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, uint256 _amount)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, int256 _amount)\\n        external\\n        view\\n        returns (int256 amount);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, uint256[] calldata _amounts)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function convertFromBaseCurrency(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertFromBaseCurrency(bytes32 _ccy, uint256[] calldata _amounts)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getBaseCurrency() external view returns (bytes32);\\n\\n    function getDecimals(bytes32) external view returns (uint8);\\n\\n    function getCurrencies() external view returns (bytes32[] memory);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getLastPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function currencyExists(bytes32 _ccy) external view returns (bool);\\n\\n    function updatePriceFeed(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        address[] calldata _priceFeeds\\n    ) external;\\n\\n    function removePriceFeed(bytes32 _ccy) external;\\n\\n    function addCurrency(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        uint256 _haircut,\\n        address[] calldata _priceFeeds\\n    ) external;\\n\\n    function updateHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function removeCurrency(bytes32 _ccy) external;\\n}\\n\",\"keccak256\":\"0x603eef4c5d4f90eac22eb9db6ae3569b45026d23ee6ab536bd4d90089688f237\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AutoRollLog} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\\n    event AutoRollExecuted(\\n        bytes32 indexed ccy,\\n        uint256 lendingCompoundFactor,\\n        uint256 borrowingCompoundFactor,\\n        uint256 unitPrice,\\n        uint256 currentMaturity,\\n        uint256 previousMaturity\\n    );\\n\\n    function isInitialized(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getBalance(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getBalanceInFutureValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getMaturityGenesisValue(bytes32 ccy, uint256 maturity) external view returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getAutoRollLog(bytes32 ccy, uint256 maturity)\\n        external\\n        view\\n        returns (AutoRollLog memory);\\n\\n    function getLatestAutoRollLog(bytes32 ccy) external view returns (AutoRollLog memory);\\n\\n    function calculateFVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        uint256 destinationMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function getBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function calculateBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        int256 balance,\\n        uint256 fromMaturity,\\n        uint256 toMaturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function initializeCurrencySetting(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor,\\n        uint256 maturity\\n    ) external;\\n\\n    function updateInitialCompoundFactor(bytes32 ccy, uint256 unitPrice) external;\\n\\n    function executeAutoRoll(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice,\\n        uint256 orderFeeRate\\n    ) external;\\n\\n    function updateGenesisValueWithFutureValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 fvAmount\\n    ) external;\\n\\n    function updateGenesisValueWithResidualAmount(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity\\n    ) external;\\n\\n    function transferFrom(\\n        bytes32 ccy,\\n        address sender,\\n        address receiver,\\n        int256 amount\\n    ) external;\\n\\n    function cleanUpBalance(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external;\\n\\n    function executeForcedReset(bytes32 _ccy, address _user) external;\\n\\n    function executeForcedReset(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        int256 _amountInFV\\n    ) external returns (int256 removedAmount, int256 balance);\\n}\\n\",\"keccak256\":\"0x49c31a088879853c9080f30818d32216037b838dfd7f4330320e539cc0969752\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport {ItayoseLog} from \\\"../storages/LendingMarketStorage.sol\\\";\\nimport {OrderBookLib, FilledOrder, PartiallyFilledOrder} from \\\"../libraries/OrderBookLib.sol\\\";\\n\\ninterface ILendingMarket {\\n    struct OrderBook {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        uint256 openingDate;\\n        uint256 borrowUnitPrice;\\n        uint256 lendUnitPrice;\\n        uint256 midUnitPrice;\\n        uint256 openingUnitPrice;\\n        bool isReady;\\n    }\\n\\n    function getOrderBookDetail(uint8 orderBookId) external view returns (OrderBook memory);\\n\\n    function getCircuitBreakerThresholds(uint8 orderBookId, uint256 _circuitBreakerLimitRange)\\n        external\\n        view\\n        returns (uint256 lendCircuitBreakerThreshold, uint256 borrowCircuitBreakerThreshold);\\n\\n    function getBestLendUnitPrice(uint8 orderBookId) external view returns (uint256 unitPrice);\\n\\n    function getBestLendUnitPrices(uint8[] memory _orderBookIds)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getBestBorrowUnitPrice(uint8 orderBookId) external view returns (uint256 unitPrice);\\n\\n    function getBestBorrowUnitPrices(uint8[] memory _orderBookIds)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getMidUnitPrice(uint8 orderBookId) external view returns (uint256 unitPrice);\\n\\n    function getMidUnitPrices(uint8[] memory _orderBookIds)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getBorrowOrderBook(uint8 orderBookId, uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(uint8 orderBookId, uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturity(uint8 orderBookId) external view returns (uint256);\\n\\n    function getMaturities(uint8[] memory _orderBookIds)\\n        external\\n        view\\n        returns (uint256[] memory maturities);\\n\\n    function getCurrency() external view returns (bytes32);\\n\\n    function getOpeningDate(uint8 orderBookId) external view returns (uint256);\\n\\n    function isReady(uint8 orderBookId) external view returns (bool);\\n\\n    function isMatured(uint8 orderBookId) external view returns (bool);\\n\\n    function isOpened(uint8 orderBookId) external view returns (bool);\\n\\n    function isItayosePeriod(uint8 orderBookId) external view returns (bool);\\n\\n    function isPreOrderPeriod(uint8 orderBookId) external returns (bool);\\n\\n    function getItayoseLog(uint256 maturity) external view returns (ItayoseLog memory);\\n\\n    function getOrder(uint8 orderBookId, uint48 orderId)\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp,\\n            bool isPreOrder\\n        );\\n\\n    function getTotalAmountFromLendOrders(uint8 orderBookId, address user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getTotalAmountFromBorrowOrders(uint8 orderBookId, address user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getLendOrderIds(uint8 orderBookId, address user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds);\\n\\n    function getBorrowOrderIds(uint8 orderBookId, address user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds);\\n\\n    function calculateFilledAmount(\\n        uint8 orderBookId,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        uint256 _circuitBreakerLimitRange\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV\\n        );\\n\\n    function createOrderBook(uint256 maturity, uint256 _openingDate)\\n        external\\n        returns (uint8 orderBookId);\\n\\n    function reopenOrderBook(\\n        uint8 _orderBookId,\\n        uint256 _newMaturity,\\n        uint256 _openingDate\\n    ) external;\\n\\n    function cancelOrder(\\n        uint8 orderBookId,\\n        address user,\\n        uint48 orderId\\n    ) external;\\n\\n    function executeOrder(\\n        uint8 orderBookId,\\n        ProtocolTypes.Side side,\\n        address account,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        uint256 circuitBreakerLimitRange\\n    )\\n        external\\n        returns (FilledOrder memory filledOrder, PartiallyFilledOrder memory partiallyFilledOrder);\\n\\n    function executePreOrder(\\n        uint8 orderBookId,\\n        ProtocolTypes.Side side,\\n        address user,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external;\\n\\n    function unwindPosition(\\n        uint8 orderBookId,\\n        ProtocolTypes.Side side,\\n        address user,\\n        uint256 futureValue,\\n        uint256 circuitBreakerLimitRange\\n    )\\n        external\\n        returns (FilledOrder memory filledOrder, PartiallyFilledOrder memory partiallyFilledOrder);\\n\\n    function executeItayoseCall(uint8 orderBookId)\\n        external\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 totalOffsetAmount,\\n            uint256 openingDate,\\n            PartiallyFilledOrder memory partiallyFilledLendingOrder,\\n            PartiallyFilledOrder memory partiallyFilledBorrowingOrder\\n        );\\n\\n    function cleanUpOrders(uint8 orderBookId, address user)\\n        external\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        );\\n\\n    function pauseMarket() external;\\n\\n    function unpauseMarket() external;\\n}\\n\",\"keccak256\":\"0x3c32193a6eb912ef63e758c9de6365c1a5173c8addef417c3b4a34539c4f56d6\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ILendingMarketController {\\n    struct Order {\\n        uint48 orderId;\\n        bytes32 ccy;\\n        uint256 maturity;\\n        ProtocolTypes.Side side;\\n        uint256 unitPrice;\\n        uint256 amount;\\n        uint256 timestamp;\\n        bool isPreOrder;\\n    }\\n\\n    struct Position {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        int256 presentValue;\\n        int256 futureValue;\\n    }\\n\\n    struct OrderBookDetail {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        uint256 bestLendUnitPrice;\\n        uint256 bestBorrowUnitPrice;\\n        uint256 midUnitPrice;\\n        uint256 maxLendUnitPrice;\\n        uint256 minBorrowUnitPrice;\\n        uint256 openingUnitPrice;\\n        uint256 openingDate;\\n        bool isReady;\\n    }\\n\\n    struct AdditionalFunds {\\n        bytes32 ccy;\\n        uint256 claimableAmount;\\n        uint256 debtAmount;\\n        uint256 lentAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    function isTerminated() external view returns (bool);\\n\\n    function isRedemptionRequired(address _user) external view returns (bool);\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarket(bytes32 ccy) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy) external view returns (address);\\n\\n    function getOrderBookId(bytes32 _ccy, uint256 _maturity) external view returns (uint8);\\n\\n    function getOrderBookDetail(bytes32 _ccy, uint256 _maturity)\\n        external\\n        view\\n        returns (\\n            uint256 bestLendUnitPrice,\\n            uint256 bestBorrowUnitPrice,\\n            uint256 midUnitPrice,\\n            uint256 maxLendUnitPrice,\\n            uint256 minBorrowUnitPrice,\\n            uint256 openingUnitPrice,\\n            uint256 openingDate,\\n            bool isReady\\n        );\\n\\n    function getOrderBookDetails(bytes32[] memory _ccys)\\n        external\\n        view\\n        returns (OrderBookDetail[] memory orderBookDetails);\\n\\n    function getBestLendUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getBestBorrowUnitPrices(bytes32 ccy)\\n        external\\n        view\\n        returns (uint256[] memory unitPrices);\\n\\n    function getMidUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getOrderEstimation(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        uint256 additionalDepositAmount,\\n        bool ignoreBorrowedAmount\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV,\\n            uint256 orderFeeInFV,\\n            uint256 coverage,\\n            bool isInsufficientDepositAmount\\n        );\\n\\n    function getBorrowOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getOrderBookIds(bytes32 ccy) external view returns (uint8[] memory);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInBaseCurrency(address user)\\n        external\\n        view\\n        returns (int256 totalPresentValue);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256 genesisValue);\\n\\n    function getOrders(bytes32[] memory ccys, address user)\\n        external\\n        view\\n        returns (Order[] memory activeOrders, Order[] memory inactiveOrders);\\n\\n    function getPosition(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) external view returns (int256 presentValue, int256 futureValue);\\n\\n    function getPositions(bytes32[] memory ccys, address user)\\n        external\\n        view\\n        returns (Position[] memory positions);\\n\\n    function calculateFunds(\\n        bytes32 ccy,\\n        address user,\\n        uint256 liquidationThresholdRate\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 workingLendOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 collateralAmount,\\n            uint256 lentAmount,\\n            uint256 workingBorrowOrdersAmount,\\n            uint256 debtAmount,\\n            uint256 borrowedAmount\\n        );\\n\\n    function calculateTotalFundsInBaseCurrency(\\n        address user,\\n        AdditionalFunds calldata _additionalFunds,\\n        uint256 liquidationThresholdRate\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 plusDepositAmountInAdditionalFundsCcy,\\n            uint256 minusDepositAmountInAdditionalFundsCcy,\\n            uint256 totalWorkingLendOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalCollateralAmount,\\n            uint256 totalLentAmount,\\n            uint256 totalWorkingBorrowOrdersAmount,\\n            uint256 totalDebtAmount,\\n            uint256 totalBorrowedAmount\\n        );\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor,\\n        uint256 orderFeeRate,\\n        uint256 circuitBreakerLimitRange\\n    ) external;\\n\\n    function createOrderBook(bytes32 ccy, uint256 marketOpeningDate) external;\\n\\n    function executeOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecuteOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function executePreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecutesPreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function unwindPosition(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function executeItayoseCalls(bytes32[] memory currencies, uint256 maturity)\\n        external\\n        returns (bool);\\n\\n    function executeRedemption(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeRepayment(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeEmergencySettlement() external returns (bool);\\n\\n    function executeLiquidationCall(\\n        bytes32 collateralCcy,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        address user\\n    ) external returns (bool);\\n\\n    function executeForcedRepayment(\\n        bytes32 _collateralCcy,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity,\\n        address _user\\n    ) external returns (bool);\\n\\n    function cancelOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint48 orderId\\n    ) external returns (bool);\\n\\n    function rotateOrderBooks(bytes32 ccy) external;\\n\\n    function executeEmergencyTermination() external;\\n\\n    function pauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function cleanUpAllFunds(address user) external returns (bool);\\n\\n    function cleanUpFunds(bytes32 ccy, address user) external returns (uint256 activeOrderCount);\\n}\\n\",\"keccak256\":\"0x6262cdaf5d9bdc008ac98d57f4abea4c2ae2bab43319cc772a70dd30ccea4f6a\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IReserveFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IReserveFund {\\n    event Pause(address account);\\n    event Unpause(address account);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function executeEmergencySettlement() external;\\n}\\n\",\"keccak256\":\"0x3cab24633d196f3b282adab2856f690f1d23102b68ebb0615a452bd96ed6591f\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\n\\ninterface ITokenVault {\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress, bool isCollateral);\\n    event CurrencyUpdated(bytes32 ccy, bool isCollateral);\\n\\n    function isCovered(address user) external view returns (bool);\\n\\n    function isCollateral(bytes32 ccy) external view returns (bool);\\n\\n    function isCollateral(bytes32[] calldata ccys)\\n        external\\n        view\\n        returns (bool[] memory isCollateralCurrencies);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getTokenAddress(bytes32 ccy) external view returns (address);\\n\\n    function getCollateralCurrencies() external view returns (bytes32[] memory);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256 maxWithdraw);\\n\\n    function getWithdrawableCollateral(bytes32 ccy, address user) external view returns (uint256);\\n\\n    function getCoverage(address user) external view returns (uint256 coverage);\\n\\n    function getUnusedCollateral(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address user) external view returns (uint256);\\n\\n    function getCollateralAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getLiquidationAmount(\\n        address user,\\n        bytes32 liquidationCcy,\\n        uint256 liquidationAmountMaximum\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liquidationAmount,\\n            uint256 protocolFee,\\n            uint256 liquidatorFee\\n        );\\n\\n    function getTotalDepositAmount(bytes32 ccy) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function calculateCoverage(address user, ILendingMarketController.AdditionalFunds memory funds)\\n        external\\n        view\\n        returns (uint256 coverage, bool isInsufficientDepositAmount);\\n\\n    function calculateLiquidationFees(uint256 liquidationAmount)\\n        external\\n        view\\n        returns (uint256 protocolFee, uint256 liquidatorFee);\\n\\n    function getCollateralParameters()\\n        external\\n        view\\n        returns (\\n            uint256 liquidationThresholdRate,\\n            uint256 liquidationProtocolFeeRate,\\n            uint256 liquidatorFeeRate\\n        );\\n\\n    function setCollateralParameters(\\n        uint256 liquidationThresholdRate,\\n        uint256 liquidationProtocolFeeRate,\\n        uint256 liquidatorFeeRate\\n    ) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositFrom(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function removeDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function executeForcedReset(address user, bytes32 ccy) external returns (uint256 removedAmount);\\n\\n    function transferFrom(\\n        bytes32 ccy,\\n        address sender,\\n        address receiver,\\n        uint256 amount\\n    ) external returns (uint256 untransferredAmount);\\n\\n    function pauseVault() external;\\n\\n    function unpauseVault() external;\\n}\\n\",\"keccak256\":\"0xe81a56c869d6fb1e5777360aaca03dd16d8d05938e22f4aba34fb8985c9599ee\",\"license\":\"MIT\"},\"contracts/protocol/libraries/AddressResolverLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/mixins/MixinAddressResolverStorage.sol\\\";\\n\\nlibrary AddressResolverLib {\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return IReserveFund(getAddress(Contracts.RESERVE_FUND));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0xbf09c038b64e29b33451c82c4364c0c670f6b046e51caf46885128f3020cfac3\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Constants {\\n    /// @dev Used for price digits in the basis (10000 -> 1)\\n    uint256 public constant PRICE_DIGIT = 10000;\\n\\n    /// @dev Used for percentage digits in the basis (10000 -> 100%)\\n    uint256 public constant PCT_DIGIT = 10000;\\n\\n    /// @dev Used for seconds in year (60 * 60 * 24 * 365)\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000;\\n\\n    /// @dev Used for maximum order count per currency\\n    uint256 internal constant MAXIMUM_ORDER_COUNT = 20;\\n\\n    /// @dev Used for minimum threshold for circuit breaker unit price threshold\\n    uint256 public constant MINIMUM_CIRCUIT_BREAKER_THRESHOLD = 10;\\n\\n    /// @dev Used for maximum threshold for circuit breaker unit price threshold\\n    uint256 public constant MAXIMUM_CIRCUIT_BREAKER_THRESHOLD = 200;\\n}\\n\",\"keccak256\":\"0x723b180b046e8fbe471400aa11a092e7611556a1467b0eccd6c19c26c7576459\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant RESERVE_FUND = \\\"ReserveFund\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE_VAULT = \\\"FutureValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0x8e73eead72efa03bcc03c1cdf72cdcebed0f7e6f5a58cda1fd74e0fc03f356e6\",\"license\":\"MIT\"},\"contracts/protocol/libraries/OrderBookLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Constants} from \\\"./Constants.sol\\\";\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {OrderStatisticsTreeLib, PartiallyRemovedOrder, OrderItem} from \\\"./OrderStatisticsTreeLib.sol\\\";\\nimport {RoundingUint256} from \\\"./math/RoundingUint256.sol\\\";\\n\\nstruct PlacedOrder {\\n    ProtocolTypes.Side side;\\n    uint256 unitPrice; // in basis points\\n    uint256 maturity;\\n    uint256 timestamp;\\n}\\n\\nstruct FilledOrder {\\n    uint256 amount;\\n    uint256 unitPrice;\\n    uint256 futureValue;\\n    uint256 ignoredAmount;\\n}\\n\\nstruct PartiallyFilledOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 futureValue;\\n}\\n\\nlibrary OrderBookLib {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n    using RoundingUint256 for uint256;\\n\\n    uint256 private constant PRE_ORDER_PERIOD = 7 days;\\n    uint256 private constant ITAYOSE_PERIOD = 1 hours;\\n\\n    struct OrderBook {\\n        uint48 lastOrderId;\\n        uint256 openingDate;\\n        uint256 maturity;\\n        // Mapping from user to active lend order ids\\n        mapping(address => uint48[]) activeLendOrderIds;\\n        // Mapping from user to active borrow order ids\\n        mapping(address => uint48[]) activeBorrowOrderIds;\\n        // Mapping from user to current maturity\\n        mapping(address => uint256) userCurrentMaturities;\\n        // Mapping from orderId to order\\n        mapping(uint256 => PlacedOrder) orders;\\n        // Mapping from orderId to boolean for pre-order or not\\n        mapping(uint256 => bool) isPreOrder;\\n        // Mapping from maturity to lending orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) lendOrders;\\n        // Mapping from maturity to borrowing orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) borrowOrders;\\n        // Mapping from order side to threshold unit price of circuit breaker per block\\n        mapping(uint256 => mapping(ProtocolTypes.Side => uint256)) circuitBreakerThresholdUnitPrices;\\n    }\\n\\n    function initialize(\\n        OrderBook storage self,\\n        uint256 _maturity,\\n        uint256 _openingDate\\n    ) internal returns (bool isReady) {\\n        self.maturity = _maturity;\\n        self.openingDate = _openingDate;\\n\\n        if (block.timestamp >= (_openingDate - ITAYOSE_PERIOD)) {\\n            isReady = true;\\n        }\\n    }\\n\\n    function isMatured(OrderBook storage self) internal view returns (bool) {\\n        return block.timestamp >= self.maturity;\\n    }\\n\\n    function getBestBorrowUnitPrice(OrderBook storage self) internal view returns (uint256) {\\n        return self.lendOrders[self.maturity].last();\\n    }\\n\\n    function getBestLendUnitPrice(OrderBook storage self) internal view returns (uint256) {\\n        uint256 unitPrice = self.borrowOrders[self.maturity].first();\\n        return unitPrice == 0 ? Constants.PRICE_DIGIT : unitPrice;\\n    }\\n\\n    function hasBorrowOrder(OrderBook storage self, address _user) internal view returns (bool) {\\n        return self.activeBorrowOrderIds[_user].length != 0;\\n    }\\n\\n    function hasLendOrder(OrderBook storage self, address _user) internal view returns (bool) {\\n        return self.activeLendOrderIds[_user].length != 0;\\n    }\\n\\n    function getLendOrderBook(OrderBook storage self, uint256 _limit)\\n        internal\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = self.lendOrders[self.maturity].last();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = self.lendOrders[self.maturity].getNodeTotalAmount(unitPrice);\\n        quantities[0] = self.lendOrders[self.maturity].getNodeCount(unitPrice);\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = self.lendOrders[self.maturity].prev(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = self.lendOrders[self.maturity].getNodeTotalAmount(unitPrice);\\n            quantities[i] = self.lendOrders[self.maturity].getNodeCount(unitPrice);\\n        }\\n    }\\n\\n    function getBorrowOrderBook(OrderBook storage self, uint256 _limit)\\n        internal\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = self.borrowOrders[self.maturity].first();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = self.borrowOrders[self.maturity].getNodeTotalAmount(unitPrice);\\n        quantities[0] = self.borrowOrders[self.maturity].getNodeCount(unitPrice);\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = self.borrowOrders[self.maturity].next(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = self.borrowOrders[self.maturity].getNodeTotalAmount(unitPrice);\\n            quantities[i] = self.borrowOrders[self.maturity].getNodeCount(unitPrice);\\n        }\\n    }\\n\\n    function getLendOrderIds(OrderBook storage self, address _user)\\n        internal\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        bool isPastMaturity = self.userCurrentMaturities[_user] != self.maturity;\\n\\n        activeOrderIds = new uint48[](isPastMaturity ? 0 : self.activeLendOrderIds[_user].length);\\n        inActiveOrderIds = new uint48[](self.activeLendOrderIds[_user].length);\\n\\n        for (uint256 i = 0; i < self.activeLendOrderIds[_user].length; i++) {\\n            uint48 orderId = self.activeLendOrderIds[_user][i];\\n            PlacedOrder memory order = self.orders[orderId];\\n\\n            if (\\n                !self.lendOrders[self.userCurrentMaturities[_user]].isActiveOrderId(\\n                    order.unitPrice,\\n                    orderId\\n                )\\n            ) {\\n                inActiveOrderCount += 1;\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                if (!isPastMaturity) {\\n                    activeOrderCount += 1;\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function getBorrowOrderIds(OrderBook storage self, address _user)\\n        internal\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        bool isPastMaturity = self.userCurrentMaturities[_user] != self.maturity;\\n\\n        activeOrderIds = new uint48[](isPastMaturity ? 0 : self.activeBorrowOrderIds[_user].length);\\n        inActiveOrderIds = new uint48[](self.activeBorrowOrderIds[_user].length);\\n\\n        for (uint256 i = 0; i < self.activeBorrowOrderIds[_user].length; i++) {\\n            uint48 orderId = self.activeBorrowOrderIds[_user][i];\\n            PlacedOrder memory order = self.orders[orderId];\\n\\n            if (\\n                !self.borrowOrders[self.userCurrentMaturities[_user]].isActiveOrderId(\\n                    order.unitPrice,\\n                    orderId\\n                )\\n            ) {\\n                inActiveOrderCount += 1;\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                activeOrderCount += 1;\\n                if (!isPastMaturity) {\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function calculateFilledAmount(\\n        OrderBook storage self,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice,\\n        uint256 _circuitBreakerLimitRange\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV\\n        )\\n    {\\n        if (_amount == 0) return (0, 0, 0);\\n\\n        if (_side == ProtocolTypes.Side.LEND) {\\n            uint256 cbThresholdUnitPrice = _getLendCircuitBreakerThreshold(\\n                _circuitBreakerLimitRange,\\n                getBestLendUnitPrice(self)\\n            );\\n\\n            uint256 executedUnitPrice = (_unitPrice == 0 || _unitPrice > cbThresholdUnitPrice)\\n                ? cbThresholdUnitPrice\\n                : _unitPrice;\\n\\n            return\\n                self.borrowOrders[self.maturity].calculateDroppedAmountFromLeft(\\n                    _amount,\\n                    0,\\n                    executedUnitPrice\\n                );\\n        } else {\\n            uint256 cbThresholdUnitPrice = _getBorrowCircuitBreakerThreshold(\\n                _circuitBreakerLimitRange,\\n                getBestBorrowUnitPrice(self)\\n            );\\n\\n            uint256 executedUnitPrice = (_unitPrice == 0 || _unitPrice < cbThresholdUnitPrice)\\n                ? cbThresholdUnitPrice\\n                : _unitPrice;\\n\\n            return\\n                self.lendOrders[self.maturity].calculateDroppedAmountFromRight(\\n                    _amount,\\n                    0,\\n                    executedUnitPrice\\n                );\\n        }\\n    }\\n\\n    function insertOrder(\\n        OrderBook storage self,\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) internal returns (uint48 orderId) {\\n        orderId = _nextOrderId(self);\\n        self.orders[orderId] = PlacedOrder(_side, _unitPrice, self.maturity, block.timestamp);\\n\\n        if (_side == ProtocolTypes.Side.LEND) {\\n            self.lendOrders[self.maturity].insertOrder(_unitPrice, orderId, _user, _amount);\\n            self.activeLendOrderIds[_user].push(orderId);\\n        } else if (_side == ProtocolTypes.Side.BORROW) {\\n            self.borrowOrders[self.maturity].insertOrder(_unitPrice, orderId, _user, _amount);\\n            self.activeBorrowOrderIds[_user].push(orderId);\\n        }\\n    }\\n\\n    function fillOrders(\\n        OrderBook storage self,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _amountInFV,\\n        uint256 _unitPrice\\n    )\\n        internal\\n        returns (\\n            FilledOrder memory filledOrder,\\n            PartiallyFilledOrder memory partiallyFilledOrder,\\n            uint256 remainingAmount,\\n            bool orderExists\\n        )\\n    {\\n        PartiallyRemovedOrder memory partiallyRemovedOrder;\\n\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            OrderStatisticsTreeLib.Tree storage orders = self.lendOrders[self.maturity];\\n            (\\n                filledOrder.unitPrice,\\n                filledOrder.amount,\\n                filledOrder.futureValue,\\n                remainingAmount,\\n                partiallyRemovedOrder\\n            ) = orders.dropRight(_amount, _amountInFV, _unitPrice);\\n            orderExists = orders.hasOrders();\\n        } else if (_side == ProtocolTypes.Side.LEND) {\\n            OrderStatisticsTreeLib.Tree storage orders = self.borrowOrders[self.maturity];\\n            (\\n                filledOrder.unitPrice,\\n                filledOrder.amount,\\n                filledOrder.futureValue,\\n                remainingAmount,\\n                partiallyRemovedOrder\\n            ) = orders.dropLeft(_amount, _amountInFV, _unitPrice);\\n            orderExists = orders.hasOrders();\\n        }\\n\\n        partiallyFilledOrder = PartiallyFilledOrder(\\n            partiallyRemovedOrder.orderId,\\n            partiallyRemovedOrder.maker,\\n            partiallyRemovedOrder.amount,\\n            partiallyRemovedOrder.futureValue\\n        );\\n    }\\n\\n    function removeOrder(\\n        OrderBook storage self,\\n        address _user,\\n        uint48 _orderId\\n    )\\n        internal\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        PlacedOrder memory order = self.orders[_orderId];\\n        uint256 removedAmount;\\n        if (order.side == ProtocolTypes.Side.LEND) {\\n            removedAmount = self.lendOrders[self.maturity].removeOrder(order.unitPrice, _orderId);\\n            _removeOrderIdFromOrders(self.activeLendOrderIds[_user], _orderId);\\n        } else if (order.side == ProtocolTypes.Side.BORROW) {\\n            removedAmount = self.borrowOrders[self.maturity].removeOrder(order.unitPrice, _orderId);\\n            _removeOrderIdFromOrders(self.activeBorrowOrderIds[_user], _orderId);\\n        }\\n\\n        return (order.side, removedAmount, order.unitPrice);\\n    }\\n\\n    function getOpeningUnitPrice(OrderBook storage self)\\n        internal\\n        view\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 lastLendUnitPrice,\\n            uint256 lastBorrowUnitPrice,\\n            uint256 totalOffsetAmount\\n        )\\n    {\\n        uint256 lendUnitPrice = getBestBorrowUnitPrice(self);\\n        uint256 borrowUnitPrice = getBestLendUnitPrice(self);\\n        uint256 lendAmount = self.lendOrders[self.maturity].getNodeTotalAmount(lendUnitPrice);\\n        uint256 borrowAmount = self.borrowOrders[self.maturity].getNodeTotalAmount(borrowUnitPrice);\\n\\n        OrderStatisticsTreeLib.Tree storage borrowOrders = self.borrowOrders[self.maturity];\\n        OrderStatisticsTreeLib.Tree storage lendOrders = self.lendOrders[self.maturity];\\n\\n        // return mid price when no lending and borrowing orders overwrap\\n        if (borrowUnitPrice > lendUnitPrice) {\\n            openingUnitPrice = (lendUnitPrice + borrowUnitPrice).div(2);\\n            return (openingUnitPrice, 0, 0, 0);\\n        }\\n\\n        while (borrowUnitPrice <= lendUnitPrice && borrowUnitPrice > 0 && lendUnitPrice > 0) {\\n            lastLendUnitPrice = lendUnitPrice;\\n            lastBorrowUnitPrice = borrowUnitPrice;\\n\\n            if (lendAmount > borrowAmount) {\\n                openingUnitPrice = lendUnitPrice;\\n                totalOffsetAmount += borrowAmount;\\n                lendAmount -= borrowAmount;\\n                borrowUnitPrice = borrowOrders.next(borrowUnitPrice);\\n                borrowAmount = borrowOrders.getNodeTotalAmount(borrowUnitPrice);\\n            } else if (lendAmount < borrowAmount) {\\n                openingUnitPrice = borrowUnitPrice;\\n                totalOffsetAmount += lendAmount;\\n                borrowAmount -= lendAmount;\\n                lendUnitPrice = lendOrders.prev(lendUnitPrice);\\n                lendAmount = lendOrders.getNodeTotalAmount(lendUnitPrice);\\n            } else {\\n                openingUnitPrice = (lendUnitPrice + borrowUnitPrice).div(2);\\n                totalOffsetAmount += lendAmount;\\n                lendUnitPrice = lendOrders.prev(lendUnitPrice);\\n                borrowUnitPrice = borrowOrders.next(borrowUnitPrice);\\n                lendAmount = lendOrders.getNodeTotalAmount(lendUnitPrice);\\n                borrowAmount = borrowOrders.getNodeTotalAmount(borrowUnitPrice);\\n            }\\n        }\\n    }\\n\\n    function getOrderExecutionConditions(\\n        OrderBook storage self,\\n        ProtocolTypes.Side _side,\\n        uint256 _unitPrice,\\n        uint256 _circuitBreakerLimitRange\\n    )\\n        internal\\n        returns (\\n            bool isFilled,\\n            uint256 executedUnitPrice,\\n            bool ignoreRemainingAmount,\\n            bool orderExists\\n        )\\n    {\\n        require(_circuitBreakerLimitRange < Constants.PCT_DIGIT, \\\"CB limit can not be so high\\\");\\n        uint256 cbThresholdUnitPrice = self.circuitBreakerThresholdUnitPrices[block.number][_side];\\n        bool isLend = _side == ProtocolTypes.Side.LEND;\\n        uint256 bestUnitPrice;\\n\\n        if (isLend) {\\n            bestUnitPrice = self.borrowOrders[self.maturity].first();\\n            orderExists = bestUnitPrice != 0;\\n\\n            if (orderExists && cbThresholdUnitPrice == 0) {\\n                cbThresholdUnitPrice = _getLendCircuitBreakerThreshold(\\n                    _circuitBreakerLimitRange,\\n                    bestUnitPrice\\n                );\\n                self.circuitBreakerThresholdUnitPrices[block.number][_side] = cbThresholdUnitPrice;\\n            }\\n        } else {\\n            bestUnitPrice = self.lendOrders[self.maturity].last();\\n            orderExists = bestUnitPrice != 0;\\n\\n            if (orderExists && cbThresholdUnitPrice == 0) {\\n                cbThresholdUnitPrice = _getBorrowCircuitBreakerThreshold(\\n                    _circuitBreakerLimitRange,\\n                    bestUnitPrice\\n                );\\n\\n                self.circuitBreakerThresholdUnitPrices[block.number][_side] = cbThresholdUnitPrice;\\n            }\\n        }\\n\\n        if (_unitPrice == 0 && !orderExists) revert(\\\"Order not found\\\");\\n\\n        if (\\n            _unitPrice == 0 ||\\n            (orderExists &&\\n                ((isLend && _unitPrice > cbThresholdUnitPrice) ||\\n                    (!isLend && _unitPrice < cbThresholdUnitPrice)))\\n        ) {\\n            executedUnitPrice = cbThresholdUnitPrice;\\n            ignoreRemainingAmount = true;\\n        } else {\\n            executedUnitPrice = _unitPrice;\\n            ignoreRemainingAmount = false;\\n        }\\n\\n        if (orderExists) {\\n            isFilled = isLend\\n                ? bestUnitPrice <= executedUnitPrice\\n                : bestUnitPrice >= executedUnitPrice;\\n        }\\n    }\\n\\n    function getCircuitBreakerThresholds(OrderBook storage self, uint256 _circuitBreakerLimitRange)\\n        internal\\n        view\\n        returns (uint256 maxLendUnitPrice, uint256 minBorrowUnitPrice)\\n    {\\n        maxLendUnitPrice = _getLendCircuitBreakerThreshold(\\n            _circuitBreakerLimitRange,\\n            getBestLendUnitPrice(self)\\n        );\\n        minBorrowUnitPrice = _getBorrowCircuitBreakerThreshold(\\n            _circuitBreakerLimitRange,\\n            getBestBorrowUnitPrice(self)\\n        );\\n    }\\n\\n    function _getBorrowCircuitBreakerThreshold(\\n        uint256 _circuitBreakerLimitRange,\\n        uint256 _unitPrice\\n    ) private pure returns (uint256 cbThresholdUnitPrice) {\\n        // NOTE: Formula of circuit breaker threshold for borrow orders:\\n        // cbThreshold = 100 / (1 + (100 / price - 1) * (1 + range))\\n        uint256 numerator = _unitPrice * Constants.PRICE_DIGIT * Constants.PCT_DIGIT;\\n        uint256 denominator = _unitPrice *\\n            Constants.PCT_DIGIT +\\n            (Constants.PRICE_DIGIT - _unitPrice) *\\n            (Constants.PCT_DIGIT + _circuitBreakerLimitRange);\\n        cbThresholdUnitPrice = numerator.div(denominator);\\n\\n        if (_unitPrice > cbThresholdUnitPrice + Constants.MAXIMUM_CIRCUIT_BREAKER_THRESHOLD) {\\n            cbThresholdUnitPrice = _unitPrice - Constants.MAXIMUM_CIRCUIT_BREAKER_THRESHOLD;\\n        } else if (\\n            _unitPrice < cbThresholdUnitPrice + Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n        ) {\\n            cbThresholdUnitPrice = _unitPrice > Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n                ? _unitPrice - Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n                : 1;\\n        }\\n    }\\n\\n    function _getLendCircuitBreakerThreshold(uint256 _circuitBreakerLimitRange, uint256 _unitPrice)\\n        private\\n        pure\\n        returns (uint256 cbThresholdUnitPrice)\\n    {\\n        // NOTE: Formula of circuit breaker threshold for lend orders:\\n        // cbThreshold = 100 / (1 + (100 / price - 1) * (1 - range))\\n        uint256 num = _unitPrice * Constants.PRICE_DIGIT * Constants.PCT_DIGIT;\\n        uint256 den = _unitPrice *\\n            Constants.PCT_DIGIT +\\n            (Constants.PRICE_DIGIT - _unitPrice) *\\n            (Constants.PCT_DIGIT - _circuitBreakerLimitRange);\\n        cbThresholdUnitPrice = num.div(den);\\n\\n        if (cbThresholdUnitPrice > _unitPrice + Constants.MAXIMUM_CIRCUIT_BREAKER_THRESHOLD) {\\n            cbThresholdUnitPrice = _unitPrice + Constants.MAXIMUM_CIRCUIT_BREAKER_THRESHOLD;\\n        } else if (\\n            cbThresholdUnitPrice < _unitPrice + Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n        ) {\\n            cbThresholdUnitPrice = _unitPrice + Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD <=\\n                Constants.PRICE_DIGIT\\n                ? _unitPrice + Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n                : Constants.PRICE_DIGIT;\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases and returns id of last order in order book.\\n     * @return The new order id\\n     */\\n    function _nextOrderId(OrderBook storage self) private returns (uint48) {\\n        self.lastOrderId++;\\n        return self.lastOrderId;\\n    }\\n\\n    function _removeOrderIdFromOrders(uint48[] storage orders, uint256 orderId) private {\\n        uint256 lastOrderIndex = orders.length - 1;\\n        for (uint256 i = 0; i <= lastOrderIndex; i++) {\\n            if (orders[i] == orderId) {\\n                if (i != lastOrderIndex) {\\n                    uint48 lastOrderId = orders[lastOrderIndex];\\n                    orders[i] = lastOrderId;\\n                }\\n\\n                orders.pop();\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ca5e9295ece570740acbc9dc9a0c9de14008c30b37edef16072ce33f1feceb6\",\"license\":\"MIT\"},\"contracts/protocol/libraries/OrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// libraries\\nimport {Constants} from \\\"../libraries/Constants.sol\\\";\\n// types\\nimport {RoundingUint256} from \\\"./math/RoundingUint256.sol\\\";\\n\\nstruct RemainingOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 unitPrice;\\n}\\n\\nstruct PartiallyRemovedOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 futureValue;\\n}\\n\\nstruct OrderItem {\\n    uint48 orderId;\\n    uint48 next;\\n    uint48 prev;\\n    address maker;\\n    uint256 timestamp;\\n    uint256 amount;\\n}\\n\\n/**\\n * @notice OrderStatisticsTreeLib is a Red-Black Tree binary search library\\n * based on the following library that is extended to manage order data.\\n *\\n * https://github.com/rob-Hitchens/OrderStatisticsTree\\n *\\n */\\nlibrary OrderStatisticsTreeLib {\\n    using RoundingUint256 for uint256;\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint48 head;\\n        uint48 tail;\\n        uint256 orderCounter;\\n        uint256 orderTotalAmount;\\n        mapping(uint256 => OrderItem) orders;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].right != EMPTY) {\\n            _value = self.nodes[_value].right;\\n        }\\n    }\\n\\n    function hasOrders(Tree storage self) internal view returns (bool) {\\n        return self.root != EMPTY;\\n    }\\n\\n    function next(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(401) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].right != EMPTY) {\\n            _cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(402) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].left != EMPTY) {\\n            _cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint256 value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        // if (self.nodes[value].parent != EMPTY) return true;\\n        uint256 cursor = value;\\n        while (self.nodes[cursor].parent != EMPTY) {\\n            uint256 parent = self.nodes[cursor].parent;\\n            if (self.nodes[parent].left != cursor && self.nodes[parent].right != cursor) {\\n                return false;\\n            }\\n            if (parent == self.root) {\\n                return true;\\n            }\\n            cursor = self.nodes[cursor].parent;\\n        }\\n        return false;\\n    }\\n\\n    function isActiveOrderId(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        return orderIdExists(self, value, orderId) && exists(self, value);\\n    }\\n\\n    function getNode(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n        return (\\n            gn.parent,\\n            gn.left,\\n            gn.right,\\n            gn.red,\\n            gn.head,\\n            gn.tail,\\n            gn.orderCounter,\\n            gn.orderTotalAmount\\n        );\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function getNodeTotalAmount(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint256 totalAmount)\\n    {\\n        return self.nodes[value].orderTotalAmount;\\n    }\\n\\n    function getNodeOrderIds(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint48[] memory orderIds)\\n    {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[gn.head];\\n        orderIds = new uint48[](gn.orderCounter);\\n\\n        for (uint256 i = 0; i < gn.orderCounter; i++) {\\n            orderIds[i] = order.orderId;\\n            order = gn.orders[order.next];\\n        }\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256 _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(405) - Value to insert cannot be zero\\\");\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                return;\\n            }\\n        }\\n\\n        Node storage nValue = self.nodes[value];\\n        // Update order info as a new one if there is already an old node\\n        if (\\n            self.root == EMPTY ||\\n            (self.nodes[cursor].left != value && self.nodes[cursor].right != value)\\n        ) {\\n            nValue.orderCounter = 0;\\n            nValue.orderTotalAmount = 0;\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        }\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(407) - Value to delete cannot be zero\\\");\\n        Node storage nValue = self.nodes[value];\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint256 a,\\n        uint256 b\\n    ) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    function calculateDroppedAmountFromLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 droppedValue,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV\\n        )\\n    {\\n        (droppedValue, , , droppedAmount, droppedAmountInFV, , ) = _calculateDroppedAmountFromLeft(\\n            self,\\n            amount,\\n            amountInFV,\\n            limitValue,\\n            first(self)\\n        );\\n    }\\n\\n    function calculateDroppedAmountFromRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 droppedValue,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV\\n        )\\n    {\\n        (droppedValue, , , droppedAmount, droppedAmountInFV, , ) = _calculateDroppedAmountFromRight(\\n            self,\\n            amount,\\n            amountInFV,\\n            limitValue,\\n            last(self)\\n        );\\n    }\\n\\n    function dropLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 droppedValue,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV,\\n            uint256 remainingAmount,\\n            PartiallyRemovedOrder memory partiallyRemovedOrder\\n        )\\n    {\\n        uint256 cursor = first(self);\\n        uint256 cursorNodeAmount;\\n        uint256 exceededAmount;\\n        uint256 exceededAmountInFV;\\n\\n        require(cursor <= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        (\\n            droppedValue,\\n            cursor,\\n            cursorNodeAmount,\\n            droppedAmount,\\n            droppedAmountInFV,\\n            exceededAmount,\\n            exceededAmountInFV\\n        ) = _calculateDroppedAmountFromLeft(self, amount, amountInFV, limitValue, cursor);\\n\\n        uint256 totalNodeAmount = droppedAmount + exceededAmount;\\n\\n        if (totalNodeAmount > 0) {\\n            if (exceededAmount > 0) {\\n                cursor = droppedValue;\\n                // Update order ids in the node.\\n                partiallyRemovedOrder = removeOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - exceededAmount\\n                );\\n            } else if (exceededAmountInFV > 0) {\\n                cursor = droppedValue;\\n                // Update order ids in the node.\\n                partiallyRemovedOrder = removeOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, exceededAmountInFV)\\n                );\\n            }\\n\\n            self.nodes[cursor].left = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent > cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].left = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalNodeAmount) {\\n            remainingAmount = amount - totalNodeAmount;\\n        }\\n\\n        uint256 lastNode = last(self);\\n\\n        if (lastNode == droppedValue && self.nodes[lastNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (\\n            droppedValue > self.root ||\\n            (droppedValue == self.root && droppedAmount >= totalNodeAmount)\\n        ) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToLeft(self);\\n    }\\n\\n    function dropRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 droppedValue,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV,\\n            uint256 remainingAmount,\\n            PartiallyRemovedOrder memory partiallyRemovedOrder\\n        )\\n    {\\n        uint256 cursor = last(self);\\n        uint256 cursorNodeAmount;\\n        uint256 exceededAmount;\\n        uint256 exceededAmountInFV;\\n\\n        require(cursor >= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        (\\n            droppedValue,\\n            cursor,\\n            cursorNodeAmount,\\n            droppedAmount,\\n            droppedAmountInFV,\\n            exceededAmount,\\n            exceededAmountInFV\\n        ) = _calculateDroppedAmountFromRight(self, amount, amountInFV, limitValue, cursor);\\n\\n        uint256 totalNodeAmount = droppedAmount + exceededAmount;\\n\\n        if (totalNodeAmount > 0) {\\n            if (exceededAmount > 0) {\\n                cursor = droppedValue;\\n                // Update order ids in the node.\\n                partiallyRemovedOrder = removeOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - exceededAmount\\n                );\\n            } else if (exceededAmountInFV > 0) {\\n                cursor = droppedValue;\\n                // Update order ids in the node.\\n                partiallyRemovedOrder = removeOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, exceededAmountInFV)\\n                );\\n            }\\n\\n            self.nodes[cursor].right = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent < cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].right = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalNodeAmount) {\\n            remainingAmount = amount - totalNodeAmount;\\n        }\\n\\n        uint256 firstNode = first(self);\\n\\n        if (firstNode == droppedValue && self.nodes[firstNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (\\n            droppedValue < self.root ||\\n            (droppedValue == self.root && droppedAmount >= totalNodeAmount)\\n        ) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToRight(self);\\n    }\\n\\n    function rotateTreeToLeft(Tree storage self) internal {\\n        if (self.nodes[self.root].left == 0 && self.nodes[self.root].right != 0) {\\n            if (self.nodes[self.nodes[self.root].right].left != 0) {\\n                rotateRight(self, self.nodes[self.root].right);\\n            }\\n            rotateLeft(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function rotateTreeToRight(Tree storage self) internal {\\n        if (self.nodes[self.root].right == 0 && self.nodes[self.root].left != 0) {\\n            if (self.nodes[self.nodes[self.root].left].right != 0) {\\n                rotateLeft(self, self.nodes[self.root].left);\\n            }\\n            rotateRight(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function getFutureValue(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (uint256) {\\n        return _calculateFutureValue(value, self.nodes[value].orders[orderId].amount);\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (OrderItem memory) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orders[orderId];\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function orderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        uint48 cursor = orderId;\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[cursor];\\n\\n        if (order.orderId != cursor) {\\n            return false;\\n        }\\n\\n        while (order.prev != EMPTY) {\\n            cursor = order.prev;\\n            order = gn.orders[cursor];\\n        }\\n\\n        return cursor == gn.head;\\n    }\\n\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal {\\n        require(amount > 0, \\\"Insufficient amount\\\");\\n        require(value <= Constants.PRICE_DIGIT, \\\"Insufficient value\\\");\\n        insert(self, value);\\n\\n        addTail(self, value, orderId, user, amount);\\n    }\\n\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        amount = _removeOrder(self, value, orderId);\\n        remove(self, value);\\n    }\\n\\n    function removeOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount\\n    ) internal returns (PartiallyRemovedOrder memory partiallyRemovedOrder) {\\n        Node storage gn = self.nodes[value];\\n\\n        require(\\n            gn.orderTotalAmount >= _amount,\\n            \\\"OrderStatisticsTree(410) - Amount to fill is insufficient\\\"\\n        );\\n\\n        uint256 remainingAmount = _amount;\\n        OrderItem memory currentOrder = gn.orders[gn.head];\\n        uint48 orderId = gn.head;\\n\\n        while (orderId != 0 && remainingAmount != 0) {\\n            currentOrder = gn.orders[orderId];\\n\\n            if (currentOrder.amount <= remainingAmount) {\\n                remainingAmount -= currentOrder.amount;\\n                orderId = currentOrder.next;\\n            } else {\\n                partiallyRemovedOrder = PartiallyRemovedOrder(\\n                    currentOrder.orderId,\\n                    currentOrder.maker,\\n                    remainingAmount,\\n                    _calculateFutureValue(value, remainingAmount)\\n                );\\n                currentOrder = gn.orders[currentOrder.prev];\\n                break;\\n            }\\n        }\\n\\n        if (currentOrder.orderId != 0) {\\n            _removeOrders(self, value, currentOrder.orderId);\\n        }\\n\\n        if (partiallyRemovedOrder.amount > 0) {\\n            self.nodes[value].orders[partiallyRemovedOrder.orderId].amount -= partiallyRemovedOrder\\n                .amount;\\n            self.nodes[value].orderTotalAmount -= partiallyRemovedOrder.amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n        uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n        _link(self, _value, orderId, gn.head);\\n        _setHead(self, _value, orderId);\\n        if (gn.tail == 0) _setTail(self, _value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, _value, _orderId, _user, _amount);\\n        } else {\\n            uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n            _link(self, _value, gn.tail, orderId);\\n            _setTail(self, _value, orderId);\\n        }\\n    }\\n\\n    function _calculateDroppedAmountFromLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue,\\n        uint256 firstValue\\n    )\\n        private\\n        view\\n        returns (\\n            uint256 droppedValue,\\n            uint256 cursor,\\n            uint256 cursorNodeAmount,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV,\\n            uint256 exceededAmount,\\n            uint256 exceededAmountInFV\\n        )\\n    {\\n        cursor = firstValue;\\n\\n        while (\\n            (droppedAmount < amount || amount == EMPTY) &&\\n            (droppedAmountInFV < amountInFV || amountInFV == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor <= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            droppedValue = cursor;\\n\\n            droppedAmountInFV += _calculateFutureValue(cursor, cursorNodeAmount);\\n            droppedAmount += cursorNodeAmount;\\n\\n            if (droppedAmount > amount && amount != EMPTY) {\\n                exceededAmount = droppedAmount - amount;\\n                exceededAmountInFV = _calculateFutureValue(cursor, exceededAmount);\\n            } else if (droppedAmountInFV > amountInFV && amountInFV != EMPTY) {\\n                exceededAmountInFV = droppedAmountInFV - amountInFV;\\n                exceededAmount = _calculatePresentValue(cursor, exceededAmountInFV);\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n\\n        if (exceededAmount > 0) {\\n            droppedAmount -= exceededAmount;\\n        }\\n        if (exceededAmountInFV > 0) {\\n            droppedAmountInFV -= exceededAmountInFV;\\n        }\\n    }\\n\\n    function _calculateDroppedAmountFromRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue,\\n        uint256 lastValue\\n    )\\n        private\\n        view\\n        returns (\\n            uint256 droppedValue,\\n            uint256 cursor,\\n            uint256 cursorNodeAmount,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV,\\n            uint256 exceededAmount,\\n            uint256 exceededAmountInFV\\n        )\\n    {\\n        cursor = lastValue;\\n\\n        while (\\n            (droppedAmount < amount || amount == EMPTY) &&\\n            (droppedAmountInFV < amountInFV || amountInFV == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor >= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            droppedValue = cursor;\\n\\n            droppedAmountInFV += _calculateFutureValue(cursor, cursorNodeAmount);\\n            droppedAmount += cursorNodeAmount;\\n\\n            if (droppedAmount > amount && amount != EMPTY) {\\n                exceededAmount = droppedAmount - amount;\\n                exceededAmountInFV = _calculateFutureValue(cursor, exceededAmount);\\n            } else if (droppedAmountInFV > amountInFV && amountInFV != EMPTY) {\\n                exceededAmountInFV = droppedAmountInFV - amountInFV;\\n                exceededAmount = _calculatePresentValue(cursor, exceededAmountInFV);\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n\\n        if (exceededAmount > 0) {\\n            droppedAmount -= exceededAmount;\\n        }\\n        if (exceededAmountInFV > 0) {\\n            droppedAmountInFV -= exceededAmountInFV;\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint48) {\\n        Node storage gn = self.nodes[value];\\n        require(\\n            gn.orders[orderId].timestamp == 0,\\n            \\\"OrderStatisticsTree(409) - Order id already exist.\\\"\\n        );\\n\\n        gn.orderCounter += 1;\\n        gn.orderTotalAmount += amount;\\n        OrderItem memory order = OrderItem(orderId, 0, 0, user, block.timestamp, amount);\\n        gn.orders[orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the list.\\n     */\\n    function _removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n        gn.orderTotalAmount -= order.amount;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItems older than or equal `orderId` from the list\\n     */\\n    function _removeOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n        uint256 cursor = gn.head;\\n        uint256 removedCount = 1;\\n        uint256 removedAmount = gn.orders[cursor].amount;\\n\\n        while (cursor != orderId) {\\n            cursor = gn.orders[cursor].next;\\n            removedCount++;\\n            removedAmount += gn.orders[cursor].amount;\\n        }\\n\\n        if (gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        }\\n\\n        gn.orderCounter -= removedCount;\\n        gn.orderTotalAmount -= removedAmount;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 _prevId,\\n        uint48 _nextId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[_prevId].next = _nextId;\\n        gn.orders[_nextId].prev = _prevId;\\n    }\\n\\n    function _calculateFutureValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * Constants.PRICE_DIGIT).div(unitPrice);\\n    }\\n\\n    function _calculatePresentValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * unitPrice).div(Constants.PRICE_DIGIT);\\n    }\\n}\\n\",\"keccak256\":\"0x1a1eec10a8450d2b864412d13b7d0c5c82089dcf4a195905c2865722d678db80\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/OrderActionLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {OrderBookLib, FilledOrder, PartiallyFilledOrder} from \\\"../OrderBookLib.sol\\\";\\nimport {ProtocolTypes} from \\\"../../types/ProtocolTypes.sol\\\";\\nimport {LendingMarketStorage as Storage} from \\\"../../storages/LendingMarketStorage.sol\\\";\\nimport {OrderReaderLogic} from \\\"./OrderReaderLogic.sol\\\";\\n\\nlibrary OrderActionLogic {\\n    using OrderBookLib for OrderBookLib.OrderBook;\\n\\n    struct OrderExecutionConditions {\\n        bool isFilled;\\n        uint256 executedUnitPrice;\\n        bool ignoreRemainingAmount;\\n        bool orderExists;\\n    }\\n\\n    struct PlacedOrder {\\n        uint48 orderId;\\n        uint256 amount;\\n        uint256 unitPrice;\\n    }\\n\\n    struct FillOrdersVars {\\n        uint8 orderBookId;\\n        uint256 remainingAmount;\\n        bool orderExists;\\n    }\\n\\n    event OrderCanceled(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n\\n    event OrdersCleaned(\\n        uint48[] orderIds,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 futureValue\\n    );\\n\\n    event OrderExecuted(\\n        address indexed user,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 indexed maturity,\\n        uint256 inputAmount,\\n        uint256 inputUnitPrice,\\n        uint256 filledAmount,\\n        uint256 filledUnitPrice,\\n        uint256 filledFutureValue,\\n        uint48 placedOrderId,\\n        uint256 placedAmount,\\n        uint256 placedUnitPrice,\\n        bool isCircuitBreakerTriggered\\n    );\\n\\n    event PreOrderExecuted(\\n        address indexed user,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 indexed maturity,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        uint48 orderId\\n    );\\n\\n    event PositionUnwound(\\n        address indexed user,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 indexed maturity,\\n        uint256 inputFutureValue,\\n        uint256 filledAmount,\\n        uint256 filledUnitPrice,\\n        uint256 filledFutureValue,\\n        bool isCircuitBreakerTriggered\\n    );\\n\\n    function cancelOrder(\\n        uint8 _orderBookId,\\n        address _user,\\n        uint48 _orderId\\n    ) external {\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n\\n        (ProtocolTypes.Side side, uint256 removedAmount, uint256 unitPrice) = orderBook.removeOrder(\\n            _user,\\n            _orderId\\n        );\\n\\n        emit OrderCanceled(\\n            _orderId,\\n            _user,\\n            side,\\n            Storage.slot().ccy,\\n            orderBook.maturity,\\n            removedAmount,\\n            unitPrice\\n        );\\n    }\\n\\n    function cleanUpOrders(uint8 _orderBookId, address _user)\\n        external\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        )\\n    {\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n        maturity = orderBook.userCurrentMaturities[_user];\\n\\n        uint48[] memory lendOrderIds;\\n        uint48[] memory borrowOrderIds;\\n\\n        (\\n            lendOrderIds,\\n            activeLendOrderCount,\\n            removedLendOrderFutureValue,\\n            removedLendOrderAmount\\n        ) = _cleanLendOrders(_orderBookId, _user);\\n\\n        (\\n            borrowOrderIds,\\n            activeBorrowOrderCount,\\n            removedBorrowOrderFutureValue,\\n            removedBorrowOrderAmount\\n        ) = _cleanBorrowOrders(_orderBookId, _user);\\n\\n        if (removedLendOrderAmount > 0) {\\n            emit OrdersCleaned(\\n                lendOrderIds,\\n                _user,\\n                ProtocolTypes.Side.LEND,\\n                Storage.slot().ccy,\\n                orderBook.maturity,\\n                removedLendOrderAmount,\\n                removedLendOrderFutureValue\\n            );\\n        }\\n\\n        if (removedBorrowOrderAmount > 0) {\\n            emit OrdersCleaned(\\n                borrowOrderIds,\\n                _user,\\n                ProtocolTypes.Side.BORROW,\\n                Storage.slot().ccy,\\n                orderBook.maturity,\\n                removedBorrowOrderAmount,\\n                removedBorrowOrderFutureValue\\n            );\\n        }\\n    }\\n\\n    function executeOrder(\\n        uint8 _orderBookId,\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice,\\n        uint256 _circuitBreakerLimitRange\\n    )\\n        external\\n        returns (FilledOrder memory filledOrder, PartiallyFilledOrder memory partiallyFilledOrder)\\n    {\\n        require(_amount > 0, \\\"Amount is zero\\\");\\n        _updateUserMaturity(_orderBookId, _user);\\n\\n        OrderExecutionConditions memory conditions;\\n        PlacedOrder memory placedOrder;\\n        bool isCircuitBreakerTriggered;\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n\\n        (\\n            conditions.isFilled,\\n            conditions.executedUnitPrice,\\n            conditions.ignoreRemainingAmount,\\n            conditions.orderExists\\n        ) = orderBook.getOrderExecutionConditions(_side, _unitPrice, _circuitBreakerLimitRange);\\n\\n        if (conditions.isFilled) {\\n            (\\n                filledOrder,\\n                partiallyFilledOrder,\\n                placedOrder,\\n                isCircuitBreakerTriggered\\n            ) = _fillOrders(\\n                _orderBookId,\\n                _side,\\n                _user,\\n                _amount,\\n                conditions.executedUnitPrice,\\n                conditions.ignoreRemainingAmount\\n            );\\n        } else {\\n            if (!conditions.ignoreRemainingAmount) {\\n                placedOrder = PlacedOrder(\\n                    _placeOrder(_orderBookId, _side, _user, _amount, conditions.executedUnitPrice),\\n                    _amount,\\n                    conditions.executedUnitPrice\\n                );\\n            }\\n\\n            isCircuitBreakerTriggered = _unitPrice == 0\\n                ? conditions.orderExists\\n                : _unitPrice != conditions.executedUnitPrice;\\n        }\\n\\n        emit OrderExecuted(\\n            _user,\\n            _side,\\n            Storage.slot().ccy,\\n            orderBook.maturity,\\n            _amount,\\n            _unitPrice,\\n            filledOrder.amount,\\n            filledOrder.unitPrice,\\n            filledOrder.futureValue,\\n            placedOrder.orderId,\\n            placedOrder.amount,\\n            placedOrder.unitPrice,\\n            isCircuitBreakerTriggered\\n        );\\n    }\\n\\n    function executePreOrder(\\n        uint8 _orderBookId,\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) external {\\n        require(_amount > 0, \\\"Amount is zero\\\");\\n\\n        _updateUserMaturity(_orderBookId, _user);\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n\\n        if (\\n            (_side == ProtocolTypes.Side.LEND && orderBook.hasBorrowOrder(_user)) ||\\n            (_side == ProtocolTypes.Side.BORROW && orderBook.hasLendOrder(_user))\\n        ) {\\n            revert(\\\"Opposite side order exists\\\");\\n        }\\n\\n        uint48 orderId = _placeOrder(_orderBookId, _side, _user, _amount, _unitPrice);\\n        orderBook.isPreOrder[orderId] = true;\\n\\n        emit PreOrderExecuted(\\n            _user,\\n            _side,\\n            Storage.slot().ccy,\\n            orderBook.maturity,\\n            _amount,\\n            _unitPrice,\\n            orderId\\n        );\\n    }\\n\\n    function unwindPosition(\\n        uint8 _orderBookId,\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _futureValue,\\n        uint256 _circuitBreakerLimitRange\\n    )\\n        external\\n        returns (FilledOrder memory filledOrder, PartiallyFilledOrder memory partiallyFilledOrder)\\n    {\\n        require(_futureValue > 0, \\\"Can't place empty future value amount\\\");\\n\\n        OrderExecutionConditions memory conditions;\\n        bool isCircuitBreakerTriggered;\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n\\n        (\\n            conditions.isFilled,\\n            conditions.executedUnitPrice,\\n            conditions.ignoreRemainingAmount,\\n            conditions.orderExists\\n        ) = orderBook.getOrderExecutionConditions(_side, 0, _circuitBreakerLimitRange);\\n\\n        if (conditions.isFilled) {\\n            (filledOrder, partiallyFilledOrder, isCircuitBreakerTriggered) = _unwindPosition(\\n                _orderBookId,\\n                _side,\\n                _futureValue,\\n                conditions.executedUnitPrice\\n            );\\n        } else {\\n            isCircuitBreakerTriggered = conditions.orderExists;\\n        }\\n\\n        emit PositionUnwound(\\n            _user,\\n            _side,\\n            Storage.slot().ccy,\\n            orderBook.maturity,\\n            _futureValue,\\n            filledOrder.amount,\\n            filledOrder.unitPrice,\\n            filledOrder.futureValue,\\n            isCircuitBreakerTriggered\\n        );\\n    }\\n\\n    function _updateUserMaturity(uint8 _orderBookId, address _user) private {\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n        uint256 userMaturity = orderBook.userCurrentMaturities[_user];\\n        require(\\n            userMaturity == orderBook.maturity ||\\n                (userMaturity != orderBook.maturity &&\\n                    orderBook.activeLendOrderIds[_user].length == 0 &&\\n                    orderBook.activeBorrowOrderIds[_user].length == 0),\\n            \\\"Order found in past maturity\\\"\\n        );\\n\\n        if (userMaturity != orderBook.maturity) {\\n            orderBook.userCurrentMaturities[_user] = orderBook.maturity;\\n        }\\n    }\\n\\n    function _cleanLendOrders(uint8 _orderBookId, address _user)\\n        internal\\n        returns (\\n            uint48[] memory orderIds,\\n            uint256 activeOrderCount,\\n            uint256 removedFutureValue,\\n            uint256 removedOrderAmount\\n        )\\n    {\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n\\n        (uint48[] memory activeLendOrderIds, uint48[] memory inActiveLendOrderIds) = orderBook\\n            .getLendOrderIds(_user);\\n\\n        orderBook.activeLendOrderIds[_user] = activeLendOrderIds;\\n        activeOrderCount = activeLendOrderIds.length;\\n        uint256 inactiveOrderCount = inActiveLendOrderIds.length;\\n        orderIds = new uint48[](inactiveOrderCount);\\n\\n        for (uint256 i = 0; i < inactiveOrderCount; i++) {\\n            (uint256 presentValue, uint256 futureValue) = OrderReaderLogic.getLendOrderAmounts(\\n                orderBook,\\n                inActiveLendOrderIds[i]\\n            );\\n\\n            removedOrderAmount += presentValue;\\n            removedFutureValue += futureValue;\\n            orderIds[i] = inActiveLendOrderIds[i];\\n        }\\n    }\\n\\n    function _cleanBorrowOrders(uint8 _orderBookId, address _user)\\n        internal\\n        returns (\\n            uint48[] memory orderIds,\\n            uint256 activeOrderCount,\\n            uint256 removedFutureValue,\\n            uint256 removedOrderAmount\\n        )\\n    {\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n\\n        (uint48[] memory activeBorrowOrderIds, uint48[] memory inActiveBorrowOrderIds) = orderBook\\n            .getBorrowOrderIds(_user);\\n\\n        orderBook.activeBorrowOrderIds[_user] = activeBorrowOrderIds;\\n        activeOrderCount = activeBorrowOrderIds.length;\\n        uint256 inactiveOrderCount = inActiveBorrowOrderIds.length;\\n        orderIds = new uint48[](inactiveOrderCount);\\n\\n        for (uint256 i = 0; i < inactiveOrderCount; i++) {\\n            (uint256 presentValue, uint256 futureValue) = OrderReaderLogic.getBorrowOrderAmounts(\\n                orderBook,\\n                inActiveBorrowOrderIds[i]\\n            );\\n\\n            removedOrderAmount += presentValue;\\n            removedFutureValue += futureValue;\\n            orderIds[i] = inActiveBorrowOrderIds[i];\\n        }\\n    }\\n\\n    /**\\n     * @notice Makes a new order in the order book.\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _user User's address\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _unitPrice Preferable interest unit price\\n     */\\n    function _placeOrder(\\n        uint8 _orderBookId,\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) private returns (uint48 orderId) {\\n        orderId = _getOrderBook(_orderBookId).insertOrder(_side, _user, _amount, _unitPrice);\\n    }\\n\\n    /**\\n     * @notice Takes orders in the order book.\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _user User's address\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _unitPrice Unit price taken\\n     * @param _ignoreRemainingAmount Boolean for whether to ignore the remaining amount after filling orders\\n     */\\n    function _fillOrders(\\n        uint8 _orderBookId,\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice,\\n        bool _ignoreRemainingAmount\\n    )\\n        private\\n        returns (\\n            FilledOrder memory filledOrder,\\n            PartiallyFilledOrder memory partiallyFilledOrder,\\n            PlacedOrder memory placedOrder,\\n            bool isCircuitBreakerTriggered\\n        )\\n    {\\n        FillOrdersVars memory vars;\\n        vars.orderBookId = _orderBookId;\\n\\n        (filledOrder, partiallyFilledOrder, vars.remainingAmount, vars.orderExists) = _getOrderBook(\\n            vars.orderBookId\\n        ).fillOrders(_side, _amount, 0, _unitPrice);\\n\\n        filledOrder.amount = _amount - vars.remainingAmount;\\n\\n        if (vars.remainingAmount > 0) {\\n            if (_ignoreRemainingAmount) {\\n                filledOrder.ignoredAmount = vars.remainingAmount;\\n            } else {\\n                // Make a new order for the remaining amount of input\\n                placedOrder = PlacedOrder(\\n                    _placeOrder(vars.orderBookId, _side, _user, vars.remainingAmount, _unitPrice),\\n                    vars.remainingAmount,\\n                    _unitPrice\\n                );\\n            }\\n        }\\n\\n        isCircuitBreakerTriggered =\\n            vars.orderExists &&\\n            _ignoreRemainingAmount &&\\n            _amount != filledOrder.amount;\\n    }\\n\\n    function _unwindPosition(\\n        uint8 _orderBookId,\\n        ProtocolTypes.Side _side,\\n        uint256 _futureValue,\\n        uint256 _unitPrice\\n    )\\n        private\\n        returns (\\n            FilledOrder memory filledOrder,\\n            PartiallyFilledOrder memory partiallyFilledOrder,\\n            bool isCircuitBreakerTriggered\\n        )\\n    {\\n        bool orderExists;\\n\\n        (filledOrder, partiallyFilledOrder, , orderExists) = _getOrderBook(_orderBookId).fillOrders(\\n            _side,\\n            0,\\n            _futureValue,\\n            _unitPrice\\n        );\\n\\n        isCircuitBreakerTriggered = orderExists && _futureValue != filledOrder.futureValue;\\n    }\\n\\n    function _getOrderBook(uint8 _orderBookId)\\n        private\\n        view\\n        returns (OrderBookLib.OrderBook storage)\\n    {\\n        return Storage.slot().orderBooks[_orderBookId];\\n    }\\n}\\n\",\"keccak256\":\"0xc859f99caf25bffc5f564b2c2656950ac05fd321a0a14f91d471dcca73586f3b\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/OrderBookLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {OrderBookLib, FilledOrder, PartiallyFilledOrder} from \\\"../OrderBookLib.sol\\\";\\nimport {ProtocolTypes} from \\\"../../types/ProtocolTypes.sol\\\";\\nimport {LendingMarketStorage as Storage, ItayoseLog} from \\\"../../storages/LendingMarketStorage.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\n\\nlibrary OrderBookLogic {\\n    using OrderBookLib for OrderBookLib.OrderBook;\\n    using RoundingUint256 for uint256;\\n\\n    event OrderBookCreated(uint8 orderBookId, uint256 maturity, uint256 openingDate);\\n\\n    event ItayoseExecuted(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 openingUnitPrice,\\n        uint256 lastLendUnitPrice,\\n        uint256 lastBorrowUnitPrice,\\n        uint256 offsetAmount\\n    );\\n\\n    function getOrderBookDetail(uint8 _orderBookId)\\n        public\\n        view\\n        returns (\\n            bytes32 ccy,\\n            uint256 maturity,\\n            uint256 openingDate,\\n            uint256 borrowUnitPrice,\\n            uint256 lendUnitPrice,\\n            uint256 midUnitPrice,\\n            uint256 openingUnitPrice,\\n            bool isReady\\n        )\\n    {\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n\\n        ccy = Storage.slot().ccy;\\n        maturity = orderBook.maturity;\\n        openingDate = orderBook.openingDate;\\n        borrowUnitPrice = orderBook.getBestLendUnitPrice();\\n        lendUnitPrice = orderBook.getBestBorrowUnitPrice();\\n        midUnitPrice = getMidUnitPrice(_orderBookId);\\n        openingUnitPrice = Storage.slot().itayoseLogs[orderBook.maturity].openingUnitPrice;\\n        isReady = Storage.slot().isReady[maturity];\\n    }\\n\\n    function getCircuitBreakerThresholds(uint8 _orderBookId, uint256 _circuitBreakerLimitRange)\\n        external\\n        view\\n        returns (uint256 maxLendUnitPrice, uint256 minBorrowUnitPrice)\\n    {\\n        return _getOrderBook(_orderBookId).getCircuitBreakerThresholds(_circuitBreakerLimitRange);\\n    }\\n\\n    function getBestLendUnitPrice(uint8 _orderBookId) public view returns (uint256) {\\n        return _getOrderBook(_orderBookId).getBestLendUnitPrice();\\n    }\\n\\n    function getBestLendUnitPrices(uint8[] memory _orderBookIds)\\n        external\\n        view\\n        returns (uint256[] memory unitPrices)\\n    {\\n        unitPrices = new uint256[](_orderBookIds.length);\\n\\n        for (uint256 i; i < _orderBookIds.length; i++) {\\n            unitPrices[i] = _getOrderBook(_orderBookIds[i]).getBestLendUnitPrice();\\n        }\\n    }\\n\\n    function getBestBorrowUnitPrice(uint8 _orderBookId) public view returns (uint256) {\\n        return _getOrderBook(_orderBookId).getBestBorrowUnitPrice();\\n    }\\n\\n    function getBestBorrowUnitPrices(uint8[] memory _orderBookIds)\\n        external\\n        view\\n        returns (uint256[] memory unitPrices)\\n    {\\n        unitPrices = new uint256[](_orderBookIds.length);\\n\\n        for (uint256 i; i < _orderBookIds.length; i++) {\\n            unitPrices[i] = _getOrderBook(_orderBookIds[i]).getBestBorrowUnitPrice();\\n        }\\n    }\\n\\n    function getMidUnitPrice(uint8 _orderBookId) public view returns (uint256) {\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n        uint256 borrowUnitPrice = orderBook.getBestLendUnitPrice();\\n        uint256 lendUnitPrice = orderBook.getBestBorrowUnitPrice();\\n        return (borrowUnitPrice + lendUnitPrice).div(2);\\n    }\\n\\n    function getMidUnitPrices(uint8[] memory _orderBookIds)\\n        external\\n        view\\n        returns (uint256[] memory unitPrices)\\n    {\\n        unitPrices = new uint256[](_orderBookIds.length);\\n\\n        for (uint256 i; i < _orderBookIds.length; i++) {\\n            unitPrices[i] = getMidUnitPrice(_orderBookIds[i]);\\n        }\\n    }\\n\\n    function getBorrowOrderBook(uint8 _orderBookId, uint256 _limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        return _getOrderBook(_orderBookId).getBorrowOrderBook(_limit);\\n    }\\n\\n    function getLendOrderBook(uint8 _orderBookId, uint256 _limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        return _getOrderBook(_orderBookId).getLendOrderBook(_limit);\\n    }\\n\\n    function getMaturities(uint8[] memory _orderBookIds)\\n        public\\n        view\\n        returns (uint256[] memory maturities)\\n    {\\n        maturities = new uint256[](_orderBookIds.length);\\n\\n        for (uint256 i; i < _orderBookIds.length; i++) {\\n            maturities[i] = _getOrderBook(_orderBookIds[i]).maturity;\\n        }\\n    }\\n\\n    function createOrderBook(uint256 _maturity, uint256 _openingDate)\\n        public\\n        returns (uint8 orderBookId)\\n    {\\n        orderBookId = _nextOrderBookId();\\n\\n        Storage.slot().isReady[_maturity] = _getOrderBook(orderBookId).initialize(\\n            _maturity,\\n            _openingDate\\n        );\\n\\n        emit OrderBookCreated(orderBookId, _maturity, _openingDate);\\n    }\\n\\n    function reopenOrderBook(\\n        uint8 _orderBookId,\\n        uint256 _newMaturity,\\n        uint256 _openingDate\\n    ) external {\\n        OrderBookLib.OrderBook storage orderBook = Storage.slot().orderBooks[_orderBookId];\\n        require(orderBook.isMatured(), \\\"Market is not matured\\\");\\n        Storage.slot().isReady[_newMaturity] = orderBook.initialize(_newMaturity, _openingDate);\\n    }\\n\\n    function executeItayoseCall(uint8 _orderBookId)\\n        external\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 totalOffsetAmount,\\n            uint256 openingDate,\\n            PartiallyFilledOrder memory partiallyFilledLendingOrder,\\n            PartiallyFilledOrder memory partiallyFilledBorrowingOrder\\n        )\\n    {\\n        uint256 lastLendUnitPrice;\\n        uint256 lastBorrowUnitPrice;\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n\\n        (openingUnitPrice, lastLendUnitPrice, lastBorrowUnitPrice, totalOffsetAmount) = orderBook\\n            .getOpeningUnitPrice();\\n\\n        if (totalOffsetAmount > 0) {\\n            ProtocolTypes.Side[2] memory sides = [\\n                ProtocolTypes.Side.LEND,\\n                ProtocolTypes.Side.BORROW\\n            ];\\n\\n            for (uint256 i; i < sides.length; i++) {\\n                ProtocolTypes.Side partiallyFilledOrderSide;\\n                PartiallyFilledOrder memory partiallyFilledOrder;\\n                (, partiallyFilledOrder, , ) = orderBook.fillOrders(\\n                    sides[i],\\n                    totalOffsetAmount,\\n                    0,\\n                    0\\n                );\\n\\n                if (partiallyFilledOrder.futureValue > 0) {\\n                    if (sides[i] == ProtocolTypes.Side.LEND) {\\n                        partiallyFilledOrderSide = ProtocolTypes.Side.BORROW;\\n                        partiallyFilledBorrowingOrder = partiallyFilledOrder;\\n                    } else {\\n                        partiallyFilledOrderSide = ProtocolTypes.Side.LEND;\\n                        partiallyFilledLendingOrder = partiallyFilledOrder;\\n                    }\\n                }\\n            }\\n\\n            emit ItayoseExecuted(\\n                Storage.slot().ccy,\\n                orderBook.maturity,\\n                openingUnitPrice,\\n                lastLendUnitPrice,\\n                lastBorrowUnitPrice,\\n                totalOffsetAmount\\n            );\\n        }\\n\\n        Storage.slot().isReady[orderBook.maturity] = true;\\n        Storage.slot().itayoseLogs[orderBook.maturity] = ItayoseLog(\\n            openingUnitPrice,\\n            lastLendUnitPrice,\\n            lastBorrowUnitPrice\\n        );\\n        openingDate = orderBook.openingDate;\\n    }\\n\\n    function _nextOrderBookId() internal returns (uint8) {\\n        Storage.slot().lastOrderBookId++;\\n        return Storage.slot().lastOrderBookId;\\n    }\\n\\n    function _getOrderBook(uint8 _orderBookId)\\n        private\\n        view\\n        returns (OrderBookLib.OrderBook storage)\\n    {\\n        return Storage.slot().orderBooks[_orderBookId];\\n    }\\n}\\n\",\"keccak256\":\"0x5a056de5cf1fe6ada0ace2845328e43d3c1da3ccb1c111cfde687dca193de79e\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/OrderReaderLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {OrderBookLib, PlacedOrder} from \\\"../OrderBookLib.sol\\\";\\nimport {ProtocolTypes} from \\\"../../types/ProtocolTypes.sol\\\";\\nimport {LendingMarketStorage as Storage, ItayoseLog} from \\\"../../storages/LendingMarketStorage.sol\\\";\\nimport {OrderStatisticsTreeLib, OrderItem} from \\\"../OrderStatisticsTreeLib.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\n\\nlibrary OrderReaderLogic {\\n    using OrderBookLib for OrderBookLib.OrderBook;\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n    using RoundingUint256 for uint256;\\n\\n    function isMatured(uint8 _orderBookId) external view returns (bool) {\\n        return _getOrderBook(_orderBookId).isMatured();\\n    }\\n\\n    function getOrder(uint8 _orderBookId, uint48 _orderId)\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp,\\n            bool isPreOrder\\n        )\\n    {\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n        PlacedOrder memory order = orderBook.orders[_orderId];\\n\\n        OrderItem memory orderItem;\\n        if (order.side == ProtocolTypes.Side.LEND) {\\n            orderItem = orderBook.lendOrders[order.maturity].getOrderById(\\n                order.unitPrice,\\n                _orderId\\n            );\\n        } else {\\n            orderItem = orderBook.borrowOrders[order.maturity].getOrderById(\\n                order.unitPrice,\\n                _orderId\\n            );\\n        }\\n\\n        if (orderItem.maker != address(0)) {\\n            side = order.side;\\n            maturity = order.maturity;\\n            maker = orderItem.maker;\\n            amount = orderItem.amount;\\n            timestamp = orderItem.timestamp;\\n            isPreOrder = orderBook.isPreOrder[_orderId];\\n            unitPrice = _getOrderUnitPrice(side, maturity, order.unitPrice, isPreOrder);\\n        }\\n    }\\n\\n    function getTotalAmountFromLendOrders(uint8 _orderBookId, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n\\n        (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds) = orderBook\\n            .getLendOrderIds(_user);\\n        maturity = orderBook.userCurrentMaturities[_user];\\n\\n        for (uint256 i = 0; i < activeOrderIds.length; i++) {\\n            PlacedOrder memory order = orderBook.orders[activeOrderIds[i]];\\n            // Sum future values in the current maturity.\\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\\n            // as an order canceled in the past market.\\n            OrderItem memory orderItem = orderBook.lendOrders[orderBook.maturity].getOrderById(\\n                order.unitPrice,\\n                activeOrderIds[i]\\n            );\\n            activeAmount += orderItem.amount;\\n        }\\n\\n        for (uint256 i = 0; i < inActiveOrderIds.length; i++) {\\n            // Sum future values in the maturity of orders.\\n            // It will be the future value when the order is created, even if the market is rotated\\n            // and maturity is updated.\\n            (uint256 presentValue, uint256 futureValue) = getLendOrderAmounts(\\n                orderBook,\\n                inActiveOrderIds[i]\\n            );\\n            inactiveAmount += presentValue;\\n            inactiveFutureValue += futureValue;\\n        }\\n    }\\n\\n    function getTotalAmountFromBorrowOrders(uint8 _orderBookId, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n\\n        (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds) = orderBook\\n            .getBorrowOrderIds(_user);\\n        maturity = orderBook.userCurrentMaturities[_user];\\n\\n        for (uint256 i = 0; i < activeOrderIds.length; i++) {\\n            PlacedOrder memory order = orderBook.orders[activeOrderIds[i]];\\n            // Sum future values in the current maturity.\\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\\n            // as an order canceled in the past market.\\n            OrderItem memory orderItem = orderBook.borrowOrders[orderBook.maturity].getOrderById(\\n                order.unitPrice,\\n                activeOrderIds[i]\\n            );\\n            activeAmount += orderItem.amount;\\n        }\\n\\n        maturity = orderBook.userCurrentMaturities[_user];\\n\\n        for (uint256 i = 0; i < inActiveOrderIds.length; i++) {\\n            // Sum future values in the maturity of orders\\n            // It will be the future value when the order is created, even if the market is rotated\\n            // and maturity is updated.\\n            (uint256 presentValue, uint256 futureValue) = getBorrowOrderAmounts(\\n                orderBook,\\n                inActiveOrderIds[i]\\n            );\\n            inactiveAmount += presentValue;\\n            inactiveFutureValue += futureValue;\\n        }\\n    }\\n\\n    function getLendOrderIds(uint8 _orderBookId, address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        (activeOrderIds, inActiveOrderIds) = _getOrderBook(_orderBookId).getLendOrderIds(_user);\\n    }\\n\\n    function getBorrowOrderIds(uint8 _orderBookId, address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        (activeOrderIds, inActiveOrderIds) = _getOrderBook(_orderBookId).getBorrowOrderIds(_user);\\n    }\\n\\n    function calculateFilledAmount(\\n        uint8 _orderBookId,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice,\\n        uint256 _circuitBreakerLimitRange\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV\\n        )\\n    {\\n        return\\n            _getOrderBook(_orderBookId).calculateFilledAmount(\\n                _side,\\n                _amount,\\n                _unitPrice,\\n                _circuitBreakerLimitRange\\n            );\\n    }\\n\\n    function getLendOrderAmounts(OrderBookLib.OrderBook storage orderBook, uint48 _orderId)\\n        public\\n        view\\n        returns (uint256 presentValue, uint256 futureValue)\\n    {\\n        PlacedOrder memory order = orderBook.orders[_orderId];\\n        OrderItem memory orderItem = orderBook.lendOrders[order.maturity].getOrderById(\\n            order.unitPrice,\\n            _orderId\\n        );\\n\\n        uint256 unitPrice = _getOrderUnitPrice(\\n            order.side,\\n            order.maturity,\\n            order.unitPrice,\\n            orderBook.isPreOrder[_orderId]\\n        );\\n\\n        presentValue = orderItem.amount;\\n        futureValue = (orderItem.amount * Constants.PRICE_DIGIT).div(unitPrice);\\n    }\\n\\n    function getBorrowOrderAmounts(OrderBookLib.OrderBook storage orderBook, uint48 _orderId)\\n        public\\n        view\\n        returns (uint256 presentValue, uint256 futureValue)\\n    {\\n        PlacedOrder memory order = orderBook.orders[_orderId];\\n        OrderItem memory orderItem = orderBook.borrowOrders[order.maturity].getOrderById(\\n            order.unitPrice,\\n            _orderId\\n        );\\n        uint256 unitPrice = _getOrderUnitPrice(\\n            order.side,\\n            order.maturity,\\n            order.unitPrice,\\n            orderBook.isPreOrder[_orderId]\\n        );\\n\\n        presentValue = orderItem.amount;\\n        futureValue = (orderItem.amount * Constants.PRICE_DIGIT).div(unitPrice);\\n    }\\n\\n    function _getOrderUnitPrice(\\n        ProtocolTypes.Side _side,\\n        uint256 _maturity,\\n        uint256 _unitPrice,\\n        bool _isPreOrder\\n    ) private view returns (uint256) {\\n        if (!_isPreOrder) return _unitPrice;\\n        ItayoseLog memory itayoseLog = Storage.slot().itayoseLogs[_maturity];\\n        if (\\n            itayoseLog.openingUnitPrice != 0 &&\\n            ((_side == ProtocolTypes.Side.BORROW && _unitPrice <= itayoseLog.lastBorrowUnitPrice) ||\\n                (_side == ProtocolTypes.Side.LEND && _unitPrice >= itayoseLog.lastLendUnitPrice))\\n        ) {\\n            return itayoseLog.openingUnitPrice;\\n        } else {\\n            return _unitPrice;\\n        }\\n    }\\n\\n    function _getOrderBook(uint8 _orderBookId)\\n        private\\n        view\\n        returns (OrderBookLib.OrderBook storage)\\n    {\\n        return Storage.slot().orderBooks[_orderBookId];\\n    }\\n}\\n\",\"keccak256\":\"0x5c333274b3314373e212aa5e75aa1861860eab38a93d8bf2fe534e28cd8e3ca5\",\"license\":\"MIT\"},\"contracts/protocol/libraries/math/RoundingUint256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoundingUint256 {\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0);\\n\\n        if ((a * 10) / b - (a / b) * 10 < 5) {\\n            return a / b;\\n        } else {\\n            return (a / b) + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc360f39a82f1a9a7454726e3db802407d305b5e525aa8c3236fe49ca6ca534d\",\"license\":\"MIT\"},\"contracts/protocol/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AddressResolverLib} from \\\"../libraries/AddressResolverLib.sol\\\";\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/mixins/MixinAddressResolverStorage.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    modifier onlyAcceptedContracts() {\\n        require(isAcceptedContract(msg.sender), \\\"Only Accepted Contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the contract names used in this contract.\\n     * @dev The contract name list is in `./libraries/Contracts.sol`.\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @notice Returns contract names that can call this contract.\\n     * @dev The contact name listed in this method is also needed to be listed `requiredContracts` method.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = Storage.slot().resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            Storage.slot().addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n\\n        afterBuildCache();\\n    }\\n\\n    /**\\n     * @notice Executes after the cache is built.\\n     */\\n    function afterBuildCache() internal virtual {}\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                Storage.slot().resolver.getAddress(name) != Storage.slot().addressCache[name] ||\\n                Storage.slot().addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        require(address(Storage.slot().resolver) == address(0), \\\"Resolver registered already\\\");\\n        Storage.slot().resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        return AddressResolverLib.getAddress(name);\\n    }\\n\\n    function resolver() public view returns (IAddressResolver) {\\n        return Storage.slot().resolver;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return AddressResolverLib.beaconProxyController();\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return AddressResolverLib.currencyController();\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return AddressResolverLib.genesisValueVault();\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return AddressResolverLib.reserveFund();\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return AddressResolverLib.lendingMarketController();\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return AddressResolverLib.tokenVault();\\n    }\\n}\\n\",\"keccak256\":\"0x986da1a75862de2268c3acb537a5c221905e74b3b2e2dd95513383609e866c00\",\"license\":\"MIT\"},\"contracts/protocol/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../dependencies/chainlink/AggregatorV3Interface.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct Currency {\\n    bool isSupported;\\n    string name;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.currencyController\\\");\\n\\n    struct Storage {\\n        bytes32 baseCurrency;\\n        // Protocol currencies\\n        EnumerableSet.Bytes32Set currencies;\\n        mapping(bytes32 => uint256) haircuts;\\n        // Array of the price feeds\\n        mapping(bytes32 => AggregatorV3Interface[]) priceFeeds;\\n        // Total cached decimals of the price feeds\\n        mapping(bytes32 => uint8) decimalsCaches;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x10554d924ecab6bca0b4e0696c8b44b8629a35f552b79f9cadaef1b18ccab98c\",\"license\":\"MIT\"},\"contracts/protocol/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nstruct AutoRollLog {\\n    uint256 unitPrice;\\n    uint256 lendingCompoundFactor;\\n    uint256 borrowingCompoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.genesisValueVault\\\");\\n\\n    struct Storage {\\n        mapping(bytes32 => bool) isInitialized;\\n        mapping(bytes32 => uint256) initialCompoundFactors;\\n        mapping(bytes32 => uint256) lendingCompoundFactors;\\n        mapping(bytes32 => uint256) borrowingCompoundFactors;\\n        mapping(bytes32 => uint256) currentMaturity;\\n        mapping(bytes32 => uint8) decimals;\\n        // Mapping from user to balance per currency\\n        mapping(bytes32 => mapping(address => int256)) balances;\\n        mapping(bytes32 => uint256) totalLendingSupplies;\\n        mapping(bytes32 => uint256) totalBorrowingSupplies;\\n        // Mapping from maturity balance per currency\\n        mapping(bytes32 => mapping(uint256 => int256)) maturityBalances;\\n        // Mapping from maturity to auto-roll log per currency\\n        mapping(bytes32 => mapping(uint256 => AutoRollLog)) autoRollLogs;\\n        // Mapping from user to maturity per currency\\n        mapping(bytes32 => mapping(address => uint256)) userMaturities;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x887ce7f8c0dbbd8c7f6310e109fa6bf14b5520068d299fcf224faae13bd8de46\",\"license\":\"MIT\"},\"contracts/protocol/storages/LendingMarketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {OrderStatisticsTreeLib} from \\\"../libraries/OrderStatisticsTreeLib.sol\\\";\\nimport {OrderBookLib} from \\\"../libraries/OrderBookLib.sol\\\";\\n\\nstruct ItayoseLog {\\n    uint256 openingUnitPrice;\\n    uint256 lastLendUnitPrice;\\n    uint256 lastBorrowUnitPrice;\\n}\\n\\nlibrary LendingMarketStorage {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarket\\\");\\n\\n    struct Storage {\\n        bytes32 ccy;\\n        uint8 lastOrderBookId;\\n        // Mapping from order book id to order book\\n        mapping(uint8 => OrderBookLib.OrderBook) orderBooks;\\n        // Mapping from maturity to boolean if the market is ready or not per maturity\\n        mapping(uint256 => bool) isReady;\\n        // // Mapping from maturity to Itayose log\\n        mapping(uint256 => ItayoseLog) itayoseLogs;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6b2b1a9302364f9eb960de82fc82ef333f868375e645b8f0545c20fadf201bee\",\"license\":\"MIT\"},\"contracts/protocol/storages/mixins/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressResolver} from \\\"../../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.mixinAddressResolver\\\");\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 => address) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44cd2358adc27b82cf3b9a498ada2646991684634ee0f3d67a42ecebd333a9d3\",\"license\":\"MIT\"},\"contracts/protocol/storages/utils/PausableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary PausableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.pausable\\\");\\n\\n    struct Storage {\\n        bool paused;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa32c444c8033da4a894a14b1a517f6d6943f74160bd1904c2f64e349f7aa37bd\",\"license\":\"MIT\"},\"contracts/protocol/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0x7b05f97661e6dfe1142eec9be3dcf86d1eec55ed4fb1dea4a5859f75a0c84c13\",\"license\":\"MIT\"},\"contracts/protocol/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/Context.sol\\\";\\nimport \\\"../storages/utils/PausableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return PausableStorage.slot().paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage.slot().paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage.slot().paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x1d89adc36e2b83f33f7a894ea9bf6bc8fc5d0caf455f2f9b00464cdc84dac209\",\"license\":\"MIT\"},\"contracts/protocol/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/StorageSlot.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0xdb6cbda85e2d1916be6181a6ffcee116408bfc867c2da2e25056b3fdea2e51b3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061311f806100206000396000f3fe608060405234801561001057600080fd5b50600436106102695760003560e01c80636a5138d611610151578063cd458662116100c3578063e099765911610087578063e0997659146103c0578063f3f7f452146106c7578063f506ad30146106da578063f8044e6c14610722578063ff5cce9714610735578063fffa87b81461074857600080fd5b8063cd45866214610640578063cdbd403e14610653578063cf37c59d14610666578063de9f5fed14610679578063df16328d1461069f57600080fd5b8063936d6d2e11610115578063936d6d2e146105a7578063a03738dc146105ba578063a4ff243a146105c2578063a779b94a14610607578063be13f47c1461061a578063c9c000991461062d57600080fd5b80636a5138d6146104b45780636d9bf95a146104c757806380d5b609146104fc57806382bdfed514610572578063932c93851461058557600080fd5b8063381e9344116101ea578063584795fb116101ae578063584795fb1461040d57806358e64897146104205780635c975abb146104415780635f7f8b45146104595780635fee0bba1461046c5780636945c1fd1461048d57600080fd5b8063381e93441461039a57806338b05852146103ad5780633d03b9da146103c05780634ea469d5146103d557806357673717146103fa57600080fd5b80631e0b71a3116102315780631e0b71a314610323578063261cc1b21461034357806329985e5a1461036757806329d6dd131461036f5780632af64bd31461039257600080fd5b806302de7aa81461026e57806304f3bcec1461029857806313a4451c146102b85780631610c7ce146102eb5780631c03b6ea146102f5575b600080fd5b61028161027c36600461234e565b61075b565b60405161028f9291906123e7565b60405180910390f35b6102a06108b3565b6040516001600160a01b03909116815260200161028f565b6102cb6102c636600461241f565b6108d4565b60408051948552602085019390935291830152606082015260800161028f565b6102f3610982565b005b610308610303366004612458565b6109b1565b6040805193845260208401929092529082015260600161028f565b61033661033136600461253d565b610a56565b60405161028f9190612617565b61035661035136600461262a565b610aea565b60405161028f959493929190612647565b6102f3610c1b565b61038261037d36600461262a565b610dc9565b604051901515815260200161028f565b610382610e42565b6103826103a836600461262a565b610fa8565b6103366103bb36600461253d565b610fda565b6103c8611014565b60405161028f9190612681565b6103e86103e33660046126c5565b611079565b60405160ff909116815260200161028f565b61033661040836600461253d565b611131565b6102cb61041b36600461241f565b61116b565b61043361042e36600461262a565b6111bd565b60405190815260200161028f565b6000805160206130ca8339815191525460ff16610382565b61043361046736600461262a565b611246565b61047f61047a36600461241f565b611283565b60405161028f92919061271f565b7ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0a54610433565b6103826104c236600461262a565b61132c565b6104da6104d536600461274d565b611362565b604080518251815260208084015190820152918101519082015260600161028f565b61050f61050a36600461262a565b6113de565b60405161028f9190600061010082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e0830151151560e083015292915050565b61038261058036600461262a565b6114dd565b610598610593366004612766565b611565565b60405161028f93929190612792565b6104336105b536600461262a565b61160a565b6102f3611641565b6104336105d036600461262a565b60ff1660009081527ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0c602052604090206002015490565b6102816106153660046127cb565b61166e565b6102f3610628366004612826565b6117ba565b6102f361063b366004612844565b611966565b61033661064e36600461253d565b611a03565b6102f36106613660046127cb565b611a3d565b61043361067436600461262a565b611b37565b61068c61068736600461288d565b611b74565b60405161028f97969594939291906128dd565b6106b26106ad366004612766565b611c2e565b6040805192835260208301919091520161028f565b6102f36106d5366004612926565b611cbe565b6106ed6106e836600461241f565b611e43565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e00161028f565b610598610730366004612766565b611ee6565b61047f61074336600461241f565b611f2e565b61038261075636600461262a565b611f7f565b6107866040518060800160405280600081526020016000815260200160008152602001600081525090565b61078e6122e4565b610796611fb9565b61079f3361200c565b6107c45760405162461bcd60e51b81526004016107bb90612971565b60405180910390fd5b876107ce8161132c565b6108115760405162461bcd60e51b815260206004820152601460248201527313585c9ad95d081a5cc81b9bdd081bdc195b995960621b60448201526064016107bb565b60405163223932df60e11b815273D99836e31D99773c840274bA6270E042cB4F93E89063447265be90610852908c908c908c908c908c908c906004016129a8565b6101006040518083038186803b15801561086b57600080fd5b505af415801561087f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a39190612a44565b9250925050965096945050505050565b60006000805160206130aa8339815191525b546001600160a01b0316919050565b6040516304e9114760e21b815260ff831660048201526001600160a01b0382166024820152600090819081908190730bE18af3fF686010BfC856caf64aF7c7B3e820a8906313a4451c906044015b60806040518083038186803b15801561093a57600080fd5b505af415801561094e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109729190612aac565b9299919850965090945092505050565b61098b3361200c565b6109a75760405162461bcd60e51b81526004016107bb90612971565b6109af612086565b565b6000806000730bE18af3fF686010BfC856caf64aF7c7B3e820a8632ae0b85b89898989896040518663ffffffff1660e01b81526004016109f5959493929190612ae2565b60606040518083038186803b158015610a0d57600080fd5b505af4158015610a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a459190612b15565b925092509250955095509592505050565b604051631e0b71a360e01b815260609073bB8e24710ad0A2C9D7d010991920b24c7eCBc80890631e0b71a390610a90908590600401612b43565b60006040518083038186803b158015610aa857600080fd5b505af4158015610abc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ae49190810190612be4565b92915050565b6000806000610af76122e4565b610aff6122e4565b610b07611fb9565b610b103361200c565b610b2c5760405162461bcd60e51b81526004016107bb90612971565b85610b3681610fa8565b610b825760405162461bcd60e51b815260206004820152601960248201527f4e6f7420696e2074686520497461796f736520706572696f640000000000000060448201526064016107bb565b60405163130e60d960e11b815260ff8816600482015273bB8e24710ad0A2C9D7d010991920b24c7eCBc8089063261cc1b2906024016101606040518083038186803b158015610bd057600080fd5b505af4158015610be4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c089190612c21565b939b929a50909850965090945092505050565b6000610c25611014565b905060005b8151811015610dc4576000828281518110610c4757610c47612c74565b602002602001015190506000610c686000805160206130aa83398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd91610cd991869190605d01612cd7565b60206040518083038186803b158015610cf157600080fd5b505afa158015610d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d299190612cf0565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a150508080610dbc90612d23565b915050610c2a565b505b50565b60007ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0d81610e288460ff1660009081527ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0c602052604090206002015490565b815260208101919091526040016000205460ff1692915050565b600080610e4d611014565b905060005b8151811015610f9f576000828281518110610e6f57610e6f612c74565b60200260200101519050610e8e6000805160206130aa83398151915290565b600082815260019190910160205260409020546001600160a01b03166000805160206130aa833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b158015610efb57600080fd5b505afa158015610f0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f339190612cf0565b6001600160a01b0316141580610f7d575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b15610f8c576000935050505090565b5080610f9781612d23565b915050610e52565b50600191505090565b6000610e10610fb68361160a565b610fc09190612d3e565b4210158015610ae45750610fd382610dc9565b1592915050565b604051631c582c2960e11b815260609073bB8e24710ad0A2C9D7d010991920b24c7eCBc808906338b0585290610a90908590600401612b43565b604080516001808252818301909252606091602080830190803683370190505090507f4c656e64696e674d61726b6574436f6e74726f6c6c65720000000000000000008160008151811061106a5761106a612c74565b60200260200101818152505090565b60006110843361200c565b6110a05760405162461bcd60e51b81526004016107bb90612971565b604051634ea469d560e01b8152600481018490526024810183905273bB8e24710ad0A2C9D7d010991920b24c7eCBc80890634ea469d59060440160206040518083038186803b1580156110f257600080fd5b505af4158015611106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112a9190612d55565b9392505050565b604051635767371760e01b815260609073bB8e24710ad0A2C9D7d010991920b24c7eCBc80890635767371790610a90908590600401612b43565b60405163584795fb60e01b815260ff831660048201526001600160a01b0382166024820152600090819081908190730bE18af3fF686010BfC856caf64aF7c7B3e820a89063584795fb90604401610922565b6040516358e6489760e01b815260ff8216600482015260009073bB8e24710ad0A2C9D7d010991920b24c7eCBc808906358e64897906024015b60206040518083038186803b15801561120e57600080fd5b505af4158015611222573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae49190612d72565b604051635f7f8b4560e01b815260ff8216600482015260009073bB8e24710ad0A2C9D7d010991920b24c7eCBc80890635f7f8b45906024016111f6565b604051632ff705dd60e11b815260ff831660048201526001600160a01b03821660248201526060908190730bE18af3fF686010BfC856caf64aF7c7B3e820a890635fee0bba906044015b60006040518083038186803b1580156112e557600080fd5b505af41580156112f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113219190810190612def565b915091509250929050565b600061133782610dc9565b80156113495750611347826114dd565b155b8015610ae457506113598261160a565b42101592915050565b61138660405180606001604052806000815260200160008152602001600081525090565b5060009081527ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0e6020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b61142b604051806101000160405280600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6040516380d5b60960e01b815260ff8316600482015273bB8e24710ad0A2C9D7d010991920b24c7eCBc808906380d5b609906024016101006040518083038186803b15801561147957600080fd5b505af415801561148d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b19190612e68565b151560e089015260c088015260a087015260808601526060850152604084015260208301528152919050565b6040516382bdfed560e01b815260ff82166004820152600090730bE18af3fF686010BfC856caf64aF7c7B3e820a8906382bdfed59060240160206040518083038186803b15801561152d57600080fd5b505af4158015611541573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae49190612ece565b60405163932c938560e01b815260ff83166004820152602481018290526060908190819073bB8e24710ad0A2C9D7d010991920b24c7eCBc8089063932c9385906044015b60006040518083038186803b1580156115c157600080fd5b505af41580156115d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115fd9190810190612ee9565b9250925092509250925092565b60ff1660009081527ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0c602052604090206001015490565b61164a3361200c565b6116665760405162461bcd60e51b81526004016107bb90612971565b6109af6120e5565b6116996040518060800160405280600081526020016000815260200160008152602001600081525090565b6116a16122e4565b6116a9611fb9565b6116b23361200c565b6116ce5760405162461bcd60e51b81526004016107bb90612971565b866116d88161132c565b61171b5760405162461bcd60e51b815260206004820152601460248201527313585c9ad95d081a5cc81b9bdd081bdc195b995960621b60448201526064016107bb565b6040516356c4ff0d60e11b815273D99836e31D99773c840274bA6270E042cB4F93E89063ad89fe1a9061175a908b908b908b908b908b90600401612f71565b6101006040518083038186803b15801561177357600080fd5b505af4158015611787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ab9190612a44565b92509250509550959350505050565b600054610100900460ff16158080156117da5750600054600160ff909116105b806117f45750303b1580156117f4575060005460ff166001145b6118575760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107bb565b6000805460ff19166001179055801561187a576000805461ff0019166101001790555b600061188461212e565b6001600160a01b031614156118e75760405162461bcd60e51b815260206004820152602360248201527f4d7573742062652063616c6c65642066726f6d20626561636f6e20636f6e74726044820152621858dd60ea1b60648201526084016107bb565b6118f083612156565b817ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0a5561191b610c1b565b8015611961576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b61196f3361200c565b61198b5760405162461bcd60e51b81526004016107bb90612971565b60405163c9c0009960e01b815260ff84166004820152602481018390526044810182905273bB8e24710ad0A2C9D7d010991920b24c7eCBc8089063c9c000999060640160006040518083038186803b1580156119e657600080fd5b505af41580156119fa573d6000803e3d6000fd5b50505050505050565b6040516366a2c33160e11b815260609073bB8e24710ad0A2C9D7d010991920b24c7eCBc8089063cd45866290610a90908590600401612b43565b611a45611fb9565b611a4e3361200c565b611a6a5760405162461bcd60e51b81526004016107bb90612971565b84611a7481611f7f565b611ac05760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420696e20746865207072652d6f7264657220706572696f64000000000060448201526064016107bb565b60405163ed94d50f60e01b815273D99836e31D99773c840274bA6270E042cB4F93E89063ed94d50f90611aff9089908990899089908990600401612f71565b60006040518083038186803b158015611b1757600080fd5b505af4158015611b2b573d6000803e3d6000fd5b50505050505050505050565b60405163cf37c59d60e01b815260ff8216600482015260009073bB8e24710ad0A2C9D7d010991920b24c7eCBc8089063cf37c59d906024016111f6565b60405163de9f5fed60e01b815260ff8316600482015265ffffffffffff82166024820152600090819081908190819081908190730bE18af3fF686010BfC856caf64aF7c7B3e820a89063de9f5fed9060440160e06040518083038186803b158015611bde57600080fd5b505af4158015611bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c169190612fad565b959f949e50929c50909a509850965090945092505050565b60405163df16328d60e01b815260ff8316600482015260248101829052600090819073bB8e24710ad0A2C9D7d010991920b24c7eCBc8089063df16328d90604401604080518083038186803b158015611c8657600080fd5b505af4158015611c9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611321919061301e565b8282826000611ccd8483611b74565b505050935050505060006001600160a01b0316816001600160a01b03161415611d2a5760405162461bcd60e51b815260206004820152600f60248201526e13dc99195c881b9bdd08199bdd5b99608a1b60448201526064016107bb565b806001600160a01b0316836001600160a01b031614611d8b5760405162461bcd60e51b815260206004820152601760248201527f43616c6c6572206973206e6f7420746865206d616b657200000000000000000060448201526064016107bb565b611d93611fb9565b611d9c3361200c565b611db85760405162461bcd60e51b81526004016107bb90612971565b6040516379fbfa2960e11b815260ff881660048201526001600160a01b038716602482015265ffffffffffff8616604482015273D99836e31D99773c840274bA6270E042cB4F93E89063f3f7f4529060640160006040518083038186803b158015611e2257600080fd5b505af4158015611e36573d6000803e3d6000fd5b5050505050505050505050565b604051630f506ad360e41b815260ff831660048201526001600160a01b038216602482015260009081908190819081908190819073D99836e31D99773c840274bA6270E042cB4F93E89063f506ad309060440160e06040518083038186803b158015611eae57600080fd5b505af4158015611ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c169190613042565b604051633e01139b60e21b815260ff83166004820152602481018290526060908190819073bB8e24710ad0A2C9D7d010991920b24c7eCBc8089063f8044e6c906044016115a9565b604051600162a3316960e01b0319815260ff831660048201526001600160a01b03821660248201526060908190730bE18af3fF686010BfC856caf64aF7c7B3e820a89063ff5cce97906044016112cd565b600080611f8b8361160a565b9050611f9a62093a8082612d3e565b421015801561112a5750611fb0610e1082612d3e565b42109392505050565b6000805160206130ca8339815191525460ff16156109af5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107bb565b600080612017611014565b905060005b815181101561207c5761204782828151811061203a5761203a612c74565b60200260200101516121eb565b6001600160a01b0316846001600160a01b0316141561206a575060019392505050565b8061207481612d23565b91505061201c565b5060009392505050565b61208e6121f6565b6000805160206130ca833981519152805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6120ed611fb9565b6000805160206130ca833981519152805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336120c8565b60007fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d506108c5565b6000805160206130aa833981519152546001600160a01b0316156121bc5760405162461bcd60e51b815260206004820152601b60248201527f5265736f6c766572207265676973746572656420616c7265616479000000000060448201526064016107bb565b6000805160206130aa83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6000610ae48261224c565b6000805160206130ca8339815191525460ff166109af5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107bb565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b031690816122dd5760405162461bcd60e51b81526004016107bb9190613096565b5092915050565b6040518060800160405280600065ffffffffffff16815260200160006001600160a01b0316815260200160008152602001600081525090565b60ff81168114610dc657600080fd5b60028110610dc657600080fd5b6001600160a01b0381168114610dc657600080fd5b60008060008060008060c0878903121561236757600080fd5b86356123728161231d565b955060208701356123828161232c565b9450604087013561239281612339565b959894975094956060810135955060808101359460a0909101359350915050565b805165ffffffffffff1682526020808201516001600160a01b03169083015260408082015190830152606090810151910152565b6000610100820190508351825260208401516020830152604084015160408301526060840151606083015261112a60808301846123b3565b6000806040838503121561243257600080fd5b823561243d8161231d565b9150602083013561244d81612339565b809150509250929050565b600080600080600060a0868803121561247057600080fd5b853561247b8161231d565b9450602086013561248b8161232c565b94979496505050506040830135926060810135926080909101359150565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156124e2576124e26124a9565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612511576125116124a9565b604052919050565b600067ffffffffffffffff821115612533576125336124a9565b5060051b60200190565b6000602080838503121561255057600080fd5b823567ffffffffffffffff81111561256757600080fd5b8301601f8101851361257857600080fd5b803561258b61258682612519565b6124e8565b81815260059190911b820183019083810190878311156125aa57600080fd5b928401925b828410156125d15783356125c28161231d565b825292840192908401906125af565b979650505050505050565b600081518084526020808501945080840160005b8381101561260c578151875295820195908201906001016125f0565b509495945050505050565b60208152600061112a60208301846125dc565b60006020828403121561263c57600080fd5b813561112a8161231d565b8581526020810185905260408101849052610160810161266a60608301856123b3565b61267760e08301846123b3565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156126b95783518352928401929184019160010161269d565b50909695505050505050565b600080604083850312156126d857600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b8381101561260c57815165ffffffffffff16875295820195908201906001016126fb565b60408152600061273260408301856126e7565b828103602084015261274481856126e7565b95945050505050565b60006020828403121561275f57600080fd5b5035919050565b6000806040838503121561277957600080fd5b82356127848161231d565b946020939093013593505050565b6060815260006127a560608301866125dc565b82810360208401526127b781866125dc565b9050828103604084015261267781856125dc565b600080600080600060a086880312156127e357600080fd5b85356127ee8161231d565b945060208601356127fe8161232c565b9350604086013561280e81612339565b94979396509394606081013594506080013592915050565b6000806040838503121561283957600080fd5b823561278481612339565b60008060006060848603121561285957600080fd5b83356128648161231d565b95602085013595506040909401359392505050565b65ffffffffffff81168114610dc657600080fd5b600080604083850312156128a057600080fd5b82356128ab8161231d565b9150602083013561244d81612879565b600281106128d957634e487b7160e01b600052602160045260246000fd5b9052565b60e081016128eb828a6128bb565b602082019790975260408101959095526001600160a01b03939093166060850152608084019190915260a0830152151560c090910152919050565b60008060006060848603121561293b57600080fd5b83356129468161231d565b9250602084013561295681612339565b9150604084013561296681612879565b809150509250925092565b60208082526017908201527f4f6e6c7920416363657074656420436f6e747261637473000000000000000000604082015260600190565b60ff8716815260c081016129bf60208301886128bb565b6001600160a01b039590951660408201526060810193909352608083019190915260a09091015292915050565b6000608082840312156129fe57600080fd5b612a066124bf565b90508151612a1381612879565b81526020820151612a2381612339565b80602083015250604082015160408201526060820151606082015292915050565b600080828403610100811215612a5957600080fd5b6080811215612a6757600080fd5b50612a706124bf565b8351815260208401516020820152604084015160408201526060840151606082015280925050612aa384608085016129ec565b90509250929050565b60008060008060808587031215612ac257600080fd5b505082516020840151604085015160609095015191969095509092509050565b60ff8616815260a08101612af960208301876128bb565b8460408301528360608301528260808301529695505050505050565b600080600060608486031215612b2a57600080fd5b8351925060208401519150604084015190509250925092565b6020808252825182820181905260009190848201906040850190845b818110156126b957835160ff1683529284019291840191600101612b5f565b600082601f830112612b8f57600080fd5b81516020612b9f61258683612519565b82815260059290921b84018101918181019086841115612bbe57600080fd5b8286015b84811015612bd95780518352918301918301612bc2565b509695505050505050565b600060208284031215612bf657600080fd5b815167ffffffffffffffff811115612c0d57600080fd5b612c1984828501612b7e565b949350505050565b60008060008060006101608688031215612c3a57600080fd5b855194506020860151935060408601519250612c5987606088016129ec565b9150612c688760e088016129ec565b90509295509295909350565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b81811015612cb057602081850181015186830182015201612c94565b81811115612cc2576000602083870101525b50601f01601f19169290920160200192915050565b828152604060208201526000612c196040830184612c8a565b600060208284031215612d0257600080fd5b815161112a81612339565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612d3757612d37612d0d565b5060010190565b600082821015612d5057612d50612d0d565b500390565b600060208284031215612d6757600080fd5b815161112a8161231d565b600060208284031215612d8457600080fd5b5051919050565b600082601f830112612d9c57600080fd5b81516020612dac61258683612519565b82815260059290921b84018101918181019086841115612dcb57600080fd5b8286015b84811015612bd9578051612de281612879565b8352918301918301612dcf565b60008060408385031215612e0257600080fd5b825167ffffffffffffffff80821115612e1a57600080fd5b612e2686838701612d8b565b93506020850151915080821115612e3c57600080fd5b50612e4985828601612d8b565b9150509250929050565b80518015158114612e6357600080fd5b919050565b600080600080600080600080610100898b031215612e8557600080fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c08901519150612ebf60e08a01612e53565b90509295985092959890939650565b600060208284031215612ee057600080fd5b61112a82612e53565b600080600060608486031215612efe57600080fd5b835167ffffffffffffffff80821115612f1657600080fd5b612f2287838801612b7e565b94506020860151915080821115612f3857600080fd5b612f4487838801612b7e565b93506040860151915080821115612f5a57600080fd5b50612f6786828701612b7e565b9150509250925092565b60ff8616815260a08101612f8860208301876128bb565b6001600160a01b03949094166040820152606081019290925260809091015292915050565b600080600080600080600060e0888a031215612fc857600080fd5b8751612fd38161232c565b8097505060208801519550604088015194506060880151612ff381612339565b608089015160a08a01519195509350915061301060c08901612e53565b905092959891949750929550565b6000806040838503121561303157600080fd5b505080516020909101519092909150565b600080600080600080600060e0888a03121561305d57600080fd5b5050855160208701516040880151606089015160808a015160a08b015160c0909b0151949c939b50919990985090965094509092509050565b60208152600061112a6020830184612c8a56fe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240189c789132bdb3678132848a8dcd780bffd2b1abdce3984c522ac1d8aeb48f05f3a264697066735822122096e2b59ca9b74c01892efb13842d200c02ab791b2d6bd0fedd1acf94a2c03db764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102695760003560e01c80636a5138d611610151578063cd458662116100c3578063e099765911610087578063e0997659146103c0578063f3f7f452146106c7578063f506ad30146106da578063f8044e6c14610722578063ff5cce9714610735578063fffa87b81461074857600080fd5b8063cd45866214610640578063cdbd403e14610653578063cf37c59d14610666578063de9f5fed14610679578063df16328d1461069f57600080fd5b8063936d6d2e11610115578063936d6d2e146105a7578063a03738dc146105ba578063a4ff243a146105c2578063a779b94a14610607578063be13f47c1461061a578063c9c000991461062d57600080fd5b80636a5138d6146104b45780636d9bf95a146104c757806380d5b609146104fc57806382bdfed514610572578063932c93851461058557600080fd5b8063381e9344116101ea578063584795fb116101ae578063584795fb1461040d57806358e64897146104205780635c975abb146104415780635f7f8b45146104595780635fee0bba1461046c5780636945c1fd1461048d57600080fd5b8063381e93441461039a57806338b05852146103ad5780633d03b9da146103c05780634ea469d5146103d557806357673717146103fa57600080fd5b80631e0b71a3116102315780631e0b71a314610323578063261cc1b21461034357806329985e5a1461036757806329d6dd131461036f5780632af64bd31461039257600080fd5b806302de7aa81461026e57806304f3bcec1461029857806313a4451c146102b85780631610c7ce146102eb5780631c03b6ea146102f5575b600080fd5b61028161027c36600461234e565b61075b565b60405161028f9291906123e7565b60405180910390f35b6102a06108b3565b6040516001600160a01b03909116815260200161028f565b6102cb6102c636600461241f565b6108d4565b60408051948552602085019390935291830152606082015260800161028f565b6102f3610982565b005b610308610303366004612458565b6109b1565b6040805193845260208401929092529082015260600161028f565b61033661033136600461253d565b610a56565b60405161028f9190612617565b61035661035136600461262a565b610aea565b60405161028f959493929190612647565b6102f3610c1b565b61038261037d36600461262a565b610dc9565b604051901515815260200161028f565b610382610e42565b6103826103a836600461262a565b610fa8565b6103366103bb36600461253d565b610fda565b6103c8611014565b60405161028f9190612681565b6103e86103e33660046126c5565b611079565b60405160ff909116815260200161028f565b61033661040836600461253d565b611131565b6102cb61041b36600461241f565b61116b565b61043361042e36600461262a565b6111bd565b60405190815260200161028f565b6000805160206130ca8339815191525460ff16610382565b61043361046736600461262a565b611246565b61047f61047a36600461241f565b611283565b60405161028f92919061271f565b7ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0a54610433565b6103826104c236600461262a565b61132c565b6104da6104d536600461274d565b611362565b604080518251815260208084015190820152918101519082015260600161028f565b61050f61050a36600461262a565b6113de565b60405161028f9190600061010082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e0830151151560e083015292915050565b61038261058036600461262a565b6114dd565b610598610593366004612766565b611565565b60405161028f93929190612792565b6104336105b536600461262a565b61160a565b6102f3611641565b6104336105d036600461262a565b60ff1660009081527ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0c602052604090206002015490565b6102816106153660046127cb565b61166e565b6102f3610628366004612826565b6117ba565b6102f361063b366004612844565b611966565b61033661064e36600461253d565b611a03565b6102f36106613660046127cb565b611a3d565b61043361067436600461262a565b611b37565b61068c61068736600461288d565b611b74565b60405161028f97969594939291906128dd565b6106b26106ad366004612766565b611c2e565b6040805192835260208301919091520161028f565b6102f36106d5366004612926565b611cbe565b6106ed6106e836600461241f565b611e43565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e00161028f565b610598610730366004612766565b611ee6565b61047f61074336600461241f565b611f2e565b61038261075636600461262a565b611f7f565b6107866040518060800160405280600081526020016000815260200160008152602001600081525090565b61078e6122e4565b610796611fb9565b61079f3361200c565b6107c45760405162461bcd60e51b81526004016107bb90612971565b60405180910390fd5b876107ce8161132c565b6108115760405162461bcd60e51b815260206004820152601460248201527313585c9ad95d081a5cc81b9bdd081bdc195b995960621b60448201526064016107bb565b60405163223932df60e11b815273__$61caf4c2bb53b95485f5a2f3428ccc66af$__9063447265be90610852908c908c908c908c908c908c906004016129a8565b6101006040518083038186803b15801561086b57600080fd5b505af415801561087f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a39190612a44565b9250925050965096945050505050565b60006000805160206130aa8339815191525b546001600160a01b0316919050565b6040516304e9114760e21b815260ff831660048201526001600160a01b038216602482015260009081908190819073__$62400fcf056c2b33063fc11a9740c72847$__906313a4451c906044015b60806040518083038186803b15801561093a57600080fd5b505af415801561094e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109729190612aac565b9299919850965090945092505050565b61098b3361200c565b6109a75760405162461bcd60e51b81526004016107bb90612971565b6109af612086565b565b600080600073__$62400fcf056c2b33063fc11a9740c72847$__632ae0b85b89898989896040518663ffffffff1660e01b81526004016109f5959493929190612ae2565b60606040518083038186803b158015610a0d57600080fd5b505af4158015610a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a459190612b15565b925092509250955095509592505050565b604051631e0b71a360e01b815260609073__$ddd2182d6f392994445e6b8b482a37128a$__90631e0b71a390610a90908590600401612b43565b60006040518083038186803b158015610aa857600080fd5b505af4158015610abc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ae49190810190612be4565b92915050565b6000806000610af76122e4565b610aff6122e4565b610b07611fb9565b610b103361200c565b610b2c5760405162461bcd60e51b81526004016107bb90612971565b85610b3681610fa8565b610b825760405162461bcd60e51b815260206004820152601960248201527f4e6f7420696e2074686520497461796f736520706572696f640000000000000060448201526064016107bb565b60405163130e60d960e11b815260ff8816600482015273__$ddd2182d6f392994445e6b8b482a37128a$__9063261cc1b2906024016101606040518083038186803b158015610bd057600080fd5b505af4158015610be4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c089190612c21565b939b929a50909850965090945092505050565b6000610c25611014565b905060005b8151811015610dc4576000828281518110610c4757610c47612c74565b602002602001015190506000610c686000805160206130aa83398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd91610cd991869190605d01612cd7565b60206040518083038186803b158015610cf157600080fd5b505afa158015610d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d299190612cf0565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a150508080610dbc90612d23565b915050610c2a565b505b50565b60007ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0d81610e288460ff1660009081527ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0c602052604090206002015490565b815260208101919091526040016000205460ff1692915050565b600080610e4d611014565b905060005b8151811015610f9f576000828281518110610e6f57610e6f612c74565b60200260200101519050610e8e6000805160206130aa83398151915290565b600082815260019190910160205260409020546001600160a01b03166000805160206130aa833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b158015610efb57600080fd5b505afa158015610f0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f339190612cf0565b6001600160a01b0316141580610f7d575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b15610f8c576000935050505090565b5080610f9781612d23565b915050610e52565b50600191505090565b6000610e10610fb68361160a565b610fc09190612d3e565b4210158015610ae45750610fd382610dc9565b1592915050565b604051631c582c2960e11b815260609073__$ddd2182d6f392994445e6b8b482a37128a$__906338b0585290610a90908590600401612b43565b604080516001808252818301909252606091602080830190803683370190505090507f4c656e64696e674d61726b6574436f6e74726f6c6c65720000000000000000008160008151811061106a5761106a612c74565b60200260200101818152505090565b60006110843361200c565b6110a05760405162461bcd60e51b81526004016107bb90612971565b604051634ea469d560e01b8152600481018490526024810183905273__$ddd2182d6f392994445e6b8b482a37128a$__90634ea469d59060440160206040518083038186803b1580156110f257600080fd5b505af4158015611106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112a9190612d55565b9392505050565b604051635767371760e01b815260609073__$ddd2182d6f392994445e6b8b482a37128a$__90635767371790610a90908590600401612b43565b60405163584795fb60e01b815260ff831660048201526001600160a01b038216602482015260009081908190819073__$62400fcf056c2b33063fc11a9740c72847$__9063584795fb90604401610922565b6040516358e6489760e01b815260ff8216600482015260009073__$ddd2182d6f392994445e6b8b482a37128a$__906358e64897906024015b60206040518083038186803b15801561120e57600080fd5b505af4158015611222573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae49190612d72565b604051635f7f8b4560e01b815260ff8216600482015260009073__$ddd2182d6f392994445e6b8b482a37128a$__90635f7f8b45906024016111f6565b604051632ff705dd60e11b815260ff831660048201526001600160a01b0382166024820152606090819073__$62400fcf056c2b33063fc11a9740c72847$__90635fee0bba906044015b60006040518083038186803b1580156112e557600080fd5b505af41580156112f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113219190810190612def565b915091509250929050565b600061133782610dc9565b80156113495750611347826114dd565b155b8015610ae457506113598261160a565b42101592915050565b61138660405180606001604052806000815260200160008152602001600081525090565b5060009081527ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0e6020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b61142b604051806101000160405280600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6040516380d5b60960e01b815260ff8316600482015273__$ddd2182d6f392994445e6b8b482a37128a$__906380d5b609906024016101006040518083038186803b15801561147957600080fd5b505af415801561148d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b19190612e68565b151560e089015260c088015260a087015260808601526060850152604084015260208301528152919050565b6040516382bdfed560e01b815260ff8216600482015260009073__$62400fcf056c2b33063fc11a9740c72847$__906382bdfed59060240160206040518083038186803b15801561152d57600080fd5b505af4158015611541573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae49190612ece565b60405163932c938560e01b815260ff83166004820152602481018290526060908190819073__$ddd2182d6f392994445e6b8b482a37128a$__9063932c9385906044015b60006040518083038186803b1580156115c157600080fd5b505af41580156115d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115fd9190810190612ee9565b9250925092509250925092565b60ff1660009081527ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0c602052604090206001015490565b61164a3361200c565b6116665760405162461bcd60e51b81526004016107bb90612971565b6109af6120e5565b6116996040518060800160405280600081526020016000815260200160008152602001600081525090565b6116a16122e4565b6116a9611fb9565b6116b23361200c565b6116ce5760405162461bcd60e51b81526004016107bb90612971565b866116d88161132c565b61171b5760405162461bcd60e51b815260206004820152601460248201527313585c9ad95d081a5cc81b9bdd081bdc195b995960621b60448201526064016107bb565b6040516356c4ff0d60e11b815273__$61caf4c2bb53b95485f5a2f3428ccc66af$__9063ad89fe1a9061175a908b908b908b908b908b90600401612f71565b6101006040518083038186803b15801561177357600080fd5b505af4158015611787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ab9190612a44565b92509250509550959350505050565b600054610100900460ff16158080156117da5750600054600160ff909116105b806117f45750303b1580156117f4575060005460ff166001145b6118575760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107bb565b6000805460ff19166001179055801561187a576000805461ff0019166101001790555b600061188461212e565b6001600160a01b031614156118e75760405162461bcd60e51b815260206004820152602360248201527f4d7573742062652063616c6c65642066726f6d20626561636f6e20636f6e74726044820152621858dd60ea1b60648201526084016107bb565b6118f083612156565b817ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0a5561191b610c1b565b8015611961576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b61196f3361200c565b61198b5760405162461bcd60e51b81526004016107bb90612971565b60405163c9c0009960e01b815260ff84166004820152602481018390526044810182905273__$ddd2182d6f392994445e6b8b482a37128a$__9063c9c000999060640160006040518083038186803b1580156119e657600080fd5b505af41580156119fa573d6000803e3d6000fd5b50505050505050565b6040516366a2c33160e11b815260609073__$ddd2182d6f392994445e6b8b482a37128a$__9063cd45866290610a90908590600401612b43565b611a45611fb9565b611a4e3361200c565b611a6a5760405162461bcd60e51b81526004016107bb90612971565b84611a7481611f7f565b611ac05760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420696e20746865207072652d6f7264657220706572696f64000000000060448201526064016107bb565b60405163ed94d50f60e01b815273__$61caf4c2bb53b95485f5a2f3428ccc66af$__9063ed94d50f90611aff9089908990899089908990600401612f71565b60006040518083038186803b158015611b1757600080fd5b505af4158015611b2b573d6000803e3d6000fd5b50505050505050505050565b60405163cf37c59d60e01b815260ff8216600482015260009073__$ddd2182d6f392994445e6b8b482a37128a$__9063cf37c59d906024016111f6565b60405163de9f5fed60e01b815260ff8316600482015265ffffffffffff8216602482015260009081908190819081908190819073__$62400fcf056c2b33063fc11a9740c72847$__9063de9f5fed9060440160e06040518083038186803b158015611bde57600080fd5b505af4158015611bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c169190612fad565b959f949e50929c50909a509850965090945092505050565b60405163df16328d60e01b815260ff8316600482015260248101829052600090819073__$ddd2182d6f392994445e6b8b482a37128a$__9063df16328d90604401604080518083038186803b158015611c8657600080fd5b505af4158015611c9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611321919061301e565b8282826000611ccd8483611b74565b505050935050505060006001600160a01b0316816001600160a01b03161415611d2a5760405162461bcd60e51b815260206004820152600f60248201526e13dc99195c881b9bdd08199bdd5b99608a1b60448201526064016107bb565b806001600160a01b0316836001600160a01b031614611d8b5760405162461bcd60e51b815260206004820152601760248201527f43616c6c6572206973206e6f7420746865206d616b657200000000000000000060448201526064016107bb565b611d93611fb9565b611d9c3361200c565b611db85760405162461bcd60e51b81526004016107bb90612971565b6040516379fbfa2960e11b815260ff881660048201526001600160a01b038716602482015265ffffffffffff8616604482015273__$61caf4c2bb53b95485f5a2f3428ccc66af$__9063f3f7f4529060640160006040518083038186803b158015611e2257600080fd5b505af4158015611e36573d6000803e3d6000fd5b5050505050505050505050565b604051630f506ad360e41b815260ff831660048201526001600160a01b038216602482015260009081908190819081908190819073__$61caf4c2bb53b95485f5a2f3428ccc66af$__9063f506ad309060440160e06040518083038186803b158015611eae57600080fd5b505af4158015611ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c169190613042565b604051633e01139b60e21b815260ff83166004820152602481018290526060908190819073__$ddd2182d6f392994445e6b8b482a37128a$__9063f8044e6c906044016115a9565b604051600162a3316960e01b0319815260ff831660048201526001600160a01b0382166024820152606090819073__$62400fcf056c2b33063fc11a9740c72847$__9063ff5cce97906044016112cd565b600080611f8b8361160a565b9050611f9a62093a8082612d3e565b421015801561112a5750611fb0610e1082612d3e565b42109392505050565b6000805160206130ca8339815191525460ff16156109af5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107bb565b600080612017611014565b905060005b815181101561207c5761204782828151811061203a5761203a612c74565b60200260200101516121eb565b6001600160a01b0316846001600160a01b0316141561206a575060019392505050565b8061207481612d23565b91505061201c565b5060009392505050565b61208e6121f6565b6000805160206130ca833981519152805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6120ed611fb9565b6000805160206130ca833981519152805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336120c8565b60007fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d506108c5565b6000805160206130aa833981519152546001600160a01b0316156121bc5760405162461bcd60e51b815260206004820152601b60248201527f5265736f6c766572207265676973746572656420616c7265616479000000000060448201526064016107bb565b6000805160206130aa83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6000610ae48261224c565b6000805160206130ca8339815191525460ff166109af5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107bb565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b031690816122dd5760405162461bcd60e51b81526004016107bb9190613096565b5092915050565b6040518060800160405280600065ffffffffffff16815260200160006001600160a01b0316815260200160008152602001600081525090565b60ff81168114610dc657600080fd5b60028110610dc657600080fd5b6001600160a01b0381168114610dc657600080fd5b60008060008060008060c0878903121561236757600080fd5b86356123728161231d565b955060208701356123828161232c565b9450604087013561239281612339565b959894975094956060810135955060808101359460a0909101359350915050565b805165ffffffffffff1682526020808201516001600160a01b03169083015260408082015190830152606090810151910152565b6000610100820190508351825260208401516020830152604084015160408301526060840151606083015261112a60808301846123b3565b6000806040838503121561243257600080fd5b823561243d8161231d565b9150602083013561244d81612339565b809150509250929050565b600080600080600060a0868803121561247057600080fd5b853561247b8161231d565b9450602086013561248b8161232c565b94979496505050506040830135926060810135926080909101359150565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156124e2576124e26124a9565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612511576125116124a9565b604052919050565b600067ffffffffffffffff821115612533576125336124a9565b5060051b60200190565b6000602080838503121561255057600080fd5b823567ffffffffffffffff81111561256757600080fd5b8301601f8101851361257857600080fd5b803561258b61258682612519565b6124e8565b81815260059190911b820183019083810190878311156125aa57600080fd5b928401925b828410156125d15783356125c28161231d565b825292840192908401906125af565b979650505050505050565b600081518084526020808501945080840160005b8381101561260c578151875295820195908201906001016125f0565b509495945050505050565b60208152600061112a60208301846125dc565b60006020828403121561263c57600080fd5b813561112a8161231d565b8581526020810185905260408101849052610160810161266a60608301856123b3565b61267760e08301846123b3565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156126b95783518352928401929184019160010161269d565b50909695505050505050565b600080604083850312156126d857600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b8381101561260c57815165ffffffffffff16875295820195908201906001016126fb565b60408152600061273260408301856126e7565b828103602084015261274481856126e7565b95945050505050565b60006020828403121561275f57600080fd5b5035919050565b6000806040838503121561277957600080fd5b82356127848161231d565b946020939093013593505050565b6060815260006127a560608301866125dc565b82810360208401526127b781866125dc565b9050828103604084015261267781856125dc565b600080600080600060a086880312156127e357600080fd5b85356127ee8161231d565b945060208601356127fe8161232c565b9350604086013561280e81612339565b94979396509394606081013594506080013592915050565b6000806040838503121561283957600080fd5b823561278481612339565b60008060006060848603121561285957600080fd5b83356128648161231d565b95602085013595506040909401359392505050565b65ffffffffffff81168114610dc657600080fd5b600080604083850312156128a057600080fd5b82356128ab8161231d565b9150602083013561244d81612879565b600281106128d957634e487b7160e01b600052602160045260246000fd5b9052565b60e081016128eb828a6128bb565b602082019790975260408101959095526001600160a01b03939093166060850152608084019190915260a0830152151560c090910152919050565b60008060006060848603121561293b57600080fd5b83356129468161231d565b9250602084013561295681612339565b9150604084013561296681612879565b809150509250925092565b60208082526017908201527f4f6e6c7920416363657074656420436f6e747261637473000000000000000000604082015260600190565b60ff8716815260c081016129bf60208301886128bb565b6001600160a01b039590951660408201526060810193909352608083019190915260a09091015292915050565b6000608082840312156129fe57600080fd5b612a066124bf565b90508151612a1381612879565b81526020820151612a2381612339565b80602083015250604082015160408201526060820151606082015292915050565b600080828403610100811215612a5957600080fd5b6080811215612a6757600080fd5b50612a706124bf565b8351815260208401516020820152604084015160408201526060840151606082015280925050612aa384608085016129ec565b90509250929050565b60008060008060808587031215612ac257600080fd5b505082516020840151604085015160609095015191969095509092509050565b60ff8616815260a08101612af960208301876128bb565b8460408301528360608301528260808301529695505050505050565b600080600060608486031215612b2a57600080fd5b8351925060208401519150604084015190509250925092565b6020808252825182820181905260009190848201906040850190845b818110156126b957835160ff1683529284019291840191600101612b5f565b600082601f830112612b8f57600080fd5b81516020612b9f61258683612519565b82815260059290921b84018101918181019086841115612bbe57600080fd5b8286015b84811015612bd95780518352918301918301612bc2565b509695505050505050565b600060208284031215612bf657600080fd5b815167ffffffffffffffff811115612c0d57600080fd5b612c1984828501612b7e565b949350505050565b60008060008060006101608688031215612c3a57600080fd5b855194506020860151935060408601519250612c5987606088016129ec565b9150612c688760e088016129ec565b90509295509295909350565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b81811015612cb057602081850181015186830182015201612c94565b81811115612cc2576000602083870101525b50601f01601f19169290920160200192915050565b828152604060208201526000612c196040830184612c8a565b600060208284031215612d0257600080fd5b815161112a81612339565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612d3757612d37612d0d565b5060010190565b600082821015612d5057612d50612d0d565b500390565b600060208284031215612d6757600080fd5b815161112a8161231d565b600060208284031215612d8457600080fd5b5051919050565b600082601f830112612d9c57600080fd5b81516020612dac61258683612519565b82815260059290921b84018101918181019086841115612dcb57600080fd5b8286015b84811015612bd9578051612de281612879565b8352918301918301612dcf565b60008060408385031215612e0257600080fd5b825167ffffffffffffffff80821115612e1a57600080fd5b612e2686838701612d8b565b93506020850151915080821115612e3c57600080fd5b50612e4985828601612d8b565b9150509250929050565b80518015158114612e6357600080fd5b919050565b600080600080600080600080610100898b031215612e8557600080fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c08901519150612ebf60e08a01612e53565b90509295985092959890939650565b600060208284031215612ee057600080fd5b61112a82612e53565b600080600060608486031215612efe57600080fd5b835167ffffffffffffffff80821115612f1657600080fd5b612f2287838801612b7e565b94506020860151915080821115612f3857600080fd5b612f4487838801612b7e565b93506040860151915080821115612f5a57600080fd5b50612f6786828701612b7e565b9150509250925092565b60ff8616815260a08101612f8860208301876128bb565b6001600160a01b03949094166040820152606081019290925260809091015292915050565b600080600080600080600060e0888a031215612fc857600080fd5b8751612fd38161232c565b8097505060208801519550604088015194506060880151612ff381612339565b608089015160a08a01519195509350915061301060c08901612e53565b905092959891949750929550565b6000806040838503121561303157600080fd5b505080516020909101519092909150565b600080600080600080600060e0888a03121561305d57600080fd5b5050855160208701516040880151606089015160808a015160a08b015160c0909b0151949c939b50919990985090965094509092509050565b60208152600061112a6020830184612c8a56fe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240189c789132bdb3678132848a8dcd780bffd2b1abdce3984c522ac1d8aeb48f05f3a264697066735822122096e2b59ca9b74c01892efb13842d200c02ab791b2d6bd0fedd1acf94a2c03db764736f6c63430008090033",
  "libraries": {
    "OrderActionLogic": "0xD99836e31D99773c840274bA6270E042cB4F93E8",
    "OrderReaderLogic": "0x0bE18af3fF686010BfC856caf64aF7c7B3e820a8",
    "OrderBookLogic": "0xbB8e24710ad0A2C9D7d010991920b24c7eCBc808"
  },
  "devdoc": {
    "details": "The market orders is stored in structured red-black trees and doubly linked lists in each node.",
    "kind": "dev",
    "methods": {
      "acceptedContracts()": {
        "details": "The contact name listed in this method is also needed to be listed `requiredContracts` method."
      },
      "calculateFilledAmount(uint8,uint8,uint256,uint256,uint256)": {
        "params": {
          "_amount": "Amount of funds the user wants to borrow/lend",
          "_circuitBreakerLimitRange": "Rate limit range for the circuit breaker",
          "_orderBookId": "The order book id",
          "_side": "Order position type, Borrow or Lend",
          "_unitPrice": "Unit price user want to borrow/lend"
        },
        "returns": {
          "filledAmount": "The amount that is filled on the order book",
          "filledAmountInFV": "The amount in the future value that is filled on the order book",
          "lastUnitPrice": "The last unit price that is filled on the order book"
        }
      },
      "cancelOrder(uint8,address,uint48)": {
        "params": {
          "_orderBookId": "The order book id",
          "_orderId": "Market order id",
          "_user": "User address"
        }
      },
      "cleanUpOrders(uint8,address)": {
        "details": "The order list per user is not updated in real-time when an order is filled. This function removes the filled order from that order list per user to reduce gas costs for lazy evaluation if the collateral is enough or not.",
        "params": {
          "_user": "User address"
        },
        "returns": {
          "activeBorrowOrderCount": "The total amount of active borrow order on the order book",
          "activeLendOrderCount": "The total amount of active lend order on the order book",
          "maturity": "The maturity of the removed orders",
          "removedBorrowOrderAmount": "The total PV amount of the removed borrow order amount from the order book",
          "removedBorrowOrderFutureValue": "The total FV amount of the removed borrow order amount from the order book",
          "removedLendOrderAmount": "The total PV amount of the removed lend order amount from the order book",
          "removedLendOrderFutureValue": "The total FV amount of the removed lend order amount from the order book"
        }
      },
      "createOrderBook(uint256,uint256)": {
        "params": {
          "_maturity": "The initial maturity of the market",
          "_openingDate": "The timestamp when the market opens"
        }
      },
      "executeItayoseCall(uint8)": {
        "details": "If the opening date had already passed when this contract was created, this Itayose need not be executed.",
        "params": {
          "_orderBookId": "The order book id"
        },
        "returns": {
          "openingDate": "The timestamp when the market opens",
          "openingUnitPrice": "The opening price when Itayose is executed",
          "partiallyFilledBorrowingOrder": "Partially filled borrowing order on the order book",
          "partiallyFilledLendingOrder": "Partially filled lending order on the order book",
          "totalOffsetAmount": "The total filled amount when Itayose is executed"
        }
      },
      "executeOrder(uint8,uint8,address,uint256,uint256,uint256)": {
        "params": {
          "_amount": "Amount of funds the user wants to borrow/lend",
          "_circuitBreakerLimitRange": "Rate limit range for the circuit breaker",
          "_orderBookId": "The order book id",
          "_side": "Order position type, Borrow or Lend",
          "_unitPrice": "Unit price user wish to borrow/lend",
          "_user": "User's address"
        },
        "returns": {
          "filledOrder": "User's Filled order of the user",
          "partiallyFilledOrder": "Partially filled order on the order book"
        }
      },
      "executePreOrder(uint8,uint8,address,uint256,uint256)": {
        "params": {
          "_amount": "Amount of funds the maker wants to borrow/lend",
          "_orderBookId": "The order book id",
          "_side": "Order position type, Borrow or Lend",
          "_unitPrice": "Unit price taker wish to borrow/lend"
        }
      },
      "getBestBorrowUnitPrice(uint8)": {
        "params": {
          "_orderBookId": "The order book id"
        },
        "returns": {
          "_0": "The best price for borrowing"
        }
      },
      "getBestBorrowUnitPrices(uint8[])": {
        "returns": {
          "_0": "The array of the best price for borrowing"
        }
      },
      "getBestLendUnitPrice(uint8)": {
        "params": {
          "_orderBookId": "The order book id"
        },
        "returns": {
          "_0": "The best price for lending"
        }
      },
      "getBestLendUnitPrices(uint8[])": {
        "returns": {
          "_0": "The array of the best price for lending"
        }
      },
      "getBorrowOrderBook(uint8,uint256)": {
        "params": {
          "_limit": "Max limit to get unit prices",
          "_orderBookId": "The order book id"
        },
        "returns": {
          "unitPrices": "The array of borrow unit prices"
        }
      },
      "getBorrowOrderIds(uint8,address)": {
        "params": {
          "_orderBookId": "The order book id",
          "_user": "User's address"
        }
      },
      "getCircuitBreakerThresholds(uint8,uint256)": {
        "params": {
          "_circuitBreakerLimitRange": "Rate limit range for the circuit breaker",
          "_orderBookId": "The order book id"
        },
        "returns": {
          "maxLendUnitPrice": "The maximum unit price for lending",
          "minBorrowUnitPrice": "The minimum unit price for borrowing"
        }
      },
      "getCurrency()": {
        "returns": {
          "currency": "The market currency"
        }
      },
      "getItayoseLog(uint256)": {
        "params": {
          "_maturity": "The market maturity"
        },
        "returns": {
          "_0": "ItayoseLog of the market"
        }
      },
      "getLendOrderBook(uint8,uint256)": {
        "params": {
          "_limit": "Max limit to get unit prices",
          "_orderBookId": "The order book id"
        },
        "returns": {
          "unitPrices": "The array of lending unit prices"
        }
      },
      "getLendOrderIds(uint8,address)": {
        "params": {
          "_orderBookId": "The order book id",
          "_user": "User's address"
        }
      },
      "getMaturities(uint8[])": {
        "returns": {
          "maturities": "The array of maturity"
        }
      },
      "getMaturity(uint8)": {
        "params": {
          "_orderBookId": "The order book id"
        },
        "returns": {
          "maturity": "The market maturity"
        }
      },
      "getMidUnitPrice(uint8)": {
        "params": {
          "_orderBookId": "The order book id"
        },
        "returns": {
          "_0": "The mid price per future value"
        }
      },
      "getMidUnitPrices(uint8[])": {
        "returns": {
          "_0": "The array of the the price per future value"
        }
      },
      "getOpeningDate(uint8)": {
        "params": {
          "_orderBookId": "The order book id"
        },
        "returns": {
          "openingDate": "The market opening date"
        }
      },
      "getOrder(uint8,uint48)": {
        "params": {
          "_orderBookId": "The order book id",
          "_orderId": "The market order id"
        },
        "returns": {
          "amount": "Order amount",
          "isPreOrder": "The boolean if the order is a pre-order.",
          "maker": "The order maker",
          "maturity": "The maturity of the selected order",
          "side": "Order position type, Borrow or Lend",
          "timestamp": "Timestamp when the order was created",
          "unitPrice": "Amount of interest unit price"
        }
      },
      "getOrderBookDetail(uint8)": {
        "params": {
          "_orderBookId": "The order book id"
        },
        "returns": {
          "market": "The market data"
        }
      },
      "getTotalAmountFromBorrowOrders(uint8,address)": {
        "params": {
          "_orderBookId": "The order book id",
          "_user": "User's address"
        },
        "returns": {
          "activeAmount": "The total amount of active order on the order book",
          "inactiveAmount": "The total amount of inactive orders filled on the order book",
          "inactiveFutureValue": "The total future value amount of inactive orders filled on the order book",
          "maturity": "The maturity of market that orders were placed."
        }
      },
      "getTotalAmountFromLendOrders(uint8,address)": {
        "params": {
          "_orderBookId": "The order book id",
          "_user": "User's address"
        },
        "returns": {
          "activeAmount": "The total amount of active order on the order book",
          "inactiveAmount": "The total amount of inactive orders filled on the order book",
          "inactiveFutureValue": "The total future value amount of inactive orders filled on the order book",
          "maturity": "The maturity of market that orders were placed."
        }
      },
      "initialize(address,bytes32)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController.",
        "params": {
          "_ccy": "The main currency for the order book",
          "_resolver": "The address of the Address Resolver contract"
        }
      },
      "isItayosePeriod(uint8)": {
        "params": {
          "_orderBookId": "The order book id"
        },
        "returns": {
          "_0": "The boolean if the market is under the Itayose period."
        }
      },
      "isMatured(uint8)": {
        "params": {
          "_orderBookId": "The order book id"
        },
        "returns": {
          "_0": "The boolean if the market is matured or not"
        }
      },
      "isOpened(uint8)": {
        "params": {
          "_orderBookId": "The order book id"
        },
        "returns": {
          "_0": "The boolean if the market is opened or not"
        }
      },
      "isPreOrderPeriod(uint8)": {
        "params": {
          "_orderBookId": "The order book id"
        },
        "returns": {
          "_0": "The boolean if the market is under the pre-order period."
        }
      },
      "isReady(uint8)": {
        "params": {
          "_orderBookId": "The order book id"
        },
        "returns": {
          "_0": "The boolean if the market is ready or not"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "requiredContracts()": {
        "details": "The contract name list is in `./libraries/Contracts.sol`."
      },
      "unwindPosition(uint8,uint8,address,uint256,uint256)": {
        "params": {
          "_circuitBreakerLimitRange": "Rate limit range for the circuit breaker",
          "_futureValue": "Amount of future value unwound",
          "_orderBookId": "The order book id",
          "_side": "Order position type, Borrow or Lend",
          "_user": "User's address"
        },
        "returns": {
          "filledOrder": "User's Filled order of the user",
          "partiallyFilledOrder": "Partially filled order"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptedContracts()": {
        "notice": "Returns contract names that can call this contract."
      },
      "calculateFilledAmount(uint8,uint8,uint256,uint256,uint256)": {
        "notice": "Calculates the amount to be filled when executing an order in the order book."
      },
      "cancelOrder(uint8,address,uint48)": {
        "notice": "Cancels the order."
      },
      "cleanUpOrders(uint8,address)": {
        "notice": "Cleans up own orders to remove order ids that are already filled on the order book."
      },
      "createOrderBook(uint256,uint256)": {
        "notice": "Creates a new order book."
      },
      "executeItayoseCall(uint8)": {
        "notice": "Executes Itayose to aggregate pre-orders and determine the opening unit price. After this action, the market opens."
      },
      "executeOrder(uint8,uint8,address,uint256,uint256,uint256)": {
        "notice": "Executes an order. Takes orders if the order is matched, and places new order if not match it."
      },
      "executePreOrder(uint8,uint8,address,uint256,uint256)": {
        "notice": "Executes a pre-order. A pre-order will only be accepted from 168 hours (7 days) to 1 hour before the market opens (Pre-order period). At the end of this period, Itayose will be executed."
      },
      "getBestBorrowUnitPrice(uint8)": {
        "notice": "Gets the best price for borrowing."
      },
      "getBestBorrowUnitPrices(uint8[])": {
        "notice": "Gets the best prices for borrowing."
      },
      "getBestLendUnitPrice(uint8)": {
        "notice": "Gets the best price for lending."
      },
      "getBestLendUnitPrices(uint8[])": {
        "notice": "Gets the best prices for lending."
      },
      "getBorrowOrderBook(uint8,uint256)": {
        "notice": "Gets the order book of borrow."
      },
      "getBorrowOrderIds(uint8,address)": {
        "notice": "Gets active and inactive order IDs in the borrowing order book."
      },
      "getCircuitBreakerThresholds(uint8,uint256)": {
        "notice": "Gets unit price Thresholds by CircuitBreaker."
      },
      "getCurrency()": {
        "notice": "Gets the market currency."
      },
      "getItayoseLog(uint256)": {
        "notice": "Gets the market itayose logs."
      },
      "getLendOrderBook(uint8,uint256)": {
        "notice": "Gets the order book of lend."
      },
      "getLendOrderIds(uint8,address)": {
        "notice": "Gets active and inactive order IDs in the lending order book."
      },
      "getMaturities(uint8[])": {
        "notice": "Gets the order book maturities."
      },
      "getMaturity(uint8)": {
        "notice": "Gets the current market maturity."
      },
      "getMidUnitPrice(uint8)": {
        "notice": "Gets the mid price per future value."
      },
      "getMidUnitPrices(uint8[])": {
        "notice": "Gets the the prices per future value."
      },
      "getOpeningDate(uint8)": {
        "notice": "Gets the market opening date."
      },
      "getOrder(uint8,uint48)": {
        "notice": "Gets the market order from the order book."
      },
      "getOrderBookDetail(uint8)": {
        "notice": "Gets the order book data."
      },
      "getTotalAmountFromBorrowOrders(uint8,address)": {
        "notice": "Calculates and gets the active and inactive amounts from the user orders of borrowing deals."
      },
      "getTotalAmountFromLendOrders(uint8,address)": {
        "notice": "Calculates and gets the active and inactive amounts from the user orders of lending deals."
      },
      "initialize(address,bytes32)": {
        "notice": "Initializes the contract."
      },
      "isItayosePeriod(uint8)": {
        "notice": "Gets if the market is under the Itayose period."
      },
      "isMatured(uint8)": {
        "notice": "Gets if the market is matured."
      },
      "isOpened(uint8)": {
        "notice": "Gets if the market is opened."
      },
      "isPreOrderPeriod(uint8)": {
        "notice": "Gets if the market is under the pre-order period."
      },
      "isReady(uint8)": {
        "notice": "Gets if the market is ready."
      },
      "pauseMarket()": {
        "notice": "Pauses the lending market."
      },
      "requiredContracts()": {
        "notice": "Returns the contract names used in this contract."
      },
      "unpauseMarket()": {
        "notice": "Unpauses the lending market."
      },
      "unwindPosition(uint8,uint8,address,uint256,uint256)": {
        "notice": "Unwinds lending or borrowing positions by a specified future value amount."
      }
    },
    "notice": "Implements the module that allows lending market participants to create/cancel market orders, and also provides a future value calculation module. For updates, this contract is basically called from `LendingMarketController.sol`instead of being called \\ directly by the user.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 995,
        "contract": "contracts/protocol/LendingMarket.sol:LendingMarket",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 998,
        "contract": "contracts/protocol/LendingMarket.sol:LendingMarket",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}