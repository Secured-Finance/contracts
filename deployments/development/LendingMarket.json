{
  "address": "0xa1aa82D94434dd84b5F3ACd93acd53f8876874Bf",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "openingPrice",
          "type": "uint256"
        }
      ],
      "name": "ItayoseExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevMaturity",
          "type": "uint256"
        }
      ],
      "name": "MarketOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thresholdUnitPrice",
          "type": "uint256"
        }
      ],
      "name": "OrderBlockedByCircuitBreaker",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "orderId",
          "type": "uint48"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        }
      ],
      "name": "OrderCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "orderId",
          "type": "uint48"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        }
      ],
      "name": "OrderMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "orderId",
          "type": "uint48"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "filledAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "filledFutureValue",
          "type": "uint256"
        }
      ],
      "name": "OrderPartiallyTaken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint48[]",
          "name": "orderIds",
          "type": "uint48[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "name": "OrdersCleaned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "filledAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "filledFutureValue",
          "type": "uint256"
        }
      ],
      "name": "OrdersTaken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "_orderId",
          "type": "uint48"
        }
      ],
      "name": "cancelOrder",
      "outputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "removedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "cleanUpOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeLendOrderCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "activeBorrowOrderCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "removedLendOrderFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "removedBorrowOrderFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "removedLendOrderAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "removedBorrowOrderAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_circuitBreakerLimitRange",
          "type": "uint256"
        }
      ],
      "name": "createOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "unitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "futureValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ignoredAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILendingMarket.FilledOrder",
          "name": "filledOrder",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "futureValue",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILendingMarket.PartiallyFilledOrder",
          "name": "partiallyFilledOrder",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        }
      ],
      "name": "createPreOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_futureValue",
          "type": "uint256"
        }
      ],
      "name": "estimateFilledAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executeItayoseCall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "openingUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalOffsetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openingDate",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "futureValue",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILendingMarket.PartiallyFilledOrder",
          "name": "partiallyFilledLendingOrder",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "futureValue",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILendingMarket.PartiallyFilledOrder",
          "name": "partiallyFilledBorrowingOrder",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getBorrowOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getBorrowOrderIds",
      "outputs": [
        {
          "internalType": "uint48[]",
          "name": "activeOrderIds",
          "type": "uint48[]"
        },
        {
          "internalType": "uint48[]",
          "name": "inActiveOrderIds",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrency",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "currency",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getLendOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLendOrderIds",
      "outputs": [
        {
          "internalType": "uint48[]",
          "name": "activeOrderIds",
          "type": "uint48[]"
        },
        {
          "internalType": "uint48[]",
          "name": "inActiveOrderIds",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLendUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "ccy",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "maturity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowUnitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lendUnitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "midUnitPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isReady",
              "type": "bool"
            }
          ],
          "internalType": "struct ILendingMarket.Market",
          "name": "market",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaturity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMidUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOpeningDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "openingDate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOpeningUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "openingUnitPrices",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint48",
          "name": "_orderId",
          "type": "uint48"
        }
      ],
      "name": "getOrder",
      "outputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalAmountFromBorrowOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalAmountFromLendOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_openingDate",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isItayosePeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMatured",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOpened",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPreOrderPeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isReady",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_openingDate",
          "type": "uint256"
        }
      ],
      "name": "openMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "prevMaturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_futureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_circuitBreakerLimitRange",
          "type": "uint256"
        }
      ],
      "name": "unwind",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "unitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "futureValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ignoredAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILendingMarket.FilledOrder",
          "name": "filledOrder",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "futureValue",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILendingMarket.PartiallyFilledOrder",
          "name": "partiallyFilledOrder",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5e1d7fcc373abd8f3d98ec8806046b6a8d9ca8a4bf8d774feb4bd116bbb0c2a8",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0xa1aa82D94434dd84b5F3ACd93acd53f8876874Bf",
    "transactionIndex": 64,
    "gasUsed": "3295188",
    "logsBloom": "0x
    "blockHash": "0x78d411a1b7008c6ba554aa8a2b49b32dfc4c1f6d25dece9d8853ff89eb049d56",
    "transactionHash": "0x5e1d7fcc373abd8f3d98ec8806046b6a8d9ca8a4bf8d774feb4bd116bbb0c2a8",
    "logs": [],
    "blockNumber": 3688447,
    "cumulativeGasUsed": "10404225",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "71ad6d69ad6ba34b9bdc13e4e8cf5486",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openingPrice\",\"type\":\"uint256\"}],\"name\":\"ItayoseExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevMaturity\",\"type\":\"uint256\"}],\"name\":\"MarketOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thresholdUnitPrice\",\"type\":\"uint256\"}],\"name\":\"OrderBlockedByCircuitBreaker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"orderId\",\"type\":\"uint48\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"}],\"name\":\"OrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"orderId\",\"type\":\"uint48\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"}],\"name\":\"OrderMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"orderId\",\"type\":\"uint48\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filledFutureValue\",\"type\":\"uint256\"}],\"name\":\"OrderPartiallyTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint48[]\",\"name\":\"orderIds\",\"type\":\"uint48[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"name\":\"OrdersCleaned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filledFutureValue\",\"type\":\"uint256\"}],\"name\":\"OrdersTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_orderId\",\"type\":\"uint48\"}],\"name\":\"cancelOrder\",\"outputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"removedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"cleanUpOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeLendOrderCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeBorrowOrderCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removedLendOrderFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removedBorrowOrderFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removedLendOrderAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removedBorrowOrderAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_circuitBreakerLimitRange\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ignoredAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendingMarket.FilledOrder\",\"name\":\"filledOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureValue\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendingMarket.PartiallyFilledOrder\",\"name\":\"partiallyFilledOrder\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"createPreOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_futureValue\",\"type\":\"uint256\"}],\"name\":\"estimateFilledAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeItayoseCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"openingUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOffsetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openingDate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureValue\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendingMarket.PartiallyFilledOrder\",\"name\":\"partiallyFilledLendingOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureValue\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendingMarket.PartiallyFilledOrder\",\"name\":\"partiallyFilledBorrowingOrder\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getBorrowOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBorrowOrderIds\",\"outputs\":[{\"internalType\":\"uint48[]\",\"name\":\"activeOrderIds\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48[]\",\"name\":\"inActiveOrderIds\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrency\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getLendOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLendOrderIds\",\"outputs\":[{\"internalType\":\"uint48[]\",\"name\":\"activeOrderIds\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48[]\",\"name\":\"inActiveOrderIds\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarket\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"midUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReady\",\"type\":\"bool\"}],\"internalType\":\"struct ILendingMarket.Market\",\"name\":\"market\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMidUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpeningDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"openingDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpeningUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"openingUnitPrices\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_orderId\",\"type\":\"uint48\"}],\"name\":\"getOrder\",\"outputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalAmountFromBorrowOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalAmountFromLendOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_openingDate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isItayosePeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMatured\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPreOrderPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_openingDate\",\"type\":\"uint256\"}],\"name\":\"openMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"prevMaturity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_futureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_circuitBreakerLimitRange\",\"type\":\"uint256\"}],\"name\":\"unwind\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ignoredAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendingMarket.FilledOrder\",\"name\":\"filledOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureValue\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendingMarket.PartiallyFilledOrder\",\"name\":\"partiallyFilledOrder\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The market orders is stored in structured red-black trees and doubly linked lists in each node.\",\"kind\":\"dev\",\"methods\":{\"acceptedContracts()\":{\"details\":\"The contact name listed in this method is also needed to be listed `requiredContracts` method.\"},\"cancelOrder(address,uint48)\":{\"params\":{\"_orderId\":\"Market order id\",\"_user\":\"User address\"},\"returns\":{\"removedAmount\":\"The removed order amount from the order book by canceling\",\"side\":\"The canceled order position type\",\"unitPrice\":\"The canceled order unit price\"}},\"cleanUpOrders(address)\":{\"details\":\"The order list per user is not updated in real-time when an order is filled. This function removes the filled order from that order list per user to reduce gas costs for lazy evaluation if the collateral is enough or not.\",\"params\":{\"_user\":\"User address\"},\"returns\":{\"activeBorrowOrderCount\":\"The total amount of active borrow order on the order book\",\"activeLendOrderCount\":\"The total amount of active lend order on the order book\",\"maturity\":\"The maturity of the removed orders\",\"removedBorrowOrderAmount\":\"The total PV amount of the removed borrow order amount from the order book\",\"removedBorrowOrderFutureValue\":\"The total FV amount of the removed borrow order amount from the order book\",\"removedLendOrderAmount\":\"The total PV amount of the removed lend order amount from the order book\",\"removedLendOrderFutureValue\":\"The total FV amount of the removed lend order amount from the order book\"}},\"createOrder(uint8,address,uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of funds the maker wants to borrow/lend\",\"_circuitBreakerLimitRange\":\"Rate limit range for the circuit breaker\",\"_side\":\"Order position type, Borrow or Lend\",\"_unitPrice\":\"Amount of unit price taker wish to borrow/lend\",\"_user\":\"User's address\"},\"returns\":{\"filledOrder\":\"User's Filled order of the user\",\"partiallyFilledOrder\":\"Partially filled order on the order book\"}},\"createPreOrder(uint8,address,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of funds the maker wants to borrow/lend\",\"_side\":\"Order position type, Borrow or Lend\",\"_unitPrice\":\"Amount of unit price taker wish to borrow/lend\"}},\"estimateFilledAmount(uint8,uint256)\":{\"params\":{\"_futureValue\":\"Future value amount\",\"_side\":\"Order position type, Borrow or Lend\"},\"returns\":{\"amount\":\"The estimated amount in the present value that is filled on the order book\"}},\"executeItayoseCall()\":{\"details\":\"If the opening date had already passed when this contract was created, this Itayose need not be executed.\",\"returns\":{\"openingDate\":\"The timestamp when the market opens\",\"openingUnitPrice\":\"The opening price when Itayose is executed\",\"partiallyFilledBorrowingOrder\":\"Partially filled borrowing order on the order book\",\"partiallyFilledLendingOrder\":\"Partially filled lending order on the order book\",\"totalOffsetAmount\":\"The total filled amount when Itayose is executed\"}},\"getBorrowOrderBook(uint256)\":{\"params\":{\"_limit\":\"Max limit to get unit prices\"},\"returns\":{\"unitPrices\":\"The array of borrow unit prices\"}},\"getBorrowOrderIds(address)\":{\"params\":{\"_user\":\"User's address\"}},\"getBorrowUnitPrice()\":{\"returns\":{\"_0\":\"The highest borrow price per future value\"}},\"getCurrency()\":{\"returns\":{\"currency\":\"The market currency\"}},\"getLendOrderBook(uint256)\":{\"params\":{\"_limit\":\"Max limit to get unit prices\"},\"returns\":{\"unitPrices\":\"The array of lending unit prices\"}},\"getLendOrderIds(address)\":{\"params\":{\"_user\":\"User's address\"}},\"getLendUnitPrice()\":{\"returns\":{\"_0\":\"The lowest lend price per future value\"}},\"getMarket()\":{\"returns\":{\"market\":\"The market data\"}},\"getMaturity()\":{\"returns\":{\"maturity\":\"The market maturity\"}},\"getMidUnitPrice()\":{\"returns\":{\"_0\":\"The mid price per future value\"}},\"getOpeningDate()\":{\"returns\":{\"openingDate\":\"The market opening date\"}},\"getOpeningUnitPrice()\":{\"returns\":{\"openingUnitPrices\":\"The market opening unit price\"}},\"getOrder(uint48)\":{\"params\":{\"_orderId\":\"The market order id\"},\"returns\":{\"amount\":\"Order amount\",\"maker\":\"The order maker\",\"maturity\":\"The maturity of the selected order\",\"side\":\"Order position type, Borrow or Lend\",\"timestamp\":\"Timestamp when the order was created\",\"unitPrice\":\"Amount of interest unit price\"}},\"getTotalAmountFromBorrowOrders(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"activeAmount\":\"The total amount of active order on the order book\",\"inactiveAmount\":\"The total amount of inactive orders filled on the order book\",\"inactiveFutureValue\":\"The total future value amount of inactive orders filled on the order book\",\"maturity\":\"The maturity of market that orders were placed.\"}},\"getTotalAmountFromLendOrders(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"activeAmount\":\"The total amount of active order on the order book\",\"inactiveAmount\":\"The total amount of inactive orders filled on the order book\",\"inactiveFutureValue\":\"The total future value amount of inactive orders filled on the order book\",\"maturity\":\"The maturity of market that orders were placed.\"}},\"initialize(address,bytes32,uint256,uint256)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController.\",\"params\":{\"_ccy\":\"The main currency for the order book\",\"_maturity\":\"The initial maturity of the market\",\"_openingDate\":\"The timestamp when the market opens\",\"_resolver\":\"The address of the Address Resolver contract\"}},\"isItayosePeriod()\":{\"returns\":{\"_0\":\"The boolean if the market is under the Itayose period.\"}},\"isMatured()\":{\"returns\":{\"_0\":\"The boolean if the market is matured or not\"}},\"isOpened()\":{\"returns\":{\"_0\":\"The boolean if the market is opened or not\"}},\"isPreOrderPeriod()\":{\"returns\":{\"_0\":\"The boolean if the market is under the pre-order period.\"}},\"isReady()\":{\"returns\":{\"_0\":\"The boolean if the market is ready or not\"}},\"openMarket(uint256,uint256)\":{\"params\":{\"_maturity\":\"The new maturity\",\"_openingDate\":\"The timestamp when the market opens\"},\"returns\":{\"prevMaturity\":\"The previous maturity updated\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"requiredContracts()\":{\"details\":\"The contract name list is in `./libraries/Contracts.sol`.\"},\"unwind(uint8,address,uint256,uint256)\":{\"params\":{\"_circuitBreakerLimitRange\":\"Rate limit range for the circuit breaker\",\"_futureValue\":\"Amount of future value unwound\",\"_side\":\"Order position type, Borrow or Lend\",\"_user\":\"User's address\"},\"returns\":{\"filledOrder\":\"User's Filled order of the user\",\"partiallyFilledOrder\":\"Partially filled order\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptedContracts()\":{\"notice\":\"Returns contract names that can call this contract.\"},\"cancelOrder(address,uint48)\":{\"notice\":\"Cancels the order.\"},\"cleanUpOrders(address)\":{\"notice\":\"Cleans up own orders to remove order ids that are already filled on the order book.\"},\"createOrder(uint8,address,uint256,uint256,uint256)\":{\"notice\":\"Creates the order. Takes the order if the order is matched, and places new order if not match it.\"},\"createPreOrder(uint8,address,uint256,uint256)\":{\"notice\":\"Creates a pre-order. A pre-order will only be accepted from 168 hours (7 days) to 1 hour before the market opens (Pre-order period). At the end of this period, Itayose will be executed.\"},\"estimateFilledAmount(uint8,uint256)\":{\"notice\":\"Estimates the filled amount at the time of order creation on the order book using the future value amount.\"},\"executeItayoseCall()\":{\"notice\":\"Executes Itayose to aggregate pre-orders and determine the opening unit price. After this action, the market opens.\"},\"getBorrowOrderBook(uint256)\":{\"notice\":\"Gets the order book of borrow.\"},\"getBorrowOrderIds(address)\":{\"notice\":\"Gets active and inactive order IDs in the borrowing order book\"},\"getBorrowUnitPrice()\":{\"notice\":\"Gets the highest borrow price per future value.\"},\"getCurrency()\":{\"notice\":\"Gets the market currency.\"},\"getLendOrderBook(uint256)\":{\"notice\":\"Gets the order book of lend.\"},\"getLendOrderIds(address)\":{\"notice\":\"Gets active and inactive order IDs in the lending order book\"},\"getLendUnitPrice()\":{\"notice\":\"Gets the lowest lend price per future value.\"},\"getMarket()\":{\"notice\":\"Gets the market data.\"},\"getMaturity()\":{\"notice\":\"Gets the current market maturity.\"},\"getMidUnitPrice()\":{\"notice\":\"Gets the mid price per future value.\"},\"getOpeningDate()\":{\"notice\":\"Gets the market opening date.\"},\"getOpeningUnitPrice()\":{\"notice\":\"Gets the market opening unit price.\"},\"getOrder(uint48)\":{\"notice\":\"Gets the market order from the order book.\"},\"getTotalAmountFromBorrowOrders(address)\":{\"notice\":\"Calculates and gets the active and inactive amounts from the user orders of borrowing deals.\"},\"getTotalAmountFromLendOrders(address)\":{\"notice\":\"Calculates and gets the active and inactive amounts from the user orders of lending deals.\"},\"initialize(address,bytes32,uint256,uint256)\":{\"notice\":\"Initializes the contract.\"},\"isItayosePeriod()\":{\"notice\":\"Gets if the market is under the Itayose period.\"},\"isMatured()\":{\"notice\":\"Gets if the market is matured.\"},\"isOpened()\":{\"notice\":\"Gets if the market is opened.\"},\"isPreOrderPeriod()\":{\"notice\":\"Gets if the market is under the pre-order period.\"},\"isReady()\":{\"notice\":\"Gets if the market is ready.\"},\"openMarket(uint256,uint256)\":{\"notice\":\"Opens market\"},\"pauseMarket()\":{\"notice\":\"Pauses the lending market.\"},\"requiredContracts()\":{\"notice\":\"Returns the contract names used in this contract.\"},\"unpauseMarket()\":{\"notice\":\"Unpauses the lending market.\"},\"unwind(uint8,address,uint256,uint256)\":{\"notice\":\"Unwinds lending or borrowing positions by a specified future value amount.\"}},\"notice\":\"Implements the module that allows lending market participants to create/cancel market orders, and also provides a future value calculation module. For updates, this contract is basically called from `LendingMarketController.sol`instead of being called \\\\ directly by the user.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/LendingMarket.sol\":\"LendingMarket\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dependencies/chainlink/contracts/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Chainlink Contracts v0.4.0 (v0.8/interfaces/AggregatorV3Interface.sol)\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x81b0c18c07c8c031d5b34e4e41d2451b836355aad1b3c04c26578c92f73585f9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) ||\\n                (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(\\n            !_initializing && _initialized < version,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x47b358037bd02d2d68ae2f5685cf1f30af9d60de496258849b69a751a2ffdcde\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x21dc48f54af2ac9288ae3be6feb098ce4389a9392e52aa7056fab5f8b5a5e232\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/protocol/LendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// interfaces\\nimport {ILendingMarket} from \\\"./interfaces/ILendingMarket.sol\\\";\\n// libraries\\nimport {Contracts} from \\\"./libraries/Contracts.sol\\\";\\nimport {OrderBookLogic} from \\\"./libraries/logics/OrderBookLogic.sol\\\";\\nimport {RoundingUint256} from \\\"./libraries/math/RoundingUint256.sol\\\";\\n// mixins\\nimport {MixinAddressResolver} from \\\"./mixins/MixinAddressResolver.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"./types/ProtocolTypes.sol\\\";\\n// utils\\nimport {Pausable} from \\\"./utils/Pausable.sol\\\";\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\n// storages\\nimport {LendingMarketStorage as Storage} from \\\"./storages/LendingMarketStorage.sol\\\";\\n\\n/**\\n * @notice Implements the module that allows lending market participants to create/cancel market orders,\\n * and also provides a future value calculation module.\\n *\\n * For updates, this contract is basically called from `LendingMarketController.sol`instead of being called \\\\\\n * directly by the user.\\n *\\n * @dev The market orders is stored in structured red-black trees and doubly linked lists in each node.\\n */\\ncontract LendingMarket is ILendingMarket, MixinAddressResolver, Pausable, Proxyable {\\n    using RoundingUint256 for uint256;\\n\\n    uint256 private constant PRE_ORDER_PERIOD = 7 days;\\n    uint256 private constant ITAYOSE_PERIOD = 1 hours;\\n\\n    /**\\n     * @notice Modifier to make a function callable only by order maker.\\n     * @param _orderId Market order id\\n     */\\n    modifier onlyMaker(address user, uint48 _orderId) {\\n        (, , , address maker, , ) = getOrder(_orderId);\\n        require(maker != address(0), \\\"Order not found\\\");\\n        require(user == maker, \\\"Caller is not the maker\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to check if the market is opened.\\n     */\\n    modifier ifOpened() {\\n        require(isOpened(), \\\"Market is not opened\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to check if the market is matured.\\n     */\\n    modifier ifMatured() {\\n        require(isMatured(), \\\"Market is not matured\\\");\\n        _;\\n    }\\n\\n    modifier ifItayosePeriod() {\\n        require(isItayosePeriod(), \\\"Not in the Itayose period\\\");\\n        _;\\n    }\\n\\n    modifier ifPreOrderPeriod() {\\n        require(isPreOrderPeriod(), \\\"Not in the pre-order period\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\\n     * @param _resolver The address of the Address Resolver contract\\n     * @param _ccy The main currency for the order book\\n     * @param _maturity The initial maturity of the market\\n     * @param _openingDate The timestamp when the market opens\\n     */\\n    function initialize(\\n        address _resolver,\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _openingDate\\n    ) public initializer onlyBeacon {\\n        registerAddressResolver(_resolver);\\n\\n        Storage.slot().ccy = _ccy;\\n        Storage.slot().maturity = _maturity;\\n        Storage.slot().openingDate = _openingDate;\\n\\n        if (block.timestamp >= (_openingDate - ITAYOSE_PERIOD)) {\\n            Storage.slot().isReady[Storage.slot().maturity] = true;\\n        }\\n\\n        buildCache();\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](1);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](1);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n    }\\n\\n    /**\\n     * @notice Gets the market data.\\n     * @return market The market data\\n     */\\n    function getMarket() external view override returns (Market memory market) {\\n        return\\n            Market({\\n                ccy: Storage.slot().ccy,\\n                maturity: Storage.slot().maturity,\\n                openingDate: Storage.slot().openingDate,\\n                borrowUnitPrice: OrderBookLogic.getLowestBorrowingUnitPrice(),\\n                lendUnitPrice: OrderBookLogic.getHighestLendingUnitPrice(),\\n                midUnitPrice: getMidUnitPrice(),\\n                isReady: isReady()\\n            });\\n    }\\n\\n    /**\\n     * @notice Gets the highest borrow price per future value.\\n     * @return The highest borrow price per future value\\n     */\\n    function getBorrowUnitPrice() external view override returns (uint256) {\\n        return OrderBookLogic.getLowestBorrowingUnitPrice();\\n    }\\n\\n    /**\\n     * @notice Gets the lowest lend price per future value.\\n     * @return The lowest lend price per future value\\n     */\\n    function getLendUnitPrice() external view override returns (uint256) {\\n        return OrderBookLogic.getHighestLendingUnitPrice();\\n    }\\n\\n    /**\\n     * @notice Gets the mid price per future value.\\n     * @return The mid price per future value\\n     */\\n    function getMidUnitPrice() public view override returns (uint256) {\\n        uint256 borrowUnitPrice = OrderBookLogic.getLowestBorrowingUnitPrice();\\n        uint256 lendUnitPrice = OrderBookLogic.getHighestLendingUnitPrice();\\n        return (borrowUnitPrice + lendUnitPrice).div(2);\\n    }\\n\\n    /**\\n     * @notice Gets the order book of borrow.\\n     * @param _limit Max limit to get unit prices\\n     * @return unitPrices The array of borrow unit prices\\n     */\\n    function getBorrowOrderBook(uint256 _limit)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        return OrderBookLogic.getBorrowOrderBook(_limit);\\n    }\\n\\n    /**\\n     * @notice Gets the order book of lend.\\n     * @param _limit Max limit to get unit prices\\n     * @return unitPrices The array of lending unit prices\\n     */\\n    function getLendOrderBook(uint256 _limit)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        return OrderBookLogic.getLendOrderBook(_limit);\\n    }\\n\\n    /**\\n     * @notice Gets the current market maturity.\\n     * @return maturity The market maturity\\n     */\\n    function getMaturity() external view override returns (uint256 maturity) {\\n        return Storage.slot().maturity;\\n    }\\n\\n    /**\\n     * @notice Gets the market currency.\\n     * @return currency The market currency\\n     */\\n    function getCurrency() external view override returns (bytes32 currency) {\\n        return Storage.slot().ccy;\\n    }\\n\\n    /**\\n     * @notice Gets the market opening date.\\n     * @return openingDate The market opening date\\n     */\\n    function getOpeningDate() external view override returns (uint256 openingDate) {\\n        return Storage.slot().openingDate;\\n    }\\n\\n    /**\\n     * @notice Gets the market opening unit price.\\n     * @return openingUnitPrices The market opening unit price\\n     */\\n    function getOpeningUnitPrice() external view override returns (uint256 openingUnitPrices) {\\n        return Storage.slot().openingUnitPrices[Storage.slot().maturity];\\n    }\\n\\n    /**\\n     * @notice Gets if the market is ready.\\n     * @return The boolean if the market is ready or not\\n     */\\n    function isReady() public view override returns (bool) {\\n        return Storage.slot().isReady[Storage.slot().maturity];\\n    }\\n\\n    /**\\n     * @notice Gets if the market is matured.\\n     * @return The boolean if the market is matured or not\\n     */\\n    function isMatured() public view override returns (bool) {\\n        return block.timestamp >= Storage.slot().maturity;\\n    }\\n\\n    /**\\n     * @notice Gets if the market is opened.\\n     * @return The boolean if the market is opened or not\\n     */\\n    function isOpened() public view override returns (bool) {\\n        return\\n            Storage.slot().isReady[Storage.slot().maturity] &&\\n            !isMatured() &&\\n            block.timestamp >= Storage.slot().openingDate;\\n    }\\n\\n    /**\\n     * @notice Gets if the market is under the Itayose period.\\n     * @return The boolean if the market is under the Itayose period.\\n     */\\n    function isItayosePeriod() public view returns (bool) {\\n        return\\n            block.timestamp >= (Storage.slot().openingDate - ITAYOSE_PERIOD) &&\\n            !Storage.slot().isReady[Storage.slot().maturity];\\n    }\\n\\n    /**\\n     * @notice Gets if the market is under the pre-order period.\\n     * @return The boolean if the market is under the pre-order period.\\n     */\\n    function isPreOrderPeriod() public view override returns (bool) {\\n        return\\n            block.timestamp >= (Storage.slot().openingDate - PRE_ORDER_PERIOD) &&\\n            block.timestamp < (Storage.slot().openingDate - ITAYOSE_PERIOD);\\n    }\\n\\n    /**\\n     * @notice Gets the market order from the order book.\\n     * @param _orderId The market order id\\n     * @return side Order position type, Borrow or Lend\\n     * @return unitPrice Amount of interest unit price\\n     * @return maturity The maturity of the selected order\\n     * @return maker The order maker\\n     * @return amount Order amount\\n     * @return timestamp Timestamp when the order was created\\n     */\\n    function getOrder(uint48 _orderId)\\n        public\\n        view\\n        override\\n        returns (\\n            ProtocolTypes.Side side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        )\\n    {\\n        return OrderBookLogic.getOrder(_orderId);\\n    }\\n\\n    /**\\n     * @notice Calculates and gets the active and inactive amounts from the user orders of lending deals.\\n     * @param _user User's address\\n     * @return activeAmount The total amount of active order on the order book\\n     * @return inactiveAmount The total amount of inactive orders filled on the order book\\n     * @return inactiveFutureValue The total future value amount of inactive orders filled on the order book\\n     * @return maturity The maturity of market that orders were placed.\\n     */\\n    function getTotalAmountFromLendOrders(address _user)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        return OrderBookLogic.getTotalAmountFromLendOrders(_user);\\n    }\\n\\n    /**\\n     * @notice Calculates and gets the active and inactive amounts from the user orders of borrowing deals.\\n     * @param _user User's address\\n     * @return activeAmount The total amount of active order on the order book\\n     * @return inactiveAmount The total amount of inactive orders filled on the order book\\n     * @return inactiveFutureValue The total future value amount of inactive orders filled on the order book\\n     * @return maturity The maturity of market that orders were placed.\\n     */\\n    function getTotalAmountFromBorrowOrders(address _user)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        return OrderBookLogic.getTotalAmountFromBorrowOrders(_user);\\n    }\\n\\n    /**\\n     * @notice Gets active and inactive order IDs in the lending order book\\n     * @param _user User's address\\n     */\\n    function getLendOrderIds(address _user)\\n        external\\n        view\\n        override\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        (activeOrderIds, inActiveOrderIds) = OrderBookLogic.getLendOrderIds(_user);\\n    }\\n\\n    /**\\n     * @notice Gets active and inactive order IDs in the borrowing order book\\n     * @param _user User's address\\n     */\\n    function getBorrowOrderIds(address _user)\\n        external\\n        view\\n        override\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        (activeOrderIds, inActiveOrderIds) = OrderBookLogic.getBorrowOrderIds(_user);\\n    }\\n\\n    /**\\n     * @notice Estimates the filled amount at the time of order creation on the order book\\n     * using the future value amount.\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _futureValue Future value amount\\n     * @return amount The estimated amount in the present value that is filled on the order book\\n     */\\n    function estimateFilledAmount(ProtocolTypes.Side _side, uint256 _futureValue)\\n        external\\n        view\\n        override\\n        returns (uint256 amount)\\n    {\\n        return OrderBookLogic.estimateFilledAmount(_side, _futureValue);\\n    }\\n\\n    /**\\n     * @notice Opens market\\n     * @param _maturity The new maturity\\n     * @param _openingDate The timestamp when the market opens\\n     * @return prevMaturity The previous maturity updated\\n     */\\n    function openMarket(uint256 _maturity, uint256 _openingDate)\\n        external\\n        override\\n        ifMatured\\n        onlyAcceptedContracts\\n        returns (uint256 prevMaturity)\\n    {\\n        prevMaturity = Storage.slot().maturity;\\n        Storage.slot().maturity = _maturity;\\n        Storage.slot().openingDate = _openingDate;\\n\\n        emit MarketOpened(_maturity, prevMaturity);\\n    }\\n\\n    /**\\n     * @notice Cancels the order.\\n     * @param _user User address\\n     * @param _orderId Market order id\\n     * @return side The canceled order position type\\n     * @return removedAmount The removed order amount from the order book by canceling\\n     * @return unitPrice The canceled order unit price\\n     */\\n    function cancelOrder(address _user, uint48 _orderId)\\n        external\\n        override\\n        onlyMaker(_user, _orderId)\\n        whenNotPaused\\n        onlyAcceptedContracts\\n        returns (\\n            ProtocolTypes.Side side,\\n            uint256 removedAmount,\\n            uint256 unitPrice\\n        )\\n    {\\n        (side, removedAmount, unitPrice) = OrderBookLogic.removeOrder(_user, _orderId);\\n\\n        emit OrderCanceled(\\n            _orderId,\\n            _user,\\n            side,\\n            Storage.slot().ccy,\\n            Storage.slot().maturity,\\n            removedAmount,\\n            unitPrice\\n        );\\n    }\\n\\n    /**\\n     * @notice Cleans up own orders to remove order ids that are already filled on the order book.\\n     * @dev The order list per user is not updated in real-time when an order is filled.\\n     * This function removes the filled order from that order list per user to reduce gas costs\\n     * for lazy evaluation if the collateral is enough or not.\\n     *\\n     * @param _user User address\\n     * @return activeLendOrderCount The total amount of active lend order on the order book\\n     * @return activeBorrowOrderCount The total amount of active borrow order on the order book\\n     * @return removedLendOrderFutureValue The total FV amount of the removed lend order amount from the order book\\n     * @return removedBorrowOrderFutureValue The total FV amount of the removed borrow order amount from the order book\\n     * @return removedLendOrderAmount The total PV amount of the removed lend order amount from the order book\\n     * @return removedBorrowOrderAmount The total PV amount of the removed borrow order amount from the order book\\n     * @return maturity The maturity of the removed orders\\n     */\\n    function cleanUpOrders(address _user)\\n        external\\n        override\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        )\\n    {\\n        maturity = Storage.slot().userCurrentMaturities[_user];\\n\\n        uint48[] memory lendOrderIds;\\n        uint48[] memory borrowOrderIds;\\n\\n        (\\n            lendOrderIds,\\n            activeLendOrderCount,\\n            removedLendOrderFutureValue,\\n            removedLendOrderAmount\\n        ) = OrderBookLogic.cleanLendOrders(_user, maturity);\\n\\n        (\\n            borrowOrderIds,\\n            activeBorrowOrderCount,\\n            removedBorrowOrderFutureValue,\\n            removedBorrowOrderAmount\\n        ) = OrderBookLogic.cleanBorrowOrders(_user, maturity);\\n\\n        if (removedLendOrderAmount > 0) {\\n            emit OrdersCleaned(\\n                lendOrderIds,\\n                _user,\\n                ProtocolTypes.Side.LEND,\\n                Storage.slot().ccy,\\n                Storage.slot().maturity\\n            );\\n        }\\n\\n        if (removedBorrowOrderAmount > 0) {\\n            emit OrdersCleaned(\\n                borrowOrderIds,\\n                _user,\\n                ProtocolTypes.Side.BORROW,\\n                Storage.slot().ccy,\\n                Storage.slot().maturity\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Creates the order. Takes the order if the order is matched,\\n     * and places new order if not match it.\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _user User's address\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _unitPrice Amount of unit price taker wish to borrow/lend\\n     * @param _circuitBreakerLimitRange Rate limit range for the circuit breaker\\n     * @return filledOrder User's Filled order of the user\\n     * @return partiallyFilledOrder Partially filled order on the order book\\n     */\\n    function createOrder(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice,\\n        uint256 _circuitBreakerLimitRange\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        onlyAcceptedContracts\\n        ifOpened\\n        returns (FilledOrder memory filledOrder, PartiallyFilledOrder memory partiallyFilledOrder)\\n    {\\n        require(_amount > 0, \\\"Amount is zero\\\");\\n        _updateUserMaturity(_user);\\n\\n        (bool isFilled, uint256 executedUnitPrice, bool ignoreRemainingAmount) = OrderBookLogic\\n            .checkCircuitBreakerThreshold(_side, _unitPrice, _circuitBreakerLimitRange);\\n\\n        if (isFilled) {\\n            (filledOrder, partiallyFilledOrder) = _takeOrder(\\n                _side,\\n                _user,\\n                _amount,\\n                executedUnitPrice,\\n                ignoreRemainingAmount\\n            );\\n        } else if (!ignoreRemainingAmount) {\\n            _makeOrder(_side, _user, _amount, executedUnitPrice);\\n        } else {\\n            emit OrderBlockedByCircuitBreaker(\\n                _user,\\n                Storage.slot().ccy,\\n                _side,\\n                Storage.slot().maturity,\\n                executedUnitPrice\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Creates a pre-order. A pre-order will only be accepted from 168 hours (7 days) to 1 hour\\n     * before the market opens (Pre-order period). At the end of this period, Itayose will be executed.\\n     *\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _unitPrice Amount of unit price taker wish to borrow/lend\\n     */\\n    function createPreOrder(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) external override whenNotPaused onlyAcceptedContracts ifPreOrderPeriod {\\n        require(_amount > 0, \\\"Amount is zero\\\");\\n\\n        _updateUserMaturity(_user);\\n\\n        if (\\n            (_side == ProtocolTypes.Side.LEND && OrderBookLogic.hasBorrowOrder(_user)) ||\\n            (_side == ProtocolTypes.Side.BORROW && OrderBookLogic.hasLendOrder(_user))\\n        ) {\\n            revert(\\\"Opposite side order exists\\\");\\n        }\\n\\n        uint48 orderId = _makeOrder(_side, _user, _amount, _unitPrice);\\n        Storage.slot().isPreOrder[orderId] = true;\\n    }\\n\\n    /**\\n     * @notice Unwinds lending or borrowing positions by a specified future value amount.\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _user User's address\\n     * @param _futureValue Amount of future value unwound\\n     * @param _circuitBreakerLimitRange Rate limit range for the circuit breaker\\n     * @return filledOrder User's Filled order of the user\\n     * @return partiallyFilledOrder Partially filled order\\n     */\\n    function unwind(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _futureValue,\\n        uint256 _circuitBreakerLimitRange\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        onlyAcceptedContracts\\n        ifOpened\\n        returns (FilledOrder memory filledOrder, PartiallyFilledOrder memory partiallyFilledOrder)\\n    {\\n        require(_futureValue > 0, \\\"Can't place empty future value amount\\\");\\n        return _unwind(_side, _user, _futureValue, _circuitBreakerLimitRange);\\n    }\\n\\n    /**\\n     * @notice Executes Itayose to aggregate pre-orders and determine the opening unit price.\\n     * After this action, the market opens.\\n     * @dev If the opening date had already passed when this contract was created, this Itayose need not be executed.\\n     * @return openingUnitPrice The opening price when Itayose is executed\\n     * @return totalOffsetAmount The total filled amount when Itayose is executed\\n     * @return openingDate The timestamp when the market opens\\n     * @return partiallyFilledLendingOrder Partially filled lending order on the order book\\n     * @return partiallyFilledBorrowingOrder Partially filled borrowing order on the order book\\n     */\\n    function executeItayoseCall()\\n        external\\n        override\\n        whenNotPaused\\n        onlyAcceptedContracts\\n        ifItayosePeriod\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 totalOffsetAmount,\\n            uint256 openingDate,\\n            PartiallyFilledOrder memory partiallyFilledLendingOrder,\\n            PartiallyFilledOrder memory partiallyFilledBorrowingOrder\\n        )\\n    {\\n        (openingUnitPrice, totalOffsetAmount) = OrderBookLogic.getOpeningUnitPrice();\\n\\n        if (totalOffsetAmount > 0) {\\n            ProtocolTypes.Side[2] memory sides = [\\n                ProtocolTypes.Side.LEND,\\n                ProtocolTypes.Side.BORROW\\n            ];\\n\\n            for (uint256 i; i < sides.length; i++) {\\n                ProtocolTypes.Side partiallyFilledOrderSide;\\n                (\\n                    ,\\n                    ,\\n                    ,\\n                    uint48 partiallyFilledOrderId,\\n                    address partiallyFilledMaker,\\n                    uint256 partiallyFilledAmount,\\n                    uint256 partiallyFilledFutureValue,\\n\\n                ) = OrderBookLogic.dropOrders(sides[i], totalOffsetAmount, 0, 0);\\n\\n                if (partiallyFilledFutureValue > 0) {\\n                    if (sides[i] == ProtocolTypes.Side.LEND) {\\n                        partiallyFilledOrderSide = ProtocolTypes.Side.BORROW;\\n                        partiallyFilledBorrowingOrder.maker = partiallyFilledMaker;\\n                        partiallyFilledBorrowingOrder.amount = partiallyFilledAmount;\\n                        partiallyFilledBorrowingOrder.futureValue = partiallyFilledFutureValue;\\n                    } else {\\n                        partiallyFilledOrderSide = ProtocolTypes.Side.LEND;\\n                        partiallyFilledLendingOrder.maker = partiallyFilledMaker;\\n                        partiallyFilledLendingOrder.amount = partiallyFilledAmount;\\n                        partiallyFilledLendingOrder.futureValue = partiallyFilledFutureValue;\\n                    }\\n\\n                    emit OrderPartiallyTaken(\\n                        partiallyFilledOrderId,\\n                        partiallyFilledMaker,\\n                        partiallyFilledOrderSide,\\n                        Storage.slot().ccy,\\n                        Storage.slot().maturity,\\n                        partiallyFilledAmount,\\n                        partiallyFilledFutureValue\\n                    );\\n                }\\n            }\\n\\n            emit ItayoseExecuted(Storage.slot().ccy, Storage.slot().maturity, openingUnitPrice);\\n        }\\n\\n        Storage.slot().isReady[Storage.slot().maturity] = true;\\n        Storage.slot().openingUnitPrices[Storage.slot().maturity] = openingUnitPrice;\\n        openingDate = Storage.slot().openingDate;\\n    }\\n\\n    /**\\n     * @notice Pauses the lending market.\\n     */\\n    function pauseMarket() external override onlyAcceptedContracts {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses the lending market.\\n     */\\n    function unpauseMarket() external override onlyAcceptedContracts {\\n        _unpause();\\n    }\\n\\n    function _updateUserMaturity(address _user) private {\\n        uint256 userMaturity = Storage.slot().userCurrentMaturities[_user];\\n        require(\\n            userMaturity == Storage.slot().maturity ||\\n                (userMaturity != Storage.slot().maturity &&\\n                    Storage.slot().activeLendOrderIds[_user].length == 0 &&\\n                    Storage.slot().activeBorrowOrderIds[_user].length == 0),\\n            \\\"Order found in past maturity\\\"\\n        );\\n\\n        if (userMaturity != Storage.slot().maturity) {\\n            Storage.slot().userCurrentMaturities[_user] = Storage.slot().maturity;\\n        }\\n    }\\n\\n    /**\\n     * @notice Makes new market order.\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _user User's address\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _unitPrice Preferable interest unit price\\n     */\\n    function _makeOrder(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) private returns (uint48 orderId) {\\n        orderId = OrderBookLogic.insertOrder(_side, _user, _amount, _unitPrice);\\n\\n        emit OrderMade(\\n            orderId,\\n            _user,\\n            _side,\\n            Storage.slot().ccy,\\n            Storage.slot().maturity,\\n            _amount,\\n            _unitPrice\\n        );\\n    }\\n\\n    /**\\n     * @notice Takes the market order.\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _user User's address\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _unitPrice Amount of unit price taken\\n     * @param _ignoreRemainingAmount Boolean for whether to ignore the remaining amount after taking orders\\n     */\\n    function _takeOrder(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice,\\n        bool _ignoreRemainingAmount\\n    )\\n        private\\n        returns (FilledOrder memory filledOrder, PartiallyFilledOrder memory partiallyFilledOrder)\\n    {\\n        uint48 partiallyFilledOrderId;\\n        uint256 remainingAmount;\\n\\n        (\\n            filledOrder.unitPrice,\\n            ,\\n            filledOrder.futureValue,\\n            partiallyFilledOrderId,\\n            partiallyFilledOrder.maker,\\n            partiallyFilledOrder.amount,\\n            partiallyFilledOrder.futureValue,\\n            remainingAmount\\n        ) = OrderBookLogic.dropOrders(_side, _amount, 0, _unitPrice);\\n\\n        filledOrder.amount = _amount - remainingAmount;\\n\\n        emit OrdersTaken(\\n            _user,\\n            _side,\\n            Storage.slot().ccy,\\n            Storage.slot().maturity,\\n            filledOrder.amount,\\n            filledOrder.unitPrice,\\n            filledOrder.futureValue\\n        );\\n\\n        if (partiallyFilledOrder.futureValue > 0) {\\n            emit OrderPartiallyTaken(\\n                partiallyFilledOrderId,\\n                partiallyFilledOrder.maker,\\n                _side == ProtocolTypes.Side.LEND\\n                    ? ProtocolTypes.Side.BORROW\\n                    : ProtocolTypes.Side.LEND,\\n                Storage.slot().ccy,\\n                Storage.slot().maturity,\\n                partiallyFilledOrder.amount,\\n                partiallyFilledOrder.futureValue\\n            );\\n        }\\n\\n        if (remainingAmount > 0) {\\n            if (_ignoreRemainingAmount) {\\n                filledOrder.ignoredAmount = remainingAmount;\\n            } else {\\n                // Make a new order for the remaining amount of input\\n                _makeOrder(_side, _user, remainingAmount, _unitPrice);\\n            }\\n        }\\n    }\\n\\n    function _unwind(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _futureValue,\\n        uint256 _circuitBreakerLimitRange\\n    )\\n        private\\n        returns (FilledOrder memory filledOrder, PartiallyFilledOrder memory partiallyFilledOrder)\\n    {\\n        (bool isFilled, uint256 executedUnitPrice, ) = OrderBookLogic.checkCircuitBreakerThreshold(\\n            _side,\\n            0,\\n            _circuitBreakerLimitRange\\n        );\\n\\n        if (isFilled) {\\n            uint48 partiallyFilledOrderId;\\n\\n            (\\n                filledOrder.unitPrice,\\n                filledOrder.amount,\\n                filledOrder.futureValue,\\n                partiallyFilledOrderId,\\n                partiallyFilledOrder.maker,\\n                partiallyFilledOrder.amount,\\n                partiallyFilledOrder.futureValue,\\n\\n            ) = OrderBookLogic.dropOrders(_side, 0, _futureValue, executedUnitPrice);\\n\\n            emit OrdersTaken(\\n                _user,\\n                _side,\\n                Storage.slot().ccy,\\n                Storage.slot().maturity,\\n                filledOrder.amount,\\n                filledOrder.unitPrice,\\n                filledOrder.futureValue\\n            );\\n\\n            if (partiallyFilledOrder.futureValue > 0) {\\n                emit OrderPartiallyTaken(\\n                    partiallyFilledOrderId,\\n                    partiallyFilledOrder.maker,\\n                    _side == ProtocolTypes.Side.LEND\\n                        ? ProtocolTypes.Side.BORROW\\n                        : ProtocolTypes.Side.LEND,\\n                    Storage.slot().ccy,\\n                    Storage.slot().maturity,\\n                    partiallyFilledOrder.amount,\\n                    partiallyFilledOrder.futureValue\\n                );\\n            }\\n        } else {\\n            emit OrderBlockedByCircuitBreaker(\\n                _user,\\n                Storage.slot().ccy,\\n                _side,\\n                Storage.slot().maturity,\\n                executedUnitPrice\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05859794baa36cee81f984e12b59970fa05626f26adb1e177e0b5234515deded\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IBeaconProxyController {\\n    event BeaconProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function deployFutureValueVault() external returns (address futureValueVault);\\n\\n    function deployLendingMarket(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 openingDate\\n    ) external returns (address market);\\n}\\n\",\"keccak256\":\"0xcedc431629fa9537e673fc37ceae4cc645cf1f4ff9071b05396b9e3944ce6dd9\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Currency} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CurrencyAdded(bytes32 indexed ccy, uint256 haircut);\\n    event CurrencyRemoved(bytes32 indexed ccy);\\n\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n\\n    event PriceFeedUpdated(bytes32 ccy, uint256 decimals, address[] indexed priceFeeds);\\n    event PriceFeedRemoved(bytes32 ccy);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256 _amount\\n    ) external view returns (uint256 amount);\\n\\n    function convertFromBaseCurrency(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, uint256 _amount)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, int256 _amount)\\n        external\\n        view\\n        returns (int256 amount);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getBaseCurrency() external view returns (bytes32);\\n\\n    function getDecimals(bytes32) external view returns (uint8);\\n\\n    function getCurrencies() external view returns (bytes32[] memory);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getLastPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function currencyExists(bytes32 _ccy) external view returns (bool);\\n\\n    function updatePriceFeed(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        address[] calldata _priceFeeds\\n    ) external;\\n\\n    function removePriceFeed(bytes32 _ccy) external;\\n\\n    function addCurrency(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        uint256 _haircut,\\n        address[] calldata _priceFeeds\\n    ) external;\\n\\n    function updateHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function removeCurrency(bytes32 _ccy) external;\\n}\\n\",\"keccak256\":\"0xabd4040d990a6af80ce27496a643e167de301ef11dea8f1281755a4936712b39\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AutoRollLog} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\\n    event AutoRollExecuted(\\n        bytes32 indexed ccy,\\n        uint256 lendingCompoundFactor,\\n        uint256 borrowingCompoundFactor,\\n        uint256 unitPrice,\\n        uint256 currentMaturity,\\n        uint256 previousMaturity\\n    );\\n\\n    function isInitialized(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getMaturityGenesisValue(bytes32 _ccy, uint256 _maturity)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getAutoRollLog(bytes32 ccy, uint256 maturity)\\n        external\\n        view\\n        returns (AutoRollLog memory);\\n\\n    function getLatestAutoRollLog(bytes32 _ccy) external view returns (AutoRollLog memory);\\n\\n    function getGenesisValueInFutureValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function calculateFVFromFV(\\n        bytes32 _ccy,\\n        uint256 _basisMaturity,\\n        uint256 _destinationMaturity,\\n        int256 _futureValue\\n    ) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function getBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function calculateBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        int256 balance,\\n        uint256 fromMaturity,\\n        uint256 toMaturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function initializeCurrencySetting(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor,\\n        uint256 maturity\\n    ) external;\\n\\n    function updateInitialCompoundFactor(bytes32 _ccy, uint256 _unitPrice) external;\\n\\n    function executeAutoRoll(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice,\\n        uint256 feeRate\\n    ) external;\\n\\n    function updateGenesisValueWithFutureValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 fvAmount\\n    ) external;\\n\\n    function updateGenesisValueWithResidualAmount(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity\\n    ) external;\\n\\n    function transferFrom(\\n        bytes32 _ccy,\\n        address _sender,\\n        address _receiver,\\n        int256 _amount\\n    ) external;\\n\\n    function cleanUpGenesisValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external;\\n\\n    function resetGenesisValue(bytes32 _ccy, address _user) external;\\n}\\n\",\"keccak256\":\"0xe7f448ce594b9503483dd8071d18c3123022a6add49ca9878bde17a8e71078df\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport {MarketOrder} from \\\"../storages/LendingMarketStorage.sol\\\";\\n\\ninterface ILendingMarket {\\n    struct FilledOrder {\\n        uint256 unitPrice;\\n        uint256 amount;\\n        uint256 futureValue;\\n        uint256 ignoredAmount;\\n    }\\n\\n    struct PartiallyFilledOrder {\\n        address maker;\\n        uint256 amount;\\n        uint256 futureValue;\\n    }\\n\\n    event OrderCanceled(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n\\n    event OrderMade(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n\\n    event OrdersTaken(\\n        address indexed taker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 filledAmount,\\n        uint256 unitPrice,\\n        uint256 filledFutureValue\\n    );\\n\\n    event OrderPartiallyTaken(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 maturity,\\n        uint256 filledAmount,\\n        uint256 filledFutureValue\\n    );\\n\\n    event OrdersCleaned(\\n        uint48[] orderIds,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 maturity\\n    );\\n\\n    event OrderBlockedByCircuitBreaker(\\n        address indexed user,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 thresholdUnitPrice\\n    );\\n\\n    event MarketOpened(uint256 maturity, uint256 prevMaturity);\\n\\n    event ItayoseExecuted(bytes32 ccy, uint256 maturity, uint256 openingPrice);\\n\\n    struct Market {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        uint256 openingDate;\\n        uint256 borrowUnitPrice;\\n        uint256 lendUnitPrice;\\n        uint256 midUnitPrice;\\n        bool isReady;\\n    }\\n\\n    function getMarket() external view returns (Market memory);\\n\\n    function getBorrowUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getLendUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getMidUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getBorrowOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturity() external view returns (uint256);\\n\\n    function getCurrency() external view returns (bytes32);\\n\\n    function getOpeningDate() external view returns (uint256);\\n\\n    function getOpeningUnitPrice() external view returns (uint256);\\n\\n    function isReady() external view returns (bool);\\n\\n    function isMatured() external view returns (bool);\\n\\n    function isOpened() external view returns (bool);\\n\\n    function isItayosePeriod() external view returns (bool);\\n\\n    function isPreOrderPeriod() external returns (bool);\\n\\n    function getOrder(uint48 orderId)\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        );\\n\\n    function getTotalAmountFromLendOrders(address user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getTotalAmountFromBorrowOrders(address user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getLendOrderIds(address user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds);\\n\\n    function getBorrowOrderIds(address user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds);\\n\\n    function estimateFilledAmount(ProtocolTypes.Side side, uint256 futureValue)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function openMarket(uint256 maturity, uint256 openingDate) external returns (uint256);\\n\\n    function cancelOrder(address user, uint48 orderId)\\n        external\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        );\\n\\n    function createOrder(\\n        ProtocolTypes.Side side,\\n        address account,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        uint256 circuitBreakerLimitRange\\n    )\\n        external\\n        returns (FilledOrder memory filledOrder, PartiallyFilledOrder memory partiallyFilledOrder);\\n\\n    function createPreOrder(\\n        ProtocolTypes.Side side,\\n        address user,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external;\\n\\n    function unwind(\\n        ProtocolTypes.Side side,\\n        address user,\\n        uint256 futureValue,\\n        uint256 circuitBreakerLimitRange\\n    )\\n        external\\n        returns (FilledOrder memory filledOrder, PartiallyFilledOrder memory partiallyFilledOrder);\\n\\n    function executeItayoseCall()\\n        external\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 totalOffsetAmount,\\n            uint256 openingDate,\\n            PartiallyFilledOrder memory partiallyFilledLendingOrder,\\n            PartiallyFilledOrder memory partiallyFilledBorrowingOrder\\n        );\\n\\n    function cleanUpOrders(address user)\\n        external\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        );\\n\\n    function pauseMarket() external;\\n\\n    function unpauseMarket() external;\\n}\\n\",\"keccak256\":\"0x5c10f60625a1c9118d56767bc5efe665b0e6f00456e9a3027a4bb0bba2d57b22\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ILendingMarketController {\\n    struct Order {\\n        uint48 orderId;\\n        bytes32 ccy;\\n        uint256 maturity;\\n        ProtocolTypes.Side side;\\n        uint256 unitPrice;\\n        uint256 amount;\\n        uint256 timestamp;\\n    }\\n\\n    struct Position {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        int256 presentValue;\\n        int256 futureValue;\\n    }\\n\\n    function isTerminated() external view returns (bool);\\n\\n    function isRedemptionRequired(address _user) external view returns (bool);\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarkets(bytes32 ccy) external view returns (address[] memory);\\n\\n    function getLendingMarket(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getBorrowUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getLendUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getMidUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getBorrowOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInBaseCurrency(address user)\\n        external\\n        view\\n        returns (int256 totalPresentValue);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256 genesisValue);\\n\\n    function getOrders(bytes32[] memory ccys, address user)\\n        external\\n        view\\n        returns (Order[] memory activeOrders, Order[] memory inactiveOrders);\\n\\n    function getPosition(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) external view returns (int256 presentValue, int256 futureValue);\\n\\n    function getPositions(bytes32[] memory ccys, address user)\\n        external\\n        view\\n        returns (Position[] memory positions);\\n\\n    function calculateFunds(bytes32 ccy, address user)\\n        external\\n        view\\n        returns (\\n            uint256 workingLendOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 collateralAmount,\\n            uint256 lentAmount,\\n            uint256 workingBorrowOrdersAmount,\\n            uint256 debtAmount,\\n            uint256 borrowedAmount\\n        );\\n\\n    function calculateTotalFundsInBaseCurrency(\\n        address user,\\n        bytes32 depositCcy,\\n        uint256 depositAmount\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalWorkingLendOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalCollateralAmount,\\n            uint256 totalLentAmount,\\n            uint256 totalWorkingBorrowOrdersAmount,\\n            uint256 totalDebtAmount,\\n            uint256 totalBorrowedAmount,\\n            bool isEnoughDeposit\\n        );\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor,\\n        uint256 orderFeeRate,\\n        uint256 autoRollFeeRate,\\n        uint256 circuitBreakerLimitRange\\n    ) external;\\n\\n    function createLendingMarket(bytes32 ccy, uint256 marketOpeningDate) external;\\n\\n    function createOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndCreateOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function createPreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndCreatePreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function unwindPosition(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function executeItayoseCalls(bytes32[] memory currencies, uint256 maturity)\\n        external\\n        returns (bool);\\n\\n    function executeRedemption() external returns (bool);\\n\\n    function executeLiquidationCall(\\n        bytes32 collateralCcy,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        address user\\n    ) external returns (bool);\\n\\n    function cancelOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint48 orderId\\n    ) external returns (bool);\\n\\n    function rotateLendingMarkets(bytes32 ccy) external;\\n\\n    function executeEmergencyTermination() external;\\n\\n    function pauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function cleanUpAllFunds(address user) external returns (bool);\\n\\n    function cleanUpFunds(bytes32 ccy, address user) external returns (uint256 activeOrderCount);\\n}\\n\",\"keccak256\":\"0x7b60ff6d937724aabc6c190813ea595849a3cd56bc181b864e9408492eb87b57\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IReserveFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IReserveFund {\\n    event Pause(address account);\\n    event Unpause(address account);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function executeRedemption() external;\\n}\\n\",\"keccak256\":\"0x748fa412f6e9c1ac2b5556415a3b653dc6f7959bffcf4c375ad34d3eb7c3e85c\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ITokenVault {\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress, bool isCollateral);\\n    event CurrencyUpdated(bytes32 ccy, bool isCollateral);\\n\\n    function isCovered(\\n        address user,\\n        bytes32 ccy,\\n        uint256 unsettledExp,\\n        ProtocolTypes.Side unsettledOrderSide\\n    ) external view returns (bool);\\n\\n    function isCovered(address user) external view returns (bool);\\n\\n    function isCollateral(bytes32 ccy) external view returns (bool);\\n\\n    function isCollateral(bytes32[] calldata ccys)\\n        external\\n        view\\n        returns (bool[] memory isCollateralCurrencies);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getTokenAddress(bytes32 ccy) external view returns (address);\\n\\n    function getCollateralCurrencies() external view returns (bytes32[] memory);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256 maxWithdraw);\\n\\n    function getWithdrawableCollateral(bytes32 ccy, address user) external view returns (uint256);\\n\\n    function getCoverage(address user) external view returns (uint256 coverage);\\n\\n    function getUnusedCollateral(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address party) external view returns (uint256);\\n\\n    function getLiquidationAmount(\\n        address user,\\n        bytes32 liquidationCcy,\\n        uint256 liquidationAmountMaximum\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liquidationAmount,\\n            uint256 protocolFee,\\n            uint256 liquidatorFee\\n        );\\n\\n    function getTotalDepositAmount(bytes32 ccy) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getCollateralParameters()\\n        external\\n        view\\n        returns (\\n            uint256 liquidationThresholdRate,\\n            uint256 liquidationProtocolFeeRate,\\n            uint256 liquidatorFeeRate\\n        );\\n\\n    function setCollateralParameters(\\n        uint256 liquidationThresholdRate,\\n        uint256 liquidationProtocolFeeRate,\\n        uint256 liquidatorFeeRate\\n    ) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositFrom(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function removeDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function resetDepositAmount(address user, bytes32 ccy) external returns (uint256 removedAmount);\\n\\n    function transferFrom(\\n        bytes32 ccy,\\n        address sender,\\n        address receiver,\\n        uint256 amount\\n    ) external returns (uint256 untransferredAmount);\\n\\n    function pauseVault() external;\\n\\n    function unpauseVault() external;\\n}\\n\",\"keccak256\":\"0xb0540cf51feee3bf0b4aa0db9d4c9d6367018feb63b1a45ff32efc1dc7d247d0\",\"license\":\"MIT\"},\"contracts/protocol/libraries/AddressResolverLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/MixinAddressResolverStorage.sol\\\";\\n\\nlibrary AddressResolverLib {\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return IReserveFund(getAddress(Contracts.RESERVE_FUND));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0x65d55399d6c8b753ddaa36c1370fae1c68dfbfb8b6b2d09b1717ba037b079998\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Constants {\\n    /// @dev Used for price digits in the basis (10000 -> 1)\\n    uint256 public constant PRICE_DIGIT = 10000;\\n\\n    /// @dev Used for percentage digits in the basis (10000 -> 100%)\\n    uint256 public constant PCT_DIGIT = 10000;\\n\\n    /// @dev Used for seconds in year (60 * 60 * 24 * 365)\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000;\\n\\n    /// @dev Used for maximum order count per currency\\n    uint256 internal constant MAXIMUM_ORDER_COUNT = 20;\\n\\n    /// @dev Used for minimum threshold for circuit breaker unitprice threshold\\n    uint256 public constant MINIMUM_CIRCUIT_BREAKER_THRESHOLD = 10;\\n\\n    /// @dev Used for maximum threshold for circuit breaker unitprice threshold\\n    uint256 public constant MAXIMUM_CIRCUIT_BREAKER_THRESHOLD = 200;\\n}\\n\",\"keccak256\":\"0xf788305f2623b66237164c053a4c44ed2b97ea3a60d4500407b2eb56a08f65ba\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant RESERVE_FUND = \\\"ReserveFund\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE_VAULT = \\\"FutureValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0x8e73eead72efa03bcc03c1cdf72cdcebed0f7e6f5a58cda1fd74e0fc03f356e6\",\"license\":\"MIT\"},\"contracts/protocol/libraries/OrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// libraries\\nimport {Constants} from \\\"../libraries/Constants.sol\\\";\\n// types\\nimport {RoundingUint256} from \\\"./math/RoundingUint256.sol\\\";\\n\\nstruct RemainingOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 unitPrice;\\n}\\n\\nstruct PartiallyFilledOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 futureValue;\\n}\\n\\nstruct OrderItem {\\n    uint48 orderId;\\n    uint48 next;\\n    uint48 prev;\\n    address maker;\\n    uint256 timestamp;\\n    uint256 amount;\\n}\\n\\n/**\\n * @notice OrderStatisticsTreeLib is a Red-Black Tree binary search library\\n * based on the following library that is extended to manage order data.\\n *\\n * https://github.com/rob-Hitchens/OrderStatisticsTree\\n *\\n */\\nlibrary OrderStatisticsTreeLib {\\n    using RoundingUint256 for uint256;\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint48 head;\\n        uint48 tail;\\n        uint256 orderCounter;\\n        uint256 orderTotalAmount;\\n        mapping(uint256 => OrderItem) orders;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].right != EMPTY) {\\n            _value = self.nodes[_value].right;\\n        }\\n    }\\n\\n    function hasOrders(Tree storage self) internal view returns (bool) {\\n        return self.root != EMPTY;\\n    }\\n\\n    function next(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(401) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].right != EMPTY) {\\n            _cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(402) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].left != EMPTY) {\\n            _cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint256 value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        // if (self.nodes[value].parent != EMPTY) return true;\\n        uint256 cursor = value;\\n        while (self.nodes[cursor].parent != EMPTY) {\\n            uint256 parent = self.nodes[cursor].parent;\\n            if (self.nodes[parent].left != cursor && self.nodes[parent].right != cursor) {\\n                return false;\\n            }\\n            if (parent == self.root) {\\n                return true;\\n            }\\n            cursor = self.nodes[cursor].parent;\\n        }\\n        return false;\\n    }\\n\\n    function isActiveOrderId(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        return orderIdExists(self, value, orderId) && exists(self, value);\\n    }\\n\\n    function getNode(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n        return (\\n            gn.parent,\\n            gn.left,\\n            gn.right,\\n            gn.red,\\n            gn.head,\\n            gn.tail,\\n            gn.orderCounter,\\n            gn.orderTotalAmount\\n        );\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function getNodeTotalAmount(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint256 totalAmount)\\n    {\\n        return self.nodes[value].orderTotalAmount;\\n    }\\n\\n    function getNodeOrderIds(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint48[] memory orderIds)\\n    {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[gn.head];\\n        orderIds = new uint48[](gn.orderCounter);\\n\\n        for (uint256 i = 0; i < gn.orderCounter; i++) {\\n            orderIds[i] = order.orderId;\\n            order = gn.orders[order.next];\\n        }\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256 _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(405) - Value to insert cannot be zero\\\");\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                return;\\n            }\\n        }\\n\\n        Node storage nValue = self.nodes[value];\\n        // Update order info as a new one if there is already an old node\\n        if (\\n            self.root == EMPTY ||\\n            (self.nodes[cursor].left != value && self.nodes[cursor].right != value)\\n        ) {\\n            nValue.orderCounter = 0;\\n            nValue.orderTotalAmount = 0;\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        }\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(407) - Value to delete cannot be zero\\\");\\n        Node storage nValue = self.nodes[value];\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint256 a,\\n        uint256 b\\n    ) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    function estimateDroppedAmountFromLeft(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = first(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV).div(\\n                    cursorNodeAmountInFV\\n                );\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n    }\\n\\n    function estimateDroppedAmountFromRight(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = last(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV).div(\\n                    cursorNodeAmountInFV\\n                );\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n    }\\n\\n    function dropLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue,\\n        uint256 limitFutureValue\\n    )\\n        internal\\n        returns (\\n            uint256 value,\\n            uint256 filledAmount,\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            PartiallyFilledOrder memory partiallyFilledOrder\\n        )\\n    {\\n        uint256 cursor = first(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor <= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        uint256 amountDiff;\\n        uint256 futureValueDiff;\\n        while (\\n            (totalAmount < amount || amount == EMPTY) &&\\n            (filledFutureValue < limitFutureValue || limitFutureValue == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor <= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            filledFutureValue += _calculateFutureValue(cursor, cursorNodeAmount);\\n            filledAmount += cursorNodeAmount;\\n\\n            if (totalAmount > amount && amount != EMPTY) {\\n                amountDiff = totalAmount - amount;\\n                futureValueDiff = _calculateFutureValue(cursor, amountDiff);\\n            } else if (filledFutureValue > limitFutureValue && limitFutureValue != EMPTY) {\\n                futureValueDiff = filledFutureValue - limitFutureValue;\\n                amountDiff = _calculatePresentValue(cursor, futureValueDiff);\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n\\n        if (amountDiff > 0) {\\n            filledAmount -= amountDiff;\\n        }\\n        if (futureValueDiff > 0) {\\n            filledFutureValue -= futureValueDiff;\\n        }\\n\\n        if (totalAmount > 0) {\\n            if (amountDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(self, cursor, cursorNodeAmount - amountDiff);\\n            } else if (futureValueDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, futureValueDiff)\\n                );\\n            }\\n\\n            self.nodes[cursor].left = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent > cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].left = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        uint256 lastNode = last(self);\\n\\n        if (lastNode == value && self.nodes[lastNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value > self.root || (value == self.root && filledAmount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToLeft(self);\\n    }\\n\\n    function dropRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue,\\n        uint256 limitFutureValue\\n    )\\n        internal\\n        returns (\\n            uint256 value,\\n            uint256 filledAmount,\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            PartiallyFilledOrder memory partiallyFilledOrder\\n        )\\n    {\\n        uint256 cursor = last(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor >= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        uint256 amountDiff;\\n        uint256 futureValueDiff;\\n        while (\\n            (totalAmount < amount || amount == EMPTY) &&\\n            (filledFutureValue < limitFutureValue || limitFutureValue == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor >= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            filledFutureValue += _calculateFutureValue(cursor, cursorNodeAmount);\\n            filledAmount += cursorNodeAmount;\\n\\n            if (totalAmount > amount && amount != EMPTY) {\\n                amountDiff = totalAmount - amount;\\n                futureValueDiff = _calculateFutureValue(cursor, amountDiff);\\n            } else if (filledFutureValue > limitFutureValue && limitFutureValue != EMPTY) {\\n                futureValueDiff = filledFutureValue - limitFutureValue;\\n                amountDiff = _calculatePresentValue(cursor, futureValueDiff);\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n\\n        if (amountDiff > 0) {\\n            filledAmount -= amountDiff;\\n        }\\n        if (futureValueDiff > 0) {\\n            filledFutureValue -= futureValueDiff;\\n        }\\n\\n        if (totalAmount > 0) {\\n            if (amountDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(self, cursor, cursorNodeAmount - amountDiff);\\n            } else if (futureValueDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, futureValueDiff)\\n                );\\n            }\\n\\n            self.nodes[cursor].right = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent < cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].right = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        uint256 firstNode = first(self);\\n\\n        if (firstNode == value && self.nodes[firstNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value < self.root || (value == self.root && filledAmount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToRight(self);\\n    }\\n\\n    function rotateTreeToLeft(Tree storage self) internal {\\n        if (self.nodes[self.root].left == 0 && self.nodes[self.root].right != 0) {\\n            if (self.nodes[self.nodes[self.root].right].left != 0) {\\n                rotateRight(self, self.nodes[self.root].right);\\n            }\\n            rotateLeft(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function rotateTreeToRight(Tree storage self) internal {\\n        if (self.nodes[self.root].right == 0 && self.nodes[self.root].left != 0) {\\n            if (self.nodes[self.nodes[self.root].left].right != 0) {\\n                rotateLeft(self, self.nodes[self.root].left);\\n            }\\n            rotateRight(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function getFutureValue(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (uint256) {\\n        return _calculateFutureValue(value, self.nodes[value].orders[orderId].amount);\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (OrderItem memory) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orders[orderId];\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function orderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        uint48 cursor = orderId;\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[cursor];\\n\\n        if (order.orderId != cursor) {\\n            return false;\\n        }\\n\\n        while (order.prev != EMPTY) {\\n            cursor = order.prev;\\n            order = gn.orders[cursor];\\n        }\\n\\n        return cursor == gn.head;\\n    }\\n\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal {\\n        require(amount > 0, \\\"Insufficient amount\\\");\\n        require(value <= Constants.PRICE_DIGIT, \\\"Insufficient value\\\");\\n        insert(self, value);\\n\\n        addTail(self, value, orderId, user, amount);\\n    }\\n\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        amount = _removeOrder(self, value, orderId);\\n        remove(self, value);\\n    }\\n\\n    /**\\n     * @dev Reduces order amount once market order taken.\\n     */\\n    function fillOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount\\n    ) internal returns (PartiallyFilledOrder memory partiallyFilledOrder) {\\n        Node storage gn = self.nodes[value];\\n\\n        require(\\n            gn.orderTotalAmount >= _amount,\\n            \\\"OrderStatisticsTree(410) - Amount to fill is insufficient\\\"\\n        );\\n\\n        uint256 remainingAmount = _amount;\\n        OrderItem memory currentOrder = gn.orders[gn.head];\\n        uint48 orderId = gn.head;\\n\\n        while (orderId != 0 && remainingAmount != 0) {\\n            currentOrder = gn.orders[orderId];\\n\\n            if (currentOrder.amount <= remainingAmount) {\\n                remainingAmount -= currentOrder.amount;\\n                orderId = currentOrder.next;\\n            } else {\\n                partiallyFilledOrder = PartiallyFilledOrder(\\n                    currentOrder.orderId,\\n                    currentOrder.maker,\\n                    remainingAmount,\\n                    _calculateFutureValue(value, remainingAmount)\\n                );\\n                currentOrder = gn.orders[currentOrder.prev];\\n                break;\\n            }\\n        }\\n\\n        if (currentOrder.orderId != 0) {\\n            _dropOrders(self, value, currentOrder.orderId);\\n        }\\n\\n        if (partiallyFilledOrder.amount > 0) {\\n            self.nodes[value].orders[partiallyFilledOrder.orderId].amount -= partiallyFilledOrder\\n                .amount;\\n            self.nodes[value].orderTotalAmount -= partiallyFilledOrder.amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n        uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n        _link(self, _value, orderId, gn.head);\\n        _setHead(self, _value, orderId);\\n        if (gn.tail == 0) _setTail(self, _value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, _value, _orderId, _user, _amount);\\n        } else {\\n            uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n            _link(self, _value, gn.tail, orderId);\\n            _setTail(self, _value, orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint48) {\\n        Node storage gn = self.nodes[value];\\n        require(\\n            gn.orders[orderId].timestamp == 0,\\n            \\\"OrderStatisticsTree(409) - Order id already exist.\\\"\\n        );\\n\\n        gn.orderCounter += 1;\\n        gn.orderTotalAmount += amount;\\n        OrderItem memory order = OrderItem(orderId, 0, 0, user, block.timestamp, amount);\\n        gn.orders[orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the list.\\n     */\\n    function _removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n        gn.orderTotalAmount -= order.amount;\\n    }\\n\\n    /**\\n     * @dev Drop the OrderItems older than or equal `orderId` from the list\\n     */\\n    function _dropOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n        uint256 cursor = gn.head;\\n        uint256 removedCount = 1;\\n        uint256 removedAmount = gn.orders[cursor].amount;\\n\\n        while (cursor != orderId) {\\n            cursor = gn.orders[cursor].next;\\n            removedCount++;\\n            removedAmount += gn.orders[cursor].amount;\\n        }\\n\\n        if (gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        }\\n\\n        gn.orderCounter -= removedCount;\\n        gn.orderTotalAmount -= removedAmount;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 _prevId,\\n        uint48 _nextId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[_prevId].next = _nextId;\\n        gn.orders[_nextId].prev = _prevId;\\n    }\\n\\n    function _calculateFutureValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * Constants.PRICE_DIGIT).div(unitPrice);\\n    }\\n\\n    function _calculatePresentValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * unitPrice).div(Constants.PRICE_DIGIT);\\n    }\\n}\\n\",\"keccak256\":\"0x82f693fffbd1f1657b73d69598c7856b403fcccd41ac1c3143e8082e5dc9344d\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/OrderBookLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {OrderStatisticsTreeLib, PartiallyFilledOrder, OrderItem} from \\\"../OrderStatisticsTreeLib.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\nimport {ILendingMarket} from \\\"../../interfaces/ILendingMarket.sol\\\";\\nimport {ProtocolTypes} from \\\"../../types/ProtocolTypes.sol\\\";\\nimport {LendingMarketStorage as Storage, MarketOrder} from \\\"../../storages/LendingMarketStorage.sol\\\";\\n\\nlibrary OrderBookLogic {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n    using RoundingUint256 for uint256;\\n\\n    function getHighestLendingUnitPrice() public view returns (uint256) {\\n        return Storage.slot().lendOrders[Storage.slot().maturity].last();\\n    }\\n\\n    function getLowestBorrowingUnitPrice() public view returns (uint256) {\\n        uint256 unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].first();\\n        return unitPrice == 0 ? Constants.PRICE_DIGIT : unitPrice;\\n    }\\n\\n    function hasBorrowOrder(address _user) external view returns (bool) {\\n        return Storage.slot().activeBorrowOrderIds[_user].length != 0;\\n    }\\n\\n    function hasLendOrder(address _user) external view returns (bool) {\\n        return Storage.slot().activeLendOrderIds[_user].length != 0;\\n    }\\n\\n    function getLendOrderBook(uint256 _limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = Storage.slot().lendOrders[Storage.slot().maturity].last();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\\n            unitPrice\\n        );\\n        quantities[0] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeCount(unitPrice);\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = Storage.slot().lendOrders[Storage.slot().maturity].prev(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\\n                unitPrice\\n            );\\n            quantities[i] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeCount(\\n                unitPrice\\n            );\\n        }\\n    }\\n\\n    function getBorrowOrderBook(uint256 _limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].first();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeTotalAmount(\\n            unitPrice\\n        );\\n        quantities[0] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeCount(\\n            unitPrice\\n        );\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].next(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeTotalAmount(\\n                unitPrice\\n            );\\n            quantities[i] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeCount(\\n                unitPrice\\n            );\\n        }\\n    }\\n\\n    function getOrder(uint48 _orderId)\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        )\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n\\n        OrderItem memory orderItem;\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            orderItem = Storage.slot().lendOrders[marketOrder.maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n        } else {\\n            orderItem = Storage.slot().borrowOrders[marketOrder.maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n        }\\n\\n        if (orderItem.maker != address(0)) {\\n            return (\\n                marketOrder.side,\\n                marketOrder.unitPrice,\\n                marketOrder.maturity,\\n                orderItem.maker,\\n                orderItem.amount,\\n                orderItem.timestamp\\n            );\\n        }\\n    }\\n\\n    function getTotalAmountFromLendOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds) = getLendOrderIds(_user);\\n\\n        maturity = Storage.slot().userCurrentMaturities[_user];\\n\\n        for (uint256 i = 0; i < activeOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[activeOrderIds[i]];\\n            // Sum future values in the current maturity.\\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\\n            // as an order canceled in the past market.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .lendOrders[Storage.slot().maturity]\\n                .getOrderById(marketOrder.unitPrice, activeOrderIds[i]);\\n            activeAmount += orderItem.amount;\\n        }\\n\\n        for (uint256 i = 0; i < inActiveOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveOrderIds[i]];\\n            if (maturity == 0) {\\n                maturity = marketOrder.maturity;\\n            }\\n            // Sum future values in the maturity of orders\\n            // It will be the future value when the order is created, even if the market is rotated\\n            // and maturity is updated.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .lendOrders[marketOrder.maturity]\\n                .getOrderById(marketOrder.unitPrice, inActiveOrderIds[i]);\\n            inactiveAmount += orderItem.amount;\\n\\n            // Check if the order is filled by Itayose.\\n            // If the order is filled by Itayose, the opening unit price is used instead of the order's one.\\n            uint256 unitPrice = marketOrder.unitPrice;\\n            if (Storage.slot().isPreOrder[inActiveOrderIds[i]] == true) {\\n                uint256 openingUnitPrice = Storage.slot().openingUnitPrices[marketOrder.maturity];\\n                unitPrice = _getUnitPriceForPreLendOrder(openingUnitPrice, unitPrice);\\n            }\\n\\n            inactiveFutureValue += (orderItem.amount * Constants.PRICE_DIGIT).div(unitPrice);\\n        }\\n    }\\n\\n    function getTotalAmountFromBorrowOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds) = getBorrowOrderIds(\\n            _user\\n        );\\n\\n        for (uint256 i = 0; i < activeOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[activeOrderIds[i]];\\n            // Sum future values in the current maturity.\\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\\n            // as an order canceled in the past market.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .borrowOrders[Storage.slot().maturity]\\n                .getOrderById(marketOrder.unitPrice, activeOrderIds[i]);\\n            activeAmount += orderItem.amount;\\n        }\\n\\n        maturity = Storage.slot().userCurrentMaturities[_user];\\n\\n        for (uint256 i = 0; i < inActiveOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveOrderIds[i]];\\n            // Sum future values in the maturity of orders\\n            // It will be the future value when the order is created, even if the market is rotated\\n            // and maturity is updated.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .borrowOrders[marketOrder.maturity]\\n                .getOrderById(marketOrder.unitPrice, inActiveOrderIds[i]);\\n            inactiveAmount += orderItem.amount;\\n\\n            // Check if the order is filled by Itayose.\\n            // If the order is filled by Itayose, the opening unit price is used instead of the order's one.\\n            uint256 unitPrice = marketOrder.unitPrice;\\n            if (Storage.slot().isPreOrder[inActiveOrderIds[i]] == true) {\\n                uint256 openingUnitPrice = Storage.slot().openingUnitPrices[marketOrder.maturity];\\n                unitPrice = _getUnitPriceForPreBorrowOrder(openingUnitPrice, unitPrice);\\n            }\\n\\n            inactiveFutureValue += (orderItem.amount * Constants.PRICE_DIGIT).div(unitPrice);\\n        }\\n    }\\n\\n    function getLendOrderIds(address _user)\\n        public\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        bool isPastMaturity = Storage.slot().userCurrentMaturities[_user] !=\\n            Storage.slot().maturity;\\n\\n        activeOrderIds = new uint48[](\\n            isPastMaturity ? 0 : Storage.slot().activeLendOrderIds[_user].length\\n        );\\n        inActiveOrderIds = new uint48[](Storage.slot().activeLendOrderIds[_user].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().activeLendOrderIds[_user].length; i++) {\\n            uint48 orderId = Storage.slot().activeLendOrderIds[_user][i];\\n            MarketOrder memory marketOrder = Storage.slot().orders[orderId];\\n\\n            if (\\n                !Storage\\n                    .slot()\\n                    .lendOrders[Storage.slot().userCurrentMaturities[_user]]\\n                    .isActiveOrderId(marketOrder.unitPrice, orderId)\\n            ) {\\n                inActiveOrderCount += 1;\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                if (!isPastMaturity) {\\n                    activeOrderCount += 1;\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function getBorrowOrderIds(address _user)\\n        public\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        bool isPastMaturity = Storage.slot().userCurrentMaturities[_user] !=\\n            Storage.slot().maturity;\\n\\n        activeOrderIds = new uint48[](\\n            isPastMaturity ? 0 : Storage.slot().activeBorrowOrderIds[_user].length\\n        );\\n        inActiveOrderIds = new uint48[](Storage.slot().activeBorrowOrderIds[_user].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().activeBorrowOrderIds[_user].length; i++) {\\n            uint48 orderId = Storage.slot().activeBorrowOrderIds[_user][i];\\n            MarketOrder memory marketOrder = Storage.slot().orders[orderId];\\n\\n            if (\\n                !Storage\\n                    .slot()\\n                    .borrowOrders[Storage.slot().userCurrentMaturities[_user]]\\n                    .isActiveOrderId(marketOrder.unitPrice, orderId)\\n            ) {\\n                inActiveOrderCount += 1;\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                activeOrderCount += 1;\\n                if (!isPastMaturity) {\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function estimateFilledAmount(ProtocolTypes.Side _side, uint256 _futureValue)\\n        external\\n        view\\n        returns (uint256 amount)\\n    {\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            return\\n                Storage.slot().lendOrders[Storage.slot().maturity].estimateDroppedAmountFromRight(\\n                    _futureValue\\n                );\\n        } else {\\n            return\\n                Storage.slot().borrowOrders[Storage.slot().maturity].estimateDroppedAmountFromLeft(\\n                    _futureValue\\n                );\\n        }\\n    }\\n\\n    function insertOrder(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) external returns (uint48 orderId) {\\n        orderId = _nextOrderId();\\n        Storage.slot().orders[orderId] = MarketOrder(\\n            _side,\\n            _unitPrice,\\n            Storage.slot().maturity,\\n            block.timestamp\\n        );\\n\\n        if (_side == ProtocolTypes.Side.LEND) {\\n            Storage.slot().lendOrders[Storage.slot().maturity].insertOrder(\\n                _unitPrice,\\n                orderId,\\n                _user,\\n                _amount\\n            );\\n            Storage.slot().activeLendOrderIds[_user].push(orderId);\\n        } else if (_side == ProtocolTypes.Side.BORROW) {\\n            Storage.slot().borrowOrders[Storage.slot().maturity].insertOrder(\\n                _unitPrice,\\n                orderId,\\n                _user,\\n                _amount\\n            );\\n            Storage.slot().activeBorrowOrderIds[_user].push(orderId);\\n        }\\n    }\\n\\n    function dropOrders(\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _futureValue,\\n        uint256 _unitPrice\\n    )\\n        external\\n        returns (\\n            uint256 filledUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledFutureValue,\\n            uint48 partiallyFilledOrderId,\\n            address partiallyFilledMaker,\\n            uint256 partiallyFilledAmount,\\n            uint256 partiallyFilledFutureValue,\\n            uint256 remainingAmount\\n        )\\n    {\\n        PartiallyFilledOrder memory partiallyFilledOrder;\\n\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            (\\n                filledUnitPrice,\\n                filledAmount,\\n                filledFutureValue,\\n                remainingAmount,\\n                partiallyFilledOrder\\n            ) = Storage.slot().lendOrders[Storage.slot().maturity].dropRight(\\n                _amount,\\n                _unitPrice,\\n                _futureValue\\n            );\\n        } else if (_side == ProtocolTypes.Side.LEND) {\\n            (\\n                filledUnitPrice,\\n                filledAmount,\\n                filledFutureValue,\\n                remainingAmount,\\n                partiallyFilledOrder\\n            ) = Storage.slot().borrowOrders[Storage.slot().maturity].dropLeft(\\n                _amount,\\n                _unitPrice,\\n                _futureValue\\n            );\\n        }\\n\\n        partiallyFilledOrderId = partiallyFilledOrder.orderId;\\n        partiallyFilledMaker = partiallyFilledOrder.maker;\\n        partiallyFilledAmount = partiallyFilledOrder.amount;\\n        partiallyFilledFutureValue = partiallyFilledOrder.futureValue;\\n    }\\n\\n    function cleanLendOrders(address _user, uint256 _maturity)\\n        external\\n        returns (\\n            uint48[] memory orderIds,\\n            uint256 activeOrderCount,\\n            uint256 removedFutureValue,\\n            uint256 removedOrderAmount\\n        )\\n    {\\n        (\\n            uint48[] memory activeLendOrderIds,\\n            uint48[] memory inActiveLendOrderIds\\n        ) = getLendOrderIds(_user);\\n\\n        Storage.slot().activeLendOrderIds[_user] = activeLendOrderIds;\\n        activeOrderCount = activeLendOrderIds.length;\\n        uint256 inactiveOrderCount = inActiveLendOrderIds.length;\\n        orderIds = new uint48[](inactiveOrderCount);\\n        OrderStatisticsTreeLib.Tree storage orders = Storage.slot().lendOrders[_maturity];\\n        uint256 openingUnitPrice = Storage.slot().openingUnitPrices[_maturity];\\n\\n        for (uint256 i = 0; i < inactiveOrderCount; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveLendOrderIds[i]];\\n            uint256 unitPrice = Storage.slot().isPreOrder[inActiveLendOrderIds[i]] == true\\n                ? _getUnitPriceForPreLendOrder(openingUnitPrice, marketOrder.unitPrice)\\n                : marketOrder.unitPrice;\\n            OrderItem memory orderItem = orders.getOrderById(unitPrice, inActiveLendOrderIds[i]);\\n            removedFutureValue += orders.getFutureValue(unitPrice, inActiveLendOrderIds[i]);\\n            removedOrderAmount += orderItem.amount;\\n\\n            orderIds[i] = orderItem.orderId;\\n        }\\n    }\\n\\n    function cleanBorrowOrders(address _user, uint256 _maturity)\\n        external\\n        returns (\\n            uint48[] memory orderIds,\\n            uint256 activeOrderCount,\\n            uint256 removedFutureValue,\\n            uint256 removedOrderAmount\\n        )\\n    {\\n        (\\n            uint48[] memory activeBorrowOrderIds,\\n            uint48[] memory inActiveBorrowOrderIds\\n        ) = getBorrowOrderIds(_user);\\n\\n        Storage.slot().activeBorrowOrderIds[_user] = activeBorrowOrderIds;\\n        activeOrderCount = activeBorrowOrderIds.length;\\n        uint256 inactiveOrderCount = inActiveBorrowOrderIds.length;\\n        orderIds = new uint48[](inactiveOrderCount);\\n        OrderStatisticsTreeLib.Tree storage orders = Storage.slot().borrowOrders[_maturity];\\n        uint256 openingUnitPrice = Storage.slot().openingUnitPrices[_maturity];\\n\\n        for (uint256 i = 0; i < inactiveOrderCount; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveBorrowOrderIds[i]];\\n            uint256 unitPrice = Storage.slot().isPreOrder[inActiveBorrowOrderIds[i]] == true\\n                ? _getUnitPriceForPreBorrowOrder(openingUnitPrice, marketOrder.unitPrice)\\n                : marketOrder.unitPrice;\\n            OrderItem memory orderItem = orders.getOrderById(unitPrice, inActiveBorrowOrderIds[i]);\\n            removedFutureValue += orders.getFutureValue(unitPrice, inActiveBorrowOrderIds[i]);\\n\\n            removedOrderAmount += orderItem.amount;\\n\\n            orderIds[i] = orderItem.orderId;\\n        }\\n    }\\n\\n    function removeOrder(address _user, uint48 _orderId)\\n        external\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n        uint256 removedAmount;\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            removedAmount = Storage.slot().lendOrders[Storage.slot().maturity].removeOrder(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n            _removeOrderIdFromOrders(Storage.slot().activeLendOrderIds[_user], _orderId);\\n        } else if (marketOrder.side == ProtocolTypes.Side.BORROW) {\\n            removedAmount = Storage.slot().borrowOrders[Storage.slot().maturity].removeOrder(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n            _removeOrderIdFromOrders(Storage.slot().activeBorrowOrderIds[_user], _orderId);\\n        }\\n\\n        return (marketOrder.side, removedAmount, marketOrder.unitPrice);\\n    }\\n\\n    function getOpeningUnitPrice()\\n        external\\n        view\\n        returns (uint256 openingUnitPrice, uint256 totalOffsetAmount)\\n    {\\n        uint256 lendUnitPrice = getHighestLendingUnitPrice();\\n        uint256 borrowUnitPrice = getLowestBorrowingUnitPrice();\\n        uint256 lendAmount = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\\n            lendUnitPrice\\n        );\\n        uint256 borrowAmount = Storage\\n            .slot()\\n            .borrowOrders[Storage.slot().maturity]\\n            .getNodeTotalAmount(borrowUnitPrice);\\n\\n        OrderStatisticsTreeLib.Tree storage borrowOrders = Storage.slot().borrowOrders[\\n            Storage.slot().maturity\\n        ];\\n        OrderStatisticsTreeLib.Tree storage lendOrders = Storage.slot().lendOrders[\\n            Storage.slot().maturity\\n        ];\\n\\n        // return mid price when no lending and borrowing orders overwrap\\n        if (borrowUnitPrice > lendUnitPrice) {\\n            openingUnitPrice = (lendUnitPrice + borrowUnitPrice).div(2);\\n            return (openingUnitPrice, 0);\\n        }\\n\\n        while (borrowUnitPrice <= lendUnitPrice && borrowUnitPrice > 0 && lendUnitPrice > 0) {\\n            if (lendAmount > borrowAmount) {\\n                openingUnitPrice = lendUnitPrice;\\n                totalOffsetAmount += borrowAmount;\\n                lendAmount -= borrowAmount;\\n                borrowUnitPrice = borrowOrders.next(borrowUnitPrice);\\n                borrowAmount = borrowOrders.getNodeTotalAmount(borrowUnitPrice);\\n            } else if (lendAmount < borrowAmount) {\\n                openingUnitPrice = borrowUnitPrice;\\n                totalOffsetAmount += lendAmount;\\n                borrowAmount -= lendAmount;\\n                lendUnitPrice = lendOrders.prev(lendUnitPrice);\\n                lendAmount = lendOrders.getNodeTotalAmount(lendUnitPrice);\\n            } else {\\n                openingUnitPrice = (lendUnitPrice + borrowUnitPrice).div(2);\\n                totalOffsetAmount += lendAmount;\\n                lendUnitPrice = lendOrders.prev(lendUnitPrice);\\n                borrowUnitPrice = borrowOrders.next(borrowUnitPrice);\\n                lendAmount = lendOrders.getNodeTotalAmount(lendUnitPrice);\\n                borrowAmount = borrowOrders.getNodeTotalAmount(borrowUnitPrice);\\n            }\\n        }\\n    }\\n\\n    function checkCircuitBreakerThreshold(\\n        ProtocolTypes.Side _side,\\n        uint256 _unitPrice,\\n        uint256 _circuitBreakerLimitRange\\n    )\\n        external\\n        returns (\\n            bool isFilled,\\n            uint256 executedUnitPrice,\\n            bool ignoreRemainingAmount\\n        )\\n    {\\n        require(_circuitBreakerLimitRange < Constants.PCT_DIGIT, \\\"CB limit can not be so high\\\");\\n        uint256 cbThresholdUnitPrice = Storage.slot().circuitBreakerThresholdUnitPrices[\\n            block.number\\n        ][_side];\\n        bool isLend = _side == ProtocolTypes.Side.LEND;\\n        bool orderExists;\\n        uint256 bestUnitPrice;\\n\\n        if (isLend) {\\n            bestUnitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].first();\\n            orderExists = bestUnitPrice != 0;\\n\\n            if (orderExists && cbThresholdUnitPrice == 0) {\\n                cbThresholdUnitPrice = _getLendCircuitBreakerThreshold(\\n                    _circuitBreakerLimitRange,\\n                    bestUnitPrice\\n                );\\n                Storage.slot().circuitBreakerThresholdUnitPrices[block.number][\\n                        _side\\n                    ] = cbThresholdUnitPrice;\\n            }\\n        } else {\\n            bestUnitPrice = Storage.slot().lendOrders[Storage.slot().maturity].last();\\n            orderExists = bestUnitPrice != 0;\\n\\n            if (orderExists && cbThresholdUnitPrice == 0) {\\n                cbThresholdUnitPrice = _getBorrowCircuitBreakerThreshold(\\n                    _circuitBreakerLimitRange,\\n                    bestUnitPrice\\n                );\\n\\n                Storage.slot().circuitBreakerThresholdUnitPrices[block.number][\\n                        _side\\n                    ] = cbThresholdUnitPrice;\\n            }\\n        }\\n\\n        if (_unitPrice == 0 && !orderExists) revert(\\\"Order not found\\\");\\n\\n        if (\\n            _unitPrice == 0 ||\\n            (orderExists &&\\n                ((isLend && _unitPrice > cbThresholdUnitPrice) ||\\n                    (!isLend && _unitPrice < cbThresholdUnitPrice)))\\n        ) {\\n            executedUnitPrice = cbThresholdUnitPrice;\\n            ignoreRemainingAmount = true;\\n        } else {\\n            executedUnitPrice = _unitPrice;\\n            ignoreRemainingAmount = false;\\n        }\\n\\n        isFilled = isLend\\n            ? (bestUnitPrice == 0 ? Constants.PRICE_DIGIT : bestUnitPrice) <= executedUnitPrice\\n            : bestUnitPrice >= executedUnitPrice;\\n    }\\n\\n    function _getBorrowCircuitBreakerThreshold(\\n        uint256 _circuitBreakerLimitRange,\\n        uint256 _unitPrice\\n    ) internal pure returns (uint256 cbThresholdUnitPrice) {\\n        // NOTE: Formula of circuit breaker threshold for borrow orders:\\n        // cbThreshold = 100 / (1 + (100 / price - 1) * (1 + range))\\n        uint256 num = _unitPrice * Constants.PRICE_DIGIT * Constants.PCT_DIGIT;\\n        uint256 den = _unitPrice *\\n            Constants.PCT_DIGIT +\\n            (Constants.PRICE_DIGIT - _unitPrice) *\\n            (Constants.PCT_DIGIT + _circuitBreakerLimitRange);\\n        cbThresholdUnitPrice = num.div(den);\\n\\n        if (_unitPrice > cbThresholdUnitPrice + Constants.MAXIMUM_CIRCUIT_BREAKER_THRESHOLD) {\\n            cbThresholdUnitPrice = _unitPrice - Constants.MAXIMUM_CIRCUIT_BREAKER_THRESHOLD;\\n        } else if (\\n            _unitPrice < cbThresholdUnitPrice + Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n        ) {\\n            cbThresholdUnitPrice = _unitPrice > Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n                ? _unitPrice - Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n                : 1;\\n        }\\n    }\\n\\n    function _getLendCircuitBreakerThreshold(uint256 _circuitBreakerLimitRange, uint256 _unitPrice)\\n        internal\\n        pure\\n        returns (uint256 cbThresholdUnitPrice)\\n    {\\n        // NOTE: Formula of circuit breaker threshold for lend orders:\\n        // cbThreshold = 100 / (1 + (100 / price - 1) * (1 - range))\\n        uint256 num = _unitPrice * Constants.PRICE_DIGIT * Constants.PCT_DIGIT;\\n        uint256 den = _unitPrice *\\n            Constants.PCT_DIGIT +\\n            (Constants.PRICE_DIGIT - _unitPrice) *\\n            (Constants.PCT_DIGIT - _circuitBreakerLimitRange);\\n        cbThresholdUnitPrice = num.div(den);\\n\\n        if (cbThresholdUnitPrice > _unitPrice + Constants.MAXIMUM_CIRCUIT_BREAKER_THRESHOLD) {\\n            cbThresholdUnitPrice = _unitPrice + Constants.MAXIMUM_CIRCUIT_BREAKER_THRESHOLD;\\n        } else if (\\n            cbThresholdUnitPrice < _unitPrice + Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n        ) {\\n            cbThresholdUnitPrice = _unitPrice + Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD <=\\n                Constants.PRICE_DIGIT\\n                ? _unitPrice + Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n                : Constants.PRICE_DIGIT;\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases and returns id of last order in order book.\\n     * @return The new order id\\n     */\\n    function _nextOrderId() internal returns (uint48) {\\n        Storage.slot().lastOrderId++;\\n        return Storage.slot().lastOrderId;\\n    }\\n\\n    function _removeOrderIdFromOrders(uint48[] storage orders, uint256 orderId) internal {\\n        uint256 lastOrderIndex = orders.length - 1;\\n        for (uint256 i = 0; i <= lastOrderIndex; i++) {\\n            if (orders[i] == orderId) {\\n                if (i != lastOrderIndex) {\\n                    uint48 lastOrderId = orders[lastOrderIndex];\\n                    orders[i] = lastOrderId;\\n                }\\n\\n                orders.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _getUnitPriceForPreLendOrder(uint256 openingUnitPrice, uint256 unitPrice)\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        return openingUnitPrice < unitPrice ? openingUnitPrice : unitPrice;\\n    }\\n\\n    function _getUnitPriceForPreBorrowOrder(uint256 openingUnitPrice, uint256 unitPrice)\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        return openingUnitPrice > unitPrice ? openingUnitPrice : unitPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x153ba93784513de01ed440eda2dbcfaf0fc2e091940f3c2d8cc89a83096b6583\",\"license\":\"MIT\"},\"contracts/protocol/libraries/math/RoundingUint256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoundingUint256 {\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0);\\n\\n        if ((a * 10) / b - (a / b) * 10 < 5) {\\n            return a / b;\\n        } else {\\n            return (a / b) + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc360f39a82f1a9a7454726e3db802407d305b5e525aa8c3236fe49ca6ca534d\",\"license\":\"MIT\"},\"contracts/protocol/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AddressResolverLib} from \\\"../libraries/AddressResolverLib.sol\\\";\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/MixinAddressResolverStorage.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    modifier onlyAcceptedContracts() {\\n        require(isAcceptedContract(msg.sender), \\\"Only Accepted Contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the contract names used in this contract.\\n     * @dev The contract name list is in `./libraries/Contracts.sol`.\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @notice Returns contract names that can call this contract.\\n     * @dev The contact name listed in this method is also needed to be listed `requiredContracts` method.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = Storage.slot().resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            Storage.slot().addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n\\n        afterBuildCache();\\n    }\\n\\n    /**\\n     * @notice Executes after the cache is built.\\n     */\\n    function afterBuildCache() internal virtual {}\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                Storage.slot().resolver.getAddress(name) != Storage.slot().addressCache[name] ||\\n                Storage.slot().addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        require(address(Storage.slot().resolver) == address(0), \\\"Resolver registered already\\\");\\n        Storage.slot().resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        return AddressResolverLib.getAddress(name);\\n    }\\n\\n    function resolver() public view returns (IAddressResolver) {\\n        return Storage.slot().resolver;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return AddressResolverLib.beaconProxyController();\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return AddressResolverLib.currencyController();\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return AddressResolverLib.genesisValueVault();\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return AddressResolverLib.reserveFund();\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return AddressResolverLib.lendingMarketController();\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return AddressResolverLib.tokenVault();\\n    }\\n}\\n\",\"keccak256\":\"0x8e7734c2c048f8b8d1383f39c531316a78cf1c8736cab5b1fb7992261ec052ba\",\"license\":\"MIT\"},\"contracts/protocol/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../dependencies/chainlink/contracts/AggregatorV3Interface.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct Currency {\\n    bool isSupported;\\n    string name;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.currencyController\\\");\\n\\n    struct Storage {\\n        bytes32 baseCurrency;\\n        // Protocol currencies\\n        EnumerableSet.Bytes32Set currencies;\\n        mapping(bytes32 => uint256) haircuts;\\n        // Array of the price feeds\\n        mapping(bytes32 => AggregatorV3Interface[]) priceFeeds;\\n        // Total cached decimals of the price feeds\\n        mapping(bytes32 => uint8) decimalsCaches;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8bf03b6346d11a110e916796a9cc09c8a331b61dcf119d3fe929b393c0a701b6\",\"license\":\"MIT\"},\"contracts/protocol/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nstruct AutoRollLog {\\n    uint256 unitPrice;\\n    uint256 lendingCompoundFactor;\\n    uint256 borrowingCompoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.genesisValueVault\\\");\\n\\n    struct Storage {\\n        mapping(bytes32 => bool) isInitialized;\\n        mapping(bytes32 => uint256) initialCompoundFactors;\\n        mapping(bytes32 => uint256) lendingCompoundFactors;\\n        mapping(bytes32 => uint256) borrowingCompoundFactors;\\n        mapping(bytes32 => uint256) currentMaturity;\\n        mapping(bytes32 => uint8) decimals;\\n        // Mapping from user to balance per currency\\n        mapping(bytes32 => mapping(address => int256)) balances;\\n        mapping(bytes32 => uint256) totalLendingSupplies;\\n        mapping(bytes32 => uint256) totalBorrowingSupplies;\\n        // Mapping from maturity balance per currency\\n        mapping(bytes32 => mapping(uint256 => int256)) maturityBalances;\\n        // Mapping from maturity to auto-roll log per currency\\n        mapping(bytes32 => mapping(uint256 => AutoRollLog)) autoRollLogs;\\n        // Mapping from user to maturity per currency\\n        mapping(bytes32 => mapping(address => uint256)) userMaturities;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x887ce7f8c0dbbd8c7f6310e109fa6bf14b5520068d299fcf224faae13bd8de46\",\"license\":\"MIT\"},\"contracts/protocol/storages/LendingMarketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {OrderStatisticsTreeLib} from \\\"../libraries/OrderStatisticsTreeLib.sol\\\";\\n\\nstruct MarketOrder {\\n    ProtocolTypes.Side side;\\n    uint256 unitPrice; // in basis points\\n    uint256 maturity;\\n    uint256 timestamp;\\n}\\n\\nlibrary LendingMarketStorage {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarket\\\");\\n\\n    struct Storage {\\n        bytes32 ccy;\\n        uint48 lastOrderId;\\n        uint256 openingDate;\\n        uint256 maturity;\\n        // Mapping from maturity to opening unit price\\n        mapping(uint256 => uint256) openingUnitPrices;\\n        // Mapping from maturity to boolean if the market is ready or not\\n        mapping(uint256 => bool) isReady;\\n        // Mapping from user to active lend order ids\\n        mapping(address => uint48[]) activeLendOrderIds;\\n        // Mapping from user to active borrow order ids\\n        mapping(address => uint48[]) activeBorrowOrderIds;\\n        // Mapping from user to current maturity\\n        mapping(address => uint256) userCurrentMaturities;\\n        // Mapping from orderId to order\\n        mapping(uint256 => MarketOrder) orders;\\n        // Mapping from orderId to boolean for pre-order or not\\n        mapping(uint256 => bool) isPreOrder;\\n        // Mapping from maturity to lending orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) lendOrders;\\n        // Mapping from maturity to borrowing orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) borrowOrders;\\n        // Mapping from order side to threshold unit price of circuit breaker per block\\n        mapping(uint256 => mapping(ProtocolTypes.Side => uint256)) circuitBreakerThresholdUnitPrices;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b248489383f35251b60bf1d02c644912ae0271699f652343c9afe2f86cd031\",\"license\":\"MIT\"},\"contracts/protocol/storages/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.mixinAddressResolver\\\");\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 => address) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x852b885b6264a58930a0945c68842717e19f954eaefc0137235e6f263e17fa9d\",\"license\":\"MIT\"},\"contracts/protocol/storages/PausableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary PausableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.pausable\\\");\\n\\n    struct Storage {\\n        bool paused;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa32c444c8033da4a894a14b1a517f6d6943f74160bd1904c2f64e349f7aa37bd\",\"license\":\"MIT\"},\"contracts/protocol/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0x7b05f97661e6dfe1142eec9be3dcf86d1eec55ed4fb1dea4a5859f75a0c84c13\",\"license\":\"MIT\"},\"contracts/protocol/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../storages/PausableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return PausableStorage.slot().paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage.slot().paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage.slot().paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xc0576147780920e35decf05688bd0605b6b7ba292327c0f1610f5839317a48ae\",\"license\":\"MIT\"},\"contracts/protocol/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0xd3bbab5e43ade94e4791855dd4952527c5bfffcee4a088c7ecd69f97533b46f1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613aa4806100206000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c80637c6cd94d11610130578063b7c1d527116100b8578063e16695b51161007c578063e16695b514610494578063e3d904d81461049c578063e7df768c146104cf578063eca3107f146104e2578063f1be1679146104f557600080fd5b8063b7c1d52714610453578063bcc012ad14610466578063d866d35514610479578063e0997659146102b7578063e0dbc76e1461048c57600080fd5b80638152b173116100ff5780638152b1731461040757806386e613a0146104285780639d6529071461043b578063a03738dc14610443578063a094a0311461044b57600080fd5b80637c6cd94d146103b95780637ce219aa146103c15780637e706938146103e65780637f2b6a0d146103ff57600080fd5b80634223607a116101b35780635e0b54da116101825780635e0b54da14610391578063692aa97e146103995780636945c1fd146103a15780636a2c4274146103a957806371613c2d146103b157600080fd5b80634223607a146103145780634bf62d1614610335578063504b89bd146103575780635c975abb1461037957600080fd5b806328378aab116101fa57806328378aab1461028457806329985e5a146102975780632af64bd31461029f5780633d03b9da146102b75780633d4eccdf146102cc57600080fd5b806304f3bcec1461022c5780631610c7ce146102515780631b3508b71461025b5780631e007d1d14610271575b600080fd5b610234610555565b6040516001600160a01b0390911681526020015b60405180910390f35b610259610576565b005b6102636105ae565b604051908152602001610248565b61026361027f366004612e83565b610631565b610259610292366004612ec4565b6106c6565b61025961097e565b6102a7610b2c565b6040519015158152602001610248565b6102bf610c92565b6040516102489190612f0a565b6102df6102da366004612f4e565b610cf7565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610248565b610327610322366004612f72565b610f38565b604051610248929190612fc3565b61034861034336600461300f565b611160565b60405161024893929190613063565b61036a6103653660046130ba565b6111ff565b6040516102489392919061312b565b600080516020613a4f8339815191525460ff166102a7565b6102636113fa565b6102a7611440565b61026361149b565b6102636114ab565b6102636114da565b6102a76115f7565b6103d46103cf36600461314a565b61163d565b60405161024896959493929190613167565b6103ee6116e8565b6040516102489594939291906131a6565b6102a7611aa0565b61041a610415366004612f4e565b611ab6565b604051610248929190613241565b61026361043636600461326f565b611b55565b6102a7611c2f565b610259611c87565b6102a7611cb4565b610259610461366004613291565b611ce8565b61041a610474366004612f4e565b611ee4565b61034861048736600461300f565b611f29565b610263611f67565b610263611f7a565b6104af6104aa366004612f4e565b611f8d565b604080519485526020850193909352918301526060820152608001610248565b6104af6104dd366004612f4e565b612031565b6103276104f0366004612ec4565b61207a565b6104fd61219c565b6040516102489190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c0830151151560c083015292915050565b6000600080516020613a2f8339815191525b546001600160a01b0316919050565b61057f3361233c565b6105a45760405162461bcd60e51b815260040161059b906132cc565b60405180910390fd5b6105ac6123b6565b565b60007341BBE9b27cCe94A33FEdF50206912834bc97856B63e2afb0416040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f457600080fd5b505af4158015610608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062c9190613303565b905090565b604051637d3093d560e11b81526000907341BBE9b27cCe94A33FEdF50206912834bc97856B9063fa6127aa9061066d908690869060040161331c565b60206040518083038186803b15801561068557600080fd5b505af4158015610699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bd9190613303565b90505b92915050565b6106ce612415565b6106d73361233c565b6106f35760405162461bcd60e51b815260040161059b906132cc565b6106fb6115f7565b6107475760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420696e20746865207072652d6f7264657220706572696f640000000000604482015260640161059b565b600082116107885760405162461bcd60e51b815260206004820152600e60248201526d416d6f756e74206973207a65726f60901b604482015260640161059b565b61079183612468565b60008460018111156107a5576107a56130f3565b1480156108385750604051631a053b6160e21b81526001600160a01b03841660048201527341BBE9b27cCe94A33FEdF50206912834bc97856B90636814ed849060240160206040518083038186803b15801561080057600080fd5b505af4158015610814573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610838919061334c565b806108e557506001846001811115610852576108526130f3565b1480156108e5575060405163ceff498f60e01b81526001600160a01b03841660048201527341BBE9b27cCe94A33FEdF50206912834bc97856B9063ceff498f9060240160206040518083038186803b1580156108ad57600080fd5b505af41580156108c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e5919061334c565b156109325760405162461bcd60e51b815260206004820152601a60248201527f4f70706f736974652073696465206f7264657220657869737473000000000000604482015260640161059b565b6000610940858585856125a3565b9050600161094c61269b565b65ffffffffffff929092166000908152600a9092016020526040909120805460ff191691151591909117905550505050565b6000610988610c92565b905060005b8151811015610b275760008282815181106109aa576109aa613367565b6020026020010151905060006109cb600080516020613a2f83398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd91610a3c91869190605d016133ca565b60206040518083038186803b158015610a5457600080fd5b505afa158015610a68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8c91906133eb565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a150508080610b1f9061341e565b91505061098d565b505b50565b600080610b37610c92565b905060005b8151811015610c89576000828281518110610b5957610b59613367565b60200260200101519050610b78600080516020613a2f83398151915290565b600082815260019190910160205260409020546001600160a01b0316600080516020613a2f833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b158015610be557600080fd5b505afa158015610bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1d91906133eb565b6001600160a01b0316141580610c67575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b15610c76576000935050505090565b5080610c818161341e565b915050610b3c565b50600191505090565b604080516001808252818301909252606091602080830190803683370190505090507f4c656e64696e674d61726b6574436f6e74726f6c6c657200000000000000000081600081518110610ce857610ce8613367565b60200260200101818152505090565b6000806000806000806000610d0a61269b565b6001600160a01b038916600081815260089290920160205260409182902054915163914551f160e01b815260048101919091526024810182905290915060609081907341BBE9b27cCe94A33FEdF50206912834bc97856B9063914551f19060440160006040518083038186803b158015610d8357600080fd5b505af4158015610d97573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dbf9190810190613518565b604051634a53967b60e01b81526001600160a01b038f16600482015260248101889052929c5090995096509092507341BBE9b27cCe94A33FEdF50206912834bc97856B90634a53967b9060440160006040518083038186803b158015610e2457600080fd5b505af4158015610e38573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e609190810190613518565b919a509750945090508415610eca57610e7761269b565b546001600160a01b038b167ffba0ebcbd5c3adaf135b8956666cd643ded961350fd5a61526d7fb0c637f709c846000610eae61269b565b60030154604051610ec193929190613570565b60405180910390a35b8315610f2b57610ed861269b565b546001600160a01b038b167ffba0ebcbd5c3adaf135b8956666cd643ded961350fd5a61526d7fb0c637f709c836001610f0f61269b565b60030154604051610f2293929190613570565b60405180910390a35b5050919395979092949650565b610f636040518060800160405280600081526020016000815260200160008152602001600081525090565b610f6b612e4c565b610f73612415565b610f7c3361233c565b610f985760405162461bcd60e51b815260040161059b906132cc565b610fa0611440565b610fe35760405162461bcd60e51b815260206004820152601460248201527313585c9ad95d081a5cc81b9bdd081bdc195b995960621b604482015260640161059b565b600085116110245760405162461bcd60e51b815260206004820152600e60248201526d416d6f756e74206973207a65726f60901b604482015260640161059b565b61102d86612468565b60008060007341BBE9b27cCe94A33FEdF50206912834bc97856B6339ef2b0a8b89896040518463ffffffff1660e01b815260040161106d9392919061312b565b60606040518083038186803b15801561108557600080fd5b505af4158015611099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bd91906135a0565b92509250925082156110e0576110d68a8a8a85856126bf565b9095509350611153565b806110f7576110f18a8a8a856125a3565b50611153565b6110ff61269b565b6003015461110b61269b565b600001548a6001600160a01b03167fc28d55e15fb7b9c473a1796eed97e004ad119a1a8ddc913d40a8eb23d140ee698d8660405161114a92919061331c565b60405180910390a45b5050509550959350505050565b60608060607341BBE9b27cCe94A33FEdF50206912834bc97856B634bf62d16856040518263ffffffff1660e01b815260040161119e91815260200190565b60006040518083038186803b1580156111b657600080fd5b505af41580156111ca573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111f29190810190613637565b9250925092509193909250565b6000806000848460006112118261163d565b509094505050506001600160a01b038216151590506112645760405162461bcd60e51b815260206004820152600f60248201526e13dc99195c881b9bdd08199bdd5b99608a1b604482015260640161059b565b806001600160a01b0316836001600160a01b0316146112c55760405162461bcd60e51b815260206004820152601760248201527f43616c6c6572206973206e6f7420746865206d616b6572000000000000000000604482015260640161059b565b6112cd612415565b6112d63361233c565b6112f25760405162461bcd60e51b815260040161059b906132cc565b604051636c5db84360e01b81526001600160a01b038916600482015265ffffffffffff881660248201527341BBE9b27cCe94A33FEdF50206912834bc97856B90636c5db8439060440160606040518083038186803b15801561135357600080fd5b505af4158015611367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138b91906136bf565b919750955093506001600160a01b0388167f8a73e656799f8fbd4ea08e9420225176f98f85ef9a2a11a5a011580b65c8f14588886113c761269b565b546113d061269b565b600301548a8a6040516113e8969594939291906136f6565b60405180910390a25050509250925092565b60007341BBE9b27cCe94A33FEdF50206912834bc97856B63614152b96040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f457600080fd5b600061144a61269b565b600501600061145761269b565b60030154815260208101919091526040016000205460ff168015611480575061147e611aa0565b155b801561062c575061148f61269b565b60020154421015905090565b60006114a561269b565b54919050565b60006114b561269b565b60040160006114c261269b565b60030154815260200190815260200160002054905090565b6000807341BBE9b27cCe94A33FEdF50206912834bc97856B63614152b96040518163ffffffff1660e01b815260040160206040518083038186803b15801561152157600080fd5b505af4158015611535573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115599190613303565b905060007341BBE9b27cCe94A33FEdF50206912834bc97856B63e2afb0416040518163ffffffff1660e01b815260040160206040518083038186803b1580156115a157600080fd5b505af41580156115b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d99190613303565b90506115f060026115ea8385613735565b906128ed565b9250505090565b600062093a8061160561269b565b60020154611613919061374d565b421015801561062c5750610e1061162861269b565b60020154611636919061374d565b4210905090565b604051633e710cd560e11b815265ffffffffffff82166004820152600090819081908190819081907341BBE9b27cCe94A33FEdF50206912834bc97856B90637ce219aa9060240160c06040518083038186803b15801561169c57600080fd5b505af41580156116b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d49190613764565b949c939b5091995097509550909350915050565b60008060006116f5612e4c565b6116fd612e4c565b611705612415565b61170e3361233c565b61172a5760405162461bcd60e51b815260040161059b906132cc565b611732611c2f565b61177e5760405162461bcd60e51b815260206004820152601960248201527f4e6f7420696e2074686520497461796f736520706572696f6400000000000000604482015260640161059b565b7341BBE9b27cCe94A33FEdF50206912834bc97856B636a2c42746040518163ffffffff1660e01b8152600401604080518083038186803b1580156117c157600080fd5b505af41580156117d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f991906137c4565b90955093508315611a2657604080518082019091526000808252600160208301525b60028110156119ce5760008060008060007341BBE9b27cCe94A33FEdF50206912834bc97856B63a117eff588886002811061185857611858613367565b60200201518d6000806040518563ffffffff1660e01b815260040161188094939291906137e8565b6101006040518083038186803b15801561189957600080fd5b505af41580156118ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d19190613811565b50965096509650965050505060008111156119b65760008787600281106118fa576118fa613367565b60200201516001811115611910576119106130f3565b1415611939576001600160a01b0383168852602088018290526040880181905260019450611958565b6001600160a01b03831689526020890182905260408901819052600094505b61196061269b565b546001600160a01b0384167f8bcbbabac98864c9065ec271b0b9bcd1cbcb0df90dc0bacb3dfd7542df8eb1d4868861199661269b565b6003015487876040516119ad959493929190613883565b60405180910390a35b505050505080806119c69061341e565b91505061181b565b507fdb070045d659ddca1851a8cf1181cfd454167280ce233e2411721eda429248ff6119f861269b565b54611a0161269b565b60030154604080519283526020830191909152810188905260600160405180910390a1505b6001611a3061269b565b6005016000611a3d61269b565b6003015481526020810191909152604001600020805460ff191691151591909117905584611a6961269b565b6004016000611a7661269b565b600301548152602081019190915260400160002055611a9361269b565b6002015492509091929394565b6000611aaa61269b565b60030154421015905090565b604051638152b17360e01b81526001600160a01b038216600482015260609081907341BBE9b27cCe94A33FEdF50206912834bc97856B90638152b173906024015b60006040518083038186803b158015611b0f57600080fd5b505af4158015611b23573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b4b91908101906138bb565b9094909350915050565b6000611b5f611aa0565b611ba35760405162461bcd60e51b815260206004820152601560248201527413585c9ad95d081a5cc81b9bdd081b585d1d5c9959605a1b604482015260640161059b565b611bac3361233c565b611bc85760405162461bcd60e51b815260040161059b906132cc565b611bd061269b565b60030154905082611bdf61269b565b6003015581611bec61269b565b6002015560408051848152602081018390527ffa1e4c93514398092ad307a4842a760bacdd4ff71b27d486bcdc636d9249db34910160405180910390a192915050565b6000610e10611c3c61269b565b60020154611c4a919061374d565b421015801561062c5750611c5c61269b565b6005016000611c6961269b565b60030154815260208101919091526040016000205460ff1615905090565b611c903361233c565b611cac5760405162461bcd60e51b815260040161059b906132cc565b6105ac61295e565b6000611cbe61269b565b6005016000611ccb61269b565b60030154815260208101919091526040016000205460ff16919050565b600054610100900460ff1615808015611d085750600054600160ff909116105b80611d225750303b158015611d22575060005460ff166001145b611d855760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161059b565b6000805460ff191660011790558015611da8576000805461ff0019166101001790555b6000611db26129a7565b6001600160a01b03161415611e155760405162461bcd60e51b815260206004820152602360248201527f4d7573742062652063616c6c65642066726f6d20626561636f6e20636f6e74726044820152621858dd60ea1b606482015260840161059b565b611e1e856129cf565b83611e2761269b565b5582611e3161269b565b6003015581611e3e61269b565b60020155611e4e610e108361374d565b4210611e8f576001611e5e61269b565b6005016000611e6b61269b565b6003015481526020810191909152604001600020805460ff19169115159190911790555b611e9761097e565b8015611edd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b60405163bcc012ad60e01b81526001600160a01b038216600482015260609081907341BBE9b27cCe94A33FEdF50206912834bc97856B9063bcc012ad90602401611af7565b60608060607341BBE9b27cCe94A33FEdF50206912834bc97856B63d866d355856040518263ffffffff1660e01b815260040161119e91815260200190565b6000611f7161269b565b60020154905090565b6000611f8461269b565b60030154905090565b604051631c7b209b60e31b81526001600160a01b03821660048201526000908190819081907341BBE9b27cCe94A33FEdF50206912834bc97856B9063e3d904d8906024015b60806040518083038186803b158015611fea57600080fd5b505af4158015611ffe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612022919061391f565b93509350935093509193509193565b6040516339f7dda360e21b81526001600160a01b03821660048201526000908190819081907341BBE9b27cCe94A33FEdF50206912834bc97856B9063e7df768c90602401611fd2565b6120a56040518060800160405280600081526020016000815260200160008152602001600081525090565b6120ad612e4c565b6120b5612415565b6120be3361233c565b6120da5760405162461bcd60e51b815260040161059b906132cc565b6120e2611440565b6121255760405162461bcd60e51b815260206004820152601460248201527313585c9ad95d081a5cc81b9bdd081bdc195b995960621b604482015260640161059b565b600084116121835760405162461bcd60e51b815260206004820152602560248201527f43616e277420706c61636520656d707479206675747572652076616c756520616044820152641b5bdd5b9d60da1b606482015260840161059b565b61218f86868686612a64565b9150915094509492505050565b6121e16040518060e001604052806000801916815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6040518060e001604052806121f461269b565b54815260200161220261269b565b60030154815260200161221361269b565b6002015481526020017341BBE9b27cCe94A33FEdF50206912834bc97856B63614152b96040518163ffffffff1660e01b815260040160206040518083038186803b15801561226057600080fd5b505af4158015612274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122989190613303565b81526020017341BBE9b27cCe94A33FEdF50206912834bc97856B63e2afb0416040518163ffffffff1660e01b815260040160206040518083038186803b1580156122e157600080fd5b505af41580156122f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123199190613303565b81526020016123266114da565b8152602001612333611cb4565b15159052919050565b600080612347610c92565b905060005b81518110156123ac5761237782828151811061236a5761236a613367565b6020026020010151612d53565b6001600160a01b0316846001600160a01b0316141561239a575060019392505050565b806123a48161341e565b91505061234c565b5060009392505050565b6123be612d5e565b600080516020613a4f833981519152805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080516020613a4f8339815191525460ff16156105ac5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161059b565b600061247261269b565b6001600160a01b03831660009081526008919091016020526040902054905061249961269b565b6003015481148061251057506124ad61269b565b6003015481141580156124e257506124c361269b565b6001600160a01b03831660009081526006919091016020526040902054155b801561251057506124f161269b565b6001600160a01b03831660009081526007919091016020526040902054155b61255c5760405162461bcd60e51b815260206004820152601c60248201527f4f7264657220666f756e6420696e2070617374206d6174757269747900000000604482015260640161059b565b61256461269b565b600301548114610b275761257661269b565b6003015461258261269b565b6001600160a01b038416600090815260089190910160205260409020555050565b604051630c0c63c760e21b81526000907341BBE9b27cCe94A33FEdF50206912834bc97856B906330318f1c906125e3908890889088908890600401613955565b60206040518083038186803b1580156125fb57600080fd5b505af415801561260f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126339190613987565b9050836001600160a01b03167f8beeadee3235daab9e24529fa931b16580a52a9237a25823056d2a9acea577b5828761266a61269b565b5461267361269b565b60030154888860405161268b969594939291906136f6565b60405180910390a2949350505050565b7ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0a90565b6126ea6040518060800160405280600081526020016000815260200160008152602001600081525090565b6126f2612e4c565b6000807341BBE9b27cCe94A33FEdF50206912834bc97856B63a117eff58a8960008a6040518563ffffffff1660e01b815260040161273394939291906137e8565b6101006040518083038186803b15801561274c57600080fd5b505af4158015612760573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127849190613811565b60408b81019290925260208b01929092526001600160a01b039092168952908901929092529287529193509091506127be9050818861374d565b60208501526001600160a01b0388167fc04a2a96be20651da4fad0b7590bfd81e9bff0ad9c86556c936423baaf1e3e808a6127f761269b565b5461280061269b565b60030154602089015189516040808c01519051612822969594939291906139a4565b60405180910390a26040830151156128bd5761283c61269b565b5483516001600160a01b03167f8bcbbabac98864c9065ec271b0b9bcd1cbcb0df90dc0bacb3dfd7542df8eb1d48460008d600181111561287e5761287e6130f3565b1461288a57600061288d565b60015b61289561269b565b60030154886020015189604001516040516128b4959493929190613883565b60405180910390a35b80156128e15784156128d557606084018190526128e1565b611153898983896125a3565b50509550959350505050565b60008082116128fb57600080fd5b600561290783856139da565b61291290600a6139fc565b8361291e86600a6139fc565b61292891906139da565b612932919061374d565b10156129495761294282846139da565b90506106c0565b61295382846139da565b612942906001613735565b612966612415565b600080516020613a4f833981519152805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336123f8565b60007fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50610567565b600080516020613a2f833981519152546001600160a01b031615612a355760405162461bcd60e51b815260206004820152601b60248201527f5265736f6c766572207265676973746572656420616c72656164790000000000604482015260640161059b565b600080516020613a2f83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612a8f6040518060800160405280600081526020016000815260200160008152602001600081525090565b612a97612e4c565b6000807341BBE9b27cCe94A33FEdF50206912834bc97856B6339ef2b0a896000886040518463ffffffff1660e01b8152600401612ad69392919061312b565b60606040518083038186803b158015612aee57600080fd5b505af4158015612b02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2691906135a0565b50915091508115612cec5760405163a117eff560e01b81526000907341BBE9b27cCe94A33FEdF50206912834bc97856B9063a117eff590612b71908c9085908c9088906004016137e8565b6101006040518083038186803b158015612b8a57600080fd5b505af4158015612b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc29190613811565b5060408b81019190915260208b8101929092526001600160a01b039283168b528b019390935291890192909252918752915088167fc04a2a96be20651da4fad0b7590bfd81e9bff0ad9c86556c936423baaf1e3e808a612c2061269b565b54612c2961269b565b6003015460208a01518a516040808d01519051612c4b969594939291906139a4565b60405180910390a2604084015115612ce657612c6561269b565b5484516001600160a01b03167f8bcbbabac98864c9065ec271b0b9bcd1cbcb0df90dc0bacb3dfd7542df8eb1d48360008d6001811115612ca757612ca76130f3565b14612cb3576000612cb6565b60015b612cbe61269b565b6003015489602001518a60400151604051612cdd959493929190613883565b60405180910390a35b50612d48565b612cf461269b565b60030154612d0061269b565b60000154886001600160a01b03167fc28d55e15fb7b9c473a1796eed97e004ad119a1a8ddc913d40a8eb23d140ee698b85604051612d3f92919061331c565b60405180910390a45b505094509492505050565b60006106c082612db4565b600080516020613a4f8339815191525460ff166105ac5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161059b565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b03169081612e455760405162461bcd60e51b815260040161059b9190613a1b565b5092915050565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b60028110610b2957600080fd5b60008060408385031215612e9657600080fd5b8235612ea181612e76565b946020939093013593505050565b6001600160a01b0381168114610b2957600080fd5b60008060008060808587031215612eda57600080fd5b8435612ee581612e76565b93506020850135612ef581612eaf565b93969395505050506040820135916060013590565b6020808252825182820181905260009190848201906040850190845b81811015612f4257835183529284019291840191600101612f26565b50909695505050505050565b600060208284031215612f6057600080fd5b8135612f6b81612eaf565b9392505050565b600080600080600060a08688031215612f8a57600080fd5b8535612f9581612e76565b94506020860135612fa581612eaf565b94979496505050506040830135926060810135926080909101359150565b8251815260208084015181830152604080850151818401526060808601519084015283516001600160a01b031660808401529083015160a083015282015160c082015260e08101612f6b565b60006020828403121561302157600080fd5b5035919050565b600081518084526020808501945080840160005b838110156130585781518752958201959082019060010161303c565b509495945050505050565b6060815260006130766060830186613028565b82810360208401526130888186613028565b9050828103604084015261309c8185613028565b9695505050505050565b65ffffffffffff81168114610b2957600080fd5b600080604083850312156130cd57600080fd5b82356130d881612eaf565b915060208301356130e8816130a6565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b6002811061312757634e487b7160e01b600052602160045260246000fd5b9052565b606081016131398286613109565b602082019390935260400152919050565b60006020828403121561315c57600080fd5b8135612f6b816130a6565b60c081016131758289613109565b602082019690965260408101949094526001600160a01b03929092166060840152608083015260a090910152919050565b8581526020808201869052604080830186905284516001600160a01b0316606084015290840151608083015283015160a0820152610120810182516001600160a01b031660c0830152602083015160e0830152604083015161010083015261309c565b600081518084526020808501945080840160005b8381101561305857815165ffffffffffff168752958201959082019060010161321d565b6040815260006132546040830185613209565b82810360208401526132668185613209565b95945050505050565b6000806040838503121561328257600080fd5b50508035926020909101359150565b600080600080608085870312156132a757600080fd5b84356132b281612eaf565b966020860135965060408601359560600135945092505050565b60208082526017908201527f4f6e6c7920416363657074656420436f6e747261637473000000000000000000604082015260600190565b60006020828403121561331557600080fd5b5051919050565b6040810161332a8285613109565b8260208301529392505050565b8051801515811461334757600080fd5b919050565b60006020828403121561335e57600080fd5b6106bd82613337565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b818110156133a357602081850181015186830182015201613387565b818111156133b5576000602083870101525b50601f01601f19169290920160200192915050565b8281526040602082015260006133e3604083018461337d565b949350505050565b6000602082840312156133fd57600080fd5b8151612f6b81612eaf565b634e487b7160e01b600052601160045260246000fd5b600060001982141561343257613432613408565b5060010190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561347857613478613439565b604052919050565b600067ffffffffffffffff82111561349a5761349a613439565b5060051b60200190565b600082601f8301126134b557600080fd5b815160206134ca6134c583613480565b61344f565b82815260059290921b840181019181810190868411156134e957600080fd5b8286015b8481101561350d578051613500816130a6565b83529183019183016134ed565b509695505050505050565b6000806000806080858703121561352e57600080fd5b845167ffffffffffffffff81111561354557600080fd5b613551878288016134a4565b6020870151604088015160609098015191999098509095509350505050565b6060815260006135836060830186613209565b90506135926020830185613109565b826040830152949350505050565b6000806000606084860312156135b557600080fd5b6135be84613337565b9250602084015191506135d360408501613337565b90509250925092565b600082601f8301126135ed57600080fd5b815160206135fd6134c583613480565b82815260059290921b8401810191818101908684111561361c57600080fd5b8286015b8481101561350d5780518352918301918301613620565b60008060006060848603121561364c57600080fd5b835167ffffffffffffffff8082111561366457600080fd5b613670878388016135dc565b9450602086015191508082111561368657600080fd5b613692878388016135dc565b935060408601519150808211156136a857600080fd5b506136b5868287016135dc565b9150509250925092565b6000806000606084860312156136d457600080fd5b83516136df81612e76565b602085015160409095015190969495509392505050565b65ffffffffffff8716815260c081016137126020830188613109565b8560408301528460608301528360808301528260a0830152979650505050505050565b6000821982111561374857613748613408565b500190565b60008282101561375f5761375f613408565b500390565b60008060008060008060c0878903121561377d57600080fd5b865161378881612e76565b80965050602087015194506040870151935060608701516137a881612eaf565b809350506080870151915060a087015190509295509295509295565b600080604083850312156137d757600080fd5b505080516020909101519092909150565b608081016137f68287613109565b84602083015283604083015282606083015295945050505050565b600080600080600080600080610100898b03121561382e57600080fd5b885197506020890151965060408901519550606089015161384e816130a6565b60808a015190955061385f81612eaf565b60a08a015160c08b015160e0909b0151999c989b5096999598909790945092505050565b65ffffffffffff8616815260a0810161389f6020830187613109565b8460408301528360608301528260808301529695505050505050565b600080604083850312156138ce57600080fd5b825167ffffffffffffffff808211156138e657600080fd5b6138f2868387016134a4565b9350602085015191508082111561390857600080fd5b50613915858286016134a4565b9150509250929050565b6000806000806080858703121561393557600080fd5b505082516020840151604085015160609095015191969095509092509050565b608081016139638287613109565b6001600160a01b039490941660208201526040810192909252606090910152919050565b60006020828403121561399957600080fd5b8151612f6b816130a6565b60c081016139b28289613109565b602082019690965260408101949094526060840192909252608083015260a090910152919050565b6000826139f757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613a1657613a16613408565b500290565b6020815260006106bd602083018461337d56fe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240189c789132bdb3678132848a8dcd780bffd2b1abdce3984c522ac1d8aeb48f05f3a26469706673582212202e2879cba175b17798cfdd80567aa47cb14e5fe98ab8ecf6bda57dd215f7b68364736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102275760003560e01c80637c6cd94d11610130578063b7c1d527116100b8578063e16695b51161007c578063e16695b514610494578063e3d904d81461049c578063e7df768c146104cf578063eca3107f146104e2578063f1be1679146104f557600080fd5b8063b7c1d52714610453578063bcc012ad14610466578063d866d35514610479578063e0997659146102b7578063e0dbc76e1461048c57600080fd5b80638152b173116100ff5780638152b1731461040757806386e613a0146104285780639d6529071461043b578063a03738dc14610443578063a094a0311461044b57600080fd5b80637c6cd94d146103b95780637ce219aa146103c15780637e706938146103e65780637f2b6a0d146103ff57600080fd5b80634223607a116101b35780635e0b54da116101825780635e0b54da14610391578063692aa97e146103995780636945c1fd146103a15780636a2c4274146103a957806371613c2d146103b157600080fd5b80634223607a146103145780634bf62d1614610335578063504b89bd146103575780635c975abb1461037957600080fd5b806328378aab116101fa57806328378aab1461028457806329985e5a146102975780632af64bd31461029f5780633d03b9da146102b75780633d4eccdf146102cc57600080fd5b806304f3bcec1461022c5780631610c7ce146102515780631b3508b71461025b5780631e007d1d14610271575b600080fd5b610234610555565b6040516001600160a01b0390911681526020015b60405180910390f35b610259610576565b005b6102636105ae565b604051908152602001610248565b61026361027f366004612e83565b610631565b610259610292366004612ec4565b6106c6565b61025961097e565b6102a7610b2c565b6040519015158152602001610248565b6102bf610c92565b6040516102489190612f0a565b6102df6102da366004612f4e565b610cf7565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610248565b610327610322366004612f72565b610f38565b604051610248929190612fc3565b61034861034336600461300f565b611160565b60405161024893929190613063565b61036a6103653660046130ba565b6111ff565b6040516102489392919061312b565b600080516020613a4f8339815191525460ff166102a7565b6102636113fa565b6102a7611440565b61026361149b565b6102636114ab565b6102636114da565b6102a76115f7565b6103d46103cf36600461314a565b61163d565b60405161024896959493929190613167565b6103ee6116e8565b6040516102489594939291906131a6565b6102a7611aa0565b61041a610415366004612f4e565b611ab6565b604051610248929190613241565b61026361043636600461326f565b611b55565b6102a7611c2f565b610259611c87565b6102a7611cb4565b610259610461366004613291565b611ce8565b61041a610474366004612f4e565b611ee4565b61034861048736600461300f565b611f29565b610263611f67565b610263611f7a565b6104af6104aa366004612f4e565b611f8d565b604080519485526020850193909352918301526060820152608001610248565b6104af6104dd366004612f4e565b612031565b6103276104f0366004612ec4565b61207a565b6104fd61219c565b6040516102489190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c0830151151560c083015292915050565b6000600080516020613a2f8339815191525b546001600160a01b0316919050565b61057f3361233c565b6105a45760405162461bcd60e51b815260040161059b906132cc565b60405180910390fd5b6105ac6123b6565b565b600073__$ddd2182d6f392994445e6b8b482a37128a$__63e2afb0416040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f457600080fd5b505af4158015610608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062c9190613303565b905090565b604051637d3093d560e11b815260009073__$ddd2182d6f392994445e6b8b482a37128a$__9063fa6127aa9061066d908690869060040161331c565b60206040518083038186803b15801561068557600080fd5b505af4158015610699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bd9190613303565b90505b92915050565b6106ce612415565b6106d73361233c565b6106f35760405162461bcd60e51b815260040161059b906132cc565b6106fb6115f7565b6107475760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420696e20746865207072652d6f7264657220706572696f640000000000604482015260640161059b565b600082116107885760405162461bcd60e51b815260206004820152600e60248201526d416d6f756e74206973207a65726f60901b604482015260640161059b565b61079183612468565b60008460018111156107a5576107a56130f3565b1480156108385750604051631a053b6160e21b81526001600160a01b038416600482015273__$ddd2182d6f392994445e6b8b482a37128a$__90636814ed849060240160206040518083038186803b15801561080057600080fd5b505af4158015610814573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610838919061334c565b806108e557506001846001811115610852576108526130f3565b1480156108e5575060405163ceff498f60e01b81526001600160a01b038416600482015273__$ddd2182d6f392994445e6b8b482a37128a$__9063ceff498f9060240160206040518083038186803b1580156108ad57600080fd5b505af41580156108c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e5919061334c565b156109325760405162461bcd60e51b815260206004820152601a60248201527f4f70706f736974652073696465206f7264657220657869737473000000000000604482015260640161059b565b6000610940858585856125a3565b9050600161094c61269b565b65ffffffffffff929092166000908152600a9092016020526040909120805460ff191691151591909117905550505050565b6000610988610c92565b905060005b8151811015610b275760008282815181106109aa576109aa613367565b6020026020010151905060006109cb600080516020613a2f83398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd91610a3c91869190605d016133ca565b60206040518083038186803b158015610a5457600080fd5b505afa158015610a68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8c91906133eb565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a150508080610b1f9061341e565b91505061098d565b505b50565b600080610b37610c92565b905060005b8151811015610c89576000828281518110610b5957610b59613367565b60200260200101519050610b78600080516020613a2f83398151915290565b600082815260019190910160205260409020546001600160a01b0316600080516020613a2f833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b158015610be557600080fd5b505afa158015610bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1d91906133eb565b6001600160a01b0316141580610c67575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b15610c76576000935050505090565b5080610c818161341e565b915050610b3c565b50600191505090565b604080516001808252818301909252606091602080830190803683370190505090507f4c656e64696e674d61726b6574436f6e74726f6c6c657200000000000000000081600081518110610ce857610ce8613367565b60200260200101818152505090565b6000806000806000806000610d0a61269b565b6001600160a01b038916600081815260089290920160205260409182902054915163914551f160e01b8152600481019190915260248101829052909150606090819073__$ddd2182d6f392994445e6b8b482a37128a$__9063914551f19060440160006040518083038186803b158015610d8357600080fd5b505af4158015610d97573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dbf9190810190613518565b604051634a53967b60e01b81526001600160a01b038f16600482015260248101889052929c50909950965090925073__$ddd2182d6f392994445e6b8b482a37128a$__90634a53967b9060440160006040518083038186803b158015610e2457600080fd5b505af4158015610e38573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e609190810190613518565b919a509750945090508415610eca57610e7761269b565b546001600160a01b038b167ffba0ebcbd5c3adaf135b8956666cd643ded961350fd5a61526d7fb0c637f709c846000610eae61269b565b60030154604051610ec193929190613570565b60405180910390a35b8315610f2b57610ed861269b565b546001600160a01b038b167ffba0ebcbd5c3adaf135b8956666cd643ded961350fd5a61526d7fb0c637f709c836001610f0f61269b565b60030154604051610f2293929190613570565b60405180910390a35b5050919395979092949650565b610f636040518060800160405280600081526020016000815260200160008152602001600081525090565b610f6b612e4c565b610f73612415565b610f7c3361233c565b610f985760405162461bcd60e51b815260040161059b906132cc565b610fa0611440565b610fe35760405162461bcd60e51b815260206004820152601460248201527313585c9ad95d081a5cc81b9bdd081bdc195b995960621b604482015260640161059b565b600085116110245760405162461bcd60e51b815260206004820152600e60248201526d416d6f756e74206973207a65726f60901b604482015260640161059b565b61102d86612468565b600080600073__$ddd2182d6f392994445e6b8b482a37128a$__6339ef2b0a8b89896040518463ffffffff1660e01b815260040161106d9392919061312b565b60606040518083038186803b15801561108557600080fd5b505af4158015611099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bd91906135a0565b92509250925082156110e0576110d68a8a8a85856126bf565b9095509350611153565b806110f7576110f18a8a8a856125a3565b50611153565b6110ff61269b565b6003015461110b61269b565b600001548a6001600160a01b03167fc28d55e15fb7b9c473a1796eed97e004ad119a1a8ddc913d40a8eb23d140ee698d8660405161114a92919061331c565b60405180910390a45b5050509550959350505050565b606080606073__$ddd2182d6f392994445e6b8b482a37128a$__634bf62d16856040518263ffffffff1660e01b815260040161119e91815260200190565b60006040518083038186803b1580156111b657600080fd5b505af41580156111ca573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111f29190810190613637565b9250925092509193909250565b6000806000848460006112118261163d565b509094505050506001600160a01b038216151590506112645760405162461bcd60e51b815260206004820152600f60248201526e13dc99195c881b9bdd08199bdd5b99608a1b604482015260640161059b565b806001600160a01b0316836001600160a01b0316146112c55760405162461bcd60e51b815260206004820152601760248201527f43616c6c6572206973206e6f7420746865206d616b6572000000000000000000604482015260640161059b565b6112cd612415565b6112d63361233c565b6112f25760405162461bcd60e51b815260040161059b906132cc565b604051636c5db84360e01b81526001600160a01b038916600482015265ffffffffffff8816602482015273__$ddd2182d6f392994445e6b8b482a37128a$__90636c5db8439060440160606040518083038186803b15801561135357600080fd5b505af4158015611367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138b91906136bf565b919750955093506001600160a01b0388167f8a73e656799f8fbd4ea08e9420225176f98f85ef9a2a11a5a011580b65c8f14588886113c761269b565b546113d061269b565b600301548a8a6040516113e8969594939291906136f6565b60405180910390a25050509250925092565b600073__$ddd2182d6f392994445e6b8b482a37128a$__63614152b96040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f457600080fd5b600061144a61269b565b600501600061145761269b565b60030154815260208101919091526040016000205460ff168015611480575061147e611aa0565b155b801561062c575061148f61269b565b60020154421015905090565b60006114a561269b565b54919050565b60006114b561269b565b60040160006114c261269b565b60030154815260200190815260200160002054905090565b60008073__$ddd2182d6f392994445e6b8b482a37128a$__63614152b96040518163ffffffff1660e01b815260040160206040518083038186803b15801561152157600080fd5b505af4158015611535573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115599190613303565b9050600073__$ddd2182d6f392994445e6b8b482a37128a$__63e2afb0416040518163ffffffff1660e01b815260040160206040518083038186803b1580156115a157600080fd5b505af41580156115b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d99190613303565b90506115f060026115ea8385613735565b906128ed565b9250505090565b600062093a8061160561269b565b60020154611613919061374d565b421015801561062c5750610e1061162861269b565b60020154611636919061374d565b4210905090565b604051633e710cd560e11b815265ffffffffffff821660048201526000908190819081908190819073__$ddd2182d6f392994445e6b8b482a37128a$__90637ce219aa9060240160c06040518083038186803b15801561169c57600080fd5b505af41580156116b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d49190613764565b949c939b5091995097509550909350915050565b60008060006116f5612e4c565b6116fd612e4c565b611705612415565b61170e3361233c565b61172a5760405162461bcd60e51b815260040161059b906132cc565b611732611c2f565b61177e5760405162461bcd60e51b815260206004820152601960248201527f4e6f7420696e2074686520497461796f736520706572696f6400000000000000604482015260640161059b565b73__$ddd2182d6f392994445e6b8b482a37128a$__636a2c42746040518163ffffffff1660e01b8152600401604080518083038186803b1580156117c157600080fd5b505af41580156117d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f991906137c4565b90955093508315611a2657604080518082019091526000808252600160208301525b60028110156119ce57600080600080600073__$ddd2182d6f392994445e6b8b482a37128a$__63a117eff588886002811061185857611858613367565b60200201518d6000806040518563ffffffff1660e01b815260040161188094939291906137e8565b6101006040518083038186803b15801561189957600080fd5b505af41580156118ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d19190613811565b50965096509650965050505060008111156119b65760008787600281106118fa576118fa613367565b60200201516001811115611910576119106130f3565b1415611939576001600160a01b0383168852602088018290526040880181905260019450611958565b6001600160a01b03831689526020890182905260408901819052600094505b61196061269b565b546001600160a01b0384167f8bcbbabac98864c9065ec271b0b9bcd1cbcb0df90dc0bacb3dfd7542df8eb1d4868861199661269b565b6003015487876040516119ad959493929190613883565b60405180910390a35b505050505080806119c69061341e565b91505061181b565b507fdb070045d659ddca1851a8cf1181cfd454167280ce233e2411721eda429248ff6119f861269b565b54611a0161269b565b60030154604080519283526020830191909152810188905260600160405180910390a1505b6001611a3061269b565b6005016000611a3d61269b565b6003015481526020810191909152604001600020805460ff191691151591909117905584611a6961269b565b6004016000611a7661269b565b600301548152602081019190915260400160002055611a9361269b565b6002015492509091929394565b6000611aaa61269b565b60030154421015905090565b604051638152b17360e01b81526001600160a01b0382166004820152606090819073__$ddd2182d6f392994445e6b8b482a37128a$__90638152b173906024015b60006040518083038186803b158015611b0f57600080fd5b505af4158015611b23573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b4b91908101906138bb565b9094909350915050565b6000611b5f611aa0565b611ba35760405162461bcd60e51b815260206004820152601560248201527413585c9ad95d081a5cc81b9bdd081b585d1d5c9959605a1b604482015260640161059b565b611bac3361233c565b611bc85760405162461bcd60e51b815260040161059b906132cc565b611bd061269b565b60030154905082611bdf61269b565b6003015581611bec61269b565b6002015560408051848152602081018390527ffa1e4c93514398092ad307a4842a760bacdd4ff71b27d486bcdc636d9249db34910160405180910390a192915050565b6000610e10611c3c61269b565b60020154611c4a919061374d565b421015801561062c5750611c5c61269b565b6005016000611c6961269b565b60030154815260208101919091526040016000205460ff1615905090565b611c903361233c565b611cac5760405162461bcd60e51b815260040161059b906132cc565b6105ac61295e565b6000611cbe61269b565b6005016000611ccb61269b565b60030154815260208101919091526040016000205460ff16919050565b600054610100900460ff1615808015611d085750600054600160ff909116105b80611d225750303b158015611d22575060005460ff166001145b611d855760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161059b565b6000805460ff191660011790558015611da8576000805461ff0019166101001790555b6000611db26129a7565b6001600160a01b03161415611e155760405162461bcd60e51b815260206004820152602360248201527f4d7573742062652063616c6c65642066726f6d20626561636f6e20636f6e74726044820152621858dd60ea1b606482015260840161059b565b611e1e856129cf565b83611e2761269b565b5582611e3161269b565b6003015581611e3e61269b565b60020155611e4e610e108361374d565b4210611e8f576001611e5e61269b565b6005016000611e6b61269b565b6003015481526020810191909152604001600020805460ff19169115159190911790555b611e9761097e565b8015611edd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b60405163bcc012ad60e01b81526001600160a01b0382166004820152606090819073__$ddd2182d6f392994445e6b8b482a37128a$__9063bcc012ad90602401611af7565b606080606073__$ddd2182d6f392994445e6b8b482a37128a$__63d866d355856040518263ffffffff1660e01b815260040161119e91815260200190565b6000611f7161269b565b60020154905090565b6000611f8461269b565b60030154905090565b604051631c7b209b60e31b81526001600160a01b038216600482015260009081908190819073__$ddd2182d6f392994445e6b8b482a37128a$__9063e3d904d8906024015b60806040518083038186803b158015611fea57600080fd5b505af4158015611ffe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612022919061391f565b93509350935093509193509193565b6040516339f7dda360e21b81526001600160a01b038216600482015260009081908190819073__$ddd2182d6f392994445e6b8b482a37128a$__9063e7df768c90602401611fd2565b6120a56040518060800160405280600081526020016000815260200160008152602001600081525090565b6120ad612e4c565b6120b5612415565b6120be3361233c565b6120da5760405162461bcd60e51b815260040161059b906132cc565b6120e2611440565b6121255760405162461bcd60e51b815260206004820152601460248201527313585c9ad95d081a5cc81b9bdd081bdc195b995960621b604482015260640161059b565b600084116121835760405162461bcd60e51b815260206004820152602560248201527f43616e277420706c61636520656d707479206675747572652076616c756520616044820152641b5bdd5b9d60da1b606482015260840161059b565b61218f86868686612a64565b9150915094509492505050565b6121e16040518060e001604052806000801916815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6040518060e001604052806121f461269b565b54815260200161220261269b565b60030154815260200161221361269b565b60020154815260200173__$ddd2182d6f392994445e6b8b482a37128a$__63614152b96040518163ffffffff1660e01b815260040160206040518083038186803b15801561226057600080fd5b505af4158015612274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122989190613303565b815260200173__$ddd2182d6f392994445e6b8b482a37128a$__63e2afb0416040518163ffffffff1660e01b815260040160206040518083038186803b1580156122e157600080fd5b505af41580156122f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123199190613303565b81526020016123266114da565b8152602001612333611cb4565b15159052919050565b600080612347610c92565b905060005b81518110156123ac5761237782828151811061236a5761236a613367565b6020026020010151612d53565b6001600160a01b0316846001600160a01b0316141561239a575060019392505050565b806123a48161341e565b91505061234c565b5060009392505050565b6123be612d5e565b600080516020613a4f833981519152805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080516020613a4f8339815191525460ff16156105ac5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161059b565b600061247261269b565b6001600160a01b03831660009081526008919091016020526040902054905061249961269b565b6003015481148061251057506124ad61269b565b6003015481141580156124e257506124c361269b565b6001600160a01b03831660009081526006919091016020526040902054155b801561251057506124f161269b565b6001600160a01b03831660009081526007919091016020526040902054155b61255c5760405162461bcd60e51b815260206004820152601c60248201527f4f7264657220666f756e6420696e2070617374206d6174757269747900000000604482015260640161059b565b61256461269b565b600301548114610b275761257661269b565b6003015461258261269b565b6001600160a01b038416600090815260089190910160205260409020555050565b604051630c0c63c760e21b815260009073__$ddd2182d6f392994445e6b8b482a37128a$__906330318f1c906125e3908890889088908890600401613955565b60206040518083038186803b1580156125fb57600080fd5b505af415801561260f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126339190613987565b9050836001600160a01b03167f8beeadee3235daab9e24529fa931b16580a52a9237a25823056d2a9acea577b5828761266a61269b565b5461267361269b565b60030154888860405161268b969594939291906136f6565b60405180910390a2949350505050565b7ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0a90565b6126ea6040518060800160405280600081526020016000815260200160008152602001600081525090565b6126f2612e4c565b60008073__$ddd2182d6f392994445e6b8b482a37128a$__63a117eff58a8960008a6040518563ffffffff1660e01b815260040161273394939291906137e8565b6101006040518083038186803b15801561274c57600080fd5b505af4158015612760573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127849190613811565b60408b81019290925260208b01929092526001600160a01b039092168952908901929092529287529193509091506127be9050818861374d565b60208501526001600160a01b0388167fc04a2a96be20651da4fad0b7590bfd81e9bff0ad9c86556c936423baaf1e3e808a6127f761269b565b5461280061269b565b60030154602089015189516040808c01519051612822969594939291906139a4565b60405180910390a26040830151156128bd5761283c61269b565b5483516001600160a01b03167f8bcbbabac98864c9065ec271b0b9bcd1cbcb0df90dc0bacb3dfd7542df8eb1d48460008d600181111561287e5761287e6130f3565b1461288a57600061288d565b60015b61289561269b565b60030154886020015189604001516040516128b4959493929190613883565b60405180910390a35b80156128e15784156128d557606084018190526128e1565b611153898983896125a3565b50509550959350505050565b60008082116128fb57600080fd5b600561290783856139da565b61291290600a6139fc565b8361291e86600a6139fc565b61292891906139da565b612932919061374d565b10156129495761294282846139da565b90506106c0565b61295382846139da565b612942906001613735565b612966612415565b600080516020613a4f833981519152805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336123f8565b60007fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50610567565b600080516020613a2f833981519152546001600160a01b031615612a355760405162461bcd60e51b815260206004820152601b60248201527f5265736f6c766572207265676973746572656420616c72656164790000000000604482015260640161059b565b600080516020613a2f83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612a8f6040518060800160405280600081526020016000815260200160008152602001600081525090565b612a97612e4c565b60008073__$ddd2182d6f392994445e6b8b482a37128a$__6339ef2b0a896000886040518463ffffffff1660e01b8152600401612ad69392919061312b565b60606040518083038186803b158015612aee57600080fd5b505af4158015612b02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2691906135a0565b50915091508115612cec5760405163a117eff560e01b815260009073__$ddd2182d6f392994445e6b8b482a37128a$__9063a117eff590612b71908c9085908c9088906004016137e8565b6101006040518083038186803b158015612b8a57600080fd5b505af4158015612b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc29190613811565b5060408b81019190915260208b8101929092526001600160a01b039283168b528b019390935291890192909252918752915088167fc04a2a96be20651da4fad0b7590bfd81e9bff0ad9c86556c936423baaf1e3e808a612c2061269b565b54612c2961269b565b6003015460208a01518a516040808d01519051612c4b969594939291906139a4565b60405180910390a2604084015115612ce657612c6561269b565b5484516001600160a01b03167f8bcbbabac98864c9065ec271b0b9bcd1cbcb0df90dc0bacb3dfd7542df8eb1d48360008d6001811115612ca757612ca76130f3565b14612cb3576000612cb6565b60015b612cbe61269b565b6003015489602001518a60400151604051612cdd959493929190613883565b60405180910390a35b50612d48565b612cf461269b565b60030154612d0061269b565b60000154886001600160a01b03167fc28d55e15fb7b9c473a1796eed97e004ad119a1a8ddc913d40a8eb23d140ee698b85604051612d3f92919061331c565b60405180910390a45b505094509492505050565b60006106c082612db4565b600080516020613a4f8339815191525460ff166105ac5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161059b565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b03169081612e455760405162461bcd60e51b815260040161059b9190613a1b565b5092915050565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b60028110610b2957600080fd5b60008060408385031215612e9657600080fd5b8235612ea181612e76565b946020939093013593505050565b6001600160a01b0381168114610b2957600080fd5b60008060008060808587031215612eda57600080fd5b8435612ee581612e76565b93506020850135612ef581612eaf565b93969395505050506040820135916060013590565b6020808252825182820181905260009190848201906040850190845b81811015612f4257835183529284019291840191600101612f26565b50909695505050505050565b600060208284031215612f6057600080fd5b8135612f6b81612eaf565b9392505050565b600080600080600060a08688031215612f8a57600080fd5b8535612f9581612e76565b94506020860135612fa581612eaf565b94979496505050506040830135926060810135926080909101359150565b8251815260208084015181830152604080850151818401526060808601519084015283516001600160a01b031660808401529083015160a083015282015160c082015260e08101612f6b565b60006020828403121561302157600080fd5b5035919050565b600081518084526020808501945080840160005b838110156130585781518752958201959082019060010161303c565b509495945050505050565b6060815260006130766060830186613028565b82810360208401526130888186613028565b9050828103604084015261309c8185613028565b9695505050505050565b65ffffffffffff81168114610b2957600080fd5b600080604083850312156130cd57600080fd5b82356130d881612eaf565b915060208301356130e8816130a6565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b6002811061312757634e487b7160e01b600052602160045260246000fd5b9052565b606081016131398286613109565b602082019390935260400152919050565b60006020828403121561315c57600080fd5b8135612f6b816130a6565b60c081016131758289613109565b602082019690965260408101949094526001600160a01b03929092166060840152608083015260a090910152919050565b8581526020808201869052604080830186905284516001600160a01b0316606084015290840151608083015283015160a0820152610120810182516001600160a01b031660c0830152602083015160e0830152604083015161010083015261309c565b600081518084526020808501945080840160005b8381101561305857815165ffffffffffff168752958201959082019060010161321d565b6040815260006132546040830185613209565b82810360208401526132668185613209565b95945050505050565b6000806040838503121561328257600080fd5b50508035926020909101359150565b600080600080608085870312156132a757600080fd5b84356132b281612eaf565b966020860135965060408601359560600135945092505050565b60208082526017908201527f4f6e6c7920416363657074656420436f6e747261637473000000000000000000604082015260600190565b60006020828403121561331557600080fd5b5051919050565b6040810161332a8285613109565b8260208301529392505050565b8051801515811461334757600080fd5b919050565b60006020828403121561335e57600080fd5b6106bd82613337565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b818110156133a357602081850181015186830182015201613387565b818111156133b5576000602083870101525b50601f01601f19169290920160200192915050565b8281526040602082015260006133e3604083018461337d565b949350505050565b6000602082840312156133fd57600080fd5b8151612f6b81612eaf565b634e487b7160e01b600052601160045260246000fd5b600060001982141561343257613432613408565b5060010190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561347857613478613439565b604052919050565b600067ffffffffffffffff82111561349a5761349a613439565b5060051b60200190565b600082601f8301126134b557600080fd5b815160206134ca6134c583613480565b61344f565b82815260059290921b840181019181810190868411156134e957600080fd5b8286015b8481101561350d578051613500816130a6565b83529183019183016134ed565b509695505050505050565b6000806000806080858703121561352e57600080fd5b845167ffffffffffffffff81111561354557600080fd5b613551878288016134a4565b6020870151604088015160609098015191999098509095509350505050565b6060815260006135836060830186613209565b90506135926020830185613109565b826040830152949350505050565b6000806000606084860312156135b557600080fd5b6135be84613337565b9250602084015191506135d360408501613337565b90509250925092565b600082601f8301126135ed57600080fd5b815160206135fd6134c583613480565b82815260059290921b8401810191818101908684111561361c57600080fd5b8286015b8481101561350d5780518352918301918301613620565b60008060006060848603121561364c57600080fd5b835167ffffffffffffffff8082111561366457600080fd5b613670878388016135dc565b9450602086015191508082111561368657600080fd5b613692878388016135dc565b935060408601519150808211156136a857600080fd5b506136b5868287016135dc565b9150509250925092565b6000806000606084860312156136d457600080fd5b83516136df81612e76565b602085015160409095015190969495509392505050565b65ffffffffffff8716815260c081016137126020830188613109565b8560408301528460608301528360808301528260a0830152979650505050505050565b6000821982111561374857613748613408565b500190565b60008282101561375f5761375f613408565b500390565b60008060008060008060c0878903121561377d57600080fd5b865161378881612e76565b80965050602087015194506040870151935060608701516137a881612eaf565b809350506080870151915060a087015190509295509295509295565b600080604083850312156137d757600080fd5b505080516020909101519092909150565b608081016137f68287613109565b84602083015283604083015282606083015295945050505050565b600080600080600080600080610100898b03121561382e57600080fd5b885197506020890151965060408901519550606089015161384e816130a6565b60808a015190955061385f81612eaf565b60a08a015160c08b015160e0909b0151999c989b5096999598909790945092505050565b65ffffffffffff8616815260a0810161389f6020830187613109565b8460408301528360608301528260808301529695505050505050565b600080604083850312156138ce57600080fd5b825167ffffffffffffffff808211156138e657600080fd5b6138f2868387016134a4565b9350602085015191508082111561390857600080fd5b50613915858286016134a4565b9150509250929050565b6000806000806080858703121561393557600080fd5b505082516020840151604085015160609095015191969095509092509050565b608081016139638287613109565b6001600160a01b039490941660208201526040810192909252606090910152919050565b60006020828403121561399957600080fd5b8151612f6b816130a6565b60c081016139b28289613109565b602082019690965260408101949094526060840192909252608083015260a090910152919050565b6000826139f757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613a1657613a16613408565b500290565b6020815260006106bd602083018461337d56fe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240189c789132bdb3678132848a8dcd780bffd2b1abdce3984c522ac1d8aeb48f05f3a26469706673582212202e2879cba175b17798cfdd80567aa47cb14e5fe98ab8ecf6bda57dd215f7b68364736f6c63430008090033",
  "libraries": {
    "OrderBookLogic": "0x41BBE9b27cCe94A33FEdF50206912834bc97856B"
  },
  "devdoc": {
    "details": "The market orders is stored in structured red-black trees and doubly linked lists in each node.",
    "kind": "dev",
    "methods": {
      "acceptedContracts()": {
        "details": "The contact name listed in this method is also needed to be listed `requiredContracts` method."
      },
      "cancelOrder(address,uint48)": {
        "params": {
          "_orderId": "Market order id",
          "_user": "User address"
        },
        "returns": {
          "removedAmount": "The removed order amount from the order book by canceling",
          "side": "The canceled order position type",
          "unitPrice": "The canceled order unit price"
        }
      },
      "cleanUpOrders(address)": {
        "details": "The order list per user is not updated in real-time when an order is filled. This function removes the filled order from that order list per user to reduce gas costs for lazy evaluation if the collateral is enough or not.",
        "params": {
          "_user": "User address"
        },
        "returns": {
          "activeBorrowOrderCount": "The total amount of active borrow order on the order book",
          "activeLendOrderCount": "The total amount of active lend order on the order book",
          "maturity": "The maturity of the removed orders",
          "removedBorrowOrderAmount": "The total PV amount of the removed borrow order amount from the order book",
          "removedBorrowOrderFutureValue": "The total FV amount of the removed borrow order amount from the order book",
          "removedLendOrderAmount": "The total PV amount of the removed lend order amount from the order book",
          "removedLendOrderFutureValue": "The total FV amount of the removed lend order amount from the order book"
        }
      },
      "createOrder(uint8,address,uint256,uint256,uint256)": {
        "params": {
          "_amount": "Amount of funds the maker wants to borrow/lend",
          "_circuitBreakerLimitRange": "Rate limit range for the circuit breaker",
          "_side": "Order position type, Borrow or Lend",
          "_unitPrice": "Amount of unit price taker wish to borrow/lend",
          "_user": "User's address"
        },
        "returns": {
          "filledOrder": "User's Filled order of the user",
          "partiallyFilledOrder": "Partially filled order on the order book"
        }
      },
      "createPreOrder(uint8,address,uint256,uint256)": {
        "params": {
          "_amount": "Amount of funds the maker wants to borrow/lend",
          "_side": "Order position type, Borrow or Lend",
          "_unitPrice": "Amount of unit price taker wish to borrow/lend"
        }
      },
      "estimateFilledAmount(uint8,uint256)": {
        "params": {
          "_futureValue": "Future value amount",
          "_side": "Order position type, Borrow or Lend"
        },
        "returns": {
          "amount": "The estimated amount in the present value that is filled on the order book"
        }
      },
      "executeItayoseCall()": {
        "details": "If the opening date had already passed when this contract was created, this Itayose need not be executed.",
        "returns": {
          "openingDate": "The timestamp when the market opens",
          "openingUnitPrice": "The opening price when Itayose is executed",
          "partiallyFilledBorrowingOrder": "Partially filled borrowing order on the order book",
          "partiallyFilledLendingOrder": "Partially filled lending order on the order book",
          "totalOffsetAmount": "The total filled amount when Itayose is executed"
        }
      },
      "getBorrowOrderBook(uint256)": {
        "params": {
          "_limit": "Max limit to get unit prices"
        },
        "returns": {
          "unitPrices": "The array of borrow unit prices"
        }
      },
      "getBorrowOrderIds(address)": {
        "params": {
          "_user": "User's address"
        }
      },
      "getBorrowUnitPrice()": {
        "returns": {
          "_0": "The highest borrow price per future value"
        }
      },
      "getCurrency()": {
        "returns": {
          "currency": "The market currency"
        }
      },
      "getLendOrderBook(uint256)": {
        "params": {
          "_limit": "Max limit to get unit prices"
        },
        "returns": {
          "unitPrices": "The array of lending unit prices"
        }
      },
      "getLendOrderIds(address)": {
        "params": {
          "_user": "User's address"
        }
      },
      "getLendUnitPrice()": {
        "returns": {
          "_0": "The lowest lend price per future value"
        }
      },
      "getMarket()": {
        "returns": {
          "market": "The market data"
        }
      },
      "getMaturity()": {
        "returns": {
          "maturity": "The market maturity"
        }
      },
      "getMidUnitPrice()": {
        "returns": {
          "_0": "The mid price per future value"
        }
      },
      "getOpeningDate()": {
        "returns": {
          "openingDate": "The market opening date"
        }
      },
      "getOpeningUnitPrice()": {
        "returns": {
          "openingUnitPrices": "The market opening unit price"
        }
      },
      "getOrder(uint48)": {
        "params": {
          "_orderId": "The market order id"
        },
        "returns": {
          "amount": "Order amount",
          "maker": "The order maker",
          "maturity": "The maturity of the selected order",
          "side": "Order position type, Borrow or Lend",
          "timestamp": "Timestamp when the order was created",
          "unitPrice": "Amount of interest unit price"
        }
      },
      "getTotalAmountFromBorrowOrders(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "activeAmount": "The total amount of active order on the order book",
          "inactiveAmount": "The total amount of inactive orders filled on the order book",
          "inactiveFutureValue": "The total future value amount of inactive orders filled on the order book",
          "maturity": "The maturity of market that orders were placed."
        }
      },
      "getTotalAmountFromLendOrders(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "activeAmount": "The total amount of active order on the order book",
          "inactiveAmount": "The total amount of inactive orders filled on the order book",
          "inactiveFutureValue": "The total future value amount of inactive orders filled on the order book",
          "maturity": "The maturity of market that orders were placed."
        }
      },
      "initialize(address,bytes32,uint256,uint256)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController.",
        "params": {
          "_ccy": "The main currency for the order book",
          "_maturity": "The initial maturity of the market",
          "_openingDate": "The timestamp when the market opens",
          "_resolver": "The address of the Address Resolver contract"
        }
      },
      "isItayosePeriod()": {
        "returns": {
          "_0": "The boolean if the market is under the Itayose period."
        }
      },
      "isMatured()": {
        "returns": {
          "_0": "The boolean if the market is matured or not"
        }
      },
      "isOpened()": {
        "returns": {
          "_0": "The boolean if the market is opened or not"
        }
      },
      "isPreOrderPeriod()": {
        "returns": {
          "_0": "The boolean if the market is under the pre-order period."
        }
      },
      "isReady()": {
        "returns": {
          "_0": "The boolean if the market is ready or not"
        }
      },
      "openMarket(uint256,uint256)": {
        "params": {
          "_maturity": "The new maturity",
          "_openingDate": "The timestamp when the market opens"
        },
        "returns": {
          "prevMaturity": "The previous maturity updated"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "requiredContracts()": {
        "details": "The contract name list is in `./libraries/Contracts.sol`."
      },
      "unwind(uint8,address,uint256,uint256)": {
        "params": {
          "_circuitBreakerLimitRange": "Rate limit range for the circuit breaker",
          "_futureValue": "Amount of future value unwound",
          "_side": "Order position type, Borrow or Lend",
          "_user": "User's address"
        },
        "returns": {
          "filledOrder": "User's Filled order of the user",
          "partiallyFilledOrder": "Partially filled order"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptedContracts()": {
        "notice": "Returns contract names that can call this contract."
      },
      "cancelOrder(address,uint48)": {
        "notice": "Cancels the order."
      },
      "cleanUpOrders(address)": {
        "notice": "Cleans up own orders to remove order ids that are already filled on the order book."
      },
      "createOrder(uint8,address,uint256,uint256,uint256)": {
        "notice": "Creates the order. Takes the order if the order is matched, and places new order if not match it."
      },
      "createPreOrder(uint8,address,uint256,uint256)": {
        "notice": "Creates a pre-order. A pre-order will only be accepted from 168 hours (7 days) to 1 hour before the market opens (Pre-order period). At the end of this period, Itayose will be executed."
      },
      "estimateFilledAmount(uint8,uint256)": {
        "notice": "Estimates the filled amount at the time of order creation on the order book using the future value amount."
      },
      "executeItayoseCall()": {
        "notice": "Executes Itayose to aggregate pre-orders and determine the opening unit price. After this action, the market opens."
      },
      "getBorrowOrderBook(uint256)": {
        "notice": "Gets the order book of borrow."
      },
      "getBorrowOrderIds(address)": {
        "notice": "Gets active and inactive order IDs in the borrowing order book"
      },
      "getBorrowUnitPrice()": {
        "notice": "Gets the highest borrow price per future value."
      },
      "getCurrency()": {
        "notice": "Gets the market currency."
      },
      "getLendOrderBook(uint256)": {
        "notice": "Gets the order book of lend."
      },
      "getLendOrderIds(address)": {
        "notice": "Gets active and inactive order IDs in the lending order book"
      },
      "getLendUnitPrice()": {
        "notice": "Gets the lowest lend price per future value."
      },
      "getMarket()": {
        "notice": "Gets the market data."
      },
      "getMaturity()": {
        "notice": "Gets the current market maturity."
      },
      "getMidUnitPrice()": {
        "notice": "Gets the mid price per future value."
      },
      "getOpeningDate()": {
        "notice": "Gets the market opening date."
      },
      "getOpeningUnitPrice()": {
        "notice": "Gets the market opening unit price."
      },
      "getOrder(uint48)": {
        "notice": "Gets the market order from the order book."
      },
      "getTotalAmountFromBorrowOrders(address)": {
        "notice": "Calculates and gets the active and inactive amounts from the user orders of borrowing deals."
      },
      "getTotalAmountFromLendOrders(address)": {
        "notice": "Calculates and gets the active and inactive amounts from the user orders of lending deals."
      },
      "initialize(address,bytes32,uint256,uint256)": {
        "notice": "Initializes the contract."
      },
      "isItayosePeriod()": {
        "notice": "Gets if the market is under the Itayose period."
      },
      "isMatured()": {
        "notice": "Gets if the market is matured."
      },
      "isOpened()": {
        "notice": "Gets if the market is opened."
      },
      "isPreOrderPeriod()": {
        "notice": "Gets if the market is under the pre-order period."
      },
      "isReady()": {
        "notice": "Gets if the market is ready."
      },
      "openMarket(uint256,uint256)": {
        "notice": "Opens market"
      },
      "pauseMarket()": {
        "notice": "Pauses the lending market."
      },
      "requiredContracts()": {
        "notice": "Returns the contract names used in this contract."
      },
      "unpauseMarket()": {
        "notice": "Unpauses the lending market."
      },
      "unwind(uint8,address,uint256,uint256)": {
        "notice": "Unwinds lending or borrowing positions by a specified future value amount."
      }
    },
    "notice": "Implements the module that allows lending market participants to create/cancel market orders, and also provides a future value calculation module. For updates, this contract is basically called from `LendingMarketController.sol`instead of being called \\ directly by the user.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 995,
        "contract": "contracts/protocol/LendingMarket.sol:LendingMarket",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 998,
        "contract": "contracts/protocol/LendingMarket.sol:LendingMarket",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}