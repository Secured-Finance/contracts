{
  "address": "0xe260E8C05F2e34E6f7bb850e141FB9D41afc2248",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "orderId",
          "type": "uint48"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        }
      ],
      "name": "CancelOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint48[]",
          "name": "orderIds",
          "type": "uint48[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "name": "CleanOrders",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "orderId",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "originalOrderId",
          "type": "uint48"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        }
      ],
      "name": "MakeOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevMaturity",
          "type": "uint256"
        }
      ],
      "name": "OpenMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "filledAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "filledFutureValue",
          "type": "uint256"
        }
      ],
      "name": "TakeOrders",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "_orderId",
          "type": "uint48"
        }
      ],
      "name": "cancelOrder",
      "outputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "removedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "cleanOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeLendOrderCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "activeBorrowOrderCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "removedLendOrderFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "removedBorrowOrderFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "removedLendOrderAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "removedBorrowOrderAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        }
      ],
      "name": "createOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "filledFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getActiveBorrowOrderIds",
      "outputs": [
        {
          "internalType": "uint48[]",
          "name": "activeOrderIds",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getActiveLendOrderIds",
      "outputs": [
        {
          "internalType": "uint48[]",
          "name": "activeOrderIds",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getBorrowOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrency",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "currency",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getLendOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLendUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "ccy",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "maturity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "genesisDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowUnitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lendUnitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "midUnitPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILendingMarket.Market",
          "name": "market",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaturity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMidUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint48",
          "name": "_orderId",
          "type": "uint48"
        }
      ],
      "name": "getOrder",
      "outputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalAmountFromBorrowOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalAmountFromLendOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_genesisDate",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMatured",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOpened",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "openMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "prevMaturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x61ad74264328e54beadead9765673c703454c75d0df31b1d40e267bdf990aaf0",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0xe260E8C05F2e34E6f7bb850e141FB9D41afc2248",
    "transactionIndex": 22,
    "gasUsed": "2237460",
    "logsBloom": "0x
    "blockHash": "0x2c83f661415b31117fb35d0e3865ae554a9e5148624c9c540da3fbbcd5f2e331",
    "transactionHash": "0x61ad74264328e54beadead9765673c703454c75d0df31b1d40e267bdf990aaf0",
    "logs": [],
    "blockNumber": 8017957,
    "cumulativeGasUsed": "11891259",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "87cfba3f2a70cb5f9aac2e4a848dedef",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"orderId\",\"type\":\"uint48\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"}],\"name\":\"CancelOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint48[]\",\"name\":\"orderIds\",\"type\":\"uint48[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"name\":\"CleanOrders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"orderId\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"originalOrderId\",\"type\":\"uint48\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"}],\"name\":\"MakeOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevMaturity\",\"type\":\"uint256\"}],\"name\":\"OpenMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filledFutureValue\",\"type\":\"uint256\"}],\"name\":\"TakeOrders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_orderId\",\"type\":\"uint48\"}],\"name\":\"cancelOrder\",\"outputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"removedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"cleanOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeLendOrderCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeBorrowOrderCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removedLendOrderFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removedBorrowOrderFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removedLendOrderAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removedBorrowOrderAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"filledFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getActiveBorrowOrderIds\",\"outputs\":[{\"internalType\":\"uint48[]\",\"name\":\"activeOrderIds\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getActiveLendOrderIds\",\"outputs\":[{\"internalType\":\"uint48[]\",\"name\":\"activeOrderIds\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getBorrowOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrency\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getLendOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarket\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"genesisDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"midUnitPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendingMarket.Market\",\"name\":\"market\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMidUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_orderId\",\"type\":\"uint48\"}],\"name\":\"getOrder\",\"outputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalAmountFromBorrowOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalAmountFromLendOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_genesisDate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMatured\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"openMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"prevMaturity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The market orders is stored in structured red-black trees and doubly linked lists in each node.\",\"kind\":\"dev\",\"methods\":{\"acceptedContracts()\":{\"details\":\"The contact name listed in this method is also needed to be listed `requiredContracts` method.\"},\"cancelOrder(address,uint48)\":{\"params\":{\"_orderId\":\"Market order id\",\"_user\":\"User address\"}},\"cleanOrders(address)\":{\"details\":\"The order list per user is not updated in real-time when an order is filled. This function removes the filled order from that order list per user to reduce gas costs for calculating if the collateral is enough or not.\",\"params\":{\"_user\":\"User address\"}},\"createOrder(uint8,address,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of funds the maker wants to borrow/lend\",\"_side\":\"Order position type, Borrow or Lend\",\"_unitPrice\":\"Amount of unit price taker wish to borrow/lend\",\"_user\":\"User's address\"}},\"getActiveBorrowOrderIds(address)\":{\"params\":{\"_user\":\"User's address\"}},\"getActiveLendOrderIds(address)\":{\"params\":{\"_user\":\"User's address\"}},\"getBorrowOrderBook(uint256)\":{\"params\":{\"_limit\":\"Max limit to get unit prices\"},\"returns\":{\"unitPrices\":\"The array of borrow unit prices\"}},\"getBorrowUnitPrice()\":{\"returns\":{\"_0\":\"The highest borrow price per future value\"}},\"getCurrency()\":{\"returns\":{\"currency\":\"The market currency\"}},\"getLendOrderBook(uint256)\":{\"params\":{\"_limit\":\"Max limit to get unit prices\"},\"returns\":{\"unitPrices\":\"The array of lending unit prices\"}},\"getLendUnitPrice()\":{\"returns\":{\"_0\":\"The lowest lend price per future value\"}},\"getMarket()\":{\"returns\":{\"market\":\"The market data\"}},\"getMaturity()\":{\"returns\":{\"maturity\":\"The market maturity\"}},\"getMidUnitPrice()\":{\"returns\":{\"_0\":\"The mid price per future value\"}},\"getOrder(uint48)\":{\"params\":{\"_orderId\":\"The market order id\"},\"returns\":{\"amount\":\"Order amount\",\"maker\":\"The order maker\",\"maturity\":\"The maturity of the selected order\",\"side\":\"Order position type, Borrow or Lend\",\"timestamp\":\"Timestamp when the order was created\",\"unitPrice\":\"Amount of interest unit price\"}},\"getTotalAmountFromBorrowOrders(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"activeAmount\":\"The total amount of active order on the order book\",\"inactiveAmount\":\"The total amount of inactive orders filled on the order book\",\"inactiveFutureValue\":\"The total future value amount of inactive orders filled on the order book\",\"maturity\":\"The maturity of market that orders were placed.\"}},\"getTotalAmountFromLendOrders(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"activeAmount\":\"The total amount of active order on the order book\",\"inactiveAmount\":\"The total amount of inactive orders filled on the order book\",\"inactiveFutureValue\":\"The total future value amount of inactive orders filled on the order book\",\"maturity\":\"The maturity of market that orders were placed.\"}},\"initialize(address,bytes32,uint256,uint256)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController.\",\"params\":{\"_ccy\":\"The main currency for the order book\",\"_genesisDate\":\"The initial date when the first market open\",\"_maturity\":\"The initial maturity of the market\",\"_resolver\":\"The address of the Address Resolver contract\"}},\"isMatured()\":{\"returns\":{\"_0\":\"The boolean if the market is matured or not\"}},\"isOpened()\":{\"returns\":{\"_0\":\"The boolean if the market is opened or not\"}},\"openMarket(uint256)\":{\"params\":{\"_maturity\":\"The new maturity\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"requiredContracts()\":{\"details\":\"The contract name list is in `./libraries/Contracts.sol`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptedContracts()\":{\"notice\":\"Returns contract names that can call this contract.\"},\"cancelOrder(address,uint48)\":{\"notice\":\"Cancels the order.\"},\"cleanOrders(address)\":{\"notice\":\"Cleans own orders to remove order ids that are already filled on the order book.\"},\"createOrder(uint8,address,uint256,uint256)\":{\"notice\":\"Creates the order. Takes the order if the order is matched, and places new order if not match it.\"},\"getActiveBorrowOrderIds(address)\":{\"notice\":\"Gets the order ids of active borrowing order on the order book\"},\"getActiveLendOrderIds(address)\":{\"notice\":\"Gets the order ids of active lending order on the order book\"},\"getBorrowOrderBook(uint256)\":{\"notice\":\"Gets the order book of borrow.\"},\"getBorrowUnitPrice()\":{\"notice\":\"Gets the highest borrow price per future value.\"},\"getCurrency()\":{\"notice\":\"Gets the market currency.\"},\"getLendOrderBook(uint256)\":{\"notice\":\"Gets the order book of lend.\"},\"getLendUnitPrice()\":{\"notice\":\"Gets the lowest lend price per future value.\"},\"getMarket()\":{\"notice\":\"Gets the market data.\"},\"getMaturity()\":{\"notice\":\"Gets the current market maturity.\"},\"getMidUnitPrice()\":{\"notice\":\"Gets the mid price per future value.\"},\"getOrder(uint48)\":{\"notice\":\"Gets the market order from the order book.\"},\"getTotalAmountFromBorrowOrders(address)\":{\"notice\":\"Calculates and gets the active and inactive amounts from the user orders of borrowing deals.\"},\"getTotalAmountFromLendOrders(address)\":{\"notice\":\"Calculates and gets the active and inactive amounts from the user orders of lending deals.\"},\"initialize(address,bytes32,uint256,uint256)\":{\"notice\":\"Initializes the contract.\"},\"isMatured()\":{\"notice\":\"Gets if the market is matured.\"},\"isOpened()\":{\"notice\":\"Gets if the market is opened.\"},\"openMarket(uint256)\":{\"notice\":\"Opens market\"},\"pauseMarket()\":{\"notice\":\"Pauses the lending market.\"},\"requiredContracts()\":{\"notice\":\"Returns the contract names used in this contract.\"},\"unpauseMarket()\":{\"notice\":\"Unpauses the lending market.\"}},\"notice\":\"Implements the module that allows lending market participants to create/cancel market orders, and also provides a future value calculation module. For updates, this contract is basically called from `LendingMarketController.sol`instead of being called \\\\ directly by the user.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LendingMarket.sol\":\"LendingMarket\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/LendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n// interfaces\\nimport {ILendingMarket} from \\\"./interfaces/ILendingMarket.sol\\\";\\n// libraries\\nimport {Contracts} from \\\"./libraries/Contracts.sol\\\";\\nimport {OrderBookLogic} from \\\"./libraries/OrderBookLogic.sol\\\";\\n// mixins\\nimport {MixinAddressResolver} from \\\"./mixins/MixinAddressResolver.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"./types/ProtocolTypes.sol\\\";\\n// utils\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\n// storages\\nimport {LendingMarketStorage as Storage, RemainingOrder} from \\\"./storages/LendingMarketStorage.sol\\\";\\n\\n/**\\n * @notice Implements the module that allows lending market participants to create/cancel market orders,\\n * and also provides a future value calculation module.\\n *\\n * For updates, this contract is basically called from `LendingMarketController.sol`instead of being called \\\\\\n * directly by the user.\\n *\\n * @dev The market orders is stored in structured red-black trees and doubly linked lists in each node.\\n */\\ncontract LendingMarket is ILendingMarket, MixinAddressResolver, Pausable, Proxyable {\\n    /**\\n     * @notice Modifier to make a function callable only by order maker.\\n     * @param _orderId Market order id\\n     */\\n    modifier onlyMaker(address user, uint48 _orderId) {\\n        (, , , address maker, , ) = getOrder(_orderId);\\n        require(maker != address(0), \\\"Order not found\\\");\\n        require(user == maker, \\\"Caller is not the maker\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to check if the market is opened.\\n     */\\n    modifier ifOpened() {\\n        require(isOpened(), \\\"Market is not opened\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to check if the market is matured.\\n     */\\n    modifier ifMatured() {\\n        require(isMatured(), \\\"Market is not matured\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\\n     * @param _resolver The address of the Address Resolver contract\\n     * @param _ccy The main currency for the order book\\n     * @param _maturity The initial maturity of the market\\n     * @param _genesisDate The initial date when the first market open\\n     */\\n    function initialize(\\n        address _resolver,\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _genesisDate\\n    ) public initializer onlyBeacon {\\n        registerAddressResolver(_resolver);\\n\\n        Storage.slot().ccy = _ccy;\\n        Storage.slot().maturity = _maturity;\\n        Storage.slot().genesisDate = _genesisDate;\\n\\n        buildCache();\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](1);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](1);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n    }\\n\\n    /**\\n     * @notice Gets the market data.\\n     * @return market The market data\\n     */\\n    function getMarket() external view override returns (Market memory market) {\\n        return\\n            Market({\\n                ccy: Storage.slot().ccy,\\n                maturity: Storage.slot().maturity,\\n                genesisDate: Storage.slot().genesisDate,\\n                borrowUnitPrice: getBorrowUnitPrice(),\\n                lendUnitPrice: getLendUnitPrice(),\\n                midUnitPrice: getMidUnitPrice()\\n            });\\n    }\\n\\n    /**\\n     * @notice Gets the highest borrow price per future value.\\n     * @return The highest borrow price per future value\\n     */\\n    function getBorrowUnitPrice() public view override returns (uint256) {\\n        return OrderBookLogic.getHighestBorrowUnitPrice();\\n    }\\n\\n    /**\\n     * @notice Gets the lowest lend price per future value.\\n     * @return The lowest lend price per future value\\n     */\\n    function getLendUnitPrice() public view override returns (uint256) {\\n        return OrderBookLogic.getLowestLendUnitPrice();\\n    }\\n\\n    /**\\n     * @notice Gets the mid price per future value.\\n     * @return The mid price per future value\\n     */\\n    function getMidUnitPrice() public view override returns (uint256) {\\n        uint256 borrowUnitPrice = getBorrowUnitPrice();\\n        uint256 lendUnitPrice = getLendUnitPrice();\\n        return (borrowUnitPrice + lendUnitPrice) / 2;\\n    }\\n\\n    /**\\n     * @notice Gets the order book of borrow.\\n     * @param _limit Max limit to get unit prices\\n     * @return unitPrices The array of borrow unit prices\\n     */\\n    function getBorrowOrderBook(uint256 _limit)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        return OrderBookLogic.getBorrowOrderBook(_limit);\\n    }\\n\\n    /**\\n     * @notice Gets the order book of lend.\\n     * @param _limit Max limit to get unit prices\\n     * @return unitPrices The array of lending unit prices\\n     */\\n    function getLendOrderBook(uint256 _limit)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        return OrderBookLogic.getLendOrderBook(_limit);\\n    }\\n\\n    /**\\n     * @notice Gets the current market maturity.\\n     * @return maturity The market maturity\\n     */\\n    function getMaturity() external view override returns (uint256 maturity) {\\n        return Storage.slot().maturity;\\n    }\\n\\n    /**\\n     * @notice Gets the market currency.\\n     * @return currency The market currency\\n     */\\n    function getCurrency() external view override returns (bytes32 currency) {\\n        return Storage.slot().ccy;\\n    }\\n\\n    /**\\n     * @notice Gets if the market is matured.\\n     * @return The boolean if the market is matured or not\\n     */\\n    function isMatured() public view override returns (bool) {\\n        return block.timestamp >= Storage.slot().maturity;\\n    }\\n\\n    /**\\n     * @notice Gets if the market is opened.\\n     * @return The boolean if the market is opened or not\\n     */\\n    function isOpened() public view override returns (bool) {\\n        return !isMatured() && block.timestamp >= Storage.slot().genesisDate;\\n    }\\n\\n    /**\\n     * @notice Gets the market order from the order book.\\n     * @param _orderId The market order id\\n     * @return side Order position type, Borrow or Lend\\n     * @return unitPrice Amount of interest unit price\\n     * @return maturity The maturity of the selected order\\n     * @return maker The order maker\\n     * @return amount Order amount\\n     * @return timestamp Timestamp when the order was created\\n     */\\n    function getOrder(uint48 _orderId)\\n        public\\n        view\\n        override\\n        returns (\\n            ProtocolTypes.Side side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        )\\n    {\\n        return OrderBookLogic.getOrder(_orderId);\\n    }\\n\\n    /**\\n     * @notice Calculates and gets the active and inactive amounts from the user orders of lending deals.\\n     * @param _user User's address\\n     * @return activeAmount The total amount of active order on the order book\\n     * @return inactiveAmount The total amount of inactive orders filled on the order book\\n     * @return inactiveFutureValue The total future value amount of inactive orders filled on the order book\\n     * @return maturity The maturity of market that orders were placed.\\n     */\\n    function getTotalAmountFromLendOrders(address _user)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        return OrderBookLogic.getTotalAmountFromLendOrders(_user);\\n    }\\n\\n    /**\\n     * @notice Calculates and gets the active and inactive amounts from the user orders of borrowing deals.\\n     * @param _user User's address\\n     * @return activeAmount The total amount of active order on the order book\\n     * @return inactiveAmount The total amount of inactive orders filled on the order book\\n     * @return inactiveFutureValue The total future value amount of inactive orders filled on the order book\\n     * @return maturity The maturity of market that orders were placed.\\n     */\\n    function getTotalAmountFromBorrowOrders(address _user)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        return OrderBookLogic.getTotalAmountFromBorrowOrders(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the order ids of active lending order on the order book\\n     * @param _user User's address\\n     */\\n    function getActiveLendOrderIds(address _user)\\n        external\\n        view\\n        override\\n        returns (uint48[] memory activeOrderIds)\\n    {\\n        (activeOrderIds, ) = OrderBookLogic.getActiveLendOrderIds(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the order ids of active borrowing order on the order book\\n     * @param _user User's address\\n     */\\n    function getActiveBorrowOrderIds(address _user)\\n        external\\n        view\\n        override\\n        returns (uint48[] memory activeOrderIds)\\n    {\\n        (activeOrderIds, ) = OrderBookLogic.getActiveBorrowOrderIds(_user);\\n    }\\n\\n    /**\\n     * @notice Opens market\\n     * @param _maturity The new maturity\\n     */\\n    function openMarket(uint256 _maturity)\\n        external\\n        override\\n        ifMatured\\n        onlyAcceptedContracts\\n        returns (uint256 prevMaturity)\\n    {\\n        prevMaturity = Storage.slot().maturity;\\n        Storage.slot().maturity = _maturity;\\n\\n        emit OpenMarket(_maturity, prevMaturity);\\n    }\\n\\n    /**\\n     * @notice Cancels the order.\\n     * @param _user User address\\n     * @param _orderId Market order id\\n     */\\n    function cancelOrder(address _user, uint48 _orderId)\\n        external\\n        override\\n        onlyMaker(_user, _orderId)\\n        whenNotPaused\\n        onlyAcceptedContracts\\n        returns (\\n            ProtocolTypes.Side side,\\n            uint256 removedAmount,\\n            uint256 unitPrice\\n        )\\n    {\\n        (side, removedAmount, unitPrice) = OrderBookLogic.removeOrder(_user, _orderId);\\n\\n        emit ILendingMarket.CancelOrder(\\n            _orderId,\\n            msg.sender,\\n            side,\\n            Storage.slot().ccy,\\n            Storage.slot().maturity,\\n            removedAmount,\\n            unitPrice\\n        );\\n    }\\n\\n    /**\\n     * @notice Cleans own orders to remove order ids that are already filled on the order book.\\n     * @dev The order list per user is not updated in real-time when an order is filled.\\n     * This function removes the filled order from that order list per user to reduce gas costs\\n     * for calculating if the collateral is enough or not.\\n     *\\n     * @param _user User address\\n     */\\n    function cleanOrders(address _user)\\n        external\\n        override\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        )\\n    {\\n        maturity = Storage.slot().userCurrentMaturities[_user];\\n\\n        uint48[] memory lendOrderIds;\\n        uint48[] memory borrowOrderIds;\\n\\n        (\\n            lendOrderIds,\\n            activeLendOrderCount,\\n            removedLendOrderFutureValue,\\n            removedLendOrderAmount\\n        ) = OrderBookLogic.cleanLendOrders(_user, maturity);\\n\\n        (\\n            borrowOrderIds,\\n            activeBorrowOrderCount,\\n            removedBorrowOrderFutureValue,\\n            removedBorrowOrderAmount\\n        ) = OrderBookLogic.cleanBorrowOrders(_user, maturity);\\n\\n        if (removedLendOrderAmount > 0) {\\n            emit CleanOrders(\\n                lendOrderIds,\\n                _user,\\n                ProtocolTypes.Side.LEND,\\n                Storage.slot().ccy,\\n                Storage.slot().maturity\\n            );\\n        }\\n\\n        if (removedBorrowOrderAmount > 0) {\\n            emit CleanOrders(\\n                borrowOrderIds,\\n                _user,\\n                ProtocolTypes.Side.BORROW,\\n                Storage.slot().ccy,\\n                Storage.slot().maturity\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Creates the order. Takes the order if the order is matched,\\n     * and places new order if not match it.\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _user User's address\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _unitPrice Amount of unit price taker wish to borrow/lend\\n     */\\n    function createOrder(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        onlyAcceptedContracts\\n        ifOpened\\n        returns (uint256 filledFutureValue, uint256 remainingAmount)\\n    {\\n        uint256 userMaturity = Storage.slot().userCurrentMaturities[_user];\\n        require(_amount > 0, \\\"Can't place empty amount\\\");\\n        require(\\n            userMaturity == Storage.slot().maturity ||\\n                (userMaturity != Storage.slot().maturity &&\\n                    Storage.slot().activeLendOrderIds[_user].length == 0 &&\\n                    Storage.slot().activeBorrowOrderIds[_user].length == 0),\\n            \\\"Order found in past maturity.\\\"\\n        );\\n\\n        if (userMaturity != Storage.slot().maturity) {\\n            Storage.slot().userCurrentMaturities[_user] = Storage.slot().maturity;\\n        }\\n\\n        bool isExists = _unitPrice == 0 ||\\n            (\\n                _side == ProtocolTypes.Side.LEND\\n                    ? OrderBookLogic.getHighestBorrowUnitPrice() >= _unitPrice\\n                    : OrderBookLogic.getLowestLendUnitPrice() <= _unitPrice\\n            );\\n\\n        if (isExists) {\\n            (filledFutureValue, remainingAmount) = _takeOrder(_side, _user, _amount, _unitPrice);\\n        } else {\\n            _makeOrder(_side, _user, _amount, _unitPrice, false, 0);\\n        }\\n    }\\n\\n    /**\\n     * @notice Pauses the lending market.\\n     */\\n    function pauseMarket() external override onlyAcceptedContracts {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses the lending market.\\n     */\\n    function unpauseMarket() external override onlyAcceptedContracts {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Makes new market order.\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _user User's address\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _unitPrice Preferable interest unit price\\n     * @param _originalOrderId The original order id that filled partially\\n     */\\n    function _makeOrder(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice,\\n        bool _isInterruption,\\n        uint48 _originalOrderId\\n    ) private returns (uint48 orderId) {\\n        orderId = OrderBookLogic.insertOrder(_side, _user, _amount, _unitPrice, _isInterruption);\\n\\n        emit ILendingMarket.MakeOrder(\\n            orderId,\\n            _originalOrderId,\\n            _user,\\n            _side,\\n            Storage.slot().ccy,\\n            Storage.slot().maturity,\\n            _amount,\\n            _unitPrice\\n        );\\n    }\\n\\n    /**\\n     * @notice Takes the market order.\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _user User's address\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _unitPrice Amount of unit price taken\\n     */\\n    function _takeOrder(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) private returns (uint256 filledFutureValue, uint256 remainingAmount) {\\n        RemainingOrder memory remainingOrder;\\n\\n        (remainingOrder, filledFutureValue, remainingAmount) = OrderBookLogic.dropOrders(\\n            _side,\\n            _amount,\\n            _unitPrice\\n        );\\n\\n        emit ILendingMarket.TakeOrders(\\n            _user,\\n            _side,\\n            Storage.slot().ccy,\\n            Storage.slot().maturity,\\n            _amount - remainingAmount,\\n            _unitPrice,\\n            filledFutureValue\\n        );\\n\\n        if (remainingOrder.amount > 0) {\\n            // Make a new order for the remaining amount of a partially filled order\\n            _makeOrder(\\n                _side == ProtocolTypes.Side.BORROW\\n                    ? ProtocolTypes.Side.LEND\\n                    : ProtocolTypes.Side.BORROW,\\n                remainingOrder.maker,\\n                remainingOrder.amount,\\n                remainingOrder.unitPrice,\\n                true,\\n                remainingOrder.orderId\\n            );\\n        }\\n\\n        if (remainingAmount > 0 && _unitPrice != 0) {\\n            // Make a new order for the remaining amount of input\\n            _makeOrder(_side, _user, remainingAmount, _unitPrice, false, 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x21f22c4149629d3510beeeb229fac70ed1450097344b9949e8c6078bd32ca7f1\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IBeaconProxyController {\\n    event BeaconProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function deployFutureValueVault() external returns (address futureValueVault);\\n\\n    function deployLendingMarket(\\n        bytes32 _ccy,\\n        uint256 _genesisDate,\\n        uint256 _maturity\\n    ) external returns (address market);\\n}\\n\",\"keccak256\":\"0xc92a3f5ea6c065590788e5d3d7f259790c4f403e8f50af20ff1ea633badfd8e5\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Currency} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event AddSupportCurrency(bytes32 indexed ccy, string name, uint256 haircut);\\n    event UpdateSupportCurrency(bytes32 indexed ccy, bool isSupported);\\n\\n    event UpdateHaircut(bytes32 indexed ccy, uint256 haircut);\\n\\n    event AddPriceFeed(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n    event RemovePriceFeed(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256 amount);\\n\\n    function convertToETH(bytes32 _ccy, int256 _amount) external view returns (int256 amount);\\n\\n    function convertToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getCurrency(bytes32) external view returns (Currency memory);\\n\\n    function getEthDecimals(bytes32) external view returns (uint8);\\n\\n    function getUsdDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        address _ethPriceFeed,\\n        uint256 _haircut\\n    ) external;\\n\\n    function updateHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported) external;\\n}\\n\",\"keccak256\":\"0x67bdb82d0d6a1c353698a87f2bd6bc8aa9635dd8502ecdab420d1b7d2c567d23\",\"license\":\"MIT\"},\"contracts/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {MaturityUnitPrice} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\\n    event CompoundFactorUpdated(\\n        bytes32 indexed ccy,\\n        uint256 compoundFactor,\\n        uint256 unitPrice,\\n        uint256 currentMaturity,\\n        uint256 previousMaturity\\n    );\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getMaturityUnitPrice(bytes32 ccy, uint256 maturity)\\n        external\\n        view\\n        returns (MaturityUnitPrice memory);\\n\\n    function getGenesisValueInFutureValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function registerCurrency(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor\\n    ) external;\\n\\n    function updateCompoundFactor(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice\\n    ) external;\\n\\n    function addGenesisValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x02169abaefd58d0a91ab1877a9adaba8928645ced58c13aefcff2cf7029770f2\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport {MarketOrder} from \\\"../storages/LendingMarketStorage.sol\\\";\\n\\ninterface ILendingMarket {\\n    event CancelOrder(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event MakeOrder(\\n        uint48 orderId,\\n        uint48 originalOrderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event TakeOrders(\\n        address indexed taker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 filledAmount,\\n        uint256 unitPrice,\\n        uint256 filledFutureValue\\n    );\\n\\n    event CleanOrders(\\n        uint48[] orderIds,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 maturity\\n    );\\n\\n    event OpenMarket(uint256 maturity, uint256 prevMaturity);\\n\\n    struct Market {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        uint256 genesisDate;\\n        uint256 borrowUnitPrice;\\n        uint256 lendUnitPrice;\\n        uint256 midUnitPrice;\\n    }\\n\\n    function getMarket() external view returns (Market memory);\\n\\n    function getBorrowUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getLendUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getMidUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getBorrowOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturity() external view returns (uint256);\\n\\n    function getCurrency() external view returns (bytes32);\\n\\n    function isMatured() external view returns (bool);\\n\\n    function isOpened() external view returns (bool);\\n\\n    function getOrder(uint48 _orderId)\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        );\\n\\n    function getTotalAmountFromLendOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getTotalAmountFromBorrowOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getActiveLendOrderIds(address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds);\\n\\n    function getActiveBorrowOrderIds(address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds);\\n\\n    function openMarket(uint256 maturity) external returns (uint256);\\n\\n    function cancelOrder(address user, uint48 orderId)\\n        external\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        );\\n\\n    function cleanOrders(address _user)\\n        external\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        );\\n\\n    function createOrder(\\n        ProtocolTypes.Side side,\\n        address account,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (uint256 executedRate, uint256 remainingAmount);\\n\\n    function pauseMarket() external;\\n\\n    function unpauseMarket() external;\\n}\\n\",\"keccak256\":\"0xc9541afea517801ed34a1b39850a5805abd84c915154d4d374ef873f2f18a178\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ILendingMarketController {\\n    event CreateLendingMarket(\\n        bytes32 indexed ccy,\\n        address indexed marketAddr,\\n        address futureValueVault,\\n        uint256 index,\\n        uint256 maturity\\n    );\\n    event RotateLendingMarkets(bytes32 ccy, uint256 oldMaturity, uint256 newMaturity);\\n    event PlaceOrder(\\n        address indexed maker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event FillOrder(\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        uint256 filledFutureValue\\n    );\\n    event FillOrdersAsync(\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 filledFutureValue\\n    );\\n    event CancelOrder(\\n        uint48 orderId,\\n        address indexed maker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarkets(bytes32 ccy) external view returns (address[] memory);\\n\\n    function getLendingMarket(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getBorrowUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getLendUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getMidUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getBorrowOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInETH(address user)\\n        external\\n        view\\n        returns (int256 totalPresentValue);\\n\\n    function calculateTotalFundsInETH(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 totalWorkingLendOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalEvaluatedClaimableAmount,\\n            uint256 totalLentAmount,\\n            uint256 totalWorkingBorrowOrdersAmount,\\n            uint256 totalObligationAmount,\\n            uint256 totalBorrowedAmount\\n        );\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor\\n    ) external;\\n\\n    function createLendingMarket(bytes32 ccy)\\n        external\\n        returns (address market, address futureValue);\\n\\n    function createOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndCreateOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function createLendOrderWithETH(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function depositAndCreateLendOrderWithETH(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _unitPrice\\n    ) external payable returns (bool);\\n\\n    function cancelOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint48 orderId\\n    ) external returns (bool);\\n\\n    function rotateLendingMarkets(bytes32 ccy) external;\\n\\n    function pauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function cleanAllOrders(address user) external;\\n\\n    function cleanOrders(bytes32 _ccy, address _user) external;\\n}\\n\",\"keccak256\":\"0x23c39bca9afae581abcf26f7fae90b23c2265eaa114523170f6f2280ae0248db\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ITokenVault {\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event RegisterCurrency(bytes32 ccy, address tokenAddress);\\n\\n    function isCovered(\\n        address user,\\n        bytes32 ccy,\\n        uint256 unsettledExp,\\n        ProtocolTypes.Side _unsettledOrderSide\\n    ) external view returns (bool);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256 maxWithdraw);\\n\\n    function getCoverage(address user) external view returns (uint256 coverage);\\n\\n    function getUnusedCollateral(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address party) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getCollateralParameters()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function setCollateralParameters(\\n        uint256 marginCallThresholdRate,\\n        uint256 autoLiquidationThresholdRate,\\n        uint256 liquidationPriceRate,\\n        uint256 minCollateralRate\\n    ) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositFrom(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addCollateral(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external;\\n\\n    function removeCollateral(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x550e69f9188bfd86fe78e827aeea08e5d3eddfd96d1798e8691f338ca665f38e\",\"license\":\"MIT\"},\"contracts/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE_VAULT = \\\"FutureValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0x49a27b1b2f9cb72c16a7a9066a3df4c5258738c5e0b40d2996e78b29130113c1\",\"license\":\"MIT\"},\"contracts/libraries/HitchensOrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// types\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\n\\nstruct RemainingOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 unitPrice;\\n}\\n\\nstruct OrderItem {\\n    uint48 orderId;\\n    uint48 next;\\n    uint48 prev;\\n    address maker;\\n    uint256 timestamp;\\n    uint256 amount;\\n}\\n\\n/**\\n * @notice HitchensOrderStatisticsTreeLib is a Red-Black Tree binary search library\\n * based on the following library that is extended to manage order data.\\n *\\n * https://github.com/rob-Hitchens/OrderStatisticsTree\\n *\\n */\\nlibrary HitchensOrderStatisticsTreeLib {\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint48 head;\\n        uint48 tail;\\n        uint256 orderCounter;\\n        uint256 orderTotalAmount;\\n        mapping(uint256 => OrderItem) orders;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].right != EMPTY) {\\n            _value = self.nodes[_value].right;\\n        }\\n    }\\n\\n    function next(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(401) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].right != EMPTY) {\\n            _cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(402) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].left != EMPTY) {\\n            _cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint256 value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        // if (self.nodes[value].parent != EMPTY) return true;\\n        uint256 cursor = value;\\n        while (self.nodes[cursor].parent != EMPTY) {\\n            uint256 parent = self.nodes[cursor].parent;\\n            if (self.nodes[parent].left != cursor && self.nodes[parent].right != cursor) {\\n                return false;\\n            }\\n            if (parent == self.root) {\\n                return true;\\n            }\\n            cursor = self.nodes[cursor].parent;\\n        }\\n        return false;\\n    }\\n\\n    function isActiveOrderId(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        return orderIdExists(self, value, orderId) && exists(self, value);\\n    }\\n\\n    function getNode(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n        return (\\n            gn.parent,\\n            gn.left,\\n            gn.right,\\n            gn.red,\\n            gn.head,\\n            gn.tail,\\n            gn.orderCounter,\\n            gn.orderTotalAmount\\n        );\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function getNodeTotalAmount(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint256 totalAmount)\\n    {\\n        return self.nodes[value].orderTotalAmount;\\n    }\\n\\n    function getNodeOrderIds(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint48[] memory orderIds)\\n    {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[gn.head];\\n        orderIds = new uint48[](gn.orderCounter);\\n\\n        for (uint256 i = 0; i < gn.orderCounter; i++) {\\n            orderIds[i] = order.orderId;\\n            order = gn.orders[order.next];\\n        }\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256 _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(405) - Value to insert cannot be zero\\\");\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                return;\\n            }\\n        }\\n\\n        Node storage nValue = self.nodes[value];\\n        // Update order info as a new one if there is already an old node\\n        if (\\n            self.root == EMPTY ||\\n            (self.nodes[cursor].left != value && self.nodes[cursor].right != value)\\n        ) {\\n            nValue.orderCounter = 0;\\n            nValue.orderTotalAmount = 0;\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        }\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(407) - Value to delete cannot be zero\\\");\\n        Node storage nValue = self.nodes[value];\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint256 a,\\n        uint256 b\\n    ) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    function dropLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            RemainingOrder memory remainingOrder\\n        )\\n    {\\n        require(amount != EMPTY, \\\"OrderStatisticsTree(408) - Amount to drop cannot be zero\\\");\\n        uint256 value;\\n        uint256 cursor = first(self);\\n        uint256 lastNode = last(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor <= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (\\n            totalAmount < amount && cursor != EMPTY && (limitValue == 0 || cursor <= limitValue)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            uint256 filledAmount = cursorNodeAmount -\\n                (totalAmount > amount ? totalAmount - amount : 0);\\n            filledFutureValue += _calculateFutureValue(cursor, filledAmount);\\n\\n            cursor = next(self, cursor);\\n        }\\n\\n        if (totalAmount >= amount || value == limitValue) {\\n            if (totalAmount > amount) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                uint256 filledNodeAmount = cursorNodeAmount - (totalAmount - amount);\\n                remainingOrder = fillOrders(self, cursor, filledNodeAmount);\\n            }\\n\\n            self.nodes[cursor].left = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            while (parent != EMPTY) {\\n                if (parent > cursor) {\\n                    // Relink the nodes\\n                    if (self.nodes[cursor].parent != parent) {\\n                        self.nodes[cursor].parent = parent;\\n                        self.nodes[parent].left = cursor;\\n                    }\\n\\n                    cursor = parent;\\n                }\\n\\n                parent = self.nodes[parent].parent;\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        if (lastNode == value && self.nodes[lastNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value > self.root || (value == self.root && amount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        if (self.nodes[self.root].left == 0 && self.nodes[self.root].right != 0) {\\n            if (self.nodes[self.nodes[self.root].right].left != 0) {\\n                rotateRight(self, self.nodes[self.root].right);\\n            }\\n            rotateLeft(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function dropRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            RemainingOrder memory remainingOrder\\n        )\\n    {\\n        require(amount != EMPTY, \\\"OrderStatisticsTree(408) - Amount to drop cannot be zero\\\");\\n        uint256 value;\\n        uint256 cursor = last(self);\\n        uint256 firstNode = first(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor >= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (\\n            totalAmount < amount && cursor != EMPTY && (limitValue == 0 || cursor >= limitValue)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            uint256 filledAmount = cursorNodeAmount -\\n                (totalAmount > amount ? totalAmount - amount : 0);\\n            filledFutureValue += _calculateFutureValue(cursor, filledAmount);\\n\\n            cursor = prev(self, cursor);\\n        }\\n\\n        if (totalAmount >= amount || value == limitValue) {\\n            if (totalAmount > amount) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                uint256 filledNodeAmount = cursorNodeAmount - (totalAmount - amount);\\n                remainingOrder = fillOrders(self, cursor, filledNodeAmount);\\n            }\\n\\n            self.nodes[cursor].right = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            while (parent != EMPTY) {\\n                if (parent < cursor) {\\n                    // Relink the nodes\\n                    if (self.nodes[cursor].parent != parent) {\\n                        self.nodes[cursor].parent = parent;\\n                        self.nodes[parent].right = cursor;\\n                    }\\n\\n                    cursor = parent;\\n                }\\n\\n                parent = self.nodes[parent].parent;\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        if (firstNode == value && self.nodes[firstNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value < self.root || (value == self.root && amount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        if (self.nodes[self.root].right == 0 && self.nodes[self.root].left != 0) {\\n            if (self.nodes[self.nodes[self.root].left].right != 0) {\\n                rotateLeft(self, self.nodes[self.root].left);\\n            }\\n            rotateRight(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function getFutureValue(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (uint256) {\\n        return _calculateFutureValue(value, self.nodes[value].orders[orderId].amount);\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (OrderItem memory) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orders[orderId];\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function orderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        uint48 cursor = orderId;\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[cursor];\\n\\n        if (order.orderId != cursor) {\\n            return false;\\n        }\\n\\n        while (order.prev != EMPTY) {\\n            cursor = order.prev;\\n            order = gn.orders[cursor];\\n        }\\n\\n        return cursor == gn.head;\\n    }\\n\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount,\\n        bool isInterruption\\n    ) internal {\\n        require(amount > 0, \\\"Insufficient amount\\\");\\n        insert(self, value);\\n\\n        if (isInterruption) {\\n            addHead(self, value, orderId, user, amount);\\n        } else {\\n            addTail(self, value, orderId, user, amount);\\n        }\\n    }\\n\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        amount = _removeOrder(self, value, orderId);\\n        remove(self, value);\\n    }\\n\\n    /**\\n     * @dev Reduces order amount once market order taken.\\n     */\\n    function fillOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount\\n    ) internal returns (RemainingOrder memory remainingOrder) {\\n        Node storage gn = self.nodes[value];\\n\\n        require(\\n            gn.orderTotalAmount >= _amount,\\n            \\\"OrderStatisticsTree(410) - Amount to fill is insufficient\\\"\\n        );\\n\\n        uint256 remainingAmount = _amount;\\n        uint256 filledCount = 0;\\n        OrderItem memory currentOrder = gn.orders[gn.head];\\n        uint48 orderId = gn.head;\\n\\n        while (orderId != 0 && remainingAmount != 0) {\\n            currentOrder = gn.orders[orderId];\\n\\n            if (currentOrder.amount <= remainingAmount) {\\n                remainingAmount -= currentOrder.amount;\\n                orderId = currentOrder.next;\\n            } else {\\n                remainingOrder = RemainingOrder(\\n                    currentOrder.orderId,\\n                    currentOrder.maker,\\n                    currentOrder.amount - remainingAmount,\\n                    value\\n                );\\n                remainingAmount = 0;\\n            }\\n\\n            filledCount++;\\n        }\\n\\n        _dropOrders(self, value, currentOrder.orderId);\\n\\n        if (remainingOrder.amount > 0) {\\n            // NOTE: This order that the filled partially was dropped from a node, and the unfilled amount\\n            // will be inserted newly as a new orders.\\n            // However, that filled order amount is used when future value is calculated from inactive order.\\n            // For that calculation, this order amount needs to be updated by an actual filled amount at this point.\\n            OrderItem storage order = self.nodes[value].orders[currentOrder.orderId];\\n            order.amount -= remainingOrder.amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n        uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n        _link(self, _value, orderId, gn.head);\\n        _setHead(self, _value, orderId);\\n        if (gn.tail == 0) _setTail(self, _value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, _value, _orderId, _user, _amount);\\n        } else {\\n            uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n            _link(self, _value, gn.tail, orderId);\\n            _setTail(self, _value, orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint48) {\\n        Node storage gn = self.nodes[value];\\n        require(\\n            gn.orders[orderId].timestamp == 0,\\n            \\\"OrderStatisticsTree(409) - Order id already exist.\\\"\\n        );\\n\\n        gn.orderCounter += 1;\\n        gn.orderTotalAmount += amount;\\n        OrderItem memory order = OrderItem(orderId, 0, 0, user, block.timestamp, amount);\\n        gn.orders[orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the list.\\n     */\\n    function _removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n        gn.orderTotalAmount -= order.amount;\\n    }\\n\\n    /**\\n     * @dev Drop the OrderItems older than or equal `orderId` from the list\\n     */\\n    function _dropOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n        uint256 cursor = gn.head;\\n        uint256 removedCount = 1;\\n        uint256 removedAmount = gn.orders[cursor].amount;\\n\\n        while (cursor != orderId) {\\n            cursor = gn.orders[cursor].next;\\n            removedCount++;\\n            removedAmount += gn.orders[cursor].amount;\\n        }\\n\\n        if (gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        }\\n\\n        gn.orderCounter -= removedCount;\\n        gn.orderTotalAmount -= removedAmount;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 _prevId,\\n        uint48 _nextId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[_prevId].next = _nextId;\\n        gn.orders[_nextId].prev = _prevId;\\n    }\\n\\n    function _calculateFutureValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * ProtocolTypes.PRICE_DIGIT) / unitPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x24094ea7da46999044cf4eebcf49e5df63759bfc55a0f15e96b4c1aafa2abd3f\",\"license\":\"MIT\"},\"contracts/libraries/OrderBookLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ILendingMarket} from \\\"../interfaces/ILendingMarket.sol\\\";\\nimport {HitchensOrderStatisticsTreeLib, RemainingOrder, OrderItem} from \\\"../libraries/HitchensOrderStatisticsTreeLib.sol\\\";\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {LendingMarketStorage as Storage, MarketOrder} from \\\"../storages/LendingMarketStorage.sol\\\";\\n\\nlibrary OrderBookLogic {\\n    using HitchensOrderStatisticsTreeLib for HitchensOrderStatisticsTreeLib.Tree;\\n\\n    function getHighestBorrowUnitPrice() public view returns (uint256) {\\n        return Storage.slot().borrowOrders[Storage.slot().maturity].last();\\n    }\\n\\n    function getLowestLendUnitPrice() public view returns (uint256) {\\n        return Storage.slot().lendOrders[Storage.slot().maturity].first();\\n    }\\n\\n    function getBorrowOrderBook(uint256 _limit)\\n        public\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].last();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeTotalAmount(\\n            unitPrice\\n        );\\n        quantities[0] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeCount(\\n            unitPrice\\n        );\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].prev(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeTotalAmount(\\n                unitPrice\\n            );\\n            quantities[i] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeCount(\\n                unitPrice\\n            );\\n        }\\n    }\\n\\n    function getLendOrderBook(uint256 _limit)\\n        public\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = Storage.slot().lendOrders[Storage.slot().maturity].first();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\\n            unitPrice\\n        );\\n        quantities[0] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeCount(unitPrice);\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = Storage.slot().lendOrders[Storage.slot().maturity].next(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\\n                unitPrice\\n            );\\n            quantities[i] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeCount(\\n                unitPrice\\n            );\\n        }\\n    }\\n\\n    function getOrder(uint48 _orderId)\\n        public\\n        view\\n        returns (\\n            ProtocolTypes.Side side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        )\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n\\n        OrderItem memory orderItem;\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            orderItem = Storage.slot().lendOrders[marketOrder.maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n        } else {\\n            orderItem = Storage.slot().borrowOrders[marketOrder.maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n        }\\n\\n        if (orderItem.maker != address(0)) {\\n            return (\\n                marketOrder.side,\\n                marketOrder.unitPrice,\\n                marketOrder.maturity,\\n                orderItem.maker,\\n                orderItem.amount,\\n                orderItem.timestamp\\n            );\\n        }\\n    }\\n\\n    function getTotalAmountFromLendOrders(address _user)\\n        public\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds) = getActiveLendOrderIds(\\n            _user\\n        );\\n\\n        maturity = Storage.slot().userCurrentMaturities[_user];\\n\\n        for (uint256 i = 0; i < activeOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[activeOrderIds[i]];\\n            // Sum future values in the current maturity.\\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\\n            // as an order canceled in the past market.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .lendOrders[Storage.slot().maturity]\\n                .getOrderById(marketOrder.unitPrice, activeOrderIds[i]);\\n            activeAmount += orderItem.amount;\\n        }\\n\\n        for (uint256 i = 0; i < inActiveOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveOrderIds[i]];\\n            if (maturity == 0) {\\n                maturity = marketOrder.maturity;\\n            }\\n            // Sum future values in the maturity of orders\\n            // It will be the future value when the order is created, even if the market is rotated\\n            // and maturity is updated.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .lendOrders[marketOrder.maturity]\\n                .getOrderById(marketOrder.unitPrice, inActiveOrderIds[i]);\\n            inactiveAmount += orderItem.amount;\\n            inactiveFutureValue +=\\n                (orderItem.amount * ProtocolTypes.PRICE_DIGIT) /\\n                marketOrder.unitPrice;\\n        }\\n    }\\n\\n    function getTotalAmountFromBorrowOrders(address _user)\\n        public\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        (\\n            uint48[] memory activeOrderIds,\\n            uint48[] memory inActiveOrderIds\\n        ) = getActiveBorrowOrderIds(_user);\\n\\n        for (uint256 i = 0; i < activeOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[activeOrderIds[i]];\\n            // Sum future values in the current maturity.\\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\\n            // as an order canceled in the past market.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .borrowOrders[Storage.slot().maturity]\\n                .getOrderById(marketOrder.unitPrice, activeOrderIds[i]);\\n            activeAmount += orderItem.amount;\\n        }\\n\\n        maturity = Storage.slot().userCurrentMaturities[_user];\\n\\n        for (uint256 i = 0; i < inActiveOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveOrderIds[i]];\\n            // Sum future values in the maturity of orders\\n            // It will be the future value when the order is created, even if the market is rotated\\n            // and maturity is updated.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .borrowOrders[marketOrder.maturity]\\n                .getOrderById(marketOrder.unitPrice, inActiveOrderIds[i]);\\n            inactiveAmount += orderItem.amount;\\n            inactiveFutureValue +=\\n                (orderItem.amount * ProtocolTypes.PRICE_DIGIT) /\\n                marketOrder.unitPrice;\\n        }\\n    }\\n\\n    function getActiveLendOrderIds(address _user)\\n        public\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        bool isPastMaturity = Storage.slot().userCurrentMaturities[_user] !=\\n            Storage.slot().maturity;\\n\\n        activeOrderIds = new uint48[](\\n            isPastMaturity ? 0 : Storage.slot().activeLendOrderIds[_user].length\\n        );\\n        inActiveOrderIds = new uint48[](Storage.slot().activeLendOrderIds[_user].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().activeLendOrderIds[_user].length; i++) {\\n            uint48 orderId = Storage.slot().activeLendOrderIds[_user][i];\\n            MarketOrder memory marketOrder = Storage.slot().orders[orderId];\\n\\n            if (\\n                !Storage\\n                    .slot()\\n                    .lendOrders[Storage.slot().userCurrentMaturities[_user]]\\n                    .isActiveOrderId(marketOrder.unitPrice, orderId)\\n            ) {\\n                inActiveOrderCount += 1;\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                if (!isPastMaturity) {\\n                    activeOrderCount += 1;\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function getActiveBorrowOrderIds(address _user)\\n        public\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        bool isPastMaturity = Storage.slot().userCurrentMaturities[_user] !=\\n            Storage.slot().maturity;\\n\\n        activeOrderIds = new uint48[](\\n            isPastMaturity ? 0 : Storage.slot().activeBorrowOrderIds[_user].length\\n        );\\n        inActiveOrderIds = new uint48[](Storage.slot().activeBorrowOrderIds[_user].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().activeBorrowOrderIds[_user].length; i++) {\\n            uint48 orderId = Storage.slot().activeBorrowOrderIds[_user][i];\\n            MarketOrder memory marketOrder = Storage.slot().orders[orderId];\\n\\n            if (\\n                !Storage\\n                    .slot()\\n                    .borrowOrders[Storage.slot().userCurrentMaturities[_user]]\\n                    .isActiveOrderId(marketOrder.unitPrice, orderId)\\n            ) {\\n                inActiveOrderCount += 1;\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                if (!isPastMaturity) {\\n                    activeOrderCount += 1;\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function insertOrder(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice,\\n        bool _isInterruption\\n    ) public returns (uint48 orderId) {\\n        orderId = nextOrderId();\\n        Storage.slot().orders[orderId] = MarketOrder(\\n            _side,\\n            _unitPrice,\\n            Storage.slot().maturity,\\n            block.timestamp\\n        );\\n\\n        if (_side == ProtocolTypes.Side.LEND) {\\n            Storage.slot().lendOrders[Storage.slot().maturity].insertOrder(\\n                _unitPrice,\\n                orderId,\\n                _user,\\n                _amount,\\n                _isInterruption\\n            );\\n            Storage.slot().activeLendOrderIds[_user].push(orderId);\\n        } else if (_side == ProtocolTypes.Side.BORROW) {\\n            Storage.slot().borrowOrders[Storage.slot().maturity].insertOrder(\\n                _unitPrice,\\n                orderId,\\n                _user,\\n                _amount,\\n                _isInterruption\\n            );\\n            Storage.slot().activeBorrowOrderIds[_user].push(orderId);\\n        }\\n    }\\n\\n    function dropOrders(\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    )\\n        public\\n        returns (\\n            RemainingOrder memory remainingOrder,\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount\\n        )\\n    {\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            (filledFutureValue, remainingAmount, remainingOrder) = Storage\\n                .slot()\\n                .lendOrders[Storage.slot().maturity]\\n                .dropLeft(_amount, _unitPrice);\\n        } else if (_side == ProtocolTypes.Side.LEND) {\\n            (filledFutureValue, remainingAmount, remainingOrder) = Storage\\n                .slot()\\n                .borrowOrders[Storage.slot().maturity]\\n                .dropRight(_amount, _unitPrice);\\n        }\\n    }\\n\\n    function cleanLendOrders(address _user, uint256 _maturity)\\n        public\\n        returns (\\n            uint48[] memory orderIds,\\n            uint256 activeOrderCount,\\n            uint256 removedFutureValue,\\n            uint256 removedOrderAmount\\n        )\\n    {\\n        (\\n            uint48[] memory activeLendOrderIds,\\n            uint48[] memory inActiveLendOrderIds\\n        ) = getActiveLendOrderIds(_user);\\n\\n        Storage.slot().activeLendOrderIds[_user] = activeLendOrderIds;\\n        activeOrderCount = activeLendOrderIds.length;\\n        uint256 inactiveOrderCount = inActiveLendOrderIds.length;\\n        orderIds = new uint48[](inactiveOrderCount);\\n\\n        for (uint256 i = 0; i < inactiveOrderCount; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveLendOrderIds[i]];\\n            OrderItem memory orderItem = Storage.slot().lendOrders[_maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                inActiveLendOrderIds[i]\\n            );\\n            removedFutureValue += Storage.slot().lendOrders[_maturity].getFutureValue(\\n                marketOrder.unitPrice,\\n                inActiveLendOrderIds[i]\\n            );\\n            removedOrderAmount += orderItem.amount;\\n\\n            orderIds[i] = orderItem.orderId;\\n        }\\n    }\\n\\n    function cleanBorrowOrders(address _user, uint256 _maturity)\\n        public\\n        returns (\\n            uint48[] memory orderIds,\\n            uint256 activeOrderCount,\\n            uint256 removedFutureValue,\\n            uint256 removedOrderAmount\\n        )\\n    {\\n        (\\n            uint48[] memory activeBorrowOrderIds,\\n            uint48[] memory inActiveBorrowOrderIds\\n        ) = getActiveBorrowOrderIds(_user);\\n\\n        Storage.slot().activeBorrowOrderIds[_user] = activeBorrowOrderIds;\\n        activeOrderCount = activeBorrowOrderIds.length;\\n        uint256 inactiveOrderCount = inActiveBorrowOrderIds.length;\\n        orderIds = new uint48[](inactiveOrderCount);\\n\\n        for (uint256 i = 0; i < inactiveOrderCount; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveBorrowOrderIds[i]];\\n            OrderItem memory orderItem = Storage.slot().borrowOrders[_maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                inActiveBorrowOrderIds[i]\\n            );\\n            removedFutureValue += Storage.slot().borrowOrders[_maturity].getFutureValue(\\n                marketOrder.unitPrice,\\n                inActiveBorrowOrderIds[i]\\n            );\\n\\n            removedOrderAmount += orderItem.amount;\\n\\n            orderIds[i] = orderItem.orderId;\\n        }\\n    }\\n\\n    function removeOrder(address _user, uint48 _orderId)\\n        public\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n        uint256 removedAmount;\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            removedAmount = Storage.slot().lendOrders[Storage.slot().maturity].removeOrder(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n            removeOrderIdFromOrders(Storage.slot().activeLendOrderIds[_user], _orderId);\\n        } else if (marketOrder.side == ProtocolTypes.Side.BORROW) {\\n            removedAmount = Storage.slot().borrowOrders[Storage.slot().maturity].removeOrder(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n            removeOrderIdFromOrders(Storage.slot().activeBorrowOrderIds[_user], _orderId);\\n        }\\n\\n        return (marketOrder.side, removedAmount, marketOrder.unitPrice);\\n    }\\n\\n    /**\\n     * @notice Increases and returns id of last order in order book.\\n     * @return The new order id\\n     */\\n    function nextOrderId() private returns (uint48) {\\n        Storage.slot().lastOrderId++;\\n        return Storage.slot().lastOrderId;\\n    }\\n\\n    function removeOrderIdFromOrders(uint48[] storage orders, uint256 orderId) private {\\n        uint256 lastOrderIndex = orders.length - 1;\\n        for (uint256 i = 0; i <= lastOrderIndex; i++) {\\n            if (orders[i] == orderId) {\\n                if (i != lastOrderIndex) {\\n                    uint48 lastOrderId = orders[lastOrderIndex];\\n                    orders[i] = lastOrderId;\\n                }\\n\\n                orders.pop();\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3ff849649784a018a372f581bc3e84c9cca9ccb7c21812442f6012e1e509597b\",\"license\":\"MIT\"},\"contracts/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/MixinAddressResolverStorage.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    modifier onlyAcceptedContracts() {\\n        require(isAcceptedContract(msg.sender), \\\"Only Accepted Contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the contract names used in this contract.\\n     * @dev The contract name list is in `./libraries/Contracts.sol`.\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @notice Returns contract names that can call this contract.\\n     * @dev The contact name listed in this method is also needed to be listed `requiredContracts` method.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = Storage.slot().resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            Storage.slot().addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                Storage.slot().resolver.getAddress(name) != Storage.slot().addressCache[name] ||\\n                Storage.slot().addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        require(address(Storage.slot().resolver) == address(0), \\\"resolver registered already\\\");\\n        Storage.slot().resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function resolver() public view returns (IAddressResolver) {\\n        return Storage.slot().resolver;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0xf0bb13571fbf8a275118b67bc0332eab0661f4465eff77066755f9320c1bd11d\",\"license\":\"MIT\"},\"contracts/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nstruct Currency {\\n    bool isSupported;\\n    string name;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.currencyController\\\");\\n\\n    struct Storage {\\n        // Protocol currencies\\n        mapping(bytes32 => Currency) currencies;\\n        mapping(bytes32 => uint256) haircuts;\\n        // PriceFeed\\n        mapping(bytes32 => AggregatorV3Interface) usdPriceFeeds;\\n        mapping(bytes32 => AggregatorV3Interface) ethPriceFeeds;\\n        mapping(bytes32 => uint8) usdDecimals;\\n        mapping(bytes32 => uint8) ethDecimals;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0c9e9399e6f58e0702c8edcb6b58603d281668b10bf701b119911e24bba192b\",\"license\":\"MIT\"},\"contracts/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.genesisValueVault\\\");\\n\\n    struct Storage {\\n        mapping(bytes32 => bool) isRegisteredCurrency;\\n        mapping(bytes32 => uint256) initialCompoundFactors;\\n        mapping(bytes32 => uint256) compoundFactors;\\n        mapping(bytes32 => uint256) currentMaturity;\\n        mapping(bytes32 => uint8) decimals;\\n        // Mapping from user to balance per currency\\n        mapping(bytes32 => mapping(address => int256)) balances;\\n        mapping(bytes32 => uint256) totalLendingSupplies;\\n        mapping(bytes32 => uint256) totalBorrowingSupplies;\\n        // Mapping from maturity to rate per currency\\n        mapping(bytes32 => mapping(uint256 => MaturityUnitPrice)) maturityUnitPrices;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2715307f5a409405179faad8ce1f4a614f1b166bd46cf2fde96d1c90ea5cf4fd\",\"license\":\"MIT\"},\"contracts/storages/LendingMarketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport \\\"../libraries/HitchensOrderStatisticsTreeLib.sol\\\";\\n\\nstruct MarketOrder {\\n    ProtocolTypes.Side side;\\n    uint256 unitPrice; // in basis points\\n    uint256 maturity;\\n    uint256 timestamp;\\n}\\n\\nlibrary LendingMarketStorage {\\n    using HitchensOrderStatisticsTreeLib for HitchensOrderStatisticsTreeLib.Tree;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarket\\\");\\n\\n    struct Storage {\\n        uint48 lastOrderId;\\n        bytes32 ccy;\\n        uint256 genesisDate;\\n        uint256 maturity;\\n        // Mapping from user to active lend order ids\\n        mapping(address => uint48[]) activeLendOrderIds;\\n        // Mapping from user to active borrow order ids\\n        mapping(address => uint48[]) activeBorrowOrderIds;\\n        // Mapping from user to current maturity\\n        mapping(address => uint256) userCurrentMaturities;\\n        // Mapping from orderId to order\\n        mapping(uint256 => MarketOrder) orders;\\n        // Mapping from maturity to lending orders\\n        mapping(uint256 => HitchensOrderStatisticsTreeLib.Tree) lendOrders;\\n        // Mapping from maturity to borrowing orders\\n        mapping(uint256 => HitchensOrderStatisticsTreeLib.Tree) borrowOrders;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x04b080d246d43abd5cd7c970c3375a5a707587a58dc13d172c41a9aed97f76f3\",\"license\":\"MIT\"},\"contracts/storages/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.mixinAddressResolver\\\");\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 => address) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x852b885b6264a58930a0945c68842717e19f954eaefc0137235e6f263e17fa9d\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant PRICE_DIGIT = 10000; // price digit in the basis (10000 -> 1)\\n    uint256 public constant PCT_DIGIT = 10000; // percentage digit in the basis (10000 -> 100%)\\n\\n    uint256 internal constant DAYS_IN_YEAR = 365;\\n    uint256 internal constant SECONDS_IN_YEAR = 31557600;\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n}\\n\",\"keccak256\":\"0xfc44bd731aebae907269f73e2d828379e77253ecd21642a874ab2e4a4f763262\",\"license\":\"MIT\"},\"contracts/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0xe59cd60631c7c754ed6b77caa6f3a06301ef0df07881a3dcfa85124abc1890b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506000805460ff1916905561277b8061002a6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806371613c2d116100f9578063d866d35511610097578063e3d904d811610071578063e3d904d8146103b8578063e7df768c146103eb578063eebc28f9146103fe578063f1be16791461041157600080fd5b8063d866d3551461039d578063e099765914610276578063e16695b5146103b057600080fd5b8063a03738dc116100d3578063a03738dc1461034f578063a452c3f814610357578063b7c1d52714610377578063baa267571461038a57600080fd5b806371613c2d1461031a5780637ce219aa146103225780637f2b6a0d1461034757600080fd5b80634bf62d16116101665780635c975abb116101405780635c975abb146102f75780635e0b54da14610302578063692aa97e1461030a5780636945c1fd1461031257600080fd5b80634bf62d161461028b5780634eee4495146102ad578063504b89bd146102d557600080fd5b80631b3508b7116101a25780631b3508b71461024057806329985e5a146102565780632af64bd31461025e5780633d03b9da1461027657600080fd5b806304f3bcec146101c95780630a2db192146101ee5780631610c7ce14610236575b600080fd5b6101d1610465565b6040516001600160a01b0390911681526020015b60405180910390f35b6102016101fc366004611da0565b610486565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016101e5565b61023e6106cd565b005b610248610705565b6040519081526020016101e5565b61023e610788565b610266610935565b60405190151581526020016101e5565b61027e610a9b565b6040516101e59190611dc4565b61029e610299366004611e08565b610b00565b6040516101e593929190611e5c565b6102c06102bb366004611eac565b610b9f565b604080519283526020830191909152016101e5565b6102e86102e3366004611f06565b610f00565b6040516101e593929190611f77565b60005460ff16610266565b6102486110f5565b61026661113b565b610248611161565b610248611174565b610335610330366004611f96565b6111aa565b6040516101e596959493929190611fb3565b610266611255565b61023e61126b565b61036a610365366004611da0565b611298565b6040516101e5919061202a565b61023e61038536600461203d565b611332565b610248610398366004611e08565b6114f4565b61029e6103ab366004611e08565b6115c0565b6102486115fe565b6103cb6103c6366004611da0565b611611565b6040805194855260208501939093529183015260608201526080016101e5565b6103cb6103f9366004611da0565b6116b5565b61036a61040c366004611da0565b6116fe565b610419611741565b6040516101e59190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b60006000805160206127268339815191525b546001600160a01b0316919050565b60008060008060008060006104996117e4565b6001600160a01b038916600081815260069290920160205260409182902054915163914551f160e01b81526004810191909152602481018290529091506060908190734a825aB4bd5bBEAAE2705d9C530D85d9E25454da9063914551f19060440160006040518083038186803b15801561051257600080fd5b505af4158015610526573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261054e9190810190612157565b604051634a53967b60e01b81526001600160a01b038f16600482015260248101889052929c509099509650909250734a825aB4bd5bBEAAE2705d9C530D85d9E25454da90634a53967b9060440160006040518083038186803b1580156105b357600080fd5b505af41580156105c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105ef9190810190612157565b919a50975094509050841561065c576106066117e4565b600101548a6001600160a01b03167f57ae0829e329b1a3836f63df1ec9ff833eafe63fd74d44966da2939acb28b3298460006106406117e4565b60030154604051610653939291906121af565b60405180910390a35b83156106c05761066a6117e4565b600101548a6001600160a01b03167f57ae0829e329b1a3836f63df1ec9ff833eafe63fd74d44966da2939acb28b3298360016106a46117e4565b600301546040516106b7939291906121af565b60405180910390a35b5050919395979092949650565b6106d633611808565b6106fb5760405162461bcd60e51b81526004016106f2906121df565b60405180910390fd5b610703611882565b565b6000734a825aB4bd5bBEAAE2705d9C530D85d9E25454da63e1396d156040518163ffffffff1660e01b815260040160206040518083038186803b15801561074b57600080fd5b505af415801561075f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107839190612216565b905090565b6000610792610a9b565b905060005b81518110156109315760008282815181106107b4576107b461222f565b6020026020010151905060006107d560008051602061272683398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd9161084691869190605d01612292565b60206040518083038186803b15801561085e57600080fd5b505afa158015610872573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089691906122b3565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a150508080610929906122e6565b915050610797565b5050565b600080610940610a9b565b905060005b8151811015610a925760008282815181106109625761096261222f565b6020026020010151905061098160008051602061272683398151915290565b600082815260019190910160205260409020546001600160a01b0316600080516020612726833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b1580156109ee57600080fd5b505afa158015610a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2691906122b3565b6001600160a01b0316141580610a70575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b15610a7f576000935050505090565b5080610a8a816122e6565b915050610945565b50600191505090565b604080516001808252818301909252606091602080830190803683370190505090507f4c656e64696e674d61726b6574436f6e74726f6c6c657200000000000000000081600081518110610af157610af161222f565b60200260200101818152505090565b6060806060734a825aB4bd5bBEAAE2705d9C530D85d9E25454da634bf62d16856040518263ffffffff1660e01b8152600401610b3e91815260200190565b60006040518083038186803b158015610b5657600080fd5b505af4158015610b6a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b92919081019061235c565b9250925092509193909250565b600080610baa6118d4565b610bb333611808565b610bcf5760405162461bcd60e51b81526004016106f2906121df565b610bd761113b565b610c1a5760405162461bcd60e51b815260206004820152601460248201527313585c9ad95d081a5cc81b9bdd081bdc195b995960621b60448201526064016106f2565b6000610c246117e4565b6001600160a01b03871660009081526006919091016020526040902054905084610c905760405162461bcd60e51b815260206004820152601860248201527f43616e277420706c61636520656d70747920616d6f756e74000000000000000060448201526064016106f2565b610c986117e4565b60030154811480610d0f5750610cac6117e4565b600301548114158015610ce15750610cc26117e4565b6001600160a01b03871660009081526004919091016020526040902054155b8015610d0f5750610cf06117e4565b6001600160a01b03871660009081526005919091016020526040902054155b610d5b5760405162461bcd60e51b815260206004820152601d60248201527f4f7264657220666f756e6420696e2070617374206d617475726974792e00000060448201526064016106f2565b610d636117e4565b600301548114610d9f57610d756117e4565b60030154610d816117e4565b6001600160a01b038816600090815260069190910160205260409020555b6000841580610ec657506000886001811115610dbd57610dbd611f3f565b14610e465784734a825aB4bd5bBEAAE2705d9C530D85d9E25454da63e1396d156040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0757600080fd5b505af4158015610e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3f9190612216565b1115610ec6565b84734a825aB4bd5bBEAAE2705d9C530D85d9E25454da6357b5758c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e8b57600080fd5b505af4158015610e9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec39190612216565b10155b90508015610ee457610eda8888888861191a565b9094509250610ef5565b610ef388888888600080611ab3565b505b505094509492505050565b600080600084846000610f12826111aa565b509094505050506001600160a01b03821615159050610f655760405162461bcd60e51b815260206004820152600f60248201526e13dc99195c881b9bdd08199bdd5b99608a1b60448201526064016106f2565b806001600160a01b0316836001600160a01b031614610fc65760405162461bcd60e51b815260206004820152601760248201527f43616c6c6572206973206e6f7420746865206d616b657200000000000000000060448201526064016106f2565b610fce6118d4565b610fd733611808565b610ff35760405162461bcd60e51b81526004016106f2906121df565b604051636c5db84360e01b81526001600160a01b038916600482015265ffffffffffff88166024820152734a825aB4bd5bBEAAE2705d9C530D85d9E25454da90636c5db8439060440160606040518083038186803b15801561105457600080fd5b505af4158015611068573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108c91906123e4565b91975095509350337f93dd2f84c54d2f8a3c777e90b437261254267e3d7f347137a70db4fd770b0e1d88886110bf6117e4565b600101546110cb6117e4565b600301548a8a6040516110e39695949392919061241b565b60405180910390a25050509250925092565b6000734a825aB4bd5bBEAAE2705d9C530D85d9E25454da6357b5758c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561074b57600080fd5b6000611145611255565b15801561078357506111556117e4565b60020154421015905090565b600061116b6117e4565b60010154905090565b60008061117f6110f5565b9050600061118b610705565b90506002611199828461245a565b6111a39190612472565b9250505090565b604051633e710cd560e11b815265ffffffffffff8216600482015260009081908190819081908190734a825aB4bd5bBEAAE2705d9C530D85d9E25454da90637ce219aa9060240160c06040518083038186803b15801561120957600080fd5b505af415801561121d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112419190612494565b949c939b5091995097509550909350915050565b600061125f6117e4565b60030154421015905090565b61127433611808565b6112905760405162461bcd60e51b81526004016106f2906121df565b610703611bb4565b60405163148a587f60e31b81526001600160a01b0382166004820152606090734a825aB4bd5bBEAAE2705d9C530D85d9E25454da9063a452c3f8906024015b60006040518083038186803b1580156112ef57600080fd5b505af4158015611303573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261132b91908101906124f4565b5092915050565b60005462010000900460ff16158080156113575750600054600161010090910460ff16105b806113775750303b158015611377575060005460ff610100909104166001145b6113da5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106f2565b6000805461ff0019166101001790558015611401576000805462ff00001916620100001790555b600061140b611bf1565b6001600160a01b0316141561146e5760405162461bcd60e51b815260206004820152602360248201527f4d7573742062652063616c6c65642066726f6d20626561636f6e20636f6e74726044820152621858dd60ea1b60648201526084016106f2565b61147785611c19565b836114806117e4565b600101558261148d6117e4565b600301558161149a6117e4565b600201556114a6610788565b80156114ed576000805462ff000019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b60006114fe611255565b6115425760405162461bcd60e51b815260206004820152601560248201527413585c9ad95d081a5cc81b9bdd081b585d1d5c9959605a1b60448201526064016106f2565b61154b33611808565b6115675760405162461bcd60e51b81526004016106f2906121df565b61156f6117e4565b6003015490508161157e6117e4565b6003015560408051838152602081018390527f974eb6a392aa4b5b16a285eae8ee9d9c75309faa295ffa928838efa6b00e438a910160405180910390a1919050565b6060806060734a825aB4bd5bBEAAE2705d9C530D85d9E25454da63d866d355856040518263ffffffff1660e01b8152600401610b3e91815260200190565b60006116086117e4565b60030154905090565b604051631c7b209b60e31b81526001600160a01b0382166004820152600090819081908190734a825aB4bd5bBEAAE2705d9C530D85d9E25454da9063e3d904d8906024015b60806040518083038186803b15801561166e57600080fd5b505af4158015611682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a69190612558565b93509350935093509193509193565b6040516339f7dda360e21b81526001600160a01b0382166004820152600090819081908190734a825aB4bd5bBEAAE2705d9C530D85d9E25454da9063e7df768c90602401611656565b60405163eebc28f960e01b81526001600160a01b0382166004820152606090734a825aB4bd5bBEAAE2705d9C530D85d9E25454da9063eebc28f9906024016112d7565b61177d6040518060c001604052806000801916815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060c001604052806117906117e4565b6001015481526020016117a16117e4565b6003015481526020016117b26117e4565b6002015481526020016117c36110f5565b81526020016117d0610705565b81526020016117dd611174565b9052919050565b7ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0a90565b600080611813610a9b565b905060005b8151811015611878576118438282815181106118365761183661222f565b6020026020010151611cae565b6001600160a01b0316846001600160a01b03161415611866575060019392505050565b80611870816122e6565b915050611818565b5060009392505050565b61188a611d3f565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60005460ff16156107035760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106f2565b60408051608081018252600080825260208201819052918101829052606081018290528190604051630c72f15960e31b8152734a825aB4bd5bBEAAE2705d9C530D85d9E25454da906363978ac89061197a908a9089908990600401611f77565b60c06040518083038186803b15801561199257600080fd5b505af41580156119a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ca919061258e565b909450925090506001600160a01b0386167f9ab36b38572f7e10ddede3bbbabebc173b5d3de1ab6da0eae8e0a4263102165c88611a056117e4565b60010154611a116117e4565b60030154611a1f878b612624565b8989604051611a339695949392919061263b565b60405180910390a2604081015115611a8657611a846001886001811115611a5c57611a5c611f3f565b14611a68576001611a6b565b60005b6020830151604084015160608501518551600190611ab3565b505b600082118015611a9557508315155b15611aa957610ef587878487600080611ab3565b5094509492505050565b604051631b4269f560e11b8152600090734a825aB4bd5bBEAAE2705d9C530D85d9E25454da90633684d3ea90611af5908a908a908a908a908a90600401612671565b60206040518083038186803b158015611b0d57600080fd5b505af4158015611b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4591906126ad565b9050856001600160a01b03167f31a79e960d3af9ca64cb36b314014c1094f0940c49bcd257e842e2b6f47de92d82848a611b7d6117e4565b60010154611b896117e4565b600301548b8b604051611ba297969594939291906126ca565b60405180910390a29695505050505050565b611bbc6118d4565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118b73390565b60007fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50610477565b600080516020612726833981519152546001600160a01b031615611c7f5760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c7265616479000000000060448201526064016106f2565b60008051602061272683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b0316908161132b5760405162461bcd60e51b81526004016106f29190612712565b60005460ff166107035760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106f2565b6001600160a01b0381168114611d9d57600080fd5b50565b600060208284031215611db257600080fd5b8135611dbd81611d88565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015611dfc57835183529284019291840191600101611de0565b50909695505050505050565b600060208284031215611e1a57600080fd5b5035919050565b600081518084526020808501945080840160005b83811015611e5157815187529582019590820190600101611e35565b509495945050505050565b606081526000611e6f6060830186611e21565b8281036020840152611e818186611e21565b90508281036040840152611e958185611e21565b9695505050505050565b60028110611d9d57600080fd5b60008060008060808587031215611ec257600080fd5b8435611ecd81611e9f565b93506020850135611edd81611d88565b93969395505050506040820135916060013590565b65ffffffffffff81168114611d9d57600080fd5b60008060408385031215611f1957600080fd5b8235611f2481611d88565b91506020830135611f3481611ef2565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b60028110611f7357634e487b7160e01b600052602160045260246000fd5b9052565b60608101611f858286611f55565b602082019390935260400152919050565b600060208284031215611fa857600080fd5b8135611dbd81611ef2565b60c08101611fc18289611f55565b602082019690965260408101949094526001600160a01b03929092166060840152608083015260a090910152919050565b600081518084526020808501945080840160005b83811015611e5157815165ffffffffffff1687529582019590820190600101612006565b602081526000611dbd6020830184611ff2565b6000806000806080858703121561205357600080fd5b843561205e81611d88565b966020860135965060408601359560600135945092505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156120b7576120b7612078565b604052919050565b600067ffffffffffffffff8211156120d9576120d9612078565b5060051b60200190565b600082601f8301126120f457600080fd5b81516020612109612104836120bf565b61208e565b82815260059290921b8401810191818101908684111561212857600080fd5b8286015b8481101561214c57805161213f81611ef2565b835291830191830161212c565b509695505050505050565b6000806000806080858703121561216d57600080fd5b845167ffffffffffffffff81111561218457600080fd5b612190878288016120e3565b6020870151604088015160609098015191999098509095509350505050565b6060815260006121c26060830186611ff2565b90506121d16020830185611f55565b826040830152949350505050565b60208082526017908201527f4f6e6c7920416363657074656420436f6e747261637473000000000000000000604082015260600190565b60006020828403121561222857600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b8181101561226b5760208185018101518683018201520161224f565b8181111561227d576000602083870101525b50601f01601f19169290920160200192915050565b8281526040602082015260006122ab6040830184612245565b949350505050565b6000602082840312156122c557600080fd5b8151611dbd81611d88565b634e487b7160e01b600052601160045260246000fd5b60006000198214156122fa576122fa6122d0565b5060010190565b600082601f83011261231257600080fd5b81516020612322612104836120bf565b82815260059290921b8401810191818101908684111561234157600080fd5b8286015b8481101561214c5780518352918301918301612345565b60008060006060848603121561237157600080fd5b835167ffffffffffffffff8082111561238957600080fd5b61239587838801612301565b945060208601519150808211156123ab57600080fd5b6123b787838801612301565b935060408601519150808211156123cd57600080fd5b506123da86828701612301565b9150509250925092565b6000806000606084860312156123f957600080fd5b835161240481611e9f565b602085015160409095015190969495509392505050565b65ffffffffffff8716815260c081016124376020830188611f55565b8560408301528460608301528360808301528260a0830152979650505050505050565b6000821982111561246d5761246d6122d0565b500190565b60008261248f57634e487b7160e01b600052601260045260246000fd5b500490565b60008060008060008060c087890312156124ad57600080fd5b86516124b881611e9f565b80965050602087015194506040870151935060608701516124d881611d88565b809350506080870151915060a087015190509295509295509295565b6000806040838503121561250757600080fd5b825167ffffffffffffffff8082111561251f57600080fd5b61252b868387016120e3565b9350602085015191508082111561254157600080fd5b5061254e858286016120e3565b9150509250929050565b6000806000806080858703121561256e57600080fd5b505082516020840151604085015160609095015191969095509092509050565b600080600083850360c08112156125a457600080fd5b60808112156125b257600080fd5b506040516080810181811067ffffffffffffffff821117156125d6576125d6612078565b60405284516125e481611ef2565b815260208501516125f481611d88565b60208201526040858101519082015260608086015190820152608085015160a09095015190969495509392505050565b600082821015612636576126366122d0565b500390565b60c081016126498289611f55565b602082019690965260408101949094526060840192909252608083015260a090910152919050565b60a0810161267f8288611f55565b6001600160a01b03959095166020820152604081019390935260608301919091521515608090910152919050565b6000602082840312156126bf57600080fd5b8151611dbd81611ef2565b65ffffffffffff88811682528716602082015260e081016126ee6040830188611f55565b8560608301528460808301528360a08301528260c083015298975050505050505050565b602081526000611dbd602083018461224556fe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124018a2646970667358221220e983eea14fe4661444c9d58094f1b055fc64ef5b6c60540d1abccc93c208a57d64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c806371613c2d116100f9578063d866d35511610097578063e3d904d811610071578063e3d904d8146103b8578063e7df768c146103eb578063eebc28f9146103fe578063f1be16791461041157600080fd5b8063d866d3551461039d578063e099765914610276578063e16695b5146103b057600080fd5b8063a03738dc116100d3578063a03738dc1461034f578063a452c3f814610357578063b7c1d52714610377578063baa267571461038a57600080fd5b806371613c2d1461031a5780637ce219aa146103225780637f2b6a0d1461034757600080fd5b80634bf62d16116101665780635c975abb116101405780635c975abb146102f75780635e0b54da14610302578063692aa97e1461030a5780636945c1fd1461031257600080fd5b80634bf62d161461028b5780634eee4495146102ad578063504b89bd146102d557600080fd5b80631b3508b7116101a25780631b3508b71461024057806329985e5a146102565780632af64bd31461025e5780633d03b9da1461027657600080fd5b806304f3bcec146101c95780630a2db192146101ee5780631610c7ce14610236575b600080fd5b6101d1610465565b6040516001600160a01b0390911681526020015b60405180910390f35b6102016101fc366004611da0565b610486565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016101e5565b61023e6106cd565b005b610248610705565b6040519081526020016101e5565b61023e610788565b610266610935565b60405190151581526020016101e5565b61027e610a9b565b6040516101e59190611dc4565b61029e610299366004611e08565b610b00565b6040516101e593929190611e5c565b6102c06102bb366004611eac565b610b9f565b604080519283526020830191909152016101e5565b6102e86102e3366004611f06565b610f00565b6040516101e593929190611f77565b60005460ff16610266565b6102486110f5565b61026661113b565b610248611161565b610248611174565b610335610330366004611f96565b6111aa565b6040516101e596959493929190611fb3565b610266611255565b61023e61126b565b61036a610365366004611da0565b611298565b6040516101e5919061202a565b61023e61038536600461203d565b611332565b610248610398366004611e08565b6114f4565b61029e6103ab366004611e08565b6115c0565b6102486115fe565b6103cb6103c6366004611da0565b611611565b6040805194855260208501939093529183015260608201526080016101e5565b6103cb6103f9366004611da0565b6116b5565b61036a61040c366004611da0565b6116fe565b610419611741565b6040516101e59190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b60006000805160206127268339815191525b546001600160a01b0316919050565b60008060008060008060006104996117e4565b6001600160a01b038916600081815260069290920160205260409182902054915163914551f160e01b8152600481019190915260248101829052909150606090819073__$48c10a0cee0b1f414542d4c3a018d6aedf$__9063914551f19060440160006040518083038186803b15801561051257600080fd5b505af4158015610526573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261054e9190810190612157565b604051634a53967b60e01b81526001600160a01b038f16600482015260248101889052929c50909950965090925073__$48c10a0cee0b1f414542d4c3a018d6aedf$__90634a53967b9060440160006040518083038186803b1580156105b357600080fd5b505af41580156105c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105ef9190810190612157565b919a50975094509050841561065c576106066117e4565b600101548a6001600160a01b03167f57ae0829e329b1a3836f63df1ec9ff833eafe63fd74d44966da2939acb28b3298460006106406117e4565b60030154604051610653939291906121af565b60405180910390a35b83156106c05761066a6117e4565b600101548a6001600160a01b03167f57ae0829e329b1a3836f63df1ec9ff833eafe63fd74d44966da2939acb28b3298360016106a46117e4565b600301546040516106b7939291906121af565b60405180910390a35b5050919395979092949650565b6106d633611808565b6106fb5760405162461bcd60e51b81526004016106f2906121df565b60405180910390fd5b610703611882565b565b600073__$48c10a0cee0b1f414542d4c3a018d6aedf$__63e1396d156040518163ffffffff1660e01b815260040160206040518083038186803b15801561074b57600080fd5b505af415801561075f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107839190612216565b905090565b6000610792610a9b565b905060005b81518110156109315760008282815181106107b4576107b461222f565b6020026020010151905060006107d560008051602061272683398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd9161084691869190605d01612292565b60206040518083038186803b15801561085e57600080fd5b505afa158015610872573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089691906122b3565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a150508080610929906122e6565b915050610797565b5050565b600080610940610a9b565b905060005b8151811015610a925760008282815181106109625761096261222f565b6020026020010151905061098160008051602061272683398151915290565b600082815260019190910160205260409020546001600160a01b0316600080516020612726833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b1580156109ee57600080fd5b505afa158015610a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2691906122b3565b6001600160a01b0316141580610a70575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b15610a7f576000935050505090565b5080610a8a816122e6565b915050610945565b50600191505090565b604080516001808252818301909252606091602080830190803683370190505090507f4c656e64696e674d61726b6574436f6e74726f6c6c657200000000000000000081600081518110610af157610af161222f565b60200260200101818152505090565b606080606073__$48c10a0cee0b1f414542d4c3a018d6aedf$__634bf62d16856040518263ffffffff1660e01b8152600401610b3e91815260200190565b60006040518083038186803b158015610b5657600080fd5b505af4158015610b6a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b92919081019061235c565b9250925092509193909250565b600080610baa6118d4565b610bb333611808565b610bcf5760405162461bcd60e51b81526004016106f2906121df565b610bd761113b565b610c1a5760405162461bcd60e51b815260206004820152601460248201527313585c9ad95d081a5cc81b9bdd081bdc195b995960621b60448201526064016106f2565b6000610c246117e4565b6001600160a01b03871660009081526006919091016020526040902054905084610c905760405162461bcd60e51b815260206004820152601860248201527f43616e277420706c61636520656d70747920616d6f756e74000000000000000060448201526064016106f2565b610c986117e4565b60030154811480610d0f5750610cac6117e4565b600301548114158015610ce15750610cc26117e4565b6001600160a01b03871660009081526004919091016020526040902054155b8015610d0f5750610cf06117e4565b6001600160a01b03871660009081526005919091016020526040902054155b610d5b5760405162461bcd60e51b815260206004820152601d60248201527f4f7264657220666f756e6420696e2070617374206d617475726974792e00000060448201526064016106f2565b610d636117e4565b600301548114610d9f57610d756117e4565b60030154610d816117e4565b6001600160a01b038816600090815260069190910160205260409020555b6000841580610ec657506000886001811115610dbd57610dbd611f3f565b14610e46578473__$48c10a0cee0b1f414542d4c3a018d6aedf$__63e1396d156040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0757600080fd5b505af4158015610e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3f9190612216565b1115610ec6565b8473__$48c10a0cee0b1f414542d4c3a018d6aedf$__6357b5758c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e8b57600080fd5b505af4158015610e9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec39190612216565b10155b90508015610ee457610eda8888888861191a565b9094509250610ef5565b610ef388888888600080611ab3565b505b505094509492505050565b600080600084846000610f12826111aa565b509094505050506001600160a01b03821615159050610f655760405162461bcd60e51b815260206004820152600f60248201526e13dc99195c881b9bdd08199bdd5b99608a1b60448201526064016106f2565b806001600160a01b0316836001600160a01b031614610fc65760405162461bcd60e51b815260206004820152601760248201527f43616c6c6572206973206e6f7420746865206d616b657200000000000000000060448201526064016106f2565b610fce6118d4565b610fd733611808565b610ff35760405162461bcd60e51b81526004016106f2906121df565b604051636c5db84360e01b81526001600160a01b038916600482015265ffffffffffff8816602482015273__$48c10a0cee0b1f414542d4c3a018d6aedf$__90636c5db8439060440160606040518083038186803b15801561105457600080fd5b505af4158015611068573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108c91906123e4565b91975095509350337f93dd2f84c54d2f8a3c777e90b437261254267e3d7f347137a70db4fd770b0e1d88886110bf6117e4565b600101546110cb6117e4565b600301548a8a6040516110e39695949392919061241b565b60405180910390a25050509250925092565b600073__$48c10a0cee0b1f414542d4c3a018d6aedf$__6357b5758c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561074b57600080fd5b6000611145611255565b15801561078357506111556117e4565b60020154421015905090565b600061116b6117e4565b60010154905090565b60008061117f6110f5565b9050600061118b610705565b90506002611199828461245a565b6111a39190612472565b9250505090565b604051633e710cd560e11b815265ffffffffffff821660048201526000908190819081908190819073__$48c10a0cee0b1f414542d4c3a018d6aedf$__90637ce219aa9060240160c06040518083038186803b15801561120957600080fd5b505af415801561121d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112419190612494565b949c939b5091995097509550909350915050565b600061125f6117e4565b60030154421015905090565b61127433611808565b6112905760405162461bcd60e51b81526004016106f2906121df565b610703611bb4565b60405163148a587f60e31b81526001600160a01b038216600482015260609073__$48c10a0cee0b1f414542d4c3a018d6aedf$__9063a452c3f8906024015b60006040518083038186803b1580156112ef57600080fd5b505af4158015611303573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261132b91908101906124f4565b5092915050565b60005462010000900460ff16158080156113575750600054600161010090910460ff16105b806113775750303b158015611377575060005460ff610100909104166001145b6113da5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106f2565b6000805461ff0019166101001790558015611401576000805462ff00001916620100001790555b600061140b611bf1565b6001600160a01b0316141561146e5760405162461bcd60e51b815260206004820152602360248201527f4d7573742062652063616c6c65642066726f6d20626561636f6e20636f6e74726044820152621858dd60ea1b60648201526084016106f2565b61147785611c19565b836114806117e4565b600101558261148d6117e4565b600301558161149a6117e4565b600201556114a6610788565b80156114ed576000805462ff000019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b60006114fe611255565b6115425760405162461bcd60e51b815260206004820152601560248201527413585c9ad95d081a5cc81b9bdd081b585d1d5c9959605a1b60448201526064016106f2565b61154b33611808565b6115675760405162461bcd60e51b81526004016106f2906121df565b61156f6117e4565b6003015490508161157e6117e4565b6003015560408051838152602081018390527f974eb6a392aa4b5b16a285eae8ee9d9c75309faa295ffa928838efa6b00e438a910160405180910390a1919050565b606080606073__$48c10a0cee0b1f414542d4c3a018d6aedf$__63d866d355856040518263ffffffff1660e01b8152600401610b3e91815260200190565b60006116086117e4565b60030154905090565b604051631c7b209b60e31b81526001600160a01b038216600482015260009081908190819073__$48c10a0cee0b1f414542d4c3a018d6aedf$__9063e3d904d8906024015b60806040518083038186803b15801561166e57600080fd5b505af4158015611682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a69190612558565b93509350935093509193509193565b6040516339f7dda360e21b81526001600160a01b038216600482015260009081908190819073__$48c10a0cee0b1f414542d4c3a018d6aedf$__9063e7df768c90602401611656565b60405163eebc28f960e01b81526001600160a01b038216600482015260609073__$48c10a0cee0b1f414542d4c3a018d6aedf$__9063eebc28f9906024016112d7565b61177d6040518060c001604052806000801916815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060c001604052806117906117e4565b6001015481526020016117a16117e4565b6003015481526020016117b26117e4565b6002015481526020016117c36110f5565b81526020016117d0610705565b81526020016117dd611174565b9052919050565b7ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0a90565b600080611813610a9b565b905060005b8151811015611878576118438282815181106118365761183661222f565b6020026020010151611cae565b6001600160a01b0316846001600160a01b03161415611866575060019392505050565b80611870816122e6565b915050611818565b5060009392505050565b61188a611d3f565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60005460ff16156107035760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106f2565b60408051608081018252600080825260208201819052918101829052606081018290528190604051630c72f15960e31b815273__$48c10a0cee0b1f414542d4c3a018d6aedf$__906363978ac89061197a908a9089908990600401611f77565b60c06040518083038186803b15801561199257600080fd5b505af41580156119a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ca919061258e565b909450925090506001600160a01b0386167f9ab36b38572f7e10ddede3bbbabebc173b5d3de1ab6da0eae8e0a4263102165c88611a056117e4565b60010154611a116117e4565b60030154611a1f878b612624565b8989604051611a339695949392919061263b565b60405180910390a2604081015115611a8657611a846001886001811115611a5c57611a5c611f3f565b14611a68576001611a6b565b60005b6020830151604084015160608501518551600190611ab3565b505b600082118015611a9557508315155b15611aa957610ef587878487600080611ab3565b5094509492505050565b604051631b4269f560e11b815260009073__$48c10a0cee0b1f414542d4c3a018d6aedf$__90633684d3ea90611af5908a908a908a908a908a90600401612671565b60206040518083038186803b158015611b0d57600080fd5b505af4158015611b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4591906126ad565b9050856001600160a01b03167f31a79e960d3af9ca64cb36b314014c1094f0940c49bcd257e842e2b6f47de92d82848a611b7d6117e4565b60010154611b896117e4565b600301548b8b604051611ba297969594939291906126ca565b60405180910390a29695505050505050565b611bbc6118d4565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118b73390565b60007fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50610477565b600080516020612726833981519152546001600160a01b031615611c7f5760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c7265616479000000000060448201526064016106f2565b60008051602061272683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b0316908161132b5760405162461bcd60e51b81526004016106f29190612712565b60005460ff166107035760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106f2565b6001600160a01b0381168114611d9d57600080fd5b50565b600060208284031215611db257600080fd5b8135611dbd81611d88565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015611dfc57835183529284019291840191600101611de0565b50909695505050505050565b600060208284031215611e1a57600080fd5b5035919050565b600081518084526020808501945080840160005b83811015611e5157815187529582019590820190600101611e35565b509495945050505050565b606081526000611e6f6060830186611e21565b8281036020840152611e818186611e21565b90508281036040840152611e958185611e21565b9695505050505050565b60028110611d9d57600080fd5b60008060008060808587031215611ec257600080fd5b8435611ecd81611e9f565b93506020850135611edd81611d88565b93969395505050506040820135916060013590565b65ffffffffffff81168114611d9d57600080fd5b60008060408385031215611f1957600080fd5b8235611f2481611d88565b91506020830135611f3481611ef2565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b60028110611f7357634e487b7160e01b600052602160045260246000fd5b9052565b60608101611f858286611f55565b602082019390935260400152919050565b600060208284031215611fa857600080fd5b8135611dbd81611ef2565b60c08101611fc18289611f55565b602082019690965260408101949094526001600160a01b03929092166060840152608083015260a090910152919050565b600081518084526020808501945080840160005b83811015611e5157815165ffffffffffff1687529582019590820190600101612006565b602081526000611dbd6020830184611ff2565b6000806000806080858703121561205357600080fd5b843561205e81611d88565b966020860135965060408601359560600135945092505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156120b7576120b7612078565b604052919050565b600067ffffffffffffffff8211156120d9576120d9612078565b5060051b60200190565b600082601f8301126120f457600080fd5b81516020612109612104836120bf565b61208e565b82815260059290921b8401810191818101908684111561212857600080fd5b8286015b8481101561214c57805161213f81611ef2565b835291830191830161212c565b509695505050505050565b6000806000806080858703121561216d57600080fd5b845167ffffffffffffffff81111561218457600080fd5b612190878288016120e3565b6020870151604088015160609098015191999098509095509350505050565b6060815260006121c26060830186611ff2565b90506121d16020830185611f55565b826040830152949350505050565b60208082526017908201527f4f6e6c7920416363657074656420436f6e747261637473000000000000000000604082015260600190565b60006020828403121561222857600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b8181101561226b5760208185018101518683018201520161224f565b8181111561227d576000602083870101525b50601f01601f19169290920160200192915050565b8281526040602082015260006122ab6040830184612245565b949350505050565b6000602082840312156122c557600080fd5b8151611dbd81611d88565b634e487b7160e01b600052601160045260246000fd5b60006000198214156122fa576122fa6122d0565b5060010190565b600082601f83011261231257600080fd5b81516020612322612104836120bf565b82815260059290921b8401810191818101908684111561234157600080fd5b8286015b8481101561214c5780518352918301918301612345565b60008060006060848603121561237157600080fd5b835167ffffffffffffffff8082111561238957600080fd5b61239587838801612301565b945060208601519150808211156123ab57600080fd5b6123b787838801612301565b935060408601519150808211156123cd57600080fd5b506123da86828701612301565b9150509250925092565b6000806000606084860312156123f957600080fd5b835161240481611e9f565b602085015160409095015190969495509392505050565b65ffffffffffff8716815260c081016124376020830188611f55565b8560408301528460608301528360808301528260a0830152979650505050505050565b6000821982111561246d5761246d6122d0565b500190565b60008261248f57634e487b7160e01b600052601260045260246000fd5b500490565b60008060008060008060c087890312156124ad57600080fd5b86516124b881611e9f565b80965050602087015194506040870151935060608701516124d881611d88565b809350506080870151915060a087015190509295509295509295565b6000806040838503121561250757600080fd5b825167ffffffffffffffff8082111561251f57600080fd5b61252b868387016120e3565b9350602085015191508082111561254157600080fd5b5061254e858286016120e3565b9150509250929050565b6000806000806080858703121561256e57600080fd5b505082516020840151604085015160609095015191969095509092509050565b600080600083850360c08112156125a457600080fd5b60808112156125b257600080fd5b506040516080810181811067ffffffffffffffff821117156125d6576125d6612078565b60405284516125e481611ef2565b815260208501516125f481611d88565b60208201526040858101519082015260608086015190820152608085015160a09095015190969495509392505050565b600082821015612636576126366122d0565b500390565b60c081016126498289611f55565b602082019690965260408101949094526060840192909252608083015260a090910152919050565b60a0810161267f8288611f55565b6001600160a01b03959095166020820152604081019390935260608301919091521515608090910152919050565b6000602082840312156126bf57600080fd5b8151611dbd81611ef2565b65ffffffffffff88811682528716602082015260e081016126ee6040830188611f55565b8560608301528460808301528360a08301528260c083015298975050505050505050565b602081526000611dbd602083018461224556fe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124018a2646970667358221220e983eea14fe4661444c9d58094f1b055fc64ef5b6c60540d1abccc93c208a57d64736f6c63430008090033",
  "libraries": {
    "OrderBookLogic": "0x4a825aB4bd5bBEAAE2705d9C530D85d9E25454da"
  },
  "devdoc": {
    "details": "The market orders is stored in structured red-black trees and doubly linked lists in each node.",
    "kind": "dev",
    "methods": {
      "acceptedContracts()": {
        "details": "The contact name listed in this method is also needed to be listed `requiredContracts` method."
      },
      "cancelOrder(address,uint48)": {
        "params": {
          "_orderId": "Market order id",
          "_user": "User address"
        }
      },
      "cleanOrders(address)": {
        "details": "The order list per user is not updated in real-time when an order is filled. This function removes the filled order from that order list per user to reduce gas costs for calculating if the collateral is enough or not.",
        "params": {
          "_user": "User address"
        }
      },
      "createOrder(uint8,address,uint256,uint256)": {
        "params": {
          "_amount": "Amount of funds the maker wants to borrow/lend",
          "_side": "Order position type, Borrow or Lend",
          "_unitPrice": "Amount of unit price taker wish to borrow/lend",
          "_user": "User's address"
        }
      },
      "getActiveBorrowOrderIds(address)": {
        "params": {
          "_user": "User's address"
        }
      },
      "getActiveLendOrderIds(address)": {
        "params": {
          "_user": "User's address"
        }
      },
      "getBorrowOrderBook(uint256)": {
        "params": {
          "_limit": "Max limit to get unit prices"
        },
        "returns": {
          "unitPrices": "The array of borrow unit prices"
        }
      },
      "getBorrowUnitPrice()": {
        "returns": {
          "_0": "The highest borrow price per future value"
        }
      },
      "getCurrency()": {
        "returns": {
          "currency": "The market currency"
        }
      },
      "getLendOrderBook(uint256)": {
        "params": {
          "_limit": "Max limit to get unit prices"
        },
        "returns": {
          "unitPrices": "The array of lending unit prices"
        }
      },
      "getLendUnitPrice()": {
        "returns": {
          "_0": "The lowest lend price per future value"
        }
      },
      "getMarket()": {
        "returns": {
          "market": "The market data"
        }
      },
      "getMaturity()": {
        "returns": {
          "maturity": "The market maturity"
        }
      },
      "getMidUnitPrice()": {
        "returns": {
          "_0": "The mid price per future value"
        }
      },
      "getOrder(uint48)": {
        "params": {
          "_orderId": "The market order id"
        },
        "returns": {
          "amount": "Order amount",
          "maker": "The order maker",
          "maturity": "The maturity of the selected order",
          "side": "Order position type, Borrow or Lend",
          "timestamp": "Timestamp when the order was created",
          "unitPrice": "Amount of interest unit price"
        }
      },
      "getTotalAmountFromBorrowOrders(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "activeAmount": "The total amount of active order on the order book",
          "inactiveAmount": "The total amount of inactive orders filled on the order book",
          "inactiveFutureValue": "The total future value amount of inactive orders filled on the order book",
          "maturity": "The maturity of market that orders were placed."
        }
      },
      "getTotalAmountFromLendOrders(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "activeAmount": "The total amount of active order on the order book",
          "inactiveAmount": "The total amount of inactive orders filled on the order book",
          "inactiveFutureValue": "The total future value amount of inactive orders filled on the order book",
          "maturity": "The maturity of market that orders were placed."
        }
      },
      "initialize(address,bytes32,uint256,uint256)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController.",
        "params": {
          "_ccy": "The main currency for the order book",
          "_genesisDate": "The initial date when the first market open",
          "_maturity": "The initial maturity of the market",
          "_resolver": "The address of the Address Resolver contract"
        }
      },
      "isMatured()": {
        "returns": {
          "_0": "The boolean if the market is matured or not"
        }
      },
      "isOpened()": {
        "returns": {
          "_0": "The boolean if the market is opened or not"
        }
      },
      "openMarket(uint256)": {
        "params": {
          "_maturity": "The new maturity"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "requiredContracts()": {
        "details": "The contract name list is in `./libraries/Contracts.sol`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptedContracts()": {
        "notice": "Returns contract names that can call this contract."
      },
      "cancelOrder(address,uint48)": {
        "notice": "Cancels the order."
      },
      "cleanOrders(address)": {
        "notice": "Cleans own orders to remove order ids that are already filled on the order book."
      },
      "createOrder(uint8,address,uint256,uint256)": {
        "notice": "Creates the order. Takes the order if the order is matched, and places new order if not match it."
      },
      "getActiveBorrowOrderIds(address)": {
        "notice": "Gets the order ids of active borrowing order on the order book"
      },
      "getActiveLendOrderIds(address)": {
        "notice": "Gets the order ids of active lending order on the order book"
      },
      "getBorrowOrderBook(uint256)": {
        "notice": "Gets the order book of borrow."
      },
      "getBorrowUnitPrice()": {
        "notice": "Gets the highest borrow price per future value."
      },
      "getCurrency()": {
        "notice": "Gets the market currency."
      },
      "getLendOrderBook(uint256)": {
        "notice": "Gets the order book of lend."
      },
      "getLendUnitPrice()": {
        "notice": "Gets the lowest lend price per future value."
      },
      "getMarket()": {
        "notice": "Gets the market data."
      },
      "getMaturity()": {
        "notice": "Gets the current market maturity."
      },
      "getMidUnitPrice()": {
        "notice": "Gets the mid price per future value."
      },
      "getOrder(uint48)": {
        "notice": "Gets the market order from the order book."
      },
      "getTotalAmountFromBorrowOrders(address)": {
        "notice": "Calculates and gets the active and inactive amounts from the user orders of borrowing deals."
      },
      "getTotalAmountFromLendOrders(address)": {
        "notice": "Calculates and gets the active and inactive amounts from the user orders of lending deals."
      },
      "initialize(address,bytes32,uint256,uint256)": {
        "notice": "Initializes the contract."
      },
      "isMatured()": {
        "notice": "Gets if the market is matured."
      },
      "isOpened()": {
        "notice": "Gets if the market is opened."
      },
      "openMarket(uint256)": {
        "notice": "Opens market"
      },
      "pauseMarket()": {
        "notice": "Pauses the lending market."
      },
      "requiredContracts()": {
        "notice": "Returns the contract names used in this contract."
      },
      "unpauseMarket()": {
        "notice": "Unpauses the lending market."
      }
    },
    "notice": "Implements the module that allows lending market participants to create/cancel market orders, and also provides a future value calculation module. For updates, this contract is basically called from `LendingMarketController.sol`instead of being called \\ directly by the user.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 952,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 790,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "_initialized",
        "offset": 1,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 793,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "_initializing",
        "offset": 2,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}