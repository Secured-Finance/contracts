{
  "address": "0xeBc1C80450A219909f543ee350c67BfDdAb728d6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateActualPresentValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "presentValue",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateActualPresentValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "totalPresentValue",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateBorrowedFundsFromOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "workingOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateBorrowedFundsFromOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalWorkingOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDebtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrowedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "workingLendOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "workingBorrowOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateLentFundsFromOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalWorkingOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLentAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateLentFundsFromOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "workingOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lentAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateTotalFundsInETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalWorkingLendOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCollateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalWorkingBorrowOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDebtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrowedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getFutureValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x397ef2716ac96fbf9ff9c9597ab69b8903ec12bd7ce8d22fd4a86053bd82cb06",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0xeBc1C80450A219909f543ee350c67BfDdAb728d6",
    "transactionIndex": 96,
    "gasUsed": "2012009",
    "logsBloom": "0x
    "blockHash": "0x381bc0c1acde46eb8827b44a0856299986acbe883cd827a6fc6fb710d76eada9",
    "transactionHash": "0x397ef2716ac96fbf9ff9c9597ab69b8903ec12bd7ce8d22fd4a86053bd82cb06",
    "logs": [],
    "blockNumber": 8098606,
    "cumulativeGasUsed": "15120635",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3c53353d59297dc150ed95b30db9a5aa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateActualPresentValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"presentValue\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateActualPresentValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"totalPresentValue\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateBorrowedFundsFromOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"workingOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateBorrowedFundsFromOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalWorkingOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"workingLendOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"workingBorrowOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateLentFundsFromOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalWorkingOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLentAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateLentFundsFromOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"workingOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lentAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateTotalFundsInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalWorkingLendOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWorkingBorrowOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getFutureValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/FundCalculationLogic.sol\":\"FundCalculationLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IBeaconProxyController {\\n    event BeaconProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function deployFutureValueVault() external returns (address futureValueVault);\\n\\n    function deployLendingMarket(\\n        bytes32 _ccy,\\n        uint256 _genesisDate,\\n        uint256 _maturity\\n    ) external returns (address market);\\n}\\n\",\"keccak256\":\"0xc92a3f5ea6c065590788e5d3d7f259790c4f403e8f50af20ff1ea633badfd8e5\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Currency} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event AddSupportCurrency(bytes32 indexed ccy, string name, uint256 haircut);\\n    event UpdateSupportCurrency(bytes32 indexed ccy, bool isSupported);\\n\\n    event UpdateHaircut(bytes32 indexed ccy, uint256 haircut);\\n\\n    event AddPriceFeed(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n    event RemovePriceFeed(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256 amount);\\n\\n    function convertToETH(bytes32 _ccy, int256 _amount) external view returns (int256 amount);\\n\\n    function convertToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getCurrency(bytes32) external view returns (Currency memory);\\n\\n    function getEthDecimals(bytes32) external view returns (uint8);\\n\\n    function getUsdDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        address _ethPriceFeed,\\n        uint256 _haircut\\n    ) external;\\n\\n    function updateHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported) external;\\n}\\n\",\"keccak256\":\"0x67bdb82d0d6a1c353698a87f2bd6bc8aa9635dd8502ecdab420d1b7d2c567d23\",\"license\":\"MIT\"},\"contracts/interfaces/IFutureValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IFutureValueVault {\\n    event Transfer(address indexed from, address indexed to, int256 value);\\n\\n    function getTotalLendingSupply(uint256 _maturity) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(uint256 _maturity) external view returns (uint256);\\n\\n    function getFutureValue(address _user)\\n        external\\n        view\\n        returns (int256 futureValue, uint256 maturity);\\n\\n    function hasFutureValueInPastMaturity(address _user, uint256 _maturity)\\n        external\\n        view\\n        returns (bool);\\n\\n    function addLendFutureValue(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _maturity\\n    ) external returns (bool);\\n\\n    function addBorrowFutureValue(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _maturity\\n    ) external returns (bool);\\n\\n    function removeFutureValue(address _user, uint256 _maturity)\\n        external\\n        returns (\\n            int256 removedAmount,\\n            int256 currentAmount,\\n            uint256 maturity\\n        );\\n}\\n\",\"keccak256\":\"0xb1b5c4dc86b463b0952f2c902a5bbe0dbeb83df579a02a3f34d51d74e28f36bd\",\"license\":\"MIT\"},\"contracts/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {MaturityUnitPrice} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\\n    event CompoundFactorUpdated(\\n        bytes32 indexed ccy,\\n        uint256 compoundFactor,\\n        uint256 unitPrice,\\n        uint256 currentMaturity,\\n        uint256 previousMaturity\\n    );\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getMaturityUnitPrice(bytes32 ccy, uint256 maturity)\\n        external\\n        view\\n        returns (MaturityUnitPrice memory);\\n\\n    function getGenesisValueInFutureValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function registerCurrency(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor\\n    ) external;\\n\\n    function updateCompoundFactor(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice\\n    ) external;\\n\\n    function addGenesisValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x02169abaefd58d0a91ab1877a9adaba8928645ced58c13aefcff2cf7029770f2\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport {MarketOrder} from \\\"../storages/LendingMarketStorage.sol\\\";\\n\\ninterface ILendingMarket {\\n    event CancelOrder(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event MakeOrder(\\n        uint48 orderId,\\n        uint48 originalOrderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event TakeOrders(\\n        address indexed taker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 filledAmount,\\n        uint256 unitPrice,\\n        uint256 filledFutureValue\\n    );\\n\\n    event CleanOrders(\\n        uint48[] orderIds,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 maturity\\n    );\\n\\n    event OpenMarket(uint256 maturity, uint256 prevMaturity);\\n\\n    struct Market {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        uint256 genesisDate;\\n        uint256 borrowUnitPrice;\\n        uint256 lendUnitPrice;\\n        uint256 midUnitPrice;\\n    }\\n\\n    function getMarket() external view returns (Market memory);\\n\\n    function getBorrowUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getLendUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getMidUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getBorrowOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturity() external view returns (uint256);\\n\\n    function getCurrency() external view returns (bytes32);\\n\\n    function isMatured() external view returns (bool);\\n\\n    function isOpened() external view returns (bool);\\n\\n    function getOrder(uint48 _orderId)\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        );\\n\\n    function getTotalAmountFromLendOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getTotalAmountFromBorrowOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getActiveLendOrderIds(address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds);\\n\\n    function getActiveBorrowOrderIds(address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds);\\n\\n    function estimateFilledAmount(ProtocolTypes.Side _side, uint256 _futureValue)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function openMarket(uint256 maturity) external returns (uint256);\\n\\n    function cancelOrder(address user, uint48 orderId)\\n        external\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        );\\n\\n    function cleanOrders(address _user)\\n        external\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        );\\n\\n    function createOrder(\\n        ProtocolTypes.Side side,\\n        address account,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        bool ignoreRemainingAmount\\n    ) external returns (uint256 executedRate, uint256 remainingAmount);\\n\\n    function pauseMarket() external;\\n\\n    function unpauseMarket() external;\\n}\\n\",\"keccak256\":\"0xdaddf47c580c339bc1ffe7cb8f2990b1d93c0831b896d1d2ce18d56473b3a821\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ILendingMarketController {\\n    event CreateLendingMarket(\\n        bytes32 indexed ccy,\\n        address indexed marketAddr,\\n        address futureValueVault,\\n        uint256 index,\\n        uint256 maturity\\n    );\\n    event RotateLendingMarkets(bytes32 ccy, uint256 oldMaturity, uint256 newMaturity);\\n    event PlaceOrder(\\n        address indexed maker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event FillOrder(\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        uint256 filledFutureValue\\n    );\\n    event FillOrdersAsync(\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 filledFutureValue\\n    );\\n    event CancelOrder(\\n        uint48 orderId,\\n        address indexed maker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event Liquidate(\\n        address indexed user,\\n        bytes32 collateralCcy,\\n        bytes32 indexed debtCcy,\\n        uint256 indexed debtMaturity,\\n        uint256 amount\\n    );\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarkets(bytes32 ccy) external view returns (address[] memory);\\n\\n    function getLendingMarket(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getBorrowUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getLendUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getMidUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getBorrowOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getUsedCurrencies(address _user) external view returns (bytes32[] memory);\\n\\n    function getPresentValue(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) external view returns (int256 presentValue);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInETH(address user)\\n        external\\n        view\\n        returns (int256 totalPresentValue);\\n\\n    function calculateLentFundsFromOrders(bytes32 _ccy, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 workingOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 lentAmount\\n        );\\n\\n    function calculateBorrowedFundsFromOrders(bytes32 _ccy, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 workingOrdersAmount,\\n            uint256 debtAmount,\\n            uint256 borrowedAmount\\n        );\\n\\n    function calculateFunds(bytes32 _ccy, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 workingLendOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 collateralAmount,\\n            uint256 lentAmount,\\n            uint256 workingBorrowOrdersAmount,\\n            uint256 debtAmount,\\n            uint256 borrowedAmount\\n        );\\n\\n    function calculateTotalFundsInETH(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 totalWorkingLendOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalCollateralAmount,\\n            uint256 totalLentAmount,\\n            uint256 totalWorkingBorrowOrdersAmount,\\n            uint256 totalDebtAmount,\\n            uint256 totalBorrowedAmount\\n        );\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor\\n    ) external;\\n\\n    function createLendingMarket(bytes32 ccy)\\n        external\\n        returns (address market, address futureValue);\\n\\n    function createOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndCreateOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function createLendOrderWithETH(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function depositAndCreateLendOrderWithETH(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function cancelOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint48 orderId\\n    ) external returns (bool);\\n\\n    function rotateLendingMarkets(bytes32 ccy) external;\\n\\n    function pauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function cleanAllOrders(address user) external;\\n\\n    function cleanOrders(bytes32 _ccy, address _user) external;\\n}\\n\",\"keccak256\":\"0xf24a434132eed814fda91989878cb1fbb05c8585cc490192ffd023cda323b933\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ITokenVault {\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event RegisterCurrency(bytes32 ccy, address tokenAddress);\\n    event Swap(\\n        address indexed user,\\n        bytes32 ccyIn,\\n        bytes32 ccyOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    function isCovered(\\n        address user,\\n        bytes32 ccy,\\n        uint256 unsettledExp,\\n        ProtocolTypes.Side unsettledOrderSide\\n    ) external view returns (bool);\\n\\n    function isCovered(address user) external view returns (bool);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getTokenAddress(bytes32 ccy) external view returns (address);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256 maxWithdraw);\\n\\n    function getCoverage(address user) external view returns (uint256 coverage);\\n\\n    function getUnusedCollateral(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address party) external view returns (uint256);\\n\\n    function getLiquidationAmount(address user) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getLiquidationThresholdRate() external view returns (uint256 liquidationThresholdRate);\\n\\n    function getUniswapRouter() external view returns (address uniswapRouter);\\n\\n    function setCollateralParameters(uint256 liquidationThresholdRate, address uniswapRouter)\\n        external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositFrom(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function removeCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function swapCollateral(\\n        address user,\\n        bytes32 ccyIn,\\n        bytes32 ccyOut,\\n        uint256 amountInMax,\\n        uint256 amountOut,\\n        uint24 poolFee\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x63953ef9dadcb6f2b0f3a50d45fb0285ee11b0476007b6e56b939cfe85d49843\",\"license\":\"MIT\"},\"contracts/libraries/AddressResolverLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/MixinAddressResolverStorage.sol\\\";\\n\\nlibrary AddressResolverLib {\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0xff232a86d6dbf9d398d589bb0ee264f65720a5d257f11a14f40641e2f8f62422\",\"license\":\"MIT\"},\"contracts/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE_VAULT = \\\"FutureValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0x49a27b1b2f9cb72c16a7a9066a3df4c5258738c5e0b40d2996e78b29130113c1\",\"license\":\"MIT\"},\"contracts/libraries/FundCalculationLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n// interfaces\\nimport {ILendingMarket} from \\\"../interfaces/ILendingMarket.sol\\\";\\nimport {IFutureValueVault} from \\\"../interfaces/IFutureValueVault.sol\\\";\\n// libraries\\nimport {AddressResolverLib} from \\\"./AddressResolverLib.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\n// storages\\nimport {LendingMarketControllerStorage as Storage} from \\\"../storages/LendingMarketControllerStorage.sol\\\";\\n\\nlibrary FundCalculationLogic {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    struct CalculatedAmountVars {\\n        uint256 debtFVAmount;\\n        uint256 debtPVAmount;\\n        uint256 estimatedDebtPVAmount;\\n        uint256 liquidationPVAmount;\\n    }\\n\\n    function convertToLiquidationAmountFromCollateral(\\n        bytes32 _collateralCcy,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity,\\n        address _user,\\n        uint24 _poolFee\\n    ) public returns (uint256) {\\n        CalculatedAmountVars memory vars;\\n\\n        uint256 liquidationPVAmountInETH = AddressResolverLib.tokenVault().getLiquidationAmount(\\n            _user\\n        );\\n        require(liquidationPVAmountInETH != 0, \\\"User has enough collateral\\\");\\n\\n        uint256 depositAmount = AddressResolverLib.tokenVault().getDepositAmount(\\n            _user,\\n            _collateralCcy\\n        );\\n        require(depositAmount != 0, \\\"No collateral in the selected currency\\\");\\n\\n        (int256 futureValueAmount, uint256 fvMaturity) = getFutureValue(\\n            _debtCcy,\\n            _debtMaturity,\\n            _user\\n        );\\n        require(futureValueAmount < 0, \\\"No debt in the selected maturity\\\");\\n        require(fvMaturity == _debtMaturity, \\\"Need to clear orders first\\\");\\n\\n        vars.debtFVAmount = uint256(-futureValueAmount);\\n        vars.debtPVAmount = uint256(\\n            _calculatePVFromFVInMaturity(\\n                _debtCcy,\\n                _debtMaturity,\\n                -futureValueAmount,\\n                Storage.slot().maturityLendingMarkets[_debtCcy][_debtMaturity]\\n            )\\n        );\\n\\n        vars.liquidationPVAmount = AddressResolverLib.currencyController().convertFromETH(\\n            _debtCcy,\\n            liquidationPVAmountInETH\\n        );\\n\\n        // If the debt amount is less than the liquidation amount, the debt amount is used as the liquidation amount.\\n        // In that case, the actual liquidation ratio is under the liquidation threshold ratio.\\n        vars.liquidationPVAmount = vars.liquidationPVAmount > vars.debtPVAmount\\n            ? vars.debtPVAmount\\n            : vars.liquidationPVAmount;\\n\\n        // Swap collateral from deposited currency to debt currency using Uniswap.\\n        // This swapped collateral is used to unwind the debt.\\n        AddressResolverLib.tokenVault().swapCollateral(\\n            _user,\\n            _collateralCcy,\\n            _debtCcy,\\n            depositAmount,\\n            vars.liquidationPVAmount,\\n            _poolFee\\n        );\\n\\n        // Estimate the filled amount from actual orders in the order book using the future value of user debt.\\n        // If the estimated amount is less than the liquidation amount, the estimated amount is used as\\n        // the liquidation amount because the user has only the original amount of the estimation as collateral.\\n        vars.estimatedDebtPVAmount = ILendingMarket(\\n            Storage.slot().maturityLendingMarkets[_debtCcy][_debtMaturity]\\n        ).estimateFilledAmount(ProtocolTypes.Side.LEND, vars.debtFVAmount);\\n\\n        return\\n            vars.liquidationPVAmount > vars.estimatedDebtPVAmount\\n                ? vars.estimatedDebtPVAmount\\n                : vars.liquidationPVAmount;\\n    }\\n\\n    function getFutureValue(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) public view returns (int256 amount, uint256 maturity) {\\n        address market = Storage.slot().maturityLendingMarkets[_ccy][_maturity];\\n\\n        (amount, maturity) = IFutureValueVault(Storage.slot().futureValueVaults[_ccy][market])\\n            .getFutureValue(_user);\\n\\n        // Add PV from Genesis Value Vault if the market is nearest market.\\n        if (market == Storage.slot().lendingMarkets[_ccy][0]) {\\n            amount += AddressResolverLib.genesisValueVault().getGenesisValueInFutureValue(\\n                _ccy,\\n                _user\\n            );\\n        }\\n    }\\n\\n    function calculateActualPresentValue(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) public view returns (int256 presentValue) {\\n        address market = Storage.slot().maturityLendingMarkets[_ccy][_maturity];\\n        bool isDefaultMarket = market == Storage.slot().lendingMarkets[_ccy][0];\\n\\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\\n            address currentMarket = Storage.slot().lendingMarkets[_ccy][i];\\n            uint256 currentMaturity = ILendingMarket(currentMarket).getMaturity();\\n\\n            if (isDefaultMarket || currentMarket == market) {\\n                // Get PV from Future Value Vault\\n                (int256 futureValueInMaturity, uint256 fvMaturity) = IFutureValueVault(\\n                    Storage.slot().futureValueVaults[_ccy][currentMarket]\\n                ).getFutureValue(_user);\\n\\n                if (\\n                    (isDefaultMarket && (i == 0 || currentMaturity != fvMaturity)) ||\\n                    (!isDefaultMarket && currentMaturity == fvMaturity)\\n                ) {\\n                    presentValue += _calculatePVFromFVInMaturity(\\n                        _ccy,\\n                        fvMaturity,\\n                        futureValueInMaturity,\\n                        currentMarket\\n                    );\\n                }\\n\\n                // Get PV from inactive borrow orders\\n                (, , uint256 borrowFVInMaturity, uint256 borrowOrdersMaturity) = ILendingMarket(\\n                    currentMarket\\n                ).getTotalAmountFromBorrowOrders(_user);\\n\\n                if (\\n                    (isDefaultMarket && (i == 0 || currentMaturity != borrowOrdersMaturity)) ||\\n                    (!isDefaultMarket && currentMaturity == borrowOrdersMaturity)\\n                ) {\\n                    presentValue -= _calculatePVFromFVInMaturity(\\n                        _ccy,\\n                        borrowOrdersMaturity,\\n                        int256(borrowFVInMaturity),\\n                        currentMarket\\n                    );\\n                }\\n\\n                // Get PV from inactive lend orders\\n                (, , uint256 lendFVInMaturity, uint256 lendOrdersMaturity) = ILendingMarket(\\n                    currentMarket\\n                ).getTotalAmountFromLendOrders(_user);\\n\\n                if (\\n                    (isDefaultMarket && (i == 0 || currentMaturity != lendOrdersMaturity)) ||\\n                    (!isDefaultMarket && currentMaturity == lendOrdersMaturity)\\n                ) {\\n                    presentValue += _calculatePVFromFVInMaturity(\\n                        _ccy,\\n                        lendOrdersMaturity,\\n                        int256(lendFVInMaturity),\\n                        currentMarket\\n                    );\\n                }\\n            }\\n        }\\n\\n        // Add PV from Genesis Value Vault if the market is that the lending position is rolled to.\\n        if (isDefaultMarket) {\\n            presentValue += _calculatePVFromFV(\\n                AddressResolverLib.genesisValueVault().getGenesisValueInFutureValue(_ccy, _user),\\n                ILendingMarket(Storage.slot().lendingMarkets[_ccy][0]).getMidUnitPrice()\\n            );\\n        }\\n    }\\n\\n    function calculateActualPresentValue(bytes32 _ccy, address _user)\\n        public\\n        view\\n        returns (int256 totalPresentValue)\\n    {\\n        // Get PV from Future Value Vault and Genesis Value Vault.\\n        totalPresentValue = _getTotalPresentValue(_ccy, _user);\\n\\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\\n            address market = Storage.slot().lendingMarkets[_ccy][i];\\n\\n            // Get PV from inactive borrow orders\\n            (, , uint256 borrowFVInMaturity, uint256 borrowOrdersMaturity) = ILendingMarket(market)\\n                .getTotalAmountFromBorrowOrders(_user);\\n\\n            totalPresentValue -= _calculatePVFromFVInMaturity(\\n                _ccy,\\n                borrowOrdersMaturity,\\n                int256(borrowFVInMaturity),\\n                market\\n            );\\n\\n            // Get PV from inactive lend orders\\n            (, , uint256 lendFVInMaturity, uint256 lendOrdersMaturity) = ILendingMarket(market)\\n                .getTotalAmountFromLendOrders(_user);\\n\\n            totalPresentValue += _calculatePVFromFVInMaturity(\\n                _ccy,\\n                lendOrdersMaturity,\\n                int256(lendFVInMaturity),\\n                market\\n            );\\n        }\\n    }\\n\\n    function calculateLentFundsFromOrders(bytes32 _ccy, address _user)\\n        public\\n        view\\n        returns (\\n            uint256 totalWorkingOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalLentAmount\\n        )\\n    {\\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\\n            (\\n                uint256 workingOrdersAmount,\\n                uint256 claimableAmount,\\n                uint256 lentAmount\\n            ) = _calculateLentFundsFromOrders(_ccy, Storage.slot().lendingMarkets[_ccy][i], _user);\\n\\n            totalWorkingOrdersAmount += workingOrdersAmount;\\n            totalClaimableAmount += claimableAmount;\\n            totalLentAmount += lentAmount;\\n        }\\n    }\\n\\n    function calculateBorrowedFundsFromOrders(bytes32 _ccy, address _user)\\n        public\\n        view\\n        returns (\\n            uint256 totalWorkingOrdersAmount,\\n            uint256 totalDebtAmount,\\n            uint256 totalBorrowedAmount\\n        )\\n    {\\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\\n            (\\n                uint256 workingOrdersAmount,\\n                uint256 debtAmount,\\n                uint256 borrowedAmount\\n            ) = _calculateBorrowedFundsFromOrders(\\n                    _ccy,\\n                    Storage.slot().lendingMarkets[_ccy][i],\\n                    _user\\n                );\\n\\n            totalWorkingOrdersAmount += workingOrdersAmount;\\n            totalDebtAmount += debtAmount;\\n            totalBorrowedAmount += borrowedAmount;\\n        }\\n    }\\n\\n    function calculateLentFundsFromOrders(\\n        bytes32 _ccy,\\n        address _market,\\n        address _user\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 workingOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 lentAmount\\n        )\\n    {\\n        return _calculateLentFundsFromOrders(_ccy, _market, _user);\\n    }\\n\\n    function calculateBorrowedFundsFromOrders(\\n        bytes32 _ccy,\\n        address _market,\\n        address _user\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 workingOrdersAmount,\\n            uint256 debtAmount,\\n            uint256 borrowedAmount\\n        )\\n    {\\n        return _calculateBorrowedFundsFromOrders(_ccy, _market, _user);\\n    }\\n\\n    function calculateFunds(bytes32 _ccy, address _user)\\n        public\\n        view\\n        returns (\\n            uint256 workingLendOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 collateralAmount,\\n            uint256 lentAmount,\\n            uint256 workingBorrowOrdersAmount,\\n            uint256 debtAmount,\\n            uint256 borrowedAmount\\n        )\\n    {\\n        (workingLendOrdersAmount, claimableAmount, lentAmount) = calculateLentFundsFromOrders(\\n            _ccy,\\n            _user\\n        );\\n        (workingBorrowOrdersAmount, debtAmount, borrowedAmount) = calculateBorrowedFundsFromOrders(\\n            _ccy,\\n            _user\\n        );\\n        collateralAmount = claimableAmount;\\n\\n        // Calculate total present value from Future Value Vault and Genesis Value Vault.\\n        int256 totalPresentValue = _getTotalPresentValue(_ccy, _user);\\n        if (totalPresentValue >= 0) {\\n            // Add to claimableAmount\\n            claimableAmount += uint256(totalPresentValue);\\n            uint256 haircut = AddressResolverLib.currencyController().getHaircut(_ccy);\\n            collateralAmount += (uint256(totalPresentValue) * haircut) / ProtocolTypes.PCT_DIGIT;\\n        } else {\\n            // Add to debtAmount\\n            debtAmount += uint256(-totalPresentValue);\\n        }\\n    }\\n\\n    function calculateTotalFundsInETH(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 totalWorkingLendOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalCollateralAmount,\\n            uint256 totalLentAmount,\\n            uint256 totalWorkingBorrowOrdersAmount,\\n            uint256 totalDebtAmount,\\n            uint256 totalBorrowedAmount\\n        )\\n    {\\n        EnumerableSet.Bytes32Set storage currencySet = Storage.slot().usedCurrencies[_user];\\n\\n        // Calculate total funds from the user's order list\\n        for (uint256 i = 0; i < currencySet.length(); i++) {\\n            bytes32 ccy = currencySet.at(i);\\n            uint256[] memory amounts = new uint256[](7);\\n\\n            // 0: workingLendOrdersAmount\\n            // 1: claimableAmount\\n            // 2: collateralAmount\\n            // 3: lentAmount\\n            // 4: workingBorrowOrdersAmount\\n            // 5: debtAmount\\n            // 6: borrowedAmount\\n            (\\n                amounts[0],\\n                amounts[1],\\n                amounts[2],\\n                amounts[3],\\n                amounts[4],\\n                amounts[5],\\n                amounts[6]\\n            ) = calculateFunds(ccy, _user);\\n\\n            uint256[] memory amountsInETH = AddressResolverLib.currencyController().convertToETH(\\n                ccy,\\n                amounts\\n            );\\n\\n            totalWorkingLendOrdersAmount += amountsInETH[0];\\n            totalClaimableAmount += amountsInETH[1];\\n            totalCollateralAmount += amountsInETH[2];\\n            totalLentAmount += amountsInETH[3];\\n\\n            totalWorkingBorrowOrdersAmount += amountsInETH[4];\\n            totalDebtAmount += amountsInETH[5];\\n            totalBorrowedAmount += amountsInETH[6];\\n        }\\n    }\\n\\n    function _calculatePVFromFVInMaturity(\\n        bytes32 _ccy,\\n        uint256 maturity,\\n        int256 futureValueInMaturity,\\n        address lendingMarketInMaturity\\n    ) internal view returns (int256 totalPresentValue) {\\n        uint256 compoundFactorInMaturity = AddressResolverLib\\n            .genesisValueVault()\\n            .getMaturityUnitPrice(_ccy, maturity)\\n            .compoundFactor;\\n        int256 futureValue;\\n        uint256 unitPrice;\\n\\n        if (compoundFactorInMaturity == 0) {\\n            futureValue = futureValueInMaturity;\\n            unitPrice = ILendingMarket(lendingMarketInMaturity).getMidUnitPrice();\\n        } else {\\n            int256 genesisValue = AddressResolverLib.genesisValueVault().calculateGVFromFV(\\n                _ccy,\\n                maturity,\\n                futureValueInMaturity\\n            );\\n            futureValue = AddressResolverLib.genesisValueVault().calculateFVFromGV(\\n                _ccy,\\n                0,\\n                genesisValue\\n            );\\n            unitPrice = ILendingMarket(Storage.slot().lendingMarkets[_ccy][0]).getMidUnitPrice();\\n        }\\n\\n        return _calculatePVFromFV(futureValue, unitPrice);\\n    }\\n\\n    function _calculatePVFromFV(int256 _futureValue, uint256 _unitPrice)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        // NOTE: The formula is: futureValue = presentValue / unitPrice.\\n        return (_futureValue * int256(_unitPrice)) / int256(ProtocolTypes.PRICE_DIGIT);\\n    }\\n\\n    function _getTotalPresentValue(bytes32 _ccy, address _user)\\n        internal\\n        view\\n        returns (int256 totalPresentValue)\\n    {\\n        // Get PV from Future Value Vault\\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\\n            address marketAddr = Storage.slot().lendingMarkets[_ccy][i];\\n            (int256 futureValueInMaturity, uint256 maturity) = IFutureValueVault(\\n                Storage.slot().futureValueVaults[_ccy][marketAddr]\\n            ).getFutureValue(_user);\\n\\n            totalPresentValue += _calculatePVFromFVInMaturity(\\n                _ccy,\\n                maturity,\\n                futureValueInMaturity,\\n                Storage.slot().lendingMarkets[_ccy][i]\\n            );\\n        }\\n\\n        // Get PV from Genesis Value Vault\\n        totalPresentValue += _calculatePVFromFV(\\n            AddressResolverLib.genesisValueVault().getGenesisValueInFutureValue(_ccy, _user),\\n            ILendingMarket(Storage.slot().lendingMarkets[_ccy][0]).getMidUnitPrice()\\n        );\\n    }\\n\\n    function _calculateLentFundsFromOrders(\\n        bytes32 _ccy,\\n        address _market,\\n        address _user\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 workingOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 lentAmount\\n        )\\n    {\\n        (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValueInMaturity,\\n            uint256 maturity\\n        ) = ILendingMarket(_market).getTotalAmountFromLendOrders(_user);\\n\\n        workingOrdersAmount = activeAmount;\\n        claimableAmount = uint256(\\n            _calculatePVFromFVInMaturity(\\n                _ccy,\\n                maturity,\\n                int256(inactiveFutureValueInMaturity),\\n                _market\\n            )\\n        );\\n        lentAmount = inactiveAmount;\\n    }\\n\\n    function _calculateBorrowedFundsFromOrders(\\n        bytes32 _ccy,\\n        address _market,\\n        address _user\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 workingOrdersAmount,\\n            uint256 debtAmount,\\n            uint256 borrowedAmount\\n        )\\n    {\\n        (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValueInMaturity,\\n            uint256 maturity\\n        ) = ILendingMarket(_market).getTotalAmountFromBorrowOrders(_user);\\n\\n        workingOrdersAmount = activeAmount;\\n        debtAmount = uint256(\\n            _calculatePVFromFVInMaturity(\\n                _ccy,\\n                maturity,\\n                int256(inactiveFutureValueInMaturity),\\n                _market\\n            )\\n        );\\n        borrowedAmount = inactiveAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xb9196e02512e035b43aa47a188d2434e6e16d84ddf91bd51dfafad3edcaee6a8\",\"license\":\"MIT\"},\"contracts/libraries/HitchensOrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// types\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\n\\nstruct RemainingOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 unitPrice;\\n}\\n\\nstruct OrderItem {\\n    uint48 orderId;\\n    uint48 next;\\n    uint48 prev;\\n    address maker;\\n    uint256 timestamp;\\n    uint256 amount;\\n}\\n\\n/**\\n * @notice HitchensOrderStatisticsTreeLib is a Red-Black Tree binary search library\\n * based on the following library that is extended to manage order data.\\n *\\n * https://github.com/rob-Hitchens/OrderStatisticsTree\\n *\\n */\\nlibrary HitchensOrderStatisticsTreeLib {\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint48 head;\\n        uint48 tail;\\n        uint256 orderCounter;\\n        uint256 orderTotalAmount;\\n        mapping(uint256 => OrderItem) orders;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].right != EMPTY) {\\n            _value = self.nodes[_value].right;\\n        }\\n    }\\n\\n    function next(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(401) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].right != EMPTY) {\\n            _cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(402) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].left != EMPTY) {\\n            _cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint256 value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        // if (self.nodes[value].parent != EMPTY) return true;\\n        uint256 cursor = value;\\n        while (self.nodes[cursor].parent != EMPTY) {\\n            uint256 parent = self.nodes[cursor].parent;\\n            if (self.nodes[parent].left != cursor && self.nodes[parent].right != cursor) {\\n                return false;\\n            }\\n            if (parent == self.root) {\\n                return true;\\n            }\\n            cursor = self.nodes[cursor].parent;\\n        }\\n        return false;\\n    }\\n\\n    function isActiveOrderId(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        return orderIdExists(self, value, orderId) && exists(self, value);\\n    }\\n\\n    function getNode(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n        return (\\n            gn.parent,\\n            gn.left,\\n            gn.right,\\n            gn.red,\\n            gn.head,\\n            gn.tail,\\n            gn.orderCounter,\\n            gn.orderTotalAmount\\n        );\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function getNodeTotalAmount(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint256 totalAmount)\\n    {\\n        return self.nodes[value].orderTotalAmount;\\n    }\\n\\n    function getNodeOrderIds(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint48[] memory orderIds)\\n    {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[gn.head];\\n        orderIds = new uint48[](gn.orderCounter);\\n\\n        for (uint256 i = 0; i < gn.orderCounter; i++) {\\n            orderIds[i] = order.orderId;\\n            order = gn.orders[order.next];\\n        }\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256 _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(405) - Value to insert cannot be zero\\\");\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                return;\\n            }\\n        }\\n\\n        Node storage nValue = self.nodes[value];\\n        // Update order info as a new one if there is already an old node\\n        if (\\n            self.root == EMPTY ||\\n            (self.nodes[cursor].left != value && self.nodes[cursor].right != value)\\n        ) {\\n            nValue.orderCounter = 0;\\n            nValue.orderTotalAmount = 0;\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        }\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(407) - Value to delete cannot be zero\\\");\\n        Node storage nValue = self.nodes[value];\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint256 a,\\n        uint256 b\\n    ) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    function estimateDroppedAmountFromLeft(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = first(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV) / cursorNodeAmountInFV;\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n    }\\n\\n    function estimateDroppedAmountFromRight(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = last(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV) / cursorNodeAmountInFV;\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n    }\\n\\n    function dropLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            RemainingOrder memory remainingOrder\\n        )\\n    {\\n        require(amount != EMPTY, \\\"OrderStatisticsTree(408) - Amount to drop cannot be zero\\\");\\n        uint256 value;\\n        uint256 cursor = first(self);\\n        uint256 lastNode = last(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor <= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (\\n            totalAmount < amount && cursor != EMPTY && (limitValue == 0 || cursor <= limitValue)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            uint256 filledAmount = cursorNodeAmount -\\n                (totalAmount > amount ? totalAmount - amount : 0);\\n            filledFutureValue += _calculateFutureValue(cursor, filledAmount);\\n\\n            cursor = next(self, cursor);\\n        }\\n\\n        if (totalAmount >= amount || value == limitValue) {\\n            if (totalAmount > amount) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                uint256 filledNodeAmount = cursorNodeAmount - (totalAmount - amount);\\n                remainingOrder = fillOrders(self, cursor, filledNodeAmount);\\n            }\\n\\n            self.nodes[cursor].left = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            while (parent != EMPTY) {\\n                if (parent > cursor) {\\n                    // Relink the nodes\\n                    if (self.nodes[cursor].parent != parent) {\\n                        self.nodes[cursor].parent = parent;\\n                        self.nodes[parent].left = cursor;\\n                    }\\n\\n                    cursor = parent;\\n                }\\n\\n                parent = self.nodes[parent].parent;\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        if (lastNode == value && self.nodes[lastNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value > self.root || (value == self.root && amount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        if (self.nodes[self.root].left == 0 && self.nodes[self.root].right != 0) {\\n            if (self.nodes[self.nodes[self.root].right].left != 0) {\\n                rotateRight(self, self.nodes[self.root].right);\\n            }\\n            rotateLeft(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function dropRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            RemainingOrder memory remainingOrder\\n        )\\n    {\\n        require(amount != EMPTY, \\\"OrderStatisticsTree(408) - Amount to drop cannot be zero\\\");\\n        uint256 value;\\n        uint256 cursor = last(self);\\n        uint256 firstNode = first(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor >= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (\\n            totalAmount < amount && cursor != EMPTY && (limitValue == 0 || cursor >= limitValue)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            uint256 filledAmount = cursorNodeAmount -\\n                (totalAmount > amount ? totalAmount - amount : 0);\\n            filledFutureValue += _calculateFutureValue(cursor, filledAmount);\\n\\n            cursor = prev(self, cursor);\\n        }\\n\\n        if (totalAmount >= amount || value == limitValue) {\\n            if (totalAmount > amount) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                uint256 filledNodeAmount = cursorNodeAmount - (totalAmount - amount);\\n                remainingOrder = fillOrders(self, cursor, filledNodeAmount);\\n            }\\n\\n            self.nodes[cursor].right = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            while (parent != EMPTY) {\\n                if (parent < cursor) {\\n                    // Relink the nodes\\n                    if (self.nodes[cursor].parent != parent) {\\n                        self.nodes[cursor].parent = parent;\\n                        self.nodes[parent].right = cursor;\\n                    }\\n\\n                    cursor = parent;\\n                }\\n\\n                parent = self.nodes[parent].parent;\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        if (firstNode == value && self.nodes[firstNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value < self.root || (value == self.root && amount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        if (self.nodes[self.root].right == 0 && self.nodes[self.root].left != 0) {\\n            if (self.nodes[self.nodes[self.root].left].right != 0) {\\n                rotateLeft(self, self.nodes[self.root].left);\\n            }\\n            rotateRight(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function getFutureValue(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (uint256) {\\n        return _calculateFutureValue(value, self.nodes[value].orders[orderId].amount);\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (OrderItem memory) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orders[orderId];\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function orderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        uint48 cursor = orderId;\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[cursor];\\n\\n        if (order.orderId != cursor) {\\n            return false;\\n        }\\n\\n        while (order.prev != EMPTY) {\\n            cursor = order.prev;\\n            order = gn.orders[cursor];\\n        }\\n\\n        return cursor == gn.head;\\n    }\\n\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount,\\n        bool isInterruption\\n    ) internal {\\n        require(amount > 0, \\\"Insufficient amount\\\");\\n        insert(self, value);\\n\\n        if (isInterruption) {\\n            addHead(self, value, orderId, user, amount);\\n        } else {\\n            addTail(self, value, orderId, user, amount);\\n        }\\n    }\\n\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        amount = _removeOrder(self, value, orderId);\\n        remove(self, value);\\n    }\\n\\n    /**\\n     * @dev Reduces order amount once market order taken.\\n     */\\n    function fillOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount\\n    ) internal returns (RemainingOrder memory remainingOrder) {\\n        Node storage gn = self.nodes[value];\\n\\n        require(\\n            gn.orderTotalAmount >= _amount,\\n            \\\"OrderStatisticsTree(410) - Amount to fill is insufficient\\\"\\n        );\\n\\n        uint256 remainingAmount = _amount;\\n        uint256 filledCount = 0;\\n        OrderItem memory currentOrder = gn.orders[gn.head];\\n        uint48 orderId = gn.head;\\n\\n        while (orderId != 0 && remainingAmount != 0) {\\n            currentOrder = gn.orders[orderId];\\n\\n            if (currentOrder.amount <= remainingAmount) {\\n                remainingAmount -= currentOrder.amount;\\n                orderId = currentOrder.next;\\n            } else {\\n                remainingOrder = RemainingOrder(\\n                    currentOrder.orderId,\\n                    currentOrder.maker,\\n                    currentOrder.amount - remainingAmount,\\n                    value\\n                );\\n                remainingAmount = 0;\\n            }\\n\\n            filledCount++;\\n        }\\n\\n        _dropOrders(self, value, currentOrder.orderId);\\n\\n        if (remainingOrder.amount > 0) {\\n            // NOTE: This order that the filled partially was dropped from a node, and the unfilled amount\\n            // will be inserted newly as a new orders.\\n            // However, that filled order amount is used when future value is calculated from inactive order.\\n            // For that calculation, this order amount needs to be updated by an actual filled amount at this point.\\n            OrderItem storage order = self.nodes[value].orders[currentOrder.orderId];\\n            order.amount -= remainingOrder.amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n        uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n        _link(self, _value, orderId, gn.head);\\n        _setHead(self, _value, orderId);\\n        if (gn.tail == 0) _setTail(self, _value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, _value, _orderId, _user, _amount);\\n        } else {\\n            uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n            _link(self, _value, gn.tail, orderId);\\n            _setTail(self, _value, orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint48) {\\n        Node storage gn = self.nodes[value];\\n        require(\\n            gn.orders[orderId].timestamp == 0,\\n            \\\"OrderStatisticsTree(409) - Order id already exist.\\\"\\n        );\\n\\n        gn.orderCounter += 1;\\n        gn.orderTotalAmount += amount;\\n        OrderItem memory order = OrderItem(orderId, 0, 0, user, block.timestamp, amount);\\n        gn.orders[orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the list.\\n     */\\n    function _removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n        gn.orderTotalAmount -= order.amount;\\n    }\\n\\n    /**\\n     * @dev Drop the OrderItems older than or equal `orderId` from the list\\n     */\\n    function _dropOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n        uint256 cursor = gn.head;\\n        uint256 removedCount = 1;\\n        uint256 removedAmount = gn.orders[cursor].amount;\\n\\n        while (cursor != orderId) {\\n            cursor = gn.orders[cursor].next;\\n            removedCount++;\\n            removedAmount += gn.orders[cursor].amount;\\n        }\\n\\n        if (gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        }\\n\\n        gn.orderCounter -= removedCount;\\n        gn.orderTotalAmount -= removedAmount;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 _prevId,\\n        uint48 _nextId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[_prevId].next = _nextId;\\n        gn.orders[_nextId].prev = _prevId;\\n    }\\n\\n    function _calculateFutureValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * ProtocolTypes.PRICE_DIGIT) / unitPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xe32c29c21e8197e9096eed0f7074dba3c9e396d4d3c997310cd3bf9fe6a0d53a\",\"license\":\"MIT\"},\"contracts/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nstruct Currency {\\n    bool isSupported;\\n    string name;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.currencyController\\\");\\n\\n    struct Storage {\\n        // Protocol currencies\\n        mapping(bytes32 => Currency) currencies;\\n        mapping(bytes32 => uint256) haircuts;\\n        // PriceFeed\\n        mapping(bytes32 => AggregatorV3Interface) usdPriceFeeds;\\n        mapping(bytes32 => AggregatorV3Interface) ethPriceFeeds;\\n        mapping(bytes32 => uint8) usdDecimals;\\n        mapping(bytes32 => uint8) ethDecimals;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0c9e9399e6f58e0702c8edcb6b58603d281668b10bf701b119911e24bba192b\",\"license\":\"MIT\"},\"contracts/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.genesisValueVault\\\");\\n\\n    struct Storage {\\n        mapping(bytes32 => bool) isRegisteredCurrency;\\n        mapping(bytes32 => uint256) initialCompoundFactors;\\n        mapping(bytes32 => uint256) compoundFactors;\\n        mapping(bytes32 => uint256) currentMaturity;\\n        mapping(bytes32 => uint8) decimals;\\n        // Mapping from user to balance per currency\\n        mapping(bytes32 => mapping(address => int256)) balances;\\n        mapping(bytes32 => uint256) totalLendingSupplies;\\n        mapping(bytes32 => uint256) totalBorrowingSupplies;\\n        // Mapping from maturity to rate per currency\\n        mapping(bytes32 => mapping(uint256 => MaturityUnitPrice)) maturityUnitPrices;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2715307f5a409405179faad8ce1f4a614f1b166bd46cf2fde96d1c90ea5cf4fd\",\"license\":\"MIT\"},\"contracts/storages/LendingMarketControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary LendingMarketControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarketController\\\");\\n\\n    struct Storage {\\n        // Mapping from currency to lending market contract addresses\\n        mapping(bytes32 => address[]) lendingMarkets;\\n        // Mapping from lending market contract address to future value vault contract address per currency\\n        mapping(bytes32 => mapping(address => address)) futureValueVaults;\\n        // Mapping from maturity to lending market contract address per currency\\n        mapping(bytes32 => mapping(uint256 => address)) maturityLendingMarkets;\\n        // Mapping from currency to genesis date in the lending market\\n        mapping(bytes32 => uint256) genesisDates;\\n        // Mapping from user to used currency\\n        mapping(address => EnumerableSet.Bytes32Set) usedCurrencies;\\n        // Mapping from user to active order existence per currency and maturity\\n        mapping(address => mapping(bytes32 => mapping(uint256 => bool))) activeOrderExistences;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7db4374c692b8be6a037527fc406cee1e40f086fd9a7f7d99b2237fbad78b329\",\"license\":\"MIT\"},\"contracts/storages/LendingMarketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport \\\"../libraries/HitchensOrderStatisticsTreeLib.sol\\\";\\n\\nstruct MarketOrder {\\n    ProtocolTypes.Side side;\\n    uint256 unitPrice; // in basis points\\n    uint256 maturity;\\n    uint256 timestamp;\\n}\\n\\nlibrary LendingMarketStorage {\\n    using HitchensOrderStatisticsTreeLib for HitchensOrderStatisticsTreeLib.Tree;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarket\\\");\\n\\n    struct Storage {\\n        uint48 lastOrderId;\\n        bytes32 ccy;\\n        uint256 genesisDate;\\n        uint256 maturity;\\n        // Mapping from user to active lend order ids\\n        mapping(address => uint48[]) activeLendOrderIds;\\n        // Mapping from user to active borrow order ids\\n        mapping(address => uint48[]) activeBorrowOrderIds;\\n        // Mapping from user to current maturity\\n        mapping(address => uint256) userCurrentMaturities;\\n        // Mapping from orderId to order\\n        mapping(uint256 => MarketOrder) orders;\\n        // Mapping from maturity to lending orders\\n        mapping(uint256 => HitchensOrderStatisticsTreeLib.Tree) lendOrders;\\n        // Mapping from maturity to borrowing orders\\n        mapping(uint256 => HitchensOrderStatisticsTreeLib.Tree) borrowOrders;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x04b080d246d43abd5cd7c970c3375a5a707587a58dc13d172c41a9aed97f76f3\",\"license\":\"MIT\"},\"contracts/storages/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.mixinAddressResolver\\\");\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 => address) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x852b885b6264a58930a0945c68842717e19f954eaefc0137235e6f263e17fa9d\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant PRICE_DIGIT = 10000; // price digit in the basis (10000 -> 1)\\n    uint256 public constant PCT_DIGIT = 10000; // percentage digit in the basis (10000 -> 100%)\\n\\n    uint256 internal constant DAYS_IN_YEAR = 365;\\n    uint256 internal constant SECONDS_IN_YEAR = 31557600;\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n}\\n\",\"keccak256\":\"0xfc44bd731aebae907269f73e2d828379e77253ecd21642a874ab2e4a4f763262\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61237261003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100a85760003560e01c806373bb3b091161007057806373bb3b091461017c5780637e6097151461018f57806385f33967146101a25780639d3fc35d146101b5578063e906c100146101c857600080fd5b80631ce4ded4146100ad5780632a69c6fc146100e05780633b22a4741461010e5780635c3477651461015657806371eb435314610169575b600080fd5b6100c06100bb366004611db0565b6101f0565b604080519384526020840192909252908201526060015b60405180910390f35b8180156100ec57600080fd5b506101006100fb366004611dec565b61020f565b6040519081526020016100d7565b61012161011c366004611e48565b610747565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016100d7565b610121610164366004611e63565b610a5f565b610100610177366004611e8f565b610b86565b6100c061018a366004611e63565b6110e6565b6100c061019d366004611db0565b6111a1565b6101006101b0366004611e63565b6111b1565b6100c06101c3366004611e63565b611371565b6101db6101d6366004611e8f565b611424565b604080519283526020830191909152016100d7565b60008060006102008686866115e6565b92509250925093509350939050565b600061023c6040518060800160405280600081526020016000815260200160008152602001600081525090565b60006102466116a5565b60405163afe8efcf60e01b81526001600160a01b038781166004830152919091169063afe8efcf9060240160206040518083038186803b15801561028957600080fd5b505afa15801561029d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c19190611ebb565b9050806103155760405162461bcd60e51b815260206004820152601a60248201527f557365722068617320656e6f75676820636f6c6c61746572616c00000000000060448201526064015b60405180910390fd5b600061031f6116a5565b604051630129e6bf60e11b81526001600160a01b038881166004830152602482018c90529190911690630253cd7e9060440160206040518083038186803b15801561036957600080fd5b505afa15801561037d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a19190611ebb565b9050806103ff5760405162461bcd60e51b815260206004820152602660248201527f4e6f20636f6c6c61746572616c20696e207468652073656c65637465642063756044820152657272656e637960d01b606482015260840161030c565b60008061040d8a8a8a611424565b91509150600082126104615760405162461bcd60e51b815260206004820181905260248201527f4e6f206465627420696e207468652073656c6563746564206d61747572697479604482015260640161030c565b8881146104b05760405162461bcd60e51b815260206004820152601a60248201527f4e65656420746f20636c656172206f7264657273206669727374000000000000604482015260640161030c565b6104b982611eea565b855261050f8a8a6104c985611eea565b6104d16116c2565b60020160008f815260200190815260200160002060008e815260200190815260200160002060009054906101000a90046001600160a01b03166116e6565b602086015261051c6119e4565b6040516306d062ad60e01b8152600481018c9052602481018690526001600160a01b0391909116906306d062ad9060440160206040518083038186803b15801561056557600080fd5b505afa158015610579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059d9190611ebb565b606086018190526020860151106105b85784606001516105be565b84602001515b60608601526105cb6116a5565b6060860151604051633655b42b60e01b81526001600160a01b038b81166004830152602482018f9052604482018e905260648201879052608482019290925262ffffff8a1660a4820152911690633655b42b9060c401602060405180830381600087803b15801561063b57600080fd5b505af115801561064f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106739190611ebb565b5061067c6116c2565b60008b8152600291909101602090815260408083208c84529091528082205487519151631e007d1d60e01b81526001600160a01b0390911692631e007d1d926106c792600401611f07565b60206040518083038186803b1580156106df57600080fd5b505afa1580156106f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107179190611ebb565b60408601819052606086015111610732578460600151610738565b84604001515b9b9a5050505050505050505050565b60008060008060008060008061075b6116c2565b6001600160a01b038a1660009081526004919091016020526040812091505b61078382611a04565b811015610a525760006107968383611a14565b6040805160078082526101008201909252919250600091906020820160e0803683370190505090506107c8828d610a5f565b876000815181106107db576107db611f49565b60200260200101886001815181106107f5576107f5611f49565b602002602001018960028151811061080f5761080f611f49565b602002602001018a60038151811061082957610829611f49565b602002602001018b60048151811061084357610843611f49565b602002602001018c60058151811061085d5761085d611f49565b602002602001018d60068151811061087757610877611f49565b602090810291909101019690965295909452949093529390529290529190525260006108a16119e4565b6001600160a01b031663939fe62284846040518363ffffffff1660e01b81526004016108ce929190611f5f565b60006040518083038186803b1580156108e657600080fd5b505afa1580156108fa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109229190810190611fde565b90508060008151811061093757610937611f49565b60200260200101518c61094a9190612078565b9b508060018151811061095f5761095f611f49565b60200260200101518b6109729190612078565b9a508060028151811061098757610987611f49565b60200260200101518a61099a9190612078565b9950806003815181106109af576109af611f49565b6020026020010151896109c29190612078565b9850806004815181106109d7576109d7611f49565b6020026020010151886109ea9190612078565b9750806005815181106109ff576109ff611f49565b602002602001015187610a129190612078565b965080600681518110610a2757610a27611f49565b602002602001015186610a3a9190612078565b95505050508080610a4a90612090565b91505061077a565b5050919395979092949650565b6000806000806000806000610a7489896110e6565b91985096509350610a858989611371565b889750919450925090506000610a9b8a8a611a27565b905060008112610b6357610aaf8188612078565b96506000610abb6119e4565b6001600160a01b0316639abdb38a8c6040518263ffffffff1660e01b8152600401610ae891815260200190565b60206040518083038186803b158015610b0057600080fd5b505afa158015610b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b389190611ebb565b9050612710610b4782846120ab565b610b5191906120e0565b610b5b9088612078565b965050610b79565b610b6c81611eea565b610b769084612078565b92505b5092959891949750929550565b600080610b916116c2565b6000868152600291909101602090815260408083208784529091528120546001600160a01b03169150610bc26116c2565b6000878152602091909152604081208054909190610be257610be2611f49565b60009182526020822001546001600160a01b0384811691161491505b610c066116c2565b60008881526020919091526040902054811015610f8e576000610c276116c2565b600089815260209190915260409020805483908110610c4857610c48611f49565b60009182526020808320909101546040805163e16695b560e01b815290516001600160a01b039092169450849263e16695b592600480840193829003018186803b158015610c9557600080fd5b505afa158015610ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccd9190611ebb565b90508380610cec5750846001600160a01b0316826001600160a01b0316145b15610f7957600080610cfc6116c2565b60008c8152600191909101602090815260408083206001600160a01b03888116855292529182902054915163070da1af60e11b81528b82166004820152911690630e1b435e90602401604080518083038186803b158015610d5c57600080fd5b505afa158015610d70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9491906120f4565b91509150858015610dad5750841580610dad5750808314155b80610dc0575085158015610dc057508083145b15610dde57610dd18b8284876116e6565b610ddb9089612118565b97505b604051631c7b209b60e31b81526001600160a01b038a81166004830152600091829187169063e3d904d89060240160806040518083038186803b158015610e2457600080fd5b505afa158015610e38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5c9190612159565b935093505050878015610e775750861580610e775750808514155b80610e8a575087158015610e8a57508085145b15610ea857610e9b8d8284896116e6565b610ea5908b61218f565b99505b6040516339f7dda360e21b81526001600160a01b038c81166004830152600091829189169063e7df768c9060240160806040518083038186803b158015610eee57600080fd5b505afa158015610f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f269190612159565b935093505050898015610f415750881580610f415750808714155b80610f54575089158015610f5457508087145b15610f7257610f658f82848b6116e6565b610f6f908d612118565b9b505b5050505050505b50508080610f8690612090565b915050610bfe565b5080156110dd576110d0610fa0611c5b565b60405163c3e7a7ad60e01b8152600481018990526001600160a01b038781166024830152919091169063c3e7a7ad9060440160206040518083038186803b158015610fea57600080fd5b505afa158015610ffe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110229190611ebb565b61102a6116c2565b600089815260209190915260408120805490919061104a5761104a611f49565b60009182526020918290200154604080516371613c2d60e01b815290516001600160a01b03909216926371613c2d92600480840193829003018186803b15801561109357600080fd5b505afa1580156110a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cb9190611ebb565b611c7a565b6110da9084612118565b92505b50509392505050565b60008080805b6110f46116c2565b600087815260209190915260409020548110156111995760008060006111588961111c6116c2565b60008c81526020919091526040902080548790811061113d5761113d611f49565b6000918252602090912001546001600160a01b03168a611c93565b919450925090506111698388612078565b96506111758287612078565b95506111818186612078565b9450505050808061119190612090565b9150506110ec565b509250925092565b6000806000610200868686611c93565b60006111bd8383611a27565b905060005b6111ca6116c2565b6000858152602091909152604090205481101561136a5760006111eb6116c2565b60008681526020919091526040902080548390811061120c5761120c611f49565b6000918252602082200154604051631c7b209b60e31b81526001600160a01b03878116600483015290911692508190839063e3d904d89060240160806040518083038186803b15801561125e57600080fd5b505afa158015611272573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112969190612159565b9350935050506112a8878284866116e6565b6112b2908661218f565b6040516339f7dda360e21b81526001600160a01b03888116600483015291965060009182919086169063e7df768c9060240160806040518083038186803b1580156112fc57600080fd5b505afa158015611310573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113349190612159565b935093505050611346898284886116e6565b6113509088612118565b96505050505050808061136290612090565b9150506111c2565b5092915050565b60008080805b61137f6116c2565b600087815260209190915260409020548110156111995760008060006113e3896113a76116c2565b60008c8152602091909152604090208054879081106113c8576113c8611f49565b6000918252602090912001546001600160a01b03168a6115e6565b919450925090506113f48388612078565b96506114008287612078565b955061140c8186612078565b9450505050808061141c90612090565b915050611377565b60008060006114316116c2565b6000878152600291909101602090815260408083208884529091529020546001600160a01b031690506114626116c2565b6000878152600191909101602090815260408083206001600160a01b03858116855292529182902054915163070da1af60e11b81528682166004820152911690630e1b435e90602401604080518083038186803b1580156114c257600080fd5b505afa1580156114d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fa91906120f4565b90935091506115076116c2565b600087815260209190915260408120805490919061152757611527611f49565b6000918252602090912001546001600160a01b03828116911614156115dd5761154e611c5b565b60405163c3e7a7ad60e01b8152600481018890526001600160a01b038681166024830152919091169063c3e7a7ad9060440160206040518083038186803b15801561159857600080fd5b505afa1580156115ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d09190611ebb565b6115da9084612118565b92505b50935093915050565b6000806000806000806000886001600160a01b031663e3d904d8896040518263ffffffff1660e01b815260040161162c91906001600160a01b0391909116815260200190565b60806040518083038186803b15801561164457600080fd5b505afa158015611658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167c9190612159565b93509350935093508396506116938a82848c6116e6565b95508294505050505093509350939050565b60006116bd69151bdad95b95985d5b1d60b21b611cd9565b905090565b7f8041b8421ebd495cc61f38c788c9eb100daccf9bd36aa0bb920b7a15b2e0496590565b6000806116f1611c5b565b6040516302b6878160e11b815260048101889052602481018790526001600160a01b03919091169063056d0f029060440160806040518083038186803b15801561173a57600080fd5b505afa15801561174e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177291906121ce565b602001519050600080826117fb57859150846001600160a01b03166371613c2d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117bc57600080fd5b505afa1580156117d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f49190611ebb565b90506119ce565b6000611805611c5b565b604051630c30971960e11b8152600481018b9052602481018a9052604481018990526001600160a01b0391909116906318612e329060640160206040518083038186803b15801561185557600080fd5b505afa158015611869573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188d9190611ebb565b9050611897611c5b565b604051637636e94160e01b8152600481018b905260006024820152604481018390526001600160a01b039190911690637636e9419060640160206040518083038186803b1580156118e757600080fd5b505afa1580156118fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191f9190611ebb565b92506119296116c2565b60008a815260209190915260408120805490919061194957611949611f49565b60009182526020918290200154604080516371613c2d60e01b815290516001600160a01b03909216926371613c2d92600480840193829003018186803b15801561199257600080fd5b505afa1580156119a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ca9190611ebb565b9150505b6119d88282611c7a565b98975050505050505050565b60006116bd7121bab93932b731bca1b7b73a3937b63632b960711b611cd9565b6000611a0e825490565b92915050565b6000611a208383611d6a565b9392505050565b6000805b611a336116c2565b60008581526020919091526040902054811015611b9b576000611a546116c2565b600086815260209190915260409020805483908110611a7557611a75611f49565b60009182526020822001546001600160a01b0316915080611a946116c2565b6000888152600191909101602090815260408083206001600160a01b03878116855292529182902054915163070da1af60e11b81528882166004820152911690630e1b435e90602401604080518083038186803b158015611af457600080fd5b505afa158015611b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2c91906120f4565b91509150611b79878284611b3e6116c2565b60008c815260209190915260409020805489908110611b5f57611b5f611f49565b6000918252602090912001546001600160a01b03166116e6565b611b839086612118565b94505050508080611b9390612090565b915050611a2b565b50611c51611ba7611c5b565b60405163c3e7a7ad60e01b8152600481018690526001600160a01b038581166024830152919091169063c3e7a7ad9060440160206040518083038186803b158015611bf157600080fd5b505afa158015611c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c299190611ebb565b611c316116c2565b600086815260209190915260408120805490919061104a5761104a611f49565b611a209082612118565b60006116bd7011d95b995cda5cd5985b1d5955985d5b1d607a1b611cd9565b6000612710611c898385612234565b611a2091906122b9565b6000806000806000806000886001600160a01b031663e7df768c896040518263ffffffff1660e01b815260040161162c91906001600160a01b0391909116815260200190565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b0316908161136a5760405162461bcd60e51b815260040161030c91906122e7565b6000826000018281548110611d8157611d81611f49565b9060005260206000200154905092915050565b80356001600160a01b0381168114611dab57600080fd5b919050565b600080600060608486031215611dc557600080fd5b83359250611dd560208501611d94565b9150611de360408501611d94565b90509250925092565b600080600080600060a08688031215611e0457600080fd5b853594506020860135935060408601359250611e2260608701611d94565b9150608086013562ffffff81168114611e3a57600080fd5b809150509295509295909350565b600060208284031215611e5a57600080fd5b611a2082611d94565b60008060408385031215611e7657600080fd5b82359150611e8660208401611d94565b90509250929050565b600080600060608486031215611ea457600080fd5b8335925060208401359150611de360408501611d94565b600060208284031215611ecd57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b821415611f0057611f00611ed4565b5060000390565b6040810160028410611f2957634e487b7160e01b600052602160045260246000fd5b9281526020015290565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000604082018483526020604081850152818551808452606086019150828701935060005b81811015611fa057845183529383019391830191600101611f84565b5090979650505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715611fd657611fd6611f33565b604052919050565b60006020808385031215611ff157600080fd5b825167ffffffffffffffff8082111561200957600080fd5b818501915085601f83011261201d57600080fd5b81518181111561202f5761202f611f33565b8060051b9150612040848301611fad565b818152918301840191848101908884111561205a57600080fd5b938501935b838510156119d85784518252938501939085019061205f565b6000821982111561208b5761208b611ed4565b500190565b60006000198214156120a4576120a4611ed4565b5060010190565b60008160001904831182151516156120c5576120c5611ed4565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826120ef576120ef6120ca565b500490565b6000806040838503121561210757600080fd5b505080516020909101519092909150565b600080821280156001600160ff1b038490038513161561213a5761213a611ed4565b600160ff1b839003841281161561215357612153611ed4565b50500190565b6000806000806080858703121561216f57600080fd5b505082516020840151604085015160609095015191969095509092509050565b60008083128015600160ff1b8501841216156121ad576121ad611ed4565b6001600160ff1b03840183138116156121c8576121c8611ed4565b50500390565b6000608082840312156121e057600080fd5b6040516080810181811067ffffffffffffffff8211171561220357612203611f33565b8060405250825181526020830151602082015260408301516040820152606083015160608201528091505092915050565b60006001600160ff1b038184138284138082168684048611161561225a5761225a611ed4565b600160ff1b600087128281168783058912161561227957612279611ed4565b6000871292508782058712848416161561229557612295611ed4565b878505871281841616156122ab576122ab611ed4565b505050929093029392505050565b6000826122c8576122c86120ca565b600160ff1b8214600019841416156122e2576122e2611ed4565b500590565b600060208083528351808285015260005b81811015612314578581018301518582016040015282016122f8565b81811115612326576000604083870101525b50601f01601f191692909201604001939250505056fea26469706673582212200c9dfe9eb6bae3fbbf70188a481f7069614884e5831953d6ac7f57cb0cb69c2864736f6c63430008090033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100a85760003560e01c806373bb3b091161007057806373bb3b091461017c5780637e6097151461018f57806385f33967146101a25780639d3fc35d146101b5578063e906c100146101c857600080fd5b80631ce4ded4146100ad5780632a69c6fc146100e05780633b22a4741461010e5780635c3477651461015657806371eb435314610169575b600080fd5b6100c06100bb366004611db0565b6101f0565b604080519384526020840192909252908201526060015b60405180910390f35b8180156100ec57600080fd5b506101006100fb366004611dec565b61020f565b6040519081526020016100d7565b61012161011c366004611e48565b610747565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016100d7565b610121610164366004611e63565b610a5f565b610100610177366004611e8f565b610b86565b6100c061018a366004611e63565b6110e6565b6100c061019d366004611db0565b6111a1565b6101006101b0366004611e63565b6111b1565b6100c06101c3366004611e63565b611371565b6101db6101d6366004611e8f565b611424565b604080519283526020830191909152016100d7565b60008060006102008686866115e6565b92509250925093509350939050565b600061023c6040518060800160405280600081526020016000815260200160008152602001600081525090565b60006102466116a5565b60405163afe8efcf60e01b81526001600160a01b038781166004830152919091169063afe8efcf9060240160206040518083038186803b15801561028957600080fd5b505afa15801561029d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c19190611ebb565b9050806103155760405162461bcd60e51b815260206004820152601a60248201527f557365722068617320656e6f75676820636f6c6c61746572616c00000000000060448201526064015b60405180910390fd5b600061031f6116a5565b604051630129e6bf60e11b81526001600160a01b038881166004830152602482018c90529190911690630253cd7e9060440160206040518083038186803b15801561036957600080fd5b505afa15801561037d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a19190611ebb565b9050806103ff5760405162461bcd60e51b815260206004820152602660248201527f4e6f20636f6c6c61746572616c20696e207468652073656c65637465642063756044820152657272656e637960d01b606482015260840161030c565b60008061040d8a8a8a611424565b91509150600082126104615760405162461bcd60e51b815260206004820181905260248201527f4e6f206465627420696e207468652073656c6563746564206d61747572697479604482015260640161030c565b8881146104b05760405162461bcd60e51b815260206004820152601a60248201527f4e65656420746f20636c656172206f7264657273206669727374000000000000604482015260640161030c565b6104b982611eea565b855261050f8a8a6104c985611eea565b6104d16116c2565b60020160008f815260200190815260200160002060008e815260200190815260200160002060009054906101000a90046001600160a01b03166116e6565b602086015261051c6119e4565b6040516306d062ad60e01b8152600481018c9052602481018690526001600160a01b0391909116906306d062ad9060440160206040518083038186803b15801561056557600080fd5b505afa158015610579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059d9190611ebb565b606086018190526020860151106105b85784606001516105be565b84602001515b60608601526105cb6116a5565b6060860151604051633655b42b60e01b81526001600160a01b038b81166004830152602482018f9052604482018e905260648201879052608482019290925262ffffff8a1660a4820152911690633655b42b9060c401602060405180830381600087803b15801561063b57600080fd5b505af115801561064f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106739190611ebb565b5061067c6116c2565b60008b8152600291909101602090815260408083208c84529091528082205487519151631e007d1d60e01b81526001600160a01b0390911692631e007d1d926106c792600401611f07565b60206040518083038186803b1580156106df57600080fd5b505afa1580156106f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107179190611ebb565b60408601819052606086015111610732578460600151610738565b84604001515b9b9a5050505050505050505050565b60008060008060008060008061075b6116c2565b6001600160a01b038a1660009081526004919091016020526040812091505b61078382611a04565b811015610a525760006107968383611a14565b6040805160078082526101008201909252919250600091906020820160e0803683370190505090506107c8828d610a5f565b876000815181106107db576107db611f49565b60200260200101886001815181106107f5576107f5611f49565b602002602001018960028151811061080f5761080f611f49565b602002602001018a60038151811061082957610829611f49565b602002602001018b60048151811061084357610843611f49565b602002602001018c60058151811061085d5761085d611f49565b602002602001018d60068151811061087757610877611f49565b602090810291909101019690965295909452949093529390529290529190525260006108a16119e4565b6001600160a01b031663939fe62284846040518363ffffffff1660e01b81526004016108ce929190611f5f565b60006040518083038186803b1580156108e657600080fd5b505afa1580156108fa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109229190810190611fde565b90508060008151811061093757610937611f49565b60200260200101518c61094a9190612078565b9b508060018151811061095f5761095f611f49565b60200260200101518b6109729190612078565b9a508060028151811061098757610987611f49565b60200260200101518a61099a9190612078565b9950806003815181106109af576109af611f49565b6020026020010151896109c29190612078565b9850806004815181106109d7576109d7611f49565b6020026020010151886109ea9190612078565b9750806005815181106109ff576109ff611f49565b602002602001015187610a129190612078565b965080600681518110610a2757610a27611f49565b602002602001015186610a3a9190612078565b95505050508080610a4a90612090565b91505061077a565b5050919395979092949650565b6000806000806000806000610a7489896110e6565b91985096509350610a858989611371565b889750919450925090506000610a9b8a8a611a27565b905060008112610b6357610aaf8188612078565b96506000610abb6119e4565b6001600160a01b0316639abdb38a8c6040518263ffffffff1660e01b8152600401610ae891815260200190565b60206040518083038186803b158015610b0057600080fd5b505afa158015610b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b389190611ebb565b9050612710610b4782846120ab565b610b5191906120e0565b610b5b9088612078565b965050610b79565b610b6c81611eea565b610b769084612078565b92505b5092959891949750929550565b600080610b916116c2565b6000868152600291909101602090815260408083208784529091528120546001600160a01b03169150610bc26116c2565b6000878152602091909152604081208054909190610be257610be2611f49565b60009182526020822001546001600160a01b0384811691161491505b610c066116c2565b60008881526020919091526040902054811015610f8e576000610c276116c2565b600089815260209190915260409020805483908110610c4857610c48611f49565b60009182526020808320909101546040805163e16695b560e01b815290516001600160a01b039092169450849263e16695b592600480840193829003018186803b158015610c9557600080fd5b505afa158015610ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccd9190611ebb565b90508380610cec5750846001600160a01b0316826001600160a01b0316145b15610f7957600080610cfc6116c2565b60008c8152600191909101602090815260408083206001600160a01b03888116855292529182902054915163070da1af60e11b81528b82166004820152911690630e1b435e90602401604080518083038186803b158015610d5c57600080fd5b505afa158015610d70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9491906120f4565b91509150858015610dad5750841580610dad5750808314155b80610dc0575085158015610dc057508083145b15610dde57610dd18b8284876116e6565b610ddb9089612118565b97505b604051631c7b209b60e31b81526001600160a01b038a81166004830152600091829187169063e3d904d89060240160806040518083038186803b158015610e2457600080fd5b505afa158015610e38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5c9190612159565b935093505050878015610e775750861580610e775750808514155b80610e8a575087158015610e8a57508085145b15610ea857610e9b8d8284896116e6565b610ea5908b61218f565b99505b6040516339f7dda360e21b81526001600160a01b038c81166004830152600091829189169063e7df768c9060240160806040518083038186803b158015610eee57600080fd5b505afa158015610f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f269190612159565b935093505050898015610f415750881580610f415750808714155b80610f54575089158015610f5457508087145b15610f7257610f658f82848b6116e6565b610f6f908d612118565b9b505b5050505050505b50508080610f8690612090565b915050610bfe565b5080156110dd576110d0610fa0611c5b565b60405163c3e7a7ad60e01b8152600481018990526001600160a01b038781166024830152919091169063c3e7a7ad9060440160206040518083038186803b158015610fea57600080fd5b505afa158015610ffe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110229190611ebb565b61102a6116c2565b600089815260209190915260408120805490919061104a5761104a611f49565b60009182526020918290200154604080516371613c2d60e01b815290516001600160a01b03909216926371613c2d92600480840193829003018186803b15801561109357600080fd5b505afa1580156110a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cb9190611ebb565b611c7a565b6110da9084612118565b92505b50509392505050565b60008080805b6110f46116c2565b600087815260209190915260409020548110156111995760008060006111588961111c6116c2565b60008c81526020919091526040902080548790811061113d5761113d611f49565b6000918252602090912001546001600160a01b03168a611c93565b919450925090506111698388612078565b96506111758287612078565b95506111818186612078565b9450505050808061119190612090565b9150506110ec565b509250925092565b6000806000610200868686611c93565b60006111bd8383611a27565b905060005b6111ca6116c2565b6000858152602091909152604090205481101561136a5760006111eb6116c2565b60008681526020919091526040902080548390811061120c5761120c611f49565b6000918252602082200154604051631c7b209b60e31b81526001600160a01b03878116600483015290911692508190839063e3d904d89060240160806040518083038186803b15801561125e57600080fd5b505afa158015611272573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112969190612159565b9350935050506112a8878284866116e6565b6112b2908661218f565b6040516339f7dda360e21b81526001600160a01b03888116600483015291965060009182919086169063e7df768c9060240160806040518083038186803b1580156112fc57600080fd5b505afa158015611310573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113349190612159565b935093505050611346898284886116e6565b6113509088612118565b96505050505050808061136290612090565b9150506111c2565b5092915050565b60008080805b61137f6116c2565b600087815260209190915260409020548110156111995760008060006113e3896113a76116c2565b60008c8152602091909152604090208054879081106113c8576113c8611f49565b6000918252602090912001546001600160a01b03168a6115e6565b919450925090506113f48388612078565b96506114008287612078565b955061140c8186612078565b9450505050808061141c90612090565b915050611377565b60008060006114316116c2565b6000878152600291909101602090815260408083208884529091529020546001600160a01b031690506114626116c2565b6000878152600191909101602090815260408083206001600160a01b03858116855292529182902054915163070da1af60e11b81528682166004820152911690630e1b435e90602401604080518083038186803b1580156114c257600080fd5b505afa1580156114d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fa91906120f4565b90935091506115076116c2565b600087815260209190915260408120805490919061152757611527611f49565b6000918252602090912001546001600160a01b03828116911614156115dd5761154e611c5b565b60405163c3e7a7ad60e01b8152600481018890526001600160a01b038681166024830152919091169063c3e7a7ad9060440160206040518083038186803b15801561159857600080fd5b505afa1580156115ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d09190611ebb565b6115da9084612118565b92505b50935093915050565b6000806000806000806000886001600160a01b031663e3d904d8896040518263ffffffff1660e01b815260040161162c91906001600160a01b0391909116815260200190565b60806040518083038186803b15801561164457600080fd5b505afa158015611658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167c9190612159565b93509350935093508396506116938a82848c6116e6565b95508294505050505093509350939050565b60006116bd69151bdad95b95985d5b1d60b21b611cd9565b905090565b7f8041b8421ebd495cc61f38c788c9eb100daccf9bd36aa0bb920b7a15b2e0496590565b6000806116f1611c5b565b6040516302b6878160e11b815260048101889052602481018790526001600160a01b03919091169063056d0f029060440160806040518083038186803b15801561173a57600080fd5b505afa15801561174e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177291906121ce565b602001519050600080826117fb57859150846001600160a01b03166371613c2d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117bc57600080fd5b505afa1580156117d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f49190611ebb565b90506119ce565b6000611805611c5b565b604051630c30971960e11b8152600481018b9052602481018a9052604481018990526001600160a01b0391909116906318612e329060640160206040518083038186803b15801561185557600080fd5b505afa158015611869573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188d9190611ebb565b9050611897611c5b565b604051637636e94160e01b8152600481018b905260006024820152604481018390526001600160a01b039190911690637636e9419060640160206040518083038186803b1580156118e757600080fd5b505afa1580156118fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191f9190611ebb565b92506119296116c2565b60008a815260209190915260408120805490919061194957611949611f49565b60009182526020918290200154604080516371613c2d60e01b815290516001600160a01b03909216926371613c2d92600480840193829003018186803b15801561199257600080fd5b505afa1580156119a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ca9190611ebb565b9150505b6119d88282611c7a565b98975050505050505050565b60006116bd7121bab93932b731bca1b7b73a3937b63632b960711b611cd9565b6000611a0e825490565b92915050565b6000611a208383611d6a565b9392505050565b6000805b611a336116c2565b60008581526020919091526040902054811015611b9b576000611a546116c2565b600086815260209190915260409020805483908110611a7557611a75611f49565b60009182526020822001546001600160a01b0316915080611a946116c2565b6000888152600191909101602090815260408083206001600160a01b03878116855292529182902054915163070da1af60e11b81528882166004820152911690630e1b435e90602401604080518083038186803b158015611af457600080fd5b505afa158015611b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2c91906120f4565b91509150611b79878284611b3e6116c2565b60008c815260209190915260409020805489908110611b5f57611b5f611f49565b6000918252602090912001546001600160a01b03166116e6565b611b839086612118565b94505050508080611b9390612090565b915050611a2b565b50611c51611ba7611c5b565b60405163c3e7a7ad60e01b8152600481018690526001600160a01b038581166024830152919091169063c3e7a7ad9060440160206040518083038186803b158015611bf157600080fd5b505afa158015611c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c299190611ebb565b611c316116c2565b600086815260209190915260408120805490919061104a5761104a611f49565b611a209082612118565b60006116bd7011d95b995cda5cd5985b1d5955985d5b1d607a1b611cd9565b6000612710611c898385612234565b611a2091906122b9565b6000806000806000806000886001600160a01b031663e7df768c896040518263ffffffff1660e01b815260040161162c91906001600160a01b0391909116815260200190565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b0316908161136a5760405162461bcd60e51b815260040161030c91906122e7565b6000826000018281548110611d8157611d81611f49565b9060005260206000200154905092915050565b80356001600160a01b0381168114611dab57600080fd5b919050565b600080600060608486031215611dc557600080fd5b83359250611dd560208501611d94565b9150611de360408501611d94565b90509250925092565b600080600080600060a08688031215611e0457600080fd5b853594506020860135935060408601359250611e2260608701611d94565b9150608086013562ffffff81168114611e3a57600080fd5b809150509295509295909350565b600060208284031215611e5a57600080fd5b611a2082611d94565b60008060408385031215611e7657600080fd5b82359150611e8660208401611d94565b90509250929050565b600080600060608486031215611ea457600080fd5b8335925060208401359150611de360408501611d94565b600060208284031215611ecd57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b821415611f0057611f00611ed4565b5060000390565b6040810160028410611f2957634e487b7160e01b600052602160045260246000fd5b9281526020015290565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000604082018483526020604081850152818551808452606086019150828701935060005b81811015611fa057845183529383019391830191600101611f84565b5090979650505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715611fd657611fd6611f33565b604052919050565b60006020808385031215611ff157600080fd5b825167ffffffffffffffff8082111561200957600080fd5b818501915085601f83011261201d57600080fd5b81518181111561202f5761202f611f33565b8060051b9150612040848301611fad565b818152918301840191848101908884111561205a57600080fd5b938501935b838510156119d85784518252938501939085019061205f565b6000821982111561208b5761208b611ed4565b500190565b60006000198214156120a4576120a4611ed4565b5060010190565b60008160001904831182151516156120c5576120c5611ed4565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826120ef576120ef6120ca565b500490565b6000806040838503121561210757600080fd5b505080516020909101519092909150565b600080821280156001600160ff1b038490038513161561213a5761213a611ed4565b600160ff1b839003841281161561215357612153611ed4565b50500190565b6000806000806080858703121561216f57600080fd5b505082516020840151604085015160609095015191969095509092509050565b60008083128015600160ff1b8501841216156121ad576121ad611ed4565b6001600160ff1b03840183138116156121c8576121c8611ed4565b50500390565b6000608082840312156121e057600080fd5b6040516080810181811067ffffffffffffffff8211171561220357612203611f33565b8060405250825181526020830151602082015260408301516040820152606083015160608201528091505092915050565b60006001600160ff1b038184138284138082168684048611161561225a5761225a611ed4565b600160ff1b600087128281168783058912161561227957612279611ed4565b6000871292508782058712848416161561229557612295611ed4565b878505871281841616156122ab576122ab611ed4565b505050929093029392505050565b6000826122c8576122c86120ca565b600160ff1b8214600019841416156122e2576122e2611ed4565b500590565b600060208083528351808285015260005b81811015612314578581018301518582016040015282016122f8565b81811115612326576000604083870101525b50601f01601f191692909201604001939250505056fea26469706673582212200c9dfe9eb6bae3fbbf70188a481f7069614884e5831953d6ac7f57cb0cb69c2864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}