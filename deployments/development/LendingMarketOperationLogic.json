{
  "address": "0x3eCbFa107f8f9E0Cf7b0a2e2d931fF732EcE096F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "EmergencyTerminationExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "genesisDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "compoundFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderFeeRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "circuitBreakerLimitRange",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lendingMarket",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "futureValueVault",
          "type": "address"
        }
      ],
      "name": "LendingMarketInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "orderBookId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "openingDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "name": "OrderBookCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaturity",
          "type": "uint256"
        }
      ],
      "name": "OrderBooksRotated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "calculateNextMaturity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getOrderBookDetail",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bestLendUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bestBorrowUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "midUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLendUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBorrowUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openingUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openingDate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isReady",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_ccys",
          "type": "bytes32[]"
        }
      ],
      "name": "getOrderBookDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "ccy",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "maturity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bestLendUnitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bestBorrowUnitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "midUnitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxLendUnitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBorrowUnitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openingUnitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openingDate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isReady",
              "type": "bool"
            }
          ],
          "internalType": "struct ILendingMarketController.OrderBookDetail[]",
          "name": "orderBookDetails",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getOrderBookDetailsPerCurrency",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "ccy",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "maturity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bestLendUnitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bestBorrowUnitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "midUnitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxLendUnitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBorrowUnitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openingUnitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openingDate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isReady",
              "type": "bool"
            }
          ],
          "internalType": "struct ILendingMarketController.OrderBookDetail[]",
          "name": "orderBookDetail",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb92e93f6ec64a2299a59090d38e7cc98fb3a31f6aac0dd0e12ed020f3b624ec9",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x3eCbFa107f8f9E0Cf7b0a2e2d931fF732EcE096F",
    "transactionIndex": 31,
    "gasUsed": "3144132",
    "logsBloom": "0x
    "blockHash": "0xe741f25555697090752abb74fac14c45d85603e2095e26b2a5faa20f4dbe77a9",
    "transactionHash": "0xb92e93f6ec64a2299a59090d38e7cc98fb3a31f6aac0dd0e12ed020f3b624ec9",
    "logs": [],
    "blockNumber": 4131795,
    "cumulativeGasUsed": "11700581",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a5c1665855134ffe273d2008ae5ac307",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EmergencyTerminationExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"genesisDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compoundFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"circuitBreakerLimitRange\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lendingMarket\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"futureValueVault\",\"type\":\"address\"}],\"name\":\"LendingMarketInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"orderBookId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openingDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"name\":\"OrderBookCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaturity\",\"type\":\"uint256\"}],\"name\":\"OrderBooksRotated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"calculateNextMaturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getOrderBookDetail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bestLendUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bestBorrowUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"midUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLendUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBorrowUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openingUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openingDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReady\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_ccys\",\"type\":\"bytes32[]\"}],\"name\":\"getOrderBookDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bestLendUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bestBorrowUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"midUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLendUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBorrowUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openingUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openingDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReady\",\"type\":\"bool\"}],\"internalType\":\"struct ILendingMarketController.OrderBookDetail[]\",\"name\":\"orderBookDetails\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getOrderBookDetailsPerCurrency\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bestLendUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bestBorrowUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"midUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLendUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBorrowUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openingUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openingDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReady\",\"type\":\"bool\"}],\"internalType\":\"struct ILendingMarketController.OrderBookDetail[]\",\"name\":\"orderBookDetail\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/libraries/logics/LendingMarketOperationLogic.sol\":\"LendingMarketOperationLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dependencies/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Chainlink Contracts v0.4.0 (v0.8/interfaces/AggregatorV3Interface.sol)\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x81b0c18c07c8c031d5b34e4e41d2451b836355aad1b3c04c26578c92f73585f9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(\\n            value >= type(int248).min && value <= type(int248).max,\\n            \\\"SafeCast: value doesn't fit in 248 bits\\\"\\n        );\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(\\n            value >= type(int240).min && value <= type(int240).max,\\n            \\\"SafeCast: value doesn't fit in 240 bits\\\"\\n        );\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(\\n            value >= type(int232).min && value <= type(int232).max,\\n            \\\"SafeCast: value doesn't fit in 232 bits\\\"\\n        );\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(\\n            value >= type(int224).min && value <= type(int224).max,\\n            \\\"SafeCast: value doesn't fit in 224 bits\\\"\\n        );\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(\\n            value >= type(int216).min && value <= type(int216).max,\\n            \\\"SafeCast: value doesn't fit in 216 bits\\\"\\n        );\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(\\n            value >= type(int208).min && value <= type(int208).max,\\n            \\\"SafeCast: value doesn't fit in 208 bits\\\"\\n        );\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(\\n            value >= type(int200).min && value <= type(int200).max,\\n            \\\"SafeCast: value doesn't fit in 200 bits\\\"\\n        );\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(\\n            value >= type(int192).min && value <= type(int192).max,\\n            \\\"SafeCast: value doesn't fit in 192 bits\\\"\\n        );\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(\\n            value >= type(int184).min && value <= type(int184).max,\\n            \\\"SafeCast: value doesn't fit in 184 bits\\\"\\n        );\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(\\n            value >= type(int176).min && value <= type(int176).max,\\n            \\\"SafeCast: value doesn't fit in 176 bits\\\"\\n        );\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(\\n            value >= type(int168).min && value <= type(int168).max,\\n            \\\"SafeCast: value doesn't fit in 168 bits\\\"\\n        );\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(\\n            value >= type(int160).min && value <= type(int160).max,\\n            \\\"SafeCast: value doesn't fit in 160 bits\\\"\\n        );\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(\\n            value >= type(int152).min && value <= type(int152).max,\\n            \\\"SafeCast: value doesn't fit in 152 bits\\\"\\n        );\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(\\n            value >= type(int144).min && value <= type(int144).max,\\n            \\\"SafeCast: value doesn't fit in 144 bits\\\"\\n        );\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(\\n            value >= type(int136).min && value <= type(int136).max,\\n            \\\"SafeCast: value doesn't fit in 136 bits\\\"\\n        );\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(\\n            value >= type(int128).min && value <= type(int128).max,\\n            \\\"SafeCast: value doesn't fit in 128 bits\\\"\\n        );\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(\\n            value >= type(int120).min && value <= type(int120).max,\\n            \\\"SafeCast: value doesn't fit in 120 bits\\\"\\n        );\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(\\n            value >= type(int112).min && value <= type(int112).max,\\n            \\\"SafeCast: value doesn't fit in 112 bits\\\"\\n        );\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(\\n            value >= type(int104).min && value <= type(int104).max,\\n            \\\"SafeCast: value doesn't fit in 104 bits\\\"\\n        );\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(\\n            value >= type(int96).min && value <= type(int96).max,\\n            \\\"SafeCast: value doesn't fit in 96 bits\\\"\\n        );\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(\\n            value >= type(int88).min && value <= type(int88).max,\\n            \\\"SafeCast: value doesn't fit in 88 bits\\\"\\n        );\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(\\n            value >= type(int80).min && value <= type(int80).max,\\n            \\\"SafeCast: value doesn't fit in 80 bits\\\"\\n        );\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(\\n            value >= type(int72).min && value <= type(int72).max,\\n            \\\"SafeCast: value doesn't fit in 72 bits\\\"\\n        );\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(\\n            value >= type(int64).min && value <= type(int64).max,\\n            \\\"SafeCast: value doesn't fit in 64 bits\\\"\\n        );\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(\\n            value >= type(int56).min && value <= type(int56).max,\\n            \\\"SafeCast: value doesn't fit in 56 bits\\\"\\n        );\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(\\n            value >= type(int48).min && value <= type(int48).max,\\n            \\\"SafeCast: value doesn't fit in 48 bits\\\"\\n        );\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(\\n            value >= type(int40).min && value <= type(int40).max,\\n            \\\"SafeCast: value doesn't fit in 40 bits\\\"\\n        );\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(\\n            value >= type(int32).min && value <= type(int32).max,\\n            \\\"SafeCast: value doesn't fit in 32 bits\\\"\\n        );\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(\\n            value >= type(int24).min && value <= type(int24).max,\\n            \\\"SafeCast: value doesn't fit in 24 bits\\\"\\n        );\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(\\n            value >= type(int16).min && value <= type(int16).max,\\n            \\\"SafeCast: value doesn't fit in 16 bits\\\"\\n        );\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(\\n            value >= type(int8).min && value <= type(int8).max,\\n            \\\"SafeCast: value doesn't fit in 8 bits\\\"\\n        );\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xb26db2e7d4c8d73ceda86a482ab8b3302b6a5f222f4a333361ca9b57a209fc0c\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IBeaconProxyController {\\n    event BeaconProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function deployFutureValueVault() external returns (address futureValueVault);\\n\\n    function deployLendingMarket(\\n        bytes32 ccy,\\n        uint256 orderFeeRate,\\n        uint256 limitRange\\n    ) external returns (address market);\\n}\\n\",\"keccak256\":\"0xb0f2d9a157e2428f61d48c07608b7be8c5f2e46e52b8c761cbbdaf9466538243\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Currency} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CurrencyAdded(bytes32 indexed ccy, uint256 haircut);\\n    event CurrencyRemoved(bytes32 indexed ccy);\\n\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n\\n    event PriceFeedUpdated(bytes32 ccy, uint256 decimals, address[] indexed priceFeeds);\\n    event PriceFeedRemoved(bytes32 ccy);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256 _amount\\n    ) external view returns (uint256 amount);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256[] calldata _amounts\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, uint256 _amount)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, int256 _amount)\\n        external\\n        view\\n        returns (int256 amount);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, uint256[] calldata _amounts)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function convertFromBaseCurrency(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertFromBaseCurrency(bytes32 _ccy, uint256[] calldata _amounts)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getBaseCurrency() external view returns (bytes32);\\n\\n    function getDecimals(bytes32) external view returns (uint8);\\n\\n    function getCurrencies() external view returns (bytes32[] memory);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getLastPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function currencyExists(bytes32 _ccy) external view returns (bool);\\n\\n    function updatePriceFeed(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        address[] calldata _priceFeeds\\n    ) external;\\n\\n    function removePriceFeed(bytes32 _ccy) external;\\n\\n    function addCurrency(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        uint256 _haircut,\\n        address[] calldata _priceFeeds\\n    ) external;\\n\\n    function updateHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function removeCurrency(bytes32 _ccy) external;\\n}\\n\",\"keccak256\":\"0x603eef4c5d4f90eac22eb9db6ae3569b45026d23ee6ab536bd4d90089688f237\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IFutureValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IFutureValueVault {\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint8 orderBookId,\\n        uint256 maturity,\\n        int256 value\\n    );\\n\\n    function getTotalSupply(uint256 maturity) external view returns (uint256);\\n\\n    function getBalance(uint8 orderBookId, address user)\\n        external\\n        view\\n        returns (int256 futureValue, uint256 maturity);\\n\\n    function hasBalanceAtPastMaturity(\\n        uint8 orderBookId,\\n        address user,\\n        uint256 maturity\\n    ) external view returns (bool);\\n\\n    function increase(\\n        uint8 orderBookId,\\n        address user,\\n        uint256 amount,\\n        uint256 maturity,\\n        bool isTaker\\n    ) external;\\n\\n    function decrease(\\n        uint8 orderBookId,\\n        address user,\\n        uint256 amount,\\n        uint256 maturity,\\n        bool isTaker\\n    ) external;\\n\\n    function transferFrom(\\n        uint8 orderBookId,\\n        address sender,\\n        address receiver,\\n        int256 amount,\\n        uint256 maturity\\n    ) external;\\n\\n    function reset(\\n        uint8 orderBookId,\\n        address user,\\n        uint256 activeMaturity\\n    )\\n        external\\n        returns (\\n            int256 removedAmount,\\n            int256 currentAmount,\\n            uint256 maturity,\\n            bool isAllRemoved\\n        );\\n\\n    function setInitialTotalSupply(uint256 maturity, int256 amount) external;\\n\\n    function executeForcedReset(uint8 orderBookId, address user) external;\\n\\n    function executeForcedReset(\\n        uint8 orderBookId,\\n        address user,\\n        int256 amount\\n    ) external returns (int256 removedAmount, int256 balance);\\n}\\n\",\"keccak256\":\"0x5260ad207d71bc2e3e555222bcc91ec618a2b01d2ea764d8d5e225fa77ebffa0\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AutoRollLog} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\\n    event AutoRollExecuted(\\n        bytes32 indexed ccy,\\n        uint256 lendingCompoundFactor,\\n        uint256 borrowingCompoundFactor,\\n        uint256 unitPrice,\\n        uint256 currentMaturity,\\n        uint256 previousMaturity\\n    );\\n\\n    function isInitialized(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getBalance(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getBalanceInFutureValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getMaturityGenesisValue(bytes32 ccy, uint256 maturity) external view returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getAutoRollLog(bytes32 ccy, uint256 maturity)\\n        external\\n        view\\n        returns (AutoRollLog memory);\\n\\n    function getLatestAutoRollLog(bytes32 ccy) external view returns (AutoRollLog memory);\\n\\n    function calculateFVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        uint256 destinationMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function getBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function calculateBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        int256 balance,\\n        uint256 fromMaturity,\\n        uint256 toMaturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function initializeCurrencySetting(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor,\\n        uint256 maturity\\n    ) external;\\n\\n    function updateInitialCompoundFactor(bytes32 ccy, uint256 unitPrice) external;\\n\\n    function executeAutoRoll(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice,\\n        uint256 orderFeeRate\\n    ) external;\\n\\n    function updateGenesisValueWithFutureValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 fvAmount\\n    ) external;\\n\\n    function updateGenesisValueWithResidualAmount(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity\\n    ) external;\\n\\n    function transferFrom(\\n        bytes32 ccy,\\n        address sender,\\n        address receiver,\\n        int256 amount\\n    ) external;\\n\\n    function cleanUpBalance(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external;\\n\\n    function executeForcedReset(bytes32 _ccy, address _user) external;\\n\\n    function executeForcedReset(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        int256 _amountInFV\\n    ) external returns (int256 removedAmount, int256 balance);\\n}\\n\",\"keccak256\":\"0x49c31a088879853c9080f30818d32216037b838dfd7f4330320e539cc0969752\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport {ItayoseLog} from \\\"../storages/LendingMarketStorage.sol\\\";\\nimport {OrderBookLib, FilledOrder, PartiallyFilledOrder} from \\\"../libraries/OrderBookLib.sol\\\";\\n\\ninterface ILendingMarket {\\n    struct OrderBook {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        uint256 openingDate;\\n        uint256 borrowUnitPrice;\\n        uint256 lendUnitPrice;\\n        uint256 midUnitPrice;\\n        uint256 openingUnitPrice;\\n        bool isReady;\\n    }\\n\\n    function getOrderBookDetail(uint8 orderBookId) external view returns (OrderBook memory);\\n\\n    function getCircuitBreakerThresholds(uint8 orderBookId)\\n        external\\n        view\\n        returns (uint256 lendCircuitBreakerThreshold, uint256 borrowCircuitBreakerThreshold);\\n\\n    function getBestLendUnitPrice(uint8 orderBookId) external view returns (uint256 unitPrice);\\n\\n    function getBestLendUnitPrices(uint8[] calldata _orderBookIds)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getBestBorrowUnitPrice(uint8 orderBookId) external view returns (uint256 unitPrice);\\n\\n    function getBestBorrowUnitPrices(uint8[] calldata _orderBookIds)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getMidUnitPrice(uint8 orderBookId) external view returns (uint256 unitPrice);\\n\\n    function getMidUnitPrices(uint8[] calldata _orderBookIds)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getBorrowOrderBook(uint8 orderBookId, uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(uint8 orderBookId, uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturity(uint8 orderBookId) external view returns (uint256);\\n\\n    function getMaturities(uint8[] calldata _orderBookIds)\\n        external\\n        view\\n        returns (uint256[] memory maturities);\\n\\n    function getCurrency() external view returns (bytes32);\\n\\n    function getOrderFeeRate() external view returns (uint256);\\n\\n    function getCircuitBreakerLimitRange() external view returns (uint256);\\n\\n    function getOpeningDate(uint8 orderBookId) external view returns (uint256);\\n\\n    function isReady(uint8 orderBookId) external view returns (bool);\\n\\n    function isMatured(uint8 orderBookId) external view returns (bool);\\n\\n    function isOpened(uint8 orderBookId) external view returns (bool);\\n\\n    function isItayosePeriod(uint8 orderBookId) external view returns (bool);\\n\\n    function isPreOrderPeriod(uint8 orderBookId) external returns (bool);\\n\\n    function getItayoseLog(uint256 maturity) external view returns (ItayoseLog memory);\\n\\n    function getOrder(uint8 orderBookId, uint48 orderId)\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp,\\n            bool isPreOrder\\n        );\\n\\n    function getTotalAmountFromLendOrders(uint8 orderBookId, address user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getTotalAmountFromBorrowOrders(uint8 orderBookId, address user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getLendOrderIds(uint8 orderBookId, address user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds);\\n\\n    function getBorrowOrderIds(uint8 orderBookId, address user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds);\\n\\n    function calculateFilledAmount(\\n        uint8 orderBookId,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV,\\n            uint256 feeInFV,\\n            uint256 placedAmount\\n        );\\n\\n    function createOrderBook(uint256 maturity, uint256 _openingDate)\\n        external\\n        returns (uint8 orderBookId);\\n\\n    function reopenOrderBook(\\n        uint8 _orderBookId,\\n        uint256 _newMaturity,\\n        uint256 _openingDate\\n    ) external;\\n\\n    function cancelOrder(\\n        uint8 orderBookId,\\n        address user,\\n        uint48 orderId\\n    ) external;\\n\\n    function executeOrder(\\n        uint8 orderBookId,\\n        ProtocolTypes.Side side,\\n        address account,\\n        uint256 amount,\\n        uint256 unitPrice\\n    )\\n        external\\n        returns (\\n            FilledOrder memory filledOrder,\\n            PartiallyFilledOrder memory partiallyFilledOrder,\\n            uint256 feeInFV\\n        );\\n\\n    function executePreOrder(\\n        uint8 orderBookId,\\n        ProtocolTypes.Side side,\\n        address user,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external;\\n\\n    function unwindPosition(\\n        uint8 orderBookId,\\n        ProtocolTypes.Side side,\\n        address user,\\n        uint256 futureValue\\n    )\\n        external\\n        returns (\\n            FilledOrder memory filledOrder,\\n            PartiallyFilledOrder memory partiallyFilledOrder,\\n            uint256 feeInFV\\n        );\\n\\n    function executeItayoseCall(uint8 orderBookId)\\n        external\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 totalOffsetAmount,\\n            uint256 openingDate,\\n            PartiallyFilledOrder memory partiallyFilledLendingOrder,\\n            PartiallyFilledOrder memory partiallyFilledBorrowingOrder\\n        );\\n\\n    function cleanUpOrders(uint8 orderBookId, address user)\\n        external\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        );\\n\\n    function updateOrderFeeRate(uint256 _orderFeeRate) external;\\n\\n    function updateCircuitBreakerLimitRange(uint256 _limitRange) external;\\n\\n    function pauseMarket() external;\\n\\n    function unpauseMarket() external;\\n}\\n\",\"keccak256\":\"0xdc37b0e3dec67def8e360c50066ea4d0344bc6a49e3aa2f7c9c48a14b9654083\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ILendingMarketController {\\n    struct Order {\\n        uint48 orderId;\\n        bytes32 ccy;\\n        uint256 maturity;\\n        ProtocolTypes.Side side;\\n        uint256 unitPrice;\\n        uint256 amount;\\n        uint256 timestamp;\\n        bool isPreOrder;\\n    }\\n\\n    struct Position {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        int256 presentValue;\\n        int256 futureValue;\\n    }\\n\\n    struct OrderBookDetail {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        uint256 bestLendUnitPrice;\\n        uint256 bestBorrowUnitPrice;\\n        uint256 midUnitPrice;\\n        uint256 maxLendUnitPrice;\\n        uint256 minBorrowUnitPrice;\\n        uint256 openingUnitPrice;\\n        uint256 openingDate;\\n        bool isReady;\\n    }\\n\\n    struct AdditionalFunds {\\n        bytes32 ccy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 lentAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct GetOrderEstimationParams {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        address user;\\n        ProtocolTypes.Side side;\\n        uint256 amount;\\n        uint256 unitPrice;\\n        uint256 additionalDepositAmount;\\n        bool ignoreBorrowedAmount;\\n    }\\n\\n    function isTerminated() external view returns (bool);\\n\\n    function isRedemptionRequired(address _user) external view returns (bool);\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarket(bytes32 ccy) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy) external view returns (address);\\n\\n    function getOrderBookId(bytes32 _ccy, uint256 _maturity) external view returns (uint8);\\n\\n    function getOrderBookDetail(bytes32 _ccy, uint256 _maturity)\\n        external\\n        view\\n        returns (\\n            uint256 bestLendUnitPrice,\\n            uint256 bestBorrowUnitPrice,\\n            uint256 midUnitPrice,\\n            uint256 maxLendUnitPrice,\\n            uint256 minBorrowUnitPrice,\\n            uint256 openingUnitPrice,\\n            uint256 openingDate,\\n            bool isReady\\n        );\\n\\n    function getOrderBookDetails(bytes32[] calldata _ccys)\\n        external\\n        view\\n        returns (OrderBookDetail[] memory orderBookDetails);\\n\\n    function getBestLendUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getBestBorrowUnitPrices(bytes32 ccy)\\n        external\\n        view\\n        returns (uint256[] memory unitPrices);\\n\\n    function getMidUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getOrderEstimation(GetOrderEstimationParams calldata params)\\n        external\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV,\\n            uint256 orderFeeInFV,\\n            uint256 placedAmount,\\n            uint256 coverage,\\n            bool isInsufficientDepositAmount\\n        );\\n\\n    function getBorrowOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getOrderBookIds(bytes32 ccy) external view returns (uint8[] memory);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInBaseCurrency(address user)\\n        external\\n        view\\n        returns (int256 totalPresentValue);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256 genesisValue);\\n\\n    function getOrders(bytes32[] calldata ccys, address user)\\n        external\\n        view\\n        returns (Order[] memory activeOrders, Order[] memory inactiveOrders);\\n\\n    function getPosition(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) external view returns (int256 presentValue, int256 futureValue);\\n\\n    function getPositions(bytes32[] calldata ccys, address user)\\n        external\\n        view\\n        returns (Position[] memory positions);\\n\\n    function calculateFunds(\\n        bytes32 ccy,\\n        address user,\\n        uint256 liquidationThresholdRate\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 workingLendOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 collateralAmount,\\n            uint256 lentAmount,\\n            uint256 workingBorrowOrdersAmount,\\n            uint256 debtAmount,\\n            uint256 borrowedAmount\\n        );\\n\\n    function calculateTotalFundsInBaseCurrency(\\n        address user,\\n        AdditionalFunds calldata _additionalFunds,\\n        uint256 liquidationThresholdRate\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 plusDepositAmountInAdditionalFundsCcy,\\n            uint256 minusDepositAmountInAdditionalFundsCcy,\\n            uint256 totalWorkingLendOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalCollateralAmount,\\n            uint256 totalLentAmount,\\n            uint256 totalWorkingBorrowOrdersAmount,\\n            uint256 totalDebtAmount,\\n            uint256 totalBorrowedAmount\\n        );\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor,\\n        uint256 orderFeeRate,\\n        uint256 circuitBreakerLimitRange\\n    ) external;\\n\\n    function createOrderBook(bytes32 ccy, uint256 marketOpeningDate) external;\\n\\n    function executeOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecuteOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function executePreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecutesPreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function unwindPosition(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function executeItayoseCalls(bytes32[] calldata currencies, uint256 maturity)\\n        external\\n        returns (bool);\\n\\n    function executeRedemption(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeRepayment(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeEmergencySettlement() external returns (bool);\\n\\n    function executeLiquidationCall(\\n        bytes32 collateralCcy,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        address user\\n    ) external returns (bool);\\n\\n    function executeForcedRepayment(\\n        bytes32 _collateralCcy,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity,\\n        address _user\\n    ) external returns (bool);\\n\\n    function cancelOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint48 orderId\\n    ) external returns (bool);\\n\\n    function rotateOrderBooks(bytes32 ccy) external;\\n\\n    function executeEmergencyTermination() external;\\n\\n    function pauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function cleanUpAllFunds(address user) external returns (bool);\\n\\n    function cleanUpFunds(bytes32 ccy, address user) external returns (uint256 activeOrderCount);\\n}\\n\",\"keccak256\":\"0x38bce09fbe304cd521229905315f21fbd72bc8833dd0065a01d913398335bf49\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IReserveFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IReserveFund {\\n    event Pause(address account);\\n    event Unpause(address account);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xa2a6df7a095ca8f8874d26672f75fe1f09c45caf041cb27d5e265bcb974a9754\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\n\\ninterface ITokenVault {\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress, bool isCollateral);\\n    event CurrencyUpdated(bytes32 ccy, bool isCollateral);\\n\\n    function isCovered(address user) external view returns (bool);\\n\\n    function isCollateral(bytes32 ccy) external view returns (bool);\\n\\n    function isCollateral(bytes32[] calldata ccys)\\n        external\\n        view\\n        returns (bool[] memory isCollateralCurrencies);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getTokenAddress(bytes32 ccy) external view returns (address);\\n\\n    function getCollateralCurrencies() external view returns (bytes32[] memory);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256 maxWithdraw);\\n\\n    function getWithdrawableCollateral(bytes32 ccy, address user) external view returns (uint256);\\n\\n    function getCoverage(address user) external view returns (uint256 coverage);\\n\\n    function getUnusedCollateral(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address user) external view returns (uint256);\\n\\n    function getCollateralAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getLiquidationAmount(\\n        address user,\\n        bytes32 liquidationCcy,\\n        uint256 liquidationAmountMaximum\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liquidationAmount,\\n            uint256 protocolFee,\\n            uint256 liquidatorFee\\n        );\\n\\n    function getTotalDepositAmount(bytes32 ccy) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function calculateCoverage(address user, ILendingMarketController.AdditionalFunds memory funds)\\n        external\\n        view\\n        returns (uint256 coverage, bool isInsufficientDepositAmount);\\n\\n    function calculateLiquidationFees(uint256 liquidationAmount)\\n        external\\n        view\\n        returns (uint256 protocolFee, uint256 liquidatorFee);\\n\\n    function getCollateralParameters()\\n        external\\n        view\\n        returns (\\n            uint256 liquidationThresholdRate,\\n            uint256 liquidationProtocolFeeRate,\\n            uint256 liquidatorFeeRate\\n        );\\n\\n    function setCollateralParameters(\\n        uint256 liquidationThresholdRate,\\n        uint256 liquidationProtocolFeeRate,\\n        uint256 liquidatorFeeRate\\n    ) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositFrom(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function removeDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function executeForcedReset(address user, bytes32 ccy) external returns (uint256 removedAmount);\\n\\n    function transferFrom(\\n        bytes32 ccy,\\n        address sender,\\n        address receiver,\\n        uint256 amount\\n    ) external returns (uint256 untransferredAmount);\\n\\n    function pauseVault() external;\\n\\n    function unpauseVault() external;\\n}\\n\",\"keccak256\":\"0xe81a56c869d6fb1e5777360aaca03dd16d8d05938e22f4aba34fb8985c9599ee\",\"license\":\"MIT\"},\"contracts/protocol/libraries/AddressResolverLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/mixins/MixinAddressResolverStorage.sol\\\";\\n\\nlibrary AddressResolverLib {\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return IReserveFund(getAddress(Contracts.RESERVE_FUND));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0xbf09c038b64e29b33451c82c4364c0c670f6b046e51caf46885128f3020cfac3\",\"license\":\"MIT\"},\"contracts/protocol/libraries/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n\\n    function timestampFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            hour *\\n            SECONDS_PER_HOUR +\\n            minute *\\n            SECONDS_PER_MINUTE +\\n            second;\\n    }\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint256 daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isValidDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isLeapYear(uint256 timestamp) internal pure returns (bool leapYear) {\\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n\\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n\\n    function getDaysInMonth(uint256 timestamp) internal pure returns (uint256 daysInMonth) {\\n        (uint256 year, uint256 month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n\\n    function _getDaysInMonth(uint256 year, uint256 month)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        if (\\n            month == 1 ||\\n            month == 3 ||\\n            month == 5 ||\\n            month == 7 ||\\n            month == 8 ||\\n            month == 10 ||\\n            month == 12\\n        ) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint256 timestamp) internal pure returns (uint256 dayOfWeek) {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n\\n    function getMinute(uint256 timestamp) internal pure returns (uint256 minute) {\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    function getSecond(uint256 timestamp) internal pure returns (uint256 second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = ((month - 1) % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = (yearMonth % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _years)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint256 fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint256 toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n\\n    function diffMonths(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _months)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint256 fromYear, uint256 fromMonth, ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint256 toYear, uint256 toMonth, ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n\\n    function diffDays(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _days)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n\\n    function diffHours(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _hours)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n\\n    function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _minutes)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n\\n    function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _seconds)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xe63d0d21b9b0bcdda93e169220d4ea9e5d1817a286f7ff0608f310defce26609\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Constants {\\n    /// @dev Used for price digits in the basis (10000 -> 1)\\n    uint256 internal constant PRICE_DIGIT = 10000;\\n\\n    /// @dev Used for percentage digits in the basis (10000 -> 100%)\\n    uint256 internal constant PCT_DIGIT = 10000;\\n\\n    /// @dev Used for seconds in year (60 * 60 * 24 * 365)\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000;\\n\\n    /// @dev Used for maximum order count per currency\\n    uint256 internal constant MAXIMUM_ORDER_COUNT = 20;\\n\\n    /// @dev Used for minimum threshold for circuit breaker unit price threshold\\n    uint256 internal constant MINIMUM_CIRCUIT_BREAKER_THRESHOLD = 10;\\n\\n    /// @dev Used for maximum threshold for circuit breaker unit price threshold\\n    uint256 internal constant MAXIMUM_CIRCUIT_BREAKER_THRESHOLD = 200;\\n}\\n\",\"keccak256\":\"0xb28617044bbc6477a36a631edcae68333b3c18a6df9453459d9e5164a16eef9f\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant RESERVE_FUND = \\\"ReserveFund\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE_VAULT = \\\"FutureValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0x8e73eead72efa03bcc03c1cdf72cdcebed0f7e6f5a58cda1fd74e0fc03f356e6\",\"license\":\"MIT\"},\"contracts/protocol/libraries/OrderBookLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Constants} from \\\"./Constants.sol\\\";\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {OrderStatisticsTreeLib, PartiallyRemovedOrder} from \\\"./OrderStatisticsTreeLib.sol\\\";\\nimport {RoundingUint256} from \\\"./math/RoundingUint256.sol\\\";\\n\\nstruct PlacedOrder {\\n    ProtocolTypes.Side side;\\n    uint256 unitPrice;\\n    uint256 maturity;\\n    uint256 timestamp;\\n}\\n\\nstruct FilledOrder {\\n    uint256 amount;\\n    uint256 unitPrice;\\n    uint256 futureValue;\\n    uint256 ignoredAmount;\\n}\\n\\nstruct PartiallyFilledOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 futureValue;\\n}\\n\\nlibrary OrderBookLib {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n    using RoundingUint256 for uint256;\\n\\n    uint256 private constant PRE_ORDER_PERIOD = 7 days;\\n    uint256 private constant ITAYOSE_PERIOD = 1 hours;\\n\\n    struct OrderBook {\\n        uint48 lastOrderId;\\n        uint256 openingDate;\\n        uint256 maturity;\\n        // Mapping from user to active lend order ids\\n        mapping(address => uint48[]) activeLendOrderIds;\\n        // Mapping from user to active borrow order ids\\n        mapping(address => uint48[]) activeBorrowOrderIds;\\n        // Mapping from user to current maturity\\n        mapping(address => uint256) userCurrentMaturities;\\n        // Mapping from orderId to order micro slots\\n        mapping(uint256 => uint256) orders;\\n        // Mapping from orderId to boolean for pre-order or not\\n        mapping(uint256 => bool) isPreOrder;\\n        // Mapping from maturity to lending orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) lendOrders;\\n        // Mapping from maturity to borrowing orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) borrowOrders;\\n        // Mapping from order side to threshold unit price of circuit breaker per block\\n        mapping(uint256 => mapping(ProtocolTypes.Side => uint256)) circuitBreakerThresholdUnitPrices;\\n    }\\n\\n    function initialize(\\n        OrderBook storage self,\\n        uint256 _maturity,\\n        uint256 _openingDate\\n    ) internal returns (bool isReady) {\\n        self.maturity = _maturity;\\n        self.openingDate = _openingDate;\\n\\n        if (block.timestamp >= (_openingDate - ITAYOSE_PERIOD)) {\\n            isReady = true;\\n        }\\n    }\\n\\n    function isMatured(OrderBook storage self) internal view returns (bool) {\\n        return block.timestamp >= self.maturity;\\n    }\\n\\n    function getBestBorrowUnitPrice(OrderBook storage self) internal view returns (uint256) {\\n        return self.lendOrders[self.maturity].last();\\n    }\\n\\n    function getBestLendUnitPrice(OrderBook storage self) internal view returns (uint256) {\\n        uint256 unitPrice = self.borrowOrders[self.maturity].first();\\n        return unitPrice == 0 ? Constants.PRICE_DIGIT : unitPrice;\\n    }\\n\\n    function hasBorrowOrder(OrderBook storage self, address _user) internal view returns (bool) {\\n        return self.activeBorrowOrderIds[_user].length != 0;\\n    }\\n\\n    function hasLendOrder(OrderBook storage self, address _user) internal view returns (bool) {\\n        return self.activeLendOrderIds[_user].length != 0;\\n    }\\n\\n    function getOrder(OrderBook storage self, uint256 _orderId)\\n        internal\\n        view\\n        returns (PlacedOrder memory order)\\n    {\\n        (\\n            ProtocolTypes.Side side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            uint256 timestamp\\n        ) = _unpackOrder(self.orders[_orderId]);\\n        order = PlacedOrder(side, unitPrice, maturity, timestamp);\\n    }\\n\\n    function getLendOrderBook(OrderBook storage self, uint256 _limit)\\n        internal\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = self.lendOrders[self.maturity].last();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = self.lendOrders[self.maturity].getNodeTotalAmount(unitPrice);\\n        quantities[0] = self.lendOrders[self.maturity].getNodeCount(unitPrice);\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = self.lendOrders[self.maturity].prev(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = self.lendOrders[self.maturity].getNodeTotalAmount(unitPrice);\\n            quantities[i] = self.lendOrders[self.maturity].getNodeCount(unitPrice);\\n        }\\n    }\\n\\n    function getBorrowOrderBook(OrderBook storage self, uint256 _limit)\\n        internal\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = self.borrowOrders[self.maturity].first();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = self.borrowOrders[self.maturity].getNodeTotalAmount(unitPrice);\\n        quantities[0] = self.borrowOrders[self.maturity].getNodeCount(unitPrice);\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = self.borrowOrders[self.maturity].next(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = self.borrowOrders[self.maturity].getNodeTotalAmount(unitPrice);\\n            quantities[i] = self.borrowOrders[self.maturity].getNodeCount(unitPrice);\\n        }\\n    }\\n\\n    function getLendOrderIds(OrderBook storage self, address _user)\\n        internal\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        uint256 userMaturity = self.userCurrentMaturities[_user];\\n        bool isPastMaturity = userMaturity != self.maturity;\\n\\n        uint48[] memory orderIds = self.activeLendOrderIds[_user];\\n        uint256 orderIdLength = orderIds.length;\\n        activeOrderIds = new uint48[](isPastMaturity ? 0 : orderIdLength);\\n        inActiveOrderIds = new uint48[](orderIdLength);\\n\\n        for (uint256 i; i < orderIdLength; i++) {\\n            uint48 orderId = orderIds[i];\\n            (, uint256 unitPrice, , ) = _unpackOrder(self.orders[orderId]);\\n\\n            if (!self.lendOrders[userMaturity].isActiveOrderId(unitPrice, orderId)) {\\n                unchecked {\\n                    inActiveOrderCount += 1;\\n                }\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                if (!isPastMaturity) {\\n                    unchecked {\\n                        activeOrderCount += 1;\\n                    }\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function getBorrowOrderIds(OrderBook storage self, address _user)\\n        internal\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        uint256 userMaturity = self.userCurrentMaturities[_user];\\n        bool isPastMaturity = userMaturity != self.maturity;\\n\\n        uint48[] memory orderIds = self.activeBorrowOrderIds[_user];\\n        uint256 orderIdLength = orderIds.length;\\n        activeOrderIds = new uint48[](isPastMaturity ? 0 : orderIdLength);\\n        inActiveOrderIds = new uint48[](orderIdLength);\\n\\n        for (uint256 i; i < orderIdLength; i++) {\\n            uint48 orderId = orderIds[i];\\n            (, uint256 unitPrice, , ) = _unpackOrder(self.orders[orderId]);\\n\\n            if (!self.borrowOrders[userMaturity].isActiveOrderId(unitPrice, orderId)) {\\n                unchecked {\\n                    inActiveOrderCount += 1;\\n                }\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                unchecked {\\n                    activeOrderCount += 1;\\n                }\\n                if (!isPastMaturity) {\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function calculateFilledAmount(\\n        OrderBook storage self,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV\\n        )\\n    {\\n        if (_amount == 0) return (0, 0, 0);\\n\\n        if (_side == ProtocolTypes.Side.LEND) {\\n            return\\n                self.borrowOrders[self.maturity].calculateDroppedAmountFromLeft(\\n                    _amount,\\n                    0,\\n                    _unitPrice\\n                );\\n        } else {\\n            return\\n                self.lendOrders[self.maturity].calculateDroppedAmountFromRight(\\n                    _amount,\\n                    0,\\n                    _unitPrice\\n                );\\n        }\\n    }\\n\\n    function updateUserMaturity(OrderBook storage self, address _user) internal {\\n        uint256 userMaturity = self.userCurrentMaturities[_user];\\n        uint256 orderBookMaturity = self.maturity;\\n\\n        require(\\n            userMaturity == orderBookMaturity ||\\n                (userMaturity != orderBookMaturity &&\\n                    self.activeLendOrderIds[_user].length == 0 &&\\n                    self.activeBorrowOrderIds[_user].length == 0),\\n            \\\"Order found in past maturity\\\"\\n        );\\n\\n        if (userMaturity != orderBookMaturity) {\\n            self.userCurrentMaturities[_user] = orderBookMaturity;\\n        }\\n    }\\n\\n    function placeOrder(\\n        OrderBook storage self,\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) internal returns (uint48 orderId) {\\n        orderId = _nextOrderId(self);\\n        self.orders[orderId] = _packOrder(_side, _unitPrice, self.maturity, block.timestamp);\\n\\n        if (_side == ProtocolTypes.Side.LEND) {\\n            self.lendOrders[self.maturity].insertOrder(_unitPrice, orderId, _user, _amount);\\n            self.activeLendOrderIds[_user].push(orderId);\\n        } else if (_side == ProtocolTypes.Side.BORROW) {\\n            self.borrowOrders[self.maturity].insertOrder(_unitPrice, orderId, _user, _amount);\\n            self.activeBorrowOrderIds[_user].push(orderId);\\n        }\\n    }\\n\\n    function fillOrders(\\n        OrderBook storage self,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _amountInFV,\\n        uint256 _unitPrice\\n    )\\n        internal\\n        returns (\\n            FilledOrder memory filledOrder,\\n            PartiallyFilledOrder memory partiallyFilledOrder,\\n            uint256 remainingAmount,\\n            bool orderExists\\n        )\\n    {\\n        PartiallyRemovedOrder memory partiallyRemovedOrder;\\n\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            OrderStatisticsTreeLib.Tree storage orders = self.lendOrders[self.maturity];\\n            (\\n                filledOrder.unitPrice,\\n                filledOrder.amount,\\n                filledOrder.futureValue,\\n                remainingAmount,\\n                partiallyRemovedOrder\\n            ) = orders.dropRight(_amount, _amountInFV, _unitPrice);\\n            orderExists = orders.hasOrders();\\n        } else if (_side == ProtocolTypes.Side.LEND) {\\n            OrderStatisticsTreeLib.Tree storage orders = self.borrowOrders[self.maturity];\\n            (\\n                filledOrder.unitPrice,\\n                filledOrder.amount,\\n                filledOrder.futureValue,\\n                remainingAmount,\\n                partiallyRemovedOrder\\n            ) = orders.dropLeft(_amount, _amountInFV, _unitPrice);\\n            orderExists = orders.hasOrders();\\n        }\\n\\n        partiallyFilledOrder = PartiallyFilledOrder(\\n            partiallyRemovedOrder.orderId,\\n            partiallyRemovedOrder.maker,\\n            partiallyRemovedOrder.amount,\\n            partiallyRemovedOrder.futureValue\\n        );\\n    }\\n\\n    function removeOrder(\\n        OrderBook storage self,\\n        address _user,\\n        uint48 _orderId\\n    )\\n        internal\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (ProtocolTypes.Side side, uint256 unitPrice, , ) = _unpackOrder(self.orders[_orderId]);\\n        uint256 removedAmount;\\n\\n        if (side == ProtocolTypes.Side.LEND) {\\n            removedAmount = self.lendOrders[self.maturity].removeOrder(unitPrice, _orderId);\\n            _removeOrderIdFromOrders(self.activeLendOrderIds[_user], _orderId);\\n        } else if (side == ProtocolTypes.Side.BORROW) {\\n            removedAmount = self.borrowOrders[self.maturity].removeOrder(unitPrice, _orderId);\\n            _removeOrderIdFromOrders(self.activeBorrowOrderIds[_user], _orderId);\\n        }\\n\\n        delete self.orders[_orderId];\\n\\n        return (side, removedAmount, unitPrice);\\n    }\\n\\n    function getOpeningUnitPrice(OrderBook storage self)\\n        internal\\n        view\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 lastLendUnitPrice,\\n            uint256 lastBorrowUnitPrice,\\n            uint256 totalOffsetAmount\\n        )\\n    {\\n        uint256 lendUnitPrice = getBestBorrowUnitPrice(self);\\n        uint256 borrowUnitPrice = getBestLendUnitPrice(self);\\n        uint256 lendAmount = self.lendOrders[self.maturity].getNodeTotalAmount(lendUnitPrice);\\n        uint256 borrowAmount = self.borrowOrders[self.maturity].getNodeTotalAmount(borrowUnitPrice);\\n\\n        OrderStatisticsTreeLib.Tree storage borrowOrders = self.borrowOrders[self.maturity];\\n        OrderStatisticsTreeLib.Tree storage lendOrders = self.lendOrders[self.maturity];\\n\\n        // return mid price when no lending and borrowing orders overwrap\\n        if (borrowUnitPrice > lendUnitPrice) {\\n            openingUnitPrice = (lendUnitPrice + borrowUnitPrice).div(2);\\n            return (openingUnitPrice, 0, 0, 0);\\n        }\\n\\n        while (borrowUnitPrice <= lendUnitPrice && borrowUnitPrice > 0 && lendUnitPrice > 0) {\\n            lastLendUnitPrice = lendUnitPrice;\\n            lastBorrowUnitPrice = borrowUnitPrice;\\n\\n            if (lendAmount > borrowAmount) {\\n                openingUnitPrice = lendUnitPrice;\\n                totalOffsetAmount += borrowAmount;\\n                lendAmount -= borrowAmount;\\n                borrowUnitPrice = borrowOrders.next(borrowUnitPrice);\\n                borrowAmount = borrowOrders.getNodeTotalAmount(borrowUnitPrice);\\n            } else if (lendAmount < borrowAmount) {\\n                openingUnitPrice = borrowUnitPrice;\\n                totalOffsetAmount += lendAmount;\\n                borrowAmount -= lendAmount;\\n                lendUnitPrice = lendOrders.prev(lendUnitPrice);\\n                lendAmount = lendOrders.getNodeTotalAmount(lendUnitPrice);\\n            } else {\\n                openingUnitPrice = (lendUnitPrice + borrowUnitPrice).div(2);\\n                totalOffsetAmount += lendAmount;\\n                lendUnitPrice = lendOrders.prev(lendUnitPrice);\\n                borrowUnitPrice = borrowOrders.next(borrowUnitPrice);\\n                lendAmount = lendOrders.getNodeTotalAmount(lendUnitPrice);\\n                borrowAmount = borrowOrders.getNodeTotalAmount(borrowUnitPrice);\\n            }\\n        }\\n    }\\n\\n    function getAndUpdateOrderExecutionConditions(\\n        OrderBook storage self,\\n        ProtocolTypes.Side _side,\\n        uint256 _unitPrice,\\n        uint256 _circuitBreakerLimitRange\\n    )\\n        internal\\n        returns (\\n            bool isFilled,\\n            uint256 executedUnitPrice,\\n            bool ignoreRemainingAmount,\\n            bool orderExists\\n        )\\n    {\\n        uint256 cbThresholdUnitPrice;\\n        bool isFirstOrderInBlock;\\n\\n        (\\n            isFilled,\\n            executedUnitPrice,\\n            ignoreRemainingAmount,\\n            orderExists,\\n            cbThresholdUnitPrice,\\n            isFirstOrderInBlock\\n        ) = getOrderExecutionConditions(self, _side, _unitPrice, _circuitBreakerLimitRange);\\n\\n        if (isFirstOrderInBlock) {\\n            self.circuitBreakerThresholdUnitPrices[block.number][_side] = cbThresholdUnitPrice;\\n        }\\n    }\\n\\n    function getOrderExecutionConditions(\\n        OrderBook storage self,\\n        ProtocolTypes.Side _side,\\n        uint256 _unitPrice,\\n        uint256 _circuitBreakerLimitRange\\n    )\\n        internal\\n        view\\n        returns (\\n            bool isFilled,\\n            uint256 executedUnitPrice,\\n            bool ignoreRemainingAmount,\\n            bool orderExists,\\n            uint256 cbThresholdUnitPrice,\\n            bool isFirstOrderInBlock\\n        )\\n    {\\n        cbThresholdUnitPrice = self.circuitBreakerThresholdUnitPrices[block.number][_side];\\n        bool isLend = _side == ProtocolTypes.Side.LEND;\\n        uint256 bestUnitPrice;\\n\\n        if (isLend) {\\n            bestUnitPrice = self.borrowOrders[self.maturity].first();\\n            orderExists = bestUnitPrice != 0;\\n\\n            if (orderExists && cbThresholdUnitPrice == 0) {\\n                cbThresholdUnitPrice = _getLendCircuitBreakerThreshold(\\n                    _circuitBreakerLimitRange,\\n                    bestUnitPrice\\n                );\\n                isFirstOrderInBlock = true;\\n            }\\n        } else {\\n            bestUnitPrice = self.lendOrders[self.maturity].last();\\n            orderExists = bestUnitPrice != 0;\\n\\n            if (orderExists && cbThresholdUnitPrice == 0) {\\n                cbThresholdUnitPrice = _getBorrowCircuitBreakerThreshold(\\n                    _circuitBreakerLimitRange,\\n                    bestUnitPrice\\n                );\\n                isFirstOrderInBlock = true;\\n            }\\n        }\\n\\n        if (_unitPrice == 0 && !orderExists) revert(\\\"Order not found\\\");\\n\\n        if (\\n            _unitPrice == 0 ||\\n            (orderExists &&\\n                ((isLend && _unitPrice > cbThresholdUnitPrice) ||\\n                    (!isLend && _unitPrice < cbThresholdUnitPrice)))\\n        ) {\\n            executedUnitPrice = cbThresholdUnitPrice;\\n            ignoreRemainingAmount = true;\\n        } else {\\n            executedUnitPrice = _unitPrice;\\n            ignoreRemainingAmount = false;\\n        }\\n\\n        if (orderExists) {\\n            isFilled = isLend\\n                ? bestUnitPrice <= executedUnitPrice\\n                : bestUnitPrice >= executedUnitPrice;\\n        }\\n    }\\n\\n    function getCircuitBreakerThresholds(OrderBook storage self, uint256 _circuitBreakerLimitRange)\\n        internal\\n        view\\n        returns (uint256 maxLendUnitPrice, uint256 minBorrowUnitPrice)\\n    {\\n        maxLendUnitPrice = _getLendCircuitBreakerThreshold(\\n            _circuitBreakerLimitRange,\\n            getBestLendUnitPrice(self)\\n        );\\n        minBorrowUnitPrice = _getBorrowCircuitBreakerThreshold(\\n            _circuitBreakerLimitRange,\\n            getBestBorrowUnitPrice(self)\\n        );\\n    }\\n\\n    function _getBorrowCircuitBreakerThreshold(\\n        uint256 _circuitBreakerLimitRange,\\n        uint256 _unitPrice\\n    ) private pure returns (uint256 cbThresholdUnitPrice) {\\n        // NOTE: Formula of circuit breaker threshold for borrow orders:\\n        // cbThreshold = 100 / (1 + (100 / price - 1) * (1 + range))\\n        uint256 numerator = _unitPrice * Constants.PRICE_DIGIT * Constants.PCT_DIGIT;\\n        uint256 denominator = _unitPrice *\\n            Constants.PCT_DIGIT +\\n            (Constants.PRICE_DIGIT - _unitPrice) *\\n            (Constants.PCT_DIGIT + _circuitBreakerLimitRange);\\n        cbThresholdUnitPrice = numerator.div(denominator);\\n\\n        if (_unitPrice > cbThresholdUnitPrice + Constants.MAXIMUM_CIRCUIT_BREAKER_THRESHOLD) {\\n            cbThresholdUnitPrice = _unitPrice - Constants.MAXIMUM_CIRCUIT_BREAKER_THRESHOLD;\\n        } else if (\\n            _unitPrice < cbThresholdUnitPrice + Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n        ) {\\n            cbThresholdUnitPrice = _unitPrice > Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n                ? _unitPrice - Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n                : 1;\\n        }\\n    }\\n\\n    function _getLendCircuitBreakerThreshold(uint256 _circuitBreakerLimitRange, uint256 _unitPrice)\\n        private\\n        pure\\n        returns (uint256 cbThresholdUnitPrice)\\n    {\\n        // NOTE: Formula of circuit breaker threshold for lend orders:\\n        // cbThreshold = 100 / (1 + (100 / price - 1) * (1 - range))\\n        uint256 num = _unitPrice * Constants.PRICE_DIGIT * Constants.PCT_DIGIT;\\n        uint256 den = _unitPrice *\\n            Constants.PCT_DIGIT +\\n            (Constants.PRICE_DIGIT - _unitPrice) *\\n            (Constants.PCT_DIGIT - _circuitBreakerLimitRange);\\n        cbThresholdUnitPrice = num.div(den);\\n\\n        if (cbThresholdUnitPrice > _unitPrice + Constants.MAXIMUM_CIRCUIT_BREAKER_THRESHOLD) {\\n            cbThresholdUnitPrice = _unitPrice + Constants.MAXIMUM_CIRCUIT_BREAKER_THRESHOLD;\\n        } else if (\\n            cbThresholdUnitPrice < _unitPrice + Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n        ) {\\n            cbThresholdUnitPrice = _unitPrice + Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD <=\\n                Constants.PRICE_DIGIT\\n                ? _unitPrice + Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n                : Constants.PRICE_DIGIT;\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases and returns id of last order in order book.\\n     * @return The new order id\\n     */\\n    function _nextOrderId(OrderBook storage self) private returns (uint48) {\\n        self.lastOrderId++;\\n        return self.lastOrderId;\\n    }\\n\\n    function _removeOrderIdFromOrders(uint48[] storage orders, uint256 orderId) private {\\n        uint256 lastOrderIndex = orders.length - 1;\\n        for (uint256 i; i <= lastOrderIndex; i++) {\\n            if (orders[i] == orderId) {\\n                if (i != lastOrderIndex) {\\n                    uint48 lastOrderId = orders[lastOrderIndex];\\n                    orders[i] = lastOrderId;\\n                }\\n\\n                orders.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Packs order parameters into uint256\\n     */\\n    function _packOrder(\\n        ProtocolTypes.Side _side,\\n        uint256 _unitPrice,\\n        uint256 _maturity,\\n        uint256 _timestamp\\n    ) private pure returns (uint256) {\\n        return uint256(_side) | (_unitPrice << 8) | (_maturity << 24) | (_timestamp << 88);\\n    }\\n\\n    /**\\n     * @notice Unpacks order parameters from uint256\\n     */\\n    function _unpackOrder(uint256 _order)\\n        private\\n        pure\\n        returns (\\n            ProtocolTypes.Side side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            uint256 timestamp\\n        )\\n    {\\n        side = ProtocolTypes.Side(uint8(_order));\\n        unitPrice = uint16(_order >> 8);\\n        maturity = uint64(_order >> 24);\\n        timestamp = uint64(_order >> 88);\\n    }\\n}\\n\",\"keccak256\":\"0x7b258f2599d807e1c1dfda1b2c181f6852587407897622b4ed6ab8a3fb5e5468\",\"license\":\"MIT\"},\"contracts/protocol/libraries/OrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// libraries\\nimport {Constants} from \\\"../libraries/Constants.sol\\\";\\n// types\\nimport {RoundingUint256} from \\\"./math/RoundingUint256.sol\\\";\\n\\nstruct RemainingOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 unitPrice;\\n}\\n\\nstruct PartiallyRemovedOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 futureValue;\\n}\\n\\n/**\\n * @notice OrderStatisticsTreeLib is a Red-Black Tree binary search library\\n * based on the following library that is extended to manage order data.\\n *\\n * https://github.com/rob-Hitchens/OrderStatisticsTree\\n *\\n */\\nlibrary OrderStatisticsTreeLib {\\n    using RoundingUint256 for uint256;\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint48 head;\\n        uint48 tail;\\n        uint256 orderCounter;\\n        uint256 orderTotalAmount;\\n        mapping(uint256 => OrderItem) orders;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    struct OrderItem {\\n        uint48 orderId;\\n        uint48 next;\\n        uint48 prev;\\n        address maker;\\n        uint256 timestamp;\\n        uint256 amount;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].right != EMPTY) {\\n            _value = self.nodes[_value].right;\\n        }\\n    }\\n\\n    function hasOrders(Tree storage self) internal view returns (bool) {\\n        return self.root != EMPTY;\\n    }\\n\\n    function next(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(401) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].right != EMPTY) {\\n            _cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(402) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].left != EMPTY) {\\n            _cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint256 value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        // if (self.nodes[value].parent != EMPTY) return true;\\n        uint256 cursor = value;\\n        while (self.nodes[cursor].parent != EMPTY) {\\n            uint256 parent = self.nodes[cursor].parent;\\n            if (self.nodes[parent].left != cursor && self.nodes[parent].right != cursor) {\\n                return false;\\n            }\\n            if (parent == self.root) {\\n                return true;\\n            }\\n            cursor = self.nodes[cursor].parent;\\n        }\\n        return false;\\n    }\\n\\n    function isActiveOrderId(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        return orderIdExists(self, value, orderId) && exists(self, value);\\n    }\\n\\n    function getNode(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n        return (\\n            gn.parent,\\n            gn.left,\\n            gn.right,\\n            gn.red,\\n            gn.head,\\n            gn.tail,\\n            gn.orderCounter,\\n            gn.orderTotalAmount\\n        );\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function getNodeTotalAmount(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint256 totalAmount)\\n    {\\n        return self.nodes[value].orderTotalAmount;\\n    }\\n\\n    function getNodeOrderIds(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint48[] memory orderIds)\\n    {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[gn.head];\\n        orderIds = new uint48[](gn.orderCounter);\\n\\n        for (uint256 i; i < gn.orderCounter; i++) {\\n            orderIds[i] = order.orderId;\\n            order = gn.orders[order.next];\\n        }\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256 _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(405) - Value to insert cannot be zero\\\");\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                return;\\n            }\\n        }\\n\\n        Node storage nValue = self.nodes[value];\\n        // Update order info as a new one if there is already an old node\\n        if (\\n            self.root == EMPTY ||\\n            (self.nodes[cursor].left != value && self.nodes[cursor].right != value)\\n        ) {\\n            nValue.orderCounter = 0;\\n            nValue.orderTotalAmount = 0;\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        }\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(407) - Value to delete cannot be zero\\\");\\n        Node storage nValue = self.nodes[value];\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint256 a,\\n        uint256 b\\n    ) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    function calculateDroppedAmountFromLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 droppedValue,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV\\n        )\\n    {\\n        (droppedValue, , , droppedAmount, droppedAmountInFV, , ) = _calculateDroppedAmountFromLeft(\\n            self,\\n            amount,\\n            amountInFV,\\n            limitValue,\\n            first(self)\\n        );\\n    }\\n\\n    function calculateDroppedAmountFromRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 droppedValue,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV\\n        )\\n    {\\n        (droppedValue, , , droppedAmount, droppedAmountInFV, , ) = _calculateDroppedAmountFromRight(\\n            self,\\n            amount,\\n            amountInFV,\\n            limitValue,\\n            last(self)\\n        );\\n    }\\n\\n    function dropLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 droppedValue,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV,\\n            uint256 remainingAmount,\\n            PartiallyRemovedOrder memory partiallyRemovedOrder\\n        )\\n    {\\n        uint256 cursor = first(self);\\n        uint256 cursorNodeAmount;\\n        uint256 exceededAmount;\\n        uint256 exceededAmountInFV;\\n\\n        require(cursor <= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        (\\n            droppedValue,\\n            cursor,\\n            cursorNodeAmount,\\n            droppedAmount,\\n            droppedAmountInFV,\\n            exceededAmount,\\n            exceededAmountInFV\\n        ) = _calculateDroppedAmountFromLeft(self, amount, amountInFV, limitValue, cursor);\\n\\n        uint256 totalNodeAmount = droppedAmount + exceededAmount;\\n\\n        if (totalNodeAmount > 0) {\\n            if (exceededAmount > 0) {\\n                cursor = droppedValue;\\n                // Update order ids in the node.\\n                partiallyRemovedOrder = removeOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - exceededAmount\\n                );\\n            } else if (exceededAmountInFV > 0) {\\n                cursor = droppedValue;\\n                // Update order ids in the node.\\n                partiallyRemovedOrder = removeOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, exceededAmountInFV)\\n                );\\n            }\\n\\n            self.nodes[cursor].left = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent > cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].left = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalNodeAmount) {\\n            remainingAmount = amount - totalNodeAmount;\\n        }\\n\\n        uint256 lastNode = last(self);\\n\\n        if (lastNode == droppedValue && self.nodes[lastNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (\\n            droppedValue > self.root ||\\n            (droppedValue == self.root && droppedAmount >= totalNodeAmount)\\n        ) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToLeft(self);\\n    }\\n\\n    function dropRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 droppedValue,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV,\\n            uint256 remainingAmount,\\n            PartiallyRemovedOrder memory partiallyRemovedOrder\\n        )\\n    {\\n        uint256 cursor = last(self);\\n        uint256 cursorNodeAmount;\\n        uint256 exceededAmount;\\n        uint256 exceededAmountInFV;\\n\\n        require(cursor >= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        (\\n            droppedValue,\\n            cursor,\\n            cursorNodeAmount,\\n            droppedAmount,\\n            droppedAmountInFV,\\n            exceededAmount,\\n            exceededAmountInFV\\n        ) = _calculateDroppedAmountFromRight(self, amount, amountInFV, limitValue, cursor);\\n\\n        uint256 totalNodeAmount = droppedAmount + exceededAmount;\\n\\n        if (totalNodeAmount > 0) {\\n            if (exceededAmount > 0) {\\n                cursor = droppedValue;\\n                // Update order ids in the node.\\n                partiallyRemovedOrder = removeOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - exceededAmount\\n                );\\n            } else if (exceededAmountInFV > 0) {\\n                cursor = droppedValue;\\n                // Update order ids in the node.\\n                partiallyRemovedOrder = removeOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, exceededAmountInFV)\\n                );\\n            }\\n\\n            self.nodes[cursor].right = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent < cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].right = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalNodeAmount) {\\n            remainingAmount = amount - totalNodeAmount;\\n        }\\n\\n        uint256 firstNode = first(self);\\n\\n        if (firstNode == droppedValue && self.nodes[firstNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (\\n            droppedValue < self.root ||\\n            (droppedValue == self.root && droppedAmount >= totalNodeAmount)\\n        ) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToRight(self);\\n    }\\n\\n    function rotateTreeToLeft(Tree storage self) internal {\\n        if (self.nodes[self.root].left == 0 && self.nodes[self.root].right != 0) {\\n            if (self.nodes[self.nodes[self.root].right].left != 0) {\\n                rotateRight(self, self.nodes[self.root].right);\\n            }\\n            rotateLeft(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function rotateTreeToRight(Tree storage self) internal {\\n        if (self.nodes[self.root].right == 0 && self.nodes[self.root].left != 0) {\\n            if (self.nodes[self.nodes[self.root].left].right != 0) {\\n                rotateLeft(self, self.nodes[self.root].left);\\n            }\\n            rotateRight(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function getFutureValue(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (uint256) {\\n        return _calculateFutureValue(value, self.nodes[value].orders[orderId].amount);\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    )\\n        internal\\n        view\\n        returns (\\n            address maker,\\n            uint256 timestamp,\\n            uint256 amount\\n        )\\n    {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[orderId];\\n\\n        maker = order.maker;\\n        timestamp = order.timestamp;\\n        amount = order.amount;\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function orderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        uint48 cursor = orderId;\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[cursor];\\n\\n        if (order.orderId != cursor) {\\n            return false;\\n        }\\n\\n        while (order.prev != EMPTY) {\\n            cursor = order.prev;\\n            order = gn.orders[cursor];\\n        }\\n\\n        return cursor == gn.head;\\n    }\\n\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal {\\n        require(amount > 0, \\\"Insufficient amount\\\");\\n        require(value <= Constants.PRICE_DIGIT, \\\"Insufficient value\\\");\\n        insert(self, value);\\n\\n        addTail(self, value, orderId, user, amount);\\n    }\\n\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        amount = _removeOrder(self, value, orderId);\\n        remove(self, value);\\n    }\\n\\n    function removeOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount\\n    ) internal returns (PartiallyRemovedOrder memory partiallyRemovedOrder) {\\n        Node storage gn = self.nodes[value];\\n\\n        require(\\n            gn.orderTotalAmount >= _amount,\\n            \\\"OrderStatisticsTree(410) - Amount to fill is insufficient\\\"\\n        );\\n\\n        uint256 remainingAmount = _amount;\\n        OrderItem memory currentOrder = gn.orders[gn.head];\\n        uint48 orderId = gn.head;\\n\\n        while (orderId != 0 && remainingAmount != 0) {\\n            currentOrder = gn.orders[orderId];\\n\\n            if (currentOrder.amount <= remainingAmount) {\\n                remainingAmount -= currentOrder.amount;\\n                orderId = currentOrder.next;\\n            } else {\\n                partiallyRemovedOrder = PartiallyRemovedOrder(\\n                    currentOrder.orderId,\\n                    currentOrder.maker,\\n                    remainingAmount,\\n                    _calculateFutureValue(value, remainingAmount)\\n                );\\n                currentOrder = gn.orders[currentOrder.prev];\\n                break;\\n            }\\n        }\\n\\n        if (currentOrder.orderId != 0) {\\n            _removeOrders(self, value, currentOrder.orderId);\\n        }\\n\\n        if (partiallyRemovedOrder.amount > 0) {\\n            self.nodes[value].orders[partiallyRemovedOrder.orderId].amount -= partiallyRemovedOrder\\n                .amount;\\n            self.nodes[value].orderTotalAmount -= partiallyRemovedOrder.amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n        uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n        _link(self, _value, orderId, gn.head);\\n        _setHead(self, _value, orderId);\\n        if (gn.tail == 0) _setTail(self, _value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, _value, _orderId, _user, _amount);\\n        } else {\\n            uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n            _link(self, _value, gn.tail, orderId);\\n            _setTail(self, _value, orderId);\\n        }\\n    }\\n\\n    function _calculateDroppedAmountFromLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue,\\n        uint256 firstValue\\n    )\\n        private\\n        view\\n        returns (\\n            uint256 droppedValue,\\n            uint256 cursor,\\n            uint256 cursorNodeAmount,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV,\\n            uint256 exceededAmount,\\n            uint256 exceededAmountInFV\\n        )\\n    {\\n        cursor = firstValue;\\n\\n        while (\\n            (droppedAmount < amount || amount == EMPTY) &&\\n            (droppedAmountInFV < amountInFV || amountInFV == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor <= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            droppedValue = cursor;\\n\\n            droppedAmountInFV += _calculateFutureValue(cursor, cursorNodeAmount);\\n            droppedAmount += cursorNodeAmount;\\n\\n            if (droppedAmount > amount && amount != EMPTY) {\\n                exceededAmount = droppedAmount - amount;\\n                exceededAmountInFV = _calculateFutureValue(cursor, exceededAmount);\\n            } else if (droppedAmountInFV > amountInFV && amountInFV != EMPTY) {\\n                exceededAmountInFV = droppedAmountInFV - amountInFV;\\n                exceededAmount = _calculatePresentValue(cursor, exceededAmountInFV);\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n\\n        if (exceededAmount > 0) {\\n            droppedAmount -= exceededAmount;\\n        }\\n        if (exceededAmountInFV > 0) {\\n            droppedAmountInFV -= exceededAmountInFV;\\n        }\\n    }\\n\\n    function _calculateDroppedAmountFromRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue,\\n        uint256 lastValue\\n    )\\n        private\\n        view\\n        returns (\\n            uint256 droppedValue,\\n            uint256 cursor,\\n            uint256 cursorNodeAmount,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV,\\n            uint256 exceededAmount,\\n            uint256 exceededAmountInFV\\n        )\\n    {\\n        cursor = lastValue;\\n\\n        while (\\n            (droppedAmount < amount || amount == EMPTY) &&\\n            (droppedAmountInFV < amountInFV || amountInFV == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor >= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            droppedValue = cursor;\\n\\n            droppedAmountInFV += _calculateFutureValue(cursor, cursorNodeAmount);\\n            droppedAmount += cursorNodeAmount;\\n\\n            if (droppedAmount > amount && amount != EMPTY) {\\n                exceededAmount = droppedAmount - amount;\\n                exceededAmountInFV = _calculateFutureValue(cursor, exceededAmount);\\n            } else if (droppedAmountInFV > amountInFV && amountInFV != EMPTY) {\\n                exceededAmountInFV = droppedAmountInFV - amountInFV;\\n                exceededAmount = _calculatePresentValue(cursor, exceededAmountInFV);\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n\\n        if (exceededAmount > 0) {\\n            droppedAmount -= exceededAmount;\\n        }\\n        if (exceededAmountInFV > 0) {\\n            droppedAmountInFV -= exceededAmountInFV;\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint48) {\\n        Node storage gn = self.nodes[value];\\n        require(\\n            gn.orders[orderId].timestamp == 0,\\n            \\\"OrderStatisticsTree(409) - Order id already exist.\\\"\\n        );\\n\\n        gn.orderCounter += 1;\\n        gn.orderTotalAmount += amount;\\n        OrderItem memory order = OrderItem(orderId, 0, 0, user, block.timestamp, amount);\\n        gn.orders[orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the list.\\n     */\\n    function _removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n        gn.orderTotalAmount -= order.amount;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItems older than or equal `orderId` from the list\\n     */\\n    function _removeOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n        uint256 cursor = gn.head;\\n        uint256 removedCount = 1;\\n        uint256 removedAmount = gn.orders[cursor].amount;\\n\\n        while (cursor != orderId) {\\n            cursor = gn.orders[cursor].next;\\n            removedCount++;\\n            removedAmount += gn.orders[cursor].amount;\\n        }\\n\\n        if (gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        }\\n\\n        gn.orderCounter -= removedCount;\\n        gn.orderTotalAmount -= removedAmount;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 _prevId,\\n        uint48 _nextId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[_prevId].next = _nextId;\\n        gn.orders[_nextId].prev = _prevId;\\n    }\\n\\n    function _calculateFutureValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * Constants.PRICE_DIGIT).div(unitPrice);\\n    }\\n\\n    function _calculatePresentValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * unitPrice).div(Constants.PRICE_DIGIT);\\n    }\\n}\\n\",\"keccak256\":\"0x4e077b74c0de9c21378280e0c9b26f6c76958ae3e436abc95e512d1642f7b2d8\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/LendingMarketOperationLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// dependencies\\nimport {IERC20} from \\\"../../../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport {SafeCast} from \\\"../../../dependencies/openzeppelin/utils/math/SafeCast.sol\\\";\\n// interfaces\\nimport {ILendingMarket} from \\\"../../interfaces/ILendingMarket.sol\\\";\\nimport {ILendingMarketController} from \\\"../../interfaces/ILendingMarketController.sol\\\";\\nimport {IFutureValueVault} from \\\"../../interfaces/IFutureValueVault.sol\\\";\\n// libraries\\nimport {AddressResolverLib} from \\\"../AddressResolverLib.sol\\\";\\nimport {BokkyPooBahsDateTimeLibrary as TimeLibrary} from \\\"../BokkyPooBahsDateTimeLibrary.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {FilledOrder, PartiallyFilledOrder} from \\\"../OrderBookLib.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\nimport {RoundingInt256} from \\\"../math/RoundingInt256.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"../../types/ProtocolTypes.sol\\\";\\n// storages\\nimport {LendingMarketControllerStorage as Storage, ObservationPeriodLog} from \\\"../../storages/LendingMarketControllerStorage.sol\\\";\\n\\nlibrary LendingMarketOperationLogic {\\n    using SafeCast for uint256;\\n    using RoundingUint256 for uint256;\\n    using SafeCast for uint256;\\n    using RoundingInt256 for int256;\\n\\n    uint256 private constant OBSERVATION_PERIOD = 6 hours;\\n\\n    event LendingMarketInitialized(\\n        bytes32 indexed ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor,\\n        uint256 orderFeeRate,\\n        uint256 circuitBreakerLimitRange,\\n        address lendingMarket,\\n        address futureValueVault\\n    );\\n\\n    event OrderBookCreated(\\n        bytes32 indexed ccy,\\n        uint8 indexed orderBookId,\\n        uint256 openingDate,\\n        uint256 maturity\\n    );\\n\\n    event OrderBooksRotated(bytes32 ccy, uint256 oldMaturity, uint256 newMaturity);\\n    event EmergencyTerminationExecuted(uint256 timestamp);\\n\\n    function getOrderBookDetails(bytes32[] memory _ccys)\\n        external\\n        view\\n        returns (ILendingMarketController.OrderBookDetail[] memory orderBookDetails)\\n    {\\n        uint256 totalCount;\\n\\n        ILendingMarketController.OrderBookDetail[][]\\n            memory detailLists = new ILendingMarketController.OrderBookDetail[][](_ccys.length);\\n\\n        for (uint256 i; i < _ccys.length; i++) {\\n            detailLists[i] = getOrderBookDetailsPerCurrency(_ccys[i]);\\n            totalCount += detailLists[i].length;\\n        }\\n\\n        orderBookDetails = new ILendingMarketController.OrderBookDetail[](totalCount);\\n        uint256 index;\\n        for (uint256 i; i < detailLists.length; i++) {\\n            for (uint256 j; j < detailLists[i].length; j++) {\\n                orderBookDetails[index] = detailLists[i][j];\\n                index++;\\n            }\\n        }\\n    }\\n\\n    function getOrderBookDetailsPerCurrency(bytes32 _ccy)\\n        public\\n        view\\n        returns (ILendingMarketController.OrderBookDetail[] memory orderBookDetail)\\n    {\\n        uint256[] memory maturities = ILendingMarket(Storage.slot().lendingMarkets[_ccy])\\n            .getMaturities(Storage.slot().orderBookIdLists[_ccy]);\\n        orderBookDetail = new ILendingMarketController.OrderBookDetail[](maturities.length);\\n\\n        for (uint256 i; i < maturities.length; i++) {\\n            uint256 maturity = maturities[i];\\n\\n            (\\n                uint256 bestLendUnitPrice,\\n                uint256 bestBorrowUnitPrice,\\n                uint256 midUnitPrice,\\n                uint256 maxLendUnitPrice,\\n                uint256 minBorrowUnitPrice,\\n                uint256 openingUnitPrice,\\n                uint256 openingDate,\\n                bool isReady\\n            ) = getOrderBookDetail(_ccy, maturity);\\n\\n            orderBookDetail[i] = ILendingMarketController.OrderBookDetail(\\n                _ccy,\\n                maturity,\\n                bestLendUnitPrice,\\n                bestBorrowUnitPrice,\\n                midUnitPrice,\\n                maxLendUnitPrice,\\n                minBorrowUnitPrice,\\n                openingUnitPrice,\\n                openingDate,\\n                isReady\\n            );\\n        }\\n    }\\n\\n    function getOrderBookDetail(bytes32 _ccy, uint256 _maturity)\\n        public\\n        view\\n        returns (\\n            uint256 bestLendUnitPrice,\\n            uint256 bestBorrowUnitPrice,\\n            uint256 midUnitPrice,\\n            uint256 maxLendUnitPrice,\\n            uint256 minBorrowUnitPrice,\\n            uint256 openingUnitPrice,\\n            uint256 openingDate,\\n            bool isReady\\n        )\\n    {\\n        ILendingMarket.OrderBook memory orderBook = ILendingMarket(\\n            Storage.slot().lendingMarkets[_ccy]\\n        ).getOrderBookDetail(Storage.slot().maturityOrderBookIds[_ccy][_maturity]);\\n\\n        bestLendUnitPrice = orderBook.borrowUnitPrice;\\n        bestBorrowUnitPrice = orderBook.lendUnitPrice;\\n        midUnitPrice = orderBook.midUnitPrice;\\n        openingUnitPrice = orderBook.openingUnitPrice;\\n        openingDate = orderBook.openingDate;\\n        isReady = orderBook.isReady;\\n\\n        (maxLendUnitPrice, minBorrowUnitPrice) = ILendingMarket(Storage.slot().lendingMarkets[_ccy])\\n            .getCircuitBreakerThresholds(Storage.slot().maturityOrderBookIds[_ccy][_maturity]);\\n    }\\n\\n    function initializeLendingMarket(\\n        bytes32 _ccy,\\n        uint256 _genesisDate,\\n        uint256 _compoundFactor,\\n        uint256 _orderFeeRate,\\n        uint256 _circuitBreakerLimitRange\\n    ) external {\\n        require(_compoundFactor > 0, \\\"Invalid compound factor\\\");\\n\\n        AddressResolverLib.genesisValueVault().initializeCurrencySetting(\\n            _ccy,\\n            36,\\n            _compoundFactor,\\n            calculateNextMaturity(_genesisDate, Storage.slot().marketBasePeriod)\\n        );\\n\\n        address lendingMarket = AddressResolverLib.beaconProxyController().deployLendingMarket(\\n            _ccy,\\n            _orderFeeRate,\\n            _circuitBreakerLimitRange\\n        );\\n        address futureValueVault = AddressResolverLib\\n            .beaconProxyController()\\n            .deployFutureValueVault();\\n\\n        Storage.slot().genesisDates[_ccy] = _genesisDate;\\n        Storage.slot().lendingMarkets[_ccy] = lendingMarket;\\n        Storage.slot().futureValueVaults[_ccy] = futureValueVault;\\n\\n        emit LendingMarketInitialized(\\n            _ccy,\\n            _genesisDate,\\n            _compoundFactor,\\n            _orderFeeRate,\\n            _circuitBreakerLimitRange,\\n            lendingMarket,\\n            futureValueVault\\n        );\\n    }\\n\\n    function createOrderBook(bytes32 _ccy, uint256 _openingDate) external {\\n        require(\\n            AddressResolverLib.genesisValueVault().isInitialized(_ccy),\\n            \\\"Lending market hasn't been initialized in the currency\\\"\\n        );\\n        require(\\n            AddressResolverLib.currencyController().currencyExists(_ccy),\\n            \\\"Non supported currency\\\"\\n        );\\n\\n        ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy]);\\n\\n        uint256[] memory maturities = market.getMaturities(Storage.slot().orderBookIdLists[_ccy]);\\n        uint256 newMaturity;\\n\\n        if (maturities.length == 0) {\\n            newMaturity = AddressResolverLib.genesisValueVault().getCurrentMaturity(_ccy);\\n        } else {\\n            uint256 lastMaturity = maturities[maturities.length - 1];\\n            newMaturity = calculateNextMaturity(lastMaturity, Storage.slot().marketBasePeriod);\\n        }\\n\\n        require(_openingDate < newMaturity, \\\"Market opening date must be before maturity date\\\");\\n\\n        uint8 orderBookId = market.createOrderBook(newMaturity, _openingDate);\\n\\n        Storage.slot().orderBookIdLists[_ccy].push(orderBookId);\\n        Storage.slot().maturityOrderBookIds[_ccy][newMaturity] = orderBookId;\\n\\n        emit OrderBookCreated(_ccy, orderBookId, _openingDate, newMaturity);\\n    }\\n\\n    function executeItayoseCall(bytes32 _ccy, uint256 _maturity)\\n        external\\n        returns (\\n            PartiallyFilledOrder memory partiallyFilledLendingOrder,\\n            PartiallyFilledOrder memory partiallyFilledBorrowingOrder\\n        )\\n    {\\n        ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy]);\\n        uint8 orderBookId = Storage.slot().maturityOrderBookIds[_ccy][_maturity];\\n\\n        if (market.isItayosePeriod(orderBookId)) {\\n            uint256 openingUnitPrice;\\n            uint256 openingDate;\\n            uint256 totalOffsetAmount;\\n\\n            (\\n                openingUnitPrice,\\n                totalOffsetAmount,\\n                openingDate,\\n                partiallyFilledLendingOrder,\\n                partiallyFilledBorrowingOrder\\n            ) = market.executeItayoseCall(orderBookId);\\n\\n            if (totalOffsetAmount > 0) {\\n                address futureValueVault = Storage.slot().futureValueVaults[_ccy];\\n                IFutureValueVault(futureValueVault).setInitialTotalSupply(\\n                    _maturity,\\n                    (totalOffsetAmount * Constants.PRICE_DIGIT).div(openingUnitPrice).toInt256()\\n                );\\n            }\\n\\n            // Save the openingUnitPrice as first compound factor\\n            // if it is a first Itayose call at the nearest market.\\n            if (openingUnitPrice > 0 && Storage.slot().orderBookIdLists[_ccy][0] == orderBookId) {\\n                // Convert the openingUnitPrice determined by Itayose to the unit price on the Genesis Date.\\n                uint256 convertedUnitPrice = _convertUnitPrice(\\n                    openingUnitPrice,\\n                    _maturity,\\n                    openingDate,\\n                    Storage.slot().genesisDates[_ccy]\\n                );\\n\\n                AddressResolverLib.genesisValueVault().updateInitialCompoundFactor(\\n                    _ccy,\\n                    convertedUnitPrice\\n                );\\n            }\\n        }\\n    }\\n\\n    function rotateOrderBooks(bytes32 _ccy, uint256 _orderFeeRate)\\n        external\\n        returns (uint256 newMaturity)\\n    {\\n        ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy]);\\n        uint8[] storage orderBookIds = Storage.slot().orderBookIdLists[_ccy];\\n\\n        require(orderBookIds.length >= 2, \\\"Not enough order books\\\");\\n\\n        uint256[] memory maturities = market.getMaturities(orderBookIds);\\n        uint8 maturedOrderBookId = orderBookIds[0];\\n        uint256 newOpeningDate = maturities[1];\\n        newMaturity = calculateNextMaturity(\\n            maturities[maturities.length - 1],\\n            Storage.slot().marketBasePeriod\\n        );\\n\\n        // Reopen the market matured with new maturity\\n        market.reopenOrderBook(maturedOrderBookId, newMaturity, newOpeningDate);\\n\\n        // Rotate the order of the market\\n        for (uint256 i; i < orderBookIds.length; i++) {\\n            uint8 orderBookId = (orderBookIds.length - 1) == i\\n                ? maturedOrderBookId\\n                : orderBookIds[i + 1];\\n            orderBookIds[i] = orderBookId;\\n        }\\n\\n        AddressResolverLib.genesisValueVault().executeAutoRoll(\\n            _ccy,\\n            maturities[0],\\n            maturities[1],\\n            _calculateAutoRollUnitPrice(_ccy, maturities[1]),\\n            _orderFeeRate\\n        );\\n\\n        uint256 maturedMaturity = maturities[0];\\n        Storage.slot().maturityOrderBookIds[_ccy][newMaturity] = Storage\\n            .slot()\\n            .maturityOrderBookIds[_ccy][maturedMaturity];\\n\\n        emit OrderBooksRotated(_ccy, maturedMaturity, newMaturity);\\n    }\\n\\n    function executeEmergencyTermination() external {\\n        Storage.slot().marketTerminationDate = block.timestamp;\\n\\n        bytes32[] memory currencies = AddressResolverLib.currencyController().getCurrencies();\\n        bytes32[] memory collateralCurrencies = AddressResolverLib\\n            .tokenVault()\\n            .getCollateralCurrencies();\\n\\n        for (uint256 i; i < currencies.length; i++) {\\n            bytes32 ccy = currencies[i];\\n\\n            pauseLendingMarkets(ccy);\\n            Storage.slot().marketTerminationPrices[ccy] = AddressResolverLib\\n                .currencyController()\\n                .getLastPrice(ccy);\\n        }\\n\\n        for (uint256 i; i < collateralCurrencies.length; i++) {\\n            bytes32 ccy = collateralCurrencies[i];\\n            address tokenAddress = AddressResolverLib.tokenVault().getTokenAddress(ccy);\\n            uint256 balance = IERC20(tokenAddress).balanceOf(\\n                address(AddressResolverLib.tokenVault())\\n            );\\n\\n            Storage.slot().marketTerminationRatios[ccy] = ccy == Storage.slot().baseCurrency\\n                ? balance\\n                : AddressResolverLib.currencyController().convertToBaseCurrency(ccy, balance);\\n        }\\n\\n        emit EmergencyTerminationExecuted(block.timestamp);\\n    }\\n\\n    function pauseLendingMarkets(bytes32 _ccy) public {\\n        ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy]);\\n        market.pauseMarket();\\n    }\\n\\n    function unpauseLendingMarkets(bytes32 _ccy) public {\\n        ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy]);\\n        market.unpauseMarket();\\n    }\\n\\n    function updateOrderLogs(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _filledUnitPrice,\\n        uint256 _filledAmount,\\n        uint256 _filledFutureValue\\n    ) external {\\n        uint8 orderBookId = Storage.slot().maturityOrderBookIds[_ccy][_maturity];\\n\\n        if (Storage.slot().orderBookIdLists[_ccy][1] == orderBookId) {\\n            uint256 nearestMaturity = ILendingMarket(Storage.slot().lendingMarkets[_ccy])\\n                .getMaturity(Storage.slot().orderBookIdLists[_ccy][0]);\\n\\n            if (Storage.slot().observationPeriodLogs[_ccy][_maturity].totalAmount == 0) {\\n                Storage.slot().estimatedAutoRollUnitPrice[_ccy][_maturity] = _convertUnitPrice(\\n                    _filledUnitPrice,\\n                    _maturity,\\n                    block.timestamp,\\n                    nearestMaturity\\n                );\\n            }\\n\\n            if (\\n                (block.timestamp < nearestMaturity) &&\\n                (block.timestamp >= (nearestMaturity - OBSERVATION_PERIOD))\\n            ) {\\n                Storage.slot().observationPeriodLogs[_ccy][_maturity].totalAmount += _filledAmount;\\n                Storage\\n                .slot()\\n                .observationPeriodLogs[_ccy][_maturity].totalFutureValue += _filledFutureValue;\\n            }\\n        }\\n    }\\n\\n    function calculateNextMaturity(uint256 _timestamp, uint256 _period)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        if (_period == 0) {\\n            return TimeLibrary.addDays(_timestamp, 7);\\n        } else {\\n            return _getLastFridayAfterMonths(_timestamp, _period);\\n        }\\n    }\\n\\n    function _getLastFridayAfterMonths(uint256 _timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 lastFridayTimestamp)\\n    {\\n        (uint256 year, uint256 month, ) = TimeLibrary.timestampToDate(\\n            TimeLibrary.addMonths(_timestamp, _months + 1)\\n        );\\n        uint256 thirdMonthEndTimestamp = TimeLibrary.timestampFromDate(year, month, 0);\\n        uint256 dayOfWeek = TimeLibrary.getDayOfWeek(thirdMonthEndTimestamp);\\n        uint256 diff = (dayOfWeek < TimeLibrary.DOW_FRI ? 7 : 0) + dayOfWeek - TimeLibrary.DOW_FRI;\\n        lastFridayTimestamp = TimeLibrary.subDays(thirdMonthEndTimestamp, diff);\\n\\n        require(lastFridayTimestamp > 0, \\\"Invalid Timestamp\\\");\\n\\n        return lastFridayTimestamp;\\n    }\\n\\n    function _calculateAutoRollUnitPrice(bytes32 _ccy, uint256 _maturity)\\n        internal\\n        view\\n        returns (uint256 autoRollUnitPrice)\\n    {\\n        ObservationPeriodLog memory log = Storage.slot().observationPeriodLogs[_ccy][_maturity];\\n\\n        if (log.totalFutureValue != 0) {\\n            autoRollUnitPrice = (log.totalAmount * Constants.PRICE_DIGIT).div(log.totalFutureValue);\\n        } else if (Storage.slot().estimatedAutoRollUnitPrice[_ccy][_maturity] != 0) {\\n            autoRollUnitPrice = Storage.slot().estimatedAutoRollUnitPrice[_ccy][_maturity];\\n        } else {\\n            autoRollUnitPrice = AddressResolverLib\\n                .genesisValueVault()\\n                .getLatestAutoRollLog(_ccy)\\n                .unitPrice;\\n        }\\n    }\\n\\n    function _convertUnitPrice(\\n        uint256 _unitPrice,\\n        uint256 _maturity,\\n        uint256 _currentTimestamp,\\n        uint256 _destinationTimestamp\\n    ) internal pure returns (uint256) {\\n        // NOTE:The formula is:\\n        // 1) currentDuration = maturity - currentTimestamp\\n        // 2) destinationDuration = maturity - destinationTimestamp\\n        // 3) unitPrice = (currentUnitPrice * currentDuration)\\n        //      / ((1 - currentUnitPrice) * destinationDuration + currentUnitPrice * currentDuration)\\n\\n        uint256 currentDuration = _maturity - _currentTimestamp;\\n        uint256 destinationDuration = _maturity - _destinationTimestamp;\\n        return\\n            (Constants.PRICE_DIGIT * _unitPrice * currentDuration) /\\n            (((Constants.PRICE_DIGIT - _unitPrice) * destinationDuration) +\\n                (_unitPrice * currentDuration));\\n    }\\n}\\n\",\"keccak256\":\"0x776702fffd43b891185302f6cfc48f376c7e1748ee7479dcc1173a1085bf55ee\",\"license\":\"MIT\"},\"contracts/protocol/libraries/math/RoundingInt256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoundingInt256 {\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0);\\n\\n        int256 diff = (a * 10) / b - (a / b) * 10;\\n        if (diff >= 5) {\\n            return (a / b) + 1;\\n        } else if (diff <= -5) {\\n            return (a / b) - 1;\\n        } else {\\n            return a / b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7ab7168f709ecb8d28c017b8c074fe83ae88de347d3aed6ce13f2188d854cb9\",\"license\":\"MIT\"},\"contracts/protocol/libraries/math/RoundingUint256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoundingUint256 {\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0);\\n\\n        if ((a * 10) / b - (a / b) * 10 < 5) {\\n            return a / b;\\n        } else {\\n            return (a / b) + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc360f39a82f1a9a7454726e3db802407d305b5e525aa8c3236fe49ca6ca534d\",\"license\":\"MIT\"},\"contracts/protocol/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../dependencies/chainlink/AggregatorV3Interface.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct Currency {\\n    bool isSupported;\\n    string name;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.currencyController\\\");\\n\\n    struct Storage {\\n        bytes32 baseCurrency;\\n        // Protocol currencies\\n        EnumerableSet.Bytes32Set currencies;\\n        mapping(bytes32 => uint256) haircuts;\\n        // Array of the price feeds\\n        mapping(bytes32 => AggregatorV3Interface[]) priceFeeds;\\n        // Total cached decimals of the price feeds\\n        mapping(bytes32 => uint8) decimalsCaches;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x10554d924ecab6bca0b4e0696c8b44b8629a35f552b79f9cadaef1b18ccab98c\",\"license\":\"MIT\"},\"contracts/protocol/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nstruct AutoRollLog {\\n    uint256 unitPrice;\\n    uint256 lendingCompoundFactor;\\n    uint256 borrowingCompoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.genesisValueVault\\\");\\n\\n    struct Storage {\\n        mapping(bytes32 => bool) isInitialized;\\n        mapping(bytes32 => uint256) initialCompoundFactors;\\n        mapping(bytes32 => uint256) lendingCompoundFactors;\\n        mapping(bytes32 => uint256) borrowingCompoundFactors;\\n        mapping(bytes32 => uint256) currentMaturity;\\n        mapping(bytes32 => uint8) decimals;\\n        // Mapping from user to balance per currency\\n        mapping(bytes32 => mapping(address => int256)) balances;\\n        mapping(bytes32 => uint256) totalLendingSupplies;\\n        mapping(bytes32 => uint256) totalBorrowingSupplies;\\n        // Mapping from maturity balance per currency\\n        mapping(bytes32 => mapping(uint256 => int256)) maturityBalances;\\n        // Mapping from maturity to auto-roll log per currency\\n        mapping(bytes32 => mapping(uint256 => AutoRollLog)) autoRollLogs;\\n        // Mapping from user to maturity per currency\\n        mapping(bytes32 => mapping(address => uint256)) userMaturities;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x887ce7f8c0dbbd8c7f6310e109fa6bf14b5520068d299fcf224faae13bd8de46\",\"license\":\"MIT\"},\"contracts/protocol/storages/LendingMarketControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct ObservationPeriodLog {\\n    uint256 totalAmount;\\n    uint256 totalFutureValue;\\n}\\n\\nlibrary LendingMarketControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarketController\\\");\\n\\n    struct Storage {\\n        bytes32 baseCurrency;\\n        uint256 marketBasePeriod;\\n        uint256 marketTerminationDate;\\n        mapping(bytes32 => int256) marketTerminationPrices;\\n        mapping(bytes32 => uint256) marketTerminationRatios;\\n        // Mapping from currency to order book id list\\n        mapping(bytes32 => uint8[]) orderBookIdLists;\\n        // Mapping from currency to lending market contract address\\n        mapping(bytes32 => address) lendingMarkets;\\n        // Mapping from currency to future value vault contract address\\n        mapping(bytes32 => address) futureValueVaults;\\n        // Mapping from maturity to order book id per currency\\n        mapping(bytes32 => mapping(uint256 => uint8)) maturityOrderBookIds;\\n        // Mapping from currency to genesis date in the lending market\\n        mapping(bytes32 => uint256) genesisDates;\\n        // Mapping from user to used currency\\n        mapping(address => EnumerableSet.Bytes32Set) usedCurrencies;\\n        // Mapping from user to used market maturity per currency\\n        mapping(bytes32 => mapping(address => EnumerableSet.UintSet)) usedMaturities;\\n        // Mapping from maturity to observation period log per currency\\n        mapping(bytes32 => mapping(uint256 => ObservationPeriodLog)) observationPeriodLogs;\\n        // Mapping from maturity to latest estimated auto roll unit price per currency\\n        mapping(bytes32 => mapping(uint256 => uint256)) estimatedAutoRollUnitPrice;\\n        // Mapping from user to redeemed flag\\n        mapping(address => bool) isRedeemed;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb174253500da941ff34944497ba3ca9fed5d23d1add4ac4f78f396d6a60f23e2\",\"license\":\"MIT\"},\"contracts/protocol/storages/LendingMarketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {OrderStatisticsTreeLib} from \\\"../libraries/OrderStatisticsTreeLib.sol\\\";\\nimport {OrderBookLib} from \\\"../libraries/OrderBookLib.sol\\\";\\n\\nstruct ItayoseLog {\\n    uint256 openingUnitPrice;\\n    uint256 lastLendUnitPrice;\\n    uint256 lastBorrowUnitPrice;\\n}\\n\\nlibrary LendingMarketStorage {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarket\\\");\\n\\n    struct Storage {\\n        bytes32 ccy;\\n        uint8 lastOrderBookId;\\n        // Order fee rate received by protocol (in basis point)\\n        uint256 orderFeeRate;\\n        // Rate limit range of yield for the circuit breaker\\n        uint256 circuitBreakerLimitRange;\\n        // Mapping from order book id to order book\\n        mapping(uint8 => OrderBookLib.OrderBook) orderBooks;\\n        // Mapping from maturity to boolean if the market is ready or not per maturity\\n        mapping(uint256 => bool) isReady;\\n        // // Mapping from maturity to Itayose log\\n        mapping(uint256 => ItayoseLog) itayoseLogs;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfdf72a429c0b4e97c4dc09ce5bc5ae4f39ab90678d33211589992eb7a53d870a\",\"license\":\"MIT\"},\"contracts/protocol/storages/mixins/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressResolver} from \\\"../../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.mixinAddressResolver\\\");\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 => address) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44cd2358adc27b82cf3b9a498ada2646991684634ee0f3d67a42ecebd333a9d3\",\"license\":\"MIT\"},\"contracts/protocol/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0x7b05f97661e6dfe1142eec9be3dcf86d1eec55ed4fb1dea4a5859f75a0c84c13\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6137e761003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100be5760003560e01c80637df761601161007b5780637df76160146101cd5780639a795d9c146101ed578063b3cb845014610200578063b8f117cd14610220578063e99d053814610235578063fe778f421461025557600080fd5b80630ffedd39146100c357806331111163146100ec578063420eadb71461010e5780636a23a95c1461012f578063734299781461015d578063766cb64e146101ad575b600080fd5b6100d66100d136600461297d565b610275565b6040516100e39190612996565b60405180910390f35b8180156100f857600080fd5b5061010c610107366004612a3b565b61045e565b005b61012161011c366004612a76565b6106c8565b6040519081526020016100e3565b81801561013b57600080fd5b5061014f61014a366004612a76565b6106f1565b6040516100e3929190612a98565b61017061016b366004612a76565b610a18565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c0830152151560e0820152610100016100e3565b8180156101b957600080fd5b5061010c6101c8366004612a3b565b610be9565b8180156101d957600080fd5b5061010c6101e8366004612a76565b610ed4565b6100d66101fb366004612b76565b6113d0565b81801561020c57600080fd5b5061010c61021b36600461297d565b6115bf565b81801561022c57600080fd5b5061010c611630565b81801561024157600080fd5b5061010c61025036600461297d565b611a6e565b81801561026157600080fd5b50610121610270366004612a76565b611acb565b60606000610281611f36565b600084815260069190910160205260409020546001600160a01b03166338b058526102aa611f36565b60050160008681526020019081526020016000206040518263ffffffff1660e01b81526004016102da9190613223565b60006040518083038186803b1580156102f257600080fd5b505afa158015610306573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261032e9190810190613236565b9050805167ffffffffffffffff81111561034a5761034a612b0b565b60405190808252806020026020018201604052801561038357816020015b6103706128ec565b8152602001906001900390816103685790505b50915060005b81518110156104575760008282815181106103a6576103a66132bc565b602002602001015190506000806000806000806000806103c68d8a610a18565b975097509750975097509750975097506040518061014001604052808e81526020018a81526020018981526020018881526020018781526020018681526020018581526020018481526020018381526020018215158152508c8b81518110610430576104306132bc565b6020026020010181905250505050505050505050808061044f906132e8565b915050610389565b5050919050565b6000610468611f36565b60008781526008919091016020908152604080832088845290915290205460ff16905080610494611f36565b60050160008881526020019081526020016000206001815481106104ba576104ba6132bc565b60009182526020918290209181049091015460ff601f9092166101000a90041614156106c05760006104ea611f36565b600088815260069190910160205260409020546001600160a01b031663a4ff243a610513611f36565b60050160008a8152602001908152602001600020600081548110610539576105396132bc565b60009182526020918290209181049091015460405160e084901b6001600160e01b0319168152601f9092166101000a900460ff16600482015260240160206040518083038186803b15801561058d57600080fd5b505afa1580156105a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c59190613303565b90506105cf611f36565b6000888152600c9190910160209081526040808320898452909152902054610624576105fd85874284611f5a565b610605611f36565b6000898152600d91909101602090815260408083208a84529091529020555b804210801561063e575061063a6154608261331c565b4210155b156106be578361064c611f36565b6000898152600c91909101602090815260408083208a845290915281208054909190610679908490613333565b90915550839050610688611f36565b6000898152600c91909101602090815260408083208a8452909152812060010180549091906106b8908490613333565b90915550505b505b505050505050565b6000816106e1576106da836007611fce565b90506106eb565b6106da8383611ff6565b92915050565b6106f9612944565b610701612944565b600061070b611f36565b600086815260069190910160205260408120546001600160a01b03169150610731611f36565b60008781526008919091016020908152604080832088845290915290819020549051630e07a4d160e21b815260ff9091166004820181905291506001600160a01b0383169063381e93449060240160206040518083038186803b15801561079757600080fd5b505afa1580156107ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cf9190613360565b15610a0f5760405163130e60d960e11b815260ff82166004820152600090819081906001600160a01b0386169063261cc1b29060240161016060405180830381600087803b15801561082057600080fd5b505af1158015610834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108589190613413565b909a50985091945090925090508015610910576000610875611f36565b60008b815260079190910160205260409020546001600160a01b031690508063d42a750c8a6108b86108b3886108ad61271089613466565b906120c3565b61212d565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b1580156108f657600080fd5b505af115801561090a573d6000803e3d6000fd5b50505050505b60008311801561096f57508360ff16610927611f36565b60050160008b815260200190815260200160002060008154811061094d5761094d6132bc565b60009182526020918290209181049091015460ff601f9092166101000a900416145b15610a0b57600061099c848a85610984611f36565b60008f81526009919091016020526040902054611f5a565b90506109a661219b565b60405163a969285f60e01b8152600481018c9052602481018390526001600160a01b03919091169063a969285f90604401600060405180830381600087803b1580156109f157600080fd5b505af1158015610a05573d6000803e3d6000fd5b50505050505b5050505b50509250929050565b6000806000806000806000806000610a2e611f36565b60008c815260069190910160205260409020546001600160a01b03166380d5b609610a57611f36565b60008e8152600891909101602090815260408083208f84529091529081902054905160e083901b6001600160e01b031916815260ff90911660048201526024016101006040518083038186803b158015610ab057600080fd5b505afa158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae89190613485565b905080606001519850806080015197508060a0015196508060c001519350806040015192508060e001519150610b1c611f36565b60008c815260069190910160205260409020546001600160a01b03166350e18701610b45611f36565b60008e8152600891909101602090815260408083208f84529091529081902054905160e083901b6001600160e01b031916815260ff9091166004820152602401604080518083038186803b158015610b9c57600080fd5b505afa158015610bb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd49190613519565b999c989b509699509597969295509093509150565b60008311610c3e5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420636f6d706f756e6420666163746f7200000000000000000060448201526064015b60405180910390fd5b610c4661219b565b6001600160a01b031663a2d7d02d86602486610c6d89610c64611f36565b600101546106c8565b6040516001600160e01b031960e087901b168152600481019490945260ff909216602484015260448301526064820152608401600060405180830381600087803b158015610cba57600080fd5b505af1158015610cce573d6000803e3d6000fd5b505050506000610cdc6121bf565b604051634672758f60e01b81526004810188905260248101859052604481018490526001600160a01b039190911690634672758f90606401602060405180830381600087803b158015610d2e57600080fd5b505af1158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d66919061353d565b90506000610d726121bf565b6001600160a01b031663a97c4b536040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610dac57600080fd5b505af1158015610dc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de4919061353d565b905085610def611f36565b6000898152600991909101602052604090205581610e0b611f36565b60008981526006919091016020526040902080546001600160a01b0319166001600160a01b039290921691909117905580610e44611f36565b6000898152600791909101602090815260409182902080546001600160a01b0319166001600160a01b03948516179055815189815290810188905290810186905260608101859052838216608082015290821660a082015287907fe00c92761ad716218582d39142ce84d836cc05a3514de15a8b358b69276d55b89060c00160405180910390a250505050505050565b610edc61219b565b6001600160a01b031663f7b637bb836040518263ffffffff1660e01b8152600401610f0991815260200190565b60206040518083038186803b158015610f2157600080fd5b505afa158015610f35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f599190613360565b610fc45760405162461bcd60e51b815260206004820152603660248201527f4c656e64696e67206d61726b6574206861736e2774206265656e20696e697469604482015275616c697a656420696e207468652063757272656e637960501b6064820152608401610c35565b610fcc6121e2565b6001600160a01b0316631eae0893836040518263ffffffff1660e01b8152600401610ff991815260200190565b60206040518083038186803b15801561101157600080fd5b505afa158015611025573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110499190613360565b61108e5760405162461bcd60e51b81526020600482015260166024820152754e6f6e20737570706f727465642063757272656e637960501b6044820152606401610c35565b6000611098611f36565b600084815260069190910160205260408120546001600160a01b03169150816338b058526110c4611f36565b60050160008781526020019081526020016000206040518263ffffffff1660e01b81526004016110f49190613223565b60006040518083038186803b15801561110c57600080fd5b505afa158015611120573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111489190810190613236565b905060008151600014156111e25761115e61219b565b6001600160a01b03166349a1d218866040518263ffffffff1660e01b815260040161118b91815260200190565b60206040518083038186803b1580156111a357600080fd5b505afa1580156111b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111db9190613303565b905061121d565b600082600184516111f3919061331c565b81518110611203576112036132bc565b6020026020010151905061121981610c64611f36565b9150505b8084106112855760405162461bcd60e51b815260206004820152603060248201527f4d61726b6574206f70656e696e672064617465206d757374206265206265666f60448201526f7265206d61747572697479206461746560801b6064820152608401610c35565b604051634ea469d560e01b815260048101829052602481018590526000906001600160a01b03851690634ea469d590604401602060405180830381600087803b1580156112d157600080fd5b505af11580156112e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113099190613558565b9050611313611f36565b600087815260059190910160209081526040822080546001810182559083529181902090820401805460ff808516601f9094166101000a9384029302191691909117905580611360611f36565b600088815260089190910160209081526040808320868452825291829020805460ff191660ff94851617905581518881529081018590529183169188917fb74193793a4bfa8ca07156db6ff3b9af7f3604cb2bdeeb2cbeb65ec6c1367164910160405180910390a3505050505050565b6060600080835167ffffffffffffffff8111156113ef576113ef612b0b565b60405190808252806020026020018201604052801561142257816020015b606081526020019060019003908161140d5790505b50905060005b84518110156114aa57611453858281518110611446576114466132bc565b6020026020010151610275565b828281518110611465576114656132bc565b6020026020010181905250818181518110611482576114826132bc565b602002602001015151836114969190613333565b9250806114a2816132e8565b915050611428565b508167ffffffffffffffff8111156114c4576114c4612b0b565b6040519080825280602002602001820160405280156114fd57816020015b6114ea6128ec565b8152602001906001900390816114e25790505b5092506000805b82518110156115b65760005b838281518110611522576115226132bc565b6020026020010151518110156115a357838281518110611544576115446132bc565b6020026020010151818151811061155d5761155d6132bc565b6020026020010151868481518110611577576115776132bc565b6020026020010181905250828061158d906132e8565b935050808061159b906132e8565b915050611510565b50806115ae816132e8565b915050611504565b50505050919050565b60006115c9611f36565b6000838152600691909101602052604080822054815163280dce3760e21b815291516001600160a01b039091169350839263a03738dc926004808201939182900301818387803b15801561161c57600080fd5b505af11580156106c0573d6000803e3d6000fd5b42611639611f36565b6002015560006116476121e2565b6001600160a01b03166361c661de6040518163ffffffff1660e01b815260040160006040518083038186803b15801561167f57600080fd5b505afa158015611693573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116bb9190810190613236565b905060006116c7612202565b6001600160a01b031663d5e190d06040518163ffffffff1660e01b815260040160006040518083038186803b1580156116ff57600080fd5b505afa158015611713573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261173b9190810190613236565b905060005b825181101561182057600083828151811061175d5761175d6132bc565b60200260200101519050611770816115bf565b6117786121e2565b6001600160a01b0316632491dc8c826040518263ffffffff1660e01b81526004016117a591815260200190565b60206040518083038186803b1580156117bd57600080fd5b505afa1580156117d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f59190613303565b6117fd611f36565b600092835260030160205260409091205580611818816132e8565b915050611740565b5060005b8151811015611a36576000828281518110611841576118416132bc565b602002602001015190506000611855612202565b6001600160a01b031663b12e4410836040518263ffffffff1660e01b815260040161188291815260200190565b60206040518083038186803b15801561189a57600080fd5b505afa1580156118ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d2919061353d565b90506000816001600160a01b03166370a082316118ed612202565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561192c57600080fd5b505afa158015611940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119649190613303565b905061196e611f36565b548314611a035761197d6121e2565b604051636ed2f1db60e01b815260048101859052602481018390526001600160a01b039190911690636ed2f1db9060440160206040518083038186803b1580156119c657600080fd5b505afa1580156119da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fe9190613303565b611a05565b805b611a0d611f36565b600094855260040160205260409093209290925550819050611a2e816132e8565b915050611824565b506040514281527f5bd5e5214bcf42a851f8883889177591b93dbd526076c7b5e96bd8eed5931a539060200160405180910390a15050565b6000611a78611f36565b60008381526006919091016020526040808220548151630b0863e760e11b815291516001600160a01b0390911693508392631610c7ce926004808201939182900301818387803b15801561161c57600080fd5b600080611ad6611f36565b600085815260069190910160205260408120546001600160a01b03169150611afc611f36565b600086815260059190910160205260409020805490915060021115611b5c5760405162461bcd60e51b81526020600482015260166024820152754e6f7420656e6f756768206f7264657220626f6f6b7360501b6044820152606401610c35565b604051631c582c2960e11b81526000906001600160a01b038416906338b0585290611b8b908590600401613223565b60006040518083038186803b158015611ba357600080fd5b505afa158015611bb7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bdf9190810190613236565b9050600082600081548110611bf657611bf66132bc565b90600052602060002090602091828204019190069054906101000a900460ff169050600082600181518110611c2d57611c2d6132bc565b60200260200101519050611c698360018551611c49919061331c565b81518110611c5957611c596132bc565b6020026020010151610c64611f36565b60405163c9c0009960e01b815260ff8416600482015260248101829052604481018390529096506001600160a01b0386169063c9c0009990606401600060405180830381600087803b158015611cbe57600080fd5b505af1158015611cd2573d6000803e3d6000fd5b5050505060005b8454811015611d905784546000908290611cf59060019061331c565b14611d3b5785611d06836001613333565b81548110611d1657611d166132bc565b90600052602060002090602091828204019190069054906101000a900460ff16611d3d565b835b905080868381548110611d5257611d526132bc565b90600052602060002090602091828204019190066101000a81548160ff021916908360ff160217905550508080611d88906132e8565b915050611cd9565b50611d9961219b565b6001600160a01b031663fb8439048985600081518110611dbb57611dbb6132bc565b602002602001015186600181518110611dd657611dd66132bc565b6020026020010151611e028d89600181518110611df557611df56132bc565b602002602001015161221a565b6040516001600160e01b031960e087901b1681526004810194909452602484019290925260448301526064820152608481018a905260a401600060405180830381600087803b158015611e5457600080fd5b505af1158015611e68573d6000803e3d6000fd5b50505050600083600081518110611e8157611e816132bc565b60200260200101519050611e93611f36565b60008a81526008919091016020908152604080832084845290915290205460ff16611ebc611f36565b60008b8152600891909101602090815260408083208b8452825291829020805460ff191660ff949094169390931790925580518b815291820183905281018890527f134ffefb84024e6cd2bb0455365b114f82b012f23b0b0cf931045b8020f26ba59060600160405180910390a150505050505092915050565b7f8041b8421ebd495cc61f38c788c9eb100daccf9bd36aa0bb920b7a15b2e0496590565b600080611f67848661331c565b90506000611f75848761331c565b9050611f818288613466565b81611f8e8961271061331c565b611f989190613466565b611fa29190613333565b82611faf89612710613466565b611fb99190613466565b611fc39190613591565b979650505050505050565b6000611fdd6201518083613466565b611fe79084613333565b9050828110156106eb57600080fd5b600080806120166120118661200c876001613333565b61236a565b612441565b5091509150600061202983836000612462565b9050600061203682612485565b905060006005826005841061204c57600061204f565b60075b60ff1661205c9190613333565b612066919061331c565b905061207283826124c0565b9550600086116120b85760405162461bcd60e51b81526020600482015260116024820152700496e76616c69642054696d657374616d7607c1b6044820152606401610c35565b505050505092915050565b60008082116120d157600080fd5b60056120dd8385613591565b6120e890600a613466565b836120f486600a613466565b6120fe9190613591565b612108919061331c565b1015612118576106da8284613591565b6121228284613591565b6106da906001613333565b60006001600160ff1b038211156121975760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610c35565b5090565b60006121ba7011d95b995cda5cd5985b1d5955985d5b1d607a1b6124e8565b905090565b60006121ba742132b0b1b7b7283937bc3ca1b7b73a3937b63632b960591b6124e8565b60006121ba7121bab93932b731bca1b7b73a3937b63632b960711b6124e8565b60006121ba69151bdad95b95985d5b1d60b21b6124e8565b600080612225611f36565b6000858152600c919091016020908152604080832086845282529182902082518084019093528054835260010154908201819052909150156122825761227b816020015161271083600001516108ad9190613466565b9150612363565b61228a611f36565b6000858152600d9190910160209081526040808320868452909152902054156122da576122b5611f36565b6000858152600d91909101602090815260408083208684529091529020549150612363565b6122e261219b565b6001600160a01b031663d637c15f856040518263ffffffff1660e01b815260040161230f91815260200190565b60a06040518083038186803b15801561232757600080fd5b505afa15801561233b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235f91906135a5565b5191505b5092915050565b600080808061238461237f6201518088613591565b612579565b919450925090506123958583613333565b9150600c6123a460018461331c565b6123ae9190613591565b6123b89084613333565b9250600c6123c760018461331c565b6123d19190613615565b6123dc906001613333565b915060006123ea84846126ed565b9050808211156123f8578091505b6124056201518088613615565b62015180612414868686612773565b61241e9190613466565b6124289190613333565b94508685101561243757600080fd5b5050505092915050565b6000808061245561237f6201518086613591565b9196909550909350915050565b600062015180612473858585612773565b61247d9190613466565b949350505050565b6000806124956201518084613591565b905060076124a4826003613333565b6124ae9190613615565b6124b9906001613333565b9392505050565b60006124cf6201518083613466565b6124d9908461331c565b9050828111156106eb57600080fd5b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b031690816123635760405162461bcd60e51b8152600401610c359190613629565b60008080838162253d8c6125908362010bd961367e565b61259a919061367e565b9050600062023ab16125ad8360046136bf565b6125b79190613744565b905060046125c88262023ab16136bf565b6125d390600361367e565b6125dd9190613744565b6125e79083613772565b9150600062164b096125fa84600161367e565b61260690610fa06136bf565b6126109190613744565b90506004612620826105b56136bf565b61262a9190613744565b6126349084613772565b61263f90601f61367e565b9250600061098f6126518560506136bf565b61265b9190613744565b90506000605061266d8361098f6136bf565b6126779190613744565b6126819086613772565b905061268e600b83613744565b945061269b85600c6136bf565b6126a683600261367e565b6126b09190613772565b915084836126bf603187613772565b6126ca9060646136bf565b6126d4919061367e565b6126de919061367e565b9a919950975095505050505050565b600081600114806126fe5750816003145b806127095750816005145b806127145750816007145b8061271f5750816008145b8061272a575081600a145b80612735575081600c145b156127425750601f6106eb565b816002146127525750601e6106eb565b61275b836128b0565b61276657601c612769565b601d5b60ff169392505050565b60006107b284101561278457600080fd5b838383600062253d8c60046064600c61279e600e88613772565b6127a89190613744565b6127b48861132461367e565b6127be919061367e565b6127c89190613744565b6127d39060036136bf565b6127dd9190613744565b600c806127eb600e88613772565b6127f59190613744565b61280090600c6136bf565b61280b600288613772565b6128159190613772565b6128219061016f6136bf565b61282b9190613744565b6004600c61283a600e89613772565b6128449190613744565b612850896112c061367e565b61285a919061367e565b612866906105b56136bf565b6128709190613744565b61287c617d4b87613772565b612886919061367e565b612890919061367e565b61289a9190613772565b6128a49190613772565b98975050505050505050565b60006128bd600483613615565b1580156128d357506128d0606483613615565b15155b806106eb57506128e561019083613615565b1592915050565b6040518061014001604052806000801916815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6040518060800160405280600065ffffffffffff16815260200160006001600160a01b0316815260200160008152602001600081525090565b60006020828403121561298f57600080fd5b5035919050565b602080825282518282018190526000919060409081850190868401855b82811015612a2e5781518051855286810151878601528581015186860152606080820151908601526080808201519086015260a0808201519086015260c0808201519086015260e0808201519086015261010080820151908601526101209081015115159085015261014090930192908501906001016129b3565b5091979650505050505050565b600080600080600060a08688031215612a5357600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008060408385031215612a8957600080fd5b50508035926020909101359150565b825165ffffffffffff1681526020808401516001600160a01b03169082015260408084015190820152606080840151908201526101008101825165ffffffffffff16608083015260208301516001600160a01b031660a0830152604083015160c0830152606083015160e08301526124b9565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612b4a57612b4a612b0b565b604052919050565b600067ffffffffffffffff821115612b6c57612b6c612b0b565b5060051b60200190565b60006020808385031215612b8957600080fd5b823567ffffffffffffffff811115612ba057600080fd5b8301601f81018513612bb157600080fd5b8035612bc4612bbf82612b52565b612b21565b81815260059190911b82018301908381019087831115612be357600080fd5b928401925b82841015611fc357833582529284019290840190612be8565b805480835260008281526020808220940193909190825b82601f82011015612e9f57815460ff80821688526020612c41818a01838560081c1660ff169052565b6040612c56818b01848660101c1660ff169052565b6060612c6b818c01858760181c1660ff169052565b6080612c7f818d018688871c1660ff169052565b60a09350612c96848d01868860281c1660ff169052565b60c0612cab818e01878960301c1660ff169052565b60e0612cc0818f01888a60381c1660ff169052565b60ff88861c8816166101008f0152612ce36101208f01888a60481c1660ff169052565b612cf86101408f01888a60501c1660ff169052565b612d0d6101608f01888a60581c1660ff169052565b60ff88851c8816166101808f0152612d306101a08f01888a60681c1660ff169052565b612d456101c08f01888a60701c1660ff169052565b612d5a6101e08f01888a60781c1660ff169052565b60ff88841c8816166102008f0152612d7d6102208f01888a60881c1660ff169052565b612d926102408f01888a60901c1660ff169052565b612da76102608f01888a60981c1660ff169052565b60ff88871c8816166102808f0152612dca6102a08f01888a60a81c1660ff169052565b612ddf6102c08f01888a60b01c1660ff169052565b612df46102e08f01888a60b81c1660ff169052565b60ff88831c8816166103008f0152612e176103208f01888a60c81c1660ff169052565b612e2c6103408f01888a60d01c1660ff169052565b612e416103608f01888a60d81c1660ff169052565b60ff88821c8816166103808f0152505050505050612e6a6103a08901828460e81c1660ff169052565b612e7f6103c08901828460f01c1660ff169052565b5060f81c6103e08701526104009095019460019190910190602001612c18565b90549082811015612eba5760ff821686526020909501946001015b82811015612ed65760ff600883901c1686526020909501946001015b82811015612ef25760ff601083901c1686526020909501946001015b82811015612f0e5760ff601883901c1686526020909501946001015b82811015612f2b57602082901c60ff168652602095909501946001015b82811015612f475760ff602883901c1686526020909501946001015b82811015612f635760ff603083901c1686526020909501946001015b82811015612f7f5760ff603883901c1686526020909501946001015b82811015612f9b5760ff604083901c1686526020909501946001015b82811015612fb75760ff604883901c1686526020909501946001015b82811015612fd35760ff605083901c1686526020909501946001015b82811015612fef5760ff605883901c1686526020909501946001015b8281101561300b5760ff606083901c1686526020909501946001015b828110156130275760ff606883901c1686526020909501946001015b828110156130435760ff607083901c1686526020909501946001015b8281101561305f5760ff607883901c1686526020909501946001015b8281101561307b5760ff608083901c1686526020909501946001015b828110156130975760ff608883901c1686526020909501946001015b828110156130b35760ff609083901c1686526020909501946001015b828110156130cf5760ff609883901c1686526020909501946001015b828110156130eb5760ff60a083901c1686526020909501946001015b828110156131075760ff60a883901c1686526020909501946001015b828110156131235760ff60b083901c1686526020909501946001015b8281101561313f5760ff60b883901c1686526020909501946001015b8281101561315b5760ff60c083901c1686526020909501946001015b828110156131775760ff60c883901c1686526020909501946001015b828110156131935760ff60d083901c1686526020909501946001015b828110156131af5760ff60d883901c1686526020909501946001015b828110156131cb5760ff60e083901c1686526020909501946001015b828110156131e75760ff60e883901c1686526020909501946001015b828110156132035760ff60f083901c1686526020909501946001015b828110156132195760f882901c86526020860195505b5093949350505050565b6020815260006124b96020830184612c01565b6000602080838503121561324957600080fd5b825167ffffffffffffffff81111561326057600080fd5b8301601f8101851361327157600080fd5b805161327f612bbf82612b52565b81815260059190911b8201830190838101908783111561329e57600080fd5b928401925b82841015611fc3578351825292840192908401906132a3565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156132fc576132fc6132d2565b5060010190565b60006020828403121561331557600080fd5b5051919050565b60008282101561332e5761332e6132d2565b500390565b60008219821115613346576133466132d2565b500190565b8051801515811461335b57600080fd5b919050565b60006020828403121561337257600080fd5b6124b98261334b565b80516001600160a01b038116811461335b57600080fd5b6000608082840312156133a457600080fd5b6040516080810181811067ffffffffffffffff821117156133c7576133c7612b0b565b8060405250809150825165ffffffffffff811681146133e557600080fd5b81526133f36020840161337b565b602082015260408301516040820152606083015160608201525092915050565b6000806000806000610160868803121561342c57600080fd5b85519450602086015193506040860151925061344b8760608801613392565b915061345a8760e08801613392565b90509295509295909350565b6000816000190483118215151615613480576134806132d2565b500290565b600061010080838503121561349957600080fd5b6040519081019067ffffffffffffffff821181831017156134bc576134bc612b0b565b81604052835181526020840151602082015260408401516040820152606084015160608201526080840151608082015260a084015160a082015260c084015160c082015261350c60e0850161334b565b60e0820152949350505050565b6000806040838503121561352c57600080fd5b505080516020909101519092909150565b60006020828403121561354f57600080fd5b6124b98261337b565b60006020828403121561356a57600080fd5b815160ff811681146124b957600080fd5b634e487b7160e01b600052601260045260246000fd5b6000826135a0576135a061357b565b500490565b600060a082840312156135b757600080fd5b60405160a0810181811067ffffffffffffffff821117156135da576135da612b0b565b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b6000826136245761362461357b565b500690565b600060208083528351808285015260005b818110156136565785810183015185820160400152820161363a565b81811115613668576000604083870101525b50601f01601f1916929092016040019392505050565b600080821280156001600160ff1b03849003851316156136a0576136a06132d2565b600160ff1b83900384128116156136b9576136b96132d2565b50500190565b60006001600160ff1b03818413828413808216868404861116156136e5576136e56132d2565b600160ff1b6000871282811687830589121615613704576137046132d2565b60008712925087820587128484161615613720576137206132d2565b87850587128184161615613736576137366132d2565b505050929093029392505050565b6000826137535761375361357b565b600160ff1b82146000198414161561376d5761376d6132d2565b500590565b60008083128015600160ff1b850184121615613790576137906132d2565b6001600160ff1b03840183138116156137ab576137ab6132d2565b5050039056fea26469706673582212205292d86d0a62ea918600901dbc89819851420a1de0199274217f770a65697ad864736f6c63430008090033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100be5760003560e01c80637df761601161007b5780637df76160146101cd5780639a795d9c146101ed578063b3cb845014610200578063b8f117cd14610220578063e99d053814610235578063fe778f421461025557600080fd5b80630ffedd39146100c357806331111163146100ec578063420eadb71461010e5780636a23a95c1461012f578063734299781461015d578063766cb64e146101ad575b600080fd5b6100d66100d136600461297d565b610275565b6040516100e39190612996565b60405180910390f35b8180156100f857600080fd5b5061010c610107366004612a3b565b61045e565b005b61012161011c366004612a76565b6106c8565b6040519081526020016100e3565b81801561013b57600080fd5b5061014f61014a366004612a76565b6106f1565b6040516100e3929190612a98565b61017061016b366004612a76565b610a18565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c0830152151560e0820152610100016100e3565b8180156101b957600080fd5b5061010c6101c8366004612a3b565b610be9565b8180156101d957600080fd5b5061010c6101e8366004612a76565b610ed4565b6100d66101fb366004612b76565b6113d0565b81801561020c57600080fd5b5061010c61021b36600461297d565b6115bf565b81801561022c57600080fd5b5061010c611630565b81801561024157600080fd5b5061010c61025036600461297d565b611a6e565b81801561026157600080fd5b50610121610270366004612a76565b611acb565b60606000610281611f36565b600084815260069190910160205260409020546001600160a01b03166338b058526102aa611f36565b60050160008681526020019081526020016000206040518263ffffffff1660e01b81526004016102da9190613223565b60006040518083038186803b1580156102f257600080fd5b505afa158015610306573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261032e9190810190613236565b9050805167ffffffffffffffff81111561034a5761034a612b0b565b60405190808252806020026020018201604052801561038357816020015b6103706128ec565b8152602001906001900390816103685790505b50915060005b81518110156104575760008282815181106103a6576103a66132bc565b602002602001015190506000806000806000806000806103c68d8a610a18565b975097509750975097509750975097506040518061014001604052808e81526020018a81526020018981526020018881526020018781526020018681526020018581526020018481526020018381526020018215158152508c8b81518110610430576104306132bc565b6020026020010181905250505050505050505050808061044f906132e8565b915050610389565b5050919050565b6000610468611f36565b60008781526008919091016020908152604080832088845290915290205460ff16905080610494611f36565b60050160008881526020019081526020016000206001815481106104ba576104ba6132bc565b60009182526020918290209181049091015460ff601f9092166101000a90041614156106c05760006104ea611f36565b600088815260069190910160205260409020546001600160a01b031663a4ff243a610513611f36565b60050160008a8152602001908152602001600020600081548110610539576105396132bc565b60009182526020918290209181049091015460405160e084901b6001600160e01b0319168152601f9092166101000a900460ff16600482015260240160206040518083038186803b15801561058d57600080fd5b505afa1580156105a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c59190613303565b90506105cf611f36565b6000888152600c9190910160209081526040808320898452909152902054610624576105fd85874284611f5a565b610605611f36565b6000898152600d91909101602090815260408083208a84529091529020555b804210801561063e575061063a6154608261331c565b4210155b156106be578361064c611f36565b6000898152600c91909101602090815260408083208a845290915281208054909190610679908490613333565b90915550839050610688611f36565b6000898152600c91909101602090815260408083208a8452909152812060010180549091906106b8908490613333565b90915550505b505b505050505050565b6000816106e1576106da836007611fce565b90506106eb565b6106da8383611ff6565b92915050565b6106f9612944565b610701612944565b600061070b611f36565b600086815260069190910160205260408120546001600160a01b03169150610731611f36565b60008781526008919091016020908152604080832088845290915290819020549051630e07a4d160e21b815260ff9091166004820181905291506001600160a01b0383169063381e93449060240160206040518083038186803b15801561079757600080fd5b505afa1580156107ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cf9190613360565b15610a0f5760405163130e60d960e11b815260ff82166004820152600090819081906001600160a01b0386169063261cc1b29060240161016060405180830381600087803b15801561082057600080fd5b505af1158015610834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108589190613413565b909a50985091945090925090508015610910576000610875611f36565b60008b815260079190910160205260409020546001600160a01b031690508063d42a750c8a6108b86108b3886108ad61271089613466565b906120c3565b61212d565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b1580156108f657600080fd5b505af115801561090a573d6000803e3d6000fd5b50505050505b60008311801561096f57508360ff16610927611f36565b60050160008b815260200190815260200160002060008154811061094d5761094d6132bc565b60009182526020918290209181049091015460ff601f9092166101000a900416145b15610a0b57600061099c848a85610984611f36565b60008f81526009919091016020526040902054611f5a565b90506109a661219b565b60405163a969285f60e01b8152600481018c9052602481018390526001600160a01b03919091169063a969285f90604401600060405180830381600087803b1580156109f157600080fd5b505af1158015610a05573d6000803e3d6000fd5b50505050505b5050505b50509250929050565b6000806000806000806000806000610a2e611f36565b60008c815260069190910160205260409020546001600160a01b03166380d5b609610a57611f36565b60008e8152600891909101602090815260408083208f84529091529081902054905160e083901b6001600160e01b031916815260ff90911660048201526024016101006040518083038186803b158015610ab057600080fd5b505afa158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae89190613485565b905080606001519850806080015197508060a0015196508060c001519350806040015192508060e001519150610b1c611f36565b60008c815260069190910160205260409020546001600160a01b03166350e18701610b45611f36565b60008e8152600891909101602090815260408083208f84529091529081902054905160e083901b6001600160e01b031916815260ff9091166004820152602401604080518083038186803b158015610b9c57600080fd5b505afa158015610bb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd49190613519565b999c989b509699509597969295509093509150565b60008311610c3e5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420636f6d706f756e6420666163746f7200000000000000000060448201526064015b60405180910390fd5b610c4661219b565b6001600160a01b031663a2d7d02d86602486610c6d89610c64611f36565b600101546106c8565b6040516001600160e01b031960e087901b168152600481019490945260ff909216602484015260448301526064820152608401600060405180830381600087803b158015610cba57600080fd5b505af1158015610cce573d6000803e3d6000fd5b505050506000610cdc6121bf565b604051634672758f60e01b81526004810188905260248101859052604481018490526001600160a01b039190911690634672758f90606401602060405180830381600087803b158015610d2e57600080fd5b505af1158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d66919061353d565b90506000610d726121bf565b6001600160a01b031663a97c4b536040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610dac57600080fd5b505af1158015610dc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de4919061353d565b905085610def611f36565b6000898152600991909101602052604090205581610e0b611f36565b60008981526006919091016020526040902080546001600160a01b0319166001600160a01b039290921691909117905580610e44611f36565b6000898152600791909101602090815260409182902080546001600160a01b0319166001600160a01b03948516179055815189815290810188905290810186905260608101859052838216608082015290821660a082015287907fe00c92761ad716218582d39142ce84d836cc05a3514de15a8b358b69276d55b89060c00160405180910390a250505050505050565b610edc61219b565b6001600160a01b031663f7b637bb836040518263ffffffff1660e01b8152600401610f0991815260200190565b60206040518083038186803b158015610f2157600080fd5b505afa158015610f35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f599190613360565b610fc45760405162461bcd60e51b815260206004820152603660248201527f4c656e64696e67206d61726b6574206861736e2774206265656e20696e697469604482015275616c697a656420696e207468652063757272656e637960501b6064820152608401610c35565b610fcc6121e2565b6001600160a01b0316631eae0893836040518263ffffffff1660e01b8152600401610ff991815260200190565b60206040518083038186803b15801561101157600080fd5b505afa158015611025573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110499190613360565b61108e5760405162461bcd60e51b81526020600482015260166024820152754e6f6e20737570706f727465642063757272656e637960501b6044820152606401610c35565b6000611098611f36565b600084815260069190910160205260408120546001600160a01b03169150816338b058526110c4611f36565b60050160008781526020019081526020016000206040518263ffffffff1660e01b81526004016110f49190613223565b60006040518083038186803b15801561110c57600080fd5b505afa158015611120573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111489190810190613236565b905060008151600014156111e25761115e61219b565b6001600160a01b03166349a1d218866040518263ffffffff1660e01b815260040161118b91815260200190565b60206040518083038186803b1580156111a357600080fd5b505afa1580156111b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111db9190613303565b905061121d565b600082600184516111f3919061331c565b81518110611203576112036132bc565b6020026020010151905061121981610c64611f36565b9150505b8084106112855760405162461bcd60e51b815260206004820152603060248201527f4d61726b6574206f70656e696e672064617465206d757374206265206265666f60448201526f7265206d61747572697479206461746560801b6064820152608401610c35565b604051634ea469d560e01b815260048101829052602481018590526000906001600160a01b03851690634ea469d590604401602060405180830381600087803b1580156112d157600080fd5b505af11580156112e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113099190613558565b9050611313611f36565b600087815260059190910160209081526040822080546001810182559083529181902090820401805460ff808516601f9094166101000a9384029302191691909117905580611360611f36565b600088815260089190910160209081526040808320868452825291829020805460ff191660ff94851617905581518881529081018590529183169188917fb74193793a4bfa8ca07156db6ff3b9af7f3604cb2bdeeb2cbeb65ec6c1367164910160405180910390a3505050505050565b6060600080835167ffffffffffffffff8111156113ef576113ef612b0b565b60405190808252806020026020018201604052801561142257816020015b606081526020019060019003908161140d5790505b50905060005b84518110156114aa57611453858281518110611446576114466132bc565b6020026020010151610275565b828281518110611465576114656132bc565b6020026020010181905250818181518110611482576114826132bc565b602002602001015151836114969190613333565b9250806114a2816132e8565b915050611428565b508167ffffffffffffffff8111156114c4576114c4612b0b565b6040519080825280602002602001820160405280156114fd57816020015b6114ea6128ec565b8152602001906001900390816114e25790505b5092506000805b82518110156115b65760005b838281518110611522576115226132bc565b6020026020010151518110156115a357838281518110611544576115446132bc565b6020026020010151818151811061155d5761155d6132bc565b6020026020010151868481518110611577576115776132bc565b6020026020010181905250828061158d906132e8565b935050808061159b906132e8565b915050611510565b50806115ae816132e8565b915050611504565b50505050919050565b60006115c9611f36565b6000838152600691909101602052604080822054815163280dce3760e21b815291516001600160a01b039091169350839263a03738dc926004808201939182900301818387803b15801561161c57600080fd5b505af11580156106c0573d6000803e3d6000fd5b42611639611f36565b6002015560006116476121e2565b6001600160a01b03166361c661de6040518163ffffffff1660e01b815260040160006040518083038186803b15801561167f57600080fd5b505afa158015611693573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116bb9190810190613236565b905060006116c7612202565b6001600160a01b031663d5e190d06040518163ffffffff1660e01b815260040160006040518083038186803b1580156116ff57600080fd5b505afa158015611713573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261173b9190810190613236565b905060005b825181101561182057600083828151811061175d5761175d6132bc565b60200260200101519050611770816115bf565b6117786121e2565b6001600160a01b0316632491dc8c826040518263ffffffff1660e01b81526004016117a591815260200190565b60206040518083038186803b1580156117bd57600080fd5b505afa1580156117d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f59190613303565b6117fd611f36565b600092835260030160205260409091205580611818816132e8565b915050611740565b5060005b8151811015611a36576000828281518110611841576118416132bc565b602002602001015190506000611855612202565b6001600160a01b031663b12e4410836040518263ffffffff1660e01b815260040161188291815260200190565b60206040518083038186803b15801561189a57600080fd5b505afa1580156118ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d2919061353d565b90506000816001600160a01b03166370a082316118ed612202565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561192c57600080fd5b505afa158015611940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119649190613303565b905061196e611f36565b548314611a035761197d6121e2565b604051636ed2f1db60e01b815260048101859052602481018390526001600160a01b039190911690636ed2f1db9060440160206040518083038186803b1580156119c657600080fd5b505afa1580156119da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fe9190613303565b611a05565b805b611a0d611f36565b600094855260040160205260409093209290925550819050611a2e816132e8565b915050611824565b506040514281527f5bd5e5214bcf42a851f8883889177591b93dbd526076c7b5e96bd8eed5931a539060200160405180910390a15050565b6000611a78611f36565b60008381526006919091016020526040808220548151630b0863e760e11b815291516001600160a01b0390911693508392631610c7ce926004808201939182900301818387803b15801561161c57600080fd5b600080611ad6611f36565b600085815260069190910160205260408120546001600160a01b03169150611afc611f36565b600086815260059190910160205260409020805490915060021115611b5c5760405162461bcd60e51b81526020600482015260166024820152754e6f7420656e6f756768206f7264657220626f6f6b7360501b6044820152606401610c35565b604051631c582c2960e11b81526000906001600160a01b038416906338b0585290611b8b908590600401613223565b60006040518083038186803b158015611ba357600080fd5b505afa158015611bb7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bdf9190810190613236565b9050600082600081548110611bf657611bf66132bc565b90600052602060002090602091828204019190069054906101000a900460ff169050600082600181518110611c2d57611c2d6132bc565b60200260200101519050611c698360018551611c49919061331c565b81518110611c5957611c596132bc565b6020026020010151610c64611f36565b60405163c9c0009960e01b815260ff8416600482015260248101829052604481018390529096506001600160a01b0386169063c9c0009990606401600060405180830381600087803b158015611cbe57600080fd5b505af1158015611cd2573d6000803e3d6000fd5b5050505060005b8454811015611d905784546000908290611cf59060019061331c565b14611d3b5785611d06836001613333565b81548110611d1657611d166132bc565b90600052602060002090602091828204019190069054906101000a900460ff16611d3d565b835b905080868381548110611d5257611d526132bc565b90600052602060002090602091828204019190066101000a81548160ff021916908360ff160217905550508080611d88906132e8565b915050611cd9565b50611d9961219b565b6001600160a01b031663fb8439048985600081518110611dbb57611dbb6132bc565b602002602001015186600181518110611dd657611dd66132bc565b6020026020010151611e028d89600181518110611df557611df56132bc565b602002602001015161221a565b6040516001600160e01b031960e087901b1681526004810194909452602484019290925260448301526064820152608481018a905260a401600060405180830381600087803b158015611e5457600080fd5b505af1158015611e68573d6000803e3d6000fd5b50505050600083600081518110611e8157611e816132bc565b60200260200101519050611e93611f36565b60008a81526008919091016020908152604080832084845290915290205460ff16611ebc611f36565b60008b8152600891909101602090815260408083208b8452825291829020805460ff191660ff949094169390931790925580518b815291820183905281018890527f134ffefb84024e6cd2bb0455365b114f82b012f23b0b0cf931045b8020f26ba59060600160405180910390a150505050505092915050565b7f8041b8421ebd495cc61f38c788c9eb100daccf9bd36aa0bb920b7a15b2e0496590565b600080611f67848661331c565b90506000611f75848761331c565b9050611f818288613466565b81611f8e8961271061331c565b611f989190613466565b611fa29190613333565b82611faf89612710613466565b611fb99190613466565b611fc39190613591565b979650505050505050565b6000611fdd6201518083613466565b611fe79084613333565b9050828110156106eb57600080fd5b600080806120166120118661200c876001613333565b61236a565b612441565b5091509150600061202983836000612462565b9050600061203682612485565b905060006005826005841061204c57600061204f565b60075b60ff1661205c9190613333565b612066919061331c565b905061207283826124c0565b9550600086116120b85760405162461bcd60e51b81526020600482015260116024820152700496e76616c69642054696d657374616d7607c1b6044820152606401610c35565b505050505092915050565b60008082116120d157600080fd5b60056120dd8385613591565b6120e890600a613466565b836120f486600a613466565b6120fe9190613591565b612108919061331c565b1015612118576106da8284613591565b6121228284613591565b6106da906001613333565b60006001600160ff1b038211156121975760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610c35565b5090565b60006121ba7011d95b995cda5cd5985b1d5955985d5b1d607a1b6124e8565b905090565b60006121ba742132b0b1b7b7283937bc3ca1b7b73a3937b63632b960591b6124e8565b60006121ba7121bab93932b731bca1b7b73a3937b63632b960711b6124e8565b60006121ba69151bdad95b95985d5b1d60b21b6124e8565b600080612225611f36565b6000858152600c919091016020908152604080832086845282529182902082518084019093528054835260010154908201819052909150156122825761227b816020015161271083600001516108ad9190613466565b9150612363565b61228a611f36565b6000858152600d9190910160209081526040808320868452909152902054156122da576122b5611f36565b6000858152600d91909101602090815260408083208684529091529020549150612363565b6122e261219b565b6001600160a01b031663d637c15f856040518263ffffffff1660e01b815260040161230f91815260200190565b60a06040518083038186803b15801561232757600080fd5b505afa15801561233b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235f91906135a5565b5191505b5092915050565b600080808061238461237f6201518088613591565b612579565b919450925090506123958583613333565b9150600c6123a460018461331c565b6123ae9190613591565b6123b89084613333565b9250600c6123c760018461331c565b6123d19190613615565b6123dc906001613333565b915060006123ea84846126ed565b9050808211156123f8578091505b6124056201518088613615565b62015180612414868686612773565b61241e9190613466565b6124289190613333565b94508685101561243757600080fd5b5050505092915050565b6000808061245561237f6201518086613591565b9196909550909350915050565b600062015180612473858585612773565b61247d9190613466565b949350505050565b6000806124956201518084613591565b905060076124a4826003613333565b6124ae9190613615565b6124b9906001613333565b9392505050565b60006124cf6201518083613466565b6124d9908461331c565b9050828111156106eb57600080fd5b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b031690816123635760405162461bcd60e51b8152600401610c359190613629565b60008080838162253d8c6125908362010bd961367e565b61259a919061367e565b9050600062023ab16125ad8360046136bf565b6125b79190613744565b905060046125c88262023ab16136bf565b6125d390600361367e565b6125dd9190613744565b6125e79083613772565b9150600062164b096125fa84600161367e565b61260690610fa06136bf565b6126109190613744565b90506004612620826105b56136bf565b61262a9190613744565b6126349084613772565b61263f90601f61367e565b9250600061098f6126518560506136bf565b61265b9190613744565b90506000605061266d8361098f6136bf565b6126779190613744565b6126819086613772565b905061268e600b83613744565b945061269b85600c6136bf565b6126a683600261367e565b6126b09190613772565b915084836126bf603187613772565b6126ca9060646136bf565b6126d4919061367e565b6126de919061367e565b9a919950975095505050505050565b600081600114806126fe5750816003145b806127095750816005145b806127145750816007145b8061271f5750816008145b8061272a575081600a145b80612735575081600c145b156127425750601f6106eb565b816002146127525750601e6106eb565b61275b836128b0565b61276657601c612769565b601d5b60ff169392505050565b60006107b284101561278457600080fd5b838383600062253d8c60046064600c61279e600e88613772565b6127a89190613744565b6127b48861132461367e565b6127be919061367e565b6127c89190613744565b6127d39060036136bf565b6127dd9190613744565b600c806127eb600e88613772565b6127f59190613744565b61280090600c6136bf565b61280b600288613772565b6128159190613772565b6128219061016f6136bf565b61282b9190613744565b6004600c61283a600e89613772565b6128449190613744565b612850896112c061367e565b61285a919061367e565b612866906105b56136bf565b6128709190613744565b61287c617d4b87613772565b612886919061367e565b612890919061367e565b61289a9190613772565b6128a49190613772565b98975050505050505050565b60006128bd600483613615565b1580156128d357506128d0606483613615565b15155b806106eb57506128e561019083613615565b1592915050565b6040518061014001604052806000801916815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6040518060800160405280600065ffffffffffff16815260200160006001600160a01b0316815260200160008152602001600081525090565b60006020828403121561298f57600080fd5b5035919050565b602080825282518282018190526000919060409081850190868401855b82811015612a2e5781518051855286810151878601528581015186860152606080820151908601526080808201519086015260a0808201519086015260c0808201519086015260e0808201519086015261010080820151908601526101209081015115159085015261014090930192908501906001016129b3565b5091979650505050505050565b600080600080600060a08688031215612a5357600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008060408385031215612a8957600080fd5b50508035926020909101359150565b825165ffffffffffff1681526020808401516001600160a01b03169082015260408084015190820152606080840151908201526101008101825165ffffffffffff16608083015260208301516001600160a01b031660a0830152604083015160c0830152606083015160e08301526124b9565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612b4a57612b4a612b0b565b604052919050565b600067ffffffffffffffff821115612b6c57612b6c612b0b565b5060051b60200190565b60006020808385031215612b8957600080fd5b823567ffffffffffffffff811115612ba057600080fd5b8301601f81018513612bb157600080fd5b8035612bc4612bbf82612b52565b612b21565b81815260059190911b82018301908381019087831115612be357600080fd5b928401925b82841015611fc357833582529284019290840190612be8565b805480835260008281526020808220940193909190825b82601f82011015612e9f57815460ff80821688526020612c41818a01838560081c1660ff169052565b6040612c56818b01848660101c1660ff169052565b6060612c6b818c01858760181c1660ff169052565b6080612c7f818d018688871c1660ff169052565b60a09350612c96848d01868860281c1660ff169052565b60c0612cab818e01878960301c1660ff169052565b60e0612cc0818f01888a60381c1660ff169052565b60ff88861c8816166101008f0152612ce36101208f01888a60481c1660ff169052565b612cf86101408f01888a60501c1660ff169052565b612d0d6101608f01888a60581c1660ff169052565b60ff88851c8816166101808f0152612d306101a08f01888a60681c1660ff169052565b612d456101c08f01888a60701c1660ff169052565b612d5a6101e08f01888a60781c1660ff169052565b60ff88841c8816166102008f0152612d7d6102208f01888a60881c1660ff169052565b612d926102408f01888a60901c1660ff169052565b612da76102608f01888a60981c1660ff169052565b60ff88871c8816166102808f0152612dca6102a08f01888a60a81c1660ff169052565b612ddf6102c08f01888a60b01c1660ff169052565b612df46102e08f01888a60b81c1660ff169052565b60ff88831c8816166103008f0152612e176103208f01888a60c81c1660ff169052565b612e2c6103408f01888a60d01c1660ff169052565b612e416103608f01888a60d81c1660ff169052565b60ff88821c8816166103808f0152505050505050612e6a6103a08901828460e81c1660ff169052565b612e7f6103c08901828460f01c1660ff169052565b5060f81c6103e08701526104009095019460019190910190602001612c18565b90549082811015612eba5760ff821686526020909501946001015b82811015612ed65760ff600883901c1686526020909501946001015b82811015612ef25760ff601083901c1686526020909501946001015b82811015612f0e5760ff601883901c1686526020909501946001015b82811015612f2b57602082901c60ff168652602095909501946001015b82811015612f475760ff602883901c1686526020909501946001015b82811015612f635760ff603083901c1686526020909501946001015b82811015612f7f5760ff603883901c1686526020909501946001015b82811015612f9b5760ff604083901c1686526020909501946001015b82811015612fb75760ff604883901c1686526020909501946001015b82811015612fd35760ff605083901c1686526020909501946001015b82811015612fef5760ff605883901c1686526020909501946001015b8281101561300b5760ff606083901c1686526020909501946001015b828110156130275760ff606883901c1686526020909501946001015b828110156130435760ff607083901c1686526020909501946001015b8281101561305f5760ff607883901c1686526020909501946001015b8281101561307b5760ff608083901c1686526020909501946001015b828110156130975760ff608883901c1686526020909501946001015b828110156130b35760ff609083901c1686526020909501946001015b828110156130cf5760ff609883901c1686526020909501946001015b828110156130eb5760ff60a083901c1686526020909501946001015b828110156131075760ff60a883901c1686526020909501946001015b828110156131235760ff60b083901c1686526020909501946001015b8281101561313f5760ff60b883901c1686526020909501946001015b8281101561315b5760ff60c083901c1686526020909501946001015b828110156131775760ff60c883901c1686526020909501946001015b828110156131935760ff60d083901c1686526020909501946001015b828110156131af5760ff60d883901c1686526020909501946001015b828110156131cb5760ff60e083901c1686526020909501946001015b828110156131e75760ff60e883901c1686526020909501946001015b828110156132035760ff60f083901c1686526020909501946001015b828110156132195760f882901c86526020860195505b5093949350505050565b6020815260006124b96020830184612c01565b6000602080838503121561324957600080fd5b825167ffffffffffffffff81111561326057600080fd5b8301601f8101851361327157600080fd5b805161327f612bbf82612b52565b81815260059190911b8201830190838101908783111561329e57600080fd5b928401925b82841015611fc3578351825292840192908401906132a3565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156132fc576132fc6132d2565b5060010190565b60006020828403121561331557600080fd5b5051919050565b60008282101561332e5761332e6132d2565b500390565b60008219821115613346576133466132d2565b500190565b8051801515811461335b57600080fd5b919050565b60006020828403121561337257600080fd5b6124b98261334b565b80516001600160a01b038116811461335b57600080fd5b6000608082840312156133a457600080fd5b6040516080810181811067ffffffffffffffff821117156133c7576133c7612b0b565b8060405250809150825165ffffffffffff811681146133e557600080fd5b81526133f36020840161337b565b602082015260408301516040820152606083015160608201525092915050565b6000806000806000610160868803121561342c57600080fd5b85519450602086015193506040860151925061344b8760608801613392565b915061345a8760e08801613392565b90509295509295909350565b6000816000190483118215151615613480576134806132d2565b500290565b600061010080838503121561349957600080fd5b6040519081019067ffffffffffffffff821181831017156134bc576134bc612b0b565b81604052835181526020840151602082015260408401516040820152606084015160608201526080840151608082015260a084015160a082015260c084015160c082015261350c60e0850161334b565b60e0820152949350505050565b6000806040838503121561352c57600080fd5b505080516020909101519092909150565b60006020828403121561354f57600080fd5b6124b98261337b565b60006020828403121561356a57600080fd5b815160ff811681146124b957600080fd5b634e487b7160e01b600052601260045260246000fd5b6000826135a0576135a061357b565b500490565b600060a082840312156135b757600080fd5b60405160a0810181811067ffffffffffffffff821117156135da576135da612b0b565b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b6000826136245761362461357b565b500690565b600060208083528351808285015260005b818110156136565785810183015185820160400152820161363a565b81811115613668576000604083870101525b50601f01601f1916929092016040019392505050565b600080821280156001600160ff1b03849003851316156136a0576136a06132d2565b600160ff1b83900384128116156136b9576136b96132d2565b50500190565b60006001600160ff1b03818413828413808216868404861116156136e5576136e56132d2565b600160ff1b6000871282811687830589121615613704576137046132d2565b60008712925087820587128484161615613720576137206132d2565b87850587128184161615613736576137366132d2565b505050929093029392505050565b6000826137535761375361357b565b600160ff1b82146000198414161561376d5761376d6132d2565b500590565b60008083128015600160ff1b850184121615613790576137906132d2565b6001600160ff1b03840183138116156137ab576137ab6132d2565b5050039056fea26469706673582212205292d86d0a62ea918600901dbc89819851420a1de0199274217f770a65697ad864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}