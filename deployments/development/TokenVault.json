{
  "address": "0xC6fC51edDBa75E02fd95e13b78F30de9b8A9fA0d",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "CurrencyRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EscrowedAmountAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EscrowedAmountRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReleaseUnsettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UseUnsettledCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payer",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addEscrowedAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getCollateralAmountInETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralParameters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "marginCallThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "autoLiquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationPriceRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minCollateralRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getCoverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalCollateralAmountInETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalUnsettledExposure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getUnsettledCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUnusedCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUsedCurrencies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getWithdrawableCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marginCallThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_autoLiquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationPriceRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateralRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_WETH9",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isCovered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "registerCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "releaseUnsettledCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeEscrowedAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marginCallThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_autoLiquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationPriceRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateralRate",
          "type": "uint256"
        }
      ],
      "name": "setCollateralParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "useUnsettledCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd99bd07496dc9abd6ff3e3f53d89ad6d1c0d3c13840d5e95138dd31976ad447c",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x21B094EA102212d10940A3FC4e930E885DFaea26",
    "transactionIndex": 12,
    "gasUsed": "2770546",
    "logsBloom": "0x
    "blockHash": "0x00ffd4d4ca0f89ebd85013d3c8776648637f4daa2881d358fbfccfa14f9efa3d",
    "transactionHash": "0xd99bd07496dc9abd6ff3e3f53d89ad6d1c0d3c13840d5e95138dd31976ad447c",
    "logs": [],
    "blockNumber": 11373735,
    "cumulativeGasUsed": "3628262",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "0189db16390033bb8f5dd462f065f79e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"CurrencyRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscrowedAmountAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscrowedAmountRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReleaseUnsettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UseUnsettledCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addEscrowedAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getCollateralAmountInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marginCallThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoLiquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationPriceRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalCollateralAmountInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalUnsettledExposure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getUnsettledCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUnusedCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUsedCurrencies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marginCallThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autoLiquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationPriceRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateralRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_WETH9\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isCovered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"registerCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseUnsettledCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeEscrowedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marginCallThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autoLiquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationPriceRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateralRate\",\"type\":\"uint256\"}],\"name\":\"setCollateralParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"useUnsettledCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptedContracts()\":{\"details\":\"The contact name listed in this method is also needed to be listed `requiredContracts` method.\"},\"addEscrowedAmount(address,bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to be add into escrow\",\"_ccy\":\"Currency name in bytes32\",\"_payer\":\"Address of user making payment\"}},\"deposit(bytes32,uint256)\":{\"details\":\"Deposits funds by the caller into collateral.\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\"}},\"getCollateralAmount(address,bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The deposited amount\"}},\"getCollateralAmountInETH(address,bytes32)\":{\"params\":{\"_ccy\":\"Specified currency\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The deposited amount in ETH\"}},\"getCollateralParameters()\":{\"returns\":{\"autoLiquidationThresholdRate\":\" The rate used as the auto liquidation threshold\",\"liquidationPriceRate\":\"The rate used as the liquidation price\",\"marginCallThresholdRate\":\"The rate used as the margin call threshold\",\"minCollateralRate\":\"The rate used minima collateral\"}},\"getCoverage(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The rate of collateral used\"}},\"getTotalCollateralAmountInETH(address)\":{\"params\":{\"_user\":\"Address of collateral user\"},\"returns\":{\"_0\":\"The total deposited amount in ETH\"}},\"getTotalUnsettledExposure(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"Total unsettled exposure\"}},\"getUnsettledCollateral(address,bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"Unsettled exposure\"}},\"getUnusedCollateral(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The total amount of unused collateral\"}},\"getUsedCurrencies(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The currency names in bytes32\"}},\"getWithdrawableCollateral(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"Maximum amount of ETH that can be withdrawn\"}},\"initialize(address,address,uint256,uint256,uint256,uint256,address)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController.\",\"params\":{\"_WETH9\":\"The address of WETH\",\"_autoLiquidationThresholdRate\":\"The rate used as the auto liquidation threshold\",\"_liquidationPriceRate\":\"The rate used as the liquidation price\",\"_marginCallThresholdRate\":\"The rate used as the margin call threshold\",\"_minCollateralRate\":\"The rate used minima collateral\",\"_owner\":\"The address of the contract owner\",\"_resolver\":\"The address of the Address Resolver contract\"}},\"isCovered(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The boolean if the collateral has sufficient coverage or not\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"releaseUnsettledCollateral(address,bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to be unlocked from unsettled exposure in a specified currency\",\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"removeEscrowedAmount(address,address,bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to be removed from escrow\",\"_ccy\":\"Currency name in bytes32\",\"_payer\":\"Address of user making payment\",\"_receiver\":\"Address of user receiving payment\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requiredContracts()\":{\"details\":\"The contract name list is in `./libraries/Contracts.sol`.\"},\"setCollateralParameters(uint256,uint256,uint256,uint256)\":{\"params\":{\"_autoLiquidationThresholdRate\":\"Auto liquidation threshold rate\",\"_liquidationPriceRate\":\"Liquidation price rate\",\"_marginCallThresholdRate\":\"Margin call threshold ratio\",\"_minCollateralRate\":\"Minimal collateral rate\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"useUnsettledCollateral(address,bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to be locked in a specified currency\",\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"withdraw(bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to withdraw.\",\"_ccy\":\"Currency name in bytes32\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptedContracts()\":{\"notice\":\"Returns contract names that can call this contract.\"},\"addEscrowedAmount(address,bytes32,uint256)\":{\"notice\":\"Add funds to escrow.\"},\"getCollateralAmount(address,bytes32)\":{\"notice\":\"Gets the amount deposited in the user's collateral.\"},\"getCollateralAmountInETH(address,bytes32)\":{\"notice\":\"Gets the amount deposited in the user's collateral by converting it to ETH.\"},\"getCollateralParameters()\":{\"notice\":\"Gets parameters related to collateral.\"},\"getCoverage(address)\":{\"notice\":\"Gets the rate of collateral used.\"},\"getTotalCollateralAmountInETH(address)\":{\"notice\":\"Gets the total amount deposited in the user's collateral in all currencies. by converting it to ETH.\"},\"getTotalUnsettledExposure(address)\":{\"notice\":\"Gets total unsettled exposure in all currencies.\"},\"getUnsettledCollateral(address,bytes32)\":{\"notice\":\"Gets unsettled exposure for the selected currency\"},\"getUnusedCollateral(address)\":{\"notice\":\"Gets the total amount of unused collateral\"},\"getUsedCurrencies(address)\":{\"notice\":\"Gets the currencies that the user used as collateral.\"},\"getWithdrawableCollateral(address)\":{\"notice\":\"Gets the maximum amount of ETH that can be withdrawn from user collateral.\"},\"initialize(address,address,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"Initializes the contract.\"},\"isCovered(address)\":{\"notice\":\"Gets if the collateral has enough coverage.\"},\"releaseUnsettledCollateral(address,bytes32,uint256)\":{\"notice\":\"Releases the amount of unsettled exposure for the selected currency.\"},\"removeEscrowedAmount(address,address,bytes32,uint256)\":{\"notice\":\"Remove funds from escrow.\"},\"requiredContracts()\":{\"notice\":\"Returns the contract names used in this contract.\"},\"setCollateralParameters(uint256,uint256,uint256,uint256)\":{\"notice\":\"Sets main collateral parameters this function solves the issue of frontrunning during parameters tuning.Triggers only be contract owner\"},\"useUnsettledCollateral(address,bytes32,uint256)\":{\"notice\":\"Locks unsettled collateral for the selected currency.\"},\"withdraw(bytes32,uint256)\":{\"notice\":\"Withdraws funds by the caller from unused collateral.\"}},\"notice\":\"Implements the management of the token in each currency for users. This contract manages the following data related to tokens. - Deposited token amount as the collateral - Unsettled collateral amount used by order - Escrowed token amount added by lending orders - Parameters related to the collateral   - Margin Call Threshold Rate   - Auto Liquidation Threshold Rate   - Liquidation Price Rate   - Min Collateral Rate To address a currency as collateral, it must be registered using `registerCurrency` method in this contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenVault.sol\":\"TokenVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/TokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n// libraries\\nimport {Contracts} from \\\"./libraries/Contracts.sol\\\";\\nimport {CollateralParametersHandler} from \\\"./libraries/CollateralParametersHandler.sol\\\";\\nimport {ERC20Handler} from \\\"./libraries/ERC20Handler.sol\\\";\\n// interfaces\\nimport {ITokenVault} from \\\"./interfaces/ITokenVault.sol\\\";\\n// mixins\\nimport {MixinAddressResolver} from \\\"./mixins/MixinAddressResolver.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"./types/ProtocolTypes.sol\\\";\\n// utils\\nimport {Ownable} from \\\"./utils/Ownable.sol\\\";\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\n// storages\\nimport {TokenVaultStorage as Storage} from \\\"./storages/TokenVaultStorage.sol\\\";\\n\\n/**\\n * @notice Implements the management of the token in each currency for users.\\n *\\n * This contract manages the following data related to tokens.\\n * - Deposited token amount as the collateral\\n * - Unsettled collateral amount used by order\\n * - Escrowed token amount added by lending orders\\n * - Parameters related to the collateral\\n *   - Margin Call Threshold Rate\\n *   - Auto Liquidation Threshold Rate\\n *   - Liquidation Price Rate\\n *   - Min Collateral Rate\\n *\\n * To address a currency as collateral, it must be registered using `registerCurrency` method in this contract.\\n */\\ncontract TokenVault is ITokenVault, MixinAddressResolver, Ownable, Proxyable {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    /**\\n     * @notice Modifier to check if currency hasn't been registered yet\\n     * @param _ccy Currency name in bytes32\\n     */\\n    modifier onlyRegisteredCurrency(bytes32 _ccy) {\\n        require(Storage.slot().tokenAddresses[_ccy] != address(0), \\\"Currency not registered\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\\n     * @param _owner The address of the contract owner\\n     * @param _resolver The address of the Address Resolver contract\\n     * @param _marginCallThresholdRate The rate used as the margin call threshold\\n     * @param _autoLiquidationThresholdRate  The rate used as the auto liquidation threshold\\n     * @param _liquidationPriceRate The rate used as the liquidation price\\n     * @param _minCollateralRate The rate used minima collateral\\n     * @param _WETH9 The address of WETH\\n     */\\n    function initialize(\\n        address _owner,\\n        address _resolver,\\n        uint256 _marginCallThresholdRate,\\n        uint256 _autoLiquidationThresholdRate,\\n        uint256 _liquidationPriceRate,\\n        uint256 _minCollateralRate,\\n        address _WETH9\\n    ) public initializer onlyProxy {\\n        _transferOwnership(_owner);\\n        registerAddressResolver(_resolver);\\n\\n        ERC20Handler.initialize(_WETH9);\\n        CollateralParametersHandler.setCollateralParameters(\\n            _marginCallThresholdRate,\\n            _autoLiquidationThresholdRate,\\n            _liquidationPriceRate,\\n            _minCollateralRate\\n        );\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](2);\\n        contracts[0] = Contracts.CURRENCY_CONTROLLER;\\n        contracts[1] = Contracts.LENDING_MARKET_CONTROLLER;\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](1);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == ERC20Handler.weth(), \\\"Not WETH\\\");\\n    }\\n\\n    /**\\n     * @notice Gets if the collateral has enough coverage.\\n     * @param _user User's address\\n     * @return The boolean if the collateral has sufficient coverage or not\\n     */\\n    function isCovered(address _user) public view override returns (bool) {\\n        return _isCovered(_user, \\\"\\\", 0);\\n    }\\n\\n    /**\\n     * @notice Gets the maximum amount of ETH that can be withdrawn from user collateral.\\n     * @param _user User's address\\n     * @return Maximum amount of ETH that can be withdrawn\\n     */\\n    function getWithdrawableCollateral(address _user) external view virtual returns (uint256) {\\n        return _getWithdrawableCollateral(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the rate of collateral used.\\n     * @param _user User's address\\n     * @return The rate of collateral used\\n     */\\n    function getCoverage(address _user) public view override returns (uint256) {\\n        return _getCoverage(_user, \\\"\\\", 0);\\n    }\\n\\n    /**\\n     * @notice Gets unsettled exposure for the selected currency\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @return Unsettled exposure\\n     */\\n    function getUnsettledCollateral(address _user, bytes32 _ccy) external view returns (uint256) {\\n        return Storage.slot().unsettledCollateral[_user][_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the total amount of unused collateral\\n     * @param _user User's address\\n     * @return The total amount of unused collateral\\n     */\\n    function getUnusedCollateral(address _user) external view returns (uint256) {\\n        uint256 totalCollateral = getTotalCollateralAmountInETH(_user);\\n        uint256 totalUsedCollateral = _getUsedCollateral(_user) +\\n            _getTotalUnsettledExposure(_user, \\\"\\\", 0);\\n\\n        return totalCollateral > totalUsedCollateral ? totalCollateral - totalUsedCollateral : 0;\\n    }\\n\\n    /**\\n     * @notice Gets total unsettled exposure in all currencies.\\n     * @param _user User's address\\n     * @return Total unsettled exposure\\n     */\\n    function getTotalUnsettledExposure(address _user) external view override returns (uint256) {\\n        return _getTotalUnsettledExposure(_user, \\\"\\\", 0);\\n    }\\n\\n    /**\\n     * @notice Gets the amount deposited in the user's collateral.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @return The deposited amount\\n     */\\n    function getCollateralAmount(address _user, bytes32 _ccy)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return Storage.slot().collateralAmounts[_user][_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the amount deposited in the user's collateral by converting it to ETH.\\n     * @param _user User's address\\n     * @param _ccy Specified currency\\n     * @return The deposited amount in ETH\\n     */\\n    function getCollateralAmountInETH(address _user, bytes32 _ccy)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 amount = getCollateralAmount(_user, _ccy);\\n        return currencyController().convertToETH(_ccy, amount);\\n    }\\n\\n    /**\\n     * @notice Gets the total amount deposited in the user's collateral in all currencies.\\n     * by converting it to ETH.\\n     * @param _user Address of collateral user\\n     * @return The total deposited amount in ETH\\n     */\\n    function getTotalCollateralAmountInETH(address _user) public view override returns (uint256) {\\n        EnumerableSet.Bytes32Set storage currencies = Storage.slot().usedCurrencies[_user];\\n        uint256 collateralAmount;\\n        uint256 totalCollateral;\\n\\n        uint256 len = currencies.length();\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            bytes32 ccy = currencies.at(i);\\n            collateralAmount = getCollateralAmountInETH(_user, ccy);\\n            totalCollateral = totalCollateral + collateralAmount;\\n        }\\n\\n        return totalCollateral;\\n    }\\n\\n    /**\\n     * @notice Gets the currencies that the user used as collateral.\\n     * @param _user User's address\\n     * @return The currency names in bytes32\\n     */\\n    function getUsedCurrencies(address _user) public view override returns (bytes32[] memory) {\\n        EnumerableSet.Bytes32Set storage currencySet = Storage.slot().usedCurrencies[_user];\\n\\n        uint256 numCurrencies = currencySet.length();\\n        bytes32[] memory currencies = new bytes32[](numCurrencies);\\n\\n        for (uint256 i = 0; i < numCurrencies; i++) {\\n            bytes32 currency = currencySet.at(i);\\n            currencies[i] = currency;\\n        }\\n\\n        return currencies;\\n    }\\n\\n    /**\\n     * @notice Gets parameters related to collateral.\\n     * @return marginCallThresholdRate The rate used as the margin call threshold\\n     * @return autoLiquidationThresholdRate  The rate used as the auto liquidation threshold\\n     * @return liquidationPriceRate The rate used as the liquidation price\\n     * @return minCollateralRate The rate used minima collateral\\n     */\\n    function getCollateralParameters()\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 marginCallThresholdRate,\\n            uint256 autoLiquidationThresholdRate,\\n            uint256 liquidationPriceRate,\\n            uint256 minCollateralRate\\n        )\\n    {\\n        return CollateralParametersHandler.getCollateralParameters();\\n    }\\n\\n    /**\\n     * @notice Locks unsettled collateral for the selected currency.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to be locked in a specified currency\\n     */\\n    function useUnsettledCollateral(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external override onlyAcceptedContracts {\\n        Storage.slot().exposedUnsettledCurrencies[_user].add(_ccy);\\n        require(_isCovered(_user, _ccy, _amount), \\\"Not enough collateral\\\");\\n\\n        Storage.slot().unsettledCollateral[_user][_ccy] += _amount;\\n\\n        emit UseUnsettledCollateral(_user, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Releases the amount of unsettled exposure for the selected currency.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to be unlocked from unsettled exposure in a specified currency\\n     */\\n    function releaseUnsettledCollateral(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external override onlyAcceptedContracts {\\n        Storage.slot().unsettledCollateral[_user][_ccy] -= _amount;\\n\\n        if (Storage.slot().unsettledCollateral[_user][_ccy] == 0) {\\n            Storage.slot().exposedUnsettledCurrencies[_user].remove(_ccy);\\n        }\\n\\n        emit ReleaseUnsettled(_user, _ccy, _amount);\\n    }\\n\\n    function registerCurrency(bytes32 _ccy, address _tokenAddress) external onlyOwner {\\n        require(currencyController().isSupportedCcy(_ccy), \\\"Invalid currency\\\");\\n        Storage.slot().tokenAddresses[_ccy] = _tokenAddress;\\n\\n        emit CurrencyRegistered(_ccy, _tokenAddress);\\n    }\\n\\n    /**\\n     * @dev Deposits funds by the caller into collateral.\\n     * @param _amount Amount of funds to deposit\\n     * @param _ccy Currency name in bytes32\\n     */\\n    function deposit(bytes32 _ccy, uint256 _amount)\\n        public\\n        payable\\n        override\\n        onlyRegisteredCurrency(_ccy)\\n    {\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n        ERC20Handler.depositAssets(\\n            Storage.slot().tokenAddresses[_ccy],\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n\\n        Storage.slot().collateralAmounts[msg.sender][_ccy] += _amount;\\n\\n        _updateUsedCurrencies(_ccy);\\n\\n        emit Deposit(msg.sender, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws funds by the caller from unused collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to withdraw.\\n     */\\n    function withdraw(bytes32 _ccy, uint256 _amount) public override onlyRegisteredCurrency(_ccy) {\\n        // fix according to collateral aggregator\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n\\n        address user = msg.sender;\\n        uint256 maxWithdrawETH = _getWithdrawableCollateral(user);\\n        uint256 maxWithdraw = currencyController().convertFromETH(_ccy, maxWithdrawETH);\\n        uint256 withdrawAmt = _amount > maxWithdraw ? maxWithdraw : _amount;\\n\\n        require(\\n            Storage.slot().collateralAmounts[user][_ccy] >= withdrawAmt,\\n            \\\"Not enough collateral in the selected currency\\\"\\n        );\\n        Storage.slot().collateralAmounts[user][_ccy] -= withdrawAmt;\\n\\n        ERC20Handler.withdrawAssets(Storage.slot().tokenAddresses[_ccy], msg.sender, withdrawAmt);\\n        _updateUsedCurrencies(_ccy);\\n\\n        emit Withdraw(msg.sender, _ccy, withdrawAmt);\\n    }\\n\\n    /**\\n     * @notice Add funds to escrow.\\n     * @param _payer Address of user making payment\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to be add into escrow\\n     */\\n    function addEscrowedAmount(\\n        address _payer,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external payable override onlyAcceptedContracts {\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n\\n        ERC20Handler.depositAssets(\\n            Storage.slot().tokenAddresses[_ccy],\\n            _payer,\\n            address(this),\\n            _amount\\n        );\\n        Storage.slot().escrowedAmount[_payer][_ccy] += _amount;\\n\\n        emit EscrowedAmountAdded(_payer, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Remove funds from escrow.\\n     * @param _payer Address of user making payment\\n     * @param _receiver Address of user receiving payment\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to be removed from escrow\\n     */\\n    function removeEscrowedAmount(\\n        address _payer,\\n        address _receiver,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external override onlyAcceptedContracts {\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n        require(\\n            Storage.slot().escrowedAmount[_payer][_ccy] >= _amount,\\n            \\\"Not enough escrowed amount\\\"\\n        );\\n\\n        Storage.slot().escrowedAmount[_payer][_ccy] -= _amount;\\n        ERC20Handler.withdrawAssets(Storage.slot().tokenAddresses[_ccy], _receiver, _amount);\\n\\n        emit EscrowedAmountRemoved(_payer, _receiver, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Sets main collateral parameters this function\\n     * solves the issue of frontrunning during parameters tuning.\\n     *\\n     * @param _marginCallThresholdRate Margin call threshold ratio\\n     * @param _autoLiquidationThresholdRate Auto liquidation threshold rate\\n     * @param _liquidationPriceRate Liquidation price rate\\n     * @param _minCollateralRate Minimal collateral rate\\n     * @notice Triggers only be contract owner\\n     */\\n    function setCollateralParameters(\\n        uint256 _marginCallThresholdRate,\\n        uint256 _autoLiquidationThresholdRate,\\n        uint256 _liquidationPriceRate,\\n        uint256 _minCollateralRate\\n    ) external onlyOwner {\\n        CollateralParametersHandler.setCollateralParameters(\\n            _marginCallThresholdRate,\\n            _autoLiquidationThresholdRate,\\n            _liquidationPriceRate,\\n            _minCollateralRate\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets if the collateral has enough coverage.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @param _unsettledExp Additional exposure to lock into unsettled exposure\\n     * @return The boolean if the collateral has enough coverage or not\\n     */\\n    function _isCovered(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) internal view returns (bool) {\\n        uint256 totalCollateral = getTotalCollateralAmountInETH(_user);\\n        uint256 totalUsedCollateral = _getUsedCollateral(_user) +\\n            _getTotalUnsettledExposure(_user, _ccy, _unsettledExp);\\n\\n        return\\n            totalUsedCollateral == 0 ||\\n            (totalCollateral * ProtocolTypes.PCT >=\\n                totalUsedCollateral * CollateralParametersHandler.marginCallThresholdRate());\\n    }\\n\\n    /**\\n     * @notice Gets the collateral coverage.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @param _unsettledExp Additional exposure to lock into unsettled exposure\\n     * @return coverage The rate of collateral used\\n     */\\n    function _getCoverage(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) internal view returns (uint256 coverage) {\\n        uint256 totalCollateral = getTotalCollateralAmountInETH(_user);\\n        uint256 totalUsedCollateral = _getUsedCollateral(_user) +\\n            _getTotalUnsettledExposure(_user, _ccy, _unsettledExp);\\n\\n        if (totalCollateral > 0) {\\n            coverage = (((totalUsedCollateral) * ProtocolTypes.PCT) / totalCollateral);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets total unsettled exposure in all currencies.\\n     * @param _user User's ethereum address\\n     * @param _ccy Currency name in bytes32\\n     * @param _unsettledExp Additional exposure to lock into unsettled exposure\\n     * @return totalExp The total collateral amount\\n     */\\n    function _getTotalUnsettledExposure(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) internal view returns (uint256 totalExp) {\\n        EnumerableSet.Bytes32Set storage expCcy = Storage.slot().exposedUnsettledCurrencies[_user];\\n        uint256 ccyExp;\\n\\n        for (uint256 i = 0; i < expCcy.length(); i++) {\\n            bytes32 ccy = expCcy.at(i);\\n            ccyExp = Storage.slot().unsettledCollateral[_user][ccy];\\n\\n            if (_ccy == ccy) {\\n                ccyExp += _unsettledExp;\\n            }\\n\\n            totalExp += ccyExp > 0 ? currencyController().convertToETH(ccy, ccyExp) : 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the total collateral used in all currencies.\\n     * The collateral used is defined as the negative future value in the lending market contract.\\n     * @param _user User's address\\n     * @return The total amount of used collateral\\n     */\\n    function _getUsedCollateral(address _user) internal view returns (uint256) {\\n        int256 totalPVInETH = lendingMarketController().getTotalPresentValueInETH(_user);\\n        return totalPVInETH > 0 ? 0 : uint256(-totalPVInETH);\\n    }\\n\\n    /**\\n     * @notice Calculates maximum amount of ETH that can be withdrawn.\\n     * @param _user User's address\\n     * @return Maximum amount of ETH that can be withdrawn\\n     */\\n    function _getWithdrawableCollateral(address _user) internal view returns (uint256) {\\n        uint256 totalCollateral = getTotalCollateralAmountInETH(_user);\\n        uint256 totalUsedCollateral = _getUsedCollateral(_user) +\\n            _getTotalUnsettledExposure(_user, \\\"\\\", 0);\\n\\n        if (totalUsedCollateral == 0) {\\n            return totalCollateral;\\n        } else if (\\n            totalCollateral >\\n            ((totalUsedCollateral) * CollateralParametersHandler.marginCallThresholdRate()) /\\n                ProtocolTypes.BP\\n        ) {\\n            // NOTE: The formula is:\\n            // maxWithdraw = totalCollateral - ((totalUsedCollateral) * marginCallThresholdRate).\\n            return\\n                (totalCollateral *\\n                    ProtocolTypes.BP -\\n                    (totalUsedCollateral) *\\n                    CollateralParametersHandler.marginCallThresholdRate()) / ProtocolTypes.BP;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function _updateUsedCurrencies(bytes32 _ccy) internal {\\n        if (Storage.slot().collateralAmounts[msg.sender][_ccy] > 0) {\\n            Storage.slot().usedCurrencies[msg.sender].add(_ccy);\\n        } else {\\n            Storage.slot().usedCurrencies[msg.sender].remove(_ccy);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc7559e40896bad1b1463dbc37fd0dfda37f9d4c364e792d5c0d3abb92e48ff87\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IBeaconProxyController {\\n    event BeaconProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function deployLendingMarket(\\n        bytes32 _ccy,\\n        uint256 _basisDate,\\n        uint256 _maturity\\n    ) external returns (address market);\\n}\\n\",\"keccak256\":\"0x96cc459c25a78e04ebc32cdf92437fb2e27d79b21c3ee53a003e4d71ff7a79fa\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CcyAdded(bytes32 indexed ccy, string name, uint256 haircut);\\n    event CcySupportUpdate(bytes32 indexed ccy, bool isSupported);\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n    event PriceFeedAdded(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n    event PriceFeedRemoved(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH) external view returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, int256 _amount) external view returns (int256);\\n\\n    function getCurrencies(bytes32) external view returns (ProtocolTypes.Currency memory);\\n\\n    function getEthDecimals(bytes32) external view returns (uint8);\\n\\n    function getUsdDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        address _ethPriceFeed,\\n        uint256 _haircut\\n    ) external;\\n\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported) external;\\n}\\n\",\"keccak256\":\"0xa320db38056d5be0be2c24f3f367de95b4bedf1af9d80d5e1e540d2d4fc783d1\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\nstruct Order {\\n    bytes32 ccy;\\n    uint256 term;\\n    ProtocolTypes.Side side;\\n    uint256 amount;\\n    uint256 rate;\\n}\\n\\ninterface ILendingMarketController {\\n    event LendingMarketCreated(\\n        bytes32 ccy,\\n        address indexed marketAddr,\\n        uint256 index,\\n        uint256 maturity\\n    );\\n    event LendingMarketsRotated(bytes32 ccy, uint256 oldMaturity, uint256 newMaturity);\\n    event OrderPlaced(\\n        uint256 orderId,\\n        address indexed maker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n    event OrderFilled(\\n        uint256 orderId,\\n        address indexed maker,\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n    event OrderCanceled(\\n        uint256 orderId,\\n        address indexed maker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n\\n    function getBasisDate(bytes32 _ccy) external view returns (uint256);\\n\\n    function getLendingMarkets(bytes32 _ccy) external view returns (address[] memory);\\n\\n    function getLendingMarket(bytes32 _ccy, uint256 _maturity) external view returns (address);\\n\\n    function getBorrowRates(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getLendRates(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getMidRates(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getMaturities(bytes32 _ccy) external view returns (uint256[] memory);\\n\\n    function getTotalPresentValue(bytes32 ccy, address account) external view returns (int256);\\n\\n    function getTotalPresentValueInETH(address account)\\n        external\\n        view\\n        returns (int256 totalPresentValue);\\n\\n    function isInitializedLendingMarket(bytes32 _ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 _ccy,\\n        uint256 _basisDate,\\n        uint256 _compoundFactor\\n    ) external;\\n\\n    function createLendingMarket(bytes32 _ccy) external returns (address market);\\n\\n    function createOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _rate\\n    ) external returns (bool);\\n\\n    function createLendOrderWithETH(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _rate\\n    ) external payable returns (bool);\\n\\n    function matchOrders(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _rate\\n    ) external view returns (bool);\\n\\n    function cancelOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _orderId\\n    ) external returns (bool);\\n\\n    function rotateLendingMarkets(bytes32 _ccy) external;\\n\\n    function pauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n}\\n\",\"keccak256\":\"0x2d3ddd0c49f4482ce232017a6292d53211e02b30d0043771fe1fedd114ed2542\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ITokenVault {\\n    event ReleaseUnsettled(address indexed party, bytes32 ccy, uint256 amount);\\n    event UseUnsettledCollateral(address indexed party, bytes32 ccy, uint256 amount);\\n\\n    event EscrowedAmountAdded(address indexed payer, bytes32 ccy, uint256 amount);\\n    event EscrowedAmountRemoved(\\n        address indexed payer,\\n        address indexed receiver,\\n        bytes32 ccy,\\n        uint256 amount\\n    );\\n\\n    event Deposit(address user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address from, bytes32 ccy, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress);\\n\\n    function isCovered(address _user) external view returns (bool);\\n\\n    function getWithdrawableCollateral(address _user) external view returns (uint256 maxWithdraw);\\n\\n    function getCoverage(address _user) external view returns (uint256 coverage);\\n\\n    function getUnsettledCollateral(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUnusedCollateral(address _user) external view returns (uint256);\\n\\n    function getTotalUnsettledExposure(address _user) external view returns (uint256);\\n\\n    function getCollateralAmount(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getCollateralAmountInETH(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getTotalCollateralAmountInETH(address _party) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getCollateralParameters()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function useUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function releaseUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function setCollateralParameters(\\n        uint256 marginCallThresholdRate,\\n        uint256 autoLiquidationThresholdRate,\\n        uint256 liquidationPriceRate,\\n        uint256 minCollateralRate\\n    ) external;\\n\\n    function deposit(bytes32 _ccy, uint256 _amount) external payable;\\n\\n    function withdraw(bytes32 _ccy, uint256 _amount) external;\\n\\n    function addEscrowedAmount(\\n        address _payer,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function removeEscrowedAmount(\\n        address _payer,\\n        address _receiver,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4cadd29fdea70647f51294618fcecddd07ea042aced438aa9e626faf7d47d32c\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH9 is IERC20 {\\n    event Deposit(address user, uint256 amount);\\n    event Withdrawal(address user, uint256 amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x5aefa06efedcbfe7d7605aa67217f066a0e84b450d416695254eb95239a251d7\",\"license\":\"MIT\"},\"contracts/libraries/CollateralParametersHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {CollateralParametersStorage as Storage} from \\\"../storages/CollateralParametersStorage.sol\\\";\\n\\n/**\\n * @notice CollateralParametersHandler is an library to handle the parameters fro TokenVault contract.\\n *\\n * This manage the main collateral parameters like Margin Call ratio, Auto-Liquidation level,\\n * Liquidation price, and Minimal collateral ratio.\\n *\\n */\\nlibrary CollateralParametersHandler {\\n    event LiquidationPriceRateUpdated(uint256 previousPrice, uint256 price);\\n    event AutoLiquidationThresholdRateUpdated(uint256 previousRatio, uint256 ratio);\\n    event MarginCallThresholdRateUpdated(uint256 previousRatio, uint256 ratio);\\n    event MinCollateralRateUpdated(uint256 previousRatio, uint256 price);\\n\\n    /**\\n     * @dev Gets collateral parameters\\n     */\\n    function getCollateralParameters()\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            Storage.slot().marginCallThresholdRate,\\n            Storage.slot().autoLiquidationThresholdRate,\\n            Storage.slot().liquidationPriceRate,\\n            Storage.slot().minCollateralRate\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets auto liquidation threshold rate\\n     */\\n    function autoLiquidationThresholdRate() internal view returns (uint256) {\\n        return Storage.slot().autoLiquidationThresholdRate;\\n    }\\n\\n    /**\\n     * @dev Gets liquidation price rate\\n     */\\n    function liquidationPriceRate() internal view returns (uint256) {\\n        return Storage.slot().liquidationPriceRate;\\n    }\\n\\n    /**\\n     * @dev Gets margin call threshold rate\\n     */\\n    function marginCallThresholdRate() internal view returns (uint256) {\\n        return Storage.slot().marginCallThresholdRate;\\n    }\\n\\n    /**\\n     * @dev Gets min collateral rate\\n     */\\n    function minCollateralRate() internal view returns (uint256) {\\n        return Storage.slot().minCollateralRate;\\n    }\\n\\n    /**\\n     * @dev Sets main collateral parameters this function\\n     * solves the issue of frontrunning during parameters tuning\\n     *\\n     * @param _marginCallThresholdRate Margin call threshold ratio\\n     * @param _autoLiquidationThresholdRate Auto liquidation threshold rate\\n     * @param _liquidationPriceRate Liquidation price rate\\n     * @param _minCollateralRate Minimal collateral rate\\n     * @notice Triggers only be contract owner\\n     */\\n    function setCollateralParameters(\\n        uint256 _marginCallThresholdRate,\\n        uint256 _autoLiquidationThresholdRate,\\n        uint256 _liquidationPriceRate,\\n        uint256 _minCollateralRate\\n    ) internal {\\n        if (_marginCallThresholdRate != Storage.slot().marginCallThresholdRate) {\\n            _updateMarginCallThresholdRate(_marginCallThresholdRate);\\n        }\\n\\n        if (_autoLiquidationThresholdRate != Storage.slot().autoLiquidationThresholdRate) {\\n            _updateAutoLiquidationThresholdRate(_autoLiquidationThresholdRate);\\n        }\\n\\n        if (_liquidationPriceRate != Storage.slot().liquidationPriceRate) {\\n            _updateLiquidationPriceRate(_liquidationPriceRate);\\n        }\\n\\n        if (_minCollateralRate != Storage.slot().minCollateralRate) {\\n            _updateMinCollateralRate(_minCollateralRate);\\n        }\\n    }\\n\\n    function _updateMarginCallThresholdRate(uint256 _rate) private {\\n        require(_rate > 0, \\\"Rate is zero\\\");\\n\\n        emit MarginCallThresholdRateUpdated(Storage.slot().marginCallThresholdRate, _rate);\\n        Storage.slot().marginCallThresholdRate = _rate;\\n    }\\n\\n    function _updateAutoLiquidationThresholdRate(uint256 _rate) private {\\n        require(_rate > 0, \\\"Rate is zero\\\");\\n        require(\\n            _rate < Storage.slot().marginCallThresholdRate,\\n            \\\"Auto liquidation threshold rate overflow\\\"\\n        );\\n\\n        emit AutoLiquidationThresholdRateUpdated(\\n            Storage.slot().autoLiquidationThresholdRate,\\n            _rate\\n        );\\n        Storage.slot().autoLiquidationThresholdRate = _rate;\\n    }\\n\\n    function _updateLiquidationPriceRate(uint256 _rate) private {\\n        require(_rate > 0, \\\"Rate is zero\\\");\\n        require(\\n            _rate < Storage.slot().autoLiquidationThresholdRate,\\n            \\\"Liquidation price rate overflow\\\"\\n        );\\n\\n        emit LiquidationPriceRateUpdated(Storage.slot().liquidationPriceRate, _rate);\\n        Storage.slot().liquidationPriceRate = _rate;\\n    }\\n\\n    function _updateMinCollateralRate(uint256 _rate) private {\\n        require(_rate > 0, \\\"Rate is zero\\\");\\n        require(\\n            _rate < Storage.slot().autoLiquidationThresholdRate,\\n            \\\"Min collateral rate overflow\\\"\\n        );\\n\\n        emit MinCollateralRateUpdated(Storage.slot().minCollateralRate, _rate);\\n        Storage.slot().minCollateralRate = _rate;\\n    }\\n}\\n\",\"keccak256\":\"0x9ab46e2c3d84c8b6f7bcd6feecc181259304857b830ac71dc23fea23b0af3f34\",\"license\":\"MIT\"},\"contracts/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0x993666b36062e56ab6ef4b22e095ea36d5353472fd0214ad2e35aefca61dd035\",\"license\":\"MIT\"},\"contracts/libraries/ERC20Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IWETH9} from \\\"../interfaces/IWETH9.sol\\\";\\nimport {ERC20Storage as Storage} from \\\"../storages/ERC20Storage.sol\\\";\\n\\nlibrary ERC20Handler {\\n    function initialize(address _weth) internal {\\n        require(Storage.slot().weth == address(0), \\\"Already initialized\\\");\\n        Storage.slot().weth = _weth;\\n    }\\n\\n    function weth() internal view returns (address) {\\n        return Storage.slot().weth;\\n    }\\n\\n    function depositAssets(\\n        address _token,\\n        address _payer,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == Storage.slot().weth) {\\n            wrapWETH(_receiver, _amount);\\n        } else {\\n            safeTransferFrom(_token, _payer, _receiver, _amount);\\n        }\\n    }\\n\\n    function withdrawAssets(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == Storage.slot().weth) {\\n            unwrapWETH(_receiver, _amount);\\n        } else {\\n            safeTransfer(_token, _receiver, _amount);\\n        }\\n    }\\n\\n    function wrapWETH(address _receiver, uint256 _amount) internal {\\n        require(address(this).balance >= _amount, \\\"Insufficient ETH\\\");\\n\\n        IWETH9(Storage.slot().weth).deposit{value: _amount}();\\n        IWETH9(Storage.slot().weth).transfer(_receiver, _amount);\\n    }\\n\\n    function unwrapWETH(address _receiver, uint256 _amount) internal {\\n        uint256 balanceWETH9 = IWETH9(Storage.slot().weth).balanceOf(address(this));\\n        require(balanceWETH9 >= _amount, \\\"Insufficient WETH\\\");\\n\\n        if (balanceWETH9 > 0) {\\n            IWETH9(Storage.slot().weth).withdraw(_amount);\\n            safeTransferETH(_receiver, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer helper from UniswapV2 Router\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    /**\\n     * There are many non-compliant ERC20 tokens... this can handle most, adapted from UniSwap V2\\n     * Im trying to make it a habit to put external calls last (reentrancy)\\n     * You can put this in an internal function if you like.\\n     */\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // 0xa9059cbb = bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n            abi.encodeWithSelector(0xa9059cbb, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        ); // ERC20 Transfer failed\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x815d7e717efb9e9f837464cdcf19feb7a08f4166e145481fcd35f679050526c3\",\"license\":\"MIT\"},\"contracts/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/MixinAddressResolverStorage.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    modifier onlyAcceptedContracts() {\\n        require(isAcceptedContract(msg.sender), \\\"Only Accepted Contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the contract names used in this contract.\\n     * @dev The contract name list is in `./libraries/Contracts.sol`.\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @notice Returns contract names that can call this contract.\\n     * @dev The contact name listed in this method is also needed to be listed `requiredContracts` method.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = Storage.slot().resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            Storage.slot().addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                Storage.slot().resolver.getAddress(name) != Storage.slot().addressCache[name] ||\\n                Storage.slot().addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        require(address(Storage.slot().resolver) == address(0), \\\"resolver registered already\\\");\\n        Storage.slot().resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function resolver() public view returns (IAddressResolver) {\\n        return Storage.slot().resolver;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0xac122cca03c2145dfeda4bcfd98f84a745575a7053c8b1dd87c41ab3cfd5aea4\",\"license\":\"MIT\"},\"contracts/storages/CollateralParametersStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary CollateralParametersStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.collateralParameters\\\");\\n\\n    struct Storage {\\n        // liquidation price rate in basis point\\n        uint256 liquidationPriceRate;\\n        // margin call threshold rate in basis point\\n        uint256 marginCallThresholdRate;\\n        // auto liquidation threshold rate in basis point\\n        uint256 autoLiquidationThresholdRate;\\n        //  minimal collateral rate in basis point\\n        uint256 minCollateralRate;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x415a942e51ef153edd4bad40a4d9e3940e7e29770172f015647f39eab45b195a\",\"license\":\"MIT\"},\"contracts/storages/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary ERC20Storage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.erc20\\\");\\n\\n    struct Storage {\\n        address weth;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d84467eb850e5927870cb2551e5d0631854cef875f2d3ede75861b5eb738c7c\",\"license\":\"MIT\"},\"contracts/storages/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.mixinAddressResolver\\\");\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 => address) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x852b885b6264a58930a0945c68842717e19f954eaefc0137235e6f263e17fa9d\",\"license\":\"MIT\"},\"contracts/storages/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary OwnableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.ownable\\\");\\n\\n    struct Storage {\\n        address owner;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ef8bfa06947cdb63d47248ad074ac42a1b1ba828a2c97e42486a5dbb2c03e1d\",\"license\":\"MIT\"},\"contracts/storages/TokenVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary TokenVaultStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.tokenVault\\\");\\n\\n    struct Storage {\\n        // Mapping from user to total unsettled collateral per currency\\n        mapping(address => mapping(bytes32 => uint256)) unsettledCollateral;\\n        // Mapping from user to unsettled exposure\\n        mapping(address => EnumerableSet.Bytes32Set) exposedUnsettledCurrencies;\\n        // Mapping from currency name to token address\\n        mapping(bytes32 => address) tokenAddresses;\\n        // Mapping for used currency vaults per user.\\n        mapping(address => EnumerableSet.Bytes32Set) usedCurrencies;\\n        // Mapping for all deposits of currency per users collateral\\n        mapping(address => mapping(bytes32 => uint256)) collateralAmounts;\\n        // Mapping from user to total escrowed amount per currency\\n        mapping(address => mapping(bytes32 => uint256)) escrowedAmount;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x21abb96a0a17972a4fb72f0af00a9de5210d78e17ce7d49b72c818d2cd9a3456\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant BP = 10000; // basis point\\n    uint256 public constant PCT = 10000; // percentage point in basis\\n\\n    uint256 internal constant DAYS_IN_YEAR = 365;\\n    uint256 internal constant SECONDS_IN_YEAR = 31557600;\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n\\n    struct Currency {\\n        bool isSupported;\\n        string name;\\n    }\\n}\\n\",\"keccak256\":\"0x6b5e313818ab365005e061f5d92194aa0b9953fff29fd0ff71a77136910b81d1\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../storages/OwnableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return OwnableStorage.slot().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = OwnableStorage.slot().owner;\\n        OwnableStorage.slot().owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1c782b9deaf1f94d2af99826e6e8207f5e71f3fbb6ce18805913a3ca7dda9579\",\"license\":\"MIT\"},\"contracts/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0xe59cd60631c7c754ed6b77caa6f3a06301ef0df07881a3dcfa85124abc1890b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061312a806100206000396000f3fe6080604052600436106101bb5760003560e01c8063832878ad116100ec578063ae8128411161008a578063d2a19b3e11610064578063d2a19b3e14610520578063e099765914610540578063f2fde38b14610555578063fc7008101461057557600080fd5b8063ae812841146104c0578063c91a99f9146104e0578063ca4230311461050057600080fd5b80638da5cb5b116100c65780638da5cb5b1461044b578063948060dd146104605780639ba57c7d146104805780639fcaebfa146104a057600080fd5b8063832878ad146103f857806383a5041c1461040b5780638cbf5e781461042b57600080fd5b80633d03b9da11610159578063715018a611610133578063715018a6146103835780637796374a146103985780637d44828e146103b85780637ea24133146103d857600080fd5b80633d03b9da1461030c5780635d8615051461032e578063698c92691461036357600080fd5b80631de26e16116101955780631de26e161461029f57806325e1f09f146102b257806329985e5a146102e25780632af64bd3146102f757600080fd5b8063040cf0201461021f57806304f3bcec1461023f5780630cfe33fa1461027157600080fd5b3661021a576101c8610595565b6001600160a01b0316336001600160a01b0316146102185760405162461bcd60e51b815260206004820152600860248201526709cdee840ae8aa8960c31b60448201526064015b60405180910390fd5b005b600080fd5b34801561022b57600080fd5b5061021861023a366004612bab565b6105b6565b34801561024b57600080fd5b50610254610850565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561027d57600080fd5b5061029161028c366004612be2565b610866565b604051908152602001610268565b6102186102ad366004612bab565b6108b7565b3480156102be57600080fd5b506102d26102cd366004612be2565b610a01565b6040519015158152602001610268565b3480156102ee57600080fd5b50610218610a15565b34801561030357600080fd5b506102d2610bc2565b34801561031857600080fd5b50610321610d28565b6040516102689190612bff565b34801561033a57600080fd5b50610343610dba565b604080519485526020850193909352918301526060820152608001610268565b34801561036f57600080fd5b5061021861037e366004612c43565b610dd6565b34801561038f57600080fd5b50610218610f6a565b3480156103a457600080fd5b506102916103b3366004612c89565b610fa5565b3480156103c457600080fd5b506102916103d3366004612c89565b61103d565b3480156103e457600080fd5b506102916103f3366004612c89565b611074565b610218610406366004612cb5565b6110a7565b34801561041757600080fd5b50610218610426366004612cea565b6111aa565b34801561043757600080fd5b50610218610446366004612cb5565b61134d565b34801561045757600080fd5b50610254611451565b34801561046c57600080fd5b5061029161047b366004612be2565b611479565b34801561048c57600080fd5b5061029161049b366004612be2565b611484565b3480156104ac57600080fd5b506102186104bb366004612cb5565b61150a565b3480156104cc57600080fd5b506102186104db366004612d5c565b61162e565b3480156104ec57600080fd5b506102916104fb366004612be2565b61166f565b34801561050c57600080fd5b5061029161051b366004612be2565b61167d565b34801561052c57600080fd5b5061021861053b366004612d8e565b61168b565b34801561054c57600080fd5b506103216117f2565b34801561056157600080fd5b50610218610570366004612be2565b611842565b34801561058157600080fd5b50610321610590366004612be2565b6118e2565b60006000805160206130d58339815191525b546001600160a01b0316919050565b8160006105c16119b1565b600083815260029190910160205260409020546001600160a01b031614156106255760405162461bcd60e51b815260206004820152601760248201527610dd5c9c995b98de481b9bdd081c9959da5cdd195c9959604a1b604482015260640161020f565b600082116106455760405162461bcd60e51b815260040161020f90612dbe565b336000610651826119d5565b9050600061065d611a77565b6040516306d062ad60e01b815260048101889052602481018490526001600160a01b0391909116906306d062ad9060440160206040518083038186803b1580156106a657600080fd5b505afa1580156106ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106de9190612de6565b905060008186116106ef57856106f1565b815b9050806106fc6119b1565b6001600160a01b0386166000908152600491909101602090815260408083208b845290915290205410156107895760405162461bcd60e51b815260206004820152602e60248201527f4e6f7420656e6f75676820636f6c6c61746572616c20696e207468652073656c60448201526d65637465642063757272656e637960901b606482015260840161020f565b806107926119b1565b6001600160a01b0386166000908152600491909101602090815260408083208b8452909152812080549091906107c9908490612e15565b909155506107fd90506107da6119b1565b600089815260029190910160205260409020546001600160a01b03163383611a9c565b61080687611ad9565b60408051338152602081018990529081018290527fc3ded2be7db21b1af963f267d27750e4a15f174547d88b886b9bda43e2c6fa329060600160405180910390a150505050505050565b60006000805160206130b58339815191526105a7565b60008061087283611484565b9050600061088284600080611b52565b61088b85611c9d565b6108959190612e2c565b90508082116108a55760006108af565b6108af8183612e15565b949350505050565b8160006108c26119b1565b600083815260029190910160205260409020546001600160a01b031614156109265760405162461bcd60e51b815260206004820152601760248201527610dd5c9c995b98de481b9bdd081c9959da5cdd195c9959604a1b604482015260640161020f565b600082116109465760405162461bcd60e51b815260040161020f90612dbe565b6109756109516119b1565b600085815260029190910160205260409020546001600160a01b0316333085611d45565b8161097e6119b1565b33600090815260049190910160209081526040808320878452909152812080549091906109ac908490612e2c565b909155506109bb905083611ad9565b60408051338152602081018590529081018390527f19dacbf83c5de6658e14cbf7bcae5c15eca2eedecf1c66fbca928e4d351bea0f9060600160405180910390a1505050565b6000610a0f82600080611d83565b92915050565b6000610a1f610d28565b905060005b8151811015610bbe576000828281518110610a4157610a41612e44565b602002602001015190506000610a626000805160206130b583398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd91610ad391869190605d01612eb2565b60206040518083038186803b158015610aeb57600080fd5b505afa158015610aff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b239190612ecb565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a150508080610bb690612ee8565b915050610a24565b5050565b600080610bcd610d28565b905060005b8151811015610d1f576000828281518110610bef57610bef612e44565b60200260200101519050610c0e6000805160206130b583398151915290565b600082815260019190910160205260409020546001600160a01b03166000805160206130b5833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b158015610c7b57600080fd5b505afa158015610c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb39190612ecb565b6001600160a01b0316141580610cfd575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b15610d0c576000935050505090565b5080610d1781612ee8565b915050610bd2565b50600191505090565b60408051600280825260608083018452926020830190803683370190505090507121bab93932b731bca1b7b73a3937b63632b960711b81600081518110610d7157610d71612e44565b602002602001018181525050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600181518110610dab57610dab612e44565b60200260200101818152505090565b600080600080610dc8611de6565b935093509350935090919293565b610ddf33611e27565b610dfb5760405162461bcd60e51b815260040161020f90612f19565b60008111610e1b5760405162461bcd60e51b815260040161020f90612dbe565b80610e246119b1565b6001600160a01b0386166000908152600591909101602090815260408083208684529091529020541015610e9a5760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820657363726f77656420616d6f756e74000000000000604482015260640161020f565b80610ea36119b1565b6001600160a01b03861660009081526005919091016020908152604080832086845290915281208054909190610eda908490612e15565b90915550610f0e9050610eeb6119b1565b600084815260029190910160205260409020546001600160a01b03168483611a9c565b826001600160a01b0316846001600160a01b03167f489c987eaac048a27dbf1d61a1ab18bbaa6cc7243f9b90e3ba00f1edb26ae20f8484604051610f5c929190918252602082015260400190565b60405180910390a350505050565b33610f73611451565b6001600160a01b031614610f995760405162461bcd60e51b815260040161020f90612f50565b610fa36000611e97565b565b600080610fb2848461103d565b9050610fbc611a77565b6040516344a6ecdd60e01b815260048101859052602481018390526001600160a01b0391909116906344a6ecdd9060440160206040518083038186803b15801561100557600080fd5b505afa158015611019573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108af9190612de6565b60006110476119b1565b6001600160a01b039390931660009081526004909301602090815260408085209385529290525090205490565b600061107e6119b1565b6001600160a01b0384166000908152602091825260408082208583529092522054905092915050565b6110b033611e27565b6110cc5760405162461bcd60e51b815260040161020f90612f19565b600081116110ec5760405162461bcd60e51b815260040161020f90612dbe565b61111b6110f76119b1565b600084815260029190910160205260409020546001600160a01b0316843084611d45565b806111246119b1565b6001600160a01b0385166000908152600591909101602090815260408083208684529091528120805490919061115b908490612e2c565b909155505060408051838152602081018390526001600160a01b038516917fa8f792519e7a6ab4f06121c0e11f2b45df7a581842ead2191d87afe3c81d50b491015b60405180910390a2505050565b600054610100900460ff16158080156111ca5750600054600160ff909116105b806111e45750303b1580156111e4575060005460ff166001145b6112475760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161020f565b6000805460ff19166001179055801561126a576000805461ff0019166101001790555b6000611274611f08565b6001600160a01b031614156112d65760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b606482015260840161020f565b6112df88611e97565b6112e887611f30565b6112f182611fc8565b6112fd86868686612039565b8015611343576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b61135633611e27565b6113725760405162461bcd60e51b815260040161020f90612f19565b8061137b6119b1565b6001600160a01b03851660009081526020918252604080822086835290925290812080549091906113ad908490612e15565b909155506113bb90506119b1565b6001600160a01b03841660009081526020918252604080822085835290925220546114105761140e826113ec6119b1565b6001600160a01b038616600090815260019190910160205260409020906120a2565b505b60408051838152602081018390526001600160a01b038516917fb4c40c9409d6c2c7dfd2fb0d7e0f26582b9dd0dee72dc0ff6ff09af501ba7a76910161119d565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa6105a7565b6000610a0f826119d5565b60008061148f6119b1565b6001600160a01b038416600090815260039190910160205260408120915080806114b8846120ae565b905060005b818110156114ff5760006114d186836120b8565b90506114dd8882610fa5565b94506114e98585612e2c565b93505080806114f790612ee8565b9150506114bd565b509095945050505050565b61151333611e27565b61152f5760405162461bcd60e51b815260040161020f90612f19565b61155d8261153b6119b1565b6001600160a01b038616600090815260019190910160205260409020906120c4565b50611569838383611d83565b6115ad5760405162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da0818dbdb1b185d195c985b605a1b604482015260640161020f565b806115b66119b1565b6001600160a01b03851660009081526020918252604080822086835290925290812080549091906115e8908490612e2c565b909155505060408051838152602081018390526001600160a01b038516917f430a1193f254f9e15dc397d101a1ecf0a3383c95007062135900cc7c2a6b8043910161119d565b33611637611451565b6001600160a01b03161461165d5760405162461bcd60e51b815260040161020f90612f50565b61166984848484612039565b50505050565b6000610a0f82600080611b52565b6000610a0f826000806120d0565b33611694611451565b6001600160a01b0316146116ba5760405162461bcd60e51b815260040161020f90612f50565b6116c2611a77565b6001600160a01b031663d4d4f6ce836040518263ffffffff1660e01b81526004016116ef91815260200190565b60206040518083038186803b15801561170757600080fd5b505afa15801561171b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173f9190612f85565b61177e5760405162461bcd60e51b815260206004820152601060248201526f496e76616c69642063757272656e637960801b604482015260640161020f565b806117876119b1565b6000848152600291909101602090815260409182902080546001600160a01b0319166001600160a01b039485161790558151858152928416908301527f2fe2c48bc79b8185433d1932041ab19e591d41c83d319835ea1c5bb357428790910160405180910390a15050565b60408051600180825281830190925260609160208083019080368337019050509050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600081518110610dab57610dab612e44565b3361184b611451565b6001600160a01b0316146118715760405162461bcd60e51b815260040161020f90612f50565b6001600160a01b0381166118d65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161020f565b6118df81611e97565b50565b606060006118ee6119b1565b6001600160a01b0384166000908152600391909101602052604081209150611915826120ae565b905060008167ffffffffffffffff81111561193257611932612f03565b60405190808252806020026020018201604052801561195b578160200160208202803683370190505b50905060005b828110156119a857600061197585836120b8565b90508083838151811061198a5761198a612e44565b602090810291909101015250806119a081612ee8565b915050611961565b50949350505050565b7f53832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a831790565b6000806119e183611484565b905060006119f184600080611b52565b6119fa85611c9d565b611a049190612e2c565b905080611a12575092915050565b612710611a1d612126565b611a279083612fa7565b611a319190612fc6565b821115611a6d57612710611a43612126565b611a4d9083612fa7565b611a5961271085612fa7565b611a639190612e15565b6108af9190612fc6565b5060009392505050565b6000611a977121bab93932b731bca1b7b73a3937b63632b960711b612139565b905090565b6000805160206130d5833981519152546001600160a01b0384811691161415611ace57611ac982826121d1565b505050565b611ac983838361231c565b6000611ae36119b1565b336000908152600491909101602090815260408083208584529091529020541115611b2d57610bbe81611b146119b1565b33600090815260039190910160205260409020906120c4565b610bbe81611b396119b1565b33600090815260039190910160205260409020906120a2565b600080611b5d6119b1565b6001600160a01b0386166000908152600191909101602052604081209150805b611b86836120ae565b811015611c93576000611b9984836120b8565b9050611ba36119b1565b6001600160a01b0389166000908152602091825260408082208483529092522054925086811415611bdb57611bd88684612e2c565b92505b60008311611bea576000611c73565b611bf2611a77565b6040516344a6ecdd60e01b815260048101839052602481018590526001600160a01b0391909116906344a6ecdd9060440160206040518083038186803b158015611c3b57600080fd5b505afa158015611c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c739190612de6565b611c7d9086612e2c565b9450508080611c8b90612ee8565b915050611b7d565b5050509392505050565b600080611ca8612407565b60405163fb54a6b360e01b81526001600160a01b038581166004830152919091169063fb54a6b39060240160206040518083038186803b158015611ceb57600080fd5b505afa158015611cff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d239190612de6565b905060008113611d3b57611d3681612fe8565b611d3e565b60005b9392505050565b6000805160206130d5833981519152546001600160a01b0385811691161415611d7757611d72828261242c565b611669565b61166984848484612575565b600080611d8f85611484565b90506000611d9e868686611b52565b611da787611c9d565b611db19190612e2c565b9050801580611ddc5750611dc3612126565b611dcd9082612fa7565b611dd961271084612fa7565b10155b9695505050505050565b600080600080611df4612669565b60010154611e00612669565b60020154611e0c612669565b54611e15612669565b60030154935093509350935090919293565b600080611e326117f2565b905060005b8151811015611a6d57611e62828281518110611e5557611e55612e44565b6020026020010151612139565b6001600160a01b0316846001600160a01b03161415611e85575060019392505050565b80611e8f81612ee8565b915050611e37565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6105a7565b6000805160206130b5833981519152546001600160a01b031615611f965760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c72656164790000000000604482015260640161020f565b806000805160206130b58339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b6000805160206130d5833981519152546001600160a01b0316156120245760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015260640161020f565b806000805160206130d5833981519152611fa7565b612041612669565b600101548414612054576120548461268d565b61205c612669565b60020154831461206f5761206f83612701565b612077612669565b54821461208757612087826127e0565b61208f612669565b60030154811461166957611669816128a8565b6000611d3e8383612976565b6000610a0f825490565b6000611d3e8383612a69565b6000611d3e8383612a93565b6000806120dc85611484565b905060006120eb868686611b52565b6120f487611c9d565b6120fe9190612e2c565b9050811561211d578161211361271083612fa7565b611ddc9190612fc6565b50509392505050565b6000612130612669565b60010154905090565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b031690816121ca5760405162461bcd60e51b815260040161020f9190613005565b5092915050565b60006000805160206130d5833981519152546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561222357600080fd5b505afa158015612237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225b9190612de6565b9050818110156122a15760405162461bcd60e51b8152602060048201526011602482015270092dce6eaccccd2c6d2cadce840ae8aa89607b1b604482015260640161020f565b8015611ac9576000805160206130d583398151915254604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156122fa57600080fd5b505af115801561230e573d6000803e3d6000fd5b50505050611ac98383612ae2565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916123789190613018565b6000604051808303816000865af19150503d80600081146123b5576040519150601f19603f3d011682016040523d82523d6000602084013e6123ba565b606091505b50915091508180156123e45750805115806123e45750808060200190518101906123e49190612f85565b6124005760405162461bcd60e51b815260040161020f90613034565b5050505050565b6000611a97762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b612139565b8047101561246f5760405162461bcd60e51b815260206004820152601060248201526f092dce6eaccccd2c6d2cadce8408aa8960831b604482015260640161020f565b6000805160206130d58339815191525460408051630d0e30db60e41b815290516001600160a01b039092169163d0e30db0918491600480830192600092919082900301818588803b1580156124c357600080fd5b505af11580156124d7573d6000803e3d6000fd5b50505050506124f16000805160206130d583398151915290565b5460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561253d57600080fd5b505af1158015612551573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac99190612f85565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916125d99190613018565b6000604051808303816000865af19150503d8060008114612616576040519150601f19603f3d011682016040523d82523d6000602084013e61261b565b606091505b50915091508180156126455750805115806126455750808060200190518101906126459190612f85565b6126615760405162461bcd60e51b815260040161020f90613034565b505050505050565b7f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d05290565b600081116126ad5760405162461bcd60e51b815260040161020f90613078565b7f31ee2d7ab5f3365672e54f81f75b37a4d8b0f1085872bdb80349a1cb08ddb7116126d6612669565b6001015460408051918252602082018490520160405180910390a1806126fa612669565b6001015550565b600081116127215760405162461bcd60e51b815260040161020f90613078565b612729612669565b60010154811061278c5760405162461bcd60e51b815260206004820152602860248201527f4175746f206c69717569646174696f6e207468726573686f6c642072617465206044820152676f766572666c6f7760c01b606482015260840161020f565b7fd3353684d64f1c80498433d8407c96e6bbeb1ec88b6200ec97d2c910fdbd0da46127b5612669565b6002015460408051918252602082018490520160405180910390a1806127d9612669565b6002015550565b600081116128005760405162461bcd60e51b815260040161020f90613078565b612808612669565b60020154811061285a5760405162461bcd60e51b815260206004820152601f60248201527f4c69717569646174696f6e2070726963652072617465206f766572666c6f7700604482015260640161020f565b7f86aa422ec6af9520cb2f744924b12937e3db1aa5ce22050d0d519621e8409070612883612669565b5460408051918252602082018490520160405180910390a1806128a4612669565b5550565b600081116128c85760405162461bcd60e51b815260040161020f90613078565b6128d0612669565b6002015481106129225760405162461bcd60e51b815260206004820152601c60248201527f4d696e20636f6c6c61746572616c2072617465206f766572666c6f7700000000604482015260640161020f565b7f8367b1759e8fdce5712002e7aa025339b99cf3c850b194ebdf37219f86b01ee661294b612669565b6003015460408051918252602082018490520160405180910390a18061296f612669565b6003015550565b60008181526001830160205260408120548015612a5f57600061299a600183612e15565b85549091506000906129ae90600190612e15565b9050818114612a135760008660000182815481106129ce576129ce612e44565b90600052602060002001549050808760000184815481106129f1576129f1612e44565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612a2457612a2461309e565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610a0f565b6000915050610a0f565b6000826000018281548110612a8057612a80612e44565b9060005260206000200154905092915050565b6000818152600183016020526040812054612ada57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a0f565b506000610a0f565b604080516000808252602082019092526001600160a01b038416908390604051612b0c9190613018565b60006040518083038185875af1925050503d8060008114612b49576040519150601f19603f3d011682016040523d82523d6000602084013e612b4e565b606091505b5050905080611ac95760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b606482015260840161020f565b60008060408385031215612bbe57600080fd5b50508035926020909101359150565b6001600160a01b03811681146118df57600080fd5b600060208284031215612bf457600080fd5b8135611d3e81612bcd565b6020808252825182820181905260009190848201906040850190845b81811015612c3757835183529284019291840191600101612c1b565b50909695505050505050565b60008060008060808587031215612c5957600080fd5b8435612c6481612bcd565b93506020850135612c7481612bcd565b93969395505050506040820135916060013590565b60008060408385031215612c9c57600080fd5b8235612ca781612bcd565b946020939093013593505050565b600080600060608486031215612cca57600080fd5b8335612cd581612bcd565b95602085013595506040909401359392505050565b600080600080600080600060e0888a031215612d0557600080fd5b8735612d1081612bcd565b96506020880135612d2081612bcd565b955060408801359450606088013593506080880135925060a0880135915060c0880135612d4c81612bcd565b8091505092959891949750929550565b60008060008060808587031215612d7257600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215612da157600080fd5b823591506020830135612db381612bcd565b809150509250929050565b6020808252600e908201526d125b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b600060208284031215612df857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015612e2757612e27612dff565b500390565b60008219821115612e3f57612e3f612dff565b500190565b634e487b7160e01b600052603260045260246000fd5b60005b83811015612e75578181015183820152602001612e5d565b838111156116695750506000910152565b60008151808452612e9e816020860160208601612e5a565b601f01601f19169290920160200192915050565b8281526040602082015260006108af6040830184612e86565b600060208284031215612edd57600080fd5b8151611d3e81612bcd565b6000600019821415612efc57612efc612dff565b5060010190565b634e487b7160e01b600052604160045260246000fd5b60208082526017908201527f4f6e6c7920416363657074656420436f6e747261637473000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215612f9757600080fd5b81518015158114611d3e57600080fd5b6000816000190483118215151615612fc157612fc1612dff565b500290565b600082612fe357634e487b7160e01b600052601260045260246000fd5b500490565b6000600160ff1b821415612ffe57612ffe612dff565b5060000390565b602081526000611d3e6020830184612e86565b6000825161302a818460208701612e5a565b9190910192915050565b60208082526024908201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416040820152631253115160e21b606082015260800190565b6020808252600c908201526b52617465206973207a65726f60a01b604082015260600190565b634e487b7160e01b600052603160045260246000fdfe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240187522ee63bb7da831844dcdb60f35e8cfa51225eeb4ed6734e421ed06f0d56805a2646970667358221220984e07d7631eddf89fa952981a2db5f2245a7d0d8d87775ed99b16ada45fe12764736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101bb5760003560e01c8063832878ad116100ec578063ae8128411161008a578063d2a19b3e11610064578063d2a19b3e14610520578063e099765914610540578063f2fde38b14610555578063fc7008101461057557600080fd5b8063ae812841146104c0578063c91a99f9146104e0578063ca4230311461050057600080fd5b80638da5cb5b116100c65780638da5cb5b1461044b578063948060dd146104605780639ba57c7d146104805780639fcaebfa146104a057600080fd5b8063832878ad146103f857806383a5041c1461040b5780638cbf5e781461042b57600080fd5b80633d03b9da11610159578063715018a611610133578063715018a6146103835780637796374a146103985780637d44828e146103b85780637ea24133146103d857600080fd5b80633d03b9da1461030c5780635d8615051461032e578063698c92691461036357600080fd5b80631de26e16116101955780631de26e161461029f57806325e1f09f146102b257806329985e5a146102e25780632af64bd3146102f757600080fd5b8063040cf0201461021f57806304f3bcec1461023f5780630cfe33fa1461027157600080fd5b3661021a576101c8610595565b6001600160a01b0316336001600160a01b0316146102185760405162461bcd60e51b815260206004820152600860248201526709cdee840ae8aa8960c31b60448201526064015b60405180910390fd5b005b600080fd5b34801561022b57600080fd5b5061021861023a366004612bab565b6105b6565b34801561024b57600080fd5b50610254610850565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561027d57600080fd5b5061029161028c366004612be2565b610866565b604051908152602001610268565b6102186102ad366004612bab565b6108b7565b3480156102be57600080fd5b506102d26102cd366004612be2565b610a01565b6040519015158152602001610268565b3480156102ee57600080fd5b50610218610a15565b34801561030357600080fd5b506102d2610bc2565b34801561031857600080fd5b50610321610d28565b6040516102689190612bff565b34801561033a57600080fd5b50610343610dba565b604080519485526020850193909352918301526060820152608001610268565b34801561036f57600080fd5b5061021861037e366004612c43565b610dd6565b34801561038f57600080fd5b50610218610f6a565b3480156103a457600080fd5b506102916103b3366004612c89565b610fa5565b3480156103c457600080fd5b506102916103d3366004612c89565b61103d565b3480156103e457600080fd5b506102916103f3366004612c89565b611074565b610218610406366004612cb5565b6110a7565b34801561041757600080fd5b50610218610426366004612cea565b6111aa565b34801561043757600080fd5b50610218610446366004612cb5565b61134d565b34801561045757600080fd5b50610254611451565b34801561046c57600080fd5b5061029161047b366004612be2565b611479565b34801561048c57600080fd5b5061029161049b366004612be2565b611484565b3480156104ac57600080fd5b506102186104bb366004612cb5565b61150a565b3480156104cc57600080fd5b506102186104db366004612d5c565b61162e565b3480156104ec57600080fd5b506102916104fb366004612be2565b61166f565b34801561050c57600080fd5b5061029161051b366004612be2565b61167d565b34801561052c57600080fd5b5061021861053b366004612d8e565b61168b565b34801561054c57600080fd5b506103216117f2565b34801561056157600080fd5b50610218610570366004612be2565b611842565b34801561058157600080fd5b50610321610590366004612be2565b6118e2565b60006000805160206130d58339815191525b546001600160a01b0316919050565b8160006105c16119b1565b600083815260029190910160205260409020546001600160a01b031614156106255760405162461bcd60e51b815260206004820152601760248201527610dd5c9c995b98de481b9bdd081c9959da5cdd195c9959604a1b604482015260640161020f565b600082116106455760405162461bcd60e51b815260040161020f90612dbe565b336000610651826119d5565b9050600061065d611a77565b6040516306d062ad60e01b815260048101889052602481018490526001600160a01b0391909116906306d062ad9060440160206040518083038186803b1580156106a657600080fd5b505afa1580156106ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106de9190612de6565b905060008186116106ef57856106f1565b815b9050806106fc6119b1565b6001600160a01b0386166000908152600491909101602090815260408083208b845290915290205410156107895760405162461bcd60e51b815260206004820152602e60248201527f4e6f7420656e6f75676820636f6c6c61746572616c20696e207468652073656c60448201526d65637465642063757272656e637960901b606482015260840161020f565b806107926119b1565b6001600160a01b0386166000908152600491909101602090815260408083208b8452909152812080549091906107c9908490612e15565b909155506107fd90506107da6119b1565b600089815260029190910160205260409020546001600160a01b03163383611a9c565b61080687611ad9565b60408051338152602081018990529081018290527fc3ded2be7db21b1af963f267d27750e4a15f174547d88b886b9bda43e2c6fa329060600160405180910390a150505050505050565b60006000805160206130b58339815191526105a7565b60008061087283611484565b9050600061088284600080611b52565b61088b85611c9d565b6108959190612e2c565b90508082116108a55760006108af565b6108af8183612e15565b949350505050565b8160006108c26119b1565b600083815260029190910160205260409020546001600160a01b031614156109265760405162461bcd60e51b815260206004820152601760248201527610dd5c9c995b98de481b9bdd081c9959da5cdd195c9959604a1b604482015260640161020f565b600082116109465760405162461bcd60e51b815260040161020f90612dbe565b6109756109516119b1565b600085815260029190910160205260409020546001600160a01b0316333085611d45565b8161097e6119b1565b33600090815260049190910160209081526040808320878452909152812080549091906109ac908490612e2c565b909155506109bb905083611ad9565b60408051338152602081018590529081018390527f19dacbf83c5de6658e14cbf7bcae5c15eca2eedecf1c66fbca928e4d351bea0f9060600160405180910390a1505050565b6000610a0f82600080611d83565b92915050565b6000610a1f610d28565b905060005b8151811015610bbe576000828281518110610a4157610a41612e44565b602002602001015190506000610a626000805160206130b583398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd91610ad391869190605d01612eb2565b60206040518083038186803b158015610aeb57600080fd5b505afa158015610aff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b239190612ecb565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a150508080610bb690612ee8565b915050610a24565b5050565b600080610bcd610d28565b905060005b8151811015610d1f576000828281518110610bef57610bef612e44565b60200260200101519050610c0e6000805160206130b583398151915290565b600082815260019190910160205260409020546001600160a01b03166000805160206130b5833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b158015610c7b57600080fd5b505afa158015610c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb39190612ecb565b6001600160a01b0316141580610cfd575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b15610d0c576000935050505090565b5080610d1781612ee8565b915050610bd2565b50600191505090565b60408051600280825260608083018452926020830190803683370190505090507121bab93932b731bca1b7b73a3937b63632b960711b81600081518110610d7157610d71612e44565b602002602001018181525050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600181518110610dab57610dab612e44565b60200260200101818152505090565b600080600080610dc8611de6565b935093509350935090919293565b610ddf33611e27565b610dfb5760405162461bcd60e51b815260040161020f90612f19565b60008111610e1b5760405162461bcd60e51b815260040161020f90612dbe565b80610e246119b1565b6001600160a01b0386166000908152600591909101602090815260408083208684529091529020541015610e9a5760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820657363726f77656420616d6f756e74000000000000604482015260640161020f565b80610ea36119b1565b6001600160a01b03861660009081526005919091016020908152604080832086845290915281208054909190610eda908490612e15565b90915550610f0e9050610eeb6119b1565b600084815260029190910160205260409020546001600160a01b03168483611a9c565b826001600160a01b0316846001600160a01b03167f489c987eaac048a27dbf1d61a1ab18bbaa6cc7243f9b90e3ba00f1edb26ae20f8484604051610f5c929190918252602082015260400190565b60405180910390a350505050565b33610f73611451565b6001600160a01b031614610f995760405162461bcd60e51b815260040161020f90612f50565b610fa36000611e97565b565b600080610fb2848461103d565b9050610fbc611a77565b6040516344a6ecdd60e01b815260048101859052602481018390526001600160a01b0391909116906344a6ecdd9060440160206040518083038186803b15801561100557600080fd5b505afa158015611019573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108af9190612de6565b60006110476119b1565b6001600160a01b039390931660009081526004909301602090815260408085209385529290525090205490565b600061107e6119b1565b6001600160a01b0384166000908152602091825260408082208583529092522054905092915050565b6110b033611e27565b6110cc5760405162461bcd60e51b815260040161020f90612f19565b600081116110ec5760405162461bcd60e51b815260040161020f90612dbe565b61111b6110f76119b1565b600084815260029190910160205260409020546001600160a01b0316843084611d45565b806111246119b1565b6001600160a01b0385166000908152600591909101602090815260408083208684529091528120805490919061115b908490612e2c565b909155505060408051838152602081018390526001600160a01b038516917fa8f792519e7a6ab4f06121c0e11f2b45df7a581842ead2191d87afe3c81d50b491015b60405180910390a2505050565b600054610100900460ff16158080156111ca5750600054600160ff909116105b806111e45750303b1580156111e4575060005460ff166001145b6112475760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161020f565b6000805460ff19166001179055801561126a576000805461ff0019166101001790555b6000611274611f08565b6001600160a01b031614156112d65760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b606482015260840161020f565b6112df88611e97565b6112e887611f30565b6112f182611fc8565b6112fd86868686612039565b8015611343576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b61135633611e27565b6113725760405162461bcd60e51b815260040161020f90612f19565b8061137b6119b1565b6001600160a01b03851660009081526020918252604080822086835290925290812080549091906113ad908490612e15565b909155506113bb90506119b1565b6001600160a01b03841660009081526020918252604080822085835290925220546114105761140e826113ec6119b1565b6001600160a01b038616600090815260019190910160205260409020906120a2565b505b60408051838152602081018390526001600160a01b038516917fb4c40c9409d6c2c7dfd2fb0d7e0f26582b9dd0dee72dc0ff6ff09af501ba7a76910161119d565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa6105a7565b6000610a0f826119d5565b60008061148f6119b1565b6001600160a01b038416600090815260039190910160205260408120915080806114b8846120ae565b905060005b818110156114ff5760006114d186836120b8565b90506114dd8882610fa5565b94506114e98585612e2c565b93505080806114f790612ee8565b9150506114bd565b509095945050505050565b61151333611e27565b61152f5760405162461bcd60e51b815260040161020f90612f19565b61155d8261153b6119b1565b6001600160a01b038616600090815260019190910160205260409020906120c4565b50611569838383611d83565b6115ad5760405162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da0818dbdb1b185d195c985b605a1b604482015260640161020f565b806115b66119b1565b6001600160a01b03851660009081526020918252604080822086835290925290812080549091906115e8908490612e2c565b909155505060408051838152602081018390526001600160a01b038516917f430a1193f254f9e15dc397d101a1ecf0a3383c95007062135900cc7c2a6b8043910161119d565b33611637611451565b6001600160a01b03161461165d5760405162461bcd60e51b815260040161020f90612f50565b61166984848484612039565b50505050565b6000610a0f82600080611b52565b6000610a0f826000806120d0565b33611694611451565b6001600160a01b0316146116ba5760405162461bcd60e51b815260040161020f90612f50565b6116c2611a77565b6001600160a01b031663d4d4f6ce836040518263ffffffff1660e01b81526004016116ef91815260200190565b60206040518083038186803b15801561170757600080fd5b505afa15801561171b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173f9190612f85565b61177e5760405162461bcd60e51b815260206004820152601060248201526f496e76616c69642063757272656e637960801b604482015260640161020f565b806117876119b1565b6000848152600291909101602090815260409182902080546001600160a01b0319166001600160a01b039485161790558151858152928416908301527f2fe2c48bc79b8185433d1932041ab19e591d41c83d319835ea1c5bb357428790910160405180910390a15050565b60408051600180825281830190925260609160208083019080368337019050509050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600081518110610dab57610dab612e44565b3361184b611451565b6001600160a01b0316146118715760405162461bcd60e51b815260040161020f90612f50565b6001600160a01b0381166118d65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161020f565b6118df81611e97565b50565b606060006118ee6119b1565b6001600160a01b0384166000908152600391909101602052604081209150611915826120ae565b905060008167ffffffffffffffff81111561193257611932612f03565b60405190808252806020026020018201604052801561195b578160200160208202803683370190505b50905060005b828110156119a857600061197585836120b8565b90508083838151811061198a5761198a612e44565b602090810291909101015250806119a081612ee8565b915050611961565b50949350505050565b7f53832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a831790565b6000806119e183611484565b905060006119f184600080611b52565b6119fa85611c9d565b611a049190612e2c565b905080611a12575092915050565b612710611a1d612126565b611a279083612fa7565b611a319190612fc6565b821115611a6d57612710611a43612126565b611a4d9083612fa7565b611a5961271085612fa7565b611a639190612e15565b6108af9190612fc6565b5060009392505050565b6000611a977121bab93932b731bca1b7b73a3937b63632b960711b612139565b905090565b6000805160206130d5833981519152546001600160a01b0384811691161415611ace57611ac982826121d1565b505050565b611ac983838361231c565b6000611ae36119b1565b336000908152600491909101602090815260408083208584529091529020541115611b2d57610bbe81611b146119b1565b33600090815260039190910160205260409020906120c4565b610bbe81611b396119b1565b33600090815260039190910160205260409020906120a2565b600080611b5d6119b1565b6001600160a01b0386166000908152600191909101602052604081209150805b611b86836120ae565b811015611c93576000611b9984836120b8565b9050611ba36119b1565b6001600160a01b0389166000908152602091825260408082208483529092522054925086811415611bdb57611bd88684612e2c565b92505b60008311611bea576000611c73565b611bf2611a77565b6040516344a6ecdd60e01b815260048101839052602481018590526001600160a01b0391909116906344a6ecdd9060440160206040518083038186803b158015611c3b57600080fd5b505afa158015611c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c739190612de6565b611c7d9086612e2c565b9450508080611c8b90612ee8565b915050611b7d565b5050509392505050565b600080611ca8612407565b60405163fb54a6b360e01b81526001600160a01b038581166004830152919091169063fb54a6b39060240160206040518083038186803b158015611ceb57600080fd5b505afa158015611cff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d239190612de6565b905060008113611d3b57611d3681612fe8565b611d3e565b60005b9392505050565b6000805160206130d5833981519152546001600160a01b0385811691161415611d7757611d72828261242c565b611669565b61166984848484612575565b600080611d8f85611484565b90506000611d9e868686611b52565b611da787611c9d565b611db19190612e2c565b9050801580611ddc5750611dc3612126565b611dcd9082612fa7565b611dd961271084612fa7565b10155b9695505050505050565b600080600080611df4612669565b60010154611e00612669565b60020154611e0c612669565b54611e15612669565b60030154935093509350935090919293565b600080611e326117f2565b905060005b8151811015611a6d57611e62828281518110611e5557611e55612e44565b6020026020010151612139565b6001600160a01b0316846001600160a01b03161415611e85575060019392505050565b80611e8f81612ee8565b915050611e37565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6105a7565b6000805160206130b5833981519152546001600160a01b031615611f965760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c72656164790000000000604482015260640161020f565b806000805160206130b58339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b6000805160206130d5833981519152546001600160a01b0316156120245760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015260640161020f565b806000805160206130d5833981519152611fa7565b612041612669565b600101548414612054576120548461268d565b61205c612669565b60020154831461206f5761206f83612701565b612077612669565b54821461208757612087826127e0565b61208f612669565b60030154811461166957611669816128a8565b6000611d3e8383612976565b6000610a0f825490565b6000611d3e8383612a69565b6000611d3e8383612a93565b6000806120dc85611484565b905060006120eb868686611b52565b6120f487611c9d565b6120fe9190612e2c565b9050811561211d578161211361271083612fa7565b611ddc9190612fc6565b50509392505050565b6000612130612669565b60010154905090565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b031690816121ca5760405162461bcd60e51b815260040161020f9190613005565b5092915050565b60006000805160206130d5833981519152546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561222357600080fd5b505afa158015612237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225b9190612de6565b9050818110156122a15760405162461bcd60e51b8152602060048201526011602482015270092dce6eaccccd2c6d2cadce840ae8aa89607b1b604482015260640161020f565b8015611ac9576000805160206130d583398151915254604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156122fa57600080fd5b505af115801561230e573d6000803e3d6000fd5b50505050611ac98383612ae2565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916123789190613018565b6000604051808303816000865af19150503d80600081146123b5576040519150601f19603f3d011682016040523d82523d6000602084013e6123ba565b606091505b50915091508180156123e45750805115806123e45750808060200190518101906123e49190612f85565b6124005760405162461bcd60e51b815260040161020f90613034565b5050505050565b6000611a97762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b612139565b8047101561246f5760405162461bcd60e51b815260206004820152601060248201526f092dce6eaccccd2c6d2cadce8408aa8960831b604482015260640161020f565b6000805160206130d58339815191525460408051630d0e30db60e41b815290516001600160a01b039092169163d0e30db0918491600480830192600092919082900301818588803b1580156124c357600080fd5b505af11580156124d7573d6000803e3d6000fd5b50505050506124f16000805160206130d583398151915290565b5460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561253d57600080fd5b505af1158015612551573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac99190612f85565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916125d99190613018565b6000604051808303816000865af19150503d8060008114612616576040519150601f19603f3d011682016040523d82523d6000602084013e61261b565b606091505b50915091508180156126455750805115806126455750808060200190518101906126459190612f85565b6126615760405162461bcd60e51b815260040161020f90613034565b505050505050565b7f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d05290565b600081116126ad5760405162461bcd60e51b815260040161020f90613078565b7f31ee2d7ab5f3365672e54f81f75b37a4d8b0f1085872bdb80349a1cb08ddb7116126d6612669565b6001015460408051918252602082018490520160405180910390a1806126fa612669565b6001015550565b600081116127215760405162461bcd60e51b815260040161020f90613078565b612729612669565b60010154811061278c5760405162461bcd60e51b815260206004820152602860248201527f4175746f206c69717569646174696f6e207468726573686f6c642072617465206044820152676f766572666c6f7760c01b606482015260840161020f565b7fd3353684d64f1c80498433d8407c96e6bbeb1ec88b6200ec97d2c910fdbd0da46127b5612669565b6002015460408051918252602082018490520160405180910390a1806127d9612669565b6002015550565b600081116128005760405162461bcd60e51b815260040161020f90613078565b612808612669565b60020154811061285a5760405162461bcd60e51b815260206004820152601f60248201527f4c69717569646174696f6e2070726963652072617465206f766572666c6f7700604482015260640161020f565b7f86aa422ec6af9520cb2f744924b12937e3db1aa5ce22050d0d519621e8409070612883612669565b5460408051918252602082018490520160405180910390a1806128a4612669565b5550565b600081116128c85760405162461bcd60e51b815260040161020f90613078565b6128d0612669565b6002015481106129225760405162461bcd60e51b815260206004820152601c60248201527f4d696e20636f6c6c61746572616c2072617465206f766572666c6f7700000000604482015260640161020f565b7f8367b1759e8fdce5712002e7aa025339b99cf3c850b194ebdf37219f86b01ee661294b612669565b6003015460408051918252602082018490520160405180910390a18061296f612669565b6003015550565b60008181526001830160205260408120548015612a5f57600061299a600183612e15565b85549091506000906129ae90600190612e15565b9050818114612a135760008660000182815481106129ce576129ce612e44565b90600052602060002001549050808760000184815481106129f1576129f1612e44565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612a2457612a2461309e565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610a0f565b6000915050610a0f565b6000826000018281548110612a8057612a80612e44565b9060005260206000200154905092915050565b6000818152600183016020526040812054612ada57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a0f565b506000610a0f565b604080516000808252602082019092526001600160a01b038416908390604051612b0c9190613018565b60006040518083038185875af1925050503d8060008114612b49576040519150601f19603f3d011682016040523d82523d6000602084013e612b4e565b606091505b5050905080611ac95760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b606482015260840161020f565b60008060408385031215612bbe57600080fd5b50508035926020909101359150565b6001600160a01b03811681146118df57600080fd5b600060208284031215612bf457600080fd5b8135611d3e81612bcd565b6020808252825182820181905260009190848201906040850190845b81811015612c3757835183529284019291840191600101612c1b565b50909695505050505050565b60008060008060808587031215612c5957600080fd5b8435612c6481612bcd565b93506020850135612c7481612bcd565b93969395505050506040820135916060013590565b60008060408385031215612c9c57600080fd5b8235612ca781612bcd565b946020939093013593505050565b600080600060608486031215612cca57600080fd5b8335612cd581612bcd565b95602085013595506040909401359392505050565b600080600080600080600060e0888a031215612d0557600080fd5b8735612d1081612bcd565b96506020880135612d2081612bcd565b955060408801359450606088013593506080880135925060a0880135915060c0880135612d4c81612bcd565b8091505092959891949750929550565b60008060008060808587031215612d7257600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215612da157600080fd5b823591506020830135612db381612bcd565b809150509250929050565b6020808252600e908201526d125b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b600060208284031215612df857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015612e2757612e27612dff565b500390565b60008219821115612e3f57612e3f612dff565b500190565b634e487b7160e01b600052603260045260246000fd5b60005b83811015612e75578181015183820152602001612e5d565b838111156116695750506000910152565b60008151808452612e9e816020860160208601612e5a565b601f01601f19169290920160200192915050565b8281526040602082015260006108af6040830184612e86565b600060208284031215612edd57600080fd5b8151611d3e81612bcd565b6000600019821415612efc57612efc612dff565b5060010190565b634e487b7160e01b600052604160045260246000fd5b60208082526017908201527f4f6e6c7920416363657074656420436f6e747261637473000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215612f9757600080fd5b81518015158114611d3e57600080fd5b6000816000190483118215151615612fc157612fc1612dff565b500290565b600082612fe357634e487b7160e01b600052601260045260246000fd5b500490565b6000600160ff1b821415612ffe57612ffe612dff565b5060000390565b602081526000611d3e6020830184612e86565b6000825161302a818460208701612e5a565b9190910192915050565b60208082526024908201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416040820152631253115160e21b606082015260800190565b6020808252600c908201526b52617465206973207a65726f60a01b604082015260600190565b634e487b7160e01b600052603160045260246000fdfe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240187522ee63bb7da831844dcdb60f35e8cfa51225eeb4ed6734e421ed06f0d56805a2646970667358221220984e07d7631eddf89fa952981a2db5f2245a7d0d8d87775ed99b16ada45fe12764736f6c63430008090033",
  "implementation": "0x21B094EA102212d10940A3FC4e930E885DFaea26",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptedContracts()": {
        "details": "The contact name listed in this method is also needed to be listed `requiredContracts` method."
      },
      "addEscrowedAmount(address,bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to be add into escrow",
          "_ccy": "Currency name in bytes32",
          "_payer": "Address of user making payment"
        }
      },
      "deposit(bytes32,uint256)": {
        "details": "Deposits funds by the caller into collateral.",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32"
        }
      },
      "getCollateralAmount(address,bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "_0": "The deposited amount"
        }
      },
      "getCollateralAmountInETH(address,bytes32)": {
        "params": {
          "_ccy": "Specified currency",
          "_user": "User's address"
        },
        "returns": {
          "_0": "The deposited amount in ETH"
        }
      },
      "getCollateralParameters()": {
        "returns": {
          "autoLiquidationThresholdRate": " The rate used as the auto liquidation threshold",
          "liquidationPriceRate": "The rate used as the liquidation price",
          "marginCallThresholdRate": "The rate used as the margin call threshold",
          "minCollateralRate": "The rate used minima collateral"
        }
      },
      "getCoverage(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The rate of collateral used"
        }
      },
      "getTotalCollateralAmountInETH(address)": {
        "params": {
          "_user": "Address of collateral user"
        },
        "returns": {
          "_0": "The total deposited amount in ETH"
        }
      },
      "getTotalUnsettledExposure(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "Total unsettled exposure"
        }
      },
      "getUnsettledCollateral(address,bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "_0": "Unsettled exposure"
        }
      },
      "getUnusedCollateral(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The total amount of unused collateral"
        }
      },
      "getUsedCurrencies(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The currency names in bytes32"
        }
      },
      "getWithdrawableCollateral(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "Maximum amount of ETH that can be withdrawn"
        }
      },
      "initialize(address,address,uint256,uint256,uint256,uint256,address)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController.",
        "params": {
          "_WETH9": "The address of WETH",
          "_autoLiquidationThresholdRate": "The rate used as the auto liquidation threshold",
          "_liquidationPriceRate": "The rate used as the liquidation price",
          "_marginCallThresholdRate": "The rate used as the margin call threshold",
          "_minCollateralRate": "The rate used minima collateral",
          "_owner": "The address of the contract owner",
          "_resolver": "The address of the Address Resolver contract"
        }
      },
      "isCovered(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The boolean if the collateral has sufficient coverage or not"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "releaseUnsettledCollateral(address,bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to be unlocked from unsettled exposure in a specified currency",
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "removeEscrowedAmount(address,address,bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to be removed from escrow",
          "_ccy": "Currency name in bytes32",
          "_payer": "Address of user making payment",
          "_receiver": "Address of user receiving payment"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requiredContracts()": {
        "details": "The contract name list is in `./libraries/Contracts.sol`."
      },
      "setCollateralParameters(uint256,uint256,uint256,uint256)": {
        "params": {
          "_autoLiquidationThresholdRate": "Auto liquidation threshold rate",
          "_liquidationPriceRate": "Liquidation price rate",
          "_marginCallThresholdRate": "Margin call threshold ratio",
          "_minCollateralRate": "Minimal collateral rate"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "useUnsettledCollateral(address,bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to be locked in a specified currency",
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "withdraw(bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to withdraw.",
          "_ccy": "Currency name in bytes32"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptedContracts()": {
        "notice": "Returns contract names that can call this contract."
      },
      "addEscrowedAmount(address,bytes32,uint256)": {
        "notice": "Add funds to escrow."
      },
      "getCollateralAmount(address,bytes32)": {
        "notice": "Gets the amount deposited in the user's collateral."
      },
      "getCollateralAmountInETH(address,bytes32)": {
        "notice": "Gets the amount deposited in the user's collateral by converting it to ETH."
      },
      "getCollateralParameters()": {
        "notice": "Gets parameters related to collateral."
      },
      "getCoverage(address)": {
        "notice": "Gets the rate of collateral used."
      },
      "getTotalCollateralAmountInETH(address)": {
        "notice": "Gets the total amount deposited in the user's collateral in all currencies. by converting it to ETH."
      },
      "getTotalUnsettledExposure(address)": {
        "notice": "Gets total unsettled exposure in all currencies."
      },
      "getUnsettledCollateral(address,bytes32)": {
        "notice": "Gets unsettled exposure for the selected currency"
      },
      "getUnusedCollateral(address)": {
        "notice": "Gets the total amount of unused collateral"
      },
      "getUsedCurrencies(address)": {
        "notice": "Gets the currencies that the user used as collateral."
      },
      "getWithdrawableCollateral(address)": {
        "notice": "Gets the maximum amount of ETH that can be withdrawn from user collateral."
      },
      "initialize(address,address,uint256,uint256,uint256,uint256,address)": {
        "notice": "Initializes the contract."
      },
      "isCovered(address)": {
        "notice": "Gets if the collateral has enough coverage."
      },
      "releaseUnsettledCollateral(address,bytes32,uint256)": {
        "notice": "Releases the amount of unsettled exposure for the selected currency."
      },
      "removeEscrowedAmount(address,address,bytes32,uint256)": {
        "notice": "Remove funds from escrow."
      },
      "requiredContracts()": {
        "notice": "Returns the contract names used in this contract."
      },
      "setCollateralParameters(uint256,uint256,uint256,uint256)": {
        "notice": "Sets main collateral parameters this function solves the issue of frontrunning during parameters tuning.Triggers only be contract owner"
      },
      "useUnsettledCollateral(address,bytes32,uint256)": {
        "notice": "Locks unsettled collateral for the selected currency."
      },
      "withdraw(bytes32,uint256)": {
        "notice": "Withdraws funds by the caller from unused collateral."
      }
    },
    "notice": "Implements the management of the token in each currency for users. This contract manages the following data related to tokens. - Deposited token amount as the collateral - Unsettled collateral amount used by order - Escrowed token amount added by lending orders - Parameters related to the collateral   - Margin Call Threshold Rate   - Auto Liquidation Threshold Rate   - Liquidation Price Rate   - Min Collateral Rate To address a currency as collateral, it must be registered using `registerCurrency` method in this contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 790,
        "contract": "contracts/TokenVault.sol:TokenVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 793,
        "contract": "contracts/TokenVault.sol:TokenVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}