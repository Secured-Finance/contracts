{
  "address": "0xDb2fff332d632F00d8f53e473E2ee570D42d671D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "CallerNotBaseCurrency",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotOperator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCurrency",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLiquidationProtocolFeeRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLiquidationThresholdRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLiquidatorFeeRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MarketTerminated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "MissingAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAcceptedContracts",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedemptionIsRequired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ResolverAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnregisteredCurrency",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "AutoLiquidationThresholdRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isCollateral",
          "type": "bool"
        }
      ],
      "name": "CurrencyRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isCollateral",
          "type": "bool"
        }
      ],
      "name": "CurrencyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "LiquidationProtocolFeeRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "LiquidatorFeeRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addDepositAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "ccy",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "workingLendOrdersAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "workingBorrowOrdersAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILendingMarketController.AdditionalFunds",
          "name": "_additionalFunds",
          "type": "tuple"
        }
      ],
      "name": "calculateCoverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "coverage",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isInsufficientDepositAmount",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateLiquidationFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidatorFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "executeForcedReset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getBorrowableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralCurrencies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getCoverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_liquidationCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationAmountMaximum",
          "type": "uint256"
        }
      ],
      "name": "getLiquidationAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidationAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidatorFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidationConfiguration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationProtocolFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidatorFeeRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRevision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCollateralAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getTotalDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalUnusedCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUsedCurrencies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getWithdrawableCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getWithdrawableCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationProtocolFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidatorFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nativeToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_ccys",
          "type": "bytes32[]"
        }
      ],
      "name": "isCollateral",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "isCollateralCurrencies",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "isCollateral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isCovered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "isRegisteredCurrency",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isCollateral",
          "type": "bool"
        }
      ],
      "name": "registerCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeDepositAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "removeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "adminRole",
          "type": "bytes32"
        }
      ],
      "name": "setRoleAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "untransferredAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_isCollateral",
          "type": "bool"
        }
      ],
      "name": "updateCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationProtocolFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidatorFeeRate",
          "type": "uint256"
        }
      ],
      "name": "updateLiquidationConfiguration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe1185f45c92749651bf5d218cf07edea2f6cae90a16b7a7a4ff6d817c0e4e1f6",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0xC4e84981dD3D4e00AbdB73d4438C742b8cE4834a",
    "transactionIndex": 0,
    "gasUsed": "3394434",
    "logsBloom": "0x
    "blockHash": "0x2f4a7bac9c264a7c92dde59beb60774f08e04f086b6840824df87a56f966ed08",
    "transactionHash": "0xe1185f45c92749651bf5d218cf07edea2f6cae90a16b7a7a4ff6d817c0e4e1f6",
    "logs": [],
    "blockNumber": 4543750,
    "cumulativeGasUsed": "3394434",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "779b1d8459d9078db8690c7abff4d93c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerNotBaseCurrency\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCurrency\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLiquidationProtocolFeeRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLiquidationThresholdRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLiquidatorFeeRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketTerminated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"MissingAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAcceptedContracts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedemptionIsRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ResolverAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnregisteredCurrency\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"AutoLiquidationThresholdRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCollateral\",\"type\":\"bool\"}],\"name\":\"CurrencyRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCollateral\",\"type\":\"bool\"}],\"name\":\"CurrencyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"LiquidationProtocolFeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"LiquidatorFeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"workingLendOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"workingBorrowOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendingMarketController.AdditionalFunds\",\"name\":\"_additionalFunds\",\"type\":\"tuple\"}],\"name\":\"calculateCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coverage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInsufficientDepositAmount\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateLiquidationFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidatorFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"executeForcedReset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getBorrowableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralCurrencies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_liquidationCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationAmountMaximum\",\"type\":\"uint256\"}],\"name\":\"getLiquidationAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidatorFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidationConfiguration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationProtocolFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidatorFeeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRevision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateralAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getTotalDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalUnusedCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUsedCurrencies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationProtocolFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidatorFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nativeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_ccys\",\"type\":\"bytes32[]\"}],\"name\":\"isCollateral\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"isCollateralCurrencies\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"isCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isCovered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"isRegisteredCurrency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isCollateral\",\"type\":\"bool\"}],\"name\":\"registerCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminRole\",\"type\":\"bytes32\"}],\"name\":\"setRoleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"untransferredAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isCollateral\",\"type\":\"bool\"}],\"name\":\"updateCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationProtocolFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidatorFeeRate\",\"type\":\"uint256\"}],\"name\":\"updateLiquidationConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"acceptedContracts()\":{\"details\":\"The contact name listed in this method is also needed to be listed `requiredContracts` method.\"},\"addDepositAmount(address,bytes32,uint256)\":{\"details\":\"Adds deposit amount.\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"addOperator(address)\":{\"params\":{\"admin\":\"The address of the new admin\"}},\"calculateCoverage(address,(bytes32,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"_additionalFunds\":\"Additional funds for calculating the coverage\",\"_user\":\"User's address\"},\"returns\":{\"coverage\":\"The rate of collateral used\",\"isInsufficientDepositAmount\":\"The boolean if the lent amount in the selected currency is insufficient for the deposit amount or not\"}},\"calculateLiquidationFees(uint256)\":{\"params\":{\"_amount\":\"Liquidation amount\"},\"returns\":{\"liquidatorFee\":\"Liquidation fee amount received by liquidators\",\"protocolFee\":\"Liquidation fee amount received by protocol\"}},\"deposit(bytes32,uint256)\":{\"details\":\"Deposits funds by the caller into collateral.\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\"}},\"depositFrom(address,bytes32,uint256)\":{\"details\":\"Deposits funds by the `from` into collateral.\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\",\"_from\":\"user's address\"}},\"executeForcedReset(address,bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"getBorrowableAmount(address,bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"amount The borrowable amount\"}},\"getCollateralAmount(address,bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"amount\":\"The collateral amount\"}},\"getCollateralCurrencies()\":{\"returns\":{\"_0\":\"Array of the currency accepted as collateral\"}},\"getCoverage(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The rate of collateral used\"}},\"getDepositAmount(address,bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The deposited amount\"}},\"getLiquidationAmount(address,bytes32,uint256)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"liquidationAmount\":\"The the amount to be liquidated\"}},\"getLiquidationConfiguration()\":{\"details\":\"Gets the liquidation configuration\",\"returns\":{\"liquidationProtocolFeeRate\":\"The liquidation fee received by liquidators\",\"liquidationThresholdRate\":\"The liquidation threshold rate\",\"liquidatorFeeRate\":\"The liquidation protocol fee received by protocol\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTokenAddress(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The token contract address\"}},\"getTotalCollateralAmount(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"totalCollateralAmount\":\"The total collateral amount in the base currency\"}},\"getTotalDepositAmount(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The total deposited amount\"}},\"getTotalUnusedCollateralAmount(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The total amount of unused collateral\"}},\"getUsedCurrencies(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The currency names in bytes32\"}},\"getWithdrawableCollateral(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"Maximum amount of ETH that can be withdrawn\"}},\"getWithdrawableCollateral(bytes32,address)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"Maximum amount of the selected currency that can be withdrawn\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,uint256,uint256,uint256,address)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController.\",\"params\":{\"_liquidationProtocolFeeRate\":\"The liquidation fee rate received by protocol\",\"_liquidationThresholdRate\":\"The liquidation threshold rate\",\"_liquidatorFeeRate\":\"The liquidation fee rate received by liquidators\",\"_nativeToken\":\"The address of wrapped token of native currency\",\"_owner\":\"The address of the contract owner\",\"_resolver\":\"The address of the Address Resolver contract\"}},\"isCollateral(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The boolean if the currency has been registered or not\"}},\"isCollateral(bytes32[])\":{\"params\":{\"_ccys\":\"Currency name list in bytes32\"},\"returns\":{\"isCollateralCurrencies\":\"Array of the boolean if the currency has been registered or not\"}},\"isCovered(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The boolean if the collateral has sufficient coverage or not\"}},\"isRegisteredCurrency(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The boolean if the currency has been registered or not\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"registerCurrency(bytes32,address,bool)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_isCollateral\":\"Boolean if the selected currency is acceptable as collateral.\",\"_tokenAddress\":\"Token contract address of the selected currency\"}},\"removeDepositAmount(address,bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to withdraw.\",\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"removeOperator(address)\":{\"params\":{\"admin\":\"The address of the admin to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"requiredContracts()\":{\"details\":\"The contract name list is in `./libraries/Contracts.sol`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setRoleAdmin(bytes32,bytes32)\":{\"details\":\"By default the admin role for all roles is `DEFAULT_ADMIN_ROLE`.\",\"params\":{\"adminRole\":\"The admin role\",\"role\":\"The role to be managed by the admin role\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferFrom(bytes32,address,address,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to sent\",\"_ccy\":\"Currency name in bytes32\",\"_from\":\"Sender's address\",\"_to\":\"Receiver's address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCurrency(bytes32,bool)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_isCollateral\":\"Boolean if the selected currency is acceptable as collateral.\"}},\"updateLiquidationConfiguration(uint256,uint256,uint256)\":{\"details\":\"Update the liquidation configuration\",\"params\":{\"_liquidationProtocolFeeRate\":\"The liquidation fee rate received by protocol\",\"_liquidationThresholdRate\":\"The liquidation threshold rate\",\"_liquidatorFeeRate\":\"The liquidation fee rate received by liquidators\"}},\"withdraw(bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to withdraw.\",\"_ccy\":\"Currency name in bytes32\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptedContracts()\":{\"notice\":\"Returns contract names that can call this contract.\"},\"addOperator(address)\":{\"notice\":\"Adds a new admin as Operator\"},\"calculateCoverage(address,(bytes32,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Calculates the collateral rate used when additional funds are had by the user.\"},\"calculateLiquidationFees(uint256)\":{\"notice\":\"Gets the actual fee amounts calculated by rates.\"},\"executeForcedReset(address,bytes32)\":{\"notice\":\"Forces a reset of the user's deposit amount.\"},\"getBorrowableAmount(address,bytes32)\":{\"notice\":\"Gets the borrowable amount in the selected currency.\"},\"getCollateralAmount(address,bytes32)\":{\"notice\":\"Gets the total collateral amount of the selected currency.\"},\"getCollateralCurrencies()\":{\"notice\":\"Gets the currencies accepted as collateral\"},\"getCoverage(address)\":{\"notice\":\"Gets the rate of collateral used.\"},\"getDepositAmount(address,bytes32)\":{\"notice\":\"Gets the amount deposited in the user's collateral.\"},\"getLiquidationAmount(address,bytes32,uint256)\":{\"notice\":\"Gets the amount to be liquidated.\"},\"getTokenAddress(bytes32)\":{\"notice\":\"Gets the token contract address\"},\"getTotalCollateralAmount(address)\":{\"notice\":\"Gets the total collateral amount.\"},\"getTotalDepositAmount(bytes32)\":{\"notice\":\"Gets the total amount deposited of the selected currency\"},\"getTotalUnusedCollateralAmount(address)\":{\"notice\":\"Gets the total amount of the unused collateral in the base currency\"},\"getUsedCurrencies(address)\":{\"notice\":\"Gets the currencies that the user used as collateral.\"},\"getWithdrawableCollateral(address)\":{\"notice\":\"Gets the maximum amount of the base currency that can be withdrawn from user collateral.\"},\"getWithdrawableCollateral(bytes32,address)\":{\"notice\":\"Gets the maximum amount of the selected currency that can be withdrawn from user collateral.\"},\"initialize(address,address,uint256,uint256,uint256,address)\":{\"notice\":\"Initializes the contract.\"},\"isCollateral(bytes32)\":{\"notice\":\"Gets if the currency is acceptable as collateral\"},\"isCollateral(bytes32[])\":{\"notice\":\"Gets if the currencies are acceptable as collateral\"},\"isCovered(address)\":{\"notice\":\"Gets if the collateral has enough coverage.\"},\"isRegisteredCurrency(bytes32)\":{\"notice\":\"Gets if the currency has been registered\"},\"pause()\":{\"notice\":\"Pauses the token vault.\"},\"registerCurrency(bytes32,address,bool)\":{\"notice\":\"Registers new currency and sets if it is acceptable as collateral.\"},\"removeDepositAmount(address,bytes32,uint256)\":{\"notice\":\"Removes deposit amount.\"},\"removeOperator(address)\":{\"notice\":\"Removes an admin as Operator\"},\"requiredContracts()\":{\"notice\":\"Returns the contract names used in this contract.\"},\"setRoleAdmin(bytes32,bytes32)\":{\"notice\":\"Sets the role as admin of a specific role.\"},\"transferFrom(bytes32,address,address,uint256)\":{\"notice\":\"Transfers the token from sender to receiver.\"},\"unpause()\":{\"notice\":\"Unpauses the token vault.\"},\"updateCurrency(bytes32,bool)\":{\"notice\":\"Updates the currency if it is acceptable as collateral.\"},\"updateLiquidationConfiguration(uint256,uint256,uint256)\":{\"notice\":\"Triggers only be contract owner\"},\"withdraw(bytes32,uint256)\":{\"notice\":\"Withdraws funds by the caller from unused collateral.\"}},\"notice\":\"Implements the management of the token in each currency for users. This contract manages the following data related to tokens. - Deposited token amount as the collateral - Parameters related to the liquidation   - Liquidation threshold rate   - Liquidation fee rate received by protocol   - Liquidation fee rate received by liquidators To address a currency as collateral, it must be registered using `registerCurrency` method in this contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/TokenVault.sol\":\"TokenVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dependencies/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Chainlink Contracts v0.4.0 (v0.8/interfaces/AggregatorV3Interface.sol)\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x4e6b3af251ee2ee848acb86147bb94d4a0845f65d2143545b7b6853297f81b82\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xbc9ec150e13091594dfd8b1cd6016c962f3b1c681072f3c3fa989fdfa587d42f\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) ||\\n                (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(\\n            !_initializing && _initialized < version,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x47b358037bd02d2d68ae2f5685cf1f30af9d60de496258849b69a751a2ffdcde\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x00c839ff53d07d19db2e7cfa1e5133f9ee90a8d64b0e2e57f50446a2d1a3a0e0\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data\\n    ) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabb801935035554c7c588f7c1f296adfd23afd3e2a2a84705ba1a407f14d1de4\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x35e30a35e23f856cbcee3558b7efdd83f6017a8f1b419710645143d98e892463\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/protocol/TokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// dependencies\\nimport {EnumerableSet} from \\\"../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\nimport {Multicall} from \\\"../dependencies/openzeppelin/utils/Multicall.sol\\\";\\n// libraries\\nimport {Contracts} from \\\"./libraries/Contracts.sol\\\";\\nimport {Constants} from \\\"./libraries/Constants.sol\\\";\\nimport {TransferHelper} from \\\"./libraries/TransferHelper.sol\\\";\\nimport {DepositManagementLogic} from \\\"./libraries/logics/DepositManagementLogic.sol\\\";\\n// interfaces\\nimport {ITokenVault} from \\\"./interfaces/ITokenVault.sol\\\";\\nimport {ILendingMarketController} from \\\"./interfaces/ILendingMarketController.sol\\\";\\n// mixins\\nimport {MixinAccessControl} from \\\"./mixins/MixinAccessControl.sol\\\";\\nimport {MixinAddressResolver} from \\\"./mixins/MixinAddressResolver.sol\\\";\\nimport {MixinLiquidationConfiguration} from \\\"./mixins/MixinLiquidationConfiguration.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"./types/ProtocolTypes.sol\\\";\\n// utils\\nimport {Ownable} from \\\"./utils/Ownable.sol\\\";\\nimport {Pausable} from \\\"./utils/Pausable.sol\\\";\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\n// storages\\nimport {TokenVaultStorage as Storage} from \\\"./storages/TokenVaultStorage.sol\\\";\\n\\n/**\\n * @notice Implements the management of the token in each currency for users.\\n *\\n * This contract manages the following data related to tokens.\\n * - Deposited token amount as the collateral\\n * - Parameters related to the liquidation\\n *   - Liquidation threshold rate\\n *   - Liquidation fee rate received by protocol\\n *   - Liquidation fee rate received by liquidators\\n *\\n * To address a currency as collateral, it must be registered using `registerCurrency` method in this contract.\\n */\\ncontract TokenVault is\\n    ITokenVault,\\n    MixinLiquidationConfiguration,\\n    MixinAccessControl,\\n    MixinAddressResolver,\\n    Pausable,\\n    Proxyable,\\n    Multicall\\n{\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    /**\\n     * @notice Modifier to check if currency hasn't been registered yet\\n     * @param _ccy Currency name in bytes32\\n     */\\n    modifier onlyRegisteredCurrency(bytes32 _ccy) {\\n        if (!isRegisteredCurrency(_ccy)) revert UnregisteredCurrency();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\\n     * @param _owner The address of the contract owner\\n     * @param _resolver The address of the Address Resolver contract\\n     * @param _liquidationThresholdRate The liquidation threshold rate\\n     * @param _liquidationProtocolFeeRate The liquidation fee rate received by protocol\\n     * @param _liquidatorFeeRate The liquidation fee rate received by liquidators\\n     * @param _nativeToken The address of wrapped token of native currency\\n     */\\n    function initialize(\\n        address _owner,\\n        address _resolver,\\n        uint256 _liquidationThresholdRate,\\n        uint256 _liquidationProtocolFeeRate,\\n        uint256 _liquidatorFeeRate,\\n        address _nativeToken\\n    ) public initializer onlyProxy {\\n        _transferOwnership(_owner);\\n        registerAddressResolver(_resolver);\\n\\n        TransferHelper.initialize(_nativeToken);\\n        MixinAccessControl._setupInitialRoles(_owner);\\n        MixinLiquidationConfiguration._initialize(\\n            _owner,\\n            _liquidationThresholdRate,\\n            _liquidationProtocolFeeRate,\\n            _liquidatorFeeRate\\n        );\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](3);\\n        contracts[0] = Contracts.CURRENCY_CONTROLLER;\\n        contracts[1] = Contracts.LENDING_MARKET_CONTROLLER;\\n        contracts[2] = Contracts.RESERVE_FUND;\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](2);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n        contracts[1] = Contracts.RESERVE_FUND;\\n    }\\n\\n    receive() external payable {\\n        if (!TransferHelper.isNative(msg.sender)) {\\n            revert CallerNotBaseCurrency({caller: msg.sender});\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets if the collateral has enough coverage.\\n     * @param _user User's address\\n     * @return The boolean if the collateral has sufficient coverage or not\\n     */\\n    function isCovered(address _user) public view override returns (bool) {\\n        return DepositManagementLogic.isCovered(_user);\\n    }\\n\\n    /**\\n     * @notice Gets if the currency is acceptable as collateral\\n     * @param _ccy Currency name in bytes32\\n     * @return The boolean if the currency has been registered or not\\n     */\\n    function isCollateral(bytes32 _ccy) public view override returns (bool) {\\n        return Storage.slot().collateralCurrencies.contains(_ccy);\\n    }\\n\\n    /**\\n     * @notice Gets if the currencies are acceptable as collateral\\n     * @param _ccys Currency name list in bytes32\\n     * @return isCollateralCurrencies Array of the boolean if the currency has been registered or not\\n     */\\n    function isCollateral(\\n        bytes32[] calldata _ccys\\n    ) external view override returns (bool[] memory isCollateralCurrencies) {\\n        uint256 length = _ccys.length;\\n        isCollateralCurrencies = new bool[](length);\\n        for (uint256 i; i < length; i++) {\\n            isCollateralCurrencies[i] = isCollateral(_ccys[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets if the currency has been registered\\n     * @param _ccy Currency name in bytes32\\n     * @return The boolean if the currency has been registered or not\\n     */\\n    function isRegisteredCurrency(bytes32 _ccy) public view override returns (bool) {\\n        return Storage.slot().tokenAddresses[_ccy] != address(0);\\n    }\\n\\n    /**\\n     * @notice Gets the token contract address\\n     * @param _ccy Currency name in bytes32\\n     * @return The token contract address\\n     */\\n    function getTokenAddress(bytes32 _ccy) public view override returns (address) {\\n        return Storage.slot().tokenAddresses[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the currencies accepted as collateral\\n     * @return Array of the currency accepted as collateral\\n     */\\n    function getCollateralCurrencies() external view override returns (bytes32[] memory) {\\n        return Storage.slot().collateralCurrencies.values();\\n    }\\n\\n    /**\\n     * @notice Gets the maximum amount of the base currency that can be withdrawn from user collateral.\\n     * @param _user User's address\\n     * @return Maximum amount of ETH that can be withdrawn\\n     */\\n    function getWithdrawableCollateral(address _user) external view override returns (uint256) {\\n        return DepositManagementLogic.getWithdrawableCollateral(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the maximum amount of the selected currency that can be withdrawn from user collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _user User's address\\n     * @return Maximum amount of the selected currency that can be withdrawn\\n     */\\n    function getWithdrawableCollateral(\\n        bytes32 _ccy,\\n        address _user\\n    ) external view override returns (uint256) {\\n        return DepositManagementLogic.getWithdrawableCollateral(_ccy, _user);\\n    }\\n\\n    /**\\n     * @notice Gets the rate of collateral used.\\n     * @param _user User's address\\n     * @return The rate of collateral used\\n     */\\n    function getCoverage(address _user) external view override returns (uint256) {\\n        return DepositManagementLogic.getCoverage(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the total amount of the unused collateral in the base currency\\n     * @param _user User's address\\n     * @return The total amount of unused collateral\\n     */\\n    function getTotalUnusedCollateralAmount(\\n        address _user\\n    ) external view override returns (uint256) {\\n        return DepositManagementLogic.getTotalUnusedCollateralAmount(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the total collateral amount.\\n     * @param _user User's address\\n     * @return totalCollateralAmount The total collateral amount in the base currency\\n     */\\n    function getTotalCollateralAmount(\\n        address _user\\n    ) external view override returns (uint256 totalCollateralAmount) {\\n        (totalCollateralAmount, , ) = DepositManagementLogic.getTotalCollateralAmount(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the total collateral amount of the selected currency.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @return amount The collateral amount\\n     */\\n    function getCollateralAmount(\\n        address _user,\\n        bytes32 _ccy\\n    ) external view override returns (uint256 amount) {\\n        (amount, , ) = DepositManagementLogic.getCollateralAmount(_user, _ccy);\\n    }\\n\\n    /**\\n     * @notice Gets the borrowable amount in the selected currency.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @return amount The borrowable amount\\n     */\\n    function getBorrowableAmount(\\n        address _user,\\n        bytes32 _ccy\\n    ) external view override returns (uint256) {\\n        return DepositManagementLogic.getBorrowableAmount(_user, _ccy);\\n    }\\n\\n    /**\\n     * @notice Gets the amount to be liquidated.\\n     * @param _user User's address\\n     * @return liquidationAmount The the amount to be liquidated\\n     */\\n    function getLiquidationAmount(\\n        address _user,\\n        bytes32 _liquidationCcy,\\n        uint256 _liquidationAmountMaximum\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256 liquidationAmount, uint256 protocolFee, uint256 liquidatorFee)\\n    {\\n        return\\n            DepositManagementLogic.getLiquidationAmount(\\n                _user,\\n                _liquidationCcy,\\n                _liquidationAmountMaximum\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets the total amount deposited of the selected currency\\n     * @param _ccy Currency name in bytes32\\n     * @return The total deposited amount\\n     */\\n    function getTotalDepositAmount(bytes32 _ccy) external view override returns (uint256) {\\n        return Storage.slot().totalDepositAmount[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the amount deposited in the user's collateral.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @return The deposited amount\\n     */\\n    function getDepositAmount(\\n        address _user,\\n        bytes32 _ccy\\n    ) external view override returns (uint256) {\\n        return DepositManagementLogic.getDepositAmount(_user, _ccy);\\n    }\\n\\n    /**\\n     * @notice Gets the currencies that the user used as collateral.\\n     * @param _user User's address\\n     * @return The currency names in bytes32\\n     */\\n    function getUsedCurrencies(address _user) public view override returns (bytes32[] memory) {\\n        return DepositManagementLogic.getUsedCurrencies(_user);\\n    }\\n\\n    /**\\n     * @notice Calculates the collateral rate used when additional funds are had by the user.\\n     * @param _user User's address\\n     * @param _additionalFunds Additional funds for calculating the coverage\\n     * @return coverage The rate of collateral used\\n     * @return isInsufficientDepositAmount The boolean if the lent amount in the selected currency is insufficient for the deposit amount or not\\n     */\\n    function calculateCoverage(\\n        address _user,\\n        ILendingMarketController.AdditionalFunds memory _additionalFunds\\n    ) external view override returns (uint256 coverage, bool isInsufficientDepositAmount) {\\n        return DepositManagementLogic.calculateCoverage(_user, _additionalFunds);\\n    }\\n\\n    /**\\n     * @notice Gets the actual fee amounts calculated by rates.\\n     * @param _amount Liquidation amount\\n     * @return protocolFee Liquidation fee amount received by protocol\\n     * @return liquidatorFee Liquidation fee amount received by liquidators\\n     */\\n    function calculateLiquidationFees(\\n        uint256 _amount\\n    ) external view override returns (uint256 protocolFee, uint256 liquidatorFee) {\\n        return DepositManagementLogic.calculateLiquidationFees(_amount);\\n    }\\n\\n    /**\\n     * @notice Registers new currency and sets if it is acceptable as collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _tokenAddress Token contract address of the selected currency\\n     * @param _isCollateral Boolean if the selected currency is acceptable as collateral.\\n     */\\n    function registerCurrency(\\n        bytes32 _ccy,\\n        address _tokenAddress,\\n        bool _isCollateral\\n    ) external override onlyOwner {\\n        if (!currencyController().currencyExists(_ccy)) revert InvalidCurrency();\\n\\n        Storage.slot().tokenAddresses[_ccy] = _tokenAddress;\\n        if (_isCollateral) {\\n            Storage.slot().collateralCurrencies.add(_ccy);\\n        }\\n\\n        emit CurrencyRegistered(_ccy, _tokenAddress, _isCollateral);\\n    }\\n\\n    /**\\n     * @notice Updates the currency if it is acceptable as collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _isCollateral Boolean if the selected currency is acceptable as collateral.\\n     */\\n    function updateCurrency(\\n        bytes32 _ccy,\\n        bool _isCollateral\\n    ) external override onlyOwner onlyRegisteredCurrency(_ccy) {\\n        if (_isCollateral) {\\n            Storage.slot().collateralCurrencies.add(_ccy);\\n        } else {\\n            Storage.slot().collateralCurrencies.remove(_ccy);\\n        }\\n\\n        emit CurrencyUpdated(_ccy, _isCollateral);\\n    }\\n\\n    /**\\n     * @dev Deposits funds by the caller into collateral.\\n     * @param _amount Amount of funds to deposit\\n     * @param _ccy Currency name in bytes32\\n     */\\n    function deposit(\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external payable override whenNotPaused onlyRegisteredCurrency(_ccy) {\\n        _deposit(msg.sender, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @dev Deposits funds by the `from` into collateral.\\n     * @param _from user's address\\n     * @param _amount Amount of funds to deposit\\n     * @param _ccy Currency name in bytes32\\n     */\\n    function depositFrom(\\n        address _from,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external payable override whenNotPaused onlyAcceptedContracts {\\n        _deposit(_from, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws funds by the caller from unused collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to withdraw.\\n     */\\n    function withdraw(\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external override whenNotPaused onlyRegisteredCurrency(_ccy) {\\n        _withdraw(msg.sender, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @dev Adds deposit amount.\\n     * @param _user User's address\\n     * @param _amount Amount of funds to deposit\\n     * @param _ccy Currency name in bytes32\\n     */\\n    function addDepositAmount(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external override whenNotPaused onlyAcceptedContracts onlyRegisteredCurrency(_ccy) {\\n        DepositManagementLogic.addDepositAmount(_user, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Removes deposit amount.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to withdraw.\\n     */\\n    function removeDepositAmount(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external override whenNotPaused onlyAcceptedContracts onlyRegisteredCurrency(_ccy) {\\n        DepositManagementLogic.removeDepositAmount(_user, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Forces a reset of the user's deposit amount.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     */\\n    function executeForcedReset(\\n        address _user,\\n        bytes32 _ccy\\n    ) external override onlyAcceptedContracts onlyRegisteredCurrency(_ccy) returns (uint256) {\\n        return DepositManagementLogic.executeForcedReset(_user, _ccy);\\n    }\\n\\n    /**\\n     * @notice Transfers the token from sender to receiver.\\n     * @param _ccy Currency name in bytes32\\n     * @param _from Sender's address\\n     * @param _to Receiver's address\\n     * @param _amount Amount of funds to sent\\n     */\\n    function transferFrom(\\n        bytes32 _ccy,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        onlyAcceptedContracts\\n        onlyRegisteredCurrency(_ccy)\\n        returns (uint256 untransferredAmount)\\n    {\\n        untransferredAmount = DepositManagementLogic.transferFrom(_ccy, _from, _to, _amount);\\n        emit Transfer(_ccy, _from, _to, _amount - untransferredAmount);\\n    }\\n\\n    /**\\n     * @notice Pauses the token vault.\\n     */\\n    function pause() external override onlyOperator {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses the token vault.\\n     */\\n    function unpause() external override onlyOperator {\\n        _unpause();\\n    }\\n\\n    function _deposit(address _user, bytes32 _ccy, uint256 _amount) internal {\\n        if (\\n            _amount == 0 ||\\n            (TransferHelper.isNative(Storage.slot().tokenAddresses[_ccy]) && _amount != msg.value)\\n        ) {\\n            revert InvalidAmount();\\n        }\\n        if (lendingMarketController().isTerminated()) revert MarketTerminated();\\n\\n        DepositManagementLogic.deposit(_user, _ccy, _amount);\\n\\n        emit Deposit(_user, _ccy, _amount);\\n    }\\n\\n    function _withdraw(address _user, bytes32 _ccy, uint256 _amount) internal {\\n        if (_amount == 0) revert InvalidAmount();\\n        if (lendingMarketController().isRedemptionRequired(_user)) revert RedemptionIsRequired();\\n\\n        lendingMarketController().cleanUpFunds(_ccy, _user);\\n        uint256 withdrawableAmount = DepositManagementLogic.withdraw(_user, _ccy, _amount);\\n\\n        emit Withdraw(_user, _ccy, withdrawableAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x12b73d598a580d78f04e37e8d8d79e2ebf48eabb0db74240887d0cc9fac709fb\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IAddressResolver {\\n    error UnmatchedInputs();\\n\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xc0faeecd1cbad15338a4c4a675db64e1dfa459344d4cfac4b1e166b5ce31c951\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IBeaconProxyController {\\n    error NoBeaconProxyContract();\\n    error InvalidProxyContract();\\n\\n    event BeaconProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function deployFutureValueVault() external returns (address futureValueVault);\\n\\n    function deployLendingMarket(\\n        bytes32 ccy,\\n        uint256 orderFeeRate,\\n        uint256 cbLimitRange\\n    ) external returns (address market);\\n}\\n\",\"keccak256\":\"0xbc6952cc8a74282cd304235e8e340755807020c952e01a163ee85e52ef827230\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {PriceFeed} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    error InvalidCurrency();\\n    error InvalidHaircut();\\n    error InvalidPriceFeed();\\n    error InvalidPrice();\\n    error InvalidDecimals();\\n    error NoPriceFeedExists();\\n    error StalePriceFeed(\\n        address priceFeed,\\n        uint256 heartbeat,\\n        uint256 updatedAt,\\n        uint256 blockTimestamp\\n    );\\n\\n    event CurrencyAdded(bytes32 indexed ccy, uint256 haircut);\\n    event CurrencyRemoved(bytes32 indexed ccy);\\n\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n\\n    event PriceFeedUpdated(bytes32 ccy, uint256 decimals, address[] indexed priceFeeds);\\n    event PriceFeedRemoved(bytes32 ccy);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256 _amount\\n    ) external view returns (uint256 amount);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256[] calldata _amounts\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function convertToBaseCurrency(\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external view returns (uint256 amount);\\n\\n    function convertToBaseCurrency(\\n        bytes32 _ccy,\\n        int256 _amount\\n    ) external view returns (int256 amount);\\n\\n    function convertToBaseCurrency(\\n        bytes32 _ccy,\\n        uint256[] calldata _amounts\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function convertFromBaseCurrency(\\n        bytes32 _ccy,\\n        uint256 _amountETH\\n    ) external view returns (uint256 amount);\\n\\n    function convertFromBaseCurrency(\\n        bytes32 _ccy,\\n        uint256[] calldata _amounts\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getDecimals(bytes32) external view returns (uint8);\\n\\n    function getCurrencies() external view returns (bytes32[] memory);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getPriceFeed(bytes32 _ccy) external view returns (PriceFeed memory);\\n\\n    function getLastPrice(bytes32 _ccy) external view returns (int256 price);\\n\\n    function getAggregatedLastPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function currencyExists(bytes32 _ccy) external view returns (bool);\\n\\n    function updatePriceFeed(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        address[] calldata _priceFeeds,\\n        uint256 _heartbeat\\n    ) external;\\n\\n    function removePriceFeed(bytes32 _ccy) external;\\n\\n    function addCurrency(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        uint256 _haircut,\\n        address[] calldata _priceFeeds,\\n        uint256 _heartbeat\\n    ) external;\\n\\n    function updateHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function removeCurrency(bytes32 _ccy) external;\\n}\\n\",\"keccak256\":\"0x56aa2b4c2f43b0dc7a29a28a6461a86616ae7988dda378595397da70026f36ca\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {AutoRollLog} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    error NoCompoundFactorExists(uint256 maturity);\\n    error CompoundFactorIsZero();\\n    error ResidualAmountIsNotZero();\\n    error UnitPriceIsZero();\\n    error InvalidMaturity();\\n    error InvalidAmount();\\n    error InvalidOrderFeeRate();\\n    error CurrencyAlreadyInitialized();\\n    error InitialCompoundFactorAlreadyFinalized();\\n    error AutoRollLogAlreadyUpdated(uint256 currentMaturity, uint256 nextMaturity);\\n\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\\n    event AutoRollExecuted(\\n        bytes32 indexed ccy,\\n        uint256 lendingCompoundFactor,\\n        uint256 borrowingCompoundFactor,\\n        uint256 unitPrice,\\n        uint256 currentMaturity,\\n        uint256 previousMaturity\\n    );\\n\\n    function isInitialized(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getBalance(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getBalanceInFutureValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getMaturityGenesisValue(bytes32 ccy, uint256 maturity) external view returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getAutoRollLog(\\n        bytes32 ccy,\\n        uint256 maturity\\n    ) external view returns (AutoRollLog memory);\\n\\n    function getLatestAutoRollLog(bytes32 ccy) external view returns (AutoRollLog memory);\\n\\n    function calculateFVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        uint256 destinationMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function getBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function calculateBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        int256 balance,\\n        uint256 fromMaturity,\\n        uint256 toMaturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function initializeCurrencySetting(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor,\\n        uint256 maturity\\n    ) external;\\n\\n    function updateInitialCompoundFactor(bytes32 ccy, uint256 unitPrice) external;\\n\\n    function executeAutoRoll(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice,\\n        uint256 orderFeeRate\\n    ) external;\\n\\n    function updateGenesisValueWithFutureValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 fvAmount\\n    ) external;\\n\\n    function updateGenesisValueWithResidualAmount(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity\\n    ) external;\\n\\n    function transferFrom(bytes32 ccy, address sender, address receiver, int256 amount) external;\\n\\n    function cleanUpBalance(bytes32 ccy, address user, uint256 maturity) external;\\n\\n    function executeForcedReset(bytes32 _ccy, address _user) external;\\n\\n    function executeForcedReset(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        int256 _amountInFV\\n    ) external returns (int256 removedAmount, int256 balance);\\n}\\n\",\"keccak256\":\"0xb8b5fa40bcd397cbbe236af8450125fa09a71bca3091fd037a10c6832697902b\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ILendingMarketController {\\n    error InvalidMaturity();\\n    error InvalidCurrency();\\n    error AlreadyTerminated();\\n    error NotTerminated();\\n    error AlreadyInitialized();\\n\\n    struct AdditionalFunds {\\n        bytes32 ccy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 lentAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct CalculatedTotalFunds {\\n        uint256 plusDepositAmountInAdditionalFundsCcy;\\n        uint256 minusDepositAmountInAdditionalFundsCcy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 collateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct CalculatedFunds {\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 collateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct GetOrderEstimationParams {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        address user;\\n        ProtocolTypes.Side side;\\n        uint256 amount;\\n        uint256 unitPrice;\\n        uint256 additionalDepositAmount;\\n        bool ignoreBorrowedAmount;\\n    }\\n\\n    function isTerminated() external view returns (bool);\\n\\n    function isRedemptionRequired(address _user) external view returns (bool);\\n\\n    function getMarketTerminationDate() external view returns (uint256);\\n\\n    function getMarketTerminationPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getMarketTerminationRatio(bytes32 _ccy) external view returns (uint256);\\n\\n    function getMinDebtUnitPrice(bytes32 _ccy) external view returns (uint256);\\n\\n    function getCurrentMinDebtUnitPrice(\\n        bytes32 _ccy,\\n        uint256 _maturity\\n    ) external view returns (uint256);\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarket(bytes32 ccy) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy) external view returns (address);\\n\\n    function getOrderBookId(bytes32 _ccy, uint256 _maturity) external view returns (uint8);\\n\\n    function getOrderEstimation(\\n        GetOrderEstimationParams calldata params\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV,\\n            uint256 orderFeeInFV,\\n            uint256 placedAmount,\\n            uint256 coverage,\\n            bool isInsufficientDepositAmount\\n        );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getOrderBookIds(bytes32 ccy) external view returns (uint8[] memory);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInBaseCurrency(\\n        address user\\n    ) external view returns (int256 totalPresentValue);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256 genesisValue);\\n\\n    function getPosition(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) external view returns (int256 presentValue, int256 futureValue);\\n\\n    function calculateFunds(\\n        bytes32 ccy,\\n        address user,\\n        uint256 liquidationThresholdRate\\n    ) external view returns (CalculatedFunds memory funds);\\n\\n    function calculateTotalFundsInBaseCurrency(\\n        address user,\\n        AdditionalFunds calldata _additionalFunds,\\n        uint256 liquidationThresholdRate\\n    ) external view returns (CalculatedTotalFunds memory calculatedFunds);\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor,\\n        uint256 orderFeeRate,\\n        uint256 circuitBreakerLimitRange,\\n        uint256 minDebtUnitPrice\\n    ) external;\\n\\n    function createOrderBook(bytes32 ccy, uint256 openingDate, uint256 preOpeningDate) external;\\n\\n    function executeOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecuteOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function executePreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecutesPreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function unwindPosition(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function executeItayoseCalls(\\n        bytes32[] calldata currencies,\\n        uint256 maturity\\n    ) external returns (bool);\\n\\n    function executeRedemption(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeRepayment(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeEmergencySettlement() external returns (bool);\\n\\n    function executeLiquidationCall(\\n        bytes32 collateralCcy,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        address user\\n    ) external returns (bool);\\n\\n    function executeForcedRepayment(\\n        bytes32 _collateralCcy,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity,\\n        address _user\\n    ) external returns (bool);\\n\\n    function cancelOrder(bytes32 ccy, uint256 maturity, uint48 orderId) external returns (bool);\\n\\n    function rotateOrderBooks(bytes32 ccy) external;\\n\\n    function executeEmergencyTermination() external;\\n\\n    function pauseLendingMarket(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarket(bytes32 ccy) external returns (bool);\\n\\n    function cleanUpAllFunds(address user) external returns (bool);\\n\\n    function cleanUpFunds(bytes32 ccy, address user) external returns (uint256 activeOrderCount);\\n\\n    function updateMinDebtUnitPrice(bytes32 _ccy, uint256 _minDebtUnitPrice) external;\\n}\\n\",\"keccak256\":\"0x1f20da15eb5f774e91396f80c66a13aa0b3eb05c5de00f850ca860910b40a317\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/INativeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface INativeToken is IERC20 {\\n    event Deposit(address user, uint256 amount);\\n    event Withdrawal(address user, uint256 amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x1e117b9c926f27b124fdee58b9c5fb62e1e7585d321cf94065d968e4e34ffcc2\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IReserveFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IReserveFund {\\n    event Pause(address account);\\n    event Unpause(address account);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x972ddb21c75dcd3c778fede1090125ea316e8ba9f194b2fab62ca90b9457ab12\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\n\\ninterface ITokenVault {\\n    error UnregisteredCurrency();\\n    error InvalidCurrency();\\n    error InvalidAmount();\\n    error CallerNotBaseCurrency(address caller);\\n    error MarketTerminated();\\n    error RedemptionIsRequired();\\n\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress, bool isCollateral);\\n    event CurrencyUpdated(bytes32 ccy, bool isCollateral);\\n\\n    function isCovered(address user) external view returns (bool);\\n\\n    function isCollateral(bytes32 ccy) external view returns (bool);\\n\\n    function isCollateral(bytes32[] calldata ccys) external view returns (bool[] memory);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getTokenAddress(bytes32 ccy) external view returns (address);\\n\\n    function getCollateralCurrencies() external view returns (bytes32[] memory);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256);\\n\\n    function getWithdrawableCollateral(bytes32 ccy, address user) external view returns (uint256);\\n\\n    function getCoverage(address user) external view returns (uint256);\\n\\n    function getTotalUnusedCollateralAmount(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address user) external view returns (uint256);\\n\\n    function getCollateralAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowableAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getLiquidationAmount(\\n        address user,\\n        bytes32 liquidationCcy,\\n        uint256 liquidationAmountMaximum\\n    ) external view returns (uint256 liquidationAmount, uint256 protocolFee, uint256 liquidatorFee);\\n\\n    function getTotalDepositAmount(bytes32 ccy) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function calculateCoverage(\\n        address user,\\n        ILendingMarketController.AdditionalFunds memory funds\\n    ) external view returns (uint256 coverage, bool isInsufficientDepositAmount);\\n\\n    function calculateLiquidationFees(\\n        uint256 liquidationAmount\\n    ) external view returns (uint256 protocolFee, uint256 liquidatorFee);\\n\\n    function registerCurrency(bytes32 ccy, address tokenAddress, bool isCollateral) external;\\n\\n    function updateCurrency(bytes32 ccy, bool isCollateral) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositFrom(address user, bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addDepositAmount(address user, bytes32 ccy, uint256 amount) external;\\n\\n    function removeDepositAmount(address user, bytes32 ccy, uint256 amount) external;\\n\\n    function executeForcedReset(address user, bytes32 ccy) external returns (uint256 removedAmount);\\n\\n    function transferFrom(\\n        bytes32 ccy,\\n        address sender,\\n        address receiver,\\n        uint256 amount\\n    ) external returns (uint256 untransferredAmount);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x85066fef4f2a15297b4b4d76bd4f23317804abd95208d064bf415e5a6c6ab2d7\",\"license\":\"MIT\"},\"contracts/protocol/libraries/AddressResolverLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/mixins/MixinAddressResolverStorage.sol\\\";\\n\\nlibrary AddressResolverLib {\\n    error MissingAddress(string name);\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        if (_foundAddress == address(0)) revert MissingAddress(string(abi.encodePacked(name)));\\n        return _foundAddress;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return IReserveFund(getAddress(Contracts.RESERVE_FUND));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0x65deab600a4cfe7c35c1c7ec58e60ad6afa1234a8beb83e2cefc385950baf375\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nlibrary Constants {\\n    /// @dev Used for price digits in the basis (10000 -> 1)\\n    uint256 internal constant PRICE_DIGIT = 10000;\\n\\n    /// @dev Used for percentage digits in the basis (10000 -> 100%)\\n    uint256 internal constant PCT_DIGIT = 10000;\\n\\n    /// @dev Used for seconds in year (60 * 60 * 24 * 365)\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000;\\n\\n    /// @dev Used for maximum order count per currency\\n    uint256 internal constant MAXIMUM_ORDER_COUNT = 20;\\n}\\n\",\"keccak256\":\"0x082d1ef2412b61ea26d98295c85a7118a0e600e1ef61c81161f9ea20f51e1ed6\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant RESERVE_FUND = \\\"ReserveFund\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE_VAULT = \\\"FutureValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0xb3158f9f29afc1f6c9a855328ea8a3da1a78168eb8c4d5d971c62065b53d1cd5\",\"license\":\"MIT\"},\"contracts/protocol/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {INativeToken} from \\\"../interfaces/INativeToken.sol\\\";\\nimport {TransferHelperStorage as Storage} from \\\"../storages/libraries/TransferHelperStorage.sol\\\";\\n\\nlibrary TransferHelper {\\n    function initialize(address _nativeToken) internal {\\n        require(Storage.slot().nativeToken == address(0), \\\"TransferHelper: Already initialized\\\");\\n        Storage.slot().nativeToken = _nativeToken;\\n    }\\n\\n    function nativeToken() internal view returns (address) {\\n        return Storage.slot().nativeToken;\\n    }\\n\\n    function isNative(address _token) internal view returns (bool) {\\n        return _token == Storage.slot().nativeToken;\\n    }\\n\\n    function depositAssets(\\n        address _token,\\n        address _payer,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == Storage.slot().nativeToken) {\\n            convertToWrappedToken(_receiver, _amount);\\n        } else {\\n            safeTransferFrom(_token, _payer, _receiver, _amount);\\n        }\\n    }\\n\\n    function withdrawAssets(address _token, address _receiver, uint256 _amount) internal {\\n        if (address(_token) == Storage.slot().nativeToken) {\\n            convertFromWrappedToken(_receiver, _amount);\\n        } else {\\n            safeTransfer(_token, _receiver, _amount);\\n        }\\n    }\\n\\n    function convertToWrappedToken(address _receiver, uint256 _amount) internal {\\n        require(address(this).balance >= _amount, \\\"TransferHelper: Insufficient balance\\\");\\n\\n        INativeToken(Storage.slot().nativeToken).deposit{value: _amount}();\\n        safeTransfer(Storage.slot().nativeToken, _receiver, _amount);\\n    }\\n\\n    function convertFromWrappedToken(address _receiver, uint256 _amount) internal {\\n        uint256 balance = INativeToken(Storage.slot().nativeToken).balanceOf(address(this));\\n        require(balance >= _amount, \\\"TransferHelper: Insufficient balance\\\");\\n\\n        if (balance > 0) {\\n            INativeToken(Storage.slot().nativeToken).withdraw(_amount);\\n            safeTransferETH(_receiver, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer helper from UniswapV2 Router\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    /**\\n     * There are many non-compliant ERC20 tokens... this can handle most, adapted from UniSwap V2\\n     * Im trying to make it a habit to put external calls last (reentrancy)\\n     * You can put this in an internal function if you like.\\n     */\\n    function safeTransfer(address token, address to, uint256 amount) internal {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // 0xa9059cbb = bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n            abi.encodeWithSelector(0xa9059cbb, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        ); // ERC20 Transfer failed\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xfc50a041de19d419ee311bd014cfcec2bba80a3842b40cf0e749719f8bb4632b\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/DepositManagementLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// dependencies\\nimport {EnumerableSet} from \\\"../../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n// interfaces\\nimport {ILendingMarketController} from \\\"../../interfaces/ILendingMarketController.sol\\\";\\n// libraries\\nimport {AddressResolverLib} from \\\"../AddressResolverLib.sol\\\";\\nimport {TransferHelper} from \\\"../TransferHelper.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\n// storages\\nimport {TokenVaultStorage as Storage} from \\\"../../storages/TokenVaultStorage.sol\\\";\\n\\nlibrary DepositManagementLogic {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using RoundingUint256 for uint256;\\n\\n    error NotEnoughDeposit(bytes32 ccy);\\n    error CollateralIsZero(bytes32 ccy);\\n    error ProtocolIsInsolvent(bytes32 ccy);\\n\\n    struct CalculatedFundVars {\\n        uint256 plusDepositAmountInAdditionalFundsCcy;\\n        uint256 minusDepositAmountInAdditionalFundsCcy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 collateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    function isCovered(address _user) public view returns (bool) {\\n        (uint256 totalCollateral, uint256 totalUsedCollateral, ) = getTotalCollateralAmount(_user);\\n\\n        return\\n            totalUsedCollateral == 0 ||\\n            (totalCollateral * Constants.PCT_DIGIT >=\\n                totalUsedCollateral * Storage.slot().liquidationThresholdRate);\\n    }\\n\\n    function getUsedCurrencies(address _user) public view returns (bytes32[] memory) {\\n        EnumerableSet.Bytes32Set storage currencySet = Storage.slot().usedCurrencies[_user];\\n\\n        uint256 length = currencySet.length();\\n        bytes32[] memory currencies = new bytes32[](length);\\n\\n        for (uint256 i; i < length; i++) {\\n            bytes32 currency = currencySet.at(i);\\n            currencies[i] = currency;\\n        }\\n\\n        return currencies;\\n    }\\n\\n    function getDepositAmount(address _user, bytes32 _ccy) public view returns (uint256) {\\n        ILendingMarketController.CalculatedFunds memory funds = AddressResolverLib\\n            .lendingMarketController()\\n            .calculateFunds(_ccy, _user, Storage.slot().liquidationThresholdRate);\\n\\n        return\\n            Storage.slot().depositAmounts[_user][_ccy] +\\n            funds.borrowedAmount -\\n            funds.lentAmount -\\n            funds.workingLendOrdersAmount;\\n    }\\n\\n    function getTotalCollateralAmount(\\n        address _user\\n    )\\n        public\\n        view\\n        returns (uint256 totalCollateral, uint256 totalUsedCollateral, uint256 totalDeposit)\\n    {\\n        ILendingMarketController.AdditionalFunds memory _funds;\\n        (totalCollateral, totalUsedCollateral, totalDeposit, ) = _calculateCollateral(\\n            _user,\\n            _funds\\n        );\\n    }\\n\\n    function getCollateralAmount(\\n        address _user,\\n        bytes32 _ccy\\n    )\\n        public\\n        view\\n        returns (uint256 totalCollateral, uint256 totalUsedCollateral, uint256 totalDeposit)\\n    {\\n        ILendingMarketController.CalculatedFunds memory funds = AddressResolverLib\\n            .lendingMarketController()\\n            .calculateFunds(_ccy, _user, Storage.slot().liquidationThresholdRate);\\n\\n        uint256 plusDeposit = Storage.slot().depositAmounts[_user][_ccy] + funds.borrowedAmount;\\n        uint256 minusDeposit = funds.workingLendOrdersAmount + funds.lentAmount;\\n        uint256 plusCollateral = plusDeposit + funds.collateralAmount;\\n\\n        totalCollateral = plusCollateral >= minusDeposit ? plusCollateral - minusDeposit : 0;\\n        totalUsedCollateral = funds.workingBorrowOrdersAmount + funds.debtAmount;\\n        totalDeposit = plusDeposit >= minusDeposit ? plusDeposit - minusDeposit : 0;\\n    }\\n\\n    function getCoverage(address _user) external view returns (uint256 coverage) {\\n        ILendingMarketController.AdditionalFunds memory _emptyAdditionalFunds;\\n        (coverage, ) = calculateCoverage(_user, _emptyAdditionalFunds);\\n    }\\n\\n    function getTotalUnusedCollateralAmount(address _user) public view returns (uint256) {\\n        (uint256 totalCollateral, uint256 totalUsedCollateral, ) = getTotalCollateralAmount(_user);\\n\\n        return totalCollateral > totalUsedCollateral ? totalCollateral - totalUsedCollateral : 0;\\n    }\\n\\n    function getBorrowableAmount(address _user, bytes32 _ccy) external view returns (uint256) {\\n        uint256[] memory amounts = new uint256[](2);\\n        (amounts[0], amounts[1], ) = getTotalCollateralAmount(_user);\\n        amounts = AddressResolverLib.currencyController().convertFromBaseCurrency(_ccy, amounts);\\n\\n        uint256 totalCollateralAmount = amounts[0];\\n        uint256 totalUsedCollateral = amounts[1];\\n        uint256 liquidationThresholdRate = Storage.slot().liquidationThresholdRate;\\n\\n        ILendingMarketController.CalculatedFunds memory funds = AddressResolverLib\\n            .lendingMarketController()\\n            .calculateFunds(_ccy, _user, liquidationThresholdRate);\\n\\n        uint256 unallocatedCollateralAmount = funds.claimableAmount > funds.collateralAmount\\n            ? funds.claimableAmount - funds.collateralAmount\\n            : 0;\\n\\n        uint256 borrowableAmount = ((totalCollateralAmount + unallocatedCollateralAmount) *\\n            Constants.PCT_DIGIT).div(liquidationThresholdRate);\\n\\n        return borrowableAmount > totalUsedCollateral ? borrowableAmount - totalUsedCollateral : 0;\\n    }\\n\\n    function calculateCoverage(\\n        address _user,\\n        ILendingMarketController.AdditionalFunds memory _additionalFunds\\n    ) public view returns (uint256 coverage, bool isInsufficientDepositAmount) {\\n        uint256 totalCollateral;\\n        uint256 totalUsedCollateral;\\n\\n        (\\n            totalCollateral,\\n            totalUsedCollateral,\\n            ,\\n            isInsufficientDepositAmount\\n        ) = _calculateCollateral(_user, _additionalFunds);\\n\\n        if (totalCollateral == 0) {\\n            coverage = totalUsedCollateral == 0 ? 0 : type(uint256).max;\\n        } else {\\n            coverage = (totalUsedCollateral * Constants.PCT_DIGIT) / totalCollateral;\\n        }\\n    }\\n\\n    function _calculateCollateral(\\n        address _user,\\n        ILendingMarketController.AdditionalFunds memory _funds\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 totalCollateral,\\n            uint256 totalUsedCollateral,\\n            uint256 totalDeposit,\\n            bool isInsufficientDepositAmount\\n        )\\n    {\\n        CalculatedFundVars memory vars;\\n\\n        ILendingMarketController.CalculatedTotalFunds memory funds = AddressResolverLib\\n            .lendingMarketController()\\n            .calculateTotalFundsInBaseCurrency(\\n                _user,\\n                _funds,\\n                Storage.slot().liquidationThresholdRate\\n            );\\n\\n        vars.plusDepositAmountInAdditionalFundsCcy = funds.plusDepositAmountInAdditionalFundsCcy;\\n        vars.minusDepositAmountInAdditionalFundsCcy = funds.minusDepositAmountInAdditionalFundsCcy;\\n        vars.workingLendOrdersAmount = funds.workingLendOrdersAmount;\\n        vars.collateralAmount = funds.collateralAmount;\\n        vars.lentAmount = funds.lentAmount;\\n        vars.workingBorrowOrdersAmount = funds.workingBorrowOrdersAmount;\\n        vars.debtAmount = funds.debtAmount;\\n        vars.borrowedAmount = funds.borrowedAmount;\\n\\n        // Check if the user has enough deposit amount for lending in the selected currency.\\n        if (\\n            _funds.lentAmount != 0 &&\\n            (vars.plusDepositAmountInAdditionalFundsCcy +\\n                Storage.slot().depositAmounts[_user][_funds.ccy] <\\n                vars.minusDepositAmountInAdditionalFundsCcy)\\n        ) {\\n            isInsufficientDepositAmount = true;\\n        }\\n\\n        uint256 totalInternalDepositAmount = _getTotalInternalDepositAmountInBaseCurrency(_user);\\n\\n        uint256 plusDeposit = totalInternalDepositAmount + vars.borrowedAmount;\\n        uint256 minusDeposit = vars.workingLendOrdersAmount + vars.lentAmount;\\n        uint256 plusCollateral = plusDeposit + vars.collateralAmount;\\n\\n        totalCollateral = plusCollateral >= minusDeposit ? plusCollateral - minusDeposit : 0;\\n        totalUsedCollateral = vars.workingBorrowOrdersAmount + vars.debtAmount;\\n        totalDeposit = plusDeposit >= minusDeposit ? plusDeposit - minusDeposit : 0;\\n    }\\n\\n    function getWithdrawableCollateral(address _user) public view returns (uint256) {\\n        (\\n            uint256 totalCollateral,\\n            uint256 totalUsedCollateral,\\n            uint256 totalDeposit\\n        ) = getTotalCollateralAmount(_user);\\n\\n        if (totalUsedCollateral == 0) {\\n            return totalDeposit;\\n        } else if (\\n            totalCollateral * Constants.PRICE_DIGIT >\\n            totalUsedCollateral * Storage.slot().liquidationThresholdRate\\n        ) {\\n            // NOTE: The formula is:\\n            // maxWithdraw = (totalCollateral / liquidationThresholdRate) - totalUsedCollateral.\\n            uint256 maxWithdraw = (totalCollateral *\\n                Constants.PRICE_DIGIT -\\n                (totalUsedCollateral) *\\n                Storage.slot().liquidationThresholdRate).div(Constants.PRICE_DIGIT);\\n\\n            return maxWithdraw >= totalDeposit ? totalDeposit : maxWithdraw;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getWithdrawableCollateral(\\n        bytes32 _ccy,\\n        address _user\\n    ) public view returns (uint256 withdrawableAmount) {\\n        uint256 depositAmount = getDepositAmount(_user, _ccy);\\n        if (Storage.slot().collateralCurrencies.contains(_ccy)) {\\n            uint256 maxWithdrawInBaseCurrency = getWithdrawableCollateral(_user);\\n            uint256 maxWithdraw = AddressResolverLib.currencyController().convertFromBaseCurrency(\\n                _ccy,\\n                maxWithdrawInBaseCurrency\\n            );\\n\\n            withdrawableAmount = depositAmount >= maxWithdraw ? maxWithdraw : depositAmount;\\n        } else {\\n            withdrawableAmount = depositAmount;\\n        }\\n    }\\n\\n    function addDepositAmount(address _user, bytes32 _ccy, uint256 _amount) public {\\n        Storage.slot().depositAmounts[_user][_ccy] += _amount;\\n        _updateUsedCurrencies(_user, _ccy);\\n    }\\n\\n    function removeDepositAmount(address _user, bytes32 _ccy, uint256 _amount) public {\\n        if (Storage.slot().depositAmounts[_user][_ccy] < _amount) {\\n            revert NotEnoughDeposit({ccy: _ccy});\\n        }\\n\\n        Storage.slot().depositAmounts[_user][_ccy] -= _amount;\\n        _updateUsedCurrencies(_user, _ccy);\\n    }\\n\\n    function executeForcedReset(\\n        address _user,\\n        bytes32 _ccy\\n    ) external returns (uint256 removedAmount) {\\n        removedAmount = Storage.slot().depositAmounts[_user][_ccy];\\n        Storage.slot().depositAmounts[_user][_ccy] = 0;\\n\\n        Storage.slot().usedCurrencies[_user].remove(_ccy);\\n    }\\n\\n    function deposit(address _user, bytes32 _ccy, uint256 _amount) public {\\n        TransferHelper.depositAssets(\\n            Storage.slot().tokenAddresses[_ccy],\\n            _user,\\n            address(this),\\n            _amount\\n        );\\n\\n        addDepositAmount(_user, _ccy, _amount);\\n        Storage.slot().totalDepositAmount[_ccy] += _amount;\\n    }\\n\\n    function withdraw(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) public returns (uint256 withdrawableAmount) {\\n        withdrawableAmount = getWithdrawableCollateral(_ccy, _user);\\n        withdrawableAmount = _amount > withdrawableAmount ? withdrawableAmount : _amount;\\n\\n        if (Storage.slot().totalDepositAmount[_ccy] < withdrawableAmount) {\\n            revert ProtocolIsInsolvent({ccy: _ccy});\\n        }\\n\\n        Storage.slot().totalDepositAmount[_ccy] -= withdrawableAmount;\\n        removeDepositAmount(_user, _ccy, withdrawableAmount);\\n\\n        TransferHelper.withdrawAssets(\\n            Storage.slot().tokenAddresses[_ccy],\\n            _user,\\n            withdrawableAmount\\n        );\\n\\n        return withdrawableAmount;\\n    }\\n\\n    function getLiquidationAmount(\\n        address _user,\\n        bytes32 _liquidationCcy,\\n        uint256 _liquidationAmountMaximum\\n    ) public view returns (uint256 liquidationAmount, uint256 protocolFee, uint256 liquidatorFee) {\\n        (\\n            uint256 totalCollateralInBaseCcy,\\n            uint256 totalUsedCollateralInBaseCcy,\\n\\n        ) = getTotalCollateralAmount(_user);\\n\\n        (uint256 collateralAmount, , ) = getCollateralAmount(_user, _liquidationCcy);\\n\\n        if (collateralAmount == 0) revert CollateralIsZero({ccy: _liquidationCcy});\\n\\n        uint256 liquidationAmountInBaseCcy = totalCollateralInBaseCcy * Constants.PCT_DIGIT >=\\n            totalUsedCollateralInBaseCcy * Storage.slot().liquidationThresholdRate\\n            ? 0\\n            : totalUsedCollateralInBaseCcy.div(2);\\n\\n        uint256[] memory amountsInBaseCcy = new uint256[](2);\\n        amountsInBaseCcy[0] = liquidationAmountInBaseCcy;\\n        amountsInBaseCcy[1] = totalCollateralInBaseCcy;\\n\\n        uint256[] memory amounts = AddressResolverLib.currencyController().convertFromBaseCurrency(\\n            _liquidationCcy,\\n            amountsInBaseCcy\\n        );\\n\\n        liquidationAmount = amounts[0];\\n        uint256 totalCollateralAmount = amounts[1];\\n\\n        if (liquidationAmount > _liquidationAmountMaximum) {\\n            liquidationAmount = _liquidationAmountMaximum;\\n        }\\n\\n        (protocolFee, liquidatorFee) = calculateLiquidationFees(liquidationAmount);\\n\\n        uint256 liquidationTotalAmount = liquidationAmount + protocolFee + liquidatorFee;\\n\\n        // NOTE: If `totalCollateralAmount > collateralAmount` is true, it means that a user has collateral in other currencies\\n        // In this case, this liquidation is not covered by the reserve fund.\\n        // Therefore, we need to keep the total liquidation amount within the maximum amount.\\n        if (liquidationTotalAmount > collateralAmount && totalCollateralAmount > collateralAmount) {\\n            liquidationTotalAmount = collateralAmount;\\n            uint256 liquidatorFeeRate = Storage.slot().liquidatorFeeRate;\\n            uint256 liquidationProtocolFeeRate = Storage.slot().liquidationProtocolFeeRate;\\n\\n            protocolFee = (liquidationTotalAmount * liquidationProtocolFeeRate).div(\\n                Constants.PCT_DIGIT + liquidatorFeeRate + liquidationProtocolFeeRate\\n            );\\n            liquidatorFee = (liquidationTotalAmount * liquidatorFeeRate).div(\\n                Constants.PCT_DIGIT + liquidatorFeeRate + liquidationProtocolFeeRate\\n            );\\n            liquidationAmount = liquidationTotalAmount - protocolFee - liquidatorFee;\\n        }\\n    }\\n\\n    function calculateLiquidationFees(\\n        uint256 _amount\\n    ) public view returns (uint256 protocolFee, uint256 liquidatorFee) {\\n        protocolFee = (_amount * Storage.slot().liquidationProtocolFeeRate).div(\\n            Constants.PCT_DIGIT\\n        );\\n        liquidatorFee = (_amount * Storage.slot().liquidatorFeeRate).div(Constants.PCT_DIGIT);\\n    }\\n\\n    function transferFrom(\\n        bytes32 _ccy,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (uint256 untransferredAmount) {\\n        uint256 depositAmount = Storage.slot().depositAmounts[_from][_ccy];\\n        uint256 amount = depositAmount >= _amount ? _amount : depositAmount;\\n        untransferredAmount = _amount - amount;\\n\\n        removeDepositAmount(_from, _ccy, amount);\\n        addDepositAmount(_to, _ccy, amount);\\n    }\\n\\n    /**\\n     * @notice Gets the total of amount deposited in the user's collateral of all currencies\\n     *  in this contract by converting it to ETH.\\n     * @param _user Address of collateral user\\n     * @return totalDepositAmount The total deposited amount in the base currency\\n     */\\n    function _getTotalInternalDepositAmountInBaseCurrency(\\n        address _user\\n    ) internal view returns (uint256 totalDepositAmount) {\\n        EnumerableSet.Bytes32Set storage currencies = Storage.slot().usedCurrencies[_user];\\n        uint256 length = currencies.length();\\n\\n        for (uint256 i; i < length; i++) {\\n            bytes32 ccy = currencies.at(i);\\n            if (Storage.slot().collateralCurrencies.contains(ccy)) {\\n                uint256 depositAmount = Storage.slot().depositAmounts[_user][ccy];\\n                totalDepositAmount += AddressResolverLib.currencyController().convertToBaseCurrency(\\n                    ccy,\\n                    depositAmount\\n                );\\n            }\\n        }\\n\\n        return totalDepositAmount;\\n    }\\n\\n    function _updateUsedCurrencies(address _user, bytes32 _ccy) internal {\\n        if (Storage.slot().depositAmounts[_user][_ccy] > 0) {\\n            Storage.slot().usedCurrencies[_user].add(_ccy);\\n        } else {\\n            Storage.slot().usedCurrencies[_user].remove(_ccy);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcaec453f57a7ed6441796ef16d0c2769e35ed205560e5aa2bb258a64927c3138\",\"license\":\"MIT\"},\"contracts/protocol/libraries/math/RoundingUint256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nlibrary RoundingUint256 {\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0);\\n\\n        if ((a * 10) / b - (a / b) * 10 < 5) {\\n            return a / b;\\n        } else {\\n            return (a / b) + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7aa9181dd6d93d8cf3b8fb87e62f6c37c4cae8e72a6c666106d9b57b34736fe7\",\"license\":\"MIT\"},\"contracts/protocol/mixins/MixinAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {AccessControl} from \\\"../utils/AccessControl.sol\\\";\\n\\n/**\\n * @notice Implements functions to add  role-based access control mechanisms.\\n */\\ncontract MixinAccessControl is AccessControl {\\n    error CallerNotOperator();\\n\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    /**\\n     * @dev Throws if called by any account other than the admin.\\n     */\\n    modifier onlyOperator() {\\n        if (!hasRole(OPERATOR_ROLE, msg.sender)) revert CallerNotOperator();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the roles.\\n     * @param _admin The address of the admin role\\n     */\\n    function _setupInitialRoles(address _admin) internal {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        // _grantRole(PROTOCOL_ADMIN_ROLE, _admin);\\n        _grantRole(OPERATOR_ROLE, _admin);\\n    }\\n\\n    /**\\n     * @notice Sets the role as admin of a specific role.\\n     * @dev By default the admin role for all roles is `DEFAULT_ADMIN_ROLE`.\\n     * @param role The role to be managed by the admin role\\n     * @param adminRole The admin role\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _setRoleAdmin(role, adminRole);\\n    }\\n\\n    /**\\n     * @notice Adds a new admin as Operator\\n     * @param admin The address of the new admin\\n     */\\n    function addOperator(address admin) external {\\n        grantRole(OPERATOR_ROLE, admin);\\n    }\\n\\n    /**\\n     * @notice Removes an admin as Operator\\n     * @param admin The address of the admin to remove\\n     */\\n    function removeOperator(address admin) external {\\n        revokeRole(OPERATOR_ROLE, admin);\\n    }\\n}\\n\",\"keccak256\":\"0x41f3ee3ed87091930f95776b888199cd44d34347c150fbcd2685818074263bc6\",\"license\":\"MIT\"},\"contracts/protocol/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {AddressResolverLib} from \\\"../libraries/AddressResolverLib.sol\\\";\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/mixins/MixinAddressResolverStorage.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    error OnlyAcceptedContracts();\\n    error ResolverAlreadyRegistered();\\n\\n    modifier onlyAcceptedContracts() {\\n        if (!isAcceptedContract(msg.sender)) revert OnlyAcceptedContracts();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the contract names used in this contract.\\n     * @dev The contract name list is in `./libraries/Contracts.sol`.\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @notice Returns contract names that can call this contract.\\n     * @dev The contact name listed in this method is also needed to be listed `requiredContracts` method.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = Storage.slot().resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            Storage.slot().addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                Storage.slot().resolver.getAddress(name) != Storage.slot().addressCache[name] ||\\n                Storage.slot().addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        if (address(Storage.slot().resolver) != address(0)) revert ResolverAlreadyRegistered();\\n        Storage.slot().resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        return AddressResolverLib.getAddress(name);\\n    }\\n\\n    function resolver() public view returns (IAddressResolver) {\\n        return Storage.slot().resolver;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return AddressResolverLib.beaconProxyController();\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return AddressResolverLib.currencyController();\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return AddressResolverLib.genesisValueVault();\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return AddressResolverLib.reserveFund();\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return AddressResolverLib.lendingMarketController();\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return AddressResolverLib.tokenVault();\\n    }\\n}\\n\",\"keccak256\":\"0xf9e854d4083e27be7b8303825e90a8a297757948f589e99c4810c0b12b2ae124\",\"license\":\"MIT\"},\"contracts/protocol/mixins/MixinLiquidationConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// libraries\\nimport {Constants} from \\\"../libraries/Constants.sol\\\";\\n// utils\\nimport {Ownable} from \\\"../utils/Ownable.sol\\\";\\n// storages\\nimport {TokenVaultStorage as Storage} from \\\"../storages/TokenVaultStorage.sol\\\";\\n\\ncontract MixinLiquidationConfiguration is Ownable {\\n    error InvalidLiquidationThresholdRate();\\n    error InvalidLiquidationProtocolFeeRate();\\n    error InvalidLiquidatorFeeRate();\\n\\n    event AutoLiquidationThresholdRateUpdated(uint256 previousRate, uint256 ratio);\\n    event LiquidationProtocolFeeRateUpdated(uint256 previousRate, uint256 ratio);\\n    event LiquidatorFeeRateUpdated(uint256 previousRate, uint256 ratio);\\n\\n    function _initialize(\\n        address _owner,\\n        uint256 _liquidationThresholdRate,\\n        uint256 _liquidationProtocolFeeRate,\\n        uint256 _liquidatorFeeRate\\n    ) internal {\\n        _transferOwnership(_owner);\\n        _updateLiquidationConfiguration(\\n            _liquidationThresholdRate,\\n            _liquidationProtocolFeeRate,\\n            _liquidatorFeeRate\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets the liquidation configuration\\n     * @return liquidationThresholdRate The liquidation threshold rate\\n     * @return liquidationProtocolFeeRate The liquidation fee received by liquidators\\n     * @return liquidatorFeeRate The liquidation protocol fee received by protocol\\n     */\\n    function getLiquidationConfiguration()\\n        external\\n        view\\n        returns (\\n            uint256 liquidationThresholdRate,\\n            uint256 liquidationProtocolFeeRate,\\n            uint256 liquidatorFeeRate\\n        )\\n    {\\n        liquidationThresholdRate = Storage.slot().liquidationThresholdRate;\\n        liquidationProtocolFeeRate = Storage.slot().liquidationProtocolFeeRate;\\n        liquidatorFeeRate = Storage.slot().liquidatorFeeRate;\\n    }\\n\\n    /**\\n     * @dev Update the liquidation configuration\\n     * @param _liquidationThresholdRate The liquidation threshold rate\\n     * @param _liquidationProtocolFeeRate The liquidation fee rate received by protocol\\n     * @param _liquidatorFeeRate The liquidation fee rate received by liquidators\\n     * @notice Triggers only be contract owner\\n     */\\n    function updateLiquidationConfiguration(\\n        uint256 _liquidationThresholdRate,\\n        uint256 _liquidationProtocolFeeRate,\\n        uint256 _liquidatorFeeRate\\n    ) external onlyOwner {\\n        _updateLiquidationConfiguration(\\n            _liquidationThresholdRate,\\n            _liquidationProtocolFeeRate,\\n            _liquidatorFeeRate\\n        );\\n    }\\n\\n    /**\\n     * @dev Update the liquidation configuration\\n     * @param _liquidationThresholdRate The liquidation threshold rate\\n     * @param _liquidationProtocolFeeRate The liquidation fee rate received by protocol\\n     * @param _liquidatorFeeRate The liquidation fee rate received by liquidators\\n     * @notice Triggers only be contract owner\\n     */\\n    function _updateLiquidationConfiguration(\\n        uint256 _liquidationThresholdRate,\\n        uint256 _liquidationProtocolFeeRate,\\n        uint256 _liquidatorFeeRate\\n    ) private {\\n        if (_liquidationThresholdRate == 0) revert InvalidLiquidationThresholdRate();\\n        if (_liquidationProtocolFeeRate > Constants.PCT_DIGIT)\\n            revert InvalidLiquidationProtocolFeeRate();\\n        if (_liquidatorFeeRate > Constants.PCT_DIGIT) revert InvalidLiquidatorFeeRate();\\n\\n        if (_liquidationThresholdRate != Storage.slot().liquidationThresholdRate) {\\n            emit AutoLiquidationThresholdRateUpdated(\\n                Storage.slot().liquidationThresholdRate,\\n                _liquidationThresholdRate\\n            );\\n            Storage.slot().liquidationThresholdRate = _liquidationThresholdRate;\\n        }\\n\\n        if (_liquidationProtocolFeeRate != Storage.slot().liquidationProtocolFeeRate) {\\n            emit LiquidationProtocolFeeRateUpdated(\\n                Storage.slot().liquidationProtocolFeeRate,\\n                _liquidationProtocolFeeRate\\n            );\\n            Storage.slot().liquidationProtocolFeeRate = _liquidationProtocolFeeRate;\\n        }\\n\\n        if (_liquidatorFeeRate != Storage.slot().liquidatorFeeRate) {\\n            Storage.slot().liquidatorFeeRate = _liquidatorFeeRate;\\n            emit LiquidatorFeeRateUpdated(Storage.slot().liquidatorFeeRate, _liquidatorFeeRate);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x967c8c5e22a1c0ff6ca00df08c8614b36f298a53e037ff2928d6a3262a08a07d\",\"license\":\"MIT\"},\"contracts/protocol/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../dependencies/chainlink/AggregatorV3Interface.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct PriceFeed {\\n    AggregatorV3Interface[] instances;\\n    uint256 heartbeat;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.currencyController\\\");\\n\\n    struct Storage {\\n        // Protocol currencies\\n        EnumerableSet.Bytes32Set currencies;\\n        mapping(bytes32 ccy => uint256 haircut) haircuts;\\n        // Total cached decimals of the price feeds\\n        mapping(bytes32 ccy => uint8 decimals) decimalsCaches;\\n        mapping(bytes32 ccy => PriceFeed priceFeed) priceFeeds;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06e39e3b53a63439a587672e6feeee3cde7f9bdc6d2421b1c4a9a9db09908e25\",\"license\":\"MIT\"},\"contracts/protocol/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nstruct AutoRollLog {\\n    uint256 unitPrice;\\n    uint256 lendingCompoundFactor;\\n    uint256 borrowingCompoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.genesisValueVault\\\");\\n\\n    struct Storage {\\n        mapping(bytes32 ccy => bool isInitialized) isInitialized;\\n        mapping(bytes32 ccy => uint256 compoundFactor) initialCompoundFactors;\\n        mapping(bytes32 ccy => uint256 compoundFactor) lendingCompoundFactors;\\n        mapping(bytes32 ccy => uint256 compoundFactor) borrowingCompoundFactors;\\n        mapping(bytes32 ccy => uint256 maturity) currentMaturity;\\n        mapping(bytes32 ccy => uint8 decimals) decimals;\\n        mapping(bytes32 ccy => mapping(address user => int256 balance)) balances;\\n        mapping(bytes32 ccy => uint256 amount) totalLendingSupplies;\\n        mapping(bytes32 ccy => uint256 amount) totalBorrowingSupplies;\\n        // Total amount supplied per maturity\\n        mapping(bytes32 ccy => mapping(uint256 maturity => int256 balance)) maturityBalances;\\n        mapping(bytes32 ccy => mapping(uint256 maturity => AutoRollLog log)) autoRollLogs;\\n        // Maturity when the user receives the balance on the target currency\\n        mapping(bytes32 ccy => mapping(address user => uint256 maturity)) userMaturities;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x64e82151903c1be98543d30e1a8e2ff1950c9fdbe3e8318c1f63509ad2af9490\",\"license\":\"MIT\"},\"contracts/protocol/storages/TokenVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {EnumerableSet} from \\\"../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary TokenVaultStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.tokenVault\\\");\\n\\n    struct Storage {\\n        // Liquidation threshold rate (in basis point)\\n        uint256 liquidationThresholdRate;\\n        // Liquidation fee rate received by protocol (in basis point)\\n        uint256 liquidationProtocolFeeRate;\\n        // Liquidation fee rate received by liquidators (in basis point)\\n        uint256 liquidatorFeeRate;\\n        // Currencies accepted as collateral\\n        EnumerableSet.Bytes32Set collateralCurrencies;\\n        mapping(bytes32 ccy => address tokenAddress) tokenAddresses;\\n        // List of currency that the user has deposit amounts\\n        mapping(address user => EnumerableSet.Bytes32Set currency) usedCurrencies;\\n        mapping(bytes32 ccy => uint256 totalDepositAmount) totalDepositAmount;\\n        mapping(address user => mapping(bytes32 currency => uint256 depositAmount)) depositAmounts;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x84df4798e6f307bef0efda8095a8e4897f3d2f6c41c8a1c638c805d2d217aee8\",\"license\":\"MIT\"},\"contracts/protocol/storages/libraries/TransferHelperStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nlibrary TransferHelperStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.transferHelper\\\");\\n\\n    struct Storage {\\n        address nativeToken;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa8562c33af775e20730e4cc5745e9b1db92e8ef9a3ab6c04208a604d573b80ad\",\"license\":\"MIT\"},\"contracts/protocol/storages/mixins/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IAddressResolver} from \\\"../../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.mixinAddressResolver\\\");\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 contractName => address contractAddress) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4f13956ca9e6fb24392baee47623a743136360ba4fa926068500a5ab4daca397\",\"license\":\"MIT\"},\"contracts/protocol/storages/utils/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nstruct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n}\\n\\nlibrary AccessControlStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.accessControl\\\");\\n\\n    struct Storage {\\n        mapping(bytes32 role => RoleData roleData) roles;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x94fc698846b54913962d31a116c20ef9e5295b807484bd291e47427a7a86cd52\",\"license\":\"MIT\"},\"contracts/protocol/storages/utils/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nlibrary OwnableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.ownable\\\");\\n\\n    struct Storage {\\n        address owner;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x41294a1b9bb0f515407bc022cc6c6ac76a1de76da65926a76be1a13b66dcd3c9\",\"license\":\"MIT\"},\"contracts/protocol/storages/utils/PausableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nlibrary PausableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.pausable\\\");\\n\\n    struct Storage {\\n        bool paused;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x73f430d749654a7b43ef8eed1f0c369bd2bdfefafe25d5799df179cbea7414e8\",\"license\":\"MIT\"},\"contracts/protocol/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0x19557f2b7cf8e64b5690fa6a9c40b8010b818061861dd1ad38326e6ac549f88a\",\"license\":\"MIT\"},\"contracts/protocol/utils/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../dependencies/openzeppelin/access/IAccessControl.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/Context.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/Strings.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/introspection/ERC165.sol\\\";\\nimport \\\"../storages/utils/AccessControlStorage.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return AccessControlStorage.slot().roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return AccessControlStorage.slot().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(\\n        bytes32 role,\\n        address account\\n    ) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(\\n        bytes32 role,\\n        address account\\n    ) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        AccessControlStorage.slot().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            AccessControlStorage.slot().roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            AccessControlStorage.slot().roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x97887ffa7e7334b3a570c5f5476d11ec35e99156cb335687757160cb75cc30be\",\"license\":\"MIT\"},\"contracts/protocol/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/Context.sol\\\";\\nimport \\\"../storages/utils/OwnableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return OwnableStorage.slot().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = OwnableStorage.slot().owner;\\n        OwnableStorage.slot().owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x56362e45d31c8c0dc16b6275848d3f5f75472f6f729f8cfeb6a2828a2d26f213\",\"license\":\"MIT\"},\"contracts/protocol/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/Context.sol\\\";\\nimport \\\"../storages/utils/PausableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return PausableStorage.slot().paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage.slot().paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage.slot().paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x1d89adc36e2b83f33f7a894ea9bf6bc8fc5d0caf455f2f9b00464cdc84dac209\",\"license\":\"MIT\"},\"contracts/protocol/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/StorageSlot.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    function getRevision() external pure virtual returns (uint256) {\\n        return 0x1;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0xccdc248987e5782e88a63eb6612d93c2b6fe1e483dd682c89427f6376723d2f7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613c6d806100206000396000f3fe6080604052600436106103535760003560e01c806359047200116101c6578063a217fddf116100f7578063d5e190d011610095578063f2fde38b1161006f578063f2fde38b14610a00578063f5b541a614610a20578063fb7bd3b414610a42578063fc70081014610a6257600080fd5b8063d5e190d0146109c1578063e0997659146109d6578063ed6dd514146109eb57600080fd5b8063b12e4410116100d1578063b12e441014610941578063b1a5d12d14610961578063ca42303114610981578063d547741f146109a157600080fd5b8063a217fddf146108df578063ac8a584a146108f4578063ac9650d81461091457600080fd5b80638456cb591161016457806391d148541161013e57806391d148541461086c578063948060dd1461088c57806396994e37146108ac5780639870d7fe146108bf57600080fd5b80638456cb59146108225780638da5cb5b146108375780638e19aff31461084c57600080fd5b80635d95df8a116101a05780635d95df8a146107ad578063715018a6146107cd5780637d044b43146107e25780637d44828e1461080257600080fd5b806359047200146107335780635bffeb66146107685780635c975abb1461078857600080fd5b806329985e5a116102a05780633f90a08e1161023e578063500d2f6d11610218578063500d2f6d146106985780635257ed67146106b857806354821c21146106f35780635575fba71461071357600080fd5b80633f90a08e1461062b5780634ba0c9b5146106585780634c6aa99c1461067857600080fd5b806330312daa1161027a57806330312daa146105b457806336568abe146105d45780633d03b9da146105f45780633f4ba83a1461061657600080fd5b806329985e5a1461056a5780632af64bd31461057f5780632f2ff15d1461059457600080fd5b80630eadd2441161030d5780631e4e0091116102e75780631e4e0091146104ea578063248a9ca31461050a57806325a890321461052a57806325e1f09f1461054a57600080fd5b80630eadd244146104a35780631316529d146104c35780631de26e16146104d757600080fd5b8062fcf2621461039e57806301ffc9a7146103d85780630253cd7e14610408578063040cf0201461043657806304f3bcec146104565780630cf7505d1461048357600080fd5b3661039957600080516020613bb1833981519152546001600160a01b031633146103975760405163efd4e4e160e01b81523360048201526024015b60405180910390fd5b005b600080fd5b3480156103aa57600080fd5b506103be6103b93660046132c5565b610a82565b604080519283526020830191909152015b60405180910390f35b3480156103e457600080fd5b506103f86103f33660046132de565b610b01565b60405190151581526020016103cf565b34801561041457600080fd5b5061042861042336600461331d565b610b38565b6040519081526020016103cf565b34801561044257600080fd5b50610397610451366004613349565b610bc6565b34801561046257600080fd5b5061046b610c05565b6040516001600160a01b0390911681526020016103cf565b34801561048f57600080fd5b506103f861049e3660046132c5565b610c26565b3480156104af57600080fd5b506104286104be36600461336b565b610c54565b3480156104cf57600080fd5b506001610428565b6103976104e5366004613349565b610c9e565b3480156104f657600080fd5b50610397610505366004613349565b610cd8565b34801561051657600080fd5b506104286105253660046132c5565b610ced565b34801561053657600080fd5b5061042861054536600461339b565b610d0f565b34801561055657600080fd5b506103f861056536600461339b565b610d8f565b34801561057657600080fd5b50610397610e0e565b34801561058b57600080fd5b506103f8610fac565b3480156105a057600080fd5b506103976105af36600461336b565b611103565b3480156105c057600080fd5b506103976105cf3660046133b8565b61111f565b3480156105e057600080fd5b506103976105ef36600461336b565b611159565b34801561060057600080fd5b506106096111d3565b6040516103cf91906133e4565b34801561062257600080fd5b50610397611295565b34801561063757600080fd5b5061064b61064636600461346d565b6112d4565b6040516103cf91906134af565b34801561066457600080fd5b506103976106733660046134e9565b611384565b34801561068457600080fd5b506104286106933660046132c5565b61144a565b3480156106a457600080fd5b506104286106b336600461351e565b611468565b3480156106c457600080fd5b506106d86106d33660046134e9565b6115a7565b604080519384526020840192909252908201526060016103cf565b3480156106ff57600080fd5b5061042861070e36600461339b565b611637565b34801561071f57600080fd5b5061042861072e36600461331d565b6116bf565b34801561073f57600080fd5b5061075361074e3660046135d6565b611709565b604080519283529015156020830152016103cf565b34801561077457600080fd5b5061039761078336600461366f565b6117d9565b34801561079457600080fd5b50600080516020613b918339815191525460ff166103f8565b3480156107b957600080fd5b506103f86107c83660046132c5565b611944565b3480156107d957600080fd5b5061039761195b565b3480156107ee57600080fd5b506104286107fd36600461331d565b611994565b34801561080e57600080fd5b5061042861081d36600461331d565b611a70565b34801561082e57600080fd5b50610397611b00565b34801561084357600080fd5b5061046b611b3d565b34801561085857600080fd5b506103976108673660046136b1565b611b65565b34801561087857600080fd5b506103f861088736600461336b565b611c21565b34801561089857600080fd5b506104286108a736600461339b565b611c59565b6103976108ba3660046134e9565b611c9c565b3480156108cb57600080fd5b506103976108da36600461339b565b611cd5565b3480156108eb57600080fd5b50610428600081565b34801561090057600080fd5b5061039761090f36600461339b565b611cf0565b34801561092057600080fd5b5061093461092f36600461346d565b611d08565b6040516103cf9190613726565b34801561094d57600080fd5b5061046b61095c3660046132c5565b611df6565b34801561096d57600080fd5b5061039761097c366004613788565b611e1d565b34801561098d57600080fd5b5061042861099c36600461339b565b611fc7565b3480156109ad57600080fd5b506103976109bc36600461336b565b61200a565b3480156109cd57600080fd5b50610609612026565b3480156109e257600080fd5b50610609612040565b3480156109f757600080fd5b506106d86120bc565b348015610a0c57600080fd5b50610397610a1b36600461339b565b6120ed565b348015610a2c57600080fd5b50610428600080516020613bf183398151915281565b348015610a4e57600080fd5b50610397610a5d3660046134e9565b61218a565b348015610a6e57600080fd5b50610609610a7d36600461339b565b61221a565b604051627e793160e11b8152600481018290526000908190739fa1EDCC47b75831773Eb969f55b8bFd770aba9c9062fcf262906024016040805180830381865af4158015610ad4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af891906137ef565b91509150915091565b60006001600160e01b03198216637965db0b60e01b1480610b3257506301ffc9a760e01b6001600160e01b03198316145b92915050565b604051630129e6bf60e11b81526001600160a01b038316600482015260248101829052600090739fa1EDCC47b75831773Eb969f55b8bFd770aba9c90630253cd7e906044015b602060405180830381865af4158015610b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbf9190613813565b9392505050565b610bce61229d565b81610bd881610c26565b610bf557604051630f4a6ccd60e21b815260040160405180910390fd5b610c003384846122f0565b505050565b6000600080516020613b718339815191525b546001600160a01b0316919050565b600080610c316124ed565b60009384526005016020526040909220546001600160a01b031690911415919050565b6040516303ab749160e21b8152600481018390526001600160a01b0382166024820152600090739fa1EDCC47b75831773Eb969f55b8bFd770aba9c90630eadd24490604401610b7e565b610ca661229d565b81610cb081610c26565b610ccd57604051630f4a6ccd60e21b815260040160405180910390fd5b610c00338484612511565b6000610ce3816126bd565b610c0083836126c7565b6000908152600080516020613bd1833981519152602052604090206001015490565b6040516312d4481960e11b81526001600160a01b0382166004820152600090739fa1EDCC47b75831773Eb969f55b8bFd770aba9c906325a89032906024015b602060405180830381865af4158015610d6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b329190613813565b6040516325e1f09f60e01b81526001600160a01b0382166004820152600090739fa1EDCC47b75831773Eb969f55b8bFd770aba9c906325e1f09f90602401602060405180830381865af4158015610dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b32919061382c565b6000610e186111d3565b905060005b8151811015610fa8576000828281518110610e3a57610e3a613849565b602002602001015190506000610e5b600080516020613b7183398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd91610ecc91869190605d0161385f565b602060405180830381865afa158015610ee9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0d9190613880565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a150508080610fa0906138b3565b915050610e1d565b5050565b600080610fb76111d3565b905060005b81518110156110fa576000828281518110610fd957610fd9613849565b60200260200101519050610ff8600080516020613b7183398151915290565b600082815260019190910160205260409020546001600160a01b0316600080516020613b71833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a72190602401602060405180830381865afa15801561106a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108e9190613880565b6001600160a01b03161415806110d8575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b156110e7576000935050505090565b50806110f2816138b3565b915050610fbc565b50600191505090565b61110c82610ced565b611115816126bd565b610c008383612727565b33611128611b3d565b6001600160a01b03161461114e5760405162461bcd60e51b815260040161038e906138cc565b610c0083838361279d565b6001600160a01b03811633146111c95760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161038e565b610fa88282612923565b604080516003808252608082019092526060916020820183803683370190505090507121bab93932b731bca1b7b73a3937b63632b960711b8160008151811061121e5761121e613849565b602002602001018181525050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b8160018151811061125857611258613849565b6020026020010181815250506a14995cd95c9d99519d5b9960aa1b8160028151811061128657611286613849565b60200260200101818152505090565b6112ad600080516020613bf183398151915233611c21565b6112ca5760405163a5523ee560e01b815260040160405180910390fd5b6112d2612997565b565b6060818067ffffffffffffffff8111156112f0576112f0613566565b604051908082528060200260200182016040528015611319578160200160208202803683370190505b50915060005b8181101561137c5761134885858381811061133c5761133c613849565b90506020020135611944565b83828151811061135a5761135a613849565b9115156020928302919091019091015280611374816138b3565b91505061131f565b505092915050565b61138c61229d565b611395336129f6565b6113b2576040516330de277560e21b815260040160405180910390fd5b816113bc81610c26565b6113d957604051630f4a6ccd60e21b815260040160405180910390fd5b604051634ba0c9b560e01b8152739fa1EDCC47b75831773Eb969f55b8bFd770aba9c90634ba0c9b59061141490879087908790600401613901565b60006040518083038186803b15801561142c57600080fd5b505af4158015611440573d6000803e3d6000fd5b5050505050505050565b60006114546124ed565b600092835260070160205250604090205490565b600061147261229d565b61147b336129f6565b611498576040516330de277560e21b815260040160405180910390fd5b846114a281610c26565b6114bf57604051630f4a6ccd60e21b815260040160405180910390fd5b60405163500d2f6d60e01b8152600481018790526001600160a01b0380871660248301528516604482015260648101849052739fa1EDCC47b75831773Eb969f55b8bFd770aba9c9063500d2f6d90608401602060405180830381865af415801561152d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115519190613813565b91506001600160a01b03808516908616877ff8ca259b4b82670be7501ff56ad1fc9c7cd199d3431e3c502f2c5f86884bc15061158d8688613922565b60405190815260200160405180910390a450949350505050565b6000806000739fa1EDCC47b75831773Eb969f55b8bFd770aba9c635257ed678787876040518463ffffffff1660e01b81526004016115e793929190613901565b606060405180830381865af4158015611604573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116289190613935565b92509250925093509350939050565b6040516354821c2160e01b81526001600160a01b0382166004820152600090739fa1EDCC47b75831773Eb969f55b8bFd770aba9c906354821c2190602401606060405180830381865af4158015611692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b69190613935565b50909392505050565b604051635575fba760e01b81526001600160a01b038316600482015260248101829052600090739fa1EDCC47b75831773Eb969f55b8bFd770aba9c90635575fba790604401610b7e565b60408051632910ae9d60e01b81526001600160a01b0384166004820152825160248201526020830151604482015290820151606482015260608201516084820152608082015160a482015260a082015160c482015260c082015160e48201526000908190739fa1EDCC47b75831773Eb969f55b8bFd770aba9c90632910ae9d90610104016040805180830381865af41580156117a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117cd9190613963565b915091505b9250929050565b336117e2611b3d565b6001600160a01b0316146118085760405162461bcd60e51b815260040161038e906138cc565b611810612a6f565b6001600160a01b0316631eae0893846040518263ffffffff1660e01b815260040161183d91815260200190565b602060405180830381865afa15801561185a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187e919061382c565b61189b57604051631eb3268560e31b815260040160405180910390fd5b816118a46124ed565b60008581526005919091016020526040902080546001600160a01b0319166001600160a01b039290921691909117905580156118f1576118ef836118e66124ed565b60030190612a79565b505b604080518481526001600160a01b0384166020820152821515918101919091527ff776c30df345d55df252bb5181a0c2bb23d601166606790a6f1b938d7e158503906060015b60405180910390a1505050565b6000610b32826119526124ed565b60030190612a85565b33611964611b3d565b6001600160a01b03161461198a5760405162461bcd60e51b815260040161038e906138cc565b6112d26000612a9d565b600061199f336129f6565b6119bc576040516330de277560e21b815260040160405180910390fd5b816119c681610c26565b6119e357604051630f4a6ccd60e21b815260040160405180910390fd5b604051637d044b4360e01b81526001600160a01b038516600482015260248101849052739fa1EDCC47b75831773Eb969f55b8bFd770aba9c90637d044b4390604401602060405180830381865af4158015611a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a669190613813565b91505b5092915050565b604051633ea2414760e11b81526001600160a01b038316600482015260248101829052600090739fa1EDCC47b75831773Eb969f55b8bFd770aba9c90637d44828e90604401606060405180830381865af4158015611ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af69190613935565b5090949350505050565b611b18600080516020613bf183398151915233611c21565b611b355760405163a5523ee560e01b815260040160405180910390fd5b6112d2612b0e565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa610c17565b33611b6e611b3d565b6001600160a01b031614611b945760405162461bcd60e51b815260040161038e906138cc565b81611b9e81610c26565b611bbb57604051630f4a6ccd60e21b815260040160405180910390fd5b8115611bd357611bcd836118e66124ed565b50611bea565b611be883611bdf6124ed565b60030190612b57565b505b6040805184815283151560208201527f97caf2b3b2f0aa460ca08b20c07f7a43ccf688e2f3b7179f2cf9113fb892bf819101611937565b6000918252600080516020613bd1833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60405163948060dd60e01b81526001600160a01b0382166004820152600090739fa1EDCC47b75831773Eb969f55b8bFd770aba9c9063948060dd90602401610d4e565b611ca461229d565b611cad336129f6565b611cca576040516330de277560e21b815260040160405180910390fd5b610c00838383612511565b611ced600080516020613bf183398151915282611103565b50565b611ced600080516020613bf18339815191528261200a565b60608167ffffffffffffffff811115611d2357611d23613566565b604051908082528060200260200182016040528015611d5657816020015b6060815260200190600190039081611d415790505b50905060005b82811015611a6957611dc630858584818110611d7a57611d7a613849565b9050602002810190611d8c9190613988565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612b6392505050565b828281518110611dd857611dd8613849565b60200260200101819052508080611dee906138b3565b915050611d5c565b6000611e006124ed565b60009283526005016020525060409020546001600160a01b031690565b600054610100900460ff1615808015611e3d5750600054600160ff909116105b80611e575750303b158015611e57575060005460ff166001145b611eba5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161038e565b6000805460ff191660011790558015611edd576000805461ff0019166101001790555b6000611ee7612b88565b6001600160a01b031603611f485760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b606482015260840161038e565b611f5187612a9d565b611f5a86612bb0565b611f6382612c19565b611f6c87612ca0565b611f7887868686612cc3565b8015611fbe576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b60405163ca42303160e01b81526001600160a01b0382166004820152600090739fa1EDCC47b75831773Eb969f55b8bFd770aba9c9063ca42303190602401610d4e565b61201382610ced565b61201c816126bd565b610c008383612923565b606061203b6120336124ed565b600301612cdd565b905090565b6040805160028082526060808301845292602083019080368337019050509050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b8160008151811061208e5761208e613849565b6020026020010181815250506a14995cd95c9d99519d5b9960aa1b8160018151811061128657611286613849565b60008060006120c96124ed565b5492506120d46124ed565b6001015491506120e26124ed565b600201549050909192565b336120f6611b3d565b6001600160a01b03161461211c5760405162461bcd60e51b815260040161038e906138cc565b6001600160a01b0381166121815760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161038e565b611ced81612a9d565b61219261229d565b61219b336129f6565b6121b8576040516330de277560e21b815260040160405180910390fd5b816121c281610c26565b6121df57604051630f4a6ccd60e21b815260040160405180910390fd5b604051633edef4ed60e21b8152739fa1EDCC47b75831773Eb969f55b8bFd770aba9c9063fb7bd3b49061141490879087908790600401613901565b604051630fc7008160e41b81526001600160a01b0382166004820152606090739fa1EDCC47b75831773Eb969f55b8bFd770aba9c9063fc70081090602401600060405180830381865af4158015612275573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b3291908101906139cf565b600080516020613b918339815191525460ff16156112d25760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161038e565b806000036123115760405163162908e360e11b815260040160405180910390fd5b612319612ce8565b60405163862fd6e560e01b81526001600160a01b038581166004830152919091169063862fd6e590602401602060405180830381865afa158015612361573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612385919061382c565b156123a357604051631f6d627d60e11b815260040160405180910390fd5b6123ab612ce8565b604051639519832b60e01b8152600481018490526001600160a01b0385811660248301529190911690639519832b906044016020604051808303816000875af11580156123fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124209190613813565b5060405163148b8b9d60e11b8152600090739fa1EDCC47b75831773Eb969f55b8bFd770aba9c90632917173a9061245f90879087908790600401613901565b602060405180830381865af415801561247c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a09190613813565b60408051858152602081018390529192506001600160a01b038616917fc3ded2be7db21b1af963f267d27750e4a15f174547d88b886b9bda43e2c6fa32910160405180910390a250505050565b7f53832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a831790565b80158061256457506125586125246124ed565b60008481526005919091016020526040902054600080516020613bb1833981519152546001600160a01b0390811691161490565b80156125645750348114155b156125825760405163162908e360e11b815260040160405180910390fd5b61258a612ce8565b6001600160a01b031663d1cc99766040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125eb919061382c565b15612609576040516319a90b2f60e21b815260040160405180910390fd5b604051631d64487f60e31b8152739fa1EDCC47b75831773Eb969f55b8bFd770aba9c9063eb2243f89061264490869086908690600401613901565b60006040518083038186803b15801561265c57600080fd5b505af4158015612670573d6000803e3d6000fd5b505060408051858152602081018590526001600160a01b03871693507f19dacbf83c5de6658e14cbf7bcae5c15eca2eedecf1c66fbca928e4d351bea0f92500160405180910390a2505050565b611ced8133612cf2565b60006126d283610ced565b6000848152600080516020613bd18339815191526020526040808220600101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6127318282611c21565b610fa8576000828152600080516020613bd1833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b826000036127be57604051630821f57960e31b815260040160405180910390fd5b6127108211156127e1576040516370a4af3d60e01b815260040160405180910390fd5b61271081111561280457604051631da7276f60e01b815260040160405180910390fd5b61280c6124ed565b54831461285f577fd3353684d64f1c80498433d8407c96e6bbeb1ec88b6200ec97d2c910fdbd0da461283c6124ed565b5460408051918252602082018690520160405180910390a18261285d6124ed565b555b6128676124ed565b6001015482146128c3577f651b17c8e9402610e6210cfaa5b252d2186f8a16adf58c9c0fd5793bc4ea9b1f61289a6124ed565b6001015460408051918252602082018590520160405180910390a1816128be6124ed565b600101555b6128cb6124ed565b600201548114610c0057806128de6124ed565b600201557f7e8f030f9238551b066874b952f0c6ba811ba426ab231ba4825421d5d8f5cd9561290b6124ed565b60020154604080519182526020820184905201611937565b61292d8282611c21565b15610fa8576000828152600080516020613bd1833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61299f612d56565b600080516020613b91833981519152805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080612a01612040565b905060005b8151811015612a6557612a31828281518110612a2457612a24613849565b6020026020010151612dac565b6001600160a01b0316846001600160a01b031603612a53575060019392505050565b80612a5d816138b3565b915050612a06565b5060009392505050565b600061203b612db7565b6000610bbf8383612dd7565b60008181526001830160205260408120541515610bbf565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b612b1661229d565b600080516020613b91833981519152805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336129d9565b6000610bbf8383612e26565b6060610bbf8383604051806060016040528060278152602001613c1160279139612f19565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610c17565b600080516020613b71833981519152546001600160a01b031615612be7576040516304b79d6360e51b815260040160405180910390fd5b80600080516020613b718339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b600080516020613bb1833981519152546001600160a01b031615612c8b5760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a20416c726561647920696e697469616c696044820152621e995960ea1b606482015260840161038e565b80600080516020613bb1833981519152612bf8565b612cab600082612ff6565b611ced600080516020613bf183398151915282612727565b612ccc84612a9d565b612cd783838361279d565b50505050565b6060610b3282613000565b600061203b61305c565b612cfc8282611c21565b610fa857612d14816001600160a01b03166014613081565b612d1f836020613081565b604051602001612d30929190613a75565b60408051601f198184030181529082905262461bcd60e51b825261038e91600401613aea565b600080516020613b918339815191525460ff166112d25760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161038e565b6000610b328261321d565b600061203b7121bab93932b731bca1b7b73a3937b63632b960711b61321d565b6000818152600183016020526040812054612e1e57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b32565b506000610b32565b60008181526001830160205260408120548015612f0f576000612e4a600183613922565b8554909150600090612e5e90600190613922565b9050818114612ec3576000866000018281548110612e7e57612e7e613849565b9060005260206000200154905080876000018481548110612ea157612ea1613849565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612ed457612ed4613afd565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610b32565b6000915050610b32565b60606001600160a01b0384163b612f815760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161038e565b600080856001600160a01b031685604051612f9c9190613b13565b600060405180830381855af49150503d8060008114612fd7576040519150601f19603f3d011682016040523d82523d6000602084013e612fdc565b606091505b5091509150612fec82828661328c565b9695505050505050565b610fa88282612727565b60608160000180548060200260200160405190810160405280929190818152602001828054801561305057602002820191906000526020600020905b81548152602001906001019080831161303c575b50505050509050919050565b600061203b762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b61321d565b60606000613090836002613b2f565b61309b906002613b46565b67ffffffffffffffff8111156130b3576130b3613566565b6040519080825280601f01601f1916602001820160405280156130dd576020820181803683370190505b509050600360fc1b816000815181106130f8576130f8613849565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061312757613127613849565b60200101906001600160f81b031916908160001a905350600061314b846002613b2f565b613156906001613b46565b90505b60018111156131ce576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061318a5761318a613849565b1a60f81b8282815181106131a0576131a0613849565b60200101906001600160f81b031916908160001a90535060049490941c936131c781613b59565b9050613159565b508315610bbf5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161038e565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260408120546001600160a01b031680610b325760408051602081018590520160408051601f19818403018152908290526346e2ec9360e01b825261038e91600401613aea565b6060831561329b575081610bbf565b8251156132ab5782518084602001fd5b8160405162461bcd60e51b815260040161038e9190613aea565b6000602082840312156132d757600080fd5b5035919050565b6000602082840312156132f057600080fd5b81356001600160e01b031981168114610bbf57600080fd5b6001600160a01b0381168114611ced57600080fd5b6000806040838503121561333057600080fd5b823561333b81613308565b946020939093013593505050565b6000806040838503121561335c57600080fd5b50508035926020909101359150565b6000806040838503121561337e57600080fd5b82359150602083013561339081613308565b809150509250929050565b6000602082840312156133ad57600080fd5b8135610bbf81613308565b6000806000606084860312156133cd57600080fd5b505081359360208301359350604090920135919050565b6020808252825182820181905260009190848201906040850190845b8181101561341c57835183529284019291840191600101613400565b50909695505050505050565b60008083601f84011261343a57600080fd5b50813567ffffffffffffffff81111561345257600080fd5b6020830191508360208260051b85010111156117d257600080fd5b6000806020838503121561348057600080fd5b823567ffffffffffffffff81111561349757600080fd5b6134a385828601613428565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b8181101561341c5783511515835292840192918401916001016134cb565b6000806000606084860312156134fe57600080fd5b833561350981613308565b95602085013595506040909401359392505050565b6000806000806080858703121561353457600080fd5b84359350602085013561354681613308565b9250604085013561355681613308565b9396929550929360600135925050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171561359f5761359f613566565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156135ce576135ce613566565b604052919050565b6000808284036101008112156135eb57600080fd5b83356135f681613308565b925060e0601f198201121561360a57600080fd5b5061361361357c565b6020840135815260408401356020820152606084013560408201526080840135606082015260a0840135608082015260c084013560a082015260e084013560c0820152809150509250929050565b8015158114611ced57600080fd5b60008060006060848603121561368457600080fd5b83359250602084013561369681613308565b915060408401356136a681613661565b809150509250925092565b600080604083850312156136c457600080fd5b82359150602083013561339081613661565b60005b838110156136f15781810151838201526020016136d9565b50506000910152565b600081518084526137128160208601602086016136d6565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561377b57603f198886030184526137698583516136fa565b9450928501929085019060010161374d565b5092979650505050505050565b60008060008060008060c087890312156137a157600080fd5b86356137ac81613308565b955060208701356137bc81613308565b945060408701359350606087013592506080870135915060a08701356137e181613308565b809150509295509295509295565b6000806040838503121561380257600080fd5b505080516020909101519092909150565b60006020828403121561382557600080fd5b5051919050565b60006020828403121561383e57600080fd5b8151610bbf81613661565b634e487b7160e01b600052603260045260246000fd5b82815260406020820152600061387860408301846136fa565b949350505050565b60006020828403121561389257600080fd5b8151610bbf81613308565b634e487b7160e01b600052601160045260246000fd5b6000600182016138c5576138c561389d565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6001600160a01b039390931683526020830191909152604082015260600190565b81810381811115610b3257610b3261389d565b60008060006060848603121561394a57600080fd5b8351925060208401519150604084015190509250925092565b6000806040838503121561397657600080fd5b82519150602083015161339081613661565b6000808335601e1984360301811261399f57600080fd5b83018035915067ffffffffffffffff8211156139ba57600080fd5b6020019150368190038213156117d257600080fd5b600060208083850312156139e257600080fd5b825167ffffffffffffffff808211156139fa57600080fd5b818501915085601f830112613a0e57600080fd5b815181811115613a2057613a20613566565b8060051b9150613a318483016135a5565b8181529183018401918481019088841115613a4b57600080fd5b938501935b83851015613a6957845182529385019390850190613a50565b98975050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613aad8160178501602088016136d6565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613ade8160288401602088016136d6565b01602801949350505050565b602081526000610bbf60208301846136fa565b634e487b7160e01b600052603160045260246000fd5b60008251613b258184602087016136d6565b9190910192915050565b8082028115828204841417610b3257610b3261389d565b80820180821115610b3257610b3261389d565b600081613b6857613b6861389d565b50600019019056fe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240189c789132bdb3678132848a8dcd780bffd2b1abdce3984c522ac1d8aeb48f05f36f969d660e14559aec53d066903ba87981d0679d31bf1d3793a220e70e02808b35e4a72724550e3953b041d501f29ff9ff417812c2917a203d9c4833b9d1d6f997667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212203c38f75e3ba27803824eb563f69b819489c2a18baa47e62a9b2955c75938038464736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106103535760003560e01c806359047200116101c6578063a217fddf116100f7578063d5e190d011610095578063f2fde38b1161006f578063f2fde38b14610a00578063f5b541a614610a20578063fb7bd3b414610a42578063fc70081014610a6257600080fd5b8063d5e190d0146109c1578063e0997659146109d6578063ed6dd514146109eb57600080fd5b8063b12e4410116100d1578063b12e441014610941578063b1a5d12d14610961578063ca42303114610981578063d547741f146109a157600080fd5b8063a217fddf146108df578063ac8a584a146108f4578063ac9650d81461091457600080fd5b80638456cb591161016457806391d148541161013e57806391d148541461086c578063948060dd1461088c57806396994e37146108ac5780639870d7fe146108bf57600080fd5b80638456cb59146108225780638da5cb5b146108375780638e19aff31461084c57600080fd5b80635d95df8a116101a05780635d95df8a146107ad578063715018a6146107cd5780637d044b43146107e25780637d44828e1461080257600080fd5b806359047200146107335780635bffeb66146107685780635c975abb1461078857600080fd5b806329985e5a116102a05780633f90a08e1161023e578063500d2f6d11610218578063500d2f6d146106985780635257ed67146106b857806354821c21146106f35780635575fba71461071357600080fd5b80633f90a08e1461062b5780634ba0c9b5146106585780634c6aa99c1461067857600080fd5b806330312daa1161027a57806330312daa146105b457806336568abe146105d45780633d03b9da146105f45780633f4ba83a1461061657600080fd5b806329985e5a1461056a5780632af64bd31461057f5780632f2ff15d1461059457600080fd5b80630eadd2441161030d5780631e4e0091116102e75780631e4e0091146104ea578063248a9ca31461050a57806325a890321461052a57806325e1f09f1461054a57600080fd5b80630eadd244146104a35780631316529d146104c35780631de26e16146104d757600080fd5b8062fcf2621461039e57806301ffc9a7146103d85780630253cd7e14610408578063040cf0201461043657806304f3bcec146104565780630cf7505d1461048357600080fd5b3661039957600080516020613bb1833981519152546001600160a01b031633146103975760405163efd4e4e160e01b81523360048201526024015b60405180910390fd5b005b600080fd5b3480156103aa57600080fd5b506103be6103b93660046132c5565b610a82565b604080519283526020830191909152015b60405180910390f35b3480156103e457600080fd5b506103f86103f33660046132de565b610b01565b60405190151581526020016103cf565b34801561041457600080fd5b5061042861042336600461331d565b610b38565b6040519081526020016103cf565b34801561044257600080fd5b50610397610451366004613349565b610bc6565b34801561046257600080fd5b5061046b610c05565b6040516001600160a01b0390911681526020016103cf565b34801561048f57600080fd5b506103f861049e3660046132c5565b610c26565b3480156104af57600080fd5b506104286104be36600461336b565b610c54565b3480156104cf57600080fd5b506001610428565b6103976104e5366004613349565b610c9e565b3480156104f657600080fd5b50610397610505366004613349565b610cd8565b34801561051657600080fd5b506104286105253660046132c5565b610ced565b34801561053657600080fd5b5061042861054536600461339b565b610d0f565b34801561055657600080fd5b506103f861056536600461339b565b610d8f565b34801561057657600080fd5b50610397610e0e565b34801561058b57600080fd5b506103f8610fac565b3480156105a057600080fd5b506103976105af36600461336b565b611103565b3480156105c057600080fd5b506103976105cf3660046133b8565b61111f565b3480156105e057600080fd5b506103976105ef36600461336b565b611159565b34801561060057600080fd5b506106096111d3565b6040516103cf91906133e4565b34801561062257600080fd5b50610397611295565b34801561063757600080fd5b5061064b61064636600461346d565b6112d4565b6040516103cf91906134af565b34801561066457600080fd5b506103976106733660046134e9565b611384565b34801561068457600080fd5b506104286106933660046132c5565b61144a565b3480156106a457600080fd5b506104286106b336600461351e565b611468565b3480156106c457600080fd5b506106d86106d33660046134e9565b6115a7565b604080519384526020840192909252908201526060016103cf565b3480156106ff57600080fd5b5061042861070e36600461339b565b611637565b34801561071f57600080fd5b5061042861072e36600461331d565b6116bf565b34801561073f57600080fd5b5061075361074e3660046135d6565b611709565b604080519283529015156020830152016103cf565b34801561077457600080fd5b5061039761078336600461366f565b6117d9565b34801561079457600080fd5b50600080516020613b918339815191525460ff166103f8565b3480156107b957600080fd5b506103f86107c83660046132c5565b611944565b3480156107d957600080fd5b5061039761195b565b3480156107ee57600080fd5b506104286107fd36600461331d565b611994565b34801561080e57600080fd5b5061042861081d36600461331d565b611a70565b34801561082e57600080fd5b50610397611b00565b34801561084357600080fd5b5061046b611b3d565b34801561085857600080fd5b506103976108673660046136b1565b611b65565b34801561087857600080fd5b506103f861088736600461336b565b611c21565b34801561089857600080fd5b506104286108a736600461339b565b611c59565b6103976108ba3660046134e9565b611c9c565b3480156108cb57600080fd5b506103976108da36600461339b565b611cd5565b3480156108eb57600080fd5b50610428600081565b34801561090057600080fd5b5061039761090f36600461339b565b611cf0565b34801561092057600080fd5b5061093461092f36600461346d565b611d08565b6040516103cf9190613726565b34801561094d57600080fd5b5061046b61095c3660046132c5565b611df6565b34801561096d57600080fd5b5061039761097c366004613788565b611e1d565b34801561098d57600080fd5b5061042861099c36600461339b565b611fc7565b3480156109ad57600080fd5b506103976109bc36600461336b565b61200a565b3480156109cd57600080fd5b50610609612026565b3480156109e257600080fd5b50610609612040565b3480156109f757600080fd5b506106d86120bc565b348015610a0c57600080fd5b50610397610a1b36600461339b565b6120ed565b348015610a2c57600080fd5b50610428600080516020613bf183398151915281565b348015610a4e57600080fd5b50610397610a5d3660046134e9565b61218a565b348015610a6e57600080fd5b50610609610a7d36600461339b565b61221a565b604051627e793160e11b815260048101829052600090819073__$e77f6d4722b46e0b0a57517726dbfd997e$__9062fcf262906024016040805180830381865af4158015610ad4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af891906137ef565b91509150915091565b60006001600160e01b03198216637965db0b60e01b1480610b3257506301ffc9a760e01b6001600160e01b03198316145b92915050565b604051630129e6bf60e11b81526001600160a01b03831660048201526024810182905260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__90630253cd7e906044015b602060405180830381865af4158015610b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbf9190613813565b9392505050565b610bce61229d565b81610bd881610c26565b610bf557604051630f4a6ccd60e21b815260040160405180910390fd5b610c003384846122f0565b505050565b6000600080516020613b718339815191525b546001600160a01b0316919050565b600080610c316124ed565b60009384526005016020526040909220546001600160a01b031690911415919050565b6040516303ab749160e21b8152600481018390526001600160a01b038216602482015260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__90630eadd24490604401610b7e565b610ca661229d565b81610cb081610c26565b610ccd57604051630f4a6ccd60e21b815260040160405180910390fd5b610c00338484612511565b6000610ce3816126bd565b610c0083836126c7565b6000908152600080516020613bd1833981519152602052604090206001015490565b6040516312d4481960e11b81526001600160a01b038216600482015260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__906325a89032906024015b602060405180830381865af4158015610d6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b329190613813565b6040516325e1f09f60e01b81526001600160a01b038216600482015260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__906325e1f09f90602401602060405180830381865af4158015610dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b32919061382c565b6000610e186111d3565b905060005b8151811015610fa8576000828281518110610e3a57610e3a613849565b602002602001015190506000610e5b600080516020613b7183398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd91610ecc91869190605d0161385f565b602060405180830381865afa158015610ee9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0d9190613880565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a150508080610fa0906138b3565b915050610e1d565b5050565b600080610fb76111d3565b905060005b81518110156110fa576000828281518110610fd957610fd9613849565b60200260200101519050610ff8600080516020613b7183398151915290565b600082815260019190910160205260409020546001600160a01b0316600080516020613b71833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a72190602401602060405180830381865afa15801561106a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108e9190613880565b6001600160a01b03161415806110d8575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b156110e7576000935050505090565b50806110f2816138b3565b915050610fbc565b50600191505090565b61110c82610ced565b611115816126bd565b610c008383612727565b33611128611b3d565b6001600160a01b03161461114e5760405162461bcd60e51b815260040161038e906138cc565b610c0083838361279d565b6001600160a01b03811633146111c95760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161038e565b610fa88282612923565b604080516003808252608082019092526060916020820183803683370190505090507121bab93932b731bca1b7b73a3937b63632b960711b8160008151811061121e5761121e613849565b602002602001018181525050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b8160018151811061125857611258613849565b6020026020010181815250506a14995cd95c9d99519d5b9960aa1b8160028151811061128657611286613849565b60200260200101818152505090565b6112ad600080516020613bf183398151915233611c21565b6112ca5760405163a5523ee560e01b815260040160405180910390fd5b6112d2612997565b565b6060818067ffffffffffffffff8111156112f0576112f0613566565b604051908082528060200260200182016040528015611319578160200160208202803683370190505b50915060005b8181101561137c5761134885858381811061133c5761133c613849565b90506020020135611944565b83828151811061135a5761135a613849565b9115156020928302919091019091015280611374816138b3565b91505061131f565b505092915050565b61138c61229d565b611395336129f6565b6113b2576040516330de277560e21b815260040160405180910390fd5b816113bc81610c26565b6113d957604051630f4a6ccd60e21b815260040160405180910390fd5b604051634ba0c9b560e01b815273__$e77f6d4722b46e0b0a57517726dbfd997e$__90634ba0c9b59061141490879087908790600401613901565b60006040518083038186803b15801561142c57600080fd5b505af4158015611440573d6000803e3d6000fd5b5050505050505050565b60006114546124ed565b600092835260070160205250604090205490565b600061147261229d565b61147b336129f6565b611498576040516330de277560e21b815260040160405180910390fd5b846114a281610c26565b6114bf57604051630f4a6ccd60e21b815260040160405180910390fd5b60405163500d2f6d60e01b8152600481018790526001600160a01b038087166024830152851660448201526064810184905273__$e77f6d4722b46e0b0a57517726dbfd997e$__9063500d2f6d90608401602060405180830381865af415801561152d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115519190613813565b91506001600160a01b03808516908616877ff8ca259b4b82670be7501ff56ad1fc9c7cd199d3431e3c502f2c5f86884bc15061158d8688613922565b60405190815260200160405180910390a450949350505050565b600080600073__$e77f6d4722b46e0b0a57517726dbfd997e$__635257ed678787876040518463ffffffff1660e01b81526004016115e793929190613901565b606060405180830381865af4158015611604573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116289190613935565b92509250925093509350939050565b6040516354821c2160e01b81526001600160a01b038216600482015260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__906354821c2190602401606060405180830381865af4158015611692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b69190613935565b50909392505050565b604051635575fba760e01b81526001600160a01b03831660048201526024810182905260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__90635575fba790604401610b7e565b60408051632910ae9d60e01b81526001600160a01b0384166004820152825160248201526020830151604482015290820151606482015260608201516084820152608082015160a482015260a082015160c482015260c082015160e4820152600090819073__$e77f6d4722b46e0b0a57517726dbfd997e$__90632910ae9d90610104016040805180830381865af41580156117a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117cd9190613963565b915091505b9250929050565b336117e2611b3d565b6001600160a01b0316146118085760405162461bcd60e51b815260040161038e906138cc565b611810612a6f565b6001600160a01b0316631eae0893846040518263ffffffff1660e01b815260040161183d91815260200190565b602060405180830381865afa15801561185a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187e919061382c565b61189b57604051631eb3268560e31b815260040160405180910390fd5b816118a46124ed565b60008581526005919091016020526040902080546001600160a01b0319166001600160a01b039290921691909117905580156118f1576118ef836118e66124ed565b60030190612a79565b505b604080518481526001600160a01b0384166020820152821515918101919091527ff776c30df345d55df252bb5181a0c2bb23d601166606790a6f1b938d7e158503906060015b60405180910390a1505050565b6000610b32826119526124ed565b60030190612a85565b33611964611b3d565b6001600160a01b03161461198a5760405162461bcd60e51b815260040161038e906138cc565b6112d26000612a9d565b600061199f336129f6565b6119bc576040516330de277560e21b815260040160405180910390fd5b816119c681610c26565b6119e357604051630f4a6ccd60e21b815260040160405180910390fd5b604051637d044b4360e01b81526001600160a01b03851660048201526024810184905273__$e77f6d4722b46e0b0a57517726dbfd997e$__90637d044b4390604401602060405180830381865af4158015611a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a669190613813565b91505b5092915050565b604051633ea2414760e11b81526001600160a01b03831660048201526024810182905260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__90637d44828e90604401606060405180830381865af4158015611ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af69190613935565b5090949350505050565b611b18600080516020613bf183398151915233611c21565b611b355760405163a5523ee560e01b815260040160405180910390fd5b6112d2612b0e565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa610c17565b33611b6e611b3d565b6001600160a01b031614611b945760405162461bcd60e51b815260040161038e906138cc565b81611b9e81610c26565b611bbb57604051630f4a6ccd60e21b815260040160405180910390fd5b8115611bd357611bcd836118e66124ed565b50611bea565b611be883611bdf6124ed565b60030190612b57565b505b6040805184815283151560208201527f97caf2b3b2f0aa460ca08b20c07f7a43ccf688e2f3b7179f2cf9113fb892bf819101611937565b6000918252600080516020613bd1833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60405163948060dd60e01b81526001600160a01b038216600482015260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__9063948060dd90602401610d4e565b611ca461229d565b611cad336129f6565b611cca576040516330de277560e21b815260040160405180910390fd5b610c00838383612511565b611ced600080516020613bf183398151915282611103565b50565b611ced600080516020613bf18339815191528261200a565b60608167ffffffffffffffff811115611d2357611d23613566565b604051908082528060200260200182016040528015611d5657816020015b6060815260200190600190039081611d415790505b50905060005b82811015611a6957611dc630858584818110611d7a57611d7a613849565b9050602002810190611d8c9190613988565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612b6392505050565b828281518110611dd857611dd8613849565b60200260200101819052508080611dee906138b3565b915050611d5c565b6000611e006124ed565b60009283526005016020525060409020546001600160a01b031690565b600054610100900460ff1615808015611e3d5750600054600160ff909116105b80611e575750303b158015611e57575060005460ff166001145b611eba5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161038e565b6000805460ff191660011790558015611edd576000805461ff0019166101001790555b6000611ee7612b88565b6001600160a01b031603611f485760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b606482015260840161038e565b611f5187612a9d565b611f5a86612bb0565b611f6382612c19565b611f6c87612ca0565b611f7887868686612cc3565b8015611fbe576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b60405163ca42303160e01b81526001600160a01b038216600482015260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__9063ca42303190602401610d4e565b61201382610ced565b61201c816126bd565b610c008383612923565b606061203b6120336124ed565b600301612cdd565b905090565b6040805160028082526060808301845292602083019080368337019050509050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b8160008151811061208e5761208e613849565b6020026020010181815250506a14995cd95c9d99519d5b9960aa1b8160018151811061128657611286613849565b60008060006120c96124ed565b5492506120d46124ed565b6001015491506120e26124ed565b600201549050909192565b336120f6611b3d565b6001600160a01b03161461211c5760405162461bcd60e51b815260040161038e906138cc565b6001600160a01b0381166121815760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161038e565b611ced81612a9d565b61219261229d565b61219b336129f6565b6121b8576040516330de277560e21b815260040160405180910390fd5b816121c281610c26565b6121df57604051630f4a6ccd60e21b815260040160405180910390fd5b604051633edef4ed60e21b815273__$e77f6d4722b46e0b0a57517726dbfd997e$__9063fb7bd3b49061141490879087908790600401613901565b604051630fc7008160e41b81526001600160a01b038216600482015260609073__$e77f6d4722b46e0b0a57517726dbfd997e$__9063fc70081090602401600060405180830381865af4158015612275573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b3291908101906139cf565b600080516020613b918339815191525460ff16156112d25760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161038e565b806000036123115760405163162908e360e11b815260040160405180910390fd5b612319612ce8565b60405163862fd6e560e01b81526001600160a01b038581166004830152919091169063862fd6e590602401602060405180830381865afa158015612361573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612385919061382c565b156123a357604051631f6d627d60e11b815260040160405180910390fd5b6123ab612ce8565b604051639519832b60e01b8152600481018490526001600160a01b0385811660248301529190911690639519832b906044016020604051808303816000875af11580156123fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124209190613813565b5060405163148b8b9d60e11b815260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__90632917173a9061245f90879087908790600401613901565b602060405180830381865af415801561247c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a09190613813565b60408051858152602081018390529192506001600160a01b038616917fc3ded2be7db21b1af963f267d27750e4a15f174547d88b886b9bda43e2c6fa32910160405180910390a250505050565b7f53832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a831790565b80158061256457506125586125246124ed565b60008481526005919091016020526040902054600080516020613bb1833981519152546001600160a01b0390811691161490565b80156125645750348114155b156125825760405163162908e360e11b815260040160405180910390fd5b61258a612ce8565b6001600160a01b031663d1cc99766040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125eb919061382c565b15612609576040516319a90b2f60e21b815260040160405180910390fd5b604051631d64487f60e31b815273__$e77f6d4722b46e0b0a57517726dbfd997e$__9063eb2243f89061264490869086908690600401613901565b60006040518083038186803b15801561265c57600080fd5b505af4158015612670573d6000803e3d6000fd5b505060408051858152602081018590526001600160a01b03871693507f19dacbf83c5de6658e14cbf7bcae5c15eca2eedecf1c66fbca928e4d351bea0f92500160405180910390a2505050565b611ced8133612cf2565b60006126d283610ced565b6000848152600080516020613bd18339815191526020526040808220600101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6127318282611c21565b610fa8576000828152600080516020613bd1833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b826000036127be57604051630821f57960e31b815260040160405180910390fd5b6127108211156127e1576040516370a4af3d60e01b815260040160405180910390fd5b61271081111561280457604051631da7276f60e01b815260040160405180910390fd5b61280c6124ed565b54831461285f577fd3353684d64f1c80498433d8407c96e6bbeb1ec88b6200ec97d2c910fdbd0da461283c6124ed565b5460408051918252602082018690520160405180910390a18261285d6124ed565b555b6128676124ed565b6001015482146128c3577f651b17c8e9402610e6210cfaa5b252d2186f8a16adf58c9c0fd5793bc4ea9b1f61289a6124ed565b6001015460408051918252602082018590520160405180910390a1816128be6124ed565b600101555b6128cb6124ed565b600201548114610c0057806128de6124ed565b600201557f7e8f030f9238551b066874b952f0c6ba811ba426ab231ba4825421d5d8f5cd9561290b6124ed565b60020154604080519182526020820184905201611937565b61292d8282611c21565b15610fa8576000828152600080516020613bd1833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61299f612d56565b600080516020613b91833981519152805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080612a01612040565b905060005b8151811015612a6557612a31828281518110612a2457612a24613849565b6020026020010151612dac565b6001600160a01b0316846001600160a01b031603612a53575060019392505050565b80612a5d816138b3565b915050612a06565b5060009392505050565b600061203b612db7565b6000610bbf8383612dd7565b60008181526001830160205260408120541515610bbf565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b612b1661229d565b600080516020613b91833981519152805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336129d9565b6000610bbf8383612e26565b6060610bbf8383604051806060016040528060278152602001613c1160279139612f19565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610c17565b600080516020613b71833981519152546001600160a01b031615612be7576040516304b79d6360e51b815260040160405180910390fd5b80600080516020613b718339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b600080516020613bb1833981519152546001600160a01b031615612c8b5760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a20416c726561647920696e697469616c696044820152621e995960ea1b606482015260840161038e565b80600080516020613bb1833981519152612bf8565b612cab600082612ff6565b611ced600080516020613bf183398151915282612727565b612ccc84612a9d565b612cd783838361279d565b50505050565b6060610b3282613000565b600061203b61305c565b612cfc8282611c21565b610fa857612d14816001600160a01b03166014613081565b612d1f836020613081565b604051602001612d30929190613a75565b60408051601f198184030181529082905262461bcd60e51b825261038e91600401613aea565b600080516020613b918339815191525460ff166112d25760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161038e565b6000610b328261321d565b600061203b7121bab93932b731bca1b7b73a3937b63632b960711b61321d565b6000818152600183016020526040812054612e1e57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b32565b506000610b32565b60008181526001830160205260408120548015612f0f576000612e4a600183613922565b8554909150600090612e5e90600190613922565b9050818114612ec3576000866000018281548110612e7e57612e7e613849565b9060005260206000200154905080876000018481548110612ea157612ea1613849565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612ed457612ed4613afd565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610b32565b6000915050610b32565b60606001600160a01b0384163b612f815760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161038e565b600080856001600160a01b031685604051612f9c9190613b13565b600060405180830381855af49150503d8060008114612fd7576040519150601f19603f3d011682016040523d82523d6000602084013e612fdc565b606091505b5091509150612fec82828661328c565b9695505050505050565b610fa88282612727565b60608160000180548060200260200160405190810160405280929190818152602001828054801561305057602002820191906000526020600020905b81548152602001906001019080831161303c575b50505050509050919050565b600061203b762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b61321d565b60606000613090836002613b2f565b61309b906002613b46565b67ffffffffffffffff8111156130b3576130b3613566565b6040519080825280601f01601f1916602001820160405280156130dd576020820181803683370190505b509050600360fc1b816000815181106130f8576130f8613849565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061312757613127613849565b60200101906001600160f81b031916908160001a905350600061314b846002613b2f565b613156906001613b46565b90505b60018111156131ce576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061318a5761318a613849565b1a60f81b8282815181106131a0576131a0613849565b60200101906001600160f81b031916908160001a90535060049490941c936131c781613b59565b9050613159565b508315610bbf5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161038e565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260408120546001600160a01b031680610b325760408051602081018590520160408051601f19818403018152908290526346e2ec9360e01b825261038e91600401613aea565b6060831561329b575081610bbf565b8251156132ab5782518084602001fd5b8160405162461bcd60e51b815260040161038e9190613aea565b6000602082840312156132d757600080fd5b5035919050565b6000602082840312156132f057600080fd5b81356001600160e01b031981168114610bbf57600080fd5b6001600160a01b0381168114611ced57600080fd5b6000806040838503121561333057600080fd5b823561333b81613308565b946020939093013593505050565b6000806040838503121561335c57600080fd5b50508035926020909101359150565b6000806040838503121561337e57600080fd5b82359150602083013561339081613308565b809150509250929050565b6000602082840312156133ad57600080fd5b8135610bbf81613308565b6000806000606084860312156133cd57600080fd5b505081359360208301359350604090920135919050565b6020808252825182820181905260009190848201906040850190845b8181101561341c57835183529284019291840191600101613400565b50909695505050505050565b60008083601f84011261343a57600080fd5b50813567ffffffffffffffff81111561345257600080fd5b6020830191508360208260051b85010111156117d257600080fd5b6000806020838503121561348057600080fd5b823567ffffffffffffffff81111561349757600080fd5b6134a385828601613428565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b8181101561341c5783511515835292840192918401916001016134cb565b6000806000606084860312156134fe57600080fd5b833561350981613308565b95602085013595506040909401359392505050565b6000806000806080858703121561353457600080fd5b84359350602085013561354681613308565b9250604085013561355681613308565b9396929550929360600135925050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171561359f5761359f613566565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156135ce576135ce613566565b604052919050565b6000808284036101008112156135eb57600080fd5b83356135f681613308565b925060e0601f198201121561360a57600080fd5b5061361361357c565b6020840135815260408401356020820152606084013560408201526080840135606082015260a0840135608082015260c084013560a082015260e084013560c0820152809150509250929050565b8015158114611ced57600080fd5b60008060006060848603121561368457600080fd5b83359250602084013561369681613308565b915060408401356136a681613661565b809150509250925092565b600080604083850312156136c457600080fd5b82359150602083013561339081613661565b60005b838110156136f15781810151838201526020016136d9565b50506000910152565b600081518084526137128160208601602086016136d6565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561377b57603f198886030184526137698583516136fa565b9450928501929085019060010161374d565b5092979650505050505050565b60008060008060008060c087890312156137a157600080fd5b86356137ac81613308565b955060208701356137bc81613308565b945060408701359350606087013592506080870135915060a08701356137e181613308565b809150509295509295509295565b6000806040838503121561380257600080fd5b505080516020909101519092909150565b60006020828403121561382557600080fd5b5051919050565b60006020828403121561383e57600080fd5b8151610bbf81613661565b634e487b7160e01b600052603260045260246000fd5b82815260406020820152600061387860408301846136fa565b949350505050565b60006020828403121561389257600080fd5b8151610bbf81613308565b634e487b7160e01b600052601160045260246000fd5b6000600182016138c5576138c561389d565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6001600160a01b039390931683526020830191909152604082015260600190565b81810381811115610b3257610b3261389d565b60008060006060848603121561394a57600080fd5b8351925060208401519150604084015190509250925092565b6000806040838503121561397657600080fd5b82519150602083015161339081613661565b6000808335601e1984360301811261399f57600080fd5b83018035915067ffffffffffffffff8211156139ba57600080fd5b6020019150368190038213156117d257600080fd5b600060208083850312156139e257600080fd5b825167ffffffffffffffff808211156139fa57600080fd5b818501915085601f830112613a0e57600080fd5b815181811115613a2057613a20613566565b8060051b9150613a318483016135a5565b8181529183018401918481019088841115613a4b57600080fd5b938501935b83851015613a6957845182529385019390850190613a50565b98975050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613aad8160178501602088016136d6565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613ade8160288401602088016136d6565b01602801949350505050565b602081526000610bbf60208301846136fa565b634e487b7160e01b600052603160045260246000fd5b60008251613b258184602087016136d6565b9190910192915050565b8082028115828204841417610b3257610b3261389d565b80820180821115610b3257610b3261389d565b600081613b6857613b6861389d565b50600019019056fe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240189c789132bdb3678132848a8dcd780bffd2b1abdce3984c522ac1d8aeb48f05f36f969d660e14559aec53d066903ba87981d0679d31bf1d3793a220e70e02808b35e4a72724550e3953b041d501f29ff9ff417812c2917a203d9c4833b9d1d6f997667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212203c38f75e3ba27803824eb563f69b819489c2a18baa47e62a9b2955c75938038464736f6c63430008130033",
  "libraries": {
    "DepositManagementLogic": "0x9fa1EDCC47b75831773Eb969f55b8bFd770aba9c"
  },
  "implementation": "0xC4e84981dD3D4e00AbdB73d4438C742b8cE4834a",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptedContracts()": {
        "details": "The contact name listed in this method is also needed to be listed `requiredContracts` method."
      },
      "addDepositAmount(address,bytes32,uint256)": {
        "details": "Adds deposit amount.",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "addOperator(address)": {
        "params": {
          "admin": "The address of the new admin"
        }
      },
      "calculateCoverage(address,(bytes32,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "params": {
          "_additionalFunds": "Additional funds for calculating the coverage",
          "_user": "User's address"
        },
        "returns": {
          "coverage": "The rate of collateral used",
          "isInsufficientDepositAmount": "The boolean if the lent amount in the selected currency is insufficient for the deposit amount or not"
        }
      },
      "calculateLiquidationFees(uint256)": {
        "params": {
          "_amount": "Liquidation amount"
        },
        "returns": {
          "liquidatorFee": "Liquidation fee amount received by liquidators",
          "protocolFee": "Liquidation fee amount received by protocol"
        }
      },
      "deposit(bytes32,uint256)": {
        "details": "Deposits funds by the caller into collateral.",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32"
        }
      },
      "depositFrom(address,bytes32,uint256)": {
        "details": "Deposits funds by the `from` into collateral.",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32",
          "_from": "user's address"
        }
      },
      "executeForcedReset(address,bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "getBorrowableAmount(address,bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "_0": "amount The borrowable amount"
        }
      },
      "getCollateralAmount(address,bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "amount": "The collateral amount"
        }
      },
      "getCollateralCurrencies()": {
        "returns": {
          "_0": "Array of the currency accepted as collateral"
        }
      },
      "getCoverage(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The rate of collateral used"
        }
      },
      "getDepositAmount(address,bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "_0": "The deposited amount"
        }
      },
      "getLiquidationAmount(address,bytes32,uint256)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "liquidationAmount": "The the amount to be liquidated"
        }
      },
      "getLiquidationConfiguration()": {
        "details": "Gets the liquidation configuration",
        "returns": {
          "liquidationProtocolFeeRate": "The liquidation fee received by liquidators",
          "liquidationThresholdRate": "The liquidation threshold rate",
          "liquidatorFeeRate": "The liquidation protocol fee received by protocol"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTokenAddress(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The token contract address"
        }
      },
      "getTotalCollateralAmount(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "totalCollateralAmount": "The total collateral amount in the base currency"
        }
      },
      "getTotalDepositAmount(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The total deposited amount"
        }
      },
      "getTotalUnusedCollateralAmount(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The total amount of unused collateral"
        }
      },
      "getUsedCurrencies(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The currency names in bytes32"
        }
      },
      "getWithdrawableCollateral(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "Maximum amount of ETH that can be withdrawn"
        }
      },
      "getWithdrawableCollateral(bytes32,address)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "_0": "Maximum amount of the selected currency that can be withdrawn"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,uint256,uint256,uint256,address)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController.",
        "params": {
          "_liquidationProtocolFeeRate": "The liquidation fee rate received by protocol",
          "_liquidationThresholdRate": "The liquidation threshold rate",
          "_liquidatorFeeRate": "The liquidation fee rate received by liquidators",
          "_nativeToken": "The address of wrapped token of native currency",
          "_owner": "The address of the contract owner",
          "_resolver": "The address of the Address Resolver contract"
        }
      },
      "isCollateral(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The boolean if the currency has been registered or not"
        }
      },
      "isCollateral(bytes32[])": {
        "params": {
          "_ccys": "Currency name list in bytes32"
        },
        "returns": {
          "isCollateralCurrencies": "Array of the boolean if the currency has been registered or not"
        }
      },
      "isCovered(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The boolean if the collateral has sufficient coverage or not"
        }
      },
      "isRegisteredCurrency(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The boolean if the currency has been registered or not"
        }
      },
      "multicall(bytes[])": {
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "registerCurrency(bytes32,address,bool)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_isCollateral": "Boolean if the selected currency is acceptable as collateral.",
          "_tokenAddress": "Token contract address of the selected currency"
        }
      },
      "removeDepositAmount(address,bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to withdraw.",
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "removeOperator(address)": {
        "params": {
          "admin": "The address of the admin to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "requiredContracts()": {
        "details": "The contract name list is in `./libraries/Contracts.sol`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setRoleAdmin(bytes32,bytes32)": {
        "details": "By default the admin role for all roles is `DEFAULT_ADMIN_ROLE`.",
        "params": {
          "adminRole": "The admin role",
          "role": "The role to be managed by the admin role"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferFrom(bytes32,address,address,uint256)": {
        "params": {
          "_amount": "Amount of funds to sent",
          "_ccy": "Currency name in bytes32",
          "_from": "Sender's address",
          "_to": "Receiver's address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCurrency(bytes32,bool)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_isCollateral": "Boolean if the selected currency is acceptable as collateral."
        }
      },
      "updateLiquidationConfiguration(uint256,uint256,uint256)": {
        "details": "Update the liquidation configuration",
        "params": {
          "_liquidationProtocolFeeRate": "The liquidation fee rate received by protocol",
          "_liquidationThresholdRate": "The liquidation threshold rate",
          "_liquidatorFeeRate": "The liquidation fee rate received by liquidators"
        }
      },
      "withdraw(bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to withdraw.",
          "_ccy": "Currency name in bytes32"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptedContracts()": {
        "notice": "Returns contract names that can call this contract."
      },
      "addOperator(address)": {
        "notice": "Adds a new admin as Operator"
      },
      "calculateCoverage(address,(bytes32,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "Calculates the collateral rate used when additional funds are had by the user."
      },
      "calculateLiquidationFees(uint256)": {
        "notice": "Gets the actual fee amounts calculated by rates."
      },
      "executeForcedReset(address,bytes32)": {
        "notice": "Forces a reset of the user's deposit amount."
      },
      "getBorrowableAmount(address,bytes32)": {
        "notice": "Gets the borrowable amount in the selected currency."
      },
      "getCollateralAmount(address,bytes32)": {
        "notice": "Gets the total collateral amount of the selected currency."
      },
      "getCollateralCurrencies()": {
        "notice": "Gets the currencies accepted as collateral"
      },
      "getCoverage(address)": {
        "notice": "Gets the rate of collateral used."
      },
      "getDepositAmount(address,bytes32)": {
        "notice": "Gets the amount deposited in the user's collateral."
      },
      "getLiquidationAmount(address,bytes32,uint256)": {
        "notice": "Gets the amount to be liquidated."
      },
      "getTokenAddress(bytes32)": {
        "notice": "Gets the token contract address"
      },
      "getTotalCollateralAmount(address)": {
        "notice": "Gets the total collateral amount."
      },
      "getTotalDepositAmount(bytes32)": {
        "notice": "Gets the total amount deposited of the selected currency"
      },
      "getTotalUnusedCollateralAmount(address)": {
        "notice": "Gets the total amount of the unused collateral in the base currency"
      },
      "getUsedCurrencies(address)": {
        "notice": "Gets the currencies that the user used as collateral."
      },
      "getWithdrawableCollateral(address)": {
        "notice": "Gets the maximum amount of the base currency that can be withdrawn from user collateral."
      },
      "getWithdrawableCollateral(bytes32,address)": {
        "notice": "Gets the maximum amount of the selected currency that can be withdrawn from user collateral."
      },
      "initialize(address,address,uint256,uint256,uint256,address)": {
        "notice": "Initializes the contract."
      },
      "isCollateral(bytes32)": {
        "notice": "Gets if the currency is acceptable as collateral"
      },
      "isCollateral(bytes32[])": {
        "notice": "Gets if the currencies are acceptable as collateral"
      },
      "isCovered(address)": {
        "notice": "Gets if the collateral has enough coverage."
      },
      "isRegisteredCurrency(bytes32)": {
        "notice": "Gets if the currency has been registered"
      },
      "pause()": {
        "notice": "Pauses the token vault."
      },
      "registerCurrency(bytes32,address,bool)": {
        "notice": "Registers new currency and sets if it is acceptable as collateral."
      },
      "removeDepositAmount(address,bytes32,uint256)": {
        "notice": "Removes deposit amount."
      },
      "removeOperator(address)": {
        "notice": "Removes an admin as Operator"
      },
      "requiredContracts()": {
        "notice": "Returns the contract names used in this contract."
      },
      "setRoleAdmin(bytes32,bytes32)": {
        "notice": "Sets the role as admin of a specific role."
      },
      "transferFrom(bytes32,address,address,uint256)": {
        "notice": "Transfers the token from sender to receiver."
      },
      "unpause()": {
        "notice": "Unpauses the token vault."
      },
      "updateCurrency(bytes32,bool)": {
        "notice": "Updates the currency if it is acceptable as collateral."
      },
      "updateLiquidationConfiguration(uint256,uint256,uint256)": {
        "notice": "Triggers only be contract owner"
      },
      "withdraw(bytes32,uint256)": {
        "notice": "Withdraws funds by the caller from unused collateral."
      }
    },
    "notice": "Implements the management of the token in each currency for users. This contract manages the following data related to tokens. - Deposited token amount as the collateral - Parameters related to the liquidation   - Liquidation threshold rate   - Liquidation fee rate received by protocol   - Liquidation fee rate received by liquidators To address a currency as collateral, it must be registered using `registerCurrency` method in this contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 995,
        "contract": "contracts/protocol/TokenVault.sol:TokenVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 998,
        "contract": "contracts/protocol/TokenVault.sol:TokenVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}