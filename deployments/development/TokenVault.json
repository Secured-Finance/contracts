{
  "address": "0x024Dfce8A1A7E588F157A3c13cD48D8F5A29ECC5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "CallerNotBaseCurrency",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCurrency",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLiquidationProtocolFeeRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLiquidationThresholdRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLiquidatorFeeRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MarketTerminated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "MissingAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAcceptedContracts",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedemptionIsRequired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ResolverAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnregisteredCurrency",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "AutoLiquidationThresholdRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isCollateral",
          "type": "bool"
        }
      ],
      "name": "CurrencyRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isCollateral",
          "type": "bool"
        }
      ],
      "name": "CurrencyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "LiquidationProtocolFeeRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "LiquidatorFeeRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addDepositAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "ccy",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "workingLendOrdersAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "workingBorrowOrdersAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILendingMarketController.AdditionalFunds",
          "name": "_additionalFunds",
          "type": "tuple"
        }
      ],
      "name": "calculateCoverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "coverage",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isInsufficientDepositAmount",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateLiquidationFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidatorFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "executeForcedReset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralCurrencies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getCoverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "coverage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_liquidationCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationAmountMaximum",
          "type": "uint256"
        }
      ],
      "name": "getLiquidationAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidationAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidatorFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidationConfiguration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationProtocolFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidatorFeeRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCollateralAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getTotalDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUnusedCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUsedCurrencies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getWithdrawableCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getWithdrawableCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationProtocolFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidatorFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nativeToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_ccys",
          "type": "bytes32[]"
        }
      ],
      "name": "isCollateral",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "isCollateralCurrencies",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "isCollateral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isCovered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "isRegisteredCurrency",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isCollateral",
          "type": "bool"
        }
      ],
      "name": "registerCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeDepositAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "untransferredAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_isCollateral",
          "type": "bool"
        }
      ],
      "name": "updateCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationProtocolFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidatorFeeRate",
          "type": "uint256"
        }
      ],
      "name": "updateLiquidationConfiguration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2b8f6689ca6ffcba9809d91901712d1dd448aeebd3fc85b07903bff651fd36ae",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x894058E10C870DB83bE405F17983fb2feE71615e",
    "transactionIndex": 6,
    "gasUsed": "2798722",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xfbd5f324760a5a73b5d8e07bcb54cf24c1c44907daac74ac82a1172628c4c4d9",
    "transactionHash": "0x2b8f6689ca6ffcba9809d91901712d1dd448aeebd3fc85b07903bff651fd36ae",
    "logs": [],
    "blockNumber": 4319390,
    "cumulativeGasUsed": "8636927",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "1399b139f3dcd64cfe268917bffdbfb5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerNotBaseCurrency\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCurrency\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLiquidationProtocolFeeRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLiquidationThresholdRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLiquidatorFeeRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketTerminated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"MissingAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAcceptedContracts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedemptionIsRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ResolverAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnregisteredCurrency\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"AutoLiquidationThresholdRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCollateral\",\"type\":\"bool\"}],\"name\":\"CurrencyRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCollateral\",\"type\":\"bool\"}],\"name\":\"CurrencyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"LiquidationProtocolFeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"LiquidatorFeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"workingLendOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"workingBorrowOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendingMarketController.AdditionalFunds\",\"name\":\"_additionalFunds\",\"type\":\"tuple\"}],\"name\":\"calculateCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coverage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInsufficientDepositAmount\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateLiquidationFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidatorFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"executeForcedReset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralCurrencies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coverage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_liquidationCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationAmountMaximum\",\"type\":\"uint256\"}],\"name\":\"getLiquidationAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidatorFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidationConfiguration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationProtocolFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidatorFeeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateralAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getTotalDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUnusedCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUsedCurrencies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationProtocolFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidatorFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nativeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_ccys\",\"type\":\"bytes32[]\"}],\"name\":\"isCollateral\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"isCollateralCurrencies\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"isCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isCovered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"isRegisteredCurrency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isCollateral\",\"type\":\"bool\"}],\"name\":\"registerCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"untransferredAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isCollateral\",\"type\":\"bool\"}],\"name\":\"updateCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationProtocolFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidatorFeeRate\",\"type\":\"uint256\"}],\"name\":\"updateLiquidationConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptedContracts()\":{\"details\":\"The contact name listed in this method is also needed to be listed `requiredContracts` method.\"},\"addDepositAmount(address,bytes32,uint256)\":{\"details\":\"Adds deposit amount.\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"calculateCoverage(address,(bytes32,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"_additionalFunds\":\"Additional funds for calculating the coverage\",\"_user\":\"User's address\"},\"returns\":{\"coverage\":\"The rate of collateral used\",\"isInsufficientDepositAmount\":\"The boolean if the lent amount in the selected currency is insufficient for the deposit amount or not\"}},\"calculateLiquidationFees(uint256)\":{\"params\":{\"_amount\":\"Liquidation amount\"},\"returns\":{\"liquidatorFee\":\"Liquidation fee amount received by liquidators\",\"protocolFee\":\"Liquidation fee amount received by protocol\"}},\"deposit(bytes32,uint256)\":{\"details\":\"Deposits funds by the caller into collateral.\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\"}},\"depositFrom(address,bytes32,uint256)\":{\"details\":\"Deposits funds by the `from` into collateral.\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\",\"_from\":\"user's address\"}},\"executeForcedReset(address,bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"getCollateralAmount(address,bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"amount\":\"The collateral amount\"}},\"getCollateralCurrencies()\":{\"returns\":{\"_0\":\"Array of the currency accepted as collateral\"}},\"getCoverage(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"coverage\":\"The rate of collateral used\"}},\"getDepositAmount(address,bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The deposited amount\"}},\"getLiquidationAmount(address,bytes32,uint256)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"liquidationAmount\":\"The the amount to be liquidated\"}},\"getLiquidationConfiguration()\":{\"details\":\"Gets the liquidation configuration\",\"returns\":{\"liquidationProtocolFeeRate\":\"The liquidation fee received by liquidators\",\"liquidationThresholdRate\":\"The liquidation threshold rate\",\"liquidatorFeeRate\":\"The liquidation protocol fee received by protocol\"}},\"getTokenAddress(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The token contract address\"}},\"getTotalCollateralAmount(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"totalCollateralAmount\":\"The total collateral amount in ETH\"}},\"getTotalDepositAmount(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The total deposited amount\"}},\"getUnusedCollateral(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The total amount of unused collateral\"}},\"getUsedCurrencies(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The currency names in bytes32\"}},\"getWithdrawableCollateral(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"Maximum amount of ETH that can be withdrawn\"}},\"getWithdrawableCollateral(bytes32,address)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"Maximum amount of the selected currency that can be withdrawn\"}},\"initialize(address,address,uint256,uint256,uint256,address)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController.\",\"params\":{\"_liquidationProtocolFeeRate\":\"The liquidation fee rate received by protocol\",\"_liquidationThresholdRate\":\"The liquidation threshold rate\",\"_liquidatorFeeRate\":\"The liquidation fee rate received by liquidators\",\"_nativeToken\":\"The address of wrapped token of native currency\",\"_owner\":\"The address of the contract owner\",\"_resolver\":\"The address of the Address Resolver contract\"}},\"isCollateral(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The boolean if the currency has been registered or not\"}},\"isCollateral(bytes32[])\":{\"params\":{\"_ccys\":\"Currency name list in bytes32\"},\"returns\":{\"isCollateralCurrencies\":\"Array of the boolean if the currency has been registered or not\"}},\"isCovered(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The boolean if the collateral has sufficient coverage or not\"}},\"isRegisteredCurrency(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The boolean if the currency has been registered or not\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"registerCurrency(bytes32,address,bool)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_isCollateral\":\"Boolean if the selected currency is acceptable as collateral.\",\"_tokenAddress\":\"Token contract address of the selected currency\"}},\"removeDepositAmount(address,bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to withdraw.\",\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requiredContracts()\":{\"details\":\"The contract name list is in `./libraries/Contracts.sol`.\"},\"transferFrom(bytes32,address,address,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to sent\",\"_ccy\":\"Currency name in bytes32\",\"_from\":\"Sender's address\",\"_to\":\"Receiver's address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCurrency(bytes32,bool)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_isCollateral\":\"Boolean if the selected currency is acceptable as collateral.\"}},\"updateLiquidationConfiguration(uint256,uint256,uint256)\":{\"details\":\"Update the liquidation configuration\",\"params\":{\"_liquidationProtocolFeeRate\":\"The liquidation fee rate received by protocol\",\"_liquidationThresholdRate\":\"The liquidation threshold rate\",\"_liquidatorFeeRate\":\"The liquidation fee rate received by liquidators\"}},\"withdraw(bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to withdraw.\",\"_ccy\":\"Currency name in bytes32\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptedContracts()\":{\"notice\":\"Returns contract names that can call this contract.\"},\"calculateCoverage(address,(bytes32,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Calculates the collateral rate used when additional funds are had by the user.\"},\"calculateLiquidationFees(uint256)\":{\"notice\":\"Gets the actual fee amounts calculated by rates.\"},\"executeForcedReset(address,bytes32)\":{\"notice\":\"Forces a reset of the user's deposit amount.\"},\"getCollateralAmount(address,bytes32)\":{\"notice\":\"Gets the total collateral amount of the selected currency.\"},\"getCollateralCurrencies()\":{\"notice\":\"Gets the currencies accepted as collateral\"},\"getCoverage(address)\":{\"notice\":\"Gets the rate of collateral used.\"},\"getDepositAmount(address,bytes32)\":{\"notice\":\"Gets the amount deposited in the user's collateral.\"},\"getLiquidationAmount(address,bytes32,uint256)\":{\"notice\":\"Gets the amount to be liquidated.\"},\"getTokenAddress(bytes32)\":{\"notice\":\"Gets the token contract address\"},\"getTotalCollateralAmount(address)\":{\"notice\":\"Gets the total collateral amount.\"},\"getTotalDepositAmount(bytes32)\":{\"notice\":\"Gets the total amount deposited of the selected currency\"},\"getUnusedCollateral(address)\":{\"notice\":\"Gets the total amount of the unused collateral\"},\"getUsedCurrencies(address)\":{\"notice\":\"Gets the currencies that the user used as collateral.\"},\"getWithdrawableCollateral(address)\":{\"notice\":\"Gets the maximum amount of ETH that can be withdrawn from user collateral.\"},\"getWithdrawableCollateral(bytes32,address)\":{\"notice\":\"Gets the maximum amount of the selected currency that can be withdrawn from user collateral.\"},\"initialize(address,address,uint256,uint256,uint256,address)\":{\"notice\":\"Initializes the contract.\"},\"isCollateral(bytes32)\":{\"notice\":\"Gets if the currency is acceptable as collateral\"},\"isCollateral(bytes32[])\":{\"notice\":\"Gets if the currencies are acceptable as collateral\"},\"isCovered(address)\":{\"notice\":\"Gets if the collateral has enough coverage.\"},\"isRegisteredCurrency(bytes32)\":{\"notice\":\"Gets if the currency has been registered\"},\"pauseVault()\":{\"notice\":\"Pauses the token vault.\"},\"registerCurrency(bytes32,address,bool)\":{\"notice\":\"Registers new currency and sets if it is acceptable as collateral.\"},\"removeDepositAmount(address,bytes32,uint256)\":{\"notice\":\"Removes deposit amount.\"},\"requiredContracts()\":{\"notice\":\"Returns the contract names used in this contract.\"},\"transferFrom(bytes32,address,address,uint256)\":{\"notice\":\"Transfers the token from sender to receiver.\"},\"unpauseVault()\":{\"notice\":\"Unpauses the token vault.\"},\"updateCurrency(bytes32,bool)\":{\"notice\":\"Updates the currency if it is acceptable as collateral.\"},\"updateLiquidationConfiguration(uint256,uint256,uint256)\":{\"notice\":\"Triggers only be contract owner\"},\"withdraw(bytes32,uint256)\":{\"notice\":\"Withdraws funds by the caller from unused collateral.\"}},\"notice\":\"Implements the management of the token in each currency for users. This contract manages the following data related to tokens. - Deposited token amount as the collateral - Parameters related to the liquidation   - Liquidation threshold rate   - Liquidation fee rate received by protocol   - Liquidation fee rate received by liquidators To address a currency as collateral, it must be registered using `registerCurrency` method in this contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/TokenVault.sol\":\"TokenVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dependencies/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Chainlink Contracts v0.4.0 (v0.8/interfaces/AggregatorV3Interface.sol)\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x81b0c18c07c8c031d5b34e4e41d2451b836355aad1b3c04c26578c92f73585f9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) ||\\n                (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(\\n            !_initializing && _initialized < version,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x47b358037bd02d2d68ae2f5685cf1f30af9d60de496258849b69a751a2ffdcde\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x21dc48f54af2ac9288ae3be6feb098ce4389a9392e52aa7056fab5f8b5a5e232\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/protocol/TokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// dependencies\\nimport {EnumerableSet} from \\\"../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n// libraries\\nimport {Contracts} from \\\"./libraries/Contracts.sol\\\";\\nimport {Constants} from \\\"./libraries/Constants.sol\\\";\\nimport {TransferHelper} from \\\"./libraries/TransferHelper.sol\\\";\\nimport {DepositManagementLogic} from \\\"./libraries/logics/DepositManagementLogic.sol\\\";\\n// interfaces\\nimport {ITokenVault} from \\\"./interfaces/ITokenVault.sol\\\";\\nimport {ILendingMarketController} from \\\"./interfaces/ILendingMarketController.sol\\\";\\n// mixins\\nimport {MixinAddressResolver} from \\\"./mixins/MixinAddressResolver.sol\\\";\\nimport {MixinLiquidationConfiguration} from \\\"./mixins/MixinLiquidationConfiguration.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"./types/ProtocolTypes.sol\\\";\\n// utils\\nimport {Ownable} from \\\"./utils/Ownable.sol\\\";\\nimport {Pausable} from \\\"./utils/Pausable.sol\\\";\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\n// storages\\nimport {TokenVaultStorage as Storage} from \\\"./storages/TokenVaultStorage.sol\\\";\\n\\n/**\\n * @notice Implements the management of the token in each currency for users.\\n *\\n * This contract manages the following data related to tokens.\\n * - Deposited token amount as the collateral\\n * - Parameters related to the liquidation\\n *   - Liquidation threshold rate\\n *   - Liquidation fee rate received by protocol\\n *   - Liquidation fee rate received by liquidators\\n *\\n * To address a currency as collateral, it must be registered using `registerCurrency` method in this contract.\\n */\\ncontract TokenVault is\\n    ITokenVault,\\n    MixinLiquidationConfiguration,\\n    MixinAddressResolver,\\n    Pausable,\\n    Proxyable\\n{\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    /**\\n     * @notice Modifier to check if currency hasn't been registered yet\\n     * @param _ccy Currency name in bytes32\\n     */\\n    modifier onlyRegisteredCurrency(bytes32 _ccy) {\\n        if (!isRegisteredCurrency(_ccy)) revert UnregisteredCurrency();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\\n     * @param _owner The address of the contract owner\\n     * @param _resolver The address of the Address Resolver contract\\n     * @param _liquidationThresholdRate The liquidation threshold rate\\n     * @param _liquidationProtocolFeeRate The liquidation fee rate received by protocol\\n     * @param _liquidatorFeeRate The liquidation fee rate received by liquidators\\n     * @param _nativeToken The address of wrapped token of native currency\\n     */\\n    function initialize(\\n        address _owner,\\n        address _resolver,\\n        uint256 _liquidationThresholdRate,\\n        uint256 _liquidationProtocolFeeRate,\\n        uint256 _liquidatorFeeRate,\\n        address _nativeToken\\n    ) public initializer onlyProxy {\\n        _transferOwnership(_owner);\\n        registerAddressResolver(_resolver);\\n\\n        TransferHelper.initialize(_nativeToken);\\n        MixinLiquidationConfiguration._initialize(\\n            _owner,\\n            _liquidationThresholdRate,\\n            _liquidationProtocolFeeRate,\\n            _liquidatorFeeRate\\n        );\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](3);\\n        contracts[0] = Contracts.CURRENCY_CONTROLLER;\\n        contracts[1] = Contracts.LENDING_MARKET_CONTROLLER;\\n        contracts[2] = Contracts.RESERVE_FUND;\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](2);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n        contracts[1] = Contracts.RESERVE_FUND;\\n    }\\n\\n    receive() external payable {\\n        if (!TransferHelper.isNative(msg.sender)) {\\n            revert CallerNotBaseCurrency({caller: msg.sender});\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets if the collateral has enough coverage.\\n     * @param _user User's address\\n     * @return The boolean if the collateral has sufficient coverage or not\\n     */\\n    function isCovered(address _user) public view override returns (bool) {\\n        return DepositManagementLogic.isCovered(_user);\\n    }\\n\\n    /**\\n     * @notice Gets if the currency is acceptable as collateral\\n     * @param _ccy Currency name in bytes32\\n     * @return The boolean if the currency has been registered or not\\n     */\\n    function isCollateral(bytes32 _ccy) public view override returns (bool) {\\n        return Storage.slot().collateralCurrencies.contains(_ccy);\\n    }\\n\\n    /**\\n     * @notice Gets if the currencies are acceptable as collateral\\n     * @param _ccys Currency name list in bytes32\\n     * @return isCollateralCurrencies Array of the boolean if the currency has been registered or not\\n     */\\n    function isCollateral(bytes32[] calldata _ccys)\\n        external\\n        view\\n        override\\n        returns (bool[] memory isCollateralCurrencies)\\n    {\\n        uint256 length = _ccys.length;\\n        isCollateralCurrencies = new bool[](length);\\n        for (uint256 i; i < length; i++) {\\n            isCollateralCurrencies[i] = isCollateral(_ccys[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets if the currency has been registered\\n     * @param _ccy Currency name in bytes32\\n     * @return The boolean if the currency has been registered or not\\n     */\\n    function isRegisteredCurrency(bytes32 _ccy) public view override returns (bool) {\\n        return Storage.slot().tokenAddresses[_ccy] != address(0);\\n    }\\n\\n    /**\\n     * @notice Gets the token contract address\\n     * @param _ccy Currency name in bytes32\\n     * @return The token contract address\\n     */\\n    function getTokenAddress(bytes32 _ccy) public view override returns (address) {\\n        return Storage.slot().tokenAddresses[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the currencies accepted as collateral\\n     * @return Array of the currency accepted as collateral\\n     */\\n    function getCollateralCurrencies() external view override returns (bytes32[] memory) {\\n        return Storage.slot().collateralCurrencies.values();\\n    }\\n\\n    /**\\n     * @notice Gets the maximum amount of ETH that can be withdrawn from user collateral.\\n     * @param _user User's address\\n     * @return Maximum amount of ETH that can be withdrawn\\n     */\\n    function getWithdrawableCollateral(address _user) external view override returns (uint256) {\\n        return DepositManagementLogic.getWithdrawableCollateral(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the maximum amount of the selected currency that can be withdrawn from user collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _user User's address\\n     * @return Maximum amount of the selected currency that can be withdrawn\\n     */\\n    function getWithdrawableCollateral(bytes32 _ccy, address _user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return DepositManagementLogic.getWithdrawableCollateral(_ccy, _user);\\n    }\\n\\n    /**\\n     * @notice Gets the rate of collateral used.\\n     * @param _user User's address\\n     * @return coverage The rate of collateral used\\n     */\\n    function getCoverage(address _user) external view override returns (uint256 coverage) {\\n        return DepositManagementLogic.getCoverage(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the total amount of the unused collateral\\n     * @param _user User's address\\n     * @return The total amount of unused collateral\\n     */\\n    function getUnusedCollateral(address _user) external view override returns (uint256) {\\n        (uint256 totalCollateral, uint256 totalUsedCollateral, , ) = DepositManagementLogic\\n            .getTotalCollateralAmount(_user);\\n\\n        return totalCollateral > totalUsedCollateral ? totalCollateral - totalUsedCollateral : 0;\\n    }\\n\\n    /**\\n     * @notice Gets the total collateral amount.\\n     * @param _user User's address\\n     * @return totalCollateralAmount The total collateral amount in ETH\\n     */\\n    function getTotalCollateralAmount(address _user)\\n        external\\n        view\\n        override\\n        returns (uint256 totalCollateralAmount)\\n    {\\n        (totalCollateralAmount, , , ) = DepositManagementLogic.getTotalCollateralAmount(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the total collateral amount of the selected currency.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @return amount The collateral amount\\n     */\\n    function getCollateralAmount(address _user, bytes32 _ccy)\\n        external\\n        view\\n        override\\n        returns (uint256 amount)\\n    {\\n        (amount, , ) = DepositManagementLogic.getCollateralAmount(_user, _ccy);\\n    }\\n\\n    /**\\n     * @notice Gets the amount to be liquidated.\\n     * @param _user User's address\\n     * @return liquidationAmount The the amount to be liquidated\\n     */\\n    function getLiquidationAmount(\\n        address _user,\\n        bytes32 _liquidationCcy,\\n        uint256 _liquidationAmountMaximum\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 liquidationAmount,\\n            uint256 protocolFee,\\n            uint256 liquidatorFee\\n        )\\n    {\\n        return\\n            DepositManagementLogic.getLiquidationAmount(\\n                _user,\\n                _liquidationCcy,\\n                _liquidationAmountMaximum\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets the total amount deposited of the selected currency\\n     * @param _ccy Currency name in bytes32\\n     * @return The total deposited amount\\n     */\\n    function getTotalDepositAmount(bytes32 _ccy) external view override returns (uint256) {\\n        return Storage.slot().totalDepositAmount[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the amount deposited in the user's collateral.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @return The deposited amount\\n     */\\n    function getDepositAmount(address _user, bytes32 _ccy)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return DepositManagementLogic.getDepositAmount(_user, _ccy);\\n    }\\n\\n    /**\\n     * @notice Gets the currencies that the user used as collateral.\\n     * @param _user User's address\\n     * @return The currency names in bytes32\\n     */\\n    function getUsedCurrencies(address _user) public view override returns (bytes32[] memory) {\\n        return DepositManagementLogic.getUsedCurrencies(_user);\\n    }\\n\\n    /**\\n     * @notice Calculates the collateral rate used when additional funds are had by the user.\\n     * @param _user User's address\\n     * @param _additionalFunds Additional funds for calculating the coverage\\n     * @return coverage The rate of collateral used\\n     * @return isInsufficientDepositAmount The boolean if the lent amount in the selected currency is insufficient for the deposit amount or not\\n     */\\n    function calculateCoverage(\\n        address _user,\\n        ILendingMarketController.AdditionalFunds memory _additionalFunds\\n    ) external view override returns (uint256 coverage, bool isInsufficientDepositAmount) {\\n        return DepositManagementLogic.calculateCoverage(_user, _additionalFunds);\\n    }\\n\\n    /**\\n     * @notice Gets the actual fee amounts calculated by rates.\\n     * @param _amount Liquidation amount\\n     * @return protocolFee Liquidation fee amount received by protocol\\n     * @return liquidatorFee Liquidation fee amount received by liquidators\\n     */\\n    function calculateLiquidationFees(uint256 _amount)\\n        external\\n        view\\n        override\\n        returns (uint256 protocolFee, uint256 liquidatorFee)\\n    {\\n        return DepositManagementLogic.calculateLiquidationFees(_amount);\\n    }\\n\\n    /**\\n     * @notice Registers new currency and sets if it is acceptable as collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _tokenAddress Token contract address of the selected currency\\n     * @param _isCollateral Boolean if the selected currency is acceptable as collateral.\\n     */\\n    function registerCurrency(\\n        bytes32 _ccy,\\n        address _tokenAddress,\\n        bool _isCollateral\\n    ) external onlyOwner {\\n        if (!currencyController().currencyExists(_ccy)) revert InvalidCurrency();\\n\\n        Storage.slot().tokenAddresses[_ccy] = _tokenAddress;\\n        if (_isCollateral) {\\n            Storage.slot().collateralCurrencies.add(_ccy);\\n        }\\n\\n        emit CurrencyRegistered(_ccy, _tokenAddress, _isCollateral);\\n    }\\n\\n    /**\\n     * @notice Updates the currency if it is acceptable as collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _isCollateral Boolean if the selected currency is acceptable as collateral.\\n     */\\n    function updateCurrency(bytes32 _ccy, bool _isCollateral)\\n        external\\n        onlyOwner\\n        onlyRegisteredCurrency(_ccy)\\n    {\\n        if (_isCollateral) {\\n            Storage.slot().collateralCurrencies.add(_ccy);\\n        } else {\\n            Storage.slot().collateralCurrencies.remove(_ccy);\\n        }\\n\\n        emit CurrencyUpdated(_ccy, _isCollateral);\\n    }\\n\\n    /**\\n     * @dev Deposits funds by the caller into collateral.\\n     * @param _amount Amount of funds to deposit\\n     * @param _ccy Currency name in bytes32\\n     */\\n    function deposit(bytes32 _ccy, uint256 _amount)\\n        external\\n        payable\\n        override\\n        whenNotPaused\\n        onlyRegisteredCurrency(_ccy)\\n    {\\n        _deposit(msg.sender, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @dev Deposits funds by the `from` into collateral.\\n     * @param _from user's address\\n     * @param _amount Amount of funds to deposit\\n     * @param _ccy Currency name in bytes32\\n     */\\n    function depositFrom(\\n        address _from,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external payable override whenNotPaused onlyAcceptedContracts {\\n        _deposit(_from, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws funds by the caller from unused collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to withdraw.\\n     */\\n    function withdraw(bytes32 _ccy, uint256 _amount)\\n        external\\n        override\\n        whenNotPaused\\n        onlyRegisteredCurrency(_ccy)\\n    {\\n        _withdraw(msg.sender, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @dev Adds deposit amount.\\n     * @param _user User's address\\n     * @param _amount Amount of funds to deposit\\n     * @param _ccy Currency name in bytes32\\n     */\\n    function addDepositAmount(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external override whenNotPaused onlyAcceptedContracts onlyRegisteredCurrency(_ccy) {\\n        DepositManagementLogic.addDepositAmount(_user, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Removes deposit amount.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to withdraw.\\n     */\\n    function removeDepositAmount(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external override whenNotPaused onlyAcceptedContracts onlyRegisteredCurrency(_ccy) {\\n        DepositManagementLogic.removeDepositAmount(_user, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Forces a reset of the user's deposit amount.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     */\\n    function executeForcedReset(address _user, bytes32 _ccy)\\n        external\\n        override\\n        onlyAcceptedContracts\\n        onlyRegisteredCurrency(_ccy)\\n        returns (uint256)\\n    {\\n        return DepositManagementLogic.executeForcedReset(_user, _ccy);\\n    }\\n\\n    /**\\n     * @notice Transfers the token from sender to receiver.\\n     * @param _ccy Currency name in bytes32\\n     * @param _from Sender's address\\n     * @param _to Receiver's address\\n     * @param _amount Amount of funds to sent\\n     */\\n    function transferFrom(\\n        bytes32 _ccy,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        onlyAcceptedContracts\\n        onlyRegisteredCurrency(_ccy)\\n        returns (uint256 untransferredAmount)\\n    {\\n        untransferredAmount = DepositManagementLogic.transferFrom(_ccy, _from, _to, _amount);\\n        emit Transfer(_ccy, _from, _to, _amount - untransferredAmount);\\n    }\\n\\n    /**\\n     * @notice Pauses the token vault.\\n     */\\n    function pauseVault() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses the token vault.\\n     */\\n    function unpauseVault() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    function _deposit(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) internal {\\n        if (\\n            _amount == 0 ||\\n            (TransferHelper.isNative(Storage.slot().tokenAddresses[_ccy]) && _amount != msg.value)\\n        ) {\\n            revert InvalidAmount();\\n        }\\n        if (lendingMarketController().isTerminated()) revert MarketTerminated();\\n\\n        DepositManagementLogic.deposit(_user, _ccy, _amount);\\n\\n        emit Deposit(_user, _ccy, _amount);\\n    }\\n\\n    function _withdraw(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) internal {\\n        if (_amount == 0) revert InvalidAmount();\\n        if (lendingMarketController().isRedemptionRequired(_user)) revert RedemptionIsRequired();\\n\\n        lendingMarketController().cleanUpFunds(_ccy, _user);\\n        uint256 withdrawableAmount = DepositManagementLogic.withdraw(_user, _ccy, _amount);\\n\\n        emit Withdraw(_user, _ccy, withdrawableAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x660f399084c8b3910e3855c5e813f86a516560667c9f4c563c9169dd27c7287f\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    error UnmatchedInputs();\\n\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x40e18c26bde79091749a80c311436872a4bc5b960ec77739cb3d3a0d08bd78ac\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IBeaconProxyController {\\n    error NoBeaconProxyContract();\\n    error InvalidProxyContract();\\n\\n    event BeaconProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function deployFutureValueVault() external returns (address futureValueVault);\\n\\n    function deployLendingMarket(\\n        bytes32 ccy,\\n        uint256 orderFeeRate,\\n        uint256 cbLimitRange\\n    ) external returns (address market);\\n}\\n\",\"keccak256\":\"0x94069c565a7f5f6ddf8c155cf11b53821b466d07a7c24f142feb4c375ce29b55\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {PriceFeed} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    error InvalidCurrency();\\n    error InvalidHaircut();\\n    error InvalidPriceFeed();\\n    error InvalidPrice();\\n    error InvalidDecimals();\\n    error NoPriceFeedExists();\\n    error StalePriceFeed(\\n        address priceFeed,\\n        uint256 heartbeat,\\n        uint256 updatedAt,\\n        uint256 blockTimestamp\\n    );\\n\\n    event CurrencyAdded(bytes32 indexed ccy, uint256 haircut);\\n    event CurrencyRemoved(bytes32 indexed ccy);\\n\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n\\n    event PriceFeedUpdated(bytes32 ccy, uint256 decimals, address[] indexed priceFeeds);\\n    event PriceFeedRemoved(bytes32 ccy);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256 _amount\\n    ) external view returns (uint256 amount);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256[] calldata _amounts\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, uint256 _amount)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, int256 _amount)\\n        external\\n        view\\n        returns (int256 amount);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, uint256[] calldata _amounts)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function convertFromBaseCurrency(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertFromBaseCurrency(bytes32 _ccy, uint256[] calldata _amounts)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getDecimals(bytes32) external view returns (uint8);\\n\\n    function getCurrencies() external view returns (bytes32[] memory);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getPriceFeed(bytes32 _ccy) external view returns (PriceFeed memory);\\n\\n    function getLastPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function currencyExists(bytes32 _ccy) external view returns (bool);\\n\\n    function updatePriceFeed(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        address[] calldata _priceFeeds,\\n        uint256 _heartbeat\\n    ) external;\\n\\n    function removePriceFeed(bytes32 _ccy) external;\\n\\n    function addCurrency(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        uint256 _haircut,\\n        address[] calldata _priceFeeds,\\n        uint256 _heartbeat\\n    ) external;\\n\\n    function updateHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function removeCurrency(bytes32 _ccy) external;\\n}\\n\",\"keccak256\":\"0xcb157f980a3f915240c80fe657c7d876a722e03e8d2861419dffe9ee28133a21\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AutoRollLog} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    error NoCompoundFactorExists(uint256 maturity);\\n    error CompoundFactorIsZero();\\n    error ResidualAmountIsNotZero();\\n    error UnitPriceIsZero();\\n    error InvalidMaturity();\\n    error InvalidAmount();\\n    error InvalidOrderFeeRate();\\n    error CurrencyAlreadyInitialized();\\n    error InitialCompoundFactorAlreadyFinalized();\\n    error AutoRollLogAlreadyUpdated(uint256 currentMaturity, uint256 nextMaturity);\\n\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\\n    event AutoRollExecuted(\\n        bytes32 indexed ccy,\\n        uint256 lendingCompoundFactor,\\n        uint256 borrowingCompoundFactor,\\n        uint256 unitPrice,\\n        uint256 currentMaturity,\\n        uint256 previousMaturity\\n    );\\n\\n    function isInitialized(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getBalance(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getBalanceInFutureValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getMaturityGenesisValue(bytes32 ccy, uint256 maturity) external view returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getAutoRollLog(bytes32 ccy, uint256 maturity)\\n        external\\n        view\\n        returns (AutoRollLog memory);\\n\\n    function getLatestAutoRollLog(bytes32 ccy) external view returns (AutoRollLog memory);\\n\\n    function calculateFVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        uint256 destinationMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function getBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function calculateBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        int256 balance,\\n        uint256 fromMaturity,\\n        uint256 toMaturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function initializeCurrencySetting(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor,\\n        uint256 maturity\\n    ) external;\\n\\n    function updateInitialCompoundFactor(bytes32 ccy, uint256 unitPrice) external;\\n\\n    function executeAutoRoll(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice,\\n        uint256 orderFeeRate\\n    ) external;\\n\\n    function updateGenesisValueWithFutureValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 fvAmount\\n    ) external;\\n\\n    function updateGenesisValueWithResidualAmount(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity\\n    ) external;\\n\\n    function transferFrom(\\n        bytes32 ccy,\\n        address sender,\\n        address receiver,\\n        int256 amount\\n    ) external;\\n\\n    function cleanUpBalance(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external;\\n\\n    function executeForcedReset(bytes32 _ccy, address _user) external;\\n\\n    function executeForcedReset(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        int256 _amountInFV\\n    ) external returns (int256 removedAmount, int256 balance);\\n}\\n\",\"keccak256\":\"0x042f013b829505a30b3799d3d602e7c38e59335de6b3ba0b64cfabd8ddae4b0e\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ILendingMarketController {\\n    error InvalidMaturity();\\n    error InvalidCurrency();\\n    error AlreadyTerminated();\\n    error NotTerminated();\\n    error AlreadyInitialized();\\n\\n    struct AdditionalFunds {\\n        bytes32 ccy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 lentAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct CalculatedTotalFunds {\\n        uint256 plusDepositAmountInAdditionalFundsCcy;\\n        uint256 minusDepositAmountInAdditionalFundsCcy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 collateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n        uint256 minDebtAmount;\\n    }\\n\\n    struct CalculatedFunds {\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 collateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n        uint256 minDebtAmount;\\n    }\\n\\n    struct GetOrderEstimationParams {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        address user;\\n        ProtocolTypes.Side side;\\n        uint256 amount;\\n        uint256 unitPrice;\\n        uint256 additionalDepositAmount;\\n        bool ignoreBorrowedAmount;\\n    }\\n\\n    function isTerminated() external view returns (bool);\\n\\n    function isRedemptionRequired(address _user) external view returns (bool);\\n\\n    function getMinDebtUnitPrice(bytes32 _ccy) external view returns (uint256);\\n\\n    function getCurrentMinDebtUnitPrice(bytes32 _ccy, uint256 _maturity)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarket(bytes32 ccy) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy) external view returns (address);\\n\\n    function getOrderBookId(bytes32 _ccy, uint256 _maturity) external view returns (uint8);\\n\\n    function getOrderEstimation(GetOrderEstimationParams calldata params)\\n        external\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV,\\n            uint256 orderFeeInFV,\\n            uint256 placedAmount,\\n            uint256 coverage,\\n            bool isInsufficientDepositAmount\\n        );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getOrderBookIds(bytes32 ccy) external view returns (uint8[] memory);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInBaseCurrency(address user)\\n        external\\n        view\\n        returns (int256 totalPresentValue);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256 genesisValue);\\n\\n    function getPosition(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) external view returns (int256 presentValue, int256 futureValue);\\n\\n    function calculateFunds(\\n        bytes32 ccy,\\n        address user,\\n        uint256 liquidationThresholdRate\\n    ) external view returns (CalculatedFunds memory funds);\\n\\n    function calculateTotalFundsInBaseCurrency(\\n        address user,\\n        AdditionalFunds calldata _additionalFunds,\\n        uint256 liquidationThresholdRate\\n    ) external view returns (CalculatedTotalFunds memory calculatedFunds);\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor,\\n        uint256 orderFeeRate,\\n        uint256 circuitBreakerLimitRange,\\n        uint256 minDebtUnitPrice\\n    ) external;\\n\\n    function createOrderBook(\\n        bytes32 ccy,\\n        uint256 openingDate,\\n        uint256 preOpeningDate\\n    ) external;\\n\\n    function executeOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecuteOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function executePreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecutesPreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function unwindPosition(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function executeItayoseCalls(bytes32[] calldata currencies, uint256 maturity)\\n        external\\n        returns (bool);\\n\\n    function executeRedemption(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeRepayment(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeEmergencySettlement() external returns (bool);\\n\\n    function executeLiquidationCall(\\n        bytes32 collateralCcy,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        address user\\n    ) external returns (bool);\\n\\n    function executeForcedRepayment(\\n        bytes32 _collateralCcy,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity,\\n        address _user\\n    ) external returns (bool);\\n\\n    function cancelOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint48 orderId\\n    ) external returns (bool);\\n\\n    function rotateOrderBooks(bytes32 ccy) external;\\n\\n    function executeEmergencyTermination() external;\\n\\n    function pauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function cleanUpAllFunds(address user) external returns (bool);\\n\\n    function cleanUpFunds(bytes32 ccy, address user) external returns (uint256 activeOrderCount);\\n\\n    function updateMinDebtUnitPrice(bytes32 _ccy, uint256 _minDebtUnitPrice) external;\\n}\\n\",\"keccak256\":\"0x1c93ab55f5bd1178d1ac484097112dd940b02004d74e940c35bc95e135aec2cd\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/INativeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface INativeToken is IERC20 {\\n    event Deposit(address user, uint256 amount);\\n    event Withdrawal(address user, uint256 amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xcbe446369607089748577553085e18ecae848adef0c0d49aee25faf7edee44d1\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IReserveFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IReserveFund {\\n    event Pause(address account);\\n    event Unpause(address account);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xa2a6df7a095ca8f8874d26672f75fe1f09c45caf041cb27d5e265bcb974a9754\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\n\\ninterface ITokenVault {\\n    error UnregisteredCurrency();\\n    error InvalidCurrency();\\n    error InvalidAmount();\\n    error CallerNotBaseCurrency(address caller);\\n    error MarketTerminated();\\n    error RedemptionIsRequired();\\n\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress, bool isCollateral);\\n    event CurrencyUpdated(bytes32 ccy, bool isCollateral);\\n\\n    function isCovered(address user) external view returns (bool);\\n\\n    function isCollateral(bytes32 ccy) external view returns (bool);\\n\\n    function isCollateral(bytes32[] calldata ccys)\\n        external\\n        view\\n        returns (bool[] memory isCollateralCurrencies);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getTokenAddress(bytes32 ccy) external view returns (address);\\n\\n    function getCollateralCurrencies() external view returns (bytes32[] memory);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256 maxWithdraw);\\n\\n    function getWithdrawableCollateral(bytes32 ccy, address user) external view returns (uint256);\\n\\n    function getCoverage(address user) external view returns (uint256 coverage);\\n\\n    function getUnusedCollateral(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address user) external view returns (uint256);\\n\\n    function getCollateralAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getLiquidationAmount(\\n        address user,\\n        bytes32 liquidationCcy,\\n        uint256 liquidationAmountMaximum\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liquidationAmount,\\n            uint256 protocolFee,\\n            uint256 liquidatorFee\\n        );\\n\\n    function getTotalDepositAmount(bytes32 ccy) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function calculateCoverage(address user, ILendingMarketController.AdditionalFunds memory funds)\\n        external\\n        view\\n        returns (uint256 coverage, bool isInsufficientDepositAmount);\\n\\n    function calculateLiquidationFees(uint256 liquidationAmount)\\n        external\\n        view\\n        returns (uint256 protocolFee, uint256 liquidatorFee);\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositFrom(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function removeDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function executeForcedReset(address user, bytes32 ccy) external returns (uint256 removedAmount);\\n\\n    function transferFrom(\\n        bytes32 ccy,\\n        address sender,\\n        address receiver,\\n        uint256 amount\\n    ) external returns (uint256 untransferredAmount);\\n\\n    function pauseVault() external;\\n\\n    function unpauseVault() external;\\n}\\n\",\"keccak256\":\"0x87430d7a9bfbc654019ef9965452df04cd805753b79cdbc78d02905ba342406d\",\"license\":\"MIT\"},\"contracts/protocol/libraries/AddressResolverLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/mixins/MixinAddressResolverStorage.sol\\\";\\n\\nlibrary AddressResolverLib {\\n    error MissingAddress(string name);\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        if (_foundAddress == address(0)) revert MissingAddress(string(abi.encodePacked(name)));\\n        return _foundAddress;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return IReserveFund(getAddress(Contracts.RESERVE_FUND));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0xbde5bbe81b0252665c84ea5cfc5b60cc9ff5ab1bc0dd53e4b01be070b9d72021\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Constants {\\n    /// @dev Used for price digits in the basis (10000 -> 1)\\n    uint256 internal constant PRICE_DIGIT = 10000;\\n\\n    /// @dev Used for percentage digits in the basis (10000 -> 100%)\\n    uint256 internal constant PCT_DIGIT = 10000;\\n\\n    /// @dev Used for seconds in year (60 * 60 * 24 * 365)\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000;\\n\\n    /// @dev Used for maximum order count per currency\\n    uint256 internal constant MAXIMUM_ORDER_COUNT = 20;\\n\\n    /// @dev Used for minimum range for circuit breaker unit price\\n    uint256 internal constant MINIMUM_CIRCUIT_BREAKER_RANGE = 100;\\n}\\n\",\"keccak256\":\"0x8ab1b7b6191ba0f20fe1d26c937d130cdc52b0f21827aa34103c3b6b425a4c7e\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant RESERVE_FUND = \\\"ReserveFund\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE_VAULT = \\\"FutureValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0x8e73eead72efa03bcc03c1cdf72cdcebed0f7e6f5a58cda1fd74e0fc03f356e6\",\"license\":\"MIT\"},\"contracts/protocol/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {INativeToken} from \\\"../interfaces/INativeToken.sol\\\";\\nimport {TransferHelperStorage as Storage} from \\\"../storages/libraries/TransferHelperStorage.sol\\\";\\n\\nlibrary TransferHelper {\\n    function initialize(address _nativeToken) internal {\\n        require(Storage.slot().nativeToken == address(0), \\\"TransferHelper: Already initialized\\\");\\n        Storage.slot().nativeToken = _nativeToken;\\n    }\\n\\n    function nativeToken() internal view returns (address) {\\n        return Storage.slot().nativeToken;\\n    }\\n\\n    function isNative(address _token) internal view returns (bool) {\\n        return _token == Storage.slot().nativeToken;\\n    }\\n\\n    function depositAssets(\\n        address _token,\\n        address _payer,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == Storage.slot().nativeToken) {\\n            convertToWrappedToken(_receiver, _amount);\\n        } else {\\n            safeTransferFrom(_token, _payer, _receiver, _amount);\\n        }\\n    }\\n\\n    function withdrawAssets(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == Storage.slot().nativeToken) {\\n            convertFromWrappedToken(_receiver, _amount);\\n        } else {\\n            safeTransfer(_token, _receiver, _amount);\\n        }\\n    }\\n\\n    function convertToWrappedToken(address _receiver, uint256 _amount) internal {\\n        require(address(this).balance >= _amount, \\\"TransferHelper: Insufficient balance\\\");\\n\\n        INativeToken(Storage.slot().nativeToken).deposit{value: _amount}();\\n        INativeToken(Storage.slot().nativeToken).transfer(_receiver, _amount);\\n    }\\n\\n    function convertFromWrappedToken(address _receiver, uint256 _amount) internal {\\n        uint256 balance = INativeToken(Storage.slot().nativeToken).balanceOf(address(this));\\n        require(balance >= _amount, \\\"TransferHelper: Insufficient balance\\\");\\n\\n        if (balance > 0) {\\n            INativeToken(Storage.slot().nativeToken).withdraw(_amount);\\n            safeTransferETH(_receiver, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer helper from UniswapV2 Router\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    /**\\n     * There are many non-compliant ERC20 tokens... this can handle most, adapted from UniSwap V2\\n     * Im trying to make it a habit to put external calls last (reentrancy)\\n     * You can put this in an internal function if you like.\\n     */\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // 0xa9059cbb = bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n            abi.encodeWithSelector(0xa9059cbb, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        ); // ERC20 Transfer failed\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf0ee397ef4d2fe410bf908a04cb582936f557b4a49c8869a3bc09b9587835604\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/DepositManagementLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// dependencies\\nimport {EnumerableSet} from \\\"../../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n// interfaces\\nimport {ILendingMarketController} from \\\"../../interfaces/ILendingMarketController.sol\\\";\\n// libraries\\nimport {AddressResolverLib} from \\\"../AddressResolverLib.sol\\\";\\nimport {TransferHelper} from \\\"../TransferHelper.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\n// storages\\nimport {TokenVaultStorage as Storage} from \\\"../../storages/TokenVaultStorage.sol\\\";\\n\\nlibrary DepositManagementLogic {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using RoundingUint256 for uint256;\\n\\n    error NotEnoughDeposit(bytes32 ccy);\\n    error CollateralIsZero(bytes32 ccy);\\n    error ProtocolIsInsolvent(bytes32 ccy);\\n\\n    struct CalculatedFundVars {\\n        uint256 plusDepositAmountInAdditionalFundsCcy;\\n        uint256 minusDepositAmountInAdditionalFundsCcy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 collateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n        uint256 minDebtAmount;\\n    }\\n\\n    function isCovered(address _user) public view returns (bool) {\\n        (uint256 totalCollateral, uint256 totalUsedCollateral, , ) = getTotalCollateralAmount(\\n            _user\\n        );\\n\\n        return\\n            totalUsedCollateral == 0 ||\\n            (totalCollateral * Constants.PCT_DIGIT >=\\n                totalUsedCollateral * Storage.slot().liquidationThresholdRate);\\n    }\\n\\n    function getUsedCurrencies(address _user) public view returns (bytes32[] memory) {\\n        EnumerableSet.Bytes32Set storage currencySet = Storage.slot().usedCurrencies[_user];\\n\\n        uint256 length = currencySet.length();\\n        bytes32[] memory currencies = new bytes32[](length);\\n\\n        for (uint256 i; i < length; i++) {\\n            bytes32 currency = currencySet.at(i);\\n            currencies[i] = currency;\\n        }\\n\\n        return currencies;\\n    }\\n\\n    function getDepositAmount(address _user, bytes32 _ccy) public view returns (uint256) {\\n        ILendingMarketController.CalculatedFunds memory funds = AddressResolverLib\\n            .lendingMarketController()\\n            .calculateFunds(_ccy, _user, Storage.slot().liquidationThresholdRate);\\n\\n        return\\n            Storage.slot().depositAmounts[_user][_ccy] +\\n            funds.borrowedAmount -\\n            funds.lentAmount -\\n            funds.workingLendOrdersAmount;\\n    }\\n\\n    function getTotalCollateralAmount(address _user)\\n        public\\n        view\\n        returns (\\n            uint256 totalCollateral,\\n            uint256 totalUsedCollateral,\\n            uint256 totalDeposit,\\n            uint256 minRequiredCollateral\\n        )\\n    {\\n        ILendingMarketController.AdditionalFunds memory _funds;\\n        (\\n            totalCollateral,\\n            totalUsedCollateral,\\n            totalDeposit,\\n            minRequiredCollateral,\\n\\n        ) = _calculateCollateral(_user, _funds);\\n    }\\n\\n    function getCollateralAmount(address _user, bytes32 _ccy)\\n        public\\n        view\\n        returns (\\n            uint256 totalCollateral,\\n            uint256 totalUsedCollateral,\\n            uint256 totalDeposit\\n        )\\n    {\\n        ILendingMarketController.CalculatedFunds memory funds = AddressResolverLib\\n            .lendingMarketController()\\n            .calculateFunds(_ccy, _user, Storage.slot().liquidationThresholdRate);\\n\\n        uint256 plusDeposit = Storage.slot().depositAmounts[_user][_ccy] + funds.borrowedAmount;\\n        uint256 minusDeposit = funds.workingLendOrdersAmount + funds.lentAmount;\\n        uint256 plusCollateral = plusDeposit + funds.collateralAmount;\\n\\n        totalCollateral = plusCollateral >= minusDeposit ? plusCollateral - minusDeposit : 0;\\n        totalUsedCollateral = funds.workingBorrowOrdersAmount + funds.debtAmount;\\n        totalDeposit = plusDeposit >= minusDeposit ? plusDeposit - minusDeposit : 0;\\n    }\\n\\n    function getCoverage(address _user) external view returns (uint256 coverage) {\\n        ILendingMarketController.AdditionalFunds memory _emptyAdditionalFunds;\\n        (coverage, ) = calculateCoverage(_user, _emptyAdditionalFunds);\\n    }\\n\\n    function calculateCoverage(\\n        address _user,\\n        ILendingMarketController.AdditionalFunds memory _additionalFunds\\n    ) public view returns (uint256 coverage, bool isInsufficientDepositAmount) {\\n        uint256 totalCollateral;\\n        uint256 totalUsedCollateral;\\n\\n        (\\n            totalCollateral,\\n            totalUsedCollateral,\\n            ,\\n            ,\\n            isInsufficientDepositAmount\\n        ) = _calculateCollateral(_user, _additionalFunds);\\n\\n        if (totalCollateral == 0) {\\n            coverage = totalUsedCollateral == 0 ? 0 : type(uint256).max;\\n        } else {\\n            coverage = (totalUsedCollateral * Constants.PCT_DIGIT) / totalCollateral;\\n        }\\n    }\\n\\n    function _calculateCollateral(\\n        address _user,\\n        ILendingMarketController.AdditionalFunds memory _funds\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 totalCollateral,\\n            uint256 totalUsedCollateral,\\n            uint256 totalDeposit,\\n            uint256 minRequiredCollateral,\\n            bool isInsufficientDepositAmount\\n        )\\n    {\\n        CalculatedFundVars memory vars;\\n\\n        ILendingMarketController.CalculatedTotalFunds memory funds = AddressResolverLib\\n            .lendingMarketController()\\n            .calculateTotalFundsInBaseCurrency(\\n                _user,\\n                _funds,\\n                Storage.slot().liquidationThresholdRate\\n            );\\n\\n        vars.plusDepositAmountInAdditionalFundsCcy = funds.plusDepositAmountInAdditionalFundsCcy;\\n        vars.minusDepositAmountInAdditionalFundsCcy = funds.minusDepositAmountInAdditionalFundsCcy;\\n        vars.workingLendOrdersAmount = funds.workingLendOrdersAmount;\\n        vars.collateralAmount = funds.collateralAmount;\\n        vars.lentAmount = funds.lentAmount;\\n        vars.workingBorrowOrdersAmount = funds.workingBorrowOrdersAmount;\\n        vars.debtAmount = funds.debtAmount;\\n        vars.borrowedAmount = funds.borrowedAmount;\\n        vars.minDebtAmount = funds.minDebtAmount;\\n\\n        // Check if the user has enough deposit amount for lending in the selected currency.\\n        if (\\n            _funds.lentAmount != 0 &&\\n            (vars.plusDepositAmountInAdditionalFundsCcy +\\n                Storage.slot().depositAmounts[_user][_funds.ccy] <\\n                vars.minusDepositAmountInAdditionalFundsCcy)\\n        ) {\\n            isInsufficientDepositAmount = true;\\n        }\\n\\n        uint256 totalInternalDepositAmount = _getTotalInternalDepositAmountInBaseCurrency(_user);\\n\\n        uint256 plusDeposit = totalInternalDepositAmount + vars.borrowedAmount;\\n        uint256 minusDeposit = vars.workingLendOrdersAmount + vars.lentAmount;\\n        uint256 plusCollateral = plusDeposit + vars.collateralAmount;\\n\\n        totalCollateral = plusCollateral >= minusDeposit ? plusCollateral - minusDeposit : 0;\\n        totalUsedCollateral = vars.workingBorrowOrdersAmount + vars.debtAmount;\\n        minRequiredCollateral = vars.workingBorrowOrdersAmount + vars.minDebtAmount;\\n        totalDeposit = plusDeposit >= minusDeposit ? plusDeposit - minusDeposit : 0;\\n    }\\n\\n    function getWithdrawableCollateral(address _user) public view returns (uint256) {\\n        (\\n            uint256 totalCollateral,\\n            uint256 totalUsedCollateral,\\n            uint256 totalDeposit,\\n            uint256 minRequiredCollateral\\n        ) = getTotalCollateralAmount(_user);\\n\\n        uint256 usedCollateral = totalUsedCollateral >= minRequiredCollateral\\n            ? totalUsedCollateral\\n            : minRequiredCollateral;\\n\\n        if (usedCollateral == 0) {\\n            return totalDeposit;\\n        } else if (\\n            totalCollateral * Constants.PRICE_DIGIT >\\n            usedCollateral * Storage.slot().liquidationThresholdRate\\n        ) {\\n            // NOTE: The formula is:\\n            // maxWithdraw = totalCollateral - ((totalUsedCollateral) * marginCallThresholdRate).\\n            uint256 maxWithdraw = (totalCollateral *\\n                Constants.PRICE_DIGIT -\\n                (usedCollateral) *\\n                Storage.slot().liquidationThresholdRate).div(Constants.PRICE_DIGIT);\\n\\n            return maxWithdraw >= totalDeposit ? totalDeposit : maxWithdraw;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getWithdrawableCollateral(bytes32 _ccy, address _user)\\n        public\\n        view\\n        returns (uint256 withdrawableAmount)\\n    {\\n        uint256 depositAmount = Storage.slot().depositAmounts[_user][_ccy];\\n        if (Storage.slot().collateralCurrencies.contains(_ccy)) {\\n            uint256 maxWithdrawInNativeToken = getWithdrawableCollateral(_user);\\n            uint256 maxWithdraw = AddressResolverLib.currencyController().convertFromBaseCurrency(\\n                _ccy,\\n                maxWithdrawInNativeToken\\n            );\\n\\n            withdrawableAmount = depositAmount >= maxWithdraw ? maxWithdraw : depositAmount;\\n        } else {\\n            withdrawableAmount = getDepositAmount(_user, _ccy);\\n        }\\n    }\\n\\n    function addDepositAmount(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) public {\\n        Storage.slot().depositAmounts[_user][_ccy] += _amount;\\n        _updateUsedCurrencies(_user, _ccy);\\n    }\\n\\n    function removeDepositAmount(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) public {\\n        if (Storage.slot().depositAmounts[_user][_ccy] < _amount) {\\n            revert NotEnoughDeposit({ccy: _ccy});\\n        }\\n\\n        Storage.slot().depositAmounts[_user][_ccy] -= _amount;\\n        _updateUsedCurrencies(_user, _ccy);\\n    }\\n\\n    function executeForcedReset(address _user, bytes32 _ccy)\\n        external\\n        returns (uint256 removedAmount)\\n    {\\n        removedAmount = Storage.slot().depositAmounts[_user][_ccy];\\n        Storage.slot().depositAmounts[_user][_ccy] = 0;\\n\\n        Storage.slot().usedCurrencies[_user].remove(_ccy);\\n    }\\n\\n    function deposit(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) public {\\n        TransferHelper.depositAssets(\\n            Storage.slot().tokenAddresses[_ccy],\\n            _user,\\n            address(this),\\n            _amount\\n        );\\n\\n        addDepositAmount(_user, _ccy, _amount);\\n        Storage.slot().totalDepositAmount[_ccy] += _amount;\\n    }\\n\\n    function withdraw(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) public returns (uint256 withdrawableAmount) {\\n        withdrawableAmount = getWithdrawableCollateral(_ccy, _user);\\n        withdrawableAmount = _amount > withdrawableAmount ? withdrawableAmount : _amount;\\n\\n        if (Storage.slot().totalDepositAmount[_ccy] < withdrawableAmount) {\\n            revert ProtocolIsInsolvent({ccy: _ccy});\\n        }\\n\\n        Storage.slot().totalDepositAmount[_ccy] -= withdrawableAmount;\\n        removeDepositAmount(_user, _ccy, withdrawableAmount);\\n\\n        TransferHelper.withdrawAssets(\\n            Storage.slot().tokenAddresses[_ccy],\\n            _user,\\n            withdrawableAmount\\n        );\\n\\n        return withdrawableAmount;\\n    }\\n\\n    function getLiquidationAmount(\\n        address _user,\\n        bytes32 _liquidationCcy,\\n        uint256 _liquidationAmountMaximum\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 liquidationAmount,\\n            uint256 protocolFee,\\n            uint256 liquidatorFee\\n        )\\n    {\\n        (\\n            uint256 totalCollateralInBaseCcy,\\n            uint256 totalUsedCollateralInBaseCcy,\\n            ,\\n\\n        ) = getTotalCollateralAmount(_user);\\n\\n        (uint256 collateralAmount, , ) = getCollateralAmount(_user, _liquidationCcy);\\n\\n        if (collateralAmount == 0) revert CollateralIsZero({ccy: _liquidationCcy});\\n\\n        uint256 liquidationAmountInBaseCcy = totalCollateralInBaseCcy * Constants.PCT_DIGIT >=\\n            totalUsedCollateralInBaseCcy * Storage.slot().liquidationThresholdRate\\n            ? 0\\n            : totalUsedCollateralInBaseCcy.div(2);\\n\\n        uint256[] memory amountsInBaseCcy = new uint256[](2);\\n        amountsInBaseCcy[0] = liquidationAmountInBaseCcy;\\n        amountsInBaseCcy[1] = totalCollateralInBaseCcy;\\n\\n        uint256[] memory amounts = AddressResolverLib.currencyController().convertFromBaseCurrency(\\n            _liquidationCcy,\\n            amountsInBaseCcy\\n        );\\n\\n        liquidationAmount = amounts[0];\\n        uint256 totalCollateralAmount = amounts[1];\\n\\n        if (liquidationAmount > _liquidationAmountMaximum) {\\n            liquidationAmount = _liquidationAmountMaximum;\\n        }\\n\\n        (protocolFee, liquidatorFee) = calculateLiquidationFees(liquidationAmount);\\n\\n        uint256 liquidationTotalAmount = liquidationAmount + protocolFee + liquidatorFee;\\n\\n        // NOTE: If `totalCollateralAmount > collateralAmount` is true, it means that a user has collateral in other currencies\\n        // In this case, this liquidation is not covered by the reserve fund.\\n        // Therefore, we need to keep the total liquidation amount within the maximum amount.\\n        if (liquidationTotalAmount > collateralAmount && totalCollateralAmount > collateralAmount) {\\n            liquidationTotalAmount = collateralAmount;\\n            uint256 liquidatorFeeRate = Storage.slot().liquidatorFeeRate;\\n            uint256 liquidationProtocolFeeRate = Storage.slot().liquidationProtocolFeeRate;\\n\\n            protocolFee = (liquidationTotalAmount * liquidationProtocolFeeRate).div(\\n                Constants.PCT_DIGIT + liquidatorFeeRate + liquidationProtocolFeeRate\\n            );\\n            liquidatorFee = (liquidationTotalAmount * liquidatorFeeRate).div(\\n                Constants.PCT_DIGIT + liquidatorFeeRate + liquidationProtocolFeeRate\\n            );\\n            liquidationAmount = liquidationTotalAmount - protocolFee - liquidatorFee;\\n        }\\n    }\\n\\n    function calculateLiquidationFees(uint256 _amount)\\n        public\\n        view\\n        returns (uint256 protocolFee, uint256 liquidatorFee)\\n    {\\n        protocolFee = (_amount * Storage.slot().liquidationProtocolFeeRate).div(\\n            Constants.PCT_DIGIT\\n        );\\n        liquidatorFee = (_amount * Storage.slot().liquidatorFeeRate).div(Constants.PCT_DIGIT);\\n    }\\n\\n    function transferFrom(\\n        bytes32 _ccy,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (uint256 untransferredAmount) {\\n        uint256 depositAmount = Storage.slot().depositAmounts[_from][_ccy];\\n        uint256 amount = depositAmount >= _amount ? _amount : depositAmount;\\n        untransferredAmount = _amount - amount;\\n\\n        removeDepositAmount(_from, _ccy, amount);\\n        addDepositAmount(_to, _ccy, amount);\\n    }\\n\\n    /**\\n     * @notice Gets the total of amount deposited in the user's collateral of all currencies\\n     *  in this contract by converting it to ETH.\\n     * @param _user Address of collateral user\\n     * @return totalDepositAmount The total deposited amount in ETH\\n     */\\n    function _getTotalInternalDepositAmountInBaseCurrency(address _user)\\n        internal\\n        view\\n        returns (uint256 totalDepositAmount)\\n    {\\n        EnumerableSet.Bytes32Set storage currencies = Storage.slot().usedCurrencies[_user];\\n        uint256 length = currencies.length();\\n\\n        for (uint256 i; i < length; i++) {\\n            bytes32 ccy = currencies.at(i);\\n            if (Storage.slot().collateralCurrencies.contains(ccy)) {\\n                uint256 depositAmount = Storage.slot().depositAmounts[_user][ccy];\\n                totalDepositAmount += AddressResolverLib.currencyController().convertToBaseCurrency(\\n                        ccy,\\n                        depositAmount\\n                    );\\n            }\\n        }\\n\\n        return totalDepositAmount;\\n    }\\n\\n    function _updateUsedCurrencies(address _user, bytes32 _ccy) internal {\\n        if (Storage.slot().depositAmounts[_user][_ccy] > 0) {\\n            Storage.slot().usedCurrencies[_user].add(_ccy);\\n        } else {\\n            Storage.slot().usedCurrencies[_user].remove(_ccy);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32351f6ffd511d27f5ccd93072772105c4d3c853745c305393c69b603d4cc942\",\"license\":\"MIT\"},\"contracts/protocol/libraries/math/RoundingUint256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoundingUint256 {\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0);\\n\\n        if ((a * 10) / b - (a / b) * 10 < 5) {\\n            return a / b;\\n        } else {\\n            return (a / b) + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc360f39a82f1a9a7454726e3db802407d305b5e525aa8c3236fe49ca6ca534d\",\"license\":\"MIT\"},\"contracts/protocol/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AddressResolverLib} from \\\"../libraries/AddressResolverLib.sol\\\";\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/mixins/MixinAddressResolverStorage.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    error OnlyAcceptedContracts();\\n    error ResolverAlreadyRegistered();\\n\\n    modifier onlyAcceptedContracts() {\\n        if (!isAcceptedContract(msg.sender)) revert OnlyAcceptedContracts();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the contract names used in this contract.\\n     * @dev The contract name list is in `./libraries/Contracts.sol`.\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @notice Returns contract names that can call this contract.\\n     * @dev The contact name listed in this method is also needed to be listed `requiredContracts` method.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = Storage.slot().resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            Storage.slot().addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                Storage.slot().resolver.getAddress(name) != Storage.slot().addressCache[name] ||\\n                Storage.slot().addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        if (address(Storage.slot().resolver) != address(0)) revert ResolverAlreadyRegistered();\\n        Storage.slot().resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        return AddressResolverLib.getAddress(name);\\n    }\\n\\n    function resolver() public view returns (IAddressResolver) {\\n        return Storage.slot().resolver;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return AddressResolverLib.beaconProxyController();\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return AddressResolverLib.currencyController();\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return AddressResolverLib.genesisValueVault();\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return AddressResolverLib.reserveFund();\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return AddressResolverLib.lendingMarketController();\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return AddressResolverLib.tokenVault();\\n    }\\n}\\n\",\"keccak256\":\"0x74e39594d6ae70bbaf62136a53f79f31ec7c866a85526f607cdbaf6419616d45\",\"license\":\"MIT\"},\"contracts/protocol/mixins/MixinLiquidationConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// libraries\\nimport {Constants} from \\\"../libraries/Constants.sol\\\";\\n// utils\\nimport {Ownable} from \\\"../utils/Ownable.sol\\\";\\n// storages\\nimport {TokenVaultStorage as Storage} from \\\"../storages/TokenVaultStorage.sol\\\";\\n\\ncontract MixinLiquidationConfiguration is Ownable {\\n    error InvalidLiquidationThresholdRate();\\n    error InvalidLiquidationProtocolFeeRate();\\n    error InvalidLiquidatorFeeRate();\\n\\n    event AutoLiquidationThresholdRateUpdated(uint256 previousRate, uint256 ratio);\\n    event LiquidationProtocolFeeRateUpdated(uint256 previousRate, uint256 ratio);\\n    event LiquidatorFeeRateUpdated(uint256 previousRate, uint256 ratio);\\n\\n    function _initialize(\\n        address _owner,\\n        uint256 _liquidationThresholdRate,\\n        uint256 _liquidationProtocolFeeRate,\\n        uint256 _liquidatorFeeRate\\n    ) internal {\\n        _transferOwnership(_owner);\\n        _updateLiquidationConfiguration(\\n            _liquidationThresholdRate,\\n            _liquidationProtocolFeeRate,\\n            _liquidatorFeeRate\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets the liquidation configuration\\n     * @return liquidationThresholdRate The liquidation threshold rate\\n     * @return liquidationProtocolFeeRate The liquidation fee received by liquidators\\n     * @return liquidatorFeeRate The liquidation protocol fee received by protocol\\n     */\\n    function getLiquidationConfiguration()\\n        external\\n        view\\n        returns (\\n            uint256 liquidationThresholdRate,\\n            uint256 liquidationProtocolFeeRate,\\n            uint256 liquidatorFeeRate\\n        )\\n    {\\n        liquidationThresholdRate = Storage.slot().liquidationThresholdRate;\\n        liquidationProtocolFeeRate = Storage.slot().liquidationProtocolFeeRate;\\n        liquidatorFeeRate = Storage.slot().liquidatorFeeRate;\\n    }\\n\\n    /**\\n     * @dev Update the liquidation configuration\\n     * @param _liquidationThresholdRate The liquidation threshold rate\\n     * @param _liquidationProtocolFeeRate The liquidation fee rate received by protocol\\n     * @param _liquidatorFeeRate The liquidation fee rate received by liquidators\\n     * @notice Triggers only be contract owner\\n     */\\n    function updateLiquidationConfiguration(\\n        uint256 _liquidationThresholdRate,\\n        uint256 _liquidationProtocolFeeRate,\\n        uint256 _liquidatorFeeRate\\n    ) external onlyOwner {\\n        _updateLiquidationConfiguration(\\n            _liquidationThresholdRate,\\n            _liquidationProtocolFeeRate,\\n            _liquidatorFeeRate\\n        );\\n    }\\n\\n    /**\\n     * @dev Update the liquidation configuration\\n     * @param _liquidationThresholdRate The liquidation threshold rate\\n     * @param _liquidationProtocolFeeRate The liquidation fee rate received by protocol\\n     * @param _liquidatorFeeRate The liquidation fee rate received by liquidators\\n     * @notice Triggers only be contract owner\\n     */\\n    function _updateLiquidationConfiguration(\\n        uint256 _liquidationThresholdRate,\\n        uint256 _liquidationProtocolFeeRate,\\n        uint256 _liquidatorFeeRate\\n    ) private {\\n        if (_liquidationThresholdRate == 0) revert InvalidLiquidationThresholdRate();\\n        if (_liquidationProtocolFeeRate > Constants.PCT_DIGIT)\\n            revert InvalidLiquidationProtocolFeeRate();\\n        if (_liquidatorFeeRate > Constants.PCT_DIGIT) revert InvalidLiquidatorFeeRate();\\n\\n        if (_liquidationThresholdRate != Storage.slot().liquidationThresholdRate) {\\n            emit AutoLiquidationThresholdRateUpdated(\\n                Storage.slot().liquidationThresholdRate,\\n                _liquidationThresholdRate\\n            );\\n            Storage.slot().liquidationThresholdRate = _liquidationThresholdRate;\\n        }\\n\\n        if (_liquidationProtocolFeeRate != Storage.slot().liquidationProtocolFeeRate) {\\n            emit LiquidationProtocolFeeRateUpdated(\\n                Storage.slot().liquidationProtocolFeeRate,\\n                _liquidationProtocolFeeRate\\n            );\\n            Storage.slot().liquidationProtocolFeeRate = _liquidationProtocolFeeRate;\\n        }\\n\\n        if (_liquidatorFeeRate != Storage.slot().liquidatorFeeRate) {\\n            Storage.slot().liquidatorFeeRate = _liquidatorFeeRate;\\n            emit LiquidatorFeeRateUpdated(Storage.slot().liquidatorFeeRate, _liquidatorFeeRate);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60371b32664c6f9fd77e126c29aad0a4b2bc794fe3e235c05c736b9b41d6c443\",\"license\":\"MIT\"},\"contracts/protocol/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../dependencies/chainlink/AggregatorV3Interface.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct PriceFeed {\\n    AggregatorV3Interface[] instances;\\n    uint256 heartbeat;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.currencyController\\\");\\n\\n    struct Storage {\\n        // Protocol currencies\\n        EnumerableSet.Bytes32Set currencies;\\n        mapping(bytes32 => uint256) haircuts;\\n        // Total cached decimals of the price feeds\\n        mapping(bytes32 => uint8) decimalsCaches;\\n        // Mapping from currency to price feed\\n        mapping(bytes32 => PriceFeed) priceFeeds;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2391452e53ba1ee96fd57919d6833317ee4bbb2977363dd4476ad3464c43d0b4\",\"license\":\"MIT\"},\"contracts/protocol/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nstruct AutoRollLog {\\n    uint256 unitPrice;\\n    uint256 lendingCompoundFactor;\\n    uint256 borrowingCompoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.genesisValueVault\\\");\\n\\n    struct Storage {\\n        mapping(bytes32 => bool) isInitialized;\\n        mapping(bytes32 => uint256) initialCompoundFactors;\\n        mapping(bytes32 => uint256) lendingCompoundFactors;\\n        mapping(bytes32 => uint256) borrowingCompoundFactors;\\n        mapping(bytes32 => uint256) currentMaturity;\\n        mapping(bytes32 => uint8) decimals;\\n        // Mapping from user to balance per currency\\n        mapping(bytes32 => mapping(address => int256)) balances;\\n        mapping(bytes32 => uint256) totalLendingSupplies;\\n        mapping(bytes32 => uint256) totalBorrowingSupplies;\\n        // Mapping from maturity balance per currency\\n        mapping(bytes32 => mapping(uint256 => int256)) maturityBalances;\\n        // Mapping from maturity to auto-roll log per currency\\n        mapping(bytes32 => mapping(uint256 => AutoRollLog)) autoRollLogs;\\n        // Mapping from user to maturity per currency\\n        mapping(bytes32 => mapping(address => uint256)) userMaturities;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x887ce7f8c0dbbd8c7f6310e109fa6bf14b5520068d299fcf224faae13bd8de46\",\"license\":\"MIT\"},\"contracts/protocol/storages/TokenVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary TokenVaultStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.tokenVault\\\");\\n\\n    struct Storage {\\n        // Liquidation threshold rate (in basis point)\\n        uint256 liquidationThresholdRate;\\n        // Liquidation fee rate received by protocol (in basis point)\\n        uint256 liquidationProtocolFeeRate;\\n        // Liquidation fee rate received by liquidators (in basis point)\\n        uint256 liquidatorFeeRate;\\n        // Currencies accepted as collateral\\n        EnumerableSet.Bytes32Set collateralCurrencies;\\n        // Mapping from currency name to token address\\n        mapping(bytes32 => address) tokenAddresses;\\n        // Mapping for used currency vaults per user.\\n        mapping(address => EnumerableSet.Bytes32Set) usedCurrencies;\\n        // Mapping from currency to total deposit amount\\n        mapping(bytes32 => uint256) totalDepositAmount;\\n        // Mapping for all deposits per users\\n        mapping(address => mapping(bytes32 => uint256)) depositAmounts;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bbb39e96efed01f6e55ae063f8d09ce485ac1c9e2b79f92f0078006a6ea1b94\",\"license\":\"MIT\"},\"contracts/protocol/storages/libraries/TransferHelperStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary TransferHelperStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.transferHelper\\\");\\n\\n    struct Storage {\\n        address nativeToken;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x711dd9a14fb337b0af411d09bcf9901ac72444b5f7ff583844a979d6c08a7249\",\"license\":\"MIT\"},\"contracts/protocol/storages/mixins/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressResolver} from \\\"../../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.mixinAddressResolver\\\");\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 => address) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44cd2358adc27b82cf3b9a498ada2646991684634ee0f3d67a42ecebd333a9d3\",\"license\":\"MIT\"},\"contracts/protocol/storages/utils/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary OwnableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.ownable\\\");\\n\\n    struct Storage {\\n        address owner;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ef8bfa06947cdb63d47248ad074ac42a1b1ba828a2c97e42486a5dbb2c03e1d\",\"license\":\"MIT\"},\"contracts/protocol/storages/utils/PausableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary PausableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.pausable\\\");\\n\\n    struct Storage {\\n        bool paused;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa32c444c8033da4a894a14b1a517f6d6943f74160bd1904c2f64e349f7aa37bd\",\"license\":\"MIT\"},\"contracts/protocol/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0x7b05f97661e6dfe1142eec9be3dcf86d1eec55ed4fb1dea4a5859f75a0c84c13\",\"license\":\"MIT\"},\"contracts/protocol/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/Context.sol\\\";\\nimport \\\"../storages/utils/OwnableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return OwnableStorage.slot().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = OwnableStorage.slot().owner;\\n        OwnableStorage.slot().owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x8638c57dbdbca880fb255fb5b11519197248e9242be4d79cd2a661d03ea3e34b\",\"license\":\"MIT\"},\"contracts/protocol/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/Context.sol\\\";\\nimport \\\"../storages/utils/PausableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return PausableStorage.slot().paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage.slot().paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage.slot().paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x1d89adc36e2b83f33f7a894ea9bf6bc8fc5d0caf455f2f9b00464cdc84dac209\",\"license\":\"MIT\"},\"contracts/protocol/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/StorageSlot.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0xdb6cbda85e2d1916be6181a6ffcee116408bfc867c2da2e25056b3fdea2e51b3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506131a7806100206000396000f3fe6080604052600436106102495760003560e01c8063590472001161013957806396994e37116100b6578063d5e190d01161007a578063d5e190d014610721578063e099765914610736578063ed6dd5141461074b578063f2fde38b14610760578063fb7bd3b414610780578063fc700810146107a057600080fd5b806396994e37146106995780639e0879c2146106ac578063b12e4410146106c1578063b1a5d12d146106e1578063ca4230311461070157600080fd5b80637d044b43116100fd5780637d044b43146106045780637d44828e146106245780638da5cb5b146106445780638e19aff314610659578063948060dd1461067957600080fd5b806359047200146105555780635bffeb661461058a5780635c975abb146105aa5780635d95df8a146105cf578063715018a6146105ef57600080fd5b806329985e5a116101c75780634ba0c9b51161018b5780634ba0c9b51461049a5780634c6aa99c146104ba578063500d2f6d146104da5780635257ed67146104fa57806354821c211461053557600080fd5b806329985e5a146104015780632af64bd31461041657806330312daa1461042b5780633d03b9da1461044b5780633f90a08e1461046d57600080fd5b80630cf7505d1161020e5780630cf7505d1461035e5780630cfe33fa1461038e5780630eadd244146103ae5780631de26e16146103ce57806325e1f09f146103e157600080fd5b8062fcf262146102945780630253cd7e146102ce578063040cf020146102fc57806304f3bcec1461031c5780630b7562be1461034957600080fd5b3661028f57600080516020613152833981519152546001600160a01b0316331461028d5760405163efd4e4e160e01b81523360048201526024015b60405180910390fd5b005b600080fd5b3480156102a057600080fd5b506102b46102af3660046129e5565b6107c0565b604080519283526020830191909152015b60405180910390f35b3480156102da57600080fd5b506102ee6102e9366004612a13565b61084e565b6040519081526020016102c5565b34801561030857600080fd5b5061028d610317366004612a3f565b6108ed565b34801561032857600080fd5b5061033161092c565b6040516001600160a01b0390911681526020016102c5565b34801561035557600080fd5b5061028d61094d565b34801561036a57600080fd5b5061037e6103793660046129e5565b610986565b60405190151581526020016102c5565b34801561039a57600080fd5b506102ee6103a9366004612a61565b6109b4565b3480156103ba57600080fd5b506102ee6103c9366004612a85565b610a6c565b61028d6103dc366004612a3f565b610ab6565b3480156103ed57600080fd5b5061037e6103fc366004612a61565b610af0565b34801561040d57600080fd5b5061028d610b7e565b34801561042257600080fd5b5061037e610d2b565b34801561043757600080fd5b5061028d610446366004612ab5565b610e91565b34801561045757600080fd5b50610460610ecb565b6040516102c59190612ae1565b34801561047957600080fd5b5061048d610488366004612b25565b610f8d565b6040516102c59190612b9a565b3480156104a657600080fd5b5061028d6104b5366004612bd4565b61103d565b3480156104c657600080fd5b506102ee6104d53660046129e5565b611103565b3480156104e657600080fd5b506102ee6104f5366004612c09565b611121565b34801561050657600080fd5b5061051a610515366004612bd4565b61126f565b604080519384526020840192909252908201526060016102c5565b34801561054157600080fd5b506102ee610550366004612a61565b61130e565b34801561056157600080fd5b50610575610570366004612cc1565b6113a6565b604080519283529015156020830152016102c5565b34801561059657600080fd5b5061028d6105a5366004612d5a565b611484565b3480156105b657600080fd5b506000805160206131328339815191525460ff1661037e565b3480156105db57600080fd5b5061037e6105ea3660046129e5565b6115fe565b3480156105fb57600080fd5b5061028d611615565b34801561061057600080fd5b506102ee61061f366004612a13565b61164e565b34801561063057600080fd5b506102ee61063f366004612a13565b61172f565b34801561065057600080fd5b506103316117ce565b34801561066557600080fd5b5061028d610674366004612d9c565b6117f6565b34801561068557600080fd5b506102ee610694366004612a61565b6118b2565b61028d6106a7366004612bd4565b611941565b3480156106b857600080fd5b5061028d61197a565b3480156106cd57600080fd5b506103316106dc3660046129e5565b6119b1565b3480156106ed57600080fd5b5061028d6106fc366004612dc1565b6119d8565b34801561070d57600080fd5b506102ee61071c366004612a61565b611b7a565b34801561072d57600080fd5b50610460611bbd565b34801561074257600080fd5b50610460611bd7565b34801561075757600080fd5b5061051a611c53565b34801561076c57600080fd5b5061028d61077b366004612a61565b611c84565b34801561078c57600080fd5b5061028d61079b366004612bd4565b611d24565b3480156107ac57600080fd5b506104606107bb366004612a61565b611db4565b604051627e793160e11b815260048101829052600090819073C9bF8443e399a2f03C542cBAFc79906d74eB5d849062fcf26290602401604080518083038186803b15801561080d57600080fd5b505af4158015610821573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108459190612e28565b91509150915091565b604051630129e6bf60e11b81526001600160a01b03831660048201526024810182905260009073C9bF8443e399a2f03C542cBAFc79906d74eB5d8490630253cd7e906044015b60206040518083038186803b1580156108ac57600080fd5b505af41580156108c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e49190612e4c565b90505b92915050565b6108f5611e46565b816108ff81610986565b61091c57604051630f4a6ccd60e21b815260040160405180910390fd5b610927338484611e99565b505050565b60006000805160206131128339815191525b546001600160a01b0316919050565b336109566117ce565b6001600160a01b03161461097c5760405162461bcd60e51b815260040161028490612e65565b6109846120c0565b565b60008061099161211f565b60009384526005016020526040909220546001600160a01b031690911415919050565b6040516354821c2160e01b81526001600160a01b03821660048201526000908190819073C9bF8443e399a2f03C542cBAFc79906d74eB5d84906354821c219060240160806040518083038186803b158015610a0e57600080fd5b505af4158015610a22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a469190612e9a565b505091509150808211610a5a576000610a64565b610a648183612ee6565b949350505050565b6040516303ab749160e21b8152600481018390526001600160a01b038216602482015260009073C9bF8443e399a2f03C542cBAFc79906d74eB5d8490630eadd24490604401610894565b610abe611e46565b81610ac881610986565b610ae557604051630f4a6ccd60e21b815260040160405180910390fd5b610927338484612143565b6040516325e1f09f60e01b81526001600160a01b038216600482015260009073C9bF8443e399a2f03C542cBAFc79906d74eB5d84906325e1f09f9060240160206040518083038186803b158015610b4657600080fd5b505af4158015610b5a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e79190612efd565b6000610b88610ecb565b905060005b8151811015610d27576000828281518110610baa57610baa612f1a565b602002602001015190506000610bcb60008051602061311283398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd91610c3c91869190605d01612f7d565b60206040518083038186803b158015610c5457600080fd5b505afa158015610c68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8c9190612f96565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a150508080610d1f90612fb3565b915050610b8d565b5050565b600080610d36610ecb565b905060005b8151811015610e88576000828281518110610d5857610d58612f1a565b60200260200101519050610d7760008051602061311283398151915290565b600082815260019190910160205260409020546001600160a01b0316600080516020613112833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b158015610de457600080fd5b505afa158015610df8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1c9190612f96565b6001600160a01b0316141580610e66575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b15610e75576000935050505090565b5080610e8081612fb3565b915050610d3b565b50600191505090565b33610e9a6117ce565b6001600160a01b031614610ec05760405162461bcd60e51b815260040161028490612e65565b6109278383836122fe565b604080516003808252608082019092526060916020820183803683370190505090507121bab93932b731bca1b7b73a3937b63632b960711b81600081518110610f1657610f16612f1a565b602002602001018181525050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600181518110610f5057610f50612f1a565b6020026020010181815250506a14995cd95c9d99519d5b9960aa1b81600281518110610f7e57610f7e612f1a565b60200260200101818152505090565b6060818067ffffffffffffffff811115610fa957610fa9612c51565b604051908082528060200260200182016040528015610fd2578160200160208202803683370190505b50915060005b8181101561103557611001858583818110610ff557610ff5612f1a565b905060200201356115fe565b83828151811061101357611013612f1a565b911515602092830291909101909101528061102d81612fb3565b915050610fd8565b505092915050565b611045611e46565b61104e33612481565b61106b576040516330de277560e21b815260040160405180910390fd5b8161107581610986565b61109257604051630f4a6ccd60e21b815260040160405180910390fd5b604051634ba0c9b560e01b815273C9bF8443e399a2f03C542cBAFc79906d74eB5d8490634ba0c9b5906110cd90879087908790600401612fce565b60006040518083038186803b1580156110e557600080fd5b505af41580156110f9573d6000803e3d6000fd5b5050505050505050565b600061110d61211f565b600092835260070160205250604090205490565b600061112b611e46565b61113433612481565b611151576040516330de277560e21b815260040160405180910390fd5b8461115b81610986565b61117857604051630f4a6ccd60e21b815260040160405180910390fd5b60405163500d2f6d60e01b8152600481018790526001600160a01b038087166024830152851660448201526064810184905273C9bF8443e399a2f03C542cBAFc79906d74eB5d849063500d2f6d9060840160206040518083038186803b1580156111e157600080fd5b505af41580156111f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112199190612e4c565b91506001600160a01b03808516908616877ff8ca259b4b82670be7501ff56ad1fc9c7cd199d3431e3c502f2c5f86884bc1506112558688612ee6565b60405190815260200160405180910390a450949350505050565b600080600073C9bF8443e399a2f03C542cBAFc79906d74eB5d84635257ed678787876040518463ffffffff1660e01b81526004016112af93929190612fce565b60606040518083038186803b1580156112c757600080fd5b505af41580156112db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ff9190612fef565b92509250925093509350939050565b6040516354821c2160e01b81526001600160a01b038216600482015260009073C9bF8443e399a2f03C542cBAFc79906d74eB5d84906354821c219060240160806040518083038186803b15801561136457600080fd5b505af4158015611378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139c9190612e9a565b5091949350505050565b60408051632910ae9d60e01b81526001600160a01b0384166004820152825160248201526020830151604482015290820151606482015260608201516084820152608082015160a482015260a082015160c482015260c082015160e4820152600090819073C9bF8443e399a2f03C542cBAFc79906d74eB5d8490632910ae9d9061010401604080518083038186803b15801561144157600080fd5b505af4158015611455573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611479919061301d565b915091509250929050565b3361148d6117ce565b6001600160a01b0316146114b35760405162461bcd60e51b815260040161028490612e65565b6114bb6124fb565b6001600160a01b0316631eae0893846040518263ffffffff1660e01b81526004016114e891815260200190565b60206040518083038186803b15801561150057600080fd5b505afa158015611514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115389190612efd565b61155557604051631eb3268560e31b815260040160405180910390fd5b8161155e61211f565b60008581526005919091016020526040902080546001600160a01b0319166001600160a01b039290921691909117905580156115ab576115a9836115a061211f565b60030190612505565b505b604080518481526001600160a01b0384166020820152821515918101919091527ff776c30df345d55df252bb5181a0c2bb23d601166606790a6f1b938d7e158503906060015b60405180910390a1505050565b60006108e78261160c61211f565b60030190612511565b3361161e6117ce565b6001600160a01b0316146116445760405162461bcd60e51b815260040161028490612e65565b6109846000612529565b600061165933612481565b611676576040516330de277560e21b815260040160405180910390fd5b8161168081610986565b61169d57604051630f4a6ccd60e21b815260040160405180910390fd5b604051637d044b4360e01b81526001600160a01b03851660048201526024810184905273C9bF8443e399a2f03C542cBAFc79906d74eB5d8490637d044b439060440160206040518083038186803b1580156116f757600080fd5b505af415801561170b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a649190612e4c565b604051633ea2414760e11b81526001600160a01b03831660048201526024810182905260009073C9bF8443e399a2f03C542cBAFc79906d74eB5d8490637d44828e9060440160606040518083038186803b15801561178c57600080fd5b505af41580156117a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c49190612fef565b5090949350505050565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa61093e565b336117ff6117ce565b6001600160a01b0316146118255760405162461bcd60e51b815260040161028490612e65565b8161182f81610986565b61184c57604051630f4a6ccd60e21b815260040160405180910390fd5b81156118645761185e836115a061211f565b5061187b565b6118798361187061211f565b6003019061259a565b505b6040805184815283151560208201527f97caf2b3b2f0aa460ca08b20c07f7a43ccf688e2f3b7179f2cf9113fb892bf8191016115f1565b60405163948060dd60e01b81526001600160a01b038216600482015260009073C9bF8443e399a2f03C542cBAFc79906d74eB5d849063948060dd906024015b60206040518083038186803b15801561190957600080fd5b505af415801561191d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e79190612e4c565b611949611e46565b61195233612481565b61196f576040516330de277560e21b815260040160405180910390fd5b610927838383612143565b336119836117ce565b6001600160a01b0316146119a95760405162461bcd60e51b815260040161028490612e65565b6109846125a6565b60006119bb61211f565b60009283526005016020525060409020546001600160a01b031690565b600054610100900460ff16158080156119f85750600054600160ff909116105b80611a125750303b158015611a12575060005460ff166001145b611a755760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610284565b6000805460ff191660011790558015611a98576000805461ff0019166101001790555b6000611aa26125ef565b6001600160a01b03161415611b045760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b6064820152608401610284565b611b0d87612529565b611b1686612617565b611b1f82612680565b611b2b87868686612707565b8015611b71576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b60405163ca42303160e01b81526001600160a01b038216600482015260009073C9bF8443e399a2f03C542cBAFc79906d74eB5d849063ca423031906024016118f1565b6060611bd2611bca61211f565b600301612721565b905090565b6040805160028082526060808301845292602083019080368337019050509050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600081518110611c2557611c25612f1a565b6020026020010181815250506a14995cd95c9d99519d5b9960aa1b81600181518110610f7e57610f7e612f1a565b6000806000611c6061211f565b549250611c6b61211f565b600101549150611c7961211f565b600201549050909192565b33611c8d6117ce565b6001600160a01b031614611cb35760405162461bcd60e51b815260040161028490612e65565b6001600160a01b038116611d185760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610284565b611d2181612529565b50565b611d2c611e46565b611d3533612481565b611d52576040516330de277560e21b815260040160405180910390fd5b81611d5c81610986565b611d7957604051630f4a6ccd60e21b815260040160405180910390fd5b604051633edef4ed60e21b815273C9bF8443e399a2f03C542cBAFc79906d74eB5d849063fb7bd3b4906110cd90879087908790600401612fce565b604051630fc7008160e41b81526001600160a01b038216600482015260609073C9bF8443e399a2f03C542cBAFc79906d74eB5d849063fc7008109060240160006040518083038186803b158015611e0a57600080fd5b505af4158015611e1e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108e79190810190613042565b6000805160206131328339815191525460ff16156109845760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610284565b80611eb75760405163162908e360e11b815260040160405180910390fd5b611ebf61272c565b60405163862fd6e560e01b81526001600160a01b038581166004830152919091169063862fd6e59060240160206040518083038186803b158015611f0257600080fd5b505afa158015611f16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3a9190612efd565b15611f5857604051631f6d627d60e11b815260040160405180910390fd5b611f6061272c565b604051639519832b60e01b8152600481018490526001600160a01b0385811660248301529190911690639519832b90604401602060405180830381600087803b158015611fac57600080fd5b505af1158015611fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe49190612e4c565b5060405163148b8b9d60e11b815260009073C9bF8443e399a2f03C542cBAFc79906d74eB5d8490632917173a9061202390879087908790600401612fce565b60206040518083038186803b15801561203b57600080fd5b505af415801561204f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120739190612e4c565b60408051858152602081018390529192506001600160a01b038616917fc3ded2be7db21b1af963f267d27750e4a15f174547d88b886b9bda43e2c6fa32910160405180910390a250505050565b6120c8612736565b600080516020613132833981519152805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b7f53832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a831790565b801580612196575061218a61215661211f565b60008481526005919091016020526040902054600080516020613152833981519152546001600160a01b0390811691161490565b80156121965750348114155b156121b45760405163162908e360e11b815260040160405180910390fd5b6121bc61272c565b6001600160a01b031663d1cc99766040518163ffffffff1660e01b815260040160206040518083038186803b1580156121f457600080fd5b505afa158015612208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222c9190612efd565b1561224a576040516319a90b2f60e21b815260040160405180910390fd5b604051631d64487f60e31b815273C9bF8443e399a2f03C542cBAFc79906d74eB5d849063eb2243f89061228590869086908690600401612fce565b60006040518083038186803b15801561229d57600080fd5b505af41580156122b1573d6000803e3d6000fd5b505060408051858152602081018590526001600160a01b03871693507f19dacbf83c5de6658e14cbf7bcae5c15eca2eedecf1c66fbca928e4d351bea0f92500160405180910390a2505050565b8261231c57604051630821f57960e31b815260040160405180910390fd5b61271082111561233f576040516370a4af3d60e01b815260040160405180910390fd5b61271081111561236257604051631da7276f60e01b815260040160405180910390fd5b61236a61211f565b5483146123bd577fd3353684d64f1c80498433d8407c96e6bbeb1ec88b6200ec97d2c910fdbd0da461239a61211f565b5460408051918252602082018690520160405180910390a1826123bb61211f565b555b6123c561211f565b600101548214612421577f651b17c8e9402610e6210cfaa5b252d2186f8a16adf58c9c0fd5793bc4ea9b1f6123f861211f565b6001015460408051918252602082018590520160405180910390a18161241c61211f565b600101555b61242961211f565b600201548114610927578061243c61211f565b600201557f7e8f030f9238551b066874b952f0c6ba811ba426ab231ba4825421d5d8f5cd9561246961211f565b600201546040805191825260208201849052016115f1565b60008061248c611bd7565b905060005b81518110156124f1576124bc8282815181106124af576124af612f1a565b602002602001015161278c565b6001600160a01b0316846001600160a01b031614156124df575060019392505050565b806124e981612fb3565b915050612491565b5060009392505050565b6000611bd2612797565b60006108e483836127b7565b600081815260018301602052604081205415156108e4565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006108e48383612806565b6125ae611e46565b600080516020613132833981519152805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833612102565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61093e565b600080516020613112833981519152546001600160a01b03161561264e576040516304b79d6360e51b815260040160405180910390fd5b806000805160206131128339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b600080516020613152833981519152546001600160a01b0316156126f25760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a20416c726561647920696e697469616c696044820152621e995960ea1b6064820152608401610284565b8060008051602061315283398151915261265f565b61271084612529565b61271b8383836122fe565b50505050565b60606108e7826128f9565b6000611bd2612955565b6000805160206131328339815191525460ff166109845760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610284565b60006108e782612976565b6000611bd27121bab93932b731bca1b7b73a3937b63632b960711b612976565b60008181526001830160205260408120546127fe575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108e7565b5060006108e7565b600081815260018301602052604081205480156128ef57600061282a600183612ee6565b855490915060009061283e90600190612ee6565b90508181146128a357600086600001828154811061285e5761285e612f1a565b906000526020600020015490508087600001848154811061288157612881612f1a565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806128b4576128b46130e8565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506108e7565b60009150506108e7565b60608160000180548060200260200160405190810160405280929190818152602001828054801561294957602002820191906000526020600020905b815481526020019060010190808311612935575b50505050509050919050565b6000611bd2762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b5b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260408120546001600160a01b0316806108e75760408051602081018590520160408051601f19818403018152908290526346e2ec9360e01b8252610284916004016130fe565b6000602082840312156129f757600080fd5b5035919050565b6001600160a01b0381168114611d2157600080fd5b60008060408385031215612a2657600080fd5b8235612a31816129fe565b946020939093013593505050565b60008060408385031215612a5257600080fd5b50508035926020909101359150565b600060208284031215612a7357600080fd5b8135612a7e816129fe565b9392505050565b60008060408385031215612a9857600080fd5b823591506020830135612aaa816129fe565b809150509250929050565b600080600060608486031215612aca57600080fd5b505081359360208301359350604090920135919050565b6020808252825182820181905260009190848201906040850190845b81811015612b1957835183529284019291840191600101612afd565b50909695505050505050565b60008060208385031215612b3857600080fd5b823567ffffffffffffffff80821115612b5057600080fd5b818501915085601f830112612b6457600080fd5b813581811115612b7357600080fd5b8660208260051b8501011115612b8857600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015612b19578351151583529284019291840191600101612bb6565b600080600060608486031215612be957600080fd5b8335612bf4816129fe565b95602085013595506040909401359392505050565b60008060008060808587031215612c1f57600080fd5b843593506020850135612c31816129fe565b92506040850135612c41816129fe565b9396929550929360600135925050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715612c8a57612c8a612c51565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612cb957612cb9612c51565b604052919050565b600080828403610100811215612cd657600080fd5b8335612ce1816129fe565b925060e0601f1982011215612cf557600080fd5b50612cfe612c67565b6020840135815260408401356020820152606084013560408201526080840135606082015260a0840135608082015260c084013560a082015260e084013560c0820152809150509250929050565b8015158114611d2157600080fd5b600080600060608486031215612d6f57600080fd5b833592506020840135612d81816129fe565b91506040840135612d9181612d4c565b809150509250925092565b60008060408385031215612daf57600080fd5b823591506020830135612aaa81612d4c565b60008060008060008060c08789031215612dda57600080fd5b8635612de5816129fe565b95506020870135612df5816129fe565b945060408701359350606087013592506080870135915060a0870135612e1a816129fe565b809150509295509295509295565b60008060408385031215612e3b57600080fd5b505080516020909101519092909150565b600060208284031215612e5e57600080fd5b5051919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008060008060808587031215612eb057600080fd5b505082516020840151604085015160609095015191969095509092509050565b634e487b7160e01b600052601160045260246000fd5b600082821015612ef857612ef8612ed0565b500390565b600060208284031215612f0f57600080fd5b8151612a7e81612d4c565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b81811015612f5657602081850181015186830182015201612f3a565b81811115612f68576000602083870101525b50601f01601f19169290920160200192915050565b828152604060208201526000610a646040830184612f30565b600060208284031215612fa857600080fd5b8151612a7e816129fe565b6000600019821415612fc757612fc7612ed0565b5060010190565b6001600160a01b039390931683526020830191909152604082015260600190565b60008060006060848603121561300457600080fd5b8351925060208401519150604084015190509250925092565b6000806040838503121561303057600080fd5b825191506020830151612aaa81612d4c565b6000602080838503121561305557600080fd5b825167ffffffffffffffff8082111561306d57600080fd5b818501915085601f83011261308157600080fd5b81518181111561309357613093612c51565b8060051b91506130a4848301612c90565b81815291830184019184810190888411156130be57600080fd5b938501935b838510156130dc578451825293850193908501906130c3565b98975050505050505050565b634e487b7160e01b600052603160045260246000fd5b6020815260006108e46020830184612f3056fe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240189c789132bdb3678132848a8dcd780bffd2b1abdce3984c522ac1d8aeb48f05f36f969d660e14559aec53d066903ba87981d0679d31bf1d3793a220e70e02808ba2646970667358221220d4c0432b847d75aa89ca0fd53c14589112128c4cec91558b1069c3f16a80302864736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102495760003560e01c8063590472001161013957806396994e37116100b6578063d5e190d01161007a578063d5e190d014610721578063e099765914610736578063ed6dd5141461074b578063f2fde38b14610760578063fb7bd3b414610780578063fc700810146107a057600080fd5b806396994e37146106995780639e0879c2146106ac578063b12e4410146106c1578063b1a5d12d146106e1578063ca4230311461070157600080fd5b80637d044b43116100fd5780637d044b43146106045780637d44828e146106245780638da5cb5b146106445780638e19aff314610659578063948060dd1461067957600080fd5b806359047200146105555780635bffeb661461058a5780635c975abb146105aa5780635d95df8a146105cf578063715018a6146105ef57600080fd5b806329985e5a116101c75780634ba0c9b51161018b5780634ba0c9b51461049a5780634c6aa99c146104ba578063500d2f6d146104da5780635257ed67146104fa57806354821c211461053557600080fd5b806329985e5a146104015780632af64bd31461041657806330312daa1461042b5780633d03b9da1461044b5780633f90a08e1461046d57600080fd5b80630cf7505d1161020e5780630cf7505d1461035e5780630cfe33fa1461038e5780630eadd244146103ae5780631de26e16146103ce57806325e1f09f146103e157600080fd5b8062fcf262146102945780630253cd7e146102ce578063040cf020146102fc57806304f3bcec1461031c5780630b7562be1461034957600080fd5b3661028f57600080516020613152833981519152546001600160a01b0316331461028d5760405163efd4e4e160e01b81523360048201526024015b60405180910390fd5b005b600080fd5b3480156102a057600080fd5b506102b46102af3660046129e5565b6107c0565b604080519283526020830191909152015b60405180910390f35b3480156102da57600080fd5b506102ee6102e9366004612a13565b61084e565b6040519081526020016102c5565b34801561030857600080fd5b5061028d610317366004612a3f565b6108ed565b34801561032857600080fd5b5061033161092c565b6040516001600160a01b0390911681526020016102c5565b34801561035557600080fd5b5061028d61094d565b34801561036a57600080fd5b5061037e6103793660046129e5565b610986565b60405190151581526020016102c5565b34801561039a57600080fd5b506102ee6103a9366004612a61565b6109b4565b3480156103ba57600080fd5b506102ee6103c9366004612a85565b610a6c565b61028d6103dc366004612a3f565b610ab6565b3480156103ed57600080fd5b5061037e6103fc366004612a61565b610af0565b34801561040d57600080fd5b5061028d610b7e565b34801561042257600080fd5b5061037e610d2b565b34801561043757600080fd5b5061028d610446366004612ab5565b610e91565b34801561045757600080fd5b50610460610ecb565b6040516102c59190612ae1565b34801561047957600080fd5b5061048d610488366004612b25565b610f8d565b6040516102c59190612b9a565b3480156104a657600080fd5b5061028d6104b5366004612bd4565b61103d565b3480156104c657600080fd5b506102ee6104d53660046129e5565b611103565b3480156104e657600080fd5b506102ee6104f5366004612c09565b611121565b34801561050657600080fd5b5061051a610515366004612bd4565b61126f565b604080519384526020840192909252908201526060016102c5565b34801561054157600080fd5b506102ee610550366004612a61565b61130e565b34801561056157600080fd5b50610575610570366004612cc1565b6113a6565b604080519283529015156020830152016102c5565b34801561059657600080fd5b5061028d6105a5366004612d5a565b611484565b3480156105b657600080fd5b506000805160206131328339815191525460ff1661037e565b3480156105db57600080fd5b5061037e6105ea3660046129e5565b6115fe565b3480156105fb57600080fd5b5061028d611615565b34801561061057600080fd5b506102ee61061f366004612a13565b61164e565b34801561063057600080fd5b506102ee61063f366004612a13565b61172f565b34801561065057600080fd5b506103316117ce565b34801561066557600080fd5b5061028d610674366004612d9c565b6117f6565b34801561068557600080fd5b506102ee610694366004612a61565b6118b2565b61028d6106a7366004612bd4565b611941565b3480156106b857600080fd5b5061028d61197a565b3480156106cd57600080fd5b506103316106dc3660046129e5565b6119b1565b3480156106ed57600080fd5b5061028d6106fc366004612dc1565b6119d8565b34801561070d57600080fd5b506102ee61071c366004612a61565b611b7a565b34801561072d57600080fd5b50610460611bbd565b34801561074257600080fd5b50610460611bd7565b34801561075757600080fd5b5061051a611c53565b34801561076c57600080fd5b5061028d61077b366004612a61565b611c84565b34801561078c57600080fd5b5061028d61079b366004612bd4565b611d24565b3480156107ac57600080fd5b506104606107bb366004612a61565b611db4565b604051627e793160e11b815260048101829052600090819073__$e77f6d4722b46e0b0a57517726dbfd997e$__9062fcf26290602401604080518083038186803b15801561080d57600080fd5b505af4158015610821573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108459190612e28565b91509150915091565b604051630129e6bf60e11b81526001600160a01b03831660048201526024810182905260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__90630253cd7e906044015b60206040518083038186803b1580156108ac57600080fd5b505af41580156108c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e49190612e4c565b90505b92915050565b6108f5611e46565b816108ff81610986565b61091c57604051630f4a6ccd60e21b815260040160405180910390fd5b610927338484611e99565b505050565b60006000805160206131128339815191525b546001600160a01b0316919050565b336109566117ce565b6001600160a01b03161461097c5760405162461bcd60e51b815260040161028490612e65565b6109846120c0565b565b60008061099161211f565b60009384526005016020526040909220546001600160a01b031690911415919050565b6040516354821c2160e01b81526001600160a01b03821660048201526000908190819073__$e77f6d4722b46e0b0a57517726dbfd997e$__906354821c219060240160806040518083038186803b158015610a0e57600080fd5b505af4158015610a22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a469190612e9a565b505091509150808211610a5a576000610a64565b610a648183612ee6565b949350505050565b6040516303ab749160e21b8152600481018390526001600160a01b038216602482015260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__90630eadd24490604401610894565b610abe611e46565b81610ac881610986565b610ae557604051630f4a6ccd60e21b815260040160405180910390fd5b610927338484612143565b6040516325e1f09f60e01b81526001600160a01b038216600482015260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__906325e1f09f9060240160206040518083038186803b158015610b4657600080fd5b505af4158015610b5a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e79190612efd565b6000610b88610ecb565b905060005b8151811015610d27576000828281518110610baa57610baa612f1a565b602002602001015190506000610bcb60008051602061311283398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd91610c3c91869190605d01612f7d565b60206040518083038186803b158015610c5457600080fd5b505afa158015610c68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8c9190612f96565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a150508080610d1f90612fb3565b915050610b8d565b5050565b600080610d36610ecb565b905060005b8151811015610e88576000828281518110610d5857610d58612f1a565b60200260200101519050610d7760008051602061311283398151915290565b600082815260019190910160205260409020546001600160a01b0316600080516020613112833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b158015610de457600080fd5b505afa158015610df8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1c9190612f96565b6001600160a01b0316141580610e66575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b15610e75576000935050505090565b5080610e8081612fb3565b915050610d3b565b50600191505090565b33610e9a6117ce565b6001600160a01b031614610ec05760405162461bcd60e51b815260040161028490612e65565b6109278383836122fe565b604080516003808252608082019092526060916020820183803683370190505090507121bab93932b731bca1b7b73a3937b63632b960711b81600081518110610f1657610f16612f1a565b602002602001018181525050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600181518110610f5057610f50612f1a565b6020026020010181815250506a14995cd95c9d99519d5b9960aa1b81600281518110610f7e57610f7e612f1a565b60200260200101818152505090565b6060818067ffffffffffffffff811115610fa957610fa9612c51565b604051908082528060200260200182016040528015610fd2578160200160208202803683370190505b50915060005b8181101561103557611001858583818110610ff557610ff5612f1a565b905060200201356115fe565b83828151811061101357611013612f1a565b911515602092830291909101909101528061102d81612fb3565b915050610fd8565b505092915050565b611045611e46565b61104e33612481565b61106b576040516330de277560e21b815260040160405180910390fd5b8161107581610986565b61109257604051630f4a6ccd60e21b815260040160405180910390fd5b604051634ba0c9b560e01b815273__$e77f6d4722b46e0b0a57517726dbfd997e$__90634ba0c9b5906110cd90879087908790600401612fce565b60006040518083038186803b1580156110e557600080fd5b505af41580156110f9573d6000803e3d6000fd5b5050505050505050565b600061110d61211f565b600092835260070160205250604090205490565b600061112b611e46565b61113433612481565b611151576040516330de277560e21b815260040160405180910390fd5b8461115b81610986565b61117857604051630f4a6ccd60e21b815260040160405180910390fd5b60405163500d2f6d60e01b8152600481018790526001600160a01b038087166024830152851660448201526064810184905273__$e77f6d4722b46e0b0a57517726dbfd997e$__9063500d2f6d9060840160206040518083038186803b1580156111e157600080fd5b505af41580156111f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112199190612e4c565b91506001600160a01b03808516908616877ff8ca259b4b82670be7501ff56ad1fc9c7cd199d3431e3c502f2c5f86884bc1506112558688612ee6565b60405190815260200160405180910390a450949350505050565b600080600073__$e77f6d4722b46e0b0a57517726dbfd997e$__635257ed678787876040518463ffffffff1660e01b81526004016112af93929190612fce565b60606040518083038186803b1580156112c757600080fd5b505af41580156112db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ff9190612fef565b92509250925093509350939050565b6040516354821c2160e01b81526001600160a01b038216600482015260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__906354821c219060240160806040518083038186803b15801561136457600080fd5b505af4158015611378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139c9190612e9a565b5091949350505050565b60408051632910ae9d60e01b81526001600160a01b0384166004820152825160248201526020830151604482015290820151606482015260608201516084820152608082015160a482015260a082015160c482015260c082015160e4820152600090819073__$e77f6d4722b46e0b0a57517726dbfd997e$__90632910ae9d9061010401604080518083038186803b15801561144157600080fd5b505af4158015611455573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611479919061301d565b915091509250929050565b3361148d6117ce565b6001600160a01b0316146114b35760405162461bcd60e51b815260040161028490612e65565b6114bb6124fb565b6001600160a01b0316631eae0893846040518263ffffffff1660e01b81526004016114e891815260200190565b60206040518083038186803b15801561150057600080fd5b505afa158015611514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115389190612efd565b61155557604051631eb3268560e31b815260040160405180910390fd5b8161155e61211f565b60008581526005919091016020526040902080546001600160a01b0319166001600160a01b039290921691909117905580156115ab576115a9836115a061211f565b60030190612505565b505b604080518481526001600160a01b0384166020820152821515918101919091527ff776c30df345d55df252bb5181a0c2bb23d601166606790a6f1b938d7e158503906060015b60405180910390a1505050565b60006108e78261160c61211f565b60030190612511565b3361161e6117ce565b6001600160a01b0316146116445760405162461bcd60e51b815260040161028490612e65565b6109846000612529565b600061165933612481565b611676576040516330de277560e21b815260040160405180910390fd5b8161168081610986565b61169d57604051630f4a6ccd60e21b815260040160405180910390fd5b604051637d044b4360e01b81526001600160a01b03851660048201526024810184905273__$e77f6d4722b46e0b0a57517726dbfd997e$__90637d044b439060440160206040518083038186803b1580156116f757600080fd5b505af415801561170b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a649190612e4c565b604051633ea2414760e11b81526001600160a01b03831660048201526024810182905260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__90637d44828e9060440160606040518083038186803b15801561178c57600080fd5b505af41580156117a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c49190612fef565b5090949350505050565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa61093e565b336117ff6117ce565b6001600160a01b0316146118255760405162461bcd60e51b815260040161028490612e65565b8161182f81610986565b61184c57604051630f4a6ccd60e21b815260040160405180910390fd5b81156118645761185e836115a061211f565b5061187b565b6118798361187061211f565b6003019061259a565b505b6040805184815283151560208201527f97caf2b3b2f0aa460ca08b20c07f7a43ccf688e2f3b7179f2cf9113fb892bf8191016115f1565b60405163948060dd60e01b81526001600160a01b038216600482015260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__9063948060dd906024015b60206040518083038186803b15801561190957600080fd5b505af415801561191d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e79190612e4c565b611949611e46565b61195233612481565b61196f576040516330de277560e21b815260040160405180910390fd5b610927838383612143565b336119836117ce565b6001600160a01b0316146119a95760405162461bcd60e51b815260040161028490612e65565b6109846125a6565b60006119bb61211f565b60009283526005016020525060409020546001600160a01b031690565b600054610100900460ff16158080156119f85750600054600160ff909116105b80611a125750303b158015611a12575060005460ff166001145b611a755760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610284565b6000805460ff191660011790558015611a98576000805461ff0019166101001790555b6000611aa26125ef565b6001600160a01b03161415611b045760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b6064820152608401610284565b611b0d87612529565b611b1686612617565b611b1f82612680565b611b2b87868686612707565b8015611b71576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b60405163ca42303160e01b81526001600160a01b038216600482015260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__9063ca423031906024016118f1565b6060611bd2611bca61211f565b600301612721565b905090565b6040805160028082526060808301845292602083019080368337019050509050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600081518110611c2557611c25612f1a565b6020026020010181815250506a14995cd95c9d99519d5b9960aa1b81600181518110610f7e57610f7e612f1a565b6000806000611c6061211f565b549250611c6b61211f565b600101549150611c7961211f565b600201549050909192565b33611c8d6117ce565b6001600160a01b031614611cb35760405162461bcd60e51b815260040161028490612e65565b6001600160a01b038116611d185760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610284565b611d2181612529565b50565b611d2c611e46565b611d3533612481565b611d52576040516330de277560e21b815260040160405180910390fd5b81611d5c81610986565b611d7957604051630f4a6ccd60e21b815260040160405180910390fd5b604051633edef4ed60e21b815273__$e77f6d4722b46e0b0a57517726dbfd997e$__9063fb7bd3b4906110cd90879087908790600401612fce565b604051630fc7008160e41b81526001600160a01b038216600482015260609073__$e77f6d4722b46e0b0a57517726dbfd997e$__9063fc7008109060240160006040518083038186803b158015611e0a57600080fd5b505af4158015611e1e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108e79190810190613042565b6000805160206131328339815191525460ff16156109845760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610284565b80611eb75760405163162908e360e11b815260040160405180910390fd5b611ebf61272c565b60405163862fd6e560e01b81526001600160a01b038581166004830152919091169063862fd6e59060240160206040518083038186803b158015611f0257600080fd5b505afa158015611f16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3a9190612efd565b15611f5857604051631f6d627d60e11b815260040160405180910390fd5b611f6061272c565b604051639519832b60e01b8152600481018490526001600160a01b0385811660248301529190911690639519832b90604401602060405180830381600087803b158015611fac57600080fd5b505af1158015611fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe49190612e4c565b5060405163148b8b9d60e11b815260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__90632917173a9061202390879087908790600401612fce565b60206040518083038186803b15801561203b57600080fd5b505af415801561204f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120739190612e4c565b60408051858152602081018390529192506001600160a01b038616917fc3ded2be7db21b1af963f267d27750e4a15f174547d88b886b9bda43e2c6fa32910160405180910390a250505050565b6120c8612736565b600080516020613132833981519152805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b7f53832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a831790565b801580612196575061218a61215661211f565b60008481526005919091016020526040902054600080516020613152833981519152546001600160a01b0390811691161490565b80156121965750348114155b156121b45760405163162908e360e11b815260040160405180910390fd5b6121bc61272c565b6001600160a01b031663d1cc99766040518163ffffffff1660e01b815260040160206040518083038186803b1580156121f457600080fd5b505afa158015612208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222c9190612efd565b1561224a576040516319a90b2f60e21b815260040160405180910390fd5b604051631d64487f60e31b815273__$e77f6d4722b46e0b0a57517726dbfd997e$__9063eb2243f89061228590869086908690600401612fce565b60006040518083038186803b15801561229d57600080fd5b505af41580156122b1573d6000803e3d6000fd5b505060408051858152602081018590526001600160a01b03871693507f19dacbf83c5de6658e14cbf7bcae5c15eca2eedecf1c66fbca928e4d351bea0f92500160405180910390a2505050565b8261231c57604051630821f57960e31b815260040160405180910390fd5b61271082111561233f576040516370a4af3d60e01b815260040160405180910390fd5b61271081111561236257604051631da7276f60e01b815260040160405180910390fd5b61236a61211f565b5483146123bd577fd3353684d64f1c80498433d8407c96e6bbeb1ec88b6200ec97d2c910fdbd0da461239a61211f565b5460408051918252602082018690520160405180910390a1826123bb61211f565b555b6123c561211f565b600101548214612421577f651b17c8e9402610e6210cfaa5b252d2186f8a16adf58c9c0fd5793bc4ea9b1f6123f861211f565b6001015460408051918252602082018590520160405180910390a18161241c61211f565b600101555b61242961211f565b600201548114610927578061243c61211f565b600201557f7e8f030f9238551b066874b952f0c6ba811ba426ab231ba4825421d5d8f5cd9561246961211f565b600201546040805191825260208201849052016115f1565b60008061248c611bd7565b905060005b81518110156124f1576124bc8282815181106124af576124af612f1a565b602002602001015161278c565b6001600160a01b0316846001600160a01b031614156124df575060019392505050565b806124e981612fb3565b915050612491565b5060009392505050565b6000611bd2612797565b60006108e483836127b7565b600081815260018301602052604081205415156108e4565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006108e48383612806565b6125ae611e46565b600080516020613132833981519152805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833612102565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61093e565b600080516020613112833981519152546001600160a01b03161561264e576040516304b79d6360e51b815260040160405180910390fd5b806000805160206131128339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b600080516020613152833981519152546001600160a01b0316156126f25760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a20416c726561647920696e697469616c696044820152621e995960ea1b6064820152608401610284565b8060008051602061315283398151915261265f565b61271084612529565b61271b8383836122fe565b50505050565b60606108e7826128f9565b6000611bd2612955565b6000805160206131328339815191525460ff166109845760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610284565b60006108e782612976565b6000611bd27121bab93932b731bca1b7b73a3937b63632b960711b612976565b60008181526001830160205260408120546127fe575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108e7565b5060006108e7565b600081815260018301602052604081205480156128ef57600061282a600183612ee6565b855490915060009061283e90600190612ee6565b90508181146128a357600086600001828154811061285e5761285e612f1a565b906000526020600020015490508087600001848154811061288157612881612f1a565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806128b4576128b46130e8565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506108e7565b60009150506108e7565b60608160000180548060200260200160405190810160405280929190818152602001828054801561294957602002820191906000526020600020905b815481526020019060010190808311612935575b50505050509050919050565b6000611bd2762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b5b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260408120546001600160a01b0316806108e75760408051602081018590520160408051601f19818403018152908290526346e2ec9360e01b8252610284916004016130fe565b6000602082840312156129f757600080fd5b5035919050565b6001600160a01b0381168114611d2157600080fd5b60008060408385031215612a2657600080fd5b8235612a31816129fe565b946020939093013593505050565b60008060408385031215612a5257600080fd5b50508035926020909101359150565b600060208284031215612a7357600080fd5b8135612a7e816129fe565b9392505050565b60008060408385031215612a9857600080fd5b823591506020830135612aaa816129fe565b809150509250929050565b600080600060608486031215612aca57600080fd5b505081359360208301359350604090920135919050565b6020808252825182820181905260009190848201906040850190845b81811015612b1957835183529284019291840191600101612afd565b50909695505050505050565b60008060208385031215612b3857600080fd5b823567ffffffffffffffff80821115612b5057600080fd5b818501915085601f830112612b6457600080fd5b813581811115612b7357600080fd5b8660208260051b8501011115612b8857600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015612b19578351151583529284019291840191600101612bb6565b600080600060608486031215612be957600080fd5b8335612bf4816129fe565b95602085013595506040909401359392505050565b60008060008060808587031215612c1f57600080fd5b843593506020850135612c31816129fe565b92506040850135612c41816129fe565b9396929550929360600135925050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715612c8a57612c8a612c51565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612cb957612cb9612c51565b604052919050565b600080828403610100811215612cd657600080fd5b8335612ce1816129fe565b925060e0601f1982011215612cf557600080fd5b50612cfe612c67565b6020840135815260408401356020820152606084013560408201526080840135606082015260a0840135608082015260c084013560a082015260e084013560c0820152809150509250929050565b8015158114611d2157600080fd5b600080600060608486031215612d6f57600080fd5b833592506020840135612d81816129fe565b91506040840135612d9181612d4c565b809150509250925092565b60008060408385031215612daf57600080fd5b823591506020830135612aaa81612d4c565b60008060008060008060c08789031215612dda57600080fd5b8635612de5816129fe565b95506020870135612df5816129fe565b945060408701359350606087013592506080870135915060a0870135612e1a816129fe565b809150509295509295509295565b60008060408385031215612e3b57600080fd5b505080516020909101519092909150565b600060208284031215612e5e57600080fd5b5051919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008060008060808587031215612eb057600080fd5b505082516020840151604085015160609095015191969095509092509050565b634e487b7160e01b600052601160045260246000fd5b600082821015612ef857612ef8612ed0565b500390565b600060208284031215612f0f57600080fd5b8151612a7e81612d4c565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b81811015612f5657602081850181015186830182015201612f3a565b81811115612f68576000602083870101525b50601f01601f19169290920160200192915050565b828152604060208201526000610a646040830184612f30565b600060208284031215612fa857600080fd5b8151612a7e816129fe565b6000600019821415612fc757612fc7612ed0565b5060010190565b6001600160a01b039390931683526020830191909152604082015260600190565b60008060006060848603121561300457600080fd5b8351925060208401519150604084015190509250925092565b6000806040838503121561303057600080fd5b825191506020830151612aaa81612d4c565b6000602080838503121561305557600080fd5b825167ffffffffffffffff8082111561306d57600080fd5b818501915085601f83011261308157600080fd5b81518181111561309357613093612c51565b8060051b91506130a4848301612c90565b81815291830184019184810190888411156130be57600080fd5b938501935b838510156130dc578451825293850193908501906130c3565b98975050505050505050565b634e487b7160e01b600052603160045260246000fd5b6020815260006108e46020830184612f3056fe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240189c789132bdb3678132848a8dcd780bffd2b1abdce3984c522ac1d8aeb48f05f36f969d660e14559aec53d066903ba87981d0679d31bf1d3793a220e70e02808ba2646970667358221220d4c0432b847d75aa89ca0fd53c14589112128c4cec91558b1069c3f16a80302864736f6c63430008090033",
  "libraries": {
    "DepositManagementLogic": "0xC9bF8443e399a2f03C542cBAFc79906d74eB5d84"
  },
  "implementation": "0x894058E10C870DB83bE405F17983fb2feE71615e",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptedContracts()": {
        "details": "The contact name listed in this method is also needed to be listed `requiredContracts` method."
      },
      "addDepositAmount(address,bytes32,uint256)": {
        "details": "Adds deposit amount.",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "calculateCoverage(address,(bytes32,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "params": {
          "_additionalFunds": "Additional funds for calculating the coverage",
          "_user": "User's address"
        },
        "returns": {
          "coverage": "The rate of collateral used",
          "isInsufficientDepositAmount": "The boolean if the lent amount in the selected currency is insufficient for the deposit amount or not"
        }
      },
      "calculateLiquidationFees(uint256)": {
        "params": {
          "_amount": "Liquidation amount"
        },
        "returns": {
          "liquidatorFee": "Liquidation fee amount received by liquidators",
          "protocolFee": "Liquidation fee amount received by protocol"
        }
      },
      "deposit(bytes32,uint256)": {
        "details": "Deposits funds by the caller into collateral.",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32"
        }
      },
      "depositFrom(address,bytes32,uint256)": {
        "details": "Deposits funds by the `from` into collateral.",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32",
          "_from": "user's address"
        }
      },
      "executeForcedReset(address,bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "getCollateralAmount(address,bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "amount": "The collateral amount"
        }
      },
      "getCollateralCurrencies()": {
        "returns": {
          "_0": "Array of the currency accepted as collateral"
        }
      },
      "getCoverage(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "coverage": "The rate of collateral used"
        }
      },
      "getDepositAmount(address,bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "_0": "The deposited amount"
        }
      },
      "getLiquidationAmount(address,bytes32,uint256)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "liquidationAmount": "The the amount to be liquidated"
        }
      },
      "getLiquidationConfiguration()": {
        "details": "Gets the liquidation configuration",
        "returns": {
          "liquidationProtocolFeeRate": "The liquidation fee received by liquidators",
          "liquidationThresholdRate": "The liquidation threshold rate",
          "liquidatorFeeRate": "The liquidation protocol fee received by protocol"
        }
      },
      "getTokenAddress(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The token contract address"
        }
      },
      "getTotalCollateralAmount(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "totalCollateralAmount": "The total collateral amount in ETH"
        }
      },
      "getTotalDepositAmount(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The total deposited amount"
        }
      },
      "getUnusedCollateral(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The total amount of unused collateral"
        }
      },
      "getUsedCurrencies(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The currency names in bytes32"
        }
      },
      "getWithdrawableCollateral(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "Maximum amount of ETH that can be withdrawn"
        }
      },
      "getWithdrawableCollateral(bytes32,address)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "_0": "Maximum amount of the selected currency that can be withdrawn"
        }
      },
      "initialize(address,address,uint256,uint256,uint256,address)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController.",
        "params": {
          "_liquidationProtocolFeeRate": "The liquidation fee rate received by protocol",
          "_liquidationThresholdRate": "The liquidation threshold rate",
          "_liquidatorFeeRate": "The liquidation fee rate received by liquidators",
          "_nativeToken": "The address of wrapped token of native currency",
          "_owner": "The address of the contract owner",
          "_resolver": "The address of the Address Resolver contract"
        }
      },
      "isCollateral(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The boolean if the currency has been registered or not"
        }
      },
      "isCollateral(bytes32[])": {
        "params": {
          "_ccys": "Currency name list in bytes32"
        },
        "returns": {
          "isCollateralCurrencies": "Array of the boolean if the currency has been registered or not"
        }
      },
      "isCovered(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The boolean if the collateral has sufficient coverage or not"
        }
      },
      "isRegisteredCurrency(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The boolean if the currency has been registered or not"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "registerCurrency(bytes32,address,bool)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_isCollateral": "Boolean if the selected currency is acceptable as collateral.",
          "_tokenAddress": "Token contract address of the selected currency"
        }
      },
      "removeDepositAmount(address,bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to withdraw.",
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requiredContracts()": {
        "details": "The contract name list is in `./libraries/Contracts.sol`."
      },
      "transferFrom(bytes32,address,address,uint256)": {
        "params": {
          "_amount": "Amount of funds to sent",
          "_ccy": "Currency name in bytes32",
          "_from": "Sender's address",
          "_to": "Receiver's address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCurrency(bytes32,bool)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_isCollateral": "Boolean if the selected currency is acceptable as collateral."
        }
      },
      "updateLiquidationConfiguration(uint256,uint256,uint256)": {
        "details": "Update the liquidation configuration",
        "params": {
          "_liquidationProtocolFeeRate": "The liquidation fee rate received by protocol",
          "_liquidationThresholdRate": "The liquidation threshold rate",
          "_liquidatorFeeRate": "The liquidation fee rate received by liquidators"
        }
      },
      "withdraw(bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to withdraw.",
          "_ccy": "Currency name in bytes32"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptedContracts()": {
        "notice": "Returns contract names that can call this contract."
      },
      "calculateCoverage(address,(bytes32,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "Calculates the collateral rate used when additional funds are had by the user."
      },
      "calculateLiquidationFees(uint256)": {
        "notice": "Gets the actual fee amounts calculated by rates."
      },
      "executeForcedReset(address,bytes32)": {
        "notice": "Forces a reset of the user's deposit amount."
      },
      "getCollateralAmount(address,bytes32)": {
        "notice": "Gets the total collateral amount of the selected currency."
      },
      "getCollateralCurrencies()": {
        "notice": "Gets the currencies accepted as collateral"
      },
      "getCoverage(address)": {
        "notice": "Gets the rate of collateral used."
      },
      "getDepositAmount(address,bytes32)": {
        "notice": "Gets the amount deposited in the user's collateral."
      },
      "getLiquidationAmount(address,bytes32,uint256)": {
        "notice": "Gets the amount to be liquidated."
      },
      "getTokenAddress(bytes32)": {
        "notice": "Gets the token contract address"
      },
      "getTotalCollateralAmount(address)": {
        "notice": "Gets the total collateral amount."
      },
      "getTotalDepositAmount(bytes32)": {
        "notice": "Gets the total amount deposited of the selected currency"
      },
      "getUnusedCollateral(address)": {
        "notice": "Gets the total amount of the unused collateral"
      },
      "getUsedCurrencies(address)": {
        "notice": "Gets the currencies that the user used as collateral."
      },
      "getWithdrawableCollateral(address)": {
        "notice": "Gets the maximum amount of ETH that can be withdrawn from user collateral."
      },
      "getWithdrawableCollateral(bytes32,address)": {
        "notice": "Gets the maximum amount of the selected currency that can be withdrawn from user collateral."
      },
      "initialize(address,address,uint256,uint256,uint256,address)": {
        "notice": "Initializes the contract."
      },
      "isCollateral(bytes32)": {
        "notice": "Gets if the currency is acceptable as collateral"
      },
      "isCollateral(bytes32[])": {
        "notice": "Gets if the currencies are acceptable as collateral"
      },
      "isCovered(address)": {
        "notice": "Gets if the collateral has enough coverage."
      },
      "isRegisteredCurrency(bytes32)": {
        "notice": "Gets if the currency has been registered"
      },
      "pauseVault()": {
        "notice": "Pauses the token vault."
      },
      "registerCurrency(bytes32,address,bool)": {
        "notice": "Registers new currency and sets if it is acceptable as collateral."
      },
      "removeDepositAmount(address,bytes32,uint256)": {
        "notice": "Removes deposit amount."
      },
      "requiredContracts()": {
        "notice": "Returns the contract names used in this contract."
      },
      "transferFrom(bytes32,address,address,uint256)": {
        "notice": "Transfers the token from sender to receiver."
      },
      "unpauseVault()": {
        "notice": "Unpauses the token vault."
      },
      "updateCurrency(bytes32,bool)": {
        "notice": "Updates the currency if it is acceptable as collateral."
      },
      "updateLiquidationConfiguration(uint256,uint256,uint256)": {
        "notice": "Triggers only be contract owner"
      },
      "withdraw(bytes32,uint256)": {
        "notice": "Withdraws funds by the caller from unused collateral."
      }
    },
    "notice": "Implements the management of the token in each currency for users. This contract manages the following data related to tokens. - Deposited token amount as the collateral - Parameters related to the liquidation   - Liquidation threshold rate   - Liquidation fee rate received by protocol   - Liquidation fee rate received by liquidators To address a currency as collateral, it must be registered using `registerCurrency` method in this contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 995,
        "contract": "contracts/protocol/TokenVault.sol:TokenVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 998,
        "contract": "contracts/protocol/TokenVault.sol:TokenVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}