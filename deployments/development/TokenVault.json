{
  "address": "0x0E28D8096aF068F8F9D50Ca50458B020F5D0803c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "CurrencyRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EscrowedAmountAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EscrowedAmountRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReleaseUnsettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UseUnsettledCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payer",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addEscrowedAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getCollateralAmountInETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralParameters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "marginCallThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "autoLiquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationPriceRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minCollateralRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getCoverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalCollateralAmountInETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalUnsettledExposure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getUnsettledCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUnusedCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUsedCurrencies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getWithdrawableCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marginCallThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_autoLiquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationPriceRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateralRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_WETH9",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isCovered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "isRegisteredCurrency",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "registerCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "releaseUnsettledCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "releaseUnsettledCollaterals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeEscrowedAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_payers",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "removeEscrowedAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marginCallThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_autoLiquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationPriceRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateralRate",
          "type": "uint256"
        }
      ],
      "name": "setCollateralParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "useUnsettledCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x20dbbf20dd6960174daa3d3fb7adf70cf0b7ee83721b94a5b51dcadd44c4bd14",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x5Df593A9a4198c4dBAEE7aCbA98C96FF129CfF3f",
    "transactionIndex": 13,
    "gasUsed": "2974334",
    "logsBloom": "0x
    "blockHash": "0x5e7b8cb6d1aaf573ccd6556456fd931f69f66748418b118aa86507d1c1a77fdb",
    "transactionHash": "0x20dbbf20dd6960174daa3d3fb7adf70cf0b7ee83721b94a5b51dcadd44c4bd14",
    "logs": [],
    "blockNumber": 7759845,
    "cumulativeGasUsed": "8804073",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "5a771bea4833c0e50741ce01d014de75",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"CurrencyRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscrowedAmountAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscrowedAmountRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReleaseUnsettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UseUnsettledCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addEscrowedAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getCollateralAmountInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marginCallThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoLiquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationPriceRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalCollateralAmountInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalUnsettledExposure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getUnsettledCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUnusedCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUsedCurrencies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marginCallThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autoLiquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationPriceRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateralRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_WETH9\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isCovered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"isRegisteredCurrency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"registerCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseUnsettledCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"releaseUnsettledCollaterals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeEscrowedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_payers\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"removeEscrowedAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marginCallThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autoLiquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationPriceRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateralRate\",\"type\":\"uint256\"}],\"name\":\"setCollateralParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"useUnsettledCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptedContracts()\":{\"details\":\"The contact name listed in this method is also needed to be listed `requiredContracts` method.\"},\"addEscrowedAmount(address,bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to be add into escrow\",\"_ccy\":\"Currency name in bytes32\",\"_payer\":\"Address of user making payment\"}},\"deposit(bytes32,uint256)\":{\"details\":\"Deposits funds by the caller into collateral.\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\"}},\"getCollateralAmount(address,bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The deposited amount\"}},\"getCollateralAmountInETH(address,bytes32)\":{\"params\":{\"_ccy\":\"Specified currency\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The deposited amount in ETH\"}},\"getCollateralParameters()\":{\"returns\":{\"autoLiquidationThresholdRate\":\" The rate used as the auto liquidation threshold\",\"liquidationPriceRate\":\"The rate used as the liquidation price\",\"marginCallThresholdRate\":\"The rate used as the margin call threshold\",\"minCollateralRate\":\"The rate used minima collateral\"}},\"getCoverage(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The rate of collateral used\"}},\"getTotalCollateralAmountInETH(address)\":{\"params\":{\"_user\":\"Address of collateral user\"},\"returns\":{\"_0\":\"The total deposited amount in ETH\"}},\"getTotalUnsettledExposure(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"Total unsettled exposure\"}},\"getUnsettledCollateral(address,bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"Unsettled exposure\"}},\"getUnusedCollateral(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The total amount of unused collateral\"}},\"getUsedCurrencies(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The currency names in bytes32\"}},\"getWithdrawableCollateral(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"Maximum amount of ETH that can be withdrawn\"}},\"initialize(address,address,uint256,uint256,uint256,uint256,address)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController.\",\"params\":{\"_WETH9\":\"The address of WETH\",\"_autoLiquidationThresholdRate\":\"The rate used as the auto liquidation threshold\",\"_liquidationPriceRate\":\"The rate used as the liquidation price\",\"_marginCallThresholdRate\":\"The rate used as the margin call threshold\",\"_minCollateralRate\":\"The rate used minima collateral\",\"_owner\":\"The address of the contract owner\",\"_resolver\":\"The address of the Address Resolver contract\"}},\"isCovered(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The boolean if the collateral has sufficient coverage or not\"}},\"isRegisteredCurrency(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The boolean if the currency has been registered or not\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"releaseUnsettledCollateral(address,address,bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to be unlocked from unsettled exposure in a specified currency\",\"_ccy\":\"Currency name in bytes32\",\"_sender\":\"Address of user sending token\",\"_user\":\"User's address\"}},\"releaseUnsettledCollaterals(address[],address,bytes32,uint256[])\":{\"params\":{\"_amounts\":\"Array of amount of funds to be unlocked from unsettled exposure\",\"_ccy\":\"Currency name in bytes32\",\"_sender\":\"Address of user sending token\",\"_users\":\"Array of user's address\"}},\"removeEscrowedAmount(address,address,bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to be removed from escrow\",\"_ccy\":\"Currency name in bytes32\",\"_payer\":\"Address of user making payment\",\"_receiver\":\"Address of user receiving payment\"}},\"removeEscrowedAmounts(address[],address,bytes32,uint256[])\":{\"params\":{\"_amounts\":\"Array of amount of funds to be unlocked from unsettled exposure\",\"_ccy\":\"Currency name in bytes32\",\"_payers\":\"Array of user's address making payment\",\"_receiver\":\"Address of user receiving payment\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requiredContracts()\":{\"details\":\"The contract name list is in `./libraries/Contracts.sol`.\"},\"setCollateralParameters(uint256,uint256,uint256,uint256)\":{\"params\":{\"_autoLiquidationThresholdRate\":\"Auto liquidation threshold rate\",\"_liquidationPriceRate\":\"Liquidation price rate\",\"_marginCallThresholdRate\":\"Margin call threshold ratio\",\"_minCollateralRate\":\"Minimal collateral rate\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"useUnsettledCollateral(address,bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to be locked in a specified currency\",\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"withdraw(bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to withdraw.\",\"_ccy\":\"Currency name in bytes32\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptedContracts()\":{\"notice\":\"Returns contract names that can call this contract.\"},\"addEscrowedAmount(address,bytes32,uint256)\":{\"notice\":\"Add funds to escrow.\"},\"getCollateralAmount(address,bytes32)\":{\"notice\":\"Gets the amount deposited in the user's collateral.\"},\"getCollateralAmountInETH(address,bytes32)\":{\"notice\":\"Gets the amount deposited in the user's collateral by converting it to ETH.\"},\"getCollateralParameters()\":{\"notice\":\"Gets parameters related to collateral.\"},\"getCoverage(address)\":{\"notice\":\"Gets the rate of collateral used.\"},\"getTotalCollateralAmountInETH(address)\":{\"notice\":\"Gets the total amount deposited in the user's collateral in all currencies. by converting it to ETH.\"},\"getTotalUnsettledExposure(address)\":{\"notice\":\"Gets total unsettled exposure in all currencies.\"},\"getUnsettledCollateral(address,bytes32)\":{\"notice\":\"Gets unsettled exposure for the selected currency\"},\"getUnusedCollateral(address)\":{\"notice\":\"Gets the total amount of unused collateral\"},\"getUsedCurrencies(address)\":{\"notice\":\"Gets the currencies that the user used as collateral.\"},\"getWithdrawableCollateral(address)\":{\"notice\":\"Gets the maximum amount of ETH that can be withdrawn from user collateral.\"},\"initialize(address,address,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"Initializes the contract.\"},\"isCovered(address)\":{\"notice\":\"Gets if the collateral has enough coverage.\"},\"isRegisteredCurrency(bytes32)\":{\"notice\":\"Gets if the currency has been registered\"},\"releaseUnsettledCollateral(address,address,bytes32,uint256)\":{\"notice\":\"Releases the amount of unsettled exposure for the selected currency.\"},\"releaseUnsettledCollaterals(address[],address,bytes32,uint256[])\":{\"notice\":\"Releases the amount of unsettled exposure on multiple orders.\"},\"removeEscrowedAmount(address,address,bytes32,uint256)\":{\"notice\":\"Remove funds from escrow.\"},\"removeEscrowedAmounts(address[],address,bytes32,uint256[])\":{\"notice\":\"Remove funds from escrow on multiple orders.\"},\"requiredContracts()\":{\"notice\":\"Returns the contract names used in this contract.\"},\"setCollateralParameters(uint256,uint256,uint256,uint256)\":{\"notice\":\"Sets main collateral parameters this function solves the issue of frontrunning during parameters tuning.Triggers only be contract owner\"},\"useUnsettledCollateral(address,bytes32,uint256)\":{\"notice\":\"Locks unsettled collateral for the selected currency.\"},\"withdraw(bytes32,uint256)\":{\"notice\":\"Withdraws funds by the caller from unused collateral.\"}},\"notice\":\"Implements the management of the token in each currency for users. This contract manages the following data related to tokens. - Deposited token amount as the collateral - Unsettled collateral amount used by order - Escrowed token amount added by lending orders - Parameters related to the collateral   - Margin Call Threshold Rate   - Auto Liquidation Threshold Rate   - Liquidation Price Rate   - Min Collateral Rate To address a currency as collateral, it must be registered using `registerCurrency` method in this contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenVault.sol\":\"TokenVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/TokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n// libraries\\nimport {Contracts} from \\\"./libraries/Contracts.sol\\\";\\nimport {CollateralParametersHandler} from \\\"./libraries/CollateralParametersHandler.sol\\\";\\nimport {ERC20Handler} from \\\"./libraries/ERC20Handler.sol\\\";\\n// interfaces\\nimport {ITokenVault} from \\\"./interfaces/ITokenVault.sol\\\";\\n// mixins\\nimport {MixinAddressResolver} from \\\"./mixins/MixinAddressResolver.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"./types/ProtocolTypes.sol\\\";\\n// utils\\nimport {Ownable} from \\\"./utils/Ownable.sol\\\";\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\n// storages\\nimport {TokenVaultStorage as Storage} from \\\"./storages/TokenVaultStorage.sol\\\";\\n\\n/**\\n * @notice Implements the management of the token in each currency for users.\\n *\\n * This contract manages the following data related to tokens.\\n * - Deposited token amount as the collateral\\n * - Unsettled collateral amount used by order\\n * - Escrowed token amount added by lending orders\\n * - Parameters related to the collateral\\n *   - Margin Call Threshold Rate\\n *   - Auto Liquidation Threshold Rate\\n *   - Liquidation Price Rate\\n *   - Min Collateral Rate\\n *\\n * To address a currency as collateral, it must be registered using `registerCurrency` method in this contract.\\n */\\ncontract TokenVault is ITokenVault, MixinAddressResolver, Ownable, Proxyable {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    /**\\n     * @notice Modifier to check if currency hasn't been registered yet\\n     * @param _ccy Currency name in bytes32\\n     */\\n    modifier onlyRegisteredCurrency(bytes32 _ccy) {\\n        require(isRegisteredCurrency(_ccy), \\\"Currency not registered\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\\n     * @param _owner The address of the contract owner\\n     * @param _resolver The address of the Address Resolver contract\\n     * @param _marginCallThresholdRate The rate used as the margin call threshold\\n     * @param _autoLiquidationThresholdRate  The rate used as the auto liquidation threshold\\n     * @param _liquidationPriceRate The rate used as the liquidation price\\n     * @param _minCollateralRate The rate used minima collateral\\n     * @param _WETH9 The address of WETH\\n     */\\n    function initialize(\\n        address _owner,\\n        address _resolver,\\n        uint256 _marginCallThresholdRate,\\n        uint256 _autoLiquidationThresholdRate,\\n        uint256 _liquidationPriceRate,\\n        uint256 _minCollateralRate,\\n        address _WETH9\\n    ) public initializer onlyProxy {\\n        _transferOwnership(_owner);\\n        registerAddressResolver(_resolver);\\n\\n        ERC20Handler.initialize(_WETH9);\\n        CollateralParametersHandler.setCollateralParameters(\\n            _marginCallThresholdRate,\\n            _autoLiquidationThresholdRate,\\n            _liquidationPriceRate,\\n            _minCollateralRate\\n        );\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](2);\\n        contracts[0] = Contracts.CURRENCY_CONTROLLER;\\n        contracts[1] = Contracts.LENDING_MARKET_CONTROLLER;\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](1);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == ERC20Handler.weth(), \\\"Not WETH\\\");\\n    }\\n\\n    /**\\n     * @notice Gets if the collateral has enough coverage.\\n     * @param _user User's address\\n     * @return The boolean if the collateral has sufficient coverage or not\\n     */\\n    function isCovered(address _user) public view override returns (bool) {\\n        return _isCovered(_user, \\\"\\\", 0);\\n    }\\n\\n    /**\\n     * @notice Gets if the currency has been registered\\n     * @param _ccy Currency name in bytes32\\n     * @return The boolean if the currency has been registered or not\\n     */\\n    function isRegisteredCurrency(bytes32 _ccy) public view override returns (bool) {\\n        return Storage.slot().tokenAddresses[_ccy] != address(0);\\n    }\\n\\n    /**\\n     * @notice Gets the maximum amount of ETH that can be withdrawn from user collateral.\\n     * @param _user User's address\\n     * @return Maximum amount of ETH that can be withdrawn\\n     */\\n    function getWithdrawableCollateral(address _user) external view virtual returns (uint256) {\\n        return _getWithdrawableCollateral(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the rate of collateral used.\\n     * @param _user User's address\\n     * @return The rate of collateral used\\n     */\\n    function getCoverage(address _user) public view override returns (uint256) {\\n        return _getCoverage(_user, \\\"\\\", 0);\\n    }\\n\\n    /**\\n     * @notice Gets unsettled exposure for the selected currency\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @return Unsettled exposure\\n     */\\n    function getUnsettledCollateral(address _user, bytes32 _ccy) external view returns (uint256) {\\n        return Storage.slot().unsettledCollateral[_user][_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the total amount of unused collateral\\n     * @param _user User's address\\n     * @return The total amount of unused collateral\\n     */\\n    function getUnusedCollateral(address _user) external view returns (uint256) {\\n        uint256 totalCollateral = getTotalCollateralAmountInETH(_user);\\n        uint256 totalUsedCollateral = _getUsedCollateral(_user) +\\n            _getTotalUnsettledExposure(_user, \\\"\\\", 0);\\n\\n        return totalCollateral > totalUsedCollateral ? totalCollateral - totalUsedCollateral : 0;\\n    }\\n\\n    /**\\n     * @notice Gets total unsettled exposure in all currencies.\\n     * @param _user User's address\\n     * @return Total unsettled exposure\\n     */\\n    function getTotalUnsettledExposure(address _user) external view override returns (uint256) {\\n        return _getTotalUnsettledExposure(_user, \\\"\\\", 0);\\n    }\\n\\n    /**\\n     * @notice Gets the amount deposited in the user's collateral.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @return The deposited amount\\n     */\\n    function getCollateralAmount(address _user, bytes32 _ccy)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return Storage.slot().collateralAmounts[_user][_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the amount deposited in the user's collateral by converting it to ETH.\\n     * @param _user User's address\\n     * @param _ccy Specified currency\\n     * @return The deposited amount in ETH\\n     */\\n    function getCollateralAmountInETH(address _user, bytes32 _ccy)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 amount = getCollateralAmount(_user, _ccy);\\n        return currencyController().convertToETH(_ccy, amount);\\n    }\\n\\n    /**\\n     * @notice Gets the total amount deposited in the user's collateral in all currencies.\\n     * by converting it to ETH.\\n     * @param _user Address of collateral user\\n     * @return The total deposited amount in ETH\\n     */\\n    function getTotalCollateralAmountInETH(address _user) public view override returns (uint256) {\\n        EnumerableSet.Bytes32Set storage currencies = Storage.slot().usedCurrencies[_user];\\n        uint256 collateralAmount;\\n        uint256 totalCollateral;\\n\\n        uint256 len = currencies.length();\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            bytes32 ccy = currencies.at(i);\\n            collateralAmount = getCollateralAmountInETH(_user, ccy);\\n            totalCollateral = totalCollateral + collateralAmount;\\n        }\\n\\n        return totalCollateral;\\n    }\\n\\n    /**\\n     * @notice Gets the currencies that the user used as collateral.\\n     * @param _user User's address\\n     * @return The currency names in bytes32\\n     */\\n    function getUsedCurrencies(address _user) public view override returns (bytes32[] memory) {\\n        EnumerableSet.Bytes32Set storage currencySet = Storage.slot().usedCurrencies[_user];\\n\\n        uint256 numCurrencies = currencySet.length();\\n        bytes32[] memory currencies = new bytes32[](numCurrencies);\\n\\n        for (uint256 i = 0; i < numCurrencies; i++) {\\n            bytes32 currency = currencySet.at(i);\\n            currencies[i] = currency;\\n        }\\n\\n        return currencies;\\n    }\\n\\n    /**\\n     * @notice Gets parameters related to collateral.\\n     * @return marginCallThresholdRate The rate used as the margin call threshold\\n     * @return autoLiquidationThresholdRate  The rate used as the auto liquidation threshold\\n     * @return liquidationPriceRate The rate used as the liquidation price\\n     * @return minCollateralRate The rate used minima collateral\\n     */\\n    function getCollateralParameters()\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 marginCallThresholdRate,\\n            uint256 autoLiquidationThresholdRate,\\n            uint256 liquidationPriceRate,\\n            uint256 minCollateralRate\\n        )\\n    {\\n        return CollateralParametersHandler.getCollateralParameters();\\n    }\\n\\n    /**\\n     * @notice Locks unsettled collateral for the selected currency.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to be locked in a specified currency\\n     */\\n    function useUnsettledCollateral(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external override onlyAcceptedContracts {\\n        Storage.slot().exposedUnsettledCurrencies[_user].add(_ccy);\\n        require(_isCovered(_user, _ccy, _amount), \\\"Not enough collateral\\\");\\n\\n        Storage.slot().unsettledCollateral[_user][_ccy] += _amount;\\n\\n        emit UseUnsettledCollateral(_user, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Releases the amount of unsettled exposure for the selected currency.\\n     * @param _user User's address\\n     * @param _sender Address of user sending token\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to be unlocked from unsettled exposure in a specified currency\\n     */\\n    function releaseUnsettledCollateral(\\n        address _user,\\n        address _sender,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external override onlyAcceptedContracts {\\n        _releaseUnsettledCollateral(_user, _sender, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Releases the amount of unsettled exposure on multiple orders.\\n     * @param _users Array of user's address\\n     * @param _sender Address of user sending token\\n     * @param _ccy Currency name in bytes32\\n     * @param _amounts Array of amount of funds to be unlocked from unsettled exposure\\n     */\\n    function releaseUnsettledCollaterals(\\n        address[] calldata _users,\\n        address _sender,\\n        bytes32 _ccy,\\n        uint256[] calldata _amounts\\n    ) external override onlyAcceptedContracts {\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            _releaseUnsettledCollateral(_users[i], _sender, _ccy, _amounts[i]);\\n        }\\n    }\\n\\n    function registerCurrency(bytes32 _ccy, address _tokenAddress) external onlyOwner {\\n        require(currencyController().isSupportedCcy(_ccy), \\\"Invalid currency\\\");\\n        Storage.slot().tokenAddresses[_ccy] = _tokenAddress;\\n\\n        emit CurrencyRegistered(_ccy, _tokenAddress);\\n    }\\n\\n    /**\\n     * @dev Deposits funds by the caller into collateral.\\n     * @param _amount Amount of funds to deposit\\n     * @param _ccy Currency name in bytes32\\n     */\\n    function deposit(bytes32 _ccy, uint256 _amount)\\n        public\\n        payable\\n        override\\n        onlyRegisteredCurrency(_ccy)\\n    {\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n        ERC20Handler.depositAssets(\\n            Storage.slot().tokenAddresses[_ccy],\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n\\n        Storage.slot().collateralAmounts[msg.sender][_ccy] += _amount;\\n\\n        _updateUsedCurrencies(_ccy);\\n\\n        emit Deposit(msg.sender, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws funds by the caller from unused collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to withdraw.\\n     */\\n    function withdraw(bytes32 _ccy, uint256 _amount) public override onlyRegisteredCurrency(_ccy) {\\n        // fix according to collateral aggregator\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n\\n        address user = msg.sender;\\n        uint256 maxWithdrawETH = _getWithdrawableCollateral(user);\\n        uint256 maxWithdraw = currencyController().convertFromETH(_ccy, maxWithdrawETH);\\n        uint256 withdrawAmt = _amount > maxWithdraw ? maxWithdraw : _amount;\\n\\n        require(\\n            Storage.slot().collateralAmounts[user][_ccy] >= withdrawAmt,\\n            \\\"Not enough collateral in the selected currency\\\"\\n        );\\n        Storage.slot().collateralAmounts[user][_ccy] -= withdrawAmt;\\n\\n        ERC20Handler.withdrawAssets(Storage.slot().tokenAddresses[_ccy], msg.sender, withdrawAmt);\\n        _updateUsedCurrencies(_ccy);\\n\\n        emit Withdraw(msg.sender, _ccy, withdrawAmt);\\n    }\\n\\n    /**\\n     * @notice Add funds to escrow.\\n     * @param _payer Address of user making payment\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to be add into escrow\\n     */\\n    function addEscrowedAmount(\\n        address _payer,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external payable override onlyAcceptedContracts onlyRegisteredCurrency(_ccy) {\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n\\n        ERC20Handler.depositAssets(\\n            Storage.slot().tokenAddresses[_ccy],\\n            _payer,\\n            address(this),\\n            _amount\\n        );\\n        Storage.slot().escrowedAmount[_payer][_ccy] += _amount;\\n\\n        emit EscrowedAmountAdded(_payer, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Remove funds from escrow.\\n     * @param _payer Address of user making payment\\n     * @param _receiver Address of user receiving payment\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to be removed from escrow\\n     */\\n    function removeEscrowedAmount(\\n        address _payer,\\n        address _receiver,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external override onlyAcceptedContracts onlyRegisteredCurrency(_ccy) {\\n        _removeEscrowedAmount(_payer, _receiver, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Remove funds from escrow on multiple orders.\\n     * @param _payers Array of user's address making payment\\n     * @param _receiver Address of user receiving payment\\n     * @param _ccy Currency name in bytes32\\n     * @param _amounts Array of amount of funds to be unlocked from unsettled exposure\\n     */\\n    function removeEscrowedAmounts(\\n        address[] calldata _payers,\\n        address _receiver,\\n        bytes32 _ccy,\\n        uint256[] calldata _amounts\\n    ) external override onlyAcceptedContracts onlyRegisteredCurrency(_ccy) {\\n        for (uint256 i = 0; i < _payers.length; i++) {\\n            _removeEscrowedAmount(_payers[i], _receiver, _ccy, _amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets main collateral parameters this function\\n     * solves the issue of frontrunning during parameters tuning.\\n     *\\n     * @param _marginCallThresholdRate Margin call threshold ratio\\n     * @param _autoLiquidationThresholdRate Auto liquidation threshold rate\\n     * @param _liquidationPriceRate Liquidation price rate\\n     * @param _minCollateralRate Minimal collateral rate\\n     * @notice Triggers only be contract owner\\n     */\\n    function setCollateralParameters(\\n        uint256 _marginCallThresholdRate,\\n        uint256 _autoLiquidationThresholdRate,\\n        uint256 _liquidationPriceRate,\\n        uint256 _minCollateralRate\\n    ) external onlyOwner {\\n        CollateralParametersHandler.setCollateralParameters(\\n            _marginCallThresholdRate,\\n            _autoLiquidationThresholdRate,\\n            _liquidationPriceRate,\\n            _minCollateralRate\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets if the collateral has enough coverage.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @param _unsettledExp Additional exposure to lock into unsettled exposure\\n     * @return The boolean if the collateral has enough coverage or not\\n     */\\n    function _isCovered(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) internal view returns (bool) {\\n        uint256 totalCollateral = getTotalCollateralAmountInETH(_user);\\n        uint256 totalUsedCollateral = _getUsedCollateral(_user) +\\n            _getTotalUnsettledExposure(_user, _ccy, _unsettledExp);\\n\\n        return\\n            totalUsedCollateral == 0 ||\\n            (totalCollateral * ProtocolTypes.PCT >=\\n                totalUsedCollateral * CollateralParametersHandler.marginCallThresholdRate());\\n    }\\n\\n    /**\\n     * @notice Gets the collateral coverage.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @param _unsettledExp Additional exposure to lock into unsettled exposure\\n     * @return coverage The rate of collateral used\\n     */\\n    function _getCoverage(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) internal view returns (uint256 coverage) {\\n        uint256 totalCollateral = getTotalCollateralAmountInETH(_user);\\n        uint256 totalUsedCollateral = _getUsedCollateral(_user) +\\n            _getTotalUnsettledExposure(_user, _ccy, _unsettledExp);\\n\\n        if (totalCollateral > 0) {\\n            coverage = (((totalUsedCollateral) * ProtocolTypes.PCT) / totalCollateral);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets total unsettled exposure in all currencies.\\n     * @param _user User's ethereum address\\n     * @param _ccy Currency name in bytes32\\n     * @param _unsettledExp Additional exposure to lock into unsettled exposure\\n     * @return totalExp The total collateral amount\\n     */\\n    function _getTotalUnsettledExposure(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) internal view returns (uint256 totalExp) {\\n        EnumerableSet.Bytes32Set storage expCcy = Storage.slot().exposedUnsettledCurrencies[_user];\\n        uint256 ccyExp;\\n\\n        for (uint256 i = 0; i < expCcy.length(); i++) {\\n            bytes32 ccy = expCcy.at(i);\\n            ccyExp = Storage.slot().unsettledCollateral[_user][ccy];\\n\\n            if (_ccy == ccy) {\\n                ccyExp += _unsettledExp;\\n            }\\n\\n            totalExp += ccyExp > 0 ? currencyController().convertToETH(ccy, ccyExp) : 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the total collateral used in all currencies.\\n     * The collateral used is defined as the negative future value in the lending market contract.\\n     * @param _user User's address\\n     * @return The total amount of used collateral\\n     */\\n    function _getUsedCollateral(address _user) internal view returns (uint256) {\\n        int256 totalPVInETH = lendingMarketController().getTotalPresentValueInETH(_user);\\n        return totalPVInETH > 0 ? 0 : uint256(-totalPVInETH);\\n    }\\n\\n    /**\\n     * @notice Calculates maximum amount of ETH that can be withdrawn.\\n     * @param _user User's address\\n     * @return Maximum amount of ETH that can be withdrawn\\n     */\\n    function _getWithdrawableCollateral(address _user) internal view returns (uint256) {\\n        uint256 totalCollateral = getTotalCollateralAmountInETH(_user);\\n        uint256 totalUsedCollateral = _getUsedCollateral(_user) +\\n            _getTotalUnsettledExposure(_user, \\\"\\\", 0);\\n\\n        if (totalUsedCollateral == 0) {\\n            return totalCollateral;\\n        } else if (\\n            totalCollateral >\\n            ((totalUsedCollateral) * CollateralParametersHandler.marginCallThresholdRate()) /\\n                ProtocolTypes.BP\\n        ) {\\n            // NOTE: The formula is:\\n            // maxWithdraw = totalCollateral - ((totalUsedCollateral) * marginCallThresholdRate).\\n            return\\n                (totalCollateral *\\n                    ProtocolTypes.BP -\\n                    (totalUsedCollateral) *\\n                    CollateralParametersHandler.marginCallThresholdRate()) / ProtocolTypes.BP;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function _updateUsedCurrencies(bytes32 _ccy) internal {\\n        if (Storage.slot().collateralAmounts[msg.sender][_ccy] > 0) {\\n            Storage.slot().usedCurrencies[msg.sender].add(_ccy);\\n        } else {\\n            Storage.slot().usedCurrencies[msg.sender].remove(_ccy);\\n        }\\n    }\\n\\n    function _releaseUnsettledCollateral(\\n        address _user,\\n        address _sender,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) internal {\\n        require(\\n            Storage.slot().unsettledCollateral[_user][_ccy] >= _amount,\\n            \\\"Not enough unsettled collateral\\\"\\n        );\\n        Storage.slot().unsettledCollateral[_user][_ccy] -= _amount;\\n\\n        if (_sender != address(0)) {\\n            ERC20Handler.safeTransferFrom(\\n                Storage.slot().tokenAddresses[_ccy],\\n                _sender,\\n                _user,\\n                _amount\\n            );\\n        }\\n\\n        if (Storage.slot().unsettledCollateral[_user][_ccy] == 0) {\\n            Storage.slot().exposedUnsettledCurrencies[_user].remove(_ccy);\\n        }\\n\\n        emit ReleaseUnsettled(_user, _ccy, _amount);\\n    }\\n\\n    function _removeEscrowedAmount(\\n        address _payer,\\n        address _receiver,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n        require(\\n            Storage.slot().escrowedAmount[_payer][_ccy] >= _amount,\\n            \\\"Not enough escrowed amount\\\"\\n        );\\n\\n        Storage.slot().escrowedAmount[_payer][_ccy] -= _amount;\\n        ERC20Handler.withdrawAssets(Storage.slot().tokenAddresses[_ccy], _receiver, _amount);\\n\\n        emit EscrowedAmountRemoved(_payer, _receiver, _ccy, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xba1828232c79644b0764d31cf2fc6d63aef107fe6305ac25e53191c3a68a3ed0\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IBeaconProxyController {\\n    event BeaconProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function deployLendingMarket(\\n        bytes32 _ccy,\\n        uint256 _basisDate,\\n        uint256 _maturity\\n    ) external returns (address market);\\n}\\n\",\"keccak256\":\"0x96cc459c25a78e04ebc32cdf92437fb2e27d79b21c3ee53a003e4d71ff7a79fa\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Currency} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CcyAdded(bytes32 indexed ccy, string name, uint256 haircut);\\n    event CcySupportUpdate(bytes32 indexed ccy, bool isSupported);\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n    event PriceFeedAdded(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n    event PriceFeedRemoved(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH) external view returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, int256 _amount) external view returns (int256);\\n\\n    function getCurrencies(bytes32) external view returns (Currency memory);\\n\\n    function getEthDecimals(bytes32) external view returns (uint8);\\n\\n    function getUsdDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        address _ethPriceFeed,\\n        uint256 _haircut\\n    ) external;\\n\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported) external;\\n}\\n\",\"keccak256\":\"0xdb2d6560f24ffc5cc53e0e7da9e8c5cf0f4c92385d549e60189ea01116b29ea5\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\nstruct Order {\\n    bytes32 ccy;\\n    uint256 term;\\n    ProtocolTypes.Side side;\\n    uint256 amount;\\n    uint256 rate;\\n}\\n\\ninterface ILendingMarketController {\\n    event LendingMarketCreated(\\n        bytes32 ccy,\\n        address indexed marketAddr,\\n        uint256 index,\\n        uint256 maturity\\n    );\\n    event LendingMarketsRotated(bytes32 ccy, uint256 oldMaturity, uint256 newMaturity);\\n    event OrderFilled(\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        uint48[] orderIds,\\n        address[] makers,\\n        uint256[] amounts,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 rate\\n    );\\n    event OrderCanceled(\\n        uint48 orderId,\\n        address indexed maker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n\\n    function getBasisDate(bytes32 _ccy) external view returns (uint256);\\n\\n    function getLendingMarkets(bytes32 _ccy) external view returns (address[] memory);\\n\\n    function getLendingMarket(bytes32 _ccy, uint256 _maturity) external view returns (address);\\n\\n    function getBorrowRates(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getLendRates(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getBorrowOrderBook(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory rates,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory rates,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMidRates(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getMaturities(bytes32 _ccy) external view returns (uint256[] memory);\\n\\n    function getTotalPresentValue(bytes32 ccy, address account) external view returns (int256);\\n\\n    function getTotalPresentValueInETH(address account)\\n        external\\n        view\\n        returns (int256 totalPresentValue);\\n\\n    function isInitializedLendingMarket(bytes32 _ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 _ccy,\\n        uint256 _basisDate,\\n        uint256 _compoundFactor\\n    ) external;\\n\\n    function createLendingMarket(bytes32 _ccy) external returns (address market);\\n\\n    function createOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _rate\\n    ) external returns (bool);\\n\\n    function createLendOrderWithETH(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _rate\\n    ) external payable returns (bool);\\n\\n    function matchOrders(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _rate\\n    ) external view returns (bool);\\n\\n    function cancelOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint48 _orderId\\n    ) external returns (bool);\\n\\n    function rotateLendingMarkets(bytes32 _ccy) external;\\n\\n    function pauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n}\\n\",\"keccak256\":\"0x7e1e092c7adfafe7cee5d46ca7308430624dca13ee09c67490b1997f48756f78\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ITokenVault {\\n    event ReleaseUnsettled(address indexed party, bytes32 ccy, uint256 amount);\\n    event UseUnsettledCollateral(address indexed party, bytes32 ccy, uint256 amount);\\n\\n    event EscrowedAmountAdded(address indexed payer, bytes32 ccy, uint256 amount);\\n    event EscrowedAmountRemoved(\\n        address indexed payer,\\n        address indexed receiver,\\n        bytes32 ccy,\\n        uint256 amount\\n    );\\n\\n    event Deposit(address user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address from, bytes32 ccy, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress);\\n\\n    function isCovered(address user) external view returns (bool);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256 maxWithdraw);\\n\\n    function getCoverage(address user) external view returns (uint256 coverage);\\n\\n    function getUnsettledCollateral(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUnusedCollateral(address user) external view returns (uint256);\\n\\n    function getTotalUnsettledExposure(address user) external view returns (uint256);\\n\\n    function getCollateralAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getCollateralAmountInETH(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalCollateralAmountInETH(address party) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getCollateralParameters()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function useUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function releaseUnsettledCollateral(\\n        address user,\\n        address sender,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function releaseUnsettledCollaterals(\\n        address[] calldata users,\\n        address sender,\\n        bytes32 ccy,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function setCollateralParameters(\\n        uint256 marginCallThresholdRate,\\n        uint256 autoLiquidationThresholdRate,\\n        uint256 liquidationPriceRate,\\n        uint256 minCollateralRate\\n    ) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addEscrowedAmount(\\n        address payer,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external payable;\\n\\n    function removeEscrowedAmount(\\n        address payer,\\n        address receiver,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function removeEscrowedAmounts(\\n        address[] calldata users,\\n        address receiver,\\n        bytes32 ccy,\\n        uint256[] calldata amounts\\n    ) external;\\n}\\n\",\"keccak256\":\"0x259cd833c90881b3300f68de2351a293c5ebe049f721eb1276e53fc40df22a55\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH9 is IERC20 {\\n    event Deposit(address user, uint256 amount);\\n    event Withdrawal(address user, uint256 amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x5aefa06efedcbfe7d7605aa67217f066a0e84b450d416695254eb95239a251d7\",\"license\":\"MIT\"},\"contracts/libraries/CollateralParametersHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {CollateralParametersStorage as Storage} from \\\"../storages/CollateralParametersStorage.sol\\\";\\n\\n/**\\n * @notice CollateralParametersHandler is an library to handle the parameters fro TokenVault contract.\\n *\\n * This manage the main collateral parameters like Margin Call ratio, Auto-Liquidation level,\\n * Liquidation price, and Minimal collateral ratio.\\n *\\n */\\nlibrary CollateralParametersHandler {\\n    event LiquidationPriceRateUpdated(uint256 previousPrice, uint256 price);\\n    event AutoLiquidationThresholdRateUpdated(uint256 previousRatio, uint256 ratio);\\n    event MarginCallThresholdRateUpdated(uint256 previousRatio, uint256 ratio);\\n    event MinCollateralRateUpdated(uint256 previousRatio, uint256 price);\\n\\n    /**\\n     * @dev Gets collateral parameters\\n     */\\n    function getCollateralParameters()\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            Storage.slot().marginCallThresholdRate,\\n            Storage.slot().autoLiquidationThresholdRate,\\n            Storage.slot().liquidationPriceRate,\\n            Storage.slot().minCollateralRate\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets auto liquidation threshold rate\\n     */\\n    function autoLiquidationThresholdRate() internal view returns (uint256) {\\n        return Storage.slot().autoLiquidationThresholdRate;\\n    }\\n\\n    /**\\n     * @dev Gets liquidation price rate\\n     */\\n    function liquidationPriceRate() internal view returns (uint256) {\\n        return Storage.slot().liquidationPriceRate;\\n    }\\n\\n    /**\\n     * @dev Gets margin call threshold rate\\n     */\\n    function marginCallThresholdRate() internal view returns (uint256) {\\n        return Storage.slot().marginCallThresholdRate;\\n    }\\n\\n    /**\\n     * @dev Gets min collateral rate\\n     */\\n    function minCollateralRate() internal view returns (uint256) {\\n        return Storage.slot().minCollateralRate;\\n    }\\n\\n    /**\\n     * @dev Sets main collateral parameters this function\\n     * solves the issue of frontrunning during parameters tuning\\n     *\\n     * @param _marginCallThresholdRate Margin call threshold ratio\\n     * @param _autoLiquidationThresholdRate Auto liquidation threshold rate\\n     * @param _liquidationPriceRate Liquidation price rate\\n     * @param _minCollateralRate Minimal collateral rate\\n     * @notice Triggers only be contract owner\\n     */\\n    function setCollateralParameters(\\n        uint256 _marginCallThresholdRate,\\n        uint256 _autoLiquidationThresholdRate,\\n        uint256 _liquidationPriceRate,\\n        uint256 _minCollateralRate\\n    ) internal {\\n        if (_marginCallThresholdRate != Storage.slot().marginCallThresholdRate) {\\n            _updateMarginCallThresholdRate(_marginCallThresholdRate);\\n        }\\n\\n        if (_autoLiquidationThresholdRate != Storage.slot().autoLiquidationThresholdRate) {\\n            _updateAutoLiquidationThresholdRate(_autoLiquidationThresholdRate);\\n        }\\n\\n        if (_liquidationPriceRate != Storage.slot().liquidationPriceRate) {\\n            _updateLiquidationPriceRate(_liquidationPriceRate);\\n        }\\n\\n        if (_minCollateralRate != Storage.slot().minCollateralRate) {\\n            _updateMinCollateralRate(_minCollateralRate);\\n        }\\n    }\\n\\n    function _updateMarginCallThresholdRate(uint256 _rate) private {\\n        require(_rate > 0, \\\"Rate is zero\\\");\\n\\n        emit MarginCallThresholdRateUpdated(Storage.slot().marginCallThresholdRate, _rate);\\n        Storage.slot().marginCallThresholdRate = _rate;\\n    }\\n\\n    function _updateAutoLiquidationThresholdRate(uint256 _rate) private {\\n        require(_rate > 0, \\\"Rate is zero\\\");\\n        require(\\n            _rate < Storage.slot().marginCallThresholdRate,\\n            \\\"Auto liquidation threshold rate overflow\\\"\\n        );\\n\\n        emit AutoLiquidationThresholdRateUpdated(\\n            Storage.slot().autoLiquidationThresholdRate,\\n            _rate\\n        );\\n        Storage.slot().autoLiquidationThresholdRate = _rate;\\n    }\\n\\n    function _updateLiquidationPriceRate(uint256 _rate) private {\\n        require(_rate > 0, \\\"Rate is zero\\\");\\n        require(\\n            _rate < Storage.slot().autoLiquidationThresholdRate,\\n            \\\"Liquidation price rate overflow\\\"\\n        );\\n\\n        emit LiquidationPriceRateUpdated(Storage.slot().liquidationPriceRate, _rate);\\n        Storage.slot().liquidationPriceRate = _rate;\\n    }\\n\\n    function _updateMinCollateralRate(uint256 _rate) private {\\n        require(_rate > 0, \\\"Rate is zero\\\");\\n        require(\\n            _rate < Storage.slot().autoLiquidationThresholdRate,\\n            \\\"Min collateral rate overflow\\\"\\n        );\\n\\n        emit MinCollateralRateUpdated(Storage.slot().minCollateralRate, _rate);\\n        Storage.slot().minCollateralRate = _rate;\\n    }\\n}\\n\",\"keccak256\":\"0x9ab46e2c3d84c8b6f7bcd6feecc181259304857b830ac71dc23fea23b0af3f34\",\"license\":\"MIT\"},\"contracts/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0x993666b36062e56ab6ef4b22e095ea36d5353472fd0214ad2e35aefca61dd035\",\"license\":\"MIT\"},\"contracts/libraries/ERC20Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IWETH9} from \\\"../interfaces/IWETH9.sol\\\";\\nimport {ERC20Storage as Storage} from \\\"../storages/ERC20Storage.sol\\\";\\n\\nlibrary ERC20Handler {\\n    function initialize(address _weth) internal {\\n        require(Storage.slot().weth == address(0), \\\"Already initialized\\\");\\n        Storage.slot().weth = _weth;\\n    }\\n\\n    function weth() internal view returns (address) {\\n        return Storage.slot().weth;\\n    }\\n\\n    function depositAssets(\\n        address _token,\\n        address _payer,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == Storage.slot().weth) {\\n            wrapWETH(_receiver, _amount);\\n        } else {\\n            safeTransferFrom(_token, _payer, _receiver, _amount);\\n        }\\n    }\\n\\n    function withdrawAssets(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == Storage.slot().weth) {\\n            unwrapWETH(_receiver, _amount);\\n        } else {\\n            safeTransfer(_token, _receiver, _amount);\\n        }\\n    }\\n\\n    function wrapWETH(address _receiver, uint256 _amount) internal {\\n        require(address(this).balance >= _amount, \\\"Insufficient ETH\\\");\\n\\n        IWETH9(Storage.slot().weth).deposit{value: _amount}();\\n        IWETH9(Storage.slot().weth).transfer(_receiver, _amount);\\n    }\\n\\n    function unwrapWETH(address _receiver, uint256 _amount) internal {\\n        uint256 balanceWETH9 = IWETH9(Storage.slot().weth).balanceOf(address(this));\\n        require(balanceWETH9 >= _amount, \\\"Insufficient WETH\\\");\\n\\n        if (balanceWETH9 > 0) {\\n            IWETH9(Storage.slot().weth).withdraw(_amount);\\n            safeTransferETH(_receiver, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer helper from UniswapV2 Router\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    /**\\n     * There are many non-compliant ERC20 tokens... this can handle most, adapted from UniSwap V2\\n     * Im trying to make it a habit to put external calls last (reentrancy)\\n     * You can put this in an internal function if you like.\\n     */\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // 0xa9059cbb = bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n            abi.encodeWithSelector(0xa9059cbb, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        ); // ERC20 Transfer failed\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x815d7e717efb9e9f837464cdcf19feb7a08f4166e145481fcd35f679050526c3\",\"license\":\"MIT\"},\"contracts/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/MixinAddressResolverStorage.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    modifier onlyAcceptedContracts() {\\n        require(isAcceptedContract(msg.sender), \\\"Only Accepted Contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the contract names used in this contract.\\n     * @dev The contract name list is in `./libraries/Contracts.sol`.\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @notice Returns contract names that can call this contract.\\n     * @dev The contact name listed in this method is also needed to be listed `requiredContracts` method.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = Storage.slot().resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            Storage.slot().addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                Storage.slot().resolver.getAddress(name) != Storage.slot().addressCache[name] ||\\n                Storage.slot().addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        require(address(Storage.slot().resolver) == address(0), \\\"resolver registered already\\\");\\n        Storage.slot().resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function resolver() public view returns (IAddressResolver) {\\n        return Storage.slot().resolver;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0xac122cca03c2145dfeda4bcfd98f84a745575a7053c8b1dd87c41ab3cfd5aea4\",\"license\":\"MIT\"},\"contracts/storages/CollateralParametersStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary CollateralParametersStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.collateralParameters\\\");\\n\\n    struct Storage {\\n        // liquidation price rate in basis point\\n        uint256 liquidationPriceRate;\\n        // margin call threshold rate in basis point\\n        uint256 marginCallThresholdRate;\\n        // auto liquidation threshold rate in basis point\\n        uint256 autoLiquidationThresholdRate;\\n        //  minimal collateral rate in basis point\\n        uint256 minCollateralRate;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x415a942e51ef153edd4bad40a4d9e3940e7e29770172f015647f39eab45b195a\",\"license\":\"MIT\"},\"contracts/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nstruct Currency {\\n    bool isSupported;\\n    string name;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.currencyController\\\");\\n\\n    struct Storage {\\n        // Protocol currencies\\n        mapping(bytes32 => Currency) currencies;\\n        mapping(bytes32 => uint256) haircuts;\\n        // PriceFeed\\n        mapping(bytes32 => AggregatorV3Interface) usdPriceFeeds;\\n        mapping(bytes32 => AggregatorV3Interface) ethPriceFeeds;\\n        mapping(bytes32 => uint8) usdDecimals;\\n        mapping(bytes32 => uint8) ethDecimals;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0c9e9399e6f58e0702c8edcb6b58603d281668b10bf701b119911e24bba192b\",\"license\":\"MIT\"},\"contracts/storages/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary ERC20Storage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.erc20\\\");\\n\\n    struct Storage {\\n        address weth;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d84467eb850e5927870cb2551e5d0631854cef875f2d3ede75861b5eb738c7c\",\"license\":\"MIT\"},\"contracts/storages/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.mixinAddressResolver\\\");\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 => address) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x852b885b6264a58930a0945c68842717e19f954eaefc0137235e6f263e17fa9d\",\"license\":\"MIT\"},\"contracts/storages/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary OwnableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.ownable\\\");\\n\\n    struct Storage {\\n        address owner;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ef8bfa06947cdb63d47248ad074ac42a1b1ba828a2c97e42486a5dbb2c03e1d\",\"license\":\"MIT\"},\"contracts/storages/TokenVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary TokenVaultStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.tokenVault\\\");\\n\\n    struct Storage {\\n        // Mapping from user to total unsettled collateral per currency\\n        mapping(address => mapping(bytes32 => uint256)) unsettledCollateral;\\n        // Mapping from user to unsettled exposure\\n        mapping(address => EnumerableSet.Bytes32Set) exposedUnsettledCurrencies;\\n        // Mapping from currency name to token address\\n        mapping(bytes32 => address) tokenAddresses;\\n        // Mapping for used currency vaults per user.\\n        mapping(address => EnumerableSet.Bytes32Set) usedCurrencies;\\n        // Mapping for all deposits of currency per users collateral\\n        mapping(address => mapping(bytes32 => uint256)) collateralAmounts;\\n        // Mapping from user to total escrowed amount per currency\\n        mapping(address => mapping(bytes32 => uint256)) escrowedAmount;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x21abb96a0a17972a4fb72f0af00a9de5210d78e17ce7d49b72c818d2cd9a3456\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant BP = 10000; // basis point\\n    uint256 public constant PCT = 10000; // percentage point in basis\\n\\n    uint256 internal constant DAYS_IN_YEAR = 365;\\n    uint256 internal constant SECONDS_IN_YEAR = 31557600;\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n}\\n\",\"keccak256\":\"0xebb47b6088b7fa52e4cdab8da1f7ea06308d829aed07ceae13847cbeecea09ba\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../storages/OwnableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return OwnableStorage.slot().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = OwnableStorage.slot().owner;\\n        OwnableStorage.slot().owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1c782b9deaf1f94d2af99826e6e8207f5e71f3fbb6ce18805913a3ca7dda9579\",\"license\":\"MIT\"},\"contracts/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0xe59cd60631c7c754ed6b77caa6f3a06301ef0df07881a3dcfa85124abc1890b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506134da806100206000396000f3fe6080604052600436106101dc5760003560e01c8063832878ad11610102578063b8d651d511610095578063e099765911610064578063e0997659146105a1578063f2fde38b146105b6578063fc700810146105d6578063fe9f8e36146105f657600080fd5b8063b8d651d514610521578063c91a99f914610541578063ca42303114610561578063d2a19b3e1461058157600080fd5b8063948060dd116100d1578063948060dd146104a15780639ba57c7d146104c15780639fcaebfa146104e1578063ae8128411461050157600080fd5b8063832878ad1461043957806383a5041c1461044c57806383d4394a1461046c5780638da5cb5b1461048c57600080fd5b80632af64bd31161017a578063715018a611610149578063715018a6146103c45780637796374a146103d95780637d44828e146103f95780637ea241331461041957600080fd5b80632af64bd3146103385780633d03b9da1461034d5780635d8615051461036f578063698c9269146103a457600080fd5b80630cfe33fa116101b65780630cfe33fa146102c25780631de26e16146102f057806325e1f09f1461030357806329985e5a1461032357600080fd5b8063040cf0201461024057806304f3bcec146102605780630cf7505d1461029257600080fd5b3661023b576101e9610616565b6001600160a01b0316336001600160a01b0316146102395760405162461bcd60e51b815260206004820152600860248201526709cdee840ae8aa8960c31b60448201526064015b60405180910390fd5b005b600080fd5b34801561024c57600080fd5b5061023961025b366004612e31565b610637565b34801561026c57600080fd5b50610275610888565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561029e57600080fd5b506102b26102ad366004612e53565b61089e565b6040519015158152602001610289565b3480156102ce57600080fd5b506102e26102dd366004612e81565b6108cc565b604051908152602001610289565b6102396102fe366004612e31565b61091d565b34801561030f57600080fd5b506102b261031e366004612e81565b610a1e565b34801561032f57600080fd5b50610239610a32565b34801561034457600080fd5b506102b2610bdf565b34801561035957600080fd5b50610362610d45565b6040516102899190612e9e565b34801561037b57600080fd5b50610384610dd7565b604080519485526020850193909352918301526060820152608001610289565b3480156103b057600080fd5b506102396103bf366004612ee2565b610df3565b3480156103d057600080fd5b50610239610e51565b3480156103e557600080fd5b506102e26103f4366004612f28565b610e8c565b34801561040557600080fd5b506102e2610414366004612f28565b610f24565b34801561042557600080fd5b506102e2610434366004612f28565b610f5b565b610239610447366004612f54565b610f8e565b34801561045857600080fd5b50610239610467366004612f89565b6110b8565b34801561047857600080fd5b50610239610487366004613047565b61125b565b34801561049857600080fd5b506102756112f0565b3480156104ad57600080fd5b506102e26104bc366004612e81565b611318565b3480156104cd57600080fd5b506102e26104dc366004612e81565b611323565b3480156104ed57600080fd5b506102396104fc366004612f54565b6113a9565b34801561050d57600080fd5b5061023961051c3660046130d5565b6114d5565b34801561052d57600080fd5b5061023961053c366004613047565b611516565b34801561054d57600080fd5b506102e261055c366004612e81565b6115c8565b34801561056d57600080fd5b506102e261057c366004612e81565b6115d6565b34801561058d57600080fd5b5061023961059c366004613107565b6115e4565b3480156105ad57600080fd5b5061036261174b565b3480156105c257600080fd5b506102396105d1366004612e81565b61179b565b3480156105e257600080fd5b506103626105f1366004612e81565b61183b565b34801561060257600080fd5b50610239610611366004612ee2565b61190a565b60006000805160206134858339815191525b546001600160a01b0316919050565b816106418161089e565b61065d5760405162461bcd60e51b815260040161023090613137565b6000821161067d5760405162461bcd60e51b81526004016102309061316e565b3360006106898261193b565b905060006106956119dd565b6040516306d062ad60e01b815260048101889052602481018490526001600160a01b0391909116906306d062ad9060440160206040518083038186803b1580156106de57600080fd5b505afa1580156106f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107169190613196565b905060008186116107275785610729565b815b905080610734611a02565b6001600160a01b0386166000908152600491909101602090815260408083208b845290915290205410156107c15760405162461bcd60e51b815260206004820152602e60248201527f4e6f7420656e6f75676820636f6c6c61746572616c20696e207468652073656c60448201526d65637465642063757272656e637960901b6064820152608401610230565b806107ca611a02565b6001600160a01b0386166000908152600491909101602090815260408083208b8452909152812080549091906108019084906131c5565b909155506108359050610812611a02565b600089815260029190910160205260409020546001600160a01b03163383611a26565b61083e87611a63565b60408051338152602081018990529081018290527fc3ded2be7db21b1af963f267d27750e4a15f174547d88b886b9bda43e2c6fa329060600160405180910390a150505050505050565b6000600080516020613465833981519152610628565b6000806108a9611a02565b60009384526002016020526040909220546001600160a01b031690911415919050565b6000806108d883611323565b905060006108e884600080611adc565b6108f185611c27565b6108fb91906131dc565b905080821161090b576000610915565b61091581836131c5565b949350505050565b816109278161089e565b6109435760405162461bcd60e51b815260040161023090613137565b600082116109635760405162461bcd60e51b81526004016102309061316e565b61099261096e611a02565b600085815260029190910160205260409020546001600160a01b0316333085611ccf565b8161099b611a02565b33600090815260049190910160209081526040808320878452909152812080549091906109c99084906131dc565b909155506109d8905083611a63565b60408051338152602081018590529081018390527f19dacbf83c5de6658e14cbf7bcae5c15eca2eedecf1c66fbca928e4d351bea0f9060600160405180910390a1505050565b6000610a2c82600080611d0d565b92915050565b6000610a3c610d45565b905060005b8151811015610bdb576000828281518110610a5e57610a5e6131f4565b602002602001015190506000610a7f60008051602061346583398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd91610af091869190605d01613262565b60206040518083038186803b158015610b0857600080fd5b505afa158015610b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b40919061327b565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a150508080610bd390613298565b915050610a41565b5050565b600080610bea610d45565b905060005b8151811015610d3c576000828281518110610c0c57610c0c6131f4565b60200260200101519050610c2b60008051602061346583398151915290565b600082815260019190910160205260409020546001600160a01b0316600080516020613465833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b158015610c9857600080fd5b505afa158015610cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd0919061327b565b6001600160a01b0316141580610d1a575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b15610d29576000935050505090565b5080610d3481613298565b915050610bef565b50600191505090565b60408051600280825260608083018452926020830190803683370190505090507121bab93932b731bca1b7b73a3937b63632b960711b81600081518110610d8e57610d8e6131f4565b602002602001018181525050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600181518110610dc857610dc86131f4565b60200260200101818152505090565b600080600080610de5611d70565b935093509350935090919293565b610dfc33611db1565b610e185760405162461bcd60e51b8152600401610230906132c9565b81610e228161089e565b610e3e5760405162461bcd60e51b815260040161023090613137565b610e4a85858585611e21565b5050505050565b33610e5a6112f0565b6001600160a01b031614610e805760405162461bcd60e51b815260040161023090613300565b610e8a6000611f90565b565b600080610e998484610f24565b9050610ea36119dd565b6040516344a6ecdd60e01b815260048101859052602481018390526001600160a01b0391909116906344a6ecdd9060440160206040518083038186803b158015610eec57600080fd5b505afa158015610f00573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109159190613196565b6000610f2e611a02565b6001600160a01b039390931660009081526004909301602090815260408085209385529290525090205490565b6000610f65611a02565b6001600160a01b0384166000908152602091825260408082208583529092522054905092915050565b610f9733611db1565b610fb35760405162461bcd60e51b8152600401610230906132c9565b81610fbd8161089e565b610fd95760405162461bcd60e51b815260040161023090613137565b60008211610ff95760405162461bcd60e51b81526004016102309061316e565b611028611004611a02565b600085815260029190910160205260409020546001600160a01b0316853085611ccf565b81611031611a02565b6001600160a01b038616600090815260059190910160209081526040808320878452909152812080549091906110689084906131dc565b909155505060408051848152602081018490526001600160a01b038616917fa8f792519e7a6ab4f06121c0e11f2b45df7a581842ead2191d87afe3c81d50b491015b60405180910390a250505050565b600054610100900460ff16158080156110d85750600054600160ff909116105b806110f25750303b1580156110f2575060005460ff166001145b6111555760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610230565b6000805460ff191660011790558015611178576000805461ff0019166101001790555b6000611182612001565b6001600160a01b031614156111e45760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b6064820152608401610230565b6111ed88611f90565b6111f687612029565b6111ff826120c1565b61120b86868686612132565b8015611251576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b61126433611db1565b6112805760405162461bcd60e51b8152600401610230906132c9565b60005b858110156112e7576112d58787838181106112a0576112a06131f4565b90506020020160208101906112b59190612e81565b86868686868181106112c9576112c96131f4565b9050602002013561219b565b806112df81613298565b915050611283565b50505050505050565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa610628565b6000610a2c8261193b565b60008061132e611a02565b6001600160a01b038416600090815260039190910160205260408120915080806113578461232f565b905060005b8181101561139e5760006113708683612339565b905061137c8882610e8c565b945061138885856131dc565b935050808061139690613298565b91505061135c565b509095945050505050565b6113b233611db1565b6113ce5760405162461bcd60e51b8152600401610230906132c9565b6113fc826113da611a02565b6001600160a01b03861660009081526001919091016020526040902090612345565b50611408838383611d0d565b61144c5760405162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da0818dbdb1b185d195c985b605a1b6044820152606401610230565b80611455611a02565b6001600160a01b03851660009081526020918252604080822086835290925290812080549091906114879084906131dc565b909155505060408051838152602081018390526001600160a01b038516917f430a1193f254f9e15dc397d101a1ecf0a3383c95007062135900cc7c2a6b8043910160405180910390a2505050565b336114de6112f0565b6001600160a01b0316146115045760405162461bcd60e51b815260040161023090613300565b61151084848484612132565b50505050565b61151f33611db1565b61153b5760405162461bcd60e51b8152600401610230906132c9565b826115458161089e565b6115615760405162461bcd60e51b815260040161023090613137565b60005b86811015611251576115b6888883818110611581576115816131f4565b90506020020160208101906115969190612e81565b87878787868181106115aa576115aa6131f4565b90506020020135611e21565b806115c081613298565b915050611564565b6000610a2c82600080611adc565b6000610a2c82600080612351565b336115ed6112f0565b6001600160a01b0316146116135760405162461bcd60e51b815260040161023090613300565b61161b6119dd565b6001600160a01b031663d4d4f6ce836040518263ffffffff1660e01b815260040161164891815260200190565b60206040518083038186803b15801561166057600080fd5b505afa158015611674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116989190613335565b6116d75760405162461bcd60e51b815260206004820152601060248201526f496e76616c69642063757272656e637960801b6044820152606401610230565b806116e0611a02565b6000848152600291909101602090815260409182902080546001600160a01b0319166001600160a01b039485161790558151858152928416908301527f2fe2c48bc79b8185433d1932041ab19e591d41c83d319835ea1c5bb357428790910160405180910390a15050565b60408051600180825281830190925260609160208083019080368337019050509050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600081518110610dc857610dc86131f4565b336117a46112f0565b6001600160a01b0316146117ca5760405162461bcd60e51b815260040161023090613300565b6001600160a01b03811661182f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610230565b61183881611f90565b50565b60606000611847611a02565b6001600160a01b038416600090815260039190910160205260408120915061186e8261232f565b905060008167ffffffffffffffff81111561188b5761188b6132b3565b6040519080825280602002602001820160405280156118b4578160200160208202803683370190505b50905060005b828110156119015760006118ce8583612339565b9050808383815181106118e3576118e36131f4565b602090810291909101015250806118f981613298565b9150506118ba565b50949350505050565b61191333611db1565b61192f5760405162461bcd60e51b8152600401610230906132c9565b6115108484848461219b565b60008061194783611323565b9050600061195784600080611adc565b61196085611c27565b61196a91906131dc565b905080611978575092915050565b6127106119836123a7565b61198d9083613357565b6119979190613376565b8211156119d3576127106119a96123a7565b6119b39083613357565b6119bf61271085613357565b6119c991906131c5565b6109159190613376565b5060009392505050565b60006119fd7121bab93932b731bca1b7b73a3937b63632b960711b6123ba565b905090565b7f53832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a831790565b600080516020613485833981519152546001600160a01b0384811691161415611a5857611a538282612452565b505050565b611a5383838361259d565b6000611a6d611a02565b336000908152600491909101602090815260408083208584529091529020541115611ab757610bdb81611a9e611a02565b3360009081526003919091016020526040902090612345565b610bdb81611ac3611a02565b3360009081526003919091016020526040902090612681565b600080611ae7611a02565b6001600160a01b0386166000908152600191909101602052604081209150805b611b108361232f565b811015611c1d576000611b238483612339565b9050611b2d611a02565b6001600160a01b0389166000908152602091825260408082208483529092522054925086811415611b6557611b6286846131dc565b92505b60008311611b74576000611bfd565b611b7c6119dd565b6040516344a6ecdd60e01b815260048101839052602481018590526001600160a01b0391909116906344a6ecdd9060440160206040518083038186803b158015611bc557600080fd5b505afa158015611bd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfd9190613196565b611c0790866131dc565b9450508080611c1590613298565b915050611b07565b5050509392505050565b600080611c3261268d565b60405163fb54a6b360e01b81526001600160a01b038581166004830152919091169063fb54a6b39060240160206040518083038186803b158015611c7557600080fd5b505afa158015611c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cad9190613196565b905060008113611cc557611cc081613398565b611cc8565b60005b9392505050565b600080516020613485833981519152546001600160a01b0385811691161415611d0157611cfc82826126b2565b611510565b611510848484846127fb565b600080611d1985611323565b90506000611d28868686611adc565b611d3187611c27565b611d3b91906131dc565b9050801580611d665750611d4d6123a7565b611d579082613357565b611d6361271084613357565b10155b9695505050505050565b600080600080611d7e6128ef565b60010154611d8a6128ef565b60020154611d966128ef565b54611d9f6128ef565b60030154935093509350935090919293565b600080611dbc61174b565b905060005b81518110156119d357611dec828281518110611ddf57611ddf6131f4565b60200260200101516123ba565b6001600160a01b0316846001600160a01b03161415611e0f575060019392505050565b80611e1981613298565b915050611dc1565b60008111611e415760405162461bcd60e51b81526004016102309061316e565b80611e4a611a02565b6001600160a01b0386166000908152600591909101602090815260408083208684529091529020541015611ec05760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820657363726f77656420616d6f756e740000000000006044820152606401610230565b80611ec9611a02565b6001600160a01b03861660009081526005919091016020908152604080832086845290915281208054909190611f009084906131c5565b90915550611f349050611f11611a02565b600084815260029190910160205260409020546001600160a01b03168483611a26565b826001600160a01b0316846001600160a01b03167f489c987eaac048a27dbf1d61a1ab18bbaa6cc7243f9b90e3ba00f1edb26ae20f8484604051611f82929190918252602082015260400190565b60405180910390a350505050565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610628565b600080516020613465833981519152546001600160a01b03161561208f5760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c726561647900000000006044820152606401610230565b806000805160206134658339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b600080516020613485833981519152546001600160a01b03161561211d5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610230565b806000805160206134858339815191526120a0565b61213a6128ef565b60010154841461214d5761214d84612913565b6121556128ef565b6002015483146121685761216883612987565b6121706128ef565b5482146121805761218082612a66565b6121886128ef565b6003015481146115105761151081612b2e565b806121a4611a02565b6001600160a01b038616600090815260209182526040808220868352909252205410156122135760405162461bcd60e51b815260206004820152601f60248201527f4e6f7420656e6f75676820756e736574746c656420636f6c6c61746572616c006044820152606401610230565b8061221c611a02565b6001600160a01b038616600090815260209182526040808220868352909252908120805490919061224e9084906131c5565b90915550506001600160a01b038316156122915761229161226d611a02565b600084815260029190910160205260409020546001600160a01b03168486846127fb565b612299611a02565b6001600160a01b03851660009081526020918252604080822085835290925220546122ee576122ec826122ca611a02565b6001600160a01b03871660009081526001919091016020526040902090612681565b505b60408051838152602081018390526001600160a01b038616917fb4c40c9409d6c2c7dfd2fb0d7e0f26582b9dd0dee72dc0ff6ff09af501ba7a7691016110aa565b6000610a2c825490565b6000611cc88383612bfc565b6000611cc88383612c26565b60008061235d85611323565b9050600061236c868686611adc565b61237587611c27565b61237f91906131dc565b9050811561239e578161239461271083613357565b611d669190613376565b50509392505050565b60006123b16128ef565b60010154905090565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b0316908161244b5760405162461bcd60e51b815260040161023091906133b5565b5092915050565b6000600080516020613485833981519152546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156124a457600080fd5b505afa1580156124b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124dc9190613196565b9050818110156125225760405162461bcd60e51b8152602060048201526011602482015270092dce6eaccccd2c6d2cadce840ae8aa89607b1b6044820152606401610230565b8015611a535760008051602061348583398151915254604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561257b57600080fd5b505af115801561258f573d6000803e3d6000fd5b50505050611a538383612c75565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916125f991906133c8565b6000604051808303816000865af19150503d8060008114612636576040519150601f19603f3d011682016040523d82523d6000602084013e61263b565b606091505b50915091508180156126655750805115806126655750808060200190518101906126659190613335565b610e4a5760405162461bcd60e51b8152600401610230906133e4565b6000611cc88383612d3e565b60006119fd762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b6123ba565b804710156126f55760405162461bcd60e51b815260206004820152601060248201526f092dce6eaccccd2c6d2cadce8408aa8960831b6044820152606401610230565b6000805160206134858339815191525460408051630d0e30db60e41b815290516001600160a01b039092169163d0e30db0918491600480830192600092919082900301818588803b15801561274957600080fd5b505af115801561275d573d6000803e3d6000fd5b505050505061277760008051602061348583398151915290565b5460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b1580156127c357600080fd5b505af11580156127d7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a539190613335565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161285f91906133c8565b6000604051808303816000865af19150503d806000811461289c576040519150601f19603f3d011682016040523d82523d6000602084013e6128a1565b606091505b50915091508180156128cb5750805115806128cb5750808060200190518101906128cb9190613335565b6128e75760405162461bcd60e51b8152600401610230906133e4565b505050505050565b7f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d05290565b600081116129335760405162461bcd60e51b815260040161023090613428565b7f31ee2d7ab5f3365672e54f81f75b37a4d8b0f1085872bdb80349a1cb08ddb71161295c6128ef565b6001015460408051918252602082018490520160405180910390a1806129806128ef565b6001015550565b600081116129a75760405162461bcd60e51b815260040161023090613428565b6129af6128ef565b600101548110612a125760405162461bcd60e51b815260206004820152602860248201527f4175746f206c69717569646174696f6e207468726573686f6c642072617465206044820152676f766572666c6f7760c01b6064820152608401610230565b7fd3353684d64f1c80498433d8407c96e6bbeb1ec88b6200ec97d2c910fdbd0da4612a3b6128ef565b6002015460408051918252602082018490520160405180910390a180612a5f6128ef565b6002015550565b60008111612a865760405162461bcd60e51b815260040161023090613428565b612a8e6128ef565b600201548110612ae05760405162461bcd60e51b815260206004820152601f60248201527f4c69717569646174696f6e2070726963652072617465206f766572666c6f77006044820152606401610230565b7f86aa422ec6af9520cb2f744924b12937e3db1aa5ce22050d0d519621e8409070612b096128ef565b5460408051918252602082018490520160405180910390a180612b2a6128ef565b5550565b60008111612b4e5760405162461bcd60e51b815260040161023090613428565b612b566128ef565b600201548110612ba85760405162461bcd60e51b815260206004820152601c60248201527f4d696e20636f6c6c61746572616c2072617465206f766572666c6f77000000006044820152606401610230565b7f8367b1759e8fdce5712002e7aa025339b99cf3c850b194ebdf37219f86b01ee6612bd16128ef565b6003015460408051918252602082018490520160405180910390a180612bf56128ef565b6003015550565b6000826000018281548110612c1357612c136131f4565b9060005260206000200154905092915050565b6000818152600183016020526040812054612c6d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a2c565b506000610a2c565b604080516000808252602082019092526001600160a01b038416908390604051612c9f91906133c8565b60006040518083038185875af1925050503d8060008114612cdc576040519150601f19603f3d011682016040523d82523d6000602084013e612ce1565b606091505b5050905080611a535760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b6064820152608401610230565b60008181526001830160205260408120548015612e27576000612d626001836131c5565b8554909150600090612d76906001906131c5565b9050818114612ddb576000866000018281548110612d9657612d966131f4565b9060005260206000200154905080876000018481548110612db957612db96131f4565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612dec57612dec61344e565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610a2c565b6000915050610a2c565b60008060408385031215612e4457600080fd5b50508035926020909101359150565b600060208284031215612e6557600080fd5b5035919050565b6001600160a01b038116811461183857600080fd5b600060208284031215612e9357600080fd5b8135611cc881612e6c565b6020808252825182820181905260009190848201906040850190845b81811015612ed657835183529284019291840191600101612eba565b50909695505050505050565b60008060008060808587031215612ef857600080fd5b8435612f0381612e6c565b93506020850135612f1381612e6c565b93969395505050506040820135916060013590565b60008060408385031215612f3b57600080fd5b8235612f4681612e6c565b946020939093013593505050565b600080600060608486031215612f6957600080fd5b8335612f7481612e6c565b95602085013595506040909401359392505050565b600080600080600080600060e0888a031215612fa457600080fd5b8735612faf81612e6c565b96506020880135612fbf81612e6c565b955060408801359450606088013593506080880135925060a0880135915060c0880135612feb81612e6c565b8091505092959891949750929550565b60008083601f84011261300d57600080fd5b50813567ffffffffffffffff81111561302557600080fd5b6020830191508360208260051b850101111561304057600080fd5b9250929050565b6000806000806000806080878903121561306057600080fd5b863567ffffffffffffffff8082111561307857600080fd5b6130848a838b01612ffb565b90985096506020890135915061309982612e6c565b90945060408801359350606088013590808211156130b657600080fd5b506130c389828a01612ffb565b979a9699509497509295939492505050565b600080600080608085870312156130eb57600080fd5b5050823594602084013594506040840135936060013592509050565b6000806040838503121561311a57600080fd5b82359150602083013561312c81612e6c565b809150509250929050565b60208082526017908201527f43757272656e6379206e6f742072656769737465726564000000000000000000604082015260600190565b6020808252600e908201526d125b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b6000602082840312156131a857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156131d7576131d76131af565b500390565b600082198211156131ef576131ef6131af565b500190565b634e487b7160e01b600052603260045260246000fd5b60005b8381101561322557818101518382015260200161320d565b838111156115105750506000910152565b6000815180845261324e81602086016020860161320a565b601f01601f19169290920160200192915050565b8281526040602082015260006109156040830184613236565b60006020828403121561328d57600080fd5b8151611cc881612e6c565b60006000198214156132ac576132ac6131af565b5060010190565b634e487b7160e01b600052604160045260246000fd5b60208082526017908201527f4f6e6c7920416363657074656420436f6e747261637473000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561334757600080fd5b81518015158114611cc857600080fd5b6000816000190483118215151615613371576133716131af565b500290565b60008261339357634e487b7160e01b600052601260045260246000fd5b500490565b6000600160ff1b8214156133ae576133ae6131af565b5060000390565b602081526000611cc86020830184613236565b600082516133da81846020870161320a565b9190910192915050565b60208082526024908201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416040820152631253115160e21b606082015260800190565b6020808252600c908201526b52617465206973207a65726f60a01b604082015260600190565b634e487b7160e01b600052603160045260246000fdfe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240187522ee63bb7da831844dcdb60f35e8cfa51225eeb4ed6734e421ed06f0d56805a2646970667358221220b527db2bc4a4571bc9f0fb037a07363a3b823a3696999e196f52de67504f38a664736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101dc5760003560e01c8063832878ad11610102578063b8d651d511610095578063e099765911610064578063e0997659146105a1578063f2fde38b146105b6578063fc700810146105d6578063fe9f8e36146105f657600080fd5b8063b8d651d514610521578063c91a99f914610541578063ca42303114610561578063d2a19b3e1461058157600080fd5b8063948060dd116100d1578063948060dd146104a15780639ba57c7d146104c15780639fcaebfa146104e1578063ae8128411461050157600080fd5b8063832878ad1461043957806383a5041c1461044c57806383d4394a1461046c5780638da5cb5b1461048c57600080fd5b80632af64bd31161017a578063715018a611610149578063715018a6146103c45780637796374a146103d95780637d44828e146103f95780637ea241331461041957600080fd5b80632af64bd3146103385780633d03b9da1461034d5780635d8615051461036f578063698c9269146103a457600080fd5b80630cfe33fa116101b65780630cfe33fa146102c25780631de26e16146102f057806325e1f09f1461030357806329985e5a1461032357600080fd5b8063040cf0201461024057806304f3bcec146102605780630cf7505d1461029257600080fd5b3661023b576101e9610616565b6001600160a01b0316336001600160a01b0316146102395760405162461bcd60e51b815260206004820152600860248201526709cdee840ae8aa8960c31b60448201526064015b60405180910390fd5b005b600080fd5b34801561024c57600080fd5b5061023961025b366004612e31565b610637565b34801561026c57600080fd5b50610275610888565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561029e57600080fd5b506102b26102ad366004612e53565b61089e565b6040519015158152602001610289565b3480156102ce57600080fd5b506102e26102dd366004612e81565b6108cc565b604051908152602001610289565b6102396102fe366004612e31565b61091d565b34801561030f57600080fd5b506102b261031e366004612e81565b610a1e565b34801561032f57600080fd5b50610239610a32565b34801561034457600080fd5b506102b2610bdf565b34801561035957600080fd5b50610362610d45565b6040516102899190612e9e565b34801561037b57600080fd5b50610384610dd7565b604080519485526020850193909352918301526060820152608001610289565b3480156103b057600080fd5b506102396103bf366004612ee2565b610df3565b3480156103d057600080fd5b50610239610e51565b3480156103e557600080fd5b506102e26103f4366004612f28565b610e8c565b34801561040557600080fd5b506102e2610414366004612f28565b610f24565b34801561042557600080fd5b506102e2610434366004612f28565b610f5b565b610239610447366004612f54565b610f8e565b34801561045857600080fd5b50610239610467366004612f89565b6110b8565b34801561047857600080fd5b50610239610487366004613047565b61125b565b34801561049857600080fd5b506102756112f0565b3480156104ad57600080fd5b506102e26104bc366004612e81565b611318565b3480156104cd57600080fd5b506102e26104dc366004612e81565b611323565b3480156104ed57600080fd5b506102396104fc366004612f54565b6113a9565b34801561050d57600080fd5b5061023961051c3660046130d5565b6114d5565b34801561052d57600080fd5b5061023961053c366004613047565b611516565b34801561054d57600080fd5b506102e261055c366004612e81565b6115c8565b34801561056d57600080fd5b506102e261057c366004612e81565b6115d6565b34801561058d57600080fd5b5061023961059c366004613107565b6115e4565b3480156105ad57600080fd5b5061036261174b565b3480156105c257600080fd5b506102396105d1366004612e81565b61179b565b3480156105e257600080fd5b506103626105f1366004612e81565b61183b565b34801561060257600080fd5b50610239610611366004612ee2565b61190a565b60006000805160206134858339815191525b546001600160a01b0316919050565b816106418161089e565b61065d5760405162461bcd60e51b815260040161023090613137565b6000821161067d5760405162461bcd60e51b81526004016102309061316e565b3360006106898261193b565b905060006106956119dd565b6040516306d062ad60e01b815260048101889052602481018490526001600160a01b0391909116906306d062ad9060440160206040518083038186803b1580156106de57600080fd5b505afa1580156106f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107169190613196565b905060008186116107275785610729565b815b905080610734611a02565b6001600160a01b0386166000908152600491909101602090815260408083208b845290915290205410156107c15760405162461bcd60e51b815260206004820152602e60248201527f4e6f7420656e6f75676820636f6c6c61746572616c20696e207468652073656c60448201526d65637465642063757272656e637960901b6064820152608401610230565b806107ca611a02565b6001600160a01b0386166000908152600491909101602090815260408083208b8452909152812080549091906108019084906131c5565b909155506108359050610812611a02565b600089815260029190910160205260409020546001600160a01b03163383611a26565b61083e87611a63565b60408051338152602081018990529081018290527fc3ded2be7db21b1af963f267d27750e4a15f174547d88b886b9bda43e2c6fa329060600160405180910390a150505050505050565b6000600080516020613465833981519152610628565b6000806108a9611a02565b60009384526002016020526040909220546001600160a01b031690911415919050565b6000806108d883611323565b905060006108e884600080611adc565b6108f185611c27565b6108fb91906131dc565b905080821161090b576000610915565b61091581836131c5565b949350505050565b816109278161089e565b6109435760405162461bcd60e51b815260040161023090613137565b600082116109635760405162461bcd60e51b81526004016102309061316e565b61099261096e611a02565b600085815260029190910160205260409020546001600160a01b0316333085611ccf565b8161099b611a02565b33600090815260049190910160209081526040808320878452909152812080549091906109c99084906131dc565b909155506109d8905083611a63565b60408051338152602081018590529081018390527f19dacbf83c5de6658e14cbf7bcae5c15eca2eedecf1c66fbca928e4d351bea0f9060600160405180910390a1505050565b6000610a2c82600080611d0d565b92915050565b6000610a3c610d45565b905060005b8151811015610bdb576000828281518110610a5e57610a5e6131f4565b602002602001015190506000610a7f60008051602061346583398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd91610af091869190605d01613262565b60206040518083038186803b158015610b0857600080fd5b505afa158015610b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b40919061327b565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a150508080610bd390613298565b915050610a41565b5050565b600080610bea610d45565b905060005b8151811015610d3c576000828281518110610c0c57610c0c6131f4565b60200260200101519050610c2b60008051602061346583398151915290565b600082815260019190910160205260409020546001600160a01b0316600080516020613465833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b158015610c9857600080fd5b505afa158015610cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd0919061327b565b6001600160a01b0316141580610d1a575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b15610d29576000935050505090565b5080610d3481613298565b915050610bef565b50600191505090565b60408051600280825260608083018452926020830190803683370190505090507121bab93932b731bca1b7b73a3937b63632b960711b81600081518110610d8e57610d8e6131f4565b602002602001018181525050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600181518110610dc857610dc86131f4565b60200260200101818152505090565b600080600080610de5611d70565b935093509350935090919293565b610dfc33611db1565b610e185760405162461bcd60e51b8152600401610230906132c9565b81610e228161089e565b610e3e5760405162461bcd60e51b815260040161023090613137565b610e4a85858585611e21565b5050505050565b33610e5a6112f0565b6001600160a01b031614610e805760405162461bcd60e51b815260040161023090613300565b610e8a6000611f90565b565b600080610e998484610f24565b9050610ea36119dd565b6040516344a6ecdd60e01b815260048101859052602481018390526001600160a01b0391909116906344a6ecdd9060440160206040518083038186803b158015610eec57600080fd5b505afa158015610f00573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109159190613196565b6000610f2e611a02565b6001600160a01b039390931660009081526004909301602090815260408085209385529290525090205490565b6000610f65611a02565b6001600160a01b0384166000908152602091825260408082208583529092522054905092915050565b610f9733611db1565b610fb35760405162461bcd60e51b8152600401610230906132c9565b81610fbd8161089e565b610fd95760405162461bcd60e51b815260040161023090613137565b60008211610ff95760405162461bcd60e51b81526004016102309061316e565b611028611004611a02565b600085815260029190910160205260409020546001600160a01b0316853085611ccf565b81611031611a02565b6001600160a01b038616600090815260059190910160209081526040808320878452909152812080549091906110689084906131dc565b909155505060408051848152602081018490526001600160a01b038616917fa8f792519e7a6ab4f06121c0e11f2b45df7a581842ead2191d87afe3c81d50b491015b60405180910390a250505050565b600054610100900460ff16158080156110d85750600054600160ff909116105b806110f25750303b1580156110f2575060005460ff166001145b6111555760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610230565b6000805460ff191660011790558015611178576000805461ff0019166101001790555b6000611182612001565b6001600160a01b031614156111e45760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b6064820152608401610230565b6111ed88611f90565b6111f687612029565b6111ff826120c1565b61120b86868686612132565b8015611251576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b61126433611db1565b6112805760405162461bcd60e51b8152600401610230906132c9565b60005b858110156112e7576112d58787838181106112a0576112a06131f4565b90506020020160208101906112b59190612e81565b86868686868181106112c9576112c96131f4565b9050602002013561219b565b806112df81613298565b915050611283565b50505050505050565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa610628565b6000610a2c8261193b565b60008061132e611a02565b6001600160a01b038416600090815260039190910160205260408120915080806113578461232f565b905060005b8181101561139e5760006113708683612339565b905061137c8882610e8c565b945061138885856131dc565b935050808061139690613298565b91505061135c565b509095945050505050565b6113b233611db1565b6113ce5760405162461bcd60e51b8152600401610230906132c9565b6113fc826113da611a02565b6001600160a01b03861660009081526001919091016020526040902090612345565b50611408838383611d0d565b61144c5760405162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da0818dbdb1b185d195c985b605a1b6044820152606401610230565b80611455611a02565b6001600160a01b03851660009081526020918252604080822086835290925290812080549091906114879084906131dc565b909155505060408051838152602081018390526001600160a01b038516917f430a1193f254f9e15dc397d101a1ecf0a3383c95007062135900cc7c2a6b8043910160405180910390a2505050565b336114de6112f0565b6001600160a01b0316146115045760405162461bcd60e51b815260040161023090613300565b61151084848484612132565b50505050565b61151f33611db1565b61153b5760405162461bcd60e51b8152600401610230906132c9565b826115458161089e565b6115615760405162461bcd60e51b815260040161023090613137565b60005b86811015611251576115b6888883818110611581576115816131f4565b90506020020160208101906115969190612e81565b87878787868181106115aa576115aa6131f4565b90506020020135611e21565b806115c081613298565b915050611564565b6000610a2c82600080611adc565b6000610a2c82600080612351565b336115ed6112f0565b6001600160a01b0316146116135760405162461bcd60e51b815260040161023090613300565b61161b6119dd565b6001600160a01b031663d4d4f6ce836040518263ffffffff1660e01b815260040161164891815260200190565b60206040518083038186803b15801561166057600080fd5b505afa158015611674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116989190613335565b6116d75760405162461bcd60e51b815260206004820152601060248201526f496e76616c69642063757272656e637960801b6044820152606401610230565b806116e0611a02565b6000848152600291909101602090815260409182902080546001600160a01b0319166001600160a01b039485161790558151858152928416908301527f2fe2c48bc79b8185433d1932041ab19e591d41c83d319835ea1c5bb357428790910160405180910390a15050565b60408051600180825281830190925260609160208083019080368337019050509050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600081518110610dc857610dc86131f4565b336117a46112f0565b6001600160a01b0316146117ca5760405162461bcd60e51b815260040161023090613300565b6001600160a01b03811661182f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610230565b61183881611f90565b50565b60606000611847611a02565b6001600160a01b038416600090815260039190910160205260408120915061186e8261232f565b905060008167ffffffffffffffff81111561188b5761188b6132b3565b6040519080825280602002602001820160405280156118b4578160200160208202803683370190505b50905060005b828110156119015760006118ce8583612339565b9050808383815181106118e3576118e36131f4565b602090810291909101015250806118f981613298565b9150506118ba565b50949350505050565b61191333611db1565b61192f5760405162461bcd60e51b8152600401610230906132c9565b6115108484848461219b565b60008061194783611323565b9050600061195784600080611adc565b61196085611c27565b61196a91906131dc565b905080611978575092915050565b6127106119836123a7565b61198d9083613357565b6119979190613376565b8211156119d3576127106119a96123a7565b6119b39083613357565b6119bf61271085613357565b6119c991906131c5565b6109159190613376565b5060009392505050565b60006119fd7121bab93932b731bca1b7b73a3937b63632b960711b6123ba565b905090565b7f53832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a831790565b600080516020613485833981519152546001600160a01b0384811691161415611a5857611a538282612452565b505050565b611a5383838361259d565b6000611a6d611a02565b336000908152600491909101602090815260408083208584529091529020541115611ab757610bdb81611a9e611a02565b3360009081526003919091016020526040902090612345565b610bdb81611ac3611a02565b3360009081526003919091016020526040902090612681565b600080611ae7611a02565b6001600160a01b0386166000908152600191909101602052604081209150805b611b108361232f565b811015611c1d576000611b238483612339565b9050611b2d611a02565b6001600160a01b0389166000908152602091825260408082208483529092522054925086811415611b6557611b6286846131dc565b92505b60008311611b74576000611bfd565b611b7c6119dd565b6040516344a6ecdd60e01b815260048101839052602481018590526001600160a01b0391909116906344a6ecdd9060440160206040518083038186803b158015611bc557600080fd5b505afa158015611bd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfd9190613196565b611c0790866131dc565b9450508080611c1590613298565b915050611b07565b5050509392505050565b600080611c3261268d565b60405163fb54a6b360e01b81526001600160a01b038581166004830152919091169063fb54a6b39060240160206040518083038186803b158015611c7557600080fd5b505afa158015611c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cad9190613196565b905060008113611cc557611cc081613398565b611cc8565b60005b9392505050565b600080516020613485833981519152546001600160a01b0385811691161415611d0157611cfc82826126b2565b611510565b611510848484846127fb565b600080611d1985611323565b90506000611d28868686611adc565b611d3187611c27565b611d3b91906131dc565b9050801580611d665750611d4d6123a7565b611d579082613357565b611d6361271084613357565b10155b9695505050505050565b600080600080611d7e6128ef565b60010154611d8a6128ef565b60020154611d966128ef565b54611d9f6128ef565b60030154935093509350935090919293565b600080611dbc61174b565b905060005b81518110156119d357611dec828281518110611ddf57611ddf6131f4565b60200260200101516123ba565b6001600160a01b0316846001600160a01b03161415611e0f575060019392505050565b80611e1981613298565b915050611dc1565b60008111611e415760405162461bcd60e51b81526004016102309061316e565b80611e4a611a02565b6001600160a01b0386166000908152600591909101602090815260408083208684529091529020541015611ec05760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820657363726f77656420616d6f756e740000000000006044820152606401610230565b80611ec9611a02565b6001600160a01b03861660009081526005919091016020908152604080832086845290915281208054909190611f009084906131c5565b90915550611f349050611f11611a02565b600084815260029190910160205260409020546001600160a01b03168483611a26565b826001600160a01b0316846001600160a01b03167f489c987eaac048a27dbf1d61a1ab18bbaa6cc7243f9b90e3ba00f1edb26ae20f8484604051611f82929190918252602082015260400190565b60405180910390a350505050565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610628565b600080516020613465833981519152546001600160a01b03161561208f5760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c726561647900000000006044820152606401610230565b806000805160206134658339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b600080516020613485833981519152546001600160a01b03161561211d5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610230565b806000805160206134858339815191526120a0565b61213a6128ef565b60010154841461214d5761214d84612913565b6121556128ef565b6002015483146121685761216883612987565b6121706128ef565b5482146121805761218082612a66565b6121886128ef565b6003015481146115105761151081612b2e565b806121a4611a02565b6001600160a01b038616600090815260209182526040808220868352909252205410156122135760405162461bcd60e51b815260206004820152601f60248201527f4e6f7420656e6f75676820756e736574746c656420636f6c6c61746572616c006044820152606401610230565b8061221c611a02565b6001600160a01b038616600090815260209182526040808220868352909252908120805490919061224e9084906131c5565b90915550506001600160a01b038316156122915761229161226d611a02565b600084815260029190910160205260409020546001600160a01b03168486846127fb565b612299611a02565b6001600160a01b03851660009081526020918252604080822085835290925220546122ee576122ec826122ca611a02565b6001600160a01b03871660009081526001919091016020526040902090612681565b505b60408051838152602081018390526001600160a01b038616917fb4c40c9409d6c2c7dfd2fb0d7e0f26582b9dd0dee72dc0ff6ff09af501ba7a7691016110aa565b6000610a2c825490565b6000611cc88383612bfc565b6000611cc88383612c26565b60008061235d85611323565b9050600061236c868686611adc565b61237587611c27565b61237f91906131dc565b9050811561239e578161239461271083613357565b611d669190613376565b50509392505050565b60006123b16128ef565b60010154905090565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b0316908161244b5760405162461bcd60e51b815260040161023091906133b5565b5092915050565b6000600080516020613485833981519152546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156124a457600080fd5b505afa1580156124b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124dc9190613196565b9050818110156125225760405162461bcd60e51b8152602060048201526011602482015270092dce6eaccccd2c6d2cadce840ae8aa89607b1b6044820152606401610230565b8015611a535760008051602061348583398151915254604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561257b57600080fd5b505af115801561258f573d6000803e3d6000fd5b50505050611a538383612c75565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916125f991906133c8565b6000604051808303816000865af19150503d8060008114612636576040519150601f19603f3d011682016040523d82523d6000602084013e61263b565b606091505b50915091508180156126655750805115806126655750808060200190518101906126659190613335565b610e4a5760405162461bcd60e51b8152600401610230906133e4565b6000611cc88383612d3e565b60006119fd762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b6123ba565b804710156126f55760405162461bcd60e51b815260206004820152601060248201526f092dce6eaccccd2c6d2cadce8408aa8960831b6044820152606401610230565b6000805160206134858339815191525460408051630d0e30db60e41b815290516001600160a01b039092169163d0e30db0918491600480830192600092919082900301818588803b15801561274957600080fd5b505af115801561275d573d6000803e3d6000fd5b505050505061277760008051602061348583398151915290565b5460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b1580156127c357600080fd5b505af11580156127d7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a539190613335565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161285f91906133c8565b6000604051808303816000865af19150503d806000811461289c576040519150601f19603f3d011682016040523d82523d6000602084013e6128a1565b606091505b50915091508180156128cb5750805115806128cb5750808060200190518101906128cb9190613335565b6128e75760405162461bcd60e51b8152600401610230906133e4565b505050505050565b7f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d05290565b600081116129335760405162461bcd60e51b815260040161023090613428565b7f31ee2d7ab5f3365672e54f81f75b37a4d8b0f1085872bdb80349a1cb08ddb71161295c6128ef565b6001015460408051918252602082018490520160405180910390a1806129806128ef565b6001015550565b600081116129a75760405162461bcd60e51b815260040161023090613428565b6129af6128ef565b600101548110612a125760405162461bcd60e51b815260206004820152602860248201527f4175746f206c69717569646174696f6e207468726573686f6c642072617465206044820152676f766572666c6f7760c01b6064820152608401610230565b7fd3353684d64f1c80498433d8407c96e6bbeb1ec88b6200ec97d2c910fdbd0da4612a3b6128ef565b6002015460408051918252602082018490520160405180910390a180612a5f6128ef565b6002015550565b60008111612a865760405162461bcd60e51b815260040161023090613428565b612a8e6128ef565b600201548110612ae05760405162461bcd60e51b815260206004820152601f60248201527f4c69717569646174696f6e2070726963652072617465206f766572666c6f77006044820152606401610230565b7f86aa422ec6af9520cb2f744924b12937e3db1aa5ce22050d0d519621e8409070612b096128ef565b5460408051918252602082018490520160405180910390a180612b2a6128ef565b5550565b60008111612b4e5760405162461bcd60e51b815260040161023090613428565b612b566128ef565b600201548110612ba85760405162461bcd60e51b815260206004820152601c60248201527f4d696e20636f6c6c61746572616c2072617465206f766572666c6f77000000006044820152606401610230565b7f8367b1759e8fdce5712002e7aa025339b99cf3c850b194ebdf37219f86b01ee6612bd16128ef565b6003015460408051918252602082018490520160405180910390a180612bf56128ef565b6003015550565b6000826000018281548110612c1357612c136131f4565b9060005260206000200154905092915050565b6000818152600183016020526040812054612c6d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a2c565b506000610a2c565b604080516000808252602082019092526001600160a01b038416908390604051612c9f91906133c8565b60006040518083038185875af1925050503d8060008114612cdc576040519150601f19603f3d011682016040523d82523d6000602084013e612ce1565b606091505b5050905080611a535760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b6064820152608401610230565b60008181526001830160205260408120548015612e27576000612d626001836131c5565b8554909150600090612d76906001906131c5565b9050818114612ddb576000866000018281548110612d9657612d966131f4565b9060005260206000200154905080876000018481548110612db957612db96131f4565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612dec57612dec61344e565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610a2c565b6000915050610a2c565b60008060408385031215612e4457600080fd5b50508035926020909101359150565b600060208284031215612e6557600080fd5b5035919050565b6001600160a01b038116811461183857600080fd5b600060208284031215612e9357600080fd5b8135611cc881612e6c565b6020808252825182820181905260009190848201906040850190845b81811015612ed657835183529284019291840191600101612eba565b50909695505050505050565b60008060008060808587031215612ef857600080fd5b8435612f0381612e6c565b93506020850135612f1381612e6c565b93969395505050506040820135916060013590565b60008060408385031215612f3b57600080fd5b8235612f4681612e6c565b946020939093013593505050565b600080600060608486031215612f6957600080fd5b8335612f7481612e6c565b95602085013595506040909401359392505050565b600080600080600080600060e0888a031215612fa457600080fd5b8735612faf81612e6c565b96506020880135612fbf81612e6c565b955060408801359450606088013593506080880135925060a0880135915060c0880135612feb81612e6c565b8091505092959891949750929550565b60008083601f84011261300d57600080fd5b50813567ffffffffffffffff81111561302557600080fd5b6020830191508360208260051b850101111561304057600080fd5b9250929050565b6000806000806000806080878903121561306057600080fd5b863567ffffffffffffffff8082111561307857600080fd5b6130848a838b01612ffb565b90985096506020890135915061309982612e6c565b90945060408801359350606088013590808211156130b657600080fd5b506130c389828a01612ffb565b979a9699509497509295939492505050565b600080600080608085870312156130eb57600080fd5b5050823594602084013594506040840135936060013592509050565b6000806040838503121561311a57600080fd5b82359150602083013561312c81612e6c565b809150509250929050565b60208082526017908201527f43757272656e6379206e6f742072656769737465726564000000000000000000604082015260600190565b6020808252600e908201526d125b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b6000602082840312156131a857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156131d7576131d76131af565b500390565b600082198211156131ef576131ef6131af565b500190565b634e487b7160e01b600052603260045260246000fd5b60005b8381101561322557818101518382015260200161320d565b838111156115105750506000910152565b6000815180845261324e81602086016020860161320a565b601f01601f19169290920160200192915050565b8281526040602082015260006109156040830184613236565b60006020828403121561328d57600080fd5b8151611cc881612e6c565b60006000198214156132ac576132ac6131af565b5060010190565b634e487b7160e01b600052604160045260246000fd5b60208082526017908201527f4f6e6c7920416363657074656420436f6e747261637473000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561334757600080fd5b81518015158114611cc857600080fd5b6000816000190483118215151615613371576133716131af565b500290565b60008261339357634e487b7160e01b600052601260045260246000fd5b500490565b6000600160ff1b8214156133ae576133ae6131af565b5060000390565b602081526000611cc86020830184613236565b600082516133da81846020870161320a565b9190910192915050565b60208082526024908201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416040820152631253115160e21b606082015260800190565b6020808252600c908201526b52617465206973207a65726f60a01b604082015260600190565b634e487b7160e01b600052603160045260246000fdfe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240187522ee63bb7da831844dcdb60f35e8cfa51225eeb4ed6734e421ed06f0d56805a2646970667358221220b527db2bc4a4571bc9f0fb037a07363a3b823a3696999e196f52de67504f38a664736f6c63430008090033",
  "implementation": "0x5Df593A9a4198c4dBAEE7aCbA98C96FF129CfF3f",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptedContracts()": {
        "details": "The contact name listed in this method is also needed to be listed `requiredContracts` method."
      },
      "addEscrowedAmount(address,bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to be add into escrow",
          "_ccy": "Currency name in bytes32",
          "_payer": "Address of user making payment"
        }
      },
      "deposit(bytes32,uint256)": {
        "details": "Deposits funds by the caller into collateral.",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32"
        }
      },
      "getCollateralAmount(address,bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "_0": "The deposited amount"
        }
      },
      "getCollateralAmountInETH(address,bytes32)": {
        "params": {
          "_ccy": "Specified currency",
          "_user": "User's address"
        },
        "returns": {
          "_0": "The deposited amount in ETH"
        }
      },
      "getCollateralParameters()": {
        "returns": {
          "autoLiquidationThresholdRate": " The rate used as the auto liquidation threshold",
          "liquidationPriceRate": "The rate used as the liquidation price",
          "marginCallThresholdRate": "The rate used as the margin call threshold",
          "minCollateralRate": "The rate used minima collateral"
        }
      },
      "getCoverage(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The rate of collateral used"
        }
      },
      "getTotalCollateralAmountInETH(address)": {
        "params": {
          "_user": "Address of collateral user"
        },
        "returns": {
          "_0": "The total deposited amount in ETH"
        }
      },
      "getTotalUnsettledExposure(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "Total unsettled exposure"
        }
      },
      "getUnsettledCollateral(address,bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "_0": "Unsettled exposure"
        }
      },
      "getUnusedCollateral(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The total amount of unused collateral"
        }
      },
      "getUsedCurrencies(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The currency names in bytes32"
        }
      },
      "getWithdrawableCollateral(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "Maximum amount of ETH that can be withdrawn"
        }
      },
      "initialize(address,address,uint256,uint256,uint256,uint256,address)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController.",
        "params": {
          "_WETH9": "The address of WETH",
          "_autoLiquidationThresholdRate": "The rate used as the auto liquidation threshold",
          "_liquidationPriceRate": "The rate used as the liquidation price",
          "_marginCallThresholdRate": "The rate used as the margin call threshold",
          "_minCollateralRate": "The rate used minima collateral",
          "_owner": "The address of the contract owner",
          "_resolver": "The address of the Address Resolver contract"
        }
      },
      "isCovered(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The boolean if the collateral has sufficient coverage or not"
        }
      },
      "isRegisteredCurrency(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The boolean if the currency has been registered or not"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "releaseUnsettledCollateral(address,address,bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to be unlocked from unsettled exposure in a specified currency",
          "_ccy": "Currency name in bytes32",
          "_sender": "Address of user sending token",
          "_user": "User's address"
        }
      },
      "releaseUnsettledCollaterals(address[],address,bytes32,uint256[])": {
        "params": {
          "_amounts": "Array of amount of funds to be unlocked from unsettled exposure",
          "_ccy": "Currency name in bytes32",
          "_sender": "Address of user sending token",
          "_users": "Array of user's address"
        }
      },
      "removeEscrowedAmount(address,address,bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to be removed from escrow",
          "_ccy": "Currency name in bytes32",
          "_payer": "Address of user making payment",
          "_receiver": "Address of user receiving payment"
        }
      },
      "removeEscrowedAmounts(address[],address,bytes32,uint256[])": {
        "params": {
          "_amounts": "Array of amount of funds to be unlocked from unsettled exposure",
          "_ccy": "Currency name in bytes32",
          "_payers": "Array of user's address making payment",
          "_receiver": "Address of user receiving payment"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requiredContracts()": {
        "details": "The contract name list is in `./libraries/Contracts.sol`."
      },
      "setCollateralParameters(uint256,uint256,uint256,uint256)": {
        "params": {
          "_autoLiquidationThresholdRate": "Auto liquidation threshold rate",
          "_liquidationPriceRate": "Liquidation price rate",
          "_marginCallThresholdRate": "Margin call threshold ratio",
          "_minCollateralRate": "Minimal collateral rate"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "useUnsettledCollateral(address,bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to be locked in a specified currency",
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "withdraw(bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to withdraw.",
          "_ccy": "Currency name in bytes32"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptedContracts()": {
        "notice": "Returns contract names that can call this contract."
      },
      "addEscrowedAmount(address,bytes32,uint256)": {
        "notice": "Add funds to escrow."
      },
      "getCollateralAmount(address,bytes32)": {
        "notice": "Gets the amount deposited in the user's collateral."
      },
      "getCollateralAmountInETH(address,bytes32)": {
        "notice": "Gets the amount deposited in the user's collateral by converting it to ETH."
      },
      "getCollateralParameters()": {
        "notice": "Gets parameters related to collateral."
      },
      "getCoverage(address)": {
        "notice": "Gets the rate of collateral used."
      },
      "getTotalCollateralAmountInETH(address)": {
        "notice": "Gets the total amount deposited in the user's collateral in all currencies. by converting it to ETH."
      },
      "getTotalUnsettledExposure(address)": {
        "notice": "Gets total unsettled exposure in all currencies."
      },
      "getUnsettledCollateral(address,bytes32)": {
        "notice": "Gets unsettled exposure for the selected currency"
      },
      "getUnusedCollateral(address)": {
        "notice": "Gets the total amount of unused collateral"
      },
      "getUsedCurrencies(address)": {
        "notice": "Gets the currencies that the user used as collateral."
      },
      "getWithdrawableCollateral(address)": {
        "notice": "Gets the maximum amount of ETH that can be withdrawn from user collateral."
      },
      "initialize(address,address,uint256,uint256,uint256,uint256,address)": {
        "notice": "Initializes the contract."
      },
      "isCovered(address)": {
        "notice": "Gets if the collateral has enough coverage."
      },
      "isRegisteredCurrency(bytes32)": {
        "notice": "Gets if the currency has been registered"
      },
      "releaseUnsettledCollateral(address,address,bytes32,uint256)": {
        "notice": "Releases the amount of unsettled exposure for the selected currency."
      },
      "releaseUnsettledCollaterals(address[],address,bytes32,uint256[])": {
        "notice": "Releases the amount of unsettled exposure on multiple orders."
      },
      "removeEscrowedAmount(address,address,bytes32,uint256)": {
        "notice": "Remove funds from escrow."
      },
      "removeEscrowedAmounts(address[],address,bytes32,uint256[])": {
        "notice": "Remove funds from escrow on multiple orders."
      },
      "requiredContracts()": {
        "notice": "Returns the contract names used in this contract."
      },
      "setCollateralParameters(uint256,uint256,uint256,uint256)": {
        "notice": "Sets main collateral parameters this function solves the issue of frontrunning during parameters tuning.Triggers only be contract owner"
      },
      "useUnsettledCollateral(address,bytes32,uint256)": {
        "notice": "Locks unsettled collateral for the selected currency."
      },
      "withdraw(bytes32,uint256)": {
        "notice": "Withdraws funds by the caller from unused collateral."
      }
    },
    "notice": "Implements the management of the token in each currency for users. This contract manages the following data related to tokens. - Deposited token amount as the collateral - Unsettled collateral amount used by order - Escrowed token amount added by lending orders - Parameters related to the collateral   - Margin Call Threshold Rate   - Auto Liquidation Threshold Rate   - Liquidation Price Rate   - Min Collateral Rate To address a currency as collateral, it must be registered using `registerCurrency` method in this contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 790,
        "contract": "contracts/TokenVault.sol:TokenVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 793,
        "contract": "contracts/TokenVault.sol:TokenVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}