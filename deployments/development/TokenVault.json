{
  "address": "0x2eb4703b58FA1BDE23bab187e1eE6692C2F68aca",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositEscrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "RegisterCurrency",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawEscrow",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payer",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositEscrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getCollateralAmountInETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralParameters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "marginCallThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "autoLiquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationPriceRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minCollateralRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getCoverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalCollateralAmountInETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUnusedCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUsedCurrencies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getWithdrawableCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marginCallThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_autoLiquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationPriceRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateralRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_WETH9",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_unsettledExp",
          "type": "uint256"
        }
      ],
      "name": "isCovered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "isRegisteredCurrency",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "registerCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marginCallThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_autoLiquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationPriceRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateralRate",
          "type": "uint256"
        }
      ],
      "name": "setCollateralParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x061a9e3946fad17906f89f6b76053d3fbc98a4cdf84469d5c388d41fc9940d14",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x3D50EEB26ed023Df78f9ed82915cd16b3575059C",
    "transactionIndex": 35,
    "gasUsed": "2709734",
    "logsBloom": "0x
    "blockHash": "0x750d0c52ea632326a351c1b6c08822714362c476e33d93bbcdf5b67e95a9f76c",
    "transactionHash": "0x061a9e3946fad17906f89f6b76053d3fbc98a4cdf84469d5c388d41fc9940d14",
    "logs": [],
    "blockNumber": 7950615,
    "cumulativeGasUsed": "14507526",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "c342d2bd1c99543a927721b4c81728b9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"RegisterCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawEscrow\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositEscrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getCollateralAmountInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marginCallThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoLiquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationPriceRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalCollateralAmountInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUnusedCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUsedCurrencies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marginCallThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autoLiquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationPriceRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateralRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_WETH9\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_unsettledExp\",\"type\":\"uint256\"}],\"name\":\"isCovered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"isRegisteredCurrency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"registerCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marginCallThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autoLiquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationPriceRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateralRate\",\"type\":\"uint256\"}],\"name\":\"setCollateralParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptedContracts()\":{\"details\":\"The contact name listed in this method is also needed to be listed `requiredContracts` method.\"},\"addCollateral(address,bytes32,uint256)\":{\"details\":\"Adds collateral amount.\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"deposit(bytes32,uint256)\":{\"details\":\"Deposits funds by the caller into collateral.\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\"}},\"depositEscrow(address,bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to be add into escrow\",\"_ccy\":\"Currency name in bytes32\",\"_payer\":\"Address of user making payment\"}},\"getCollateralAmount(address,bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The deposited amount\"}},\"getCollateralAmountInETH(address,bytes32)\":{\"params\":{\"_ccy\":\"Specified currency\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The deposited amount in ETH\"}},\"getCollateralParameters()\":{\"returns\":{\"autoLiquidationThresholdRate\":\" The rate used as the auto liquidation threshold\",\"liquidationPriceRate\":\"The rate used as the liquidation price\",\"marginCallThresholdRate\":\"The rate used as the margin call threshold\",\"minCollateralRate\":\"The rate used minima collateral\"}},\"getCoverage(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The rate of collateral used\"}},\"getTotalCollateralAmountInETH(address)\":{\"params\":{\"_user\":\"Address of collateral user\"},\"returns\":{\"_0\":\"The total deposited amount in ETH\"}},\"getUnusedCollateral(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The total amount of unused collateral\"}},\"getUsedCurrencies(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The currency names in bytes32\"}},\"getWithdrawableCollateral(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"Maximum amount of ETH that can be withdrawn\"}},\"initialize(address,address,uint256,uint256,uint256,uint256,address)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController.\",\"params\":{\"_WETH9\":\"The address of WETH\",\"_autoLiquidationThresholdRate\":\"The rate used as the auto liquidation threshold\",\"_liquidationPriceRate\":\"The rate used as the liquidation price\",\"_marginCallThresholdRate\":\"The rate used as the margin call threshold\",\"_minCollateralRate\":\"The rate used minima collateral\",\"_owner\":\"The address of the contract owner\",\"_resolver\":\"The address of the Address Resolver contract\"}},\"isCovered(address,bytes32,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_unsettledExp\":\"Additional exposure to lock into unsettled exposure\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The boolean if the collateral has sufficient coverage or not\"}},\"isRegisteredCurrency(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The boolean if the currency has been registered or not\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeCollateral(address,bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to withdraw.\",\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requiredContracts()\":{\"details\":\"The contract name list is in `./libraries/Contracts.sol`.\"},\"setCollateralParameters(uint256,uint256,uint256,uint256)\":{\"params\":{\"_autoLiquidationThresholdRate\":\"Auto liquidation threshold rate\",\"_liquidationPriceRate\":\"Liquidation price rate\",\"_marginCallThresholdRate\":\"Margin call threshold ratio\",\"_minCollateralRate\":\"Minimal collateral rate\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to withdraw.\",\"_ccy\":\"Currency name in bytes32\"}},\"withdrawEscrow(address,bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to be removed from escrow\",\"_ccy\":\"Currency name in bytes32\",\"_receiver\":\"Address of user receiving payment\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptedContracts()\":{\"notice\":\"Returns contract names that can call this contract.\"},\"depositEscrow(address,bytes32,uint256)\":{\"notice\":\"deposit funds in escrow.\"},\"getCollateralAmount(address,bytes32)\":{\"notice\":\"Gets the amount deposited in the user's collateral.\"},\"getCollateralAmountInETH(address,bytes32)\":{\"notice\":\"Gets the amount deposited in the user's collateral by converting it to ETH.\"},\"getCollateralParameters()\":{\"notice\":\"Gets parameters related to collateral.\"},\"getCoverage(address)\":{\"notice\":\"Gets the rate of collateral used.\"},\"getTotalCollateralAmountInETH(address)\":{\"notice\":\"Gets the total amount deposited in the user's collateral in all currencies. by converting it to ETH.\"},\"getUnusedCollateral(address)\":{\"notice\":\"Gets the total amount of unused collateral\"},\"getUsedCurrencies(address)\":{\"notice\":\"Gets the currencies that the user used as collateral.\"},\"getWithdrawableCollateral(address)\":{\"notice\":\"Gets the maximum amount of ETH that can be withdrawn from user collateral.\"},\"initialize(address,address,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"Initializes the contract.\"},\"isCovered(address,bytes32,uint256)\":{\"notice\":\"Gets if the collateral has enough coverage.\"},\"isRegisteredCurrency(bytes32)\":{\"notice\":\"Gets if the currency has been registered\"},\"removeCollateral(address,bytes32,uint256)\":{\"notice\":\"Removes collateral amount.\"},\"requiredContracts()\":{\"notice\":\"Returns the contract names used in this contract.\"},\"setCollateralParameters(uint256,uint256,uint256,uint256)\":{\"notice\":\"Sets main collateral parameters this function solves the issue of frontrunning during parameters tuning.Triggers only be contract owner\"},\"withdraw(bytes32,uint256)\":{\"notice\":\"Withdraws funds by the caller from unused collateral.\"},\"withdrawEscrow(address,bytes32,uint256)\":{\"notice\":\"Withdraw funds from escrow.\"}},\"notice\":\"Implements the management of the token in each currency for users. This contract manages the following data related to tokens. - Deposited token amount as the collateral - Unsettled collateral amount used by order - Escrowed token amount added by lending orders - Parameters related to the collateral   - Margin Call Threshold Rate   - Auto Liquidation Threshold Rate   - Liquidation Price Rate   - Min Collateral Rate To address a currency as collateral, it must be registered using `registerCurrency` method in this contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenVault.sol\":\"TokenVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/TokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n// libraries\\nimport {Contracts} from \\\"./libraries/Contracts.sol\\\";\\nimport {CollateralParametersHandler} from \\\"./libraries/CollateralParametersHandler.sol\\\";\\nimport {ERC20Handler} from \\\"./libraries/ERC20Handler.sol\\\";\\n// interfaces\\nimport {ITokenVault} from \\\"./interfaces/ITokenVault.sol\\\";\\n// mixins\\nimport {MixinAddressResolver} from \\\"./mixins/MixinAddressResolver.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"./types/ProtocolTypes.sol\\\";\\n// utils\\nimport {Ownable} from \\\"./utils/Ownable.sol\\\";\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\n// storages\\nimport {TokenVaultStorage as Storage} from \\\"./storages/TokenVaultStorage.sol\\\";\\n\\n/**\\n * @notice Implements the management of the token in each currency for users.\\n *\\n * This contract manages the following data related to tokens.\\n * - Deposited token amount as the collateral\\n * - Unsettled collateral amount used by order\\n * - Escrowed token amount added by lending orders\\n * - Parameters related to the collateral\\n *   - Margin Call Threshold Rate\\n *   - Auto Liquidation Threshold Rate\\n *   - Liquidation Price Rate\\n *   - Min Collateral Rate\\n *\\n * To address a currency as collateral, it must be registered using `registerCurrency` method in this contract.\\n */\\ncontract TokenVault is ITokenVault, MixinAddressResolver, Ownable, Proxyable {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    /**\\n     * @notice Modifier to check if currency hasn't been registered yet\\n     * @param _ccy Currency name in bytes32\\n     */\\n    modifier onlyRegisteredCurrency(bytes32 _ccy) {\\n        require(isRegisteredCurrency(_ccy), \\\"Currency not registered\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\\n     * @param _owner The address of the contract owner\\n     * @param _resolver The address of the Address Resolver contract\\n     * @param _marginCallThresholdRate The rate used as the margin call threshold\\n     * @param _autoLiquidationThresholdRate  The rate used as the auto liquidation threshold\\n     * @param _liquidationPriceRate The rate used as the liquidation price\\n     * @param _minCollateralRate The rate used minima collateral\\n     * @param _WETH9 The address of WETH\\n     */\\n    function initialize(\\n        address _owner,\\n        address _resolver,\\n        uint256 _marginCallThresholdRate,\\n        uint256 _autoLiquidationThresholdRate,\\n        uint256 _liquidationPriceRate,\\n        uint256 _minCollateralRate,\\n        address _WETH9\\n    ) public initializer onlyProxy {\\n        _transferOwnership(_owner);\\n        registerAddressResolver(_resolver);\\n\\n        ERC20Handler.initialize(_WETH9);\\n        CollateralParametersHandler.setCollateralParameters(\\n            _marginCallThresholdRate,\\n            _autoLiquidationThresholdRate,\\n            _liquidationPriceRate,\\n            _minCollateralRate\\n        );\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](2);\\n        contracts[0] = Contracts.CURRENCY_CONTROLLER;\\n        contracts[1] = Contracts.LENDING_MARKET_CONTROLLER;\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](1);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == ERC20Handler.weth(), \\\"Not WETH\\\");\\n    }\\n\\n    /**\\n     * @notice Gets if the collateral has enough coverage.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @param _unsettledExp Additional exposure to lock into unsettled exposure\\n     * @return The boolean if the collateral has sufficient coverage or not\\n     */\\n    function isCovered(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) public view override returns (bool) {\\n        return _isCovered(_user, _ccy, _unsettledExp);\\n    }\\n\\n    /**\\n     * @notice Gets if the currency has been registered\\n     * @param _ccy Currency name in bytes32\\n     * @return The boolean if the currency has been registered or not\\n     */\\n    function isRegisteredCurrency(bytes32 _ccy) public view override returns (bool) {\\n        return Storage.slot().tokenAddresses[_ccy] != address(0);\\n    }\\n\\n    /**\\n     * @notice Gets the maximum amount of ETH that can be withdrawn from user collateral.\\n     * @param _user User's address\\n     * @return Maximum amount of ETH that can be withdrawn\\n     */\\n    function getWithdrawableCollateral(address _user) external view virtual returns (uint256) {\\n        return _getWithdrawableCollateral(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the rate of collateral used.\\n     * @param _user User's address\\n     * @return The rate of collateral used\\n     */\\n    function getCoverage(address _user) public view override returns (uint256) {\\n        return _getCoverage(_user, \\\"\\\", 0);\\n    }\\n\\n    /**\\n     * @notice Gets the total amount of unused collateral\\n     * @param _user User's address\\n     * @return The total amount of unused collateral\\n     */\\n    function getUnusedCollateral(address _user) external view returns (uint256) {\\n        (uint256 totalCollateral, uint256 totalUsedCollateral) = _getActualCollateralAmount(\\n            _user,\\n            \\\"\\\",\\n            0\\n        );\\n\\n        return totalCollateral > totalUsedCollateral ? totalCollateral - totalUsedCollateral : 0;\\n    }\\n\\n    /**\\n     * @notice Gets the amount deposited in the user's collateral.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @return The deposited amount\\n     */\\n    function getCollateralAmount(address _user, bytes32 _ccy)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return Storage.slot().collateralAmounts[_user][_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the amount deposited in the user's collateral by converting it to ETH.\\n     * @param _user User's address\\n     * @param _ccy Specified currency\\n     * @return The deposited amount in ETH\\n     */\\n    function getCollateralAmountInETH(address _user, bytes32 _ccy)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 amount = getCollateralAmount(_user, _ccy);\\n        return currencyController().convertToETH(_ccy, amount);\\n    }\\n\\n    /**\\n     * @notice Gets the total amount deposited in the user's collateral in all currencies.\\n     * by converting it to ETH.\\n     * @param _user Address of collateral user\\n     * @return The total deposited amount in ETH\\n     */\\n    function getTotalCollateralAmountInETH(address _user) public view override returns (uint256) {\\n        (, , uint256 borrowedAmount) = _getBorrowedFundsFromLendingMarkets(_user, \\\"\\\", 0);\\n        return _getTotalInternalCollateralAmountInETH(_user) + borrowedAmount;\\n    }\\n\\n    /**\\n     * @notice Gets the currencies that the user used as collateral.\\n     * @param _user User's address\\n     * @return The currency names in bytes32\\n     */\\n    function getUsedCurrencies(address _user) public view override returns (bytes32[] memory) {\\n        EnumerableSet.Bytes32Set storage currencySet = Storage.slot().usedCurrencies[_user];\\n\\n        uint256 numCurrencies = currencySet.length();\\n        bytes32[] memory currencies = new bytes32[](numCurrencies);\\n\\n        for (uint256 i = 0; i < numCurrencies; i++) {\\n            bytes32 currency = currencySet.at(i);\\n            currencies[i] = currency;\\n        }\\n\\n        return currencies;\\n    }\\n\\n    /**\\n     * @notice Gets parameters related to collateral.\\n     * @return marginCallThresholdRate The rate used as the margin call threshold\\n     * @return autoLiquidationThresholdRate  The rate used as the auto liquidation threshold\\n     * @return liquidationPriceRate The rate used as the liquidation price\\n     * @return minCollateralRate The rate used minima collateral\\n     */\\n    function getCollateralParameters()\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 marginCallThresholdRate,\\n            uint256 autoLiquidationThresholdRate,\\n            uint256 liquidationPriceRate,\\n            uint256 minCollateralRate\\n        )\\n    {\\n        return CollateralParametersHandler.getCollateralParameters();\\n    }\\n\\n    function registerCurrency(bytes32 _ccy, address _tokenAddress) external onlyOwner {\\n        require(currencyController().isSupportedCcy(_ccy), \\\"Invalid currency\\\");\\n        Storage.slot().tokenAddresses[_ccy] = _tokenAddress;\\n\\n        emit RegisterCurrency(_ccy, _tokenAddress);\\n    }\\n\\n    /**\\n     * @dev Deposits funds by the caller into collateral.\\n     * @param _amount Amount of funds to deposit\\n     * @param _ccy Currency name in bytes32\\n     */\\n    function deposit(bytes32 _ccy, uint256 _amount)\\n        external\\n        payable\\n        override\\n        onlyRegisteredCurrency(_ccy)\\n    {\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n        ERC20Handler.depositAssets(\\n            Storage.slot().tokenAddresses[_ccy],\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n\\n        Storage.slot().collateralAmounts[msg.sender][_ccy] += _amount;\\n\\n        _updateUsedCurrencies(msg.sender, _ccy);\\n\\n        emit Deposit(msg.sender, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws funds by the caller from unused collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to withdraw.\\n     */\\n    function withdraw(bytes32 _ccy, uint256 _amount)\\n        external\\n        override\\n        onlyRegisteredCurrency(_ccy)\\n    {\\n        // fix according to collateral aggregator\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n\\n        address user = msg.sender;\\n        uint256 maxWithdrawETH = _getWithdrawableCollateral(user);\\n        uint256 maxWithdraw = currencyController().convertFromETH(_ccy, maxWithdrawETH);\\n        uint256 withdrawAmt = _amount > maxWithdraw ? maxWithdraw : _amount;\\n\\n        require(\\n            Storage.slot().collateralAmounts[user][_ccy] >= withdrawAmt,\\n            \\\"Not enough collateral in the selected currency\\\"\\n        );\\n        Storage.slot().collateralAmounts[user][_ccy] -= withdrawAmt;\\n\\n        ERC20Handler.withdrawAssets(Storage.slot().tokenAddresses[_ccy], msg.sender, withdrawAmt);\\n        _updateUsedCurrencies(msg.sender, _ccy);\\n        lendingMarketController().cleanOrders(msg.sender);\\n\\n        emit Withdraw(msg.sender, _ccy, withdrawAmt);\\n    }\\n\\n    /**\\n     * @dev Adds collateral amount.\\n     * @param _user User's address\\n     * @param _amount Amount of funds to deposit\\n     * @param _ccy Currency name in bytes32\\n     */\\n    function addCollateral(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external override onlyAcceptedContracts onlyRegisteredCurrency(_ccy) {\\n        Storage.slot().collateralAmounts[_user][_ccy] += _amount;\\n        _updateUsedCurrencies(_user, _ccy);\\n    }\\n\\n    /**\\n     * @notice Removes collateral amount.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to withdraw.\\n     */\\n    function removeCollateral(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external override onlyAcceptedContracts onlyRegisteredCurrency(_ccy) {\\n        require(\\n            Storage.slot().collateralAmounts[_user][_ccy] >= _amount,\\n            \\\"Not enough collateral in the selected currency\\\"\\n        );\\n\\n        Storage.slot().collateralAmounts[_user][_ccy] -= _amount;\\n        _updateUsedCurrencies(_user, _ccy);\\n    }\\n\\n    /**\\n     * @notice deposit funds in escrow.\\n     * @param _payer Address of user making payment\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to be add into escrow\\n     */\\n    function depositEscrow(\\n        address _payer,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external payable override onlyAcceptedContracts onlyRegisteredCurrency(_ccy) {\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n\\n        ERC20Handler.depositAssets(\\n            Storage.slot().tokenAddresses[_ccy],\\n            _payer,\\n            address(this),\\n            _amount\\n        );\\n\\n        emit DepositEscrow(_payer, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw funds from escrow.\\n     * @param _receiver Address of user receiving payment\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to be removed from escrow\\n     */\\n    function withdrawEscrow(\\n        address _receiver,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external override onlyAcceptedContracts onlyRegisteredCurrency(_ccy) {\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n\\n        ERC20Handler.withdrawAssets(Storage.slot().tokenAddresses[_ccy], _receiver, _amount);\\n\\n        emit WithdrawEscrow(_receiver, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Sets main collateral parameters this function\\n     * solves the issue of frontrunning during parameters tuning.\\n     *\\n     * @param _marginCallThresholdRate Margin call threshold ratio\\n     * @param _autoLiquidationThresholdRate Auto liquidation threshold rate\\n     * @param _liquidationPriceRate Liquidation price rate\\n     * @param _minCollateralRate Minimal collateral rate\\n     * @notice Triggers only be contract owner\\n     */\\n    function setCollateralParameters(\\n        uint256 _marginCallThresholdRate,\\n        uint256 _autoLiquidationThresholdRate,\\n        uint256 _liquidationPriceRate,\\n        uint256 _minCollateralRate\\n    ) external onlyOwner {\\n        CollateralParametersHandler.setCollateralParameters(\\n            _marginCallThresholdRate,\\n            _autoLiquidationThresholdRate,\\n            _liquidationPriceRate,\\n            _minCollateralRate\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets if the collateral has enough coverage.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @param _unsettledExp Additional exposure to lock into unsettled exposure\\n     * @return The boolean if the collateral has enough coverage or not\\n     */\\n    function _isCovered(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) internal view returns (bool) {\\n        (uint256 totalCollateral, uint256 totalUsedCollateral) = _getActualCollateralAmount(\\n            _user,\\n            _ccy,\\n            _unsettledExp\\n        );\\n\\n        return\\n            totalUsedCollateral == 0 ||\\n            (totalCollateral * ProtocolTypes.PCT >=\\n                totalUsedCollateral * CollateralParametersHandler.marginCallThresholdRate());\\n    }\\n\\n    /**\\n     * @notice Gets the collateral coverage.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @param _unsettledExp Additional exposure to lock into unsettled exposure\\n     * @return coverage The rate of collateral used\\n     */\\n    function _getCoverage(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) internal view returns (uint256 coverage) {\\n        (uint256 totalCollateral, uint256 totalUsedCollateral) = _getActualCollateralAmount(\\n            _user,\\n            _ccy,\\n            _unsettledExp\\n        );\\n\\n        if (totalCollateral > 0) {\\n            coverage = (((totalUsedCollateral) * ProtocolTypes.PCT) / totalCollateral);\\n        }\\n    }\\n\\n    function _getActualCollateralAmount(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) private view returns (uint256 totalCollateral, uint256 totalUsedCollateral) {\\n        uint256 usedCollateral = _getUsedCollateral(_user);\\n        (\\n            uint256 workingOrdersAmount,\\n            uint256 obligationAmount,\\n            uint256 borrowedAmount\\n        ) = _getBorrowedFundsFromLendingMarkets(_user, _ccy, _unsettledExp);\\n\\n        totalCollateral = _getTotalInternalCollateralAmountInETH(_user) + borrowedAmount;\\n        totalUsedCollateral = usedCollateral + workingOrdersAmount + obligationAmount;\\n    }\\n\\n    /**\\n     * @notice Gets borrowed funds in all currencies from the Lending Markets.\\n     * @param _user User's ethereum address\\n     * @param _ccy Currency name in bytes32\\n     * @param _unsettledExp Additional exposure to lock into unsettled exposure\\n     * @return workingOrdersAmount The total working orders amount on the order book\\n     * @return obligationAmount The total obligation amount due to the borrow orders being filled on the order book\\n     * @return borrowedAmount The total borrowed amount due to the borrow orders being filled on the order book\\n     */\\n    function _getBorrowedFundsFromLendingMarkets(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 workingOrdersAmount,\\n            uint256 obligationAmount,\\n            uint256 borrowedAmount\\n        )\\n    {\\n        (workingOrdersAmount, obligationAmount, borrowedAmount) = lendingMarketController()\\n            .calculateTotalBorrowedFundsInETH(_user);\\n        workingOrdersAmount += _unsettledExp > 0\\n            ? currencyController().convertToETH(_ccy, _unsettledExp)\\n            : 0;\\n    }\\n\\n    /**\\n     * @notice Gets the total collateral used in all currencies.\\n     * The collateral used is defined as the negative future value in the lending market contract.\\n     * @param _user User's address\\n     * @return The total amount of used collateral\\n     */\\n    function _getUsedCollateral(address _user) internal view returns (uint256) {\\n        int256 totalPVInETH = lendingMarketController().getTotalPresentValueInETH(_user);\\n        return totalPVInETH > 0 ? 0 : uint256(-totalPVInETH);\\n    }\\n\\n    /**\\n     * @notice Calculates maximum amount of ETH that can be withdrawn.\\n     * @param _user User's address\\n     * @return Maximum amount of ETH that can be withdrawn\\n     */\\n    function _getWithdrawableCollateral(address _user) internal view returns (uint256) {\\n        (uint256 totalCollateral, uint256 totalUsedCollateral) = _getActualCollateralAmount(\\n            _user,\\n            \\\"\\\",\\n            0\\n        );\\n\\n        if (totalUsedCollateral == 0) {\\n            return totalCollateral;\\n        } else if (\\n            totalCollateral >\\n            ((totalUsedCollateral) * CollateralParametersHandler.marginCallThresholdRate()) /\\n                ProtocolTypes.BP\\n        ) {\\n            // NOTE: The formula is:\\n            // maxWithdraw = totalCollateral - ((totalUsedCollateral) * marginCallThresholdRate).\\n            return\\n                (totalCollateral *\\n                    ProtocolTypes.BP -\\n                    (totalUsedCollateral) *\\n                    CollateralParametersHandler.marginCallThresholdRate()) / ProtocolTypes.BP;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the total of amount deposited in the user's collateral of all currencies\\n     *  in this contract by converting it to ETH.\\n     * @param _user Address of collateral user\\n     * @return The total deposited amount in ETH\\n     */\\n    function _getTotalInternalCollateralAmountInETH(address _user) private view returns (uint256) {\\n        EnumerableSet.Bytes32Set storage currencies = Storage.slot().usedCurrencies[_user];\\n        uint256 collateralAmount;\\n        uint256 totalCollateral;\\n\\n        uint256 len = currencies.length();\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            bytes32 ccy = currencies.at(i);\\n            collateralAmount = currencyController().convertToETH(\\n                ccy,\\n                getCollateralAmount(_user, ccy)\\n            );\\n            totalCollateral = totalCollateral + collateralAmount;\\n        }\\n\\n        return totalCollateral;\\n    }\\n\\n    function _updateUsedCurrencies(address _user, bytes32 _ccy) internal {\\n        if (Storage.slot().collateralAmounts[_user][_ccy] > 0) {\\n            Storage.slot().usedCurrencies[_user].add(_ccy);\\n        } else {\\n            Storage.slot().usedCurrencies[_user].remove(_ccy);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc57444b6157bfbaac37fae1936c6bac25ede2cc823302cfb96ddad6b23cb5281\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IBeaconProxyController {\\n    event BeaconProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function deployFutureValue(address _lendingMarket) external returns (address futureValue);\\n\\n    function deployLendingMarket(\\n        bytes32 _ccy,\\n        uint256 _basisDate,\\n        uint256 _maturity\\n    ) external returns (address market);\\n}\\n\",\"keccak256\":\"0xef3b32eccd6b555076e0bdee2fb8af4c78fd2cb995cdd5d2f32fd7f7bdbf44e1\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Currency} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CcyAdded(bytes32 indexed ccy, string name, uint256 haircut);\\n    event CcySupportUpdate(bytes32 indexed ccy, bool isSupported);\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n    event PriceFeedAdded(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n    event PriceFeedRemoved(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH) external view returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, int256 _amount) external view returns (int256);\\n\\n    function convertToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getCurrencies(bytes32) external view returns (Currency memory);\\n\\n    function getEthDecimals(bytes32) external view returns (uint8);\\n\\n    function getUsdDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        address _ethPriceFeed,\\n        uint256 _haircut\\n    ) external;\\n\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported) external;\\n}\\n\",\"keccak256\":\"0x5113a69b1bf450a254cd40db9052b355b94850279fefaff264c3b33f22396fa6\",\"license\":\"MIT\"},\"contracts/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {MaturityUnitPrice} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getMaturityUnitPrice(bytes32 ccy, uint256 maturity)\\n        external\\n        view\\n        returns (MaturityUnitPrice memory);\\n\\n    function getGenesisValueInFutureValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function registerCurrency(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor\\n    ) external;\\n\\n    function updateCompoundFactor(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice\\n    ) external;\\n\\n    function addGenesisValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xb1dcec305c9ad412c47a60916a3bd091c67c4c664bc2e941fd2958f642bbd887\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\nstruct Order {\\n    bytes32 ccy;\\n    uint256 term;\\n    ProtocolTypes.Side side;\\n    uint256 amount;\\n    uint256 rate;\\n}\\n\\ninterface ILendingMarketController {\\n    event CreateLendingMarket(\\n        bytes32 indexed ccy,\\n        address indexed marketAddr,\\n        address futureValue,\\n        uint256 index,\\n        uint256 maturity\\n    );\\n    event RotateLendingMarkets(bytes32 ccy, uint256 oldMaturity, uint256 newMaturity);\\n    event PlaceOrder(\\n        address indexed maker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event FillOrder(\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        uint256 filledFutureValue\\n    );\\n    event FillOrdersAsync(\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 filledFutureValue\\n    );\\n    event CancelOrder(\\n        uint48 orderId,\\n        address indexed maker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n\\n    function getBasisDate(bytes32 _ccy) external view returns (uint256);\\n\\n    function getLendingMarkets(bytes32 _ccy) external view returns (address[] memory);\\n\\n    function getLendingMarket(bytes32 _ccy, uint256 _maturity) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 _ccy, uint256 _maturity) external view returns (address);\\n\\n    function getBorrowUnitPrices(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getLendUnitPrices(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getMidUnitPrices(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getBorrowOrderBook(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturities(bytes32 _ccy) external view returns (uint256[] memory);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInETH(address user)\\n        external\\n        view\\n        returns (int256 totalPresentValue);\\n\\n    function calculateTotalLentFundsInETH(address user)\\n        external\\n        view\\n        returns (uint256 totalWorkingOrderAmount, uint256 totalClaimAmount);\\n\\n    function calculateTotalBorrowedFundsInETH(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalWorkingOrdersAmount,\\n            uint256 totalDebtAmount,\\n            uint256 totalBorrowedAmount\\n        );\\n\\n    function isInitializedLendingMarket(bytes32 _ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 _ccy,\\n        uint256 _basisDate,\\n        uint256 _compoundFactor\\n    ) external;\\n\\n    function createLendingMarket(bytes32 _ccy)\\n        external\\n        returns (address market, address futureValue);\\n\\n    function createOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _rate\\n    ) external returns (bool);\\n\\n    function createLendOrderWithETH(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _rate\\n    ) external payable returns (bool);\\n\\n    function cancelOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint48 _orderId\\n    ) external returns (bool);\\n\\n    function rotateLendingMarkets(bytes32 _ccy) external;\\n\\n    function pauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function convertFutureValueToGenesisValue(address _user) external;\\n\\n    function cleanOrders(address _user) external;\\n}\\n\",\"keccak256\":\"0x7160630622e6990586b8a61c6377df416cc5c8a62e838cf82f6f2111c8338fb6\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ITokenVault {\\n    event DepositEscrow(address indexed payer, bytes32 ccy, uint256 amount);\\n    event WithdrawEscrow(address indexed receiver, bytes32 ccy, uint256 amount);\\n\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event RegisterCurrency(bytes32 ccy, address tokenAddress);\\n\\n    function isCovered(\\n        address user,\\n        bytes32 ccy,\\n        uint256 unsettledExp\\n    ) external view returns (bool);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256 maxWithdraw);\\n\\n    function getCoverage(address user) external view returns (uint256 coverage);\\n\\n    function getUnusedCollateral(address user) external view returns (uint256);\\n\\n    function getCollateralAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getCollateralAmountInETH(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalCollateralAmountInETH(address party) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getCollateralParameters()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function setCollateralParameters(\\n        uint256 marginCallThresholdRate,\\n        uint256 autoLiquidationThresholdRate,\\n        uint256 liquidationPriceRate,\\n        uint256 minCollateralRate\\n    ) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addCollateral(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external;\\n\\n    function removeCollateral(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external;\\n\\n    function depositEscrow(\\n        address payer,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external payable;\\n\\n    function withdrawEscrow(\\n        address receiver,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcfb6c2a23e83b94a9a8edd9e97d44424cb2e8f56248aef628232b63a01b49d24\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH9 is IERC20 {\\n    event Deposit(address user, uint256 amount);\\n    event Withdrawal(address user, uint256 amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x5aefa06efedcbfe7d7605aa67217f066a0e84b450d416695254eb95239a251d7\",\"license\":\"MIT\"},\"contracts/libraries/CollateralParametersHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {CollateralParametersStorage as Storage} from \\\"../storages/CollateralParametersStorage.sol\\\";\\n\\n/**\\n * @notice CollateralParametersHandler is an library to handle the parameters fro TokenVault contract.\\n *\\n * This manage the main collateral parameters like Margin Call ratio, Auto-Liquidation level,\\n * Liquidation price, and Minimal collateral ratio.\\n *\\n */\\nlibrary CollateralParametersHandler {\\n    event LiquidationPriceRateUpdated(uint256 previousPrice, uint256 price);\\n    event AutoLiquidationThresholdRateUpdated(uint256 previousRatio, uint256 ratio);\\n    event MarginCallThresholdRateUpdated(uint256 previousRatio, uint256 ratio);\\n    event MinCollateralRateUpdated(uint256 previousRatio, uint256 price);\\n\\n    /**\\n     * @dev Gets collateral parameters\\n     */\\n    function getCollateralParameters()\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            Storage.slot().marginCallThresholdRate,\\n            Storage.slot().autoLiquidationThresholdRate,\\n            Storage.slot().liquidationPriceRate,\\n            Storage.slot().minCollateralRate\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets auto liquidation threshold rate\\n     */\\n    function autoLiquidationThresholdRate() internal view returns (uint256) {\\n        return Storage.slot().autoLiquidationThresholdRate;\\n    }\\n\\n    /**\\n     * @dev Gets liquidation price rate\\n     */\\n    function liquidationPriceRate() internal view returns (uint256) {\\n        return Storage.slot().liquidationPriceRate;\\n    }\\n\\n    /**\\n     * @dev Gets margin call threshold rate\\n     */\\n    function marginCallThresholdRate() internal view returns (uint256) {\\n        return Storage.slot().marginCallThresholdRate;\\n    }\\n\\n    /**\\n     * @dev Gets min collateral rate\\n     */\\n    function minCollateralRate() internal view returns (uint256) {\\n        return Storage.slot().minCollateralRate;\\n    }\\n\\n    /**\\n     * @dev Sets main collateral parameters this function\\n     * solves the issue of frontrunning during parameters tuning\\n     *\\n     * @param _marginCallThresholdRate Margin call threshold ratio\\n     * @param _autoLiquidationThresholdRate Auto liquidation threshold rate\\n     * @param _liquidationPriceRate Liquidation price rate\\n     * @param _minCollateralRate Minimal collateral rate\\n     * @notice Triggers only be contract owner\\n     */\\n    function setCollateralParameters(\\n        uint256 _marginCallThresholdRate,\\n        uint256 _autoLiquidationThresholdRate,\\n        uint256 _liquidationPriceRate,\\n        uint256 _minCollateralRate\\n    ) internal {\\n        if (_marginCallThresholdRate != Storage.slot().marginCallThresholdRate) {\\n            _updateMarginCallThresholdRate(_marginCallThresholdRate);\\n        }\\n\\n        if (_autoLiquidationThresholdRate != Storage.slot().autoLiquidationThresholdRate) {\\n            _updateAutoLiquidationThresholdRate(_autoLiquidationThresholdRate);\\n        }\\n\\n        if (_liquidationPriceRate != Storage.slot().liquidationPriceRate) {\\n            _updateLiquidationPriceRate(_liquidationPriceRate);\\n        }\\n\\n        if (_minCollateralRate != Storage.slot().minCollateralRate) {\\n            _updateMinCollateralRate(_minCollateralRate);\\n        }\\n    }\\n\\n    function _updateMarginCallThresholdRate(uint256 _rate) private {\\n        require(_rate > 0, \\\"Rate is zero\\\");\\n\\n        emit MarginCallThresholdRateUpdated(Storage.slot().marginCallThresholdRate, _rate);\\n        Storage.slot().marginCallThresholdRate = _rate;\\n    }\\n\\n    function _updateAutoLiquidationThresholdRate(uint256 _rate) private {\\n        require(_rate > 0, \\\"Rate is zero\\\");\\n        require(\\n            _rate < Storage.slot().marginCallThresholdRate,\\n            \\\"Auto liquidation threshold rate overflow\\\"\\n        );\\n\\n        emit AutoLiquidationThresholdRateUpdated(\\n            Storage.slot().autoLiquidationThresholdRate,\\n            _rate\\n        );\\n        Storage.slot().autoLiquidationThresholdRate = _rate;\\n    }\\n\\n    function _updateLiquidationPriceRate(uint256 _rate) private {\\n        require(_rate > 0, \\\"Rate is zero\\\");\\n        require(\\n            _rate < Storage.slot().autoLiquidationThresholdRate,\\n            \\\"Liquidation price rate overflow\\\"\\n        );\\n\\n        emit LiquidationPriceRateUpdated(Storage.slot().liquidationPriceRate, _rate);\\n        Storage.slot().liquidationPriceRate = _rate;\\n    }\\n\\n    function _updateMinCollateralRate(uint256 _rate) private {\\n        require(_rate > 0, \\\"Rate is zero\\\");\\n        require(\\n            _rate < Storage.slot().autoLiquidationThresholdRate,\\n            \\\"Min collateral rate overflow\\\"\\n        );\\n\\n        emit MinCollateralRateUpdated(Storage.slot().minCollateralRate, _rate);\\n        Storage.slot().minCollateralRate = _rate;\\n    }\\n}\\n\",\"keccak256\":\"0x9ab46e2c3d84c8b6f7bcd6feecc181259304857b830ac71dc23fea23b0af3f34\",\"license\":\"MIT\"},\"contracts/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE = \\\"FutureValue\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0x18a316fdecca8564cf6a4855f27b5d3f92867277f61a4b6ebdb948ed30114b52\",\"license\":\"MIT\"},\"contracts/libraries/ERC20Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IWETH9} from \\\"../interfaces/IWETH9.sol\\\";\\nimport {ERC20Storage as Storage} from \\\"../storages/ERC20Storage.sol\\\";\\n\\nlibrary ERC20Handler {\\n    function initialize(address _weth) internal {\\n        require(Storage.slot().weth == address(0), \\\"Already initialized\\\");\\n        Storage.slot().weth = _weth;\\n    }\\n\\n    function weth() internal view returns (address) {\\n        return Storage.slot().weth;\\n    }\\n\\n    function depositAssets(\\n        address _token,\\n        address _payer,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == Storage.slot().weth) {\\n            wrapWETH(_receiver, _amount);\\n        } else {\\n            safeTransferFrom(_token, _payer, _receiver, _amount);\\n        }\\n    }\\n\\n    function withdrawAssets(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == Storage.slot().weth) {\\n            unwrapWETH(_receiver, _amount);\\n        } else {\\n            safeTransfer(_token, _receiver, _amount);\\n        }\\n    }\\n\\n    function wrapWETH(address _receiver, uint256 _amount) internal {\\n        require(address(this).balance >= _amount, \\\"Insufficient ETH\\\");\\n\\n        IWETH9(Storage.slot().weth).deposit{value: _amount}();\\n        IWETH9(Storage.slot().weth).transfer(_receiver, _amount);\\n    }\\n\\n    function unwrapWETH(address _receiver, uint256 _amount) internal {\\n        uint256 balanceWETH9 = IWETH9(Storage.slot().weth).balanceOf(address(this));\\n        require(balanceWETH9 >= _amount, \\\"Insufficient WETH\\\");\\n\\n        if (balanceWETH9 > 0) {\\n            IWETH9(Storage.slot().weth).withdraw(_amount);\\n            safeTransferETH(_receiver, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer helper from UniswapV2 Router\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    /**\\n     * There are many non-compliant ERC20 tokens... this can handle most, adapted from UniSwap V2\\n     * Im trying to make it a habit to put external calls last (reentrancy)\\n     * You can put this in an internal function if you like.\\n     */\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // 0xa9059cbb = bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n            abi.encodeWithSelector(0xa9059cbb, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        ); // ERC20 Transfer failed\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x815d7e717efb9e9f837464cdcf19feb7a08f4166e145481fcd35f679050526c3\",\"license\":\"MIT\"},\"contracts/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/MixinAddressResolverStorage.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    modifier onlyAcceptedContracts() {\\n        require(isAcceptedContract(msg.sender), \\\"Only Accepted Contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the contract names used in this contract.\\n     * @dev The contract name list is in `./libraries/Contracts.sol`.\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @notice Returns contract names that can call this contract.\\n     * @dev The contact name listed in this method is also needed to be listed `requiredContracts` method.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = Storage.slot().resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            Storage.slot().addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                Storage.slot().resolver.getAddress(name) != Storage.slot().addressCache[name] ||\\n                Storage.slot().addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        require(address(Storage.slot().resolver) == address(0), \\\"resolver registered already\\\");\\n        Storage.slot().resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function resolver() public view returns (IAddressResolver) {\\n        return Storage.slot().resolver;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0xf0bb13571fbf8a275118b67bc0332eab0661f4465eff77066755f9320c1bd11d\",\"license\":\"MIT\"},\"contracts/storages/CollateralParametersStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary CollateralParametersStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.collateralParameters\\\");\\n\\n    struct Storage {\\n        // liquidation price rate in basis point\\n        uint256 liquidationPriceRate;\\n        // margin call threshold rate in basis point\\n        uint256 marginCallThresholdRate;\\n        // auto liquidation threshold rate in basis point\\n        uint256 autoLiquidationThresholdRate;\\n        //  minimal collateral rate in basis point\\n        uint256 minCollateralRate;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x415a942e51ef153edd4bad40a4d9e3940e7e29770172f015647f39eab45b195a\",\"license\":\"MIT\"},\"contracts/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nstruct Currency {\\n    bool isSupported;\\n    string name;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.currencyController\\\");\\n\\n    struct Storage {\\n        // Protocol currencies\\n        mapping(bytes32 => Currency) currencies;\\n        mapping(bytes32 => uint256) haircuts;\\n        // PriceFeed\\n        mapping(bytes32 => AggregatorV3Interface) usdPriceFeeds;\\n        mapping(bytes32 => AggregatorV3Interface) ethPriceFeeds;\\n        mapping(bytes32 => uint8) usdDecimals;\\n        mapping(bytes32 => uint8) ethDecimals;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0c9e9399e6f58e0702c8edcb6b58603d281668b10bf701b119911e24bba192b\",\"license\":\"MIT\"},\"contracts/storages/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary ERC20Storage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.erc20\\\");\\n\\n    struct Storage {\\n        address weth;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d84467eb850e5927870cb2551e5d0631854cef875f2d3ede75861b5eb738c7c\",\"license\":\"MIT\"},\"contracts/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.genesisValueVault\\\");\\n\\n    struct Storage {\\n        mapping(bytes32 => bool) isRegisteredCurrency;\\n        mapping(bytes32 => uint256) initialCompoundFactors;\\n        mapping(bytes32 => uint256) compoundFactors;\\n        mapping(bytes32 => uint256) currentMaturity;\\n        mapping(bytes32 => uint8) decimals;\\n        // Mapping from user to balance per currency\\n        mapping(bytes32 => mapping(address => int256)) balances;\\n        mapping(bytes32 => uint256) totalLendingSupplies;\\n        mapping(bytes32 => uint256) totalBorrowingSupplies;\\n        // Mapping from maturity to rate per currency\\n        mapping(bytes32 => mapping(uint256 => MaturityUnitPrice)) maturityUnitPrices;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2715307f5a409405179faad8ce1f4a614f1b166bd46cf2fde96d1c90ea5cf4fd\",\"license\":\"MIT\"},\"contracts/storages/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.mixinAddressResolver\\\");\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 => address) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x852b885b6264a58930a0945c68842717e19f954eaefc0137235e6f263e17fa9d\",\"license\":\"MIT\"},\"contracts/storages/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary OwnableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.ownable\\\");\\n\\n    struct Storage {\\n        address owner;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ef8bfa06947cdb63d47248ad074ac42a1b1ba828a2c97e42486a5dbb2c03e1d\",\"license\":\"MIT\"},\"contracts/storages/TokenVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary TokenVaultStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.tokenVault\\\");\\n\\n    struct Storage {\\n        // // Mapping from user to total unsettled collateral per currency\\n        // mapping(address => mapping(bytes32 => uint256)) unsettledCollateral;\\n        // Mapping from user to unsettled exposure\\n        mapping(address => EnumerableSet.Bytes32Set) exposedUnsettledCurrencies;\\n        // Mapping from currency name to token address\\n        mapping(bytes32 => address) tokenAddresses;\\n        // Mapping for used currency vaults per user.\\n        mapping(address => EnumerableSet.Bytes32Set) usedCurrencies;\\n        // Mapping for all deposits of currency per users collateral\\n        mapping(address => mapping(bytes32 => uint256)) collateralAmounts;\\n        // Mapping from user to total escrowed amount per currency\\n        mapping(address => mapping(bytes32 => uint256)) escrowedAmount;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc5a0cd43b46bf299f39f99a8f41d95d28b1b325f40f9ec0278f8ce17df0370ca\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant BP = 10000; // basis point\\n    uint256 public constant PCT = 10000; // percentage point in basis\\n\\n    uint256 internal constant DAYS_IN_YEAR = 365;\\n    uint256 internal constant SECONDS_IN_YEAR = 31557600;\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n}\\n\",\"keccak256\":\"0xebb47b6088b7fa52e4cdab8da1f7ea06308d829aed07ceae13847cbeecea09ba\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../storages/OwnableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return OwnableStorage.slot().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = OwnableStorage.slot().owner;\\n        OwnableStorage.slot().owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1c782b9deaf1f94d2af99826e6e8207f5e71f3fbb6ce18805913a3ca7dda9579\",\"license\":\"MIT\"},\"contracts/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0xe59cd60631c7c754ed6b77caa6f3a06301ef0df07881a3dcfa85124abc1890b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613011806100206000396000f3fe6080604052600436106101a05760003560e01c80637796374a116100ec578063aec9455c1161008a578063d2a19b3e11610064578063d2a19b3e146104e5578063e099765914610505578063f2fde38b1461051a578063fc7008101461053a57600080fd5b8063aec9455c14610492578063c20753bd146104b2578063ca423031146104c557600080fd5b80638da5cb5b116100c65780638da5cb5b1461041d578063948060dd146104325780639ba57c7d14610452578063ae8128411461047257600080fd5b80637796374a146103bd5780637d44828e146103dd57806383a5041c146103fd57600080fd5b80631e16eb5b116101595780633d03b9da116101335780633d03b9da146103315780635d861505146103535780636002de9914610388578063715018a6146103a857600080fd5b80631e16eb5b146102e757806329985e5a146103075780632af64bd31461031c57600080fd5b8063040cf0201461020457806304f3bcec146102245780630cf7505d146102565780630cfe33fa146102865780631189abda146102b45780631de26e16146102d457600080fd5b366101ff576101ad61055a565b6001600160a01b0316336001600160a01b0316146101fd5760405162461bcd60e51b815260206004820152600860248201526709cdee840ae8aa8960c31b60448201526064015b60405180910390fd5b005b600080fd5b34801561021057600080fd5b506101fd61021f366004612a0c565b61057b565b34801561023057600080fd5b506102396107e3565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026257600080fd5b50610276610271366004612a2e565b6107f9565b604051901515815260200161024d565b34801561029257600080fd5b506102a66102a1366004612a5c565b610827565b60405190815260200161024d565b3480156102c057600080fd5b506101fd6102cf366004612a79565b61085c565b6101fd6102e2366004612a0c565b61094c565b3480156102f357600080fd5b50610276610302366004612a79565b610a48565b34801561031357600080fd5b506101fd610a55565b34801561032857600080fd5b50610276610c02565b34801561033d57600080fd5b50610346610d68565b60405161024d9190612aae565b34801561035f57600080fd5b50610368610dfa565b60408051948552602085019390935291830152606082015260800161024d565b34801561039457600080fd5b506101fd6103a3366004612a79565b610e16565b3480156103b457600080fd5b506101fd610efa565b3480156103c957600080fd5b506102a66103d8366004612af2565b610f35565b3480156103e957600080fd5b506102a66103f8366004612af2565b610fd7565b34801561040957600080fd5b506101fd610418366004612b1e565b61100e565b34801561042957600080fd5b506102396111b1565b34801561043e57600080fd5b506102a661044d366004612a5c565b6111d9565b34801561045e57600080fd5b506102a661046d366004612a5c565b6111e4565b34801561047e57600080fd5b506101fd61048d366004612b90565b611212565b34801561049e57600080fd5b506101fd6104ad366004612a79565b61124d565b6101fd6104c0366004612a79565b6112d8565b3480156104d157600080fd5b506102a66104e0366004612a5c565b6113b3565b3480156104f157600080fd5b506101fd610500366004612bc2565b6113c1565b34801561051157600080fd5b50610346611528565b34801561052657600080fd5b506101fd610535366004612a5c565b611578565b34801561054657600080fd5b50610346610555366004612a5c565b611618565b6000600080516020612fbc8339815191525b546001600160a01b0316919050565b81610585816107f9565b6105a15760405162461bcd60e51b81526004016101f490612bf2565b600082116105c15760405162461bcd60e51b81526004016101f490612c29565b3360006105cd826116e7565b905060006105d9611771565b6040516306d062ad60e01b815260048101889052602481018490526001600160a01b0391909116906306d062ad9060440160206040518083038186803b15801561062257600080fd5b505afa158015610636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065a9190612c51565b9050600081861161066b578561066d565b815b905080610678611796565b6001600160a01b0386166000908152600391909101602090815260408083208b845290915290205410156106be5760405162461bcd60e51b81526004016101f490612c6a565b806106c7611796565b6001600160a01b0386166000908152600391909101602090815260408083208b8452909152812080549091906106fe908490612cce565b90915550610732905061070f611796565b600089815260019190910160205260409020546001600160a01b031633836117ba565b61073c33886117f7565b61074461188b565b604051630516d8c960e11b81523360048201526001600160a01b039190911690630a2db19290602401600060405180830381600087803b15801561078757600080fd5b505af115801561079b573d6000803e3d6000fd5b5050604080518a8152602081018590523393507fc3ded2be7db21b1af963f267d27750e4a15f174547d88b886b9bda43e2c6fa3292500160405180910390a250505050505050565b6000600080516020612f9c83398151915261056c565b600080610804611796565b60009384526001016020526040909220546001600160a01b031690911415919050565b6000806000610838846000806118b0565b9150915080821161084a576000610854565b6108548183612cce565b949350505050565b6108653361190f565b6108815760405162461bcd60e51b81526004016101f490612ce5565b8161088b816107f9565b6108a75760405162461bcd60e51b81526004016101f490612bf2565b816108b0611796565b6001600160a01b03861660009081526003919091016020908152604080832087845290915290205410156108f65760405162461bcd60e51b81526004016101f490612c6a565b816108ff611796565b6001600160a01b03861660009081526003919091016020908152604080832087845290915281208054909190610936908490612cce565b90915550610946905084846117f7565b50505050565b81610956816107f9565b6109725760405162461bcd60e51b81526004016101f490612bf2565b600082116109925760405162461bcd60e51b81526004016101f490612c29565b6109c161099d611796565b600085815260019190910160205260409020546001600160a01b031633308561197f565b816109ca611796565b33600090815260039190910160209081526040808320878452909152812080549091906109f8908490612d1c565b90915550610a08905033846117f7565b604080518481526020810184905233917f19dacbf83c5de6658e14cbf7bcae5c15eca2eedecf1c66fbca928e4d351bea0f910160405180910390a2505050565b60006108548484846119bd565b6000610a5f610d68565b905060005b8151811015610bfe576000828281518110610a8157610a81612d34565b602002602001015190506000610aa2600080516020612f9c83398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd91610b1391869190605d01612da2565b60206040518083038186803b158015610b2b57600080fd5b505afa158015610b3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b639190612dbb565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a150508080610bf690612dd8565b915050610a64565b5050565b600080610c0d610d68565b905060005b8151811015610d5f576000828281518110610c2f57610c2f612d34565b60200260200101519050610c4e600080516020612f9c83398151915290565b600082815260019190910160205260409020546001600160a01b0316600080516020612f9c833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b158015610cbb57600080fd5b505afa158015610ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf39190612dbb565b6001600160a01b0316141580610d3d575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b15610d4c576000935050505090565b5080610d5781612dd8565b915050610c12565b50600191505090565b60408051600280825260608083018452926020830190803683370190505090507121bab93932b731bca1b7b73a3937b63632b960711b81600081518110610db157610db1612d34565b602002602001018181525050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600181518110610deb57610deb612d34565b60200260200101818152505090565b600080600080610e08611a06565b935093509350935090919293565b610e1f3361190f565b610e3b5760405162461bcd60e51b81526004016101f490612ce5565b81610e45816107f9565b610e615760405162461bcd60e51b81526004016101f490612bf2565b60008211610e815760405162461bcd60e51b81526004016101f490612c29565b610eaf610e8c611796565b600085815260019190910160205260409020546001600160a01b031685846117ba565b60408051848152602081018490526001600160a01b038616917f5ed89316d1ac2ec9e7c6c750c04c348bd1ef55d00ccb1031dad4f1b7743ed0df91015b60405180910390a250505050565b33610f036111b1565b6001600160a01b031614610f295760405162461bcd60e51b81526004016101f490612e09565b610f336000611a47565b565b600080610f428484610fd7565b9050610f4c611771565b6040516344a6ecdd60e01b815260048101859052602481018390526001600160a01b0391909116906344a6ecdd9060440160206040518083038186803b158015610f9557600080fd5b505afa158015610fa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcd9190612c51565b9150505b92915050565b6000610fe1611796565b6001600160a01b039390931660009081526003909301602090815260408085209385529290525090205490565b600054610100900460ff161580801561102e5750600054600160ff909116105b806110485750303b158015611048575060005460ff166001145b6110ab5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016101f4565b6000805460ff1916600117905580156110ce576000805461ff0019166101001790555b60006110d8611ab8565b6001600160a01b0316141561113a5760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b60648201526084016101f4565b61114388611a47565b61114c87611ae0565b61115582611b78565b61116186868686611be9565b80156111a7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa61056c565b6000610fd1826116e7565b6000806111f383600080611c52565b925050508061120184611d8b565b61120b9190612d1c565b9392505050565b3361121b6111b1565b6001600160a01b0316146112415760405162461bcd60e51b81526004016101f490612e09565b61094684848484611be9565b6112563361190f565b6112725760405162461bcd60e51b81526004016101f490612ce5565b8161127c816107f9565b6112985760405162461bcd60e51b81526004016101f490612bf2565b816112a1611796565b6001600160a01b03861660009081526003919091016020908152604080832087845290915281208054909190610936908490612d1c565b6112e13361190f565b6112fd5760405162461bcd60e51b81526004016101f490612ce5565b81611307816107f9565b6113235760405162461bcd60e51b81526004016101f490612bf2565b600082116113435760405162461bcd60e51b81526004016101f490612c29565b61137261134e611796565b600085815260019190910160205260409020546001600160a01b031685308561197f565b60408051848152602081018490526001600160a01b038616917fb8fecb33cb1bef9518538eb12561302d2f1630da996679d8d4bb2ece73076d3a9101610eec565b6000610fd182600080611e9c565b336113ca6111b1565b6001600160a01b0316146113f05760405162461bcd60e51b81526004016101f490612e09565b6113f8611771565b6001600160a01b031663d4d4f6ce836040518263ffffffff1660e01b815260040161142591815260200190565b60206040518083038186803b15801561143d57600080fd5b505afa158015611451573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114759190612e3e565b6114b45760405162461bcd60e51b815260206004820152601060248201526f496e76616c69642063757272656e637960801b60448201526064016101f4565b806114bd611796565b6000848152600191909101602090815260409182902080546001600160a01b0319166001600160a01b039485161790558151858152928416908301527f912aa7b5852e556acf506f3cf7f8f2afe5c65389e74f02cc2b7fcd4bbf0346ec910160405180910390a15050565b60408051600180825281830190925260609160208083019080368337019050509050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600081518110610deb57610deb612d34565b336115816111b1565b6001600160a01b0316146115a75760405162461bcd60e51b81526004016101f490612e09565b6001600160a01b03811661160c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101f4565b61161581611a47565b50565b60606000611624611796565b6001600160a01b038416600090815260029190910160205260408120915061164b82611ed7565b905060008167ffffffffffffffff81111561166857611668612df3565b604051908082528060200260200182016040528015611691578160200160208202803683370190505b50905060005b828110156116de5760006116ab8583611ee1565b9050808383815181106116c0576116c0612d34565b602090810291909101015250806116d681612dd8565b915050611697565b50949350505050565b60008060006116f8846000806118b0565b91509150806000141561170c575092915050565b612710611717611eed565b6117219083612e60565b61172b9190612e7f565b8211156117675761271061173d611eed565b6117479083612e60565b61175361271085612e60565b61175d9190612cce565b6108549190612e7f565b5060009392505050565b60006117917121bab93932b731bca1b7b73a3937b63632b960711b611f00565b905090565b7f53832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a831790565b600080516020612fbc833981519152546001600160a01b03848116911614156117ec576117e78282611f98565b505050565b6117e78383836120e3565b6000611801611796565b6001600160a01b038416600090815260039190910160209081526040808320858452909152902054111561185d576117e78161183b611796565b6001600160a01b038516600090815260029190910160205260409020906121ce565b6117e781611869611796565b6001600160a01b038516600090815260029190910160205260409020906121da565b6000611791762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b611f00565b60008060006118be866121e6565b905060008060006118d0898989611c52565b925092509250806118e08a611d8b565b6118ea9190612d1c565b9550816118f78486612d1c565b6119019190612d1c565b945050505050935093915050565b60008061191a611528565b905060005b81518110156117675761194a82828151811061193d5761193d612d34565b6020026020010151611f00565b6001600160a01b0316846001600160a01b0316141561196d575060019392505050565b8061197781612dd8565b91505061191f565b600080516020612fbc833981519152546001600160a01b03858116911614156119b1576119ac828261228d565b610946565b610946848484846123d6565b60008060006119cd8686866118b0565b9150915080600014806119fc57506119e3611eed565b6119ed9082612e60565b6119f961271084612e60565b10155b9695505050505050565b600080600080611a146124ca565b60010154611a206124ca565b60020154611a2c6124ca565b54611a356124ca565b60030154935093509350935090919293565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61056c565b600080516020612f9c833981519152546001600160a01b031615611b465760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c7265616479000000000060448201526064016101f4565b80600080516020612f9c8339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b600080516020612fbc833981519152546001600160a01b031615611bd45760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064016101f4565b80600080516020612fbc833981519152611b57565b611bf16124ca565b600101548414611c0457611c04846124ee565b611c0c6124ca565b600201548314611c1f57611c1f83612562565b611c276124ca565b548214611c3757611c3782612641565b611c3f6124ca565b6003015481146109465761094681612709565b6000806000611c5f61188b565b6040516383d4c5db60e01b81526001600160a01b03888116600483015291909116906383d4c5db9060240160606040518083038186803b158015611ca257600080fd5b505afa158015611cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cda9190612ea1565b9194509250905083611ced576000611d76565b611cf5611771565b6040516344a6ecdd60e01b815260048101879052602481018690526001600160a01b0391909116906344a6ecdd9060440160206040518083038186803b158015611d3e57600080fd5b505afa158015611d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d769190612c51565b611d809084612d1c565b925093509350939050565b600080611d96611796565b6001600160a01b03841660009081526002919091016020526040812091508080611dbf84611ed7565b905060005b81811015611e91576000611dd88683611ee1565b9050611de2611771565b6001600160a01b03166344a6ecdd82611dfb8b85610fd7565b6040516001600160e01b031960e085901b1681526004810192909252602482015260440160206040518083038186803b158015611e3757600080fd5b505afa158015611e4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6f9190612c51565b9450611e7b8585612d1c565b9350508080611e8990612dd8565b915050611dc4565b509095945050505050565b6000806000611eac8686866118b0565b90925090508115611ece5781611ec461271083612e60565b6119fc9190612e7f565b50509392505050565b6000610fd1825490565b600061120b83836127d7565b6000611ef76124ca565b60010154905090565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b03169081611f915760405162461bcd60e51b81526004016101f49190612ecf565b5092915050565b6000600080516020612fbc833981519152546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015611fea57600080fd5b505afa158015611ffe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120229190612c51565b9050818110156120685760405162461bcd60e51b8152602060048201526011602482015270092dce6eaccccd2c6d2cadce840ae8aa89607b1b60448201526064016101f4565b80156117e757600080516020612fbc83398151915254604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156120c157600080fd5b505af11580156120d5573d6000803e3d6000fd5b505050506117e78383612801565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161213f9190612ee2565b6000604051808303816000865af19150503d806000811461217c576040519150601f19603f3d011682016040523d82523d6000602084013e612181565b606091505b50915091508180156121ab5750805115806121ab5750808060200190518101906121ab9190612e3e565b6121c75760405162461bcd60e51b81526004016101f490612efe565b5050505050565b600061120b83836128ca565b600061120b8383612919565b6000806121f161188b565b60405163fb54a6b360e01b81526001600160a01b038581166004830152919091169063fb54a6b39060240160206040518083038186803b15801561223457600080fd5b505afa158015612248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226c9190612c51565b9050600081136122845761227f81612f42565b61120b565b60009392505050565b804710156122d05760405162461bcd60e51b815260206004820152601060248201526f092dce6eaccccd2c6d2cadce8408aa8960831b60448201526064016101f4565b600080516020612fbc8339815191525460408051630d0e30db60e41b815290516001600160a01b039092169163d0e30db0918491600480830192600092919082900301818588803b15801561232457600080fd5b505af1158015612338573d6000803e3d6000fd5b5050505050612352600080516020612fbc83398151915290565b5460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561239e57600080fd5b505af11580156123b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e79190612e3e565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161243a9190612ee2565b6000604051808303816000865af19150503d8060008114612477576040519150601f19603f3d011682016040523d82523d6000602084013e61247c565b606091505b50915091508180156124a65750805115806124a65750808060200190518101906124a69190612e3e565b6124c25760405162461bcd60e51b81526004016101f490612efe565b505050505050565b7f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d05290565b6000811161250e5760405162461bcd60e51b81526004016101f490612f5f565b7f31ee2d7ab5f3365672e54f81f75b37a4d8b0f1085872bdb80349a1cb08ddb7116125376124ca565b6001015460408051918252602082018490520160405180910390a18061255b6124ca565b6001015550565b600081116125825760405162461bcd60e51b81526004016101f490612f5f565b61258a6124ca565b6001015481106125ed5760405162461bcd60e51b815260206004820152602860248201527f4175746f206c69717569646174696f6e207468726573686f6c642072617465206044820152676f766572666c6f7760c01b60648201526084016101f4565b7fd3353684d64f1c80498433d8407c96e6bbeb1ec88b6200ec97d2c910fdbd0da46126166124ca565b6002015460408051918252602082018490520160405180910390a18061263a6124ca565b6002015550565b600081116126615760405162461bcd60e51b81526004016101f490612f5f565b6126696124ca565b6002015481106126bb5760405162461bcd60e51b815260206004820152601f60248201527f4c69717569646174696f6e2070726963652072617465206f766572666c6f770060448201526064016101f4565b7f86aa422ec6af9520cb2f744924b12937e3db1aa5ce22050d0d519621e84090706126e46124ca565b5460408051918252602082018490520160405180910390a1806127056124ca565b5550565b600081116127295760405162461bcd60e51b81526004016101f490612f5f565b6127316124ca565b6002015481106127835760405162461bcd60e51b815260206004820152601c60248201527f4d696e20636f6c6c61746572616c2072617465206f766572666c6f770000000060448201526064016101f4565b7f8367b1759e8fdce5712002e7aa025339b99cf3c850b194ebdf37219f86b01ee66127ac6124ca565b6003015460408051918252602082018490520160405180910390a1806127d06124ca565b6003015550565b60008260000182815481106127ee576127ee612d34565b9060005260206000200154905092915050565b604080516000808252602082019092526001600160a01b03841690839060405161282b9190612ee2565b60006040518083038185875af1925050503d8060008114612868576040519150601f19603f3d011682016040523d82523d6000602084013e61286d565b606091505b50509050806117e75760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b60648201526084016101f4565b600081815260018301602052604081205461291157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610fd1565b506000610fd1565b60008181526001830160205260408120548015612a0257600061293d600183612cce565b855490915060009061295190600190612cce565b90508181146129b657600086600001828154811061297157612971612d34565b906000526020600020015490508087600001848154811061299457612994612d34565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806129c7576129c7612f85565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610fd1565b6000915050610fd1565b60008060408385031215612a1f57600080fd5b50508035926020909101359150565b600060208284031215612a4057600080fd5b5035919050565b6001600160a01b038116811461161557600080fd5b600060208284031215612a6e57600080fd5b813561120b81612a47565b600080600060608486031215612a8e57600080fd5b8335612a9981612a47565b95602085013595506040909401359392505050565b6020808252825182820181905260009190848201906040850190845b81811015612ae657835183529284019291840191600101612aca565b50909695505050505050565b60008060408385031215612b0557600080fd5b8235612b1081612a47565b946020939093013593505050565b600080600080600080600060e0888a031215612b3957600080fd5b8735612b4481612a47565b96506020880135612b5481612a47565b955060408801359450606088013593506080880135925060a0880135915060c0880135612b8081612a47565b8091505092959891949750929550565b60008060008060808587031215612ba657600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215612bd557600080fd5b823591506020830135612be781612a47565b809150509250929050565b60208082526017908201527f43757272656e6379206e6f742072656769737465726564000000000000000000604082015260600190565b6020808252600e908201526d125b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b600060208284031215612c6357600080fd5b5051919050565b6020808252602e908201527f4e6f7420656e6f75676820636f6c6c61746572616c20696e207468652073656c60408201526d65637465642063757272656e637960901b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082821015612ce057612ce0612cb8565b500390565b60208082526017908201527f4f6e6c7920416363657074656420436f6e747261637473000000000000000000604082015260600190565b60008219821115612d2f57612d2f612cb8565b500190565b634e487b7160e01b600052603260045260246000fd5b60005b83811015612d65578181015183820152602001612d4d565b838111156109465750506000910152565b60008151808452612d8e816020860160208601612d4a565b601f01601f19169290920160200192915050565b8281526040602082015260006108546040830184612d76565b600060208284031215612dcd57600080fd5b815161120b81612a47565b6000600019821415612dec57612dec612cb8565b5060010190565b634e487b7160e01b600052604160045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215612e5057600080fd5b8151801515811461120b57600080fd5b6000816000190483118215151615612e7a57612e7a612cb8565b500290565b600082612e9c57634e487b7160e01b600052601260045260246000fd5b500490565b600080600060608486031215612eb657600080fd5b8351925060208401519150604084015190509250925092565b60208152600061120b6020830184612d76565b60008251612ef4818460208701612d4a565b9190910192915050565b60208082526024908201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416040820152631253115160e21b606082015260800190565b6000600160ff1b821415612f5857612f58612cb8565b5060000390565b6020808252600c908201526b52617465206973207a65726f60a01b604082015260600190565b634e487b7160e01b600052603160045260246000fdfe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240187522ee63bb7da831844dcdb60f35e8cfa51225eeb4ed6734e421ed06f0d56805a264697066735822122015bbc84decc52d22ae5e60ec2a9ad79334f42cced417eec71fa24ab3c56c11e164736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101a05760003560e01c80637796374a116100ec578063aec9455c1161008a578063d2a19b3e11610064578063d2a19b3e146104e5578063e099765914610505578063f2fde38b1461051a578063fc7008101461053a57600080fd5b8063aec9455c14610492578063c20753bd146104b2578063ca423031146104c557600080fd5b80638da5cb5b116100c65780638da5cb5b1461041d578063948060dd146104325780639ba57c7d14610452578063ae8128411461047257600080fd5b80637796374a146103bd5780637d44828e146103dd57806383a5041c146103fd57600080fd5b80631e16eb5b116101595780633d03b9da116101335780633d03b9da146103315780635d861505146103535780636002de9914610388578063715018a6146103a857600080fd5b80631e16eb5b146102e757806329985e5a146103075780632af64bd31461031c57600080fd5b8063040cf0201461020457806304f3bcec146102245780630cf7505d146102565780630cfe33fa146102865780631189abda146102b45780631de26e16146102d457600080fd5b366101ff576101ad61055a565b6001600160a01b0316336001600160a01b0316146101fd5760405162461bcd60e51b815260206004820152600860248201526709cdee840ae8aa8960c31b60448201526064015b60405180910390fd5b005b600080fd5b34801561021057600080fd5b506101fd61021f366004612a0c565b61057b565b34801561023057600080fd5b506102396107e3565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026257600080fd5b50610276610271366004612a2e565b6107f9565b604051901515815260200161024d565b34801561029257600080fd5b506102a66102a1366004612a5c565b610827565b60405190815260200161024d565b3480156102c057600080fd5b506101fd6102cf366004612a79565b61085c565b6101fd6102e2366004612a0c565b61094c565b3480156102f357600080fd5b50610276610302366004612a79565b610a48565b34801561031357600080fd5b506101fd610a55565b34801561032857600080fd5b50610276610c02565b34801561033d57600080fd5b50610346610d68565b60405161024d9190612aae565b34801561035f57600080fd5b50610368610dfa565b60408051948552602085019390935291830152606082015260800161024d565b34801561039457600080fd5b506101fd6103a3366004612a79565b610e16565b3480156103b457600080fd5b506101fd610efa565b3480156103c957600080fd5b506102a66103d8366004612af2565b610f35565b3480156103e957600080fd5b506102a66103f8366004612af2565b610fd7565b34801561040957600080fd5b506101fd610418366004612b1e565b61100e565b34801561042957600080fd5b506102396111b1565b34801561043e57600080fd5b506102a661044d366004612a5c565b6111d9565b34801561045e57600080fd5b506102a661046d366004612a5c565b6111e4565b34801561047e57600080fd5b506101fd61048d366004612b90565b611212565b34801561049e57600080fd5b506101fd6104ad366004612a79565b61124d565b6101fd6104c0366004612a79565b6112d8565b3480156104d157600080fd5b506102a66104e0366004612a5c565b6113b3565b3480156104f157600080fd5b506101fd610500366004612bc2565b6113c1565b34801561051157600080fd5b50610346611528565b34801561052657600080fd5b506101fd610535366004612a5c565b611578565b34801561054657600080fd5b50610346610555366004612a5c565b611618565b6000600080516020612fbc8339815191525b546001600160a01b0316919050565b81610585816107f9565b6105a15760405162461bcd60e51b81526004016101f490612bf2565b600082116105c15760405162461bcd60e51b81526004016101f490612c29565b3360006105cd826116e7565b905060006105d9611771565b6040516306d062ad60e01b815260048101889052602481018490526001600160a01b0391909116906306d062ad9060440160206040518083038186803b15801561062257600080fd5b505afa158015610636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065a9190612c51565b9050600081861161066b578561066d565b815b905080610678611796565b6001600160a01b0386166000908152600391909101602090815260408083208b845290915290205410156106be5760405162461bcd60e51b81526004016101f490612c6a565b806106c7611796565b6001600160a01b0386166000908152600391909101602090815260408083208b8452909152812080549091906106fe908490612cce565b90915550610732905061070f611796565b600089815260019190910160205260409020546001600160a01b031633836117ba565b61073c33886117f7565b61074461188b565b604051630516d8c960e11b81523360048201526001600160a01b039190911690630a2db19290602401600060405180830381600087803b15801561078757600080fd5b505af115801561079b573d6000803e3d6000fd5b5050604080518a8152602081018590523393507fc3ded2be7db21b1af963f267d27750e4a15f174547d88b886b9bda43e2c6fa3292500160405180910390a250505050505050565b6000600080516020612f9c83398151915261056c565b600080610804611796565b60009384526001016020526040909220546001600160a01b031690911415919050565b6000806000610838846000806118b0565b9150915080821161084a576000610854565b6108548183612cce565b949350505050565b6108653361190f565b6108815760405162461bcd60e51b81526004016101f490612ce5565b8161088b816107f9565b6108a75760405162461bcd60e51b81526004016101f490612bf2565b816108b0611796565b6001600160a01b03861660009081526003919091016020908152604080832087845290915290205410156108f65760405162461bcd60e51b81526004016101f490612c6a565b816108ff611796565b6001600160a01b03861660009081526003919091016020908152604080832087845290915281208054909190610936908490612cce565b90915550610946905084846117f7565b50505050565b81610956816107f9565b6109725760405162461bcd60e51b81526004016101f490612bf2565b600082116109925760405162461bcd60e51b81526004016101f490612c29565b6109c161099d611796565b600085815260019190910160205260409020546001600160a01b031633308561197f565b816109ca611796565b33600090815260039190910160209081526040808320878452909152812080549091906109f8908490612d1c565b90915550610a08905033846117f7565b604080518481526020810184905233917f19dacbf83c5de6658e14cbf7bcae5c15eca2eedecf1c66fbca928e4d351bea0f910160405180910390a2505050565b60006108548484846119bd565b6000610a5f610d68565b905060005b8151811015610bfe576000828281518110610a8157610a81612d34565b602002602001015190506000610aa2600080516020612f9c83398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd91610b1391869190605d01612da2565b60206040518083038186803b158015610b2b57600080fd5b505afa158015610b3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b639190612dbb565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a150508080610bf690612dd8565b915050610a64565b5050565b600080610c0d610d68565b905060005b8151811015610d5f576000828281518110610c2f57610c2f612d34565b60200260200101519050610c4e600080516020612f9c83398151915290565b600082815260019190910160205260409020546001600160a01b0316600080516020612f9c833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b158015610cbb57600080fd5b505afa158015610ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf39190612dbb565b6001600160a01b0316141580610d3d575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b15610d4c576000935050505090565b5080610d5781612dd8565b915050610c12565b50600191505090565b60408051600280825260608083018452926020830190803683370190505090507121bab93932b731bca1b7b73a3937b63632b960711b81600081518110610db157610db1612d34565b602002602001018181525050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600181518110610deb57610deb612d34565b60200260200101818152505090565b600080600080610e08611a06565b935093509350935090919293565b610e1f3361190f565b610e3b5760405162461bcd60e51b81526004016101f490612ce5565b81610e45816107f9565b610e615760405162461bcd60e51b81526004016101f490612bf2565b60008211610e815760405162461bcd60e51b81526004016101f490612c29565b610eaf610e8c611796565b600085815260019190910160205260409020546001600160a01b031685846117ba565b60408051848152602081018490526001600160a01b038616917f5ed89316d1ac2ec9e7c6c750c04c348bd1ef55d00ccb1031dad4f1b7743ed0df91015b60405180910390a250505050565b33610f036111b1565b6001600160a01b031614610f295760405162461bcd60e51b81526004016101f490612e09565b610f336000611a47565b565b600080610f428484610fd7565b9050610f4c611771565b6040516344a6ecdd60e01b815260048101859052602481018390526001600160a01b0391909116906344a6ecdd9060440160206040518083038186803b158015610f9557600080fd5b505afa158015610fa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcd9190612c51565b9150505b92915050565b6000610fe1611796565b6001600160a01b039390931660009081526003909301602090815260408085209385529290525090205490565b600054610100900460ff161580801561102e5750600054600160ff909116105b806110485750303b158015611048575060005460ff166001145b6110ab5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016101f4565b6000805460ff1916600117905580156110ce576000805461ff0019166101001790555b60006110d8611ab8565b6001600160a01b0316141561113a5760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b60648201526084016101f4565b61114388611a47565b61114c87611ae0565b61115582611b78565b61116186868686611be9565b80156111a7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa61056c565b6000610fd1826116e7565b6000806111f383600080611c52565b925050508061120184611d8b565b61120b9190612d1c565b9392505050565b3361121b6111b1565b6001600160a01b0316146112415760405162461bcd60e51b81526004016101f490612e09565b61094684848484611be9565b6112563361190f565b6112725760405162461bcd60e51b81526004016101f490612ce5565b8161127c816107f9565b6112985760405162461bcd60e51b81526004016101f490612bf2565b816112a1611796565b6001600160a01b03861660009081526003919091016020908152604080832087845290915281208054909190610936908490612d1c565b6112e13361190f565b6112fd5760405162461bcd60e51b81526004016101f490612ce5565b81611307816107f9565b6113235760405162461bcd60e51b81526004016101f490612bf2565b600082116113435760405162461bcd60e51b81526004016101f490612c29565b61137261134e611796565b600085815260019190910160205260409020546001600160a01b031685308561197f565b60408051848152602081018490526001600160a01b038616917fb8fecb33cb1bef9518538eb12561302d2f1630da996679d8d4bb2ece73076d3a9101610eec565b6000610fd182600080611e9c565b336113ca6111b1565b6001600160a01b0316146113f05760405162461bcd60e51b81526004016101f490612e09565b6113f8611771565b6001600160a01b031663d4d4f6ce836040518263ffffffff1660e01b815260040161142591815260200190565b60206040518083038186803b15801561143d57600080fd5b505afa158015611451573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114759190612e3e565b6114b45760405162461bcd60e51b815260206004820152601060248201526f496e76616c69642063757272656e637960801b60448201526064016101f4565b806114bd611796565b6000848152600191909101602090815260409182902080546001600160a01b0319166001600160a01b039485161790558151858152928416908301527f912aa7b5852e556acf506f3cf7f8f2afe5c65389e74f02cc2b7fcd4bbf0346ec910160405180910390a15050565b60408051600180825281830190925260609160208083019080368337019050509050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600081518110610deb57610deb612d34565b336115816111b1565b6001600160a01b0316146115a75760405162461bcd60e51b81526004016101f490612e09565b6001600160a01b03811661160c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101f4565b61161581611a47565b50565b60606000611624611796565b6001600160a01b038416600090815260029190910160205260408120915061164b82611ed7565b905060008167ffffffffffffffff81111561166857611668612df3565b604051908082528060200260200182016040528015611691578160200160208202803683370190505b50905060005b828110156116de5760006116ab8583611ee1565b9050808383815181106116c0576116c0612d34565b602090810291909101015250806116d681612dd8565b915050611697565b50949350505050565b60008060006116f8846000806118b0565b91509150806000141561170c575092915050565b612710611717611eed565b6117219083612e60565b61172b9190612e7f565b8211156117675761271061173d611eed565b6117479083612e60565b61175361271085612e60565b61175d9190612cce565b6108549190612e7f565b5060009392505050565b60006117917121bab93932b731bca1b7b73a3937b63632b960711b611f00565b905090565b7f53832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a831790565b600080516020612fbc833981519152546001600160a01b03848116911614156117ec576117e78282611f98565b505050565b6117e78383836120e3565b6000611801611796565b6001600160a01b038416600090815260039190910160209081526040808320858452909152902054111561185d576117e78161183b611796565b6001600160a01b038516600090815260029190910160205260409020906121ce565b6117e781611869611796565b6001600160a01b038516600090815260029190910160205260409020906121da565b6000611791762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b611f00565b60008060006118be866121e6565b905060008060006118d0898989611c52565b925092509250806118e08a611d8b565b6118ea9190612d1c565b9550816118f78486612d1c565b6119019190612d1c565b945050505050935093915050565b60008061191a611528565b905060005b81518110156117675761194a82828151811061193d5761193d612d34565b6020026020010151611f00565b6001600160a01b0316846001600160a01b0316141561196d575060019392505050565b8061197781612dd8565b91505061191f565b600080516020612fbc833981519152546001600160a01b03858116911614156119b1576119ac828261228d565b610946565b610946848484846123d6565b60008060006119cd8686866118b0565b9150915080600014806119fc57506119e3611eed565b6119ed9082612e60565b6119f961271084612e60565b10155b9695505050505050565b600080600080611a146124ca565b60010154611a206124ca565b60020154611a2c6124ca565b54611a356124ca565b60030154935093509350935090919293565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61056c565b600080516020612f9c833981519152546001600160a01b031615611b465760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c7265616479000000000060448201526064016101f4565b80600080516020612f9c8339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b600080516020612fbc833981519152546001600160a01b031615611bd45760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064016101f4565b80600080516020612fbc833981519152611b57565b611bf16124ca565b600101548414611c0457611c04846124ee565b611c0c6124ca565b600201548314611c1f57611c1f83612562565b611c276124ca565b548214611c3757611c3782612641565b611c3f6124ca565b6003015481146109465761094681612709565b6000806000611c5f61188b565b6040516383d4c5db60e01b81526001600160a01b03888116600483015291909116906383d4c5db9060240160606040518083038186803b158015611ca257600080fd5b505afa158015611cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cda9190612ea1565b9194509250905083611ced576000611d76565b611cf5611771565b6040516344a6ecdd60e01b815260048101879052602481018690526001600160a01b0391909116906344a6ecdd9060440160206040518083038186803b158015611d3e57600080fd5b505afa158015611d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d769190612c51565b611d809084612d1c565b925093509350939050565b600080611d96611796565b6001600160a01b03841660009081526002919091016020526040812091508080611dbf84611ed7565b905060005b81811015611e91576000611dd88683611ee1565b9050611de2611771565b6001600160a01b03166344a6ecdd82611dfb8b85610fd7565b6040516001600160e01b031960e085901b1681526004810192909252602482015260440160206040518083038186803b158015611e3757600080fd5b505afa158015611e4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6f9190612c51565b9450611e7b8585612d1c565b9350508080611e8990612dd8565b915050611dc4565b509095945050505050565b6000806000611eac8686866118b0565b90925090508115611ece5781611ec461271083612e60565b6119fc9190612e7f565b50509392505050565b6000610fd1825490565b600061120b83836127d7565b6000611ef76124ca565b60010154905090565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b03169081611f915760405162461bcd60e51b81526004016101f49190612ecf565b5092915050565b6000600080516020612fbc833981519152546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015611fea57600080fd5b505afa158015611ffe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120229190612c51565b9050818110156120685760405162461bcd60e51b8152602060048201526011602482015270092dce6eaccccd2c6d2cadce840ae8aa89607b1b60448201526064016101f4565b80156117e757600080516020612fbc83398151915254604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156120c157600080fd5b505af11580156120d5573d6000803e3d6000fd5b505050506117e78383612801565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161213f9190612ee2565b6000604051808303816000865af19150503d806000811461217c576040519150601f19603f3d011682016040523d82523d6000602084013e612181565b606091505b50915091508180156121ab5750805115806121ab5750808060200190518101906121ab9190612e3e565b6121c75760405162461bcd60e51b81526004016101f490612efe565b5050505050565b600061120b83836128ca565b600061120b8383612919565b6000806121f161188b565b60405163fb54a6b360e01b81526001600160a01b038581166004830152919091169063fb54a6b39060240160206040518083038186803b15801561223457600080fd5b505afa158015612248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226c9190612c51565b9050600081136122845761227f81612f42565b61120b565b60009392505050565b804710156122d05760405162461bcd60e51b815260206004820152601060248201526f092dce6eaccccd2c6d2cadce8408aa8960831b60448201526064016101f4565b600080516020612fbc8339815191525460408051630d0e30db60e41b815290516001600160a01b039092169163d0e30db0918491600480830192600092919082900301818588803b15801561232457600080fd5b505af1158015612338573d6000803e3d6000fd5b5050505050612352600080516020612fbc83398151915290565b5460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561239e57600080fd5b505af11580156123b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e79190612e3e565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161243a9190612ee2565b6000604051808303816000865af19150503d8060008114612477576040519150601f19603f3d011682016040523d82523d6000602084013e61247c565b606091505b50915091508180156124a65750805115806124a65750808060200190518101906124a69190612e3e565b6124c25760405162461bcd60e51b81526004016101f490612efe565b505050505050565b7f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d05290565b6000811161250e5760405162461bcd60e51b81526004016101f490612f5f565b7f31ee2d7ab5f3365672e54f81f75b37a4d8b0f1085872bdb80349a1cb08ddb7116125376124ca565b6001015460408051918252602082018490520160405180910390a18061255b6124ca565b6001015550565b600081116125825760405162461bcd60e51b81526004016101f490612f5f565b61258a6124ca565b6001015481106125ed5760405162461bcd60e51b815260206004820152602860248201527f4175746f206c69717569646174696f6e207468726573686f6c642072617465206044820152676f766572666c6f7760c01b60648201526084016101f4565b7fd3353684d64f1c80498433d8407c96e6bbeb1ec88b6200ec97d2c910fdbd0da46126166124ca565b6002015460408051918252602082018490520160405180910390a18061263a6124ca565b6002015550565b600081116126615760405162461bcd60e51b81526004016101f490612f5f565b6126696124ca565b6002015481106126bb5760405162461bcd60e51b815260206004820152601f60248201527f4c69717569646174696f6e2070726963652072617465206f766572666c6f770060448201526064016101f4565b7f86aa422ec6af9520cb2f744924b12937e3db1aa5ce22050d0d519621e84090706126e46124ca565b5460408051918252602082018490520160405180910390a1806127056124ca565b5550565b600081116127295760405162461bcd60e51b81526004016101f490612f5f565b6127316124ca565b6002015481106127835760405162461bcd60e51b815260206004820152601c60248201527f4d696e20636f6c6c61746572616c2072617465206f766572666c6f770000000060448201526064016101f4565b7f8367b1759e8fdce5712002e7aa025339b99cf3c850b194ebdf37219f86b01ee66127ac6124ca565b6003015460408051918252602082018490520160405180910390a1806127d06124ca565b6003015550565b60008260000182815481106127ee576127ee612d34565b9060005260206000200154905092915050565b604080516000808252602082019092526001600160a01b03841690839060405161282b9190612ee2565b60006040518083038185875af1925050503d8060008114612868576040519150601f19603f3d011682016040523d82523d6000602084013e61286d565b606091505b50509050806117e75760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b60648201526084016101f4565b600081815260018301602052604081205461291157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610fd1565b506000610fd1565b60008181526001830160205260408120548015612a0257600061293d600183612cce565b855490915060009061295190600190612cce565b90508181146129b657600086600001828154811061297157612971612d34565b906000526020600020015490508087600001848154811061299457612994612d34565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806129c7576129c7612f85565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610fd1565b6000915050610fd1565b60008060408385031215612a1f57600080fd5b50508035926020909101359150565b600060208284031215612a4057600080fd5b5035919050565b6001600160a01b038116811461161557600080fd5b600060208284031215612a6e57600080fd5b813561120b81612a47565b600080600060608486031215612a8e57600080fd5b8335612a9981612a47565b95602085013595506040909401359392505050565b6020808252825182820181905260009190848201906040850190845b81811015612ae657835183529284019291840191600101612aca565b50909695505050505050565b60008060408385031215612b0557600080fd5b8235612b1081612a47565b946020939093013593505050565b600080600080600080600060e0888a031215612b3957600080fd5b8735612b4481612a47565b96506020880135612b5481612a47565b955060408801359450606088013593506080880135925060a0880135915060c0880135612b8081612a47565b8091505092959891949750929550565b60008060008060808587031215612ba657600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215612bd557600080fd5b823591506020830135612be781612a47565b809150509250929050565b60208082526017908201527f43757272656e6379206e6f742072656769737465726564000000000000000000604082015260600190565b6020808252600e908201526d125b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b600060208284031215612c6357600080fd5b5051919050565b6020808252602e908201527f4e6f7420656e6f75676820636f6c6c61746572616c20696e207468652073656c60408201526d65637465642063757272656e637960901b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082821015612ce057612ce0612cb8565b500390565b60208082526017908201527f4f6e6c7920416363657074656420436f6e747261637473000000000000000000604082015260600190565b60008219821115612d2f57612d2f612cb8565b500190565b634e487b7160e01b600052603260045260246000fd5b60005b83811015612d65578181015183820152602001612d4d565b838111156109465750506000910152565b60008151808452612d8e816020860160208601612d4a565b601f01601f19169290920160200192915050565b8281526040602082015260006108546040830184612d76565b600060208284031215612dcd57600080fd5b815161120b81612a47565b6000600019821415612dec57612dec612cb8565b5060010190565b634e487b7160e01b600052604160045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215612e5057600080fd5b8151801515811461120b57600080fd5b6000816000190483118215151615612e7a57612e7a612cb8565b500290565b600082612e9c57634e487b7160e01b600052601260045260246000fd5b500490565b600080600060608486031215612eb657600080fd5b8351925060208401519150604084015190509250925092565b60208152600061120b6020830184612d76565b60008251612ef4818460208701612d4a565b9190910192915050565b60208082526024908201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416040820152631253115160e21b606082015260800190565b6000600160ff1b821415612f5857612f58612cb8565b5060000390565b6020808252600c908201526b52617465206973207a65726f60a01b604082015260600190565b634e487b7160e01b600052603160045260246000fdfe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240187522ee63bb7da831844dcdb60f35e8cfa51225eeb4ed6734e421ed06f0d56805a264697066735822122015bbc84decc52d22ae5e60ec2a9ad79334f42cced417eec71fa24ab3c56c11e164736f6c63430008090033",
  "implementation": "0x3D50EEB26ed023Df78f9ed82915cd16b3575059C",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptedContracts()": {
        "details": "The contact name listed in this method is also needed to be listed `requiredContracts` method."
      },
      "addCollateral(address,bytes32,uint256)": {
        "details": "Adds collateral amount.",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "deposit(bytes32,uint256)": {
        "details": "Deposits funds by the caller into collateral.",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32"
        }
      },
      "depositEscrow(address,bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to be add into escrow",
          "_ccy": "Currency name in bytes32",
          "_payer": "Address of user making payment"
        }
      },
      "getCollateralAmount(address,bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "_0": "The deposited amount"
        }
      },
      "getCollateralAmountInETH(address,bytes32)": {
        "params": {
          "_ccy": "Specified currency",
          "_user": "User's address"
        },
        "returns": {
          "_0": "The deposited amount in ETH"
        }
      },
      "getCollateralParameters()": {
        "returns": {
          "autoLiquidationThresholdRate": " The rate used as the auto liquidation threshold",
          "liquidationPriceRate": "The rate used as the liquidation price",
          "marginCallThresholdRate": "The rate used as the margin call threshold",
          "minCollateralRate": "The rate used minima collateral"
        }
      },
      "getCoverage(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The rate of collateral used"
        }
      },
      "getTotalCollateralAmountInETH(address)": {
        "params": {
          "_user": "Address of collateral user"
        },
        "returns": {
          "_0": "The total deposited amount in ETH"
        }
      },
      "getUnusedCollateral(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The total amount of unused collateral"
        }
      },
      "getUsedCurrencies(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The currency names in bytes32"
        }
      },
      "getWithdrawableCollateral(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "Maximum amount of ETH that can be withdrawn"
        }
      },
      "initialize(address,address,uint256,uint256,uint256,uint256,address)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController.",
        "params": {
          "_WETH9": "The address of WETH",
          "_autoLiquidationThresholdRate": "The rate used as the auto liquidation threshold",
          "_liquidationPriceRate": "The rate used as the liquidation price",
          "_marginCallThresholdRate": "The rate used as the margin call threshold",
          "_minCollateralRate": "The rate used minima collateral",
          "_owner": "The address of the contract owner",
          "_resolver": "The address of the Address Resolver contract"
        }
      },
      "isCovered(address,bytes32,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_unsettledExp": "Additional exposure to lock into unsettled exposure",
          "_user": "User's address"
        },
        "returns": {
          "_0": "The boolean if the collateral has sufficient coverage or not"
        }
      },
      "isRegisteredCurrency(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The boolean if the currency has been registered or not"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeCollateral(address,bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to withdraw.",
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requiredContracts()": {
        "details": "The contract name list is in `./libraries/Contracts.sol`."
      },
      "setCollateralParameters(uint256,uint256,uint256,uint256)": {
        "params": {
          "_autoLiquidationThresholdRate": "Auto liquidation threshold rate",
          "_liquidationPriceRate": "Liquidation price rate",
          "_marginCallThresholdRate": "Margin call threshold ratio",
          "_minCollateralRate": "Minimal collateral rate"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to withdraw.",
          "_ccy": "Currency name in bytes32"
        }
      },
      "withdrawEscrow(address,bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to be removed from escrow",
          "_ccy": "Currency name in bytes32",
          "_receiver": "Address of user receiving payment"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptedContracts()": {
        "notice": "Returns contract names that can call this contract."
      },
      "depositEscrow(address,bytes32,uint256)": {
        "notice": "deposit funds in escrow."
      },
      "getCollateralAmount(address,bytes32)": {
        "notice": "Gets the amount deposited in the user's collateral."
      },
      "getCollateralAmountInETH(address,bytes32)": {
        "notice": "Gets the amount deposited in the user's collateral by converting it to ETH."
      },
      "getCollateralParameters()": {
        "notice": "Gets parameters related to collateral."
      },
      "getCoverage(address)": {
        "notice": "Gets the rate of collateral used."
      },
      "getTotalCollateralAmountInETH(address)": {
        "notice": "Gets the total amount deposited in the user's collateral in all currencies. by converting it to ETH."
      },
      "getUnusedCollateral(address)": {
        "notice": "Gets the total amount of unused collateral"
      },
      "getUsedCurrencies(address)": {
        "notice": "Gets the currencies that the user used as collateral."
      },
      "getWithdrawableCollateral(address)": {
        "notice": "Gets the maximum amount of ETH that can be withdrawn from user collateral."
      },
      "initialize(address,address,uint256,uint256,uint256,uint256,address)": {
        "notice": "Initializes the contract."
      },
      "isCovered(address,bytes32,uint256)": {
        "notice": "Gets if the collateral has enough coverage."
      },
      "isRegisteredCurrency(bytes32)": {
        "notice": "Gets if the currency has been registered"
      },
      "removeCollateral(address,bytes32,uint256)": {
        "notice": "Removes collateral amount."
      },
      "requiredContracts()": {
        "notice": "Returns the contract names used in this contract."
      },
      "setCollateralParameters(uint256,uint256,uint256,uint256)": {
        "notice": "Sets main collateral parameters this function solves the issue of frontrunning during parameters tuning.Triggers only be contract owner"
      },
      "withdraw(bytes32,uint256)": {
        "notice": "Withdraws funds by the caller from unused collateral."
      },
      "withdrawEscrow(address,bytes32,uint256)": {
        "notice": "Withdraw funds from escrow."
      }
    },
    "notice": "Implements the management of the token in each currency for users. This contract manages the following data related to tokens. - Deposited token amount as the collateral - Unsettled collateral amount used by order - Escrowed token amount added by lending orders - Parameters related to the collateral   - Margin Call Threshold Rate   - Auto Liquidation Threshold Rate   - Liquidation Price Rate   - Min Collateral Rate To address a currency as collateral, it must be registered using `registerCurrency` method in this contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 790,
        "contract": "contracts/TokenVault.sol:TokenVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 793,
        "contract": "contracts/TokenVault.sol:TokenVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}