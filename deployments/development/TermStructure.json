{
  "address": "0xd484d365Da7DA5716FED3F39b54C43433626B93a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numDays",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "product",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isSupported",
          "type": "bool"
        }
      ],
      "name": "ProductTermSupportUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numDays",
          "type": "uint256"
        }
      ],
      "name": "TermAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numDays",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isSupported",
          "type": "bool"
        }
      ],
      "name": "TermSupportUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numDays",
          "type": "uint256"
        }
      ],
      "name": "getDfFrac",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numDays",
          "type": "uint256"
        }
      ],
      "name": "getNumDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numDays",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_frequency",
          "type": "uint8"
        }
      ],
      "name": "getNumPayments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numDays",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_frequency",
          "type": "uint8"
        }
      ],
      "name": "getTerm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "numDays",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dfFrac",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPayments",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numDays",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_frequency",
          "type": "uint8"
        }
      ],
      "name": "getTermSchedule",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_product",
          "type": "bytes4"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "sort",
          "type": "bool"
        }
      ],
      "name": "getTermsForProductAndCcy",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numDays",
          "type": "uint256"
        },
        {
          "internalType": "bytes4",
          "name": "_product",
          "type": "bytes4"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "isSupportedTerm",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numDays",
          "type": "uint256"
        },
        {
          "internalType": "bytes4[]",
          "name": "_products",
          "type": "bytes4[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_currencies",
          "type": "bytes32[]"
        }
      ],
      "name": "supportTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numDays",
          "type": "uint256"
        },
        {
          "internalType": "bytes4",
          "name": "_product",
          "type": "bytes4"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_isSupported",
          "type": "bool"
        }
      ],
      "name": "updateTermSupport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x781a949db373bf78ffb2d286c901e19727301c61027e8f340d547213cb0128a0",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x1316EbB38d2c670B53473f20bd54FFd81Eff8696",
    "transactionIndex": 29,
    "gasUsed": "1780888",
    "logsBloom": "0x
    "blockHash": "0x84364c2eb425a66ab2c5c6105dbf3a0b1ab0adabe3f0a20b535569df78a64a3c",
    "transactionHash": "0x781a949db373bf78ffb2d286c901e19727301c61027e8f340d547213cb0128a0",
    "logs": [],
    "blockNumber": 11010205,
    "cumulativeGasUsed": "17190448",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "59521d43dda390ded85a5f23871f6cb8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"product\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"}],\"name\":\"ProductTermSupportUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numDays\",\"type\":\"uint256\"}],\"name\":\"TermAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"}],\"name\":\"TermSupportUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numDays\",\"type\":\"uint256\"}],\"name\":\"getDfFrac\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numDays\",\"type\":\"uint256\"}],\"name\":\"getNumDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numDays\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_frequency\",\"type\":\"uint8\"}],\"name\":\"getNumPayments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numDays\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_frequency\",\"type\":\"uint8\"}],\"name\":\"getTerm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfFrac\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPayments\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numDays\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_frequency\",\"type\":\"uint8\"}],\"name\":\"getTermSchedule\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_product\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"sort\",\"type\":\"bool\"}],\"name\":\"getTermsForProductAndCcy\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numDays\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"_product\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"isSupportedTerm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numDays\",\"type\":\"uint256\"},{\"internalType\":\"bytes4[]\",\"name\":\"_products\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_currencies\",\"type\":\"bytes32[]\"}],\"name\":\"supportTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numDays\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"_product\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isSupported\",\"type\":\"bool\"}],\"name\":\"updateTermSupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Term Structure contract is responsible for managing supported terms in Secured Finance Protocol per product and currency\",\"kind\":\"dev\",\"methods\":{\"acceptedContracts()\":{\"details\":\"Returns contract names that can call this contract.\"},\"getDfFrac(uint256)\":{\"details\":\"Triggers to get discount factor fractions.\",\"params\":{\"_numDays\":\"Number of days in term\"}},\"getNumDays(uint256)\":{\"details\":\"Triggers to get number of days for supported term. number of days follows ACT365 market convention\",\"params\":{\"_numDays\":\"Number of days in term\"}},\"getNumPayments(uint256,uint8)\":{\"details\":\"Triggers to get number of coupon payments.\",\"params\":{\"_frequency\":\"Payment frequency (like annual, semi-annual, etc.)\",\"_numDays\":\"Number of days in term\"}},\"getTerm(uint256,uint8)\":{\"details\":\"Triggers to get term structure.\",\"params\":{\"_numDays\":\"Number of days in term\"}},\"getTermSchedule(uint256,uint8)\":{\"details\":\"Triggers to get payment schedule for supported term according to the payment frequency number of days follows ACT365 market convention\",\"params\":{\"_frequency\":\"Payment frequency (like annual, semi-annual, etc.)\",\"_numDays\":\"Number of days in term\"}},\"getTermsForProductAndCcy(bytes4,bytes32,bool)\":{\"details\":\"Returns an array of supported terms for a specific product and currency\",\"params\":{\"_ccy\":\"Currency short identifier\",\"_product\":\"Product prefix\"}},\"initialize(address,address)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController\"},\"isSupportedTerm(uint256,bytes4,bytes32)\":{\"details\":\"Triggers to get if specified term is supported for a particular ccy and product.\",\"params\":{\"_ccy\":\"Currency short identifier\",\"_numDays\":\"Number of days in term\",\"_product\":\"Product prefix\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requiredContracts()\":{\"details\":\"Returns required contract names in this contract\"},\"supportTerm(uint256,bytes4[],bytes32[])\":{\"details\":\"Triggers to add new term into the protocol\",\"params\":{\"_currencies\":\"Array of currencies supporting this term\",\"_numDays\":\"Number of calendar days in a term\",\"_products\":\"Array of products supporting this term\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateTermSupport(uint256,bytes4,bytes32,bool)\":{\"details\":\"Triggers to update product and currency support for term\",\"params\":{\"_ccy\":\"Currency short identifier\",\"_isSupported\":\"Boolean whether term supported for specified `_product` and `_ccy`\",\"_numDays\":\"Number of days in term\",\"_product\":\"Product prefix\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,address)\":{\"notice\":\"Initializes the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TermStructure.sol\":\"TermStructure\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"},\"contracts/TermStructure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/ITermStructure.sol\\\";\\nimport \\\"./libraries/QuickSort.sol\\\";\\nimport \\\"./libraries/TermSchedule.sol\\\";\\nimport \\\"./mixins/MixinAddressResolver.sol\\\";\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"./utils/Proxyable.sol\\\";\\nimport {TermStructureStorage as Storage} from \\\"./storages/TermStructureStorage.sol\\\";\\n\\n/**\\n * @dev Term Structure contract is responsible for managing supported\\n * terms in Secured Finance Protocol per product and currency\\n *\\n */\\ncontract TermStructure is ITermStructure, MixinAddressResolver, Ownable, Proxyable {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using QuickSort for uint256[];\\n\\n    modifier existingTermOnly(uint256 _numDays) {\\n        require(Storage.slot().terms[_numDays] == _numDays, \\\"NON EXISTING TERM\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController\\n     */\\n    function initialize(address owner, address resolver) public initializer onlyProxy {\\n        _transferOwnership(owner);\\n        registerAddressResolver(resolver);\\n    }\\n\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](2);\\n        contracts[0] = Contracts.CURRENCY_CONTROLLER;\\n        contracts[1] = Contracts.PRODUCT_ADDRESS_RESOLVER;\\n    }\\n\\n    /**\\n     * @dev Triggers to add new term into the protocol\\n     * @param _numDays Number of calendar days in a term\\n     * @param _currencies Array of currencies supporting this term\\n     * @param _products Array of products supporting this term\\n     */\\n    function supportTerm(\\n        uint256 _numDays,\\n        bytes4[] memory _products,\\n        bytes32[] memory _currencies\\n    ) public override onlyOwner {\\n        Storage.slot().terms[_numDays] = _numDays;\\n\\n        if (_products.length > 0) {\\n            for (uint256 i = 0; i < _products.length; i++) {\\n                bytes4 product = _products[i];\\n\\n                for (uint256 j = 0; j < _currencies.length; j++) {\\n                    bytes32 ccy = _currencies[j];\\n                    updateTermSupport(_numDays, product, ccy, true);\\n                }\\n            }\\n        }\\n\\n        emit TermAdded(_numDays);\\n    }\\n\\n    /**\\n     * @dev Triggers to update product and currency support for term\\n     * @param _numDays Number of days in term\\n     * @param _product Product prefix\\n     * @param _ccy Currency short identifier\\n     * @param _isSupported Boolean whether term supported for specified `_product` and `_ccy`\\n     */\\n    function updateTermSupport(\\n        uint256 _numDays,\\n        bytes4 _product,\\n        bytes32 _ccy,\\n        bool _isSupported\\n    ) public override onlyOwner existingTermOnly(_numDays) {\\n        require(productAddressResolver().isSupportedProduct(_product), \\\"NON SUPPORTED PRODUCT\\\");\\n        require(currencyController().isSupportedCcy(_ccy), \\\"NON SUPPORTED CCY\\\");\\n\\n        if (_isSupported) {\\n            Storage.slot().termsForProductAndCcy[_product][_ccy].add(_numDays);\\n        } else {\\n            Storage.slot().termsForProductAndCcy[_product][_ccy].remove(_numDays);\\n        }\\n\\n        emit ProductTermSupportUpdated(_numDays, _product, _ccy, _isSupported);\\n    }\\n\\n    /**\\n     * @dev Triggers to get term structure.\\n     * @param _numDays Number of days in term\\n     */\\n    function getTerm(uint256 _numDays, uint8 _frequency)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256 numDays,\\n            uint256 dfFrac,\\n            uint256 numPayments\\n        )\\n    {\\n        numDays = Storage.slot().terms[_numDays];\\n        dfFrac = getDfFrac(_numDays);\\n        numPayments = getNumPayments(_numDays, _frequency);\\n    }\\n\\n    /**\\n     * @dev Triggers to get payment schedule for supported term according to the payment frequency\\n     * number of days follows ACT365 market convention\\n     * @param _numDays Number of days in term\\n     * @param _frequency Payment frequency (like annual, semi-annual, etc.)\\n     */\\n    function getTermSchedule(uint256 _numDays, uint8 _frequency)\\n        public\\n        pure\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return TermSchedule.getTermSchedule(_numDays, _frequency);\\n    }\\n\\n    /**\\n     * @dev Triggers to get number of days for supported term.\\n     * number of days follows ACT365 market convention\\n     * @param _numDays Number of days in term\\n     */\\n    function getNumDays(uint256 _numDays) public view override returns (uint256) {\\n        return Storage.slot().terms[_numDays];\\n    }\\n\\n    /**\\n     * @dev Triggers to get discount factor fractions.\\n     * @param _numDays Number of days in term\\n     */\\n    function getDfFrac(uint256 _numDays) public pure override returns (uint256) {\\n        return TermSchedule.getDfFrac(_numDays);\\n    }\\n\\n    /**\\n     * @dev Triggers to get number of coupon payments.\\n     * @param _numDays Number of days in term\\n     * @param _frequency Payment frequency (like annual, semi-annual, etc.)\\n     */\\n    function getNumPayments(uint256 _numDays, uint8 _frequency)\\n        public\\n        pure\\n        override\\n        returns (uint256)\\n    {\\n        return TermSchedule.getNumPayments(_numDays, _frequency);\\n    }\\n\\n    /**\\n     * @dev Triggers to get if specified term is supported for a particular ccy and product.\\n     * @param _numDays Number of days in term\\n     * @param _product Product prefix\\n     * @param _ccy Currency short identifier\\n     */\\n    function isSupportedTerm(\\n        uint256 _numDays,\\n        bytes4 _product,\\n        bytes32 _ccy\\n    ) public view override returns (bool) {\\n        EnumerableSet.UintSet storage set = Storage.slot().termsForProductAndCcy[_product][_ccy];\\n        return set.contains(_numDays);\\n    }\\n\\n    /**\\n     * @dev Returns an array of supported terms for a specific product and currency\\n     * @param _product Product prefix\\n     * @param _ccy Currency short identifier\\n     */\\n    function getTermsForProductAndCcy(\\n        bytes4 _product,\\n        bytes32 _ccy,\\n        bool sort\\n    ) public view override returns (uint256[] memory) {\\n        EnumerableSet.UintSet storage set = Storage.slot().termsForProductAndCcy[_product][_ccy];\\n        uint256 numTerms = set.length();\\n        uint256[] memory supportedTerms = new uint256[](numTerms);\\n\\n        for (uint256 i = 0; i < numTerms; i++) {\\n            uint256 term = set.at(i);\\n            supportedTerms[i] = term;\\n        }\\n\\n        if (sort) {\\n            supportedTerms = supportedTerms.sort();\\n        }\\n\\n        return supportedTerms;\\n    }\\n}\\n\",\"keccak256\":\"0xe0d050a06412a1788e3e66f8c34e2ba7982d97ea027e7013c76e32b6c439add5\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/interfaces/ICloseOutNetting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICloseOutNetting {\\n    event AddCloseOutPayments(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event RemoveCloseOutPayments(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event SettleCloseOut(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 netPayment,\\n        bytes32 txHash\\n    );\\n    event VerifyCloseOut(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 netPayment,\\n        bytes32 txHash\\n    );\\n\\n    function addPayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) external;\\n\\n    function checkDefault(address _party) external view returns (bool);\\n\\n    function removePayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6bbe6c9de500443c72cde8832c0ff9c921c6f38ace09523d3a1769f6e855830e\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralAggregatorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICollateralAggregator {\\n    event Register(address indexed addr);\\n    event Release(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    );\\n    event Liquidate(address indexed from, address indexed to, bytes32 ccy, uint256 amount);\\n    event ReleaseUnsettled(address indexed party, bytes32 ccy, uint256 amount);\\n    event SettleCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event UpdatePV(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    );\\n    event UseCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    );\\n    event UseUnsettledCollateral(address indexed party, bytes32 ccy, uint256 amount);\\n\\n    function checkRegisteredUser(address addr) external view returns (bool);\\n\\n    function getCcyExposures(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getCoverage(address _party0, address _party1) external view returns (uint256, uint256);\\n\\n    function getExposedCurrencies(address partyA, address partyB)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getMaxCollateralBookWidthdraw(address _user)\\n        external\\n        view\\n        returns (uint256 maxWithdraw);\\n\\n    function getMaxCollateralWidthdraw(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getNetAndTotalPV(address _party0, address _party1)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getRebalanceCollateralAmounts(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getTotalUnsettledExp(address _user) external view returns (uint256);\\n\\n    function getUnsettledCoverage(address _user) external view returns (uint256 coverage);\\n\\n    function isCovered(\\n        address _party0,\\n        address _party1,\\n        bytes32 _ccy,\\n        uint256 _party0PV,\\n        uint256 _party1PV,\\n        bool _isSettled\\n    ) external view returns (bool, bool);\\n\\n    function isCoveredUnsettled(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) external view returns (bool);\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        uint256 liquidationInETH\\n    ) external;\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        bytes32 ccy,\\n        uint256 liquidationAmount,\\n        uint256 pv,\\n        bool isSettled\\n    ) external;\\n\\n    function register() external;\\n\\n    function register(string[] memory _addresses, uint256[] memory _chainIds) external;\\n\\n    function releaseCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function releaseUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function settleCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external;\\n\\n    function updatePV(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    ) external;\\n\\n    function useCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function useUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function getUnsettledCollateral(address user, bytes32 ccy) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6ce0f77af603bba3166a03eebf4b1679a78491c64cce912331765889583a4369\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICollateralVault {\\n    event Deposit(address user, bytes32 ccy, uint256 amount);\\n    event PositionDeposit(address user, address counterparty, bytes32 ccy, uint256 amount);\\n    event RebalanceBetween(\\n        address user,\\n        address fromCounterparty,\\n        address toCounterparty,\\n        bytes32 ccy,\\n        uint256 amount\\n    );\\n    event RebalanceFrom(address user, address counterparty, bytes32 ccy, uint256 amount);\\n    event RebalanceTo(address user, address counterparty, bytes32 ccy, uint256 amount);\\n    event Withdraw(address from, bytes32 ccy, uint256 amount);\\n    event PositionWithdraw(address from, address counterparty, bytes32 ccy, uint256 amount);\\n    event Liquidate(address from, address to, bytes32 ccy, uint256 amount);\\n    event LiquidateIndependent(address from, address to, bytes32 ccy, uint256 amount);\\n\\n    function deposit(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external;\\n\\n    function deposit(bytes32 _ccy, uint256 _amount) external payable;\\n\\n    function getIndependentCollateral(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getIndependentCollateralInETH(address _user, bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLockedCollateral(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getLockedCollateralInETH(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getLockedCollateral(\\n        address _partyA,\\n        address _partyB,\\n        bytes32 _ccy\\n    ) external view returns (uint256, uint256);\\n\\n    function getLockedCollateralInETH(\\n        address _partyA,\\n        address _partyB,\\n        bytes32 _ccy\\n    ) external view returns (uint256, uint256);\\n\\n    function liquidate(\\n        address _from,\\n        address _to,\\n        uint256 _liquidationTarget\\n    ) external returns (bool);\\n\\n    function rebalanceCollateral(\\n        address _party0,\\n        address _party1,\\n        uint256 _rebalanceTarget,\\n        bool isRebalanceFrom\\n    ) external returns (bool);\\n\\n    function rebalanceBetween(\\n        address _user,\\n        address _fromParty,\\n        address _toParty,\\n        bytes32 _ccy,\\n        uint256 _amountETH\\n    ) external returns (uint256);\\n\\n    function withdraw(bytes32 _ccy, uint256 _amount) external;\\n\\n    function withdrawFrom(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external;\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getUsedCurrencies(address party0, address party1)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getTotalIndependentCollateralInETH(address _party) external view returns (uint256);\\n\\n    function getTotalLockedCollateralInETH(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x05a973a84165750802bf97f2c889467191ae0a99fb50221149f46b9df35bdd6e\",\"license\":\"MIT\"},\"contracts/interfaces/ICrosschainAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICrosschainAddressResolver {\\n    event UpdateAddress(address _user, uint256 _chainId, string _address);\\n\\n    /**\\n     * @dev Trigers to register multiple cross-chain addresses per chainId for user\\n     * @param _user Secured Finance user ETH address\\n     * @param _chainIds Array of chain ID number\\n     * @param _addresses Array of the target blockchain addresses\\n     *\\n     * @notice This function triggers by the Collateral Aggregator while user is registered in a system\\n     *\\n     */\\n    function updateAddresses(\\n        address _user,\\n        uint256[] memory _chainIds,\\n        string[] memory _addresses\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to register cross-chain address per chainId by user\\n     * @param _chainId Chain ID number\\n     * @param _address Target blockchain address\\n     *\\n     */\\n    function updateAddress(uint256 _chainId, string memory _address) external;\\n\\n    /**\\n     * @dev Trigers to register cross-chain address per chainId by user\\n     * @param _user Secured Finance user ETH address\\n     * @param _chainId Chain ID number\\n     * @param _address Target blockchain address\\n     *\\n     */\\n    function updateAddress(\\n        address _user,\\n        uint256 _chainId,\\n        string memory _address\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to get target blockchain address for a specific user.\\n     * @param _user Ethereum address of the Secured Finance user\\n     * @param _user Chain ID number\\n     */\\n    function getUserAddress(address _user, uint256 _chainId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ef89efa2bd508258da18e2ca2699cb07847d75d6df996cde56b8f6d524d7db8\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CcyAdded(bytes32 indexed ccy, string name, uint16 chainId, uint256 haircut);\\n    event CcyCollateralUpdate(bytes32 indexed ccy, bool isCollateral);\\n    event CcySupportUpdate(bytes32 indexed ccy, bool isSupported);\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n    event MinMarginUpdated(bytes32 indexed ccy, uint256 minMargin);\\n    event PriceFeedAdded(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n    event PriceFeedRemoved(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n\\n    function convertBulkToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH) external view returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256);\\n\\n    function getCurrencies(bytes32) external view returns (ProtocolTypes.Currency memory);\\n\\n    function getEthDecimals(bytes32) external view returns (uint8);\\n\\n    function getUsdDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getMinMargin(bytes32 _ccy) external view returns (uint256);\\n\\n    function getChainId(bytes32 _ccy) external view returns (uint16);\\n\\n    function isCollateral(bytes32) external view returns (bool);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        uint16 _chainId,\\n        address _ethPriceFeed,\\n        uint256 _haircut,\\n        address _tokenAddress\\n    ) external;\\n\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function updateCollateralSupport(bytes32 _ccy, bool _isSupported) external;\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported) external;\\n\\n    function updateMinMargin(bytes32 _ccy, uint256 _minMargin) external;\\n\\n    function getTokenAddresses(bytes32) external view returns (address);\\n}\\n\",\"keccak256\":\"0x0bad90929934b6a43200ae276697a9e428d47b119120ea81208778ced9abbe76\",\"license\":\"MIT\"},\"contracts/interfaces/IExternalAdapterTxResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IExternalAdapterTxResponse {\\n    struct FulfillData {\\n        string from;\\n        string to;\\n        uint256 value;\\n        uint256 timestamp;\\n        string txHash;\\n    }\\n}\\n\",\"keccak256\":\"0x2fde36d406ead00758aeccdf58fd8be1b32cf2fd3fd2061824d538bd06d4ab4c\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\nstruct Order {\\n    bytes32 ccy;\\n    uint256 term;\\n    ProtocolTypes.Side side;\\n    uint256 amount;\\n    uint256 rate;\\n}\\n\\ninterface ILendingMarketController {\\n    event LendingMarketCreated(bytes32 ccy, uint256 term, address indexed marketAddr);\\n    event LendingMarketsPaused(bytes32 ccy);\\n    event LendingMarketsUnpaused(bytes32 ccy);\\n\\n    function deployLendingMarket(bytes32 _ccy, uint256 _term) external returns (address market);\\n\\n    function getBorrowRatesForCcy(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getDiscountFactorsForCcy(bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256[] memory, uint256[] memory);\\n\\n    function getLendRatesForCcy(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getMidRatesForCcy(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getLendingMarket(bytes32, uint256) external view returns (address);\\n\\n    function pauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function placeBulkOrders(Order[] memory orders) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function getSupportedTerms(bytes32 _ccy) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x8c2a321d93fb14a1878ffb332e03d8201c4998ecca88b8862347855787ebf49c\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ILiquidations {\\n    event DealAddedToLiquidationQueue(address party0, address party1, bytes32 dealId);\\n    event DealRemovedFromLiquidationQueue(address party0, address party1, bytes32 dealId);\\n    event LiquidationAgentAdded(address indexed liquidationAgent);\\n    event LiquidationAgentRemoved(address indexed liquidationAgent);\\n    event OffsetUpdated(uint256 oldOffset, uint256 newOffset);\\n\\n    function addDealToLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external;\\n\\n    function addLiquidationAgent(address _liquidationAgent) external;\\n\\n    function liquidateDeals(\\n        address party0,\\n        address party1,\\n        bytes32[] memory dealIds\\n    ) external;\\n\\n    function liquidateDeals(address party0, address party1) external;\\n\\n    function getOffset() external view returns (uint256);\\n\\n    function removeDealFromLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external;\\n\\n    function removeLiquidationAgent(address _liquidationAgent) external;\\n\\n    function updateLiquidationOffset(uint256 _offset) external;\\n}\\n\",\"keccak256\":\"0x4e2784b0014ff688a60c4628cc1ebab63ca0aa40aa9949dbde6d53c69dbe3746\",\"license\":\"MIT\"},\"contracts/interfaces/IMarkToMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IMarkToMarket {\\n    function updatePV(bytes32 dealId) external;\\n\\n    function updatePVs(bytes32[] memory dealIds) external;\\n}\\n\",\"keccak256\":\"0xb100f8c173fda11136c5579306d99065752bb797bff6ffe91c64eee228ae2df9\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct Slot {\\n    uint256 totalPayment0;\\n    uint256 totalPayment1;\\n    uint256 netPayment;\\n    bool flipped;\\n    bytes32 paymentProof;\\n    address verificationParty;\\n    bool isSettled;\\n}\\n\\ninterface IPaymentAggregator {\\n    event RegisterPayment(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event VerifyPayment(\\n        address indexed verifier,\\n        address indexed counterparty,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment,\\n        bytes32 settlementId\\n    );\\n    event SettlePayment(\\n        address indexed verifier,\\n        address indexed counterparty,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        bytes32 settlementId\\n    );\\n    event RemovePayment(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n\\n    function registerPayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 dealId,\\n        uint256[] memory timestamps,\\n        uint256[] memory payments0,\\n        uint256[] memory payments1\\n    ) external;\\n\\n    function removePayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 dealId,\\n        uint256[] calldata timestamps,\\n        uint256[] calldata payments0,\\n        uint256[] calldata payments1\\n    ) external;\\n\\n    function verifyPayment(\\n        address verifier,\\n        address counterparty,\\n        bytes32 ccy,\\n        uint256 timestamp,\\n        uint256 payment,\\n        bytes32 settlementId\\n    ) external;\\n\\n    function isSettled(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 timestamp\\n    ) external view returns (bool status);\\n\\n    function getDealsFromSlot(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 slotPosition\\n    ) external view returns (bytes32[] memory);\\n\\n    // function getTimeSlotByDate(\\n    //     address party0,\\n    //     address party1,\\n    //     bytes32 ccy,\\n    //     uint256 year,\\n    //     uint256 month,\\n    //     uint256 day\\n    // ) external view returns (Slot memory timeSlot);\\n\\n    // function getTimeSlotBySlotId(\\n    //     address party0,\\n    //     address party1,\\n    //     bytes32 ccy,\\n    //     bytes32 slot\\n    // ) external view returns (Slot memory timeSlot);\\n\\n    function checkSettlementWindow(uint256 targetTime) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x626f4bb7d28a476b21c2bc18278a091f134fbd98a6e06e586cd63180184518f4\",\"license\":\"MIT\"},\"contracts/interfaces/IProductAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IProductAddressResolver {\\n    event RegisterProduct(bytes4 prefix, address indexed product, address indexed controller);\\n\\n    /**\\n     * @dev Triggers to register new product type in a address resolver\\n     * @param _prefix Bytes4 prefix for product type\\n     * @param _contract Product contract address\\n     * @param _controller Market controller address\\n     *\\n     * @notice Triggers only be contract owner\\n     * @notice Reverts on saving contract which is not supporting a common interface\\n     */\\n    function registerProduct(\\n        bytes4 _prefix,\\n        address _contract,\\n        address _controller\\n    ) external;\\n\\n    /**\\n     * @dev Triggers to register several product types in a address resolver\\n     * @param _prefixes Array of Bytes4 prefixes for each product type\\n     * @param _contracts Array of smart contract addresses for each product\\n     * @param _controllers Array of market controller addresses\\n     *\\n     * @notice Triggers only be contract owner\\n     * @notice Reverts on saving contract which is not supporting common interface\\n     */\\n    function registerProducts(\\n        bytes4[] calldata _prefixes,\\n        address[] calldata _contracts,\\n        address[] calldata _controllers\\n    ) external;\\n\\n    /**\\n     * @dev Triggers to get product address by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContract(bytes4 _prefix) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to get product addresses\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContracts() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Triggers to get product address by deal id\\n     * @param _dealId Product deal idenfitier\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContractByDealId(bytes32 _dealId) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to get market controller address by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     * @notice To work with the contract this address should be wrapped around IYieldCurve interface\\n     */\\n    function getControllerContract(bytes4 _prefix) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to get market controller address by deal id\\n     * @param _dealId Product deal idenfitier\\n     * @notice To work with the contract this address should be wrapped around IYieldCurve interface\\n     */\\n    function getControllerContractByDealId(bytes32 _dealId) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product is supported by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     */\\n    function isSupportedProduct(bytes4 _prefix) external view returns (bool);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product is supported by deal id.\\n     * @param _dealId Product deal idenfitier\\n     */\\n    function isSupportedProductByDealId(bytes32 _dealId) external view returns (bool);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product contract is registered.\\n     * @param _product Product contract address\\n     */\\n    function isRegisteredProductContract(address _product) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x44855f57913172a86e203a89d7713efe1ec39351a0830b0f35fac9ffa24ec770\",\"license\":\"MIT\"},\"contracts/interfaces/ISettlementEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.3. SEE SOURCE BELOW. !!\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IExternalAdapterTxResponse.sol\\\";\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ISettlementEngine {\\n    event CrosschainSettlementRequested(\\n        address payer,\\n        address receiver,\\n        uint16 chainId,\\n        uint256 timestamp,\\n        string txHash,\\n        bytes32 requestId\\n    );\\n    event CrosschainSettlementRequestFulfilled(\\n        string payer,\\n        string receiver,\\n        uint16 chainId,\\n        uint256 amount,\\n        uint256 timestamp,\\n        string txHash,\\n        bytes32 settlementId\\n    );\\n    event ExternalAdapterAdded(address indexed adapter, bytes32 ccy);\\n\\n    function addExternalAdapter(address _adapter, bytes32 _ccy) external;\\n\\n    function getExternalAdapters(bytes32) external view returns (address);\\n\\n    function fulfillSettlementRequest(\\n        bytes32 _requestId,\\n        IExternalAdapterTxResponse.FulfillData calldata _txData,\\n        bytes32 _ccy\\n    ) external;\\n\\n    function getVersion() external view returns (uint16);\\n\\n    function getSettlementRequests(bytes32)\\n        external\\n        view\\n        returns (ProtocolTypes.SettlementRequest memory);\\n\\n    function verifyPayment(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _payment,\\n        uint256 _timestamp,\\n        string calldata _txHash\\n    ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3888a41e40b8eb2cebf8557436b0f09286dfaeb08a3762a33c0a6ae0521f67a3\",\"license\":\"MIT\"},\"contracts/interfaces/ITermStructure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ITermStructure {\\n    event TermAdded(uint256 numDays);\\n    event ProductTermSupportUpdated(\\n        uint256 numDays,\\n        bytes4 product,\\n        bytes32 _ccy,\\n        bool isSupported\\n    );\\n    event TermSupportUpdated(uint256 numDays, bool isSupported);\\n\\n    function getDfFrac(uint256 _numDays) external view returns (uint256);\\n\\n    function getNumDays(uint256 _numDays) external view returns (uint256);\\n\\n    function getNumPayments(uint256 _numDays, uint8 frequency) external view returns (uint256);\\n\\n    function getTerm(uint256 _numDays, uint8 frequency)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getTermSchedule(uint256 _numDays, uint8 frequency)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isSupportedTerm(\\n        uint256 _numDays,\\n        bytes4 _product,\\n        bytes32 _ccy\\n    ) external view returns (bool);\\n\\n    function supportTerm(\\n        uint256 _numDays,\\n        bytes4[] memory _products,\\n        bytes32[] memory _currencies\\n    ) external;\\n\\n    function updateTermSupport(\\n        uint256 _numDays,\\n        bytes4 _product,\\n        bytes32 _ccy,\\n        bool _isSupported\\n    ) external;\\n\\n    function getTermsForProductAndCcy(\\n        bytes4 _product,\\n        bytes32 _ccy,\\n        bool sort\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x8509c4f927878626ee8cb73d0fb2daa0cf0a7c9869bb6241ccc180d0854544f4\",\"license\":\"MIT\"},\"contracts/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant CLOSE_OUT_NETTING = \\\"CloseOutNetting\\\";\\n    bytes32 internal constant COLLATERAL_AGGREGATOR = \\\"CollateralAggregator\\\";\\n    bytes32 internal constant COLLATERAL_VAULT = \\\"CollateralVault\\\";\\n    bytes32 internal constant CROSSCHAIN_ADDRESS_RESOLVER = \\\"CrosschainAddressResolver\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant LIQUIDATIONS = \\\"Liquidations\\\";\\n    bytes32 internal constant MARK_TO_MARKET = \\\"MarkToMarket\\\";\\n    bytes32 internal constant PAYMENT_AGGREGATOR = \\\"PaymentAggregator\\\";\\n    bytes32 internal constant PRODUCT_ADDRESS_RESOLVER = \\\"ProductAddressResolver\\\";\\n    bytes32 internal constant SETTLEMENT_ENGINE = \\\"SettlementEngine\\\";\\n    bytes32 internal constant TERM_STRUCTURE = \\\"TermStructure\\\";\\n}\\n\",\"keccak256\":\"0x939f50a87aa51db235c78c3c224edc9123271a5b44974e13557e4590958e83df\",\"license\":\"MIT\"},\"contracts/libraries/QuickSort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary QuickSort {\\n    function sort(uint256[] memory data) public pure returns (uint256[] memory) {\\n        quickSort(data, int256(0), int256(data.length - 1));\\n        return data;\\n    }\\n\\n    function quickSort(\\n        uint256[] memory arr,\\n        int256 left,\\n        int256 right\\n    ) internal pure {\\n        int256 i = left;\\n        int256 j = right;\\n        if (i == j) return;\\n        uint256 pivot = arr[uint256(left + (right - left) / 2)];\\n        while (i <= j) {\\n            while (arr[uint256(i)] < pivot) i++;\\n            while (pivot < arr[uint256(j)]) j--;\\n            if (i <= j) {\\n                (arr[uint256(i)], arr[uint256(j)]) = (arr[uint256(j)], arr[uint256(i)]);\\n                i++;\\n                j--;\\n            }\\n        }\\n        if (left < j) quickSort(arr, left, j);\\n        if (i < right) quickSort(arr, i, right);\\n    }\\n}\\n\",\"keccak256\":\"0x2cce94db4f423d70543c79888f77ed57fad6e6638e6a1d1399daabb99676643a\",\"license\":\"MIT\"},\"contracts/libraries/TermSchedule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary TermSchedule {\\n    enum PaymentFrequency {\\n        ANNUAL,\\n        SEMI_ANNUAL,\\n        QUARTERLY,\\n        MONTHLY,\\n        FORWARD\\n    }\\n\\n    /**\\n     * @dev Triggers to get payment schedule for supported term according to the payment frequency\\n     * number of days follows ACT365 market convention\\n     * @param _numDays Number of days in term\\n     * @param _frequency Payment frequency (like annual, semi-annual, etc.)\\n     */\\n    function getTermSchedule(uint256 _numDays, uint8 _frequency)\\n        internal\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        if (PaymentFrequency(_frequency) == PaymentFrequency.ANNUAL) {\\n            if (_numDays >= 365) {\\n                uint256 numYears = _numDays / 365;\\n                uint256[] memory paymentSchedule = new uint256[](numYears);\\n\\n                for (uint256 i = 0; i < numYears; i++) {\\n                    uint256 j = i + 1;\\n                    paymentSchedule[i] = j * 365;\\n                }\\n\\n                return paymentSchedule;\\n            } else if (_numDays > 0) {\\n                uint256[] memory paymentSchedule = new uint256[](1);\\n                paymentSchedule[0] = _numDays;\\n\\n                return paymentSchedule;\\n            }\\n        } else if (PaymentFrequency(_frequency) == PaymentFrequency.SEMI_ANNUAL) {\\n            if (_numDays >= 180) {\\n                uint256 numHalfYears = _numDays / 180;\\n                uint256[] memory paymentSchedule = new uint256[](numHalfYears);\\n\\n                for (uint256 i = 0; i < numHalfYears; i++) {\\n                    uint256 j = i + 1;\\n                    paymentSchedule[i] = j * 180;\\n                }\\n\\n                return paymentSchedule;\\n            } else if (_numDays > 0) {\\n                uint256[] memory paymentSchedule = new uint256[](1);\\n                paymentSchedule[0] = _numDays;\\n\\n                return paymentSchedule;\\n            }\\n        } else if (PaymentFrequency(_frequency) == PaymentFrequency.QUARTERLY) {\\n            if (_numDays >= 90) {\\n                uint256 numQuarters = _numDays / 90;\\n                uint256[] memory paymentSchedule = new uint256[](numQuarters);\\n\\n                for (uint256 i = 0; i < numQuarters; i++) {\\n                    uint256 j = i + 1;\\n                    paymentSchedule[i] = j * 90;\\n                }\\n\\n                return paymentSchedule;\\n            } else if (_numDays > 0) {\\n                uint256[] memory paymentSchedule = new uint256[](1);\\n                paymentSchedule[0] = _numDays;\\n\\n                return paymentSchedule;\\n            }\\n        } else if (PaymentFrequency(_frequency) == PaymentFrequency.MONTHLY) {\\n            if (_numDays >= 30) {\\n                uint256 numMonths = _numDays / 30;\\n                uint256[] memory paymentSchedule = new uint256[](numMonths);\\n\\n                for (uint256 i = 0; i < numMonths; i++) {\\n                    uint256 j = i + 1;\\n                    paymentSchedule[i] = j * 30;\\n                }\\n\\n                return paymentSchedule;\\n            } else if (_numDays > 0) {\\n                uint256[] memory paymentSchedule = new uint256[](1);\\n                paymentSchedule[0] = _numDays;\\n\\n                return paymentSchedule;\\n            }\\n        } else if (PaymentFrequency(_frequency) == PaymentFrequency.FORWARD) {\\n            uint256[] memory paymentSchedule = new uint256[](1);\\n            paymentSchedule[0] = _numDays;\\n\\n            return paymentSchedule;\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers to get discount factor fractions.\\n     * @param _numDays Number of days in term\\n     */\\n    function getDfFrac(uint256 _numDays) internal pure returns (uint256) {\\n        if (_numDays >= 365) {\\n            return 10000;\\n        } else if (_numDays < 365) {\\n            uint256 sectors = uint256(360) / _numDays;\\n            return uint256(10000) / sectors;\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers to get number of coupon payments.\\n     * @param _numDays Number of days in term\\n     * @param _frequency Payment frequency (like annual, semi-annual, etc.)\\n     */\\n    function getNumPayments(uint256 _numDays, uint8 _frequency) internal pure returns (uint256) {\\n        if (PaymentFrequency(_frequency) == PaymentFrequency.ANNUAL) {\\n            if (_numDays >= 365) {\\n                return _numDays / 365;\\n            } else if (_numDays > 0) {\\n                return 1;\\n            } else return 0;\\n        } else if (PaymentFrequency(_frequency) == PaymentFrequency.SEMI_ANNUAL) {\\n            if (_numDays >= 365) {\\n                uint256 _monthConvention = _numDays - (_numDays / 365) * 5;\\n                return _monthConvention / 180;\\n            } else if (_numDays >= 180) {\\n                return _numDays / 180;\\n            } else if (_numDays > 0) {\\n                return 1;\\n            } else return 0;\\n        } else if (PaymentFrequency(_frequency) == PaymentFrequency.QUARTERLY) {\\n            if (_numDays >= 365) {\\n                uint256 _monthConvention = _numDays - (_numDays / 365) * 5;\\n                return _monthConvention / 90;\\n            } else if (_numDays >= 90) {\\n                return _numDays / 90;\\n            } else if (_numDays > 0) {\\n                return 1;\\n            } else return 0;\\n        } else if (PaymentFrequency(_frequency) == PaymentFrequency.MONTHLY) {\\n            if (_numDays >= 365) {\\n                uint256 _monthConvention = _numDays - (_numDays / 365) * 5;\\n                return _monthConvention / 30;\\n            } else if (_numDays >= 30) {\\n                return _numDays / 30;\\n            } else if (_numDays > 0) {\\n                return 1;\\n            } else return 0;\\n        } else if (PaymentFrequency(_frequency) == PaymentFrequency.FORWARD) {\\n            return 1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0bae3e1041ff1733eb3c07f4861debd4951c40ae687e80b441d627f51f88417b\",\"license\":\"MIT\"},\"contracts/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../libraries/Contracts.sol\\\";\\nimport \\\"../interfaces/IAddressResolver.sol\\\";\\nimport \\\"../interfaces/ICloseOutNetting.sol\\\";\\nimport \\\"../interfaces/ICollateralAggregatorV2.sol\\\";\\nimport \\\"../interfaces/ICollateralVault.sol\\\";\\nimport \\\"../interfaces/ICrosschainAddressResolver.sol\\\";\\nimport \\\"../interfaces/ICurrencyController.sol\\\";\\nimport \\\"../interfaces/IMarkToMarket.sol\\\";\\nimport \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport \\\"../interfaces/ILiquidations.sol\\\";\\nimport \\\"../interfaces/IPaymentAggregator.sol\\\";\\nimport \\\"../interfaces/IProductAddressResolver.sol\\\";\\nimport \\\"../interfaces/ISettlementEngine.sol\\\";\\nimport \\\"../interfaces/ITermStructure.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    IAddressResolver public resolver;\\n\\n    mapping(bytes32 => address) private addressCache;\\n\\n    modifier onlyAcceptedContracts() {\\n        require(isAcceptedContract(msg.sender), \\\"Only Accepted Contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns required contract names in this contract\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @dev Returns contract names that can call this contract.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        require(address(resolver) == address(0), \\\"resolver registered already\\\");\\n        resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function closeOutNetting() internal view returns (ICloseOutNetting) {\\n        return ICloseOutNetting(getAddress(Contracts.CLOSE_OUT_NETTING));\\n    }\\n\\n    function collateralAggregator() internal view returns (ICollateralAggregator) {\\n        return ICollateralAggregator(getAddress(Contracts.COLLATERAL_AGGREGATOR));\\n    }\\n\\n    function collateralVault() internal view returns (ICollateralVault) {\\n        return ICollateralVault(getAddress(Contracts.COLLATERAL_VAULT));\\n    }\\n\\n    function crosschainAddressResolver() internal view returns (ICrosschainAddressResolver) {\\n        return ICrosschainAddressResolver(getAddress(Contracts.CROSSCHAIN_ADDRESS_RESOLVER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function markToMarket() internal view returns (IMarkToMarket) {\\n        return IMarkToMarket(getAddress(Contracts.MARK_TO_MARKET));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function liquidations() internal view returns (ILiquidations) {\\n        return ILiquidations(getAddress(Contracts.LIQUIDATIONS));\\n    }\\n\\n    function paymentAggregator() internal view returns (IPaymentAggregator) {\\n        return IPaymentAggregator(getAddress(Contracts.PAYMENT_AGGREGATOR));\\n    }\\n\\n    function productAddressResolver() internal view returns (IProductAddressResolver) {\\n        return IProductAddressResolver(getAddress(Contracts.PRODUCT_ADDRESS_RESOLVER));\\n    }\\n\\n    function settlementEngine() internal view returns (ISettlementEngine) {\\n        return ISettlementEngine(getAddress(Contracts.SETTLEMENT_ENGINE));\\n    }\\n\\n    function termStructure() internal view returns (ITermStructure) {\\n        return ITermStructure(getAddress(Contracts.TERM_STRUCTURE));\\n    }\\n}\\n\",\"keccak256\":\"0xa11e12f5ac8a1710ad3f16fb7d867e615ed13dd98324eea2f7eb36c00b21c2fb\",\"license\":\"MIT\"},\"contracts/storages/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary OwnableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.ownable\\\");\\n\\n    struct Storage {\\n        address owner;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ef8bfa06947cdb63d47248ad074ac42a1b1ba828a2c97e42486a5dbb2c03e1d\",\"license\":\"MIT\"},\"contracts/storages/TermStructureStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\nlibrary TermStructureStorage {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.termStructure\\\");\\n\\n    struct Storage {\\n        mapping(uint256 => uint256) terms;\\n        mapping(bytes4 => mapping(bytes32 => EnumerableSet.UintSet)) termsForProductAndCcy;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f4294fc5583679180847d486951db02e501b7de6338e1db687c45f64935ac79\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant BP = 10000; // basis point\\n    uint256 public constant PCT = 10000; // percentage point in basis\\n    uint256 public constant PENALTYLEVEL = 1000; // 10% settlement failure penalty\\n    uint256 public constant MKTMAKELEVEL = 2000; // 20% for market making\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Loan common types\\n    enum LoanState {\\n        REGISTERED,\\n        WORKING,\\n        DUE,\\n        PAST_DUE,\\n        CLOSED,\\n        TERMINATED\\n    }\\n    enum DFTERM {\\n        _3m,\\n        _6m,\\n        _1y,\\n        _2y,\\n        _3y,\\n        _4y,\\n        _5y\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n\\n    // FXMarket common types\\n    enum CcyPair {\\n        FILETH,\\n        FILUSDC,\\n        ETHUSDC,\\n        BTCUSDC,\\n        BTCETH,\\n        BTCFIL\\n    }\\n    enum FXSide {\\n        BID,\\n        OFFER\\n    }\\n\\n    enum PaymentFrequency {\\n        ANNUAL,\\n        SEMI_ANNUAL,\\n        QUARTERLY,\\n        MONTHLY,\\n        FORWARD\\n    }\\n\\n    struct Currency {\\n        bool isSupported;\\n        string name;\\n        uint16 chainId; // chain id for address conversion\\n    }\\n\\n    struct SettlementRequest {\\n        address payer;\\n        address receiver;\\n        uint16 chainId;\\n        uint256 timestamp;\\n        string txHash;\\n    }\\n}\\n\",\"keccak256\":\"0x6419e0bcd07b8ff86e0ffce1e7f16e9a38a470f0ab2f697af0f5234cb943303f\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../storages/OwnableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return OwnableStorage.slot().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = OwnableStorage.slot().owner;\\n        OwnableStorage.slot().owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1c782b9deaf1f94d2af99826e6e8207f5e71f3fbb6ce18805913a3ca7dda9579\",\"license\":\"MIT\"},\"contracts/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9f02e4ae76f34a28299e4b6a10490ebf99b9c9a8454765bff7977cc4f3d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611f42806100206000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063715018a6116100a257806399c2e2c41161007157806399c2e2c41461023f578063b1547add14610252578063e099765914610265578063f2fde38b1461026c578063fd86c90c1461027f57600080fd5b8063715018a614610209578063849d7a50146102115780638b1e26a4146102245780638da5cb5b1461023757600080fd5b80632af64bd3116100e95780632af64bd3146101995780633d03b9da146101a157806346b0575d146101b6578063485cc955146101e35780635cdbcd27146101f657600080fd5b806302ccf0151461011b57806304f3bcec14610141578063072d3da51461016c57806329985e5a1461018f575b600080fd5b61012e6101293660046118a3565b6102ad565b6040519081526020015b60405180910390f35b600054610154906001600160a01b031681565b6040516001600160a01b039091168152602001610138565b61017f61017a3660046118d4565b6102be565b6040519015158152602001610138565b610197610302565b005b61017f610495565b6101a96105b3565b6040516101389190611909565b61012e6101c43660046118a3565b6000908152600080516020611eed833981519152602052604090205490565b6101976101f1366004611962565b610644565b610197610204366004611a71565b610737565b610197610846565b61012e61021f366004611b3c565b610881565b6101a9610232366004611b75565b610894565b610154610a03565b61019761024d366004611bb5565b610a36565b6101a9610260366004611b3c565b610d36565b60606101a9565b61019761027a366004611bfd565b610d42565b61029261028d366004611b3c565b610de2565b60408051938452602084019290925290820152606001610138565b60006102b882610e1e565b92915050565b6001600160e01b031982166000908152600080516020611ecd8339815191526020908152604080832084845290915281206102f98186610e5d565b95945050505050565b600061030c6105b3565b905060005b815181101561049157600082828151811061032e5761032e611c1a565b6020026020010151905060008060009054906101000a90046001600160a01b03166001600160a01b0316636795dbcd838460405160200161039b91907f5265736f6c766572206d697373696e67207461726765743a20000000000000008152601981019190915260390190565b6040516020818303038152906040526040518363ffffffff1660e01b81526004016103c7929190611c7d565b60206040518083038186803b1580156103df57600080fd5b505afa1580156103f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104179190611c9e565b60008381526001602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251868152918201529192507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68910160405180910390a15050808061048990611cd1565b915050610311565b5050565b6000806104a06105b3565b905060005b81518110156105aa5760008282815181106104c2576104c2611c1a565b60209081029190910181015160008181526001909252604080832054925490516321f8a72160e01b8152600481018390529193506001600160a01b039283169216906321f8a7219060240160206040518083038186803b15801561052557600080fd5b505afa158015610539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055d9190611c9e565b6001600160a01b031614158061058857506000818152600160205260409020546001600160a01b0316155b15610597576000935050505090565b50806105a281611cd1565b9150506104a5565b50600191505090565b60408051600280825260608083018452926020830190803683370190505090507121bab93932b731bca1b7b73a3937b63632b960711b816000815181106105fc576105fc611c1a565b60200260200101818152505075283937b23ab1ba20b2323932b9b9a932b9b7b63b32b960511b8160018151811061063557610635611c1a565b60200260200101818152505090565b60006106506001610e75565b90508015610668576002805461ff0019166101001790555b6000610672610eff565b6001600160a01b031614156106d95760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b60648201526084015b60405180910390fd5b6106e283610f27565b6106eb82610f98565b8015610732576002805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b505050565b33610740610a03565b6001600160a01b0316146107665760405162461bcd60e51b81526004016106d090611cec565b6000838152600080516020611eed833981519152602052604090208390558151156108165760005b82518110156108145760008382815181106107ab576107ab611c1a565b6020026020010151905060005b83518110156107ff5760008482815181106107d5576107d5611c1a565b602002602001015190506107ec8784836001610a36565b50806107f781611cd1565b9150506107b8565b5050808061080c90611cd1565b91505061078e565b505b6040518381527f85b976c846042e714c80a25af4c8110d83d827086708b873b3fb04ff98e5214490602001610729565b3361084f610a03565b6001600160a01b0316146108755760405162461bcd60e51b81526004016106d090611cec565b61087f6000610f27565b565b600061088d8383611013565b9392505050565b6001600160e01b031983166000908152600080516020611ecd8339815191526020908152604080832085845290915281206060916108d182611225565b905060008167ffffffffffffffff8111156108ee576108ee61199b565b604051908082528060200260200182016040528015610917578160200160208202803683370190505b50905060005b82811015610964576000610931858361122f565b90508083838151811061094657610946611c1a565b6020908102919091010152508061095c81611cd1565b91505061091d565b5084156109f957604051634f64581360e11b8152737C7efeefEBAd3cB1535C81b084Af87Cb28d5756790639ec8b026906109a2908490600401611909565b60006040518083038186803b1580156109ba57600080fd5b505af41580156109ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109f69190810190611d21565b90505b9695505050505050565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa5b546001600160a01b0316919050565b33610a3f610a03565b6001600160a01b031614610a655760405162461bcd60e51b81526004016106d090611cec565b6000848152600080516020611eed833981519152602052604090205484908114610ac55760405162461bcd60e51b81526020600482015260116024820152704e4f4e204558495354494e47205445524d60781b60448201526064016106d0565b610acd61123b565b604051631356c4d160e11b81526001600160e01b0319861660048201526001600160a01b0391909116906326ad89a29060240160206040518083038186803b158015610b1857600080fd5b505afa158015610b2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b509190611db2565b610b945760405162461bcd60e51b81526020600482015260156024820152741393d38814d5541413d495115108141493d11550d5605a1b60448201526064016106d0565b610b9c611264565b6001600160a01b031663d4d4f6ce846040518263ffffffff1660e01b8152600401610bc991815260200190565b60206040518083038186803b158015610be157600080fd5b505afa158015610bf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c199190611db2565b610c595760405162461bcd60e51b81526020600482015260116024820152704e4f4e20535550504f525445442043435960781b60448201526064016106d0565b8115610ca0576001600160e01b031984166000908152600080516020611ecd833981519152602090815260408083208684529091529020610c9a9086611284565b50610cdd565b6001600160e01b031984166000908152600080516020611ecd833981519152602090815260408083208684529091529020610cdb9086611290565b505b604080518681526001600160e01b03198616602082015290810184905282151560608201527f8b5c8e8024eb720a3028fc80e6a6b7a02e67c1b1d3a40d7063ac37140d3ffe599060800160405180910390a15050505050565b606061088d838361129c565b33610d4b610a03565b6001600160a01b031614610d715760405162461bcd60e51b81526004016106d090611cec565b6001600160a01b038116610dd65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106d0565b610ddf81610f27565b50565b6000828152600080516020611eed83398151915260205260408120549080610e09856102ad565b9150610e158585610881565b90509250925092565b600061016d8210610e325750612710919050565b61016d821015610e58576000610e4a83610168611dcf565b905061088d81612710611dcf565b919050565b6000818152600183016020526040812054151561088d565b600254600090610100900460ff1615610ebe578160ff166001148015610e9a5750303b155b610eb65760405162461bcd60e51b81526004016106d090611df1565b506000919050565b60025460ff808416911610610ee55760405162461bcd60e51b81526004016106d090611df1565b506002805460ff191660ff92909216919091179055600190565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610a27565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000546001600160a01b031615610ff15760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c7265616479000000000060448201526064016106d0565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000808260ff16600481111561102b5761102b611e3f565b600481111561103c5761103c611e3f565b14156110795761016d831061105e5761105761016d84611dcf565b90506102b8565b821561106c575060016102b8565b5060006102b8565b6102b8565b60018260ff16600481111561109057611090611e3f565b60048111156110a1576110a1611e3f565b14156110fb5761016d83106110e85760006110be61016d85611dcf565b6110c9906005611e55565b6110d39085611e74565b90506110e060b482611dcf565b9150506102b8565b60b4831061105e5761105760b484611dcf565b60028260ff16600481111561111257611112611e3f565b600481111561112357611123611e3f565b14156111755761016d831061116257600061114061016d85611dcf565b61114b906005611e55565b6111559085611e74565b90506110e0605a82611dcf565b605a831061105e57611057605a84611dcf565b60038260ff16600481111561118c5761118c611e3f565b600481111561119d5761119d611e3f565b14156111ef5761016d83106111dc5760006111ba61016d85611dcf565b6111c5906005611e55565b6111cf9085611e74565b90506110e0601e82611dcf565b601e831061105e57611057601e84611dcf565b60048260ff16600481111561120657611206611e3f565b600481111561121757611217611e3f565b141561106c575060016102b8565b60006102b8825490565b600061088d83836116c3565b600061125f75283937b23ab1ba20b2323932b9b9a932b9b7b63b32b960511b6116ed565b905090565b600061125f7121bab93932b731bca1b7b73a3937b63632b960711b6116ed565b600061088d8383611769565b600061088d83836117b0565b606060008260ff1660048111156112b5576112b5611e3f565b60048111156112c6576112c6611e3f565b14156113e95761016d831061138c5760006112e361016d85611dcf565b905060008167ffffffffffffffff8111156113005761130061199b565b604051908082528060200260200182016040528015611329578160200160208202803683370190505b50905060005b82811015611382576000611344826001611e8b565b90506113528161016d611e55565b83838151811061136457611364611c1a565b6020908102919091010152508061137a81611cd1565b91505061132f565b5091506102b89050565b821561107457600060015b6040519080825280602002602001820160405280156113c0578160200160208202803683370190505b50905083816000815181106113d7576113d7611c1a565b602090810291909101015290506102b8565b60018260ff16600481111561140057611400611e3f565b600481111561141157611411611e3f565b14156114ca5760b4831061138c57600061142c60b485611dcf565b905060008167ffffffffffffffff8111156114495761144961199b565b604051908082528060200260200182016040528015611472578160200160208202803683370190505b50905060005b8281101561138257600061148d826001611e8b565b905061149a8160b4611e55565b8383815181106114ac576114ac611c1a565b602090810291909101015250806114c281611cd1565b915050611478565b60028260ff1660048111156114e1576114e1611e3f565b60048111156114f2576114f2611e3f565b14156115ab57605a831061138c57600061150d605a85611dcf565b905060008167ffffffffffffffff81111561152a5761152a61199b565b604051908082528060200260200182016040528015611553578160200160208202803683370190505b50905060005b8281101561138257600061156e826001611e8b565b905061157b81605a611e55565b83838151811061158d5761158d611c1a565b602090810291909101015250806115a381611cd1565b915050611559565b60038260ff1660048111156115c2576115c2611e3f565b60048111156115d3576115d3611e3f565b141561168c57601e831061138c5760006115ee601e85611dcf565b905060008167ffffffffffffffff81111561160b5761160b61199b565b604051908082528060200260200182016040528015611634578160200160208202803683370190505b50905060005b8281101561138257600061164f826001611e8b565b905061165c81601e611e55565b83838151811061166e5761166e611c1a565b6020908102919091010152508061168481611cd1565b91505061163a565b60048260ff1660048111156116a3576116a3611e3f565b60048111156116b4576116b4611e3f565b14156102b85760006001611397565b60008260000182815481106116da576116da611c1a565b9060005260206000200154905092915050565b600081815260016020908152604080832054905170026b4b9b9b4b7339030b2323932b9b99d1607d1b92810192909252603182018490526001600160a01b03169081151590605101604051602081830303815290604052906117625760405162461bcd60e51b81526004016106d09190611ea3565b5092915050565b600081815260018301602052604081205461106c575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556102b8565b600081815260018301602052604081205480156118995760006117d4600183611e74565b85549091506000906117e890600190611e74565b905081811461184d57600086600001828154811061180857611808611c1a565b906000526020600020015490508087600001848154811061182b5761182b611c1a565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061185e5761185e611eb6565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506102b8565b60009150506102b8565b6000602082840312156118b557600080fd5b5035919050565b80356001600160e01b031981168114610e5857600080fd5b6000806000606084860312156118e957600080fd5b833592506118f9602085016118bc565b9150604084013590509250925092565b6020808252825182820181905260009190848201906040850190845b8181101561194157835183529284019291840191600101611925565b50909695505050505050565b6001600160a01b0381168114610ddf57600080fd5b6000806040838503121561197557600080fd5b82356119808161194d565b915060208301356119908161194d565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156119da576119da61199b565b604052919050565b600067ffffffffffffffff8211156119fc576119fc61199b565b5060051b60200190565b600082601f830112611a1757600080fd5b81356020611a2c611a27836119e2565b6119b1565b82815260059290921b84018101918181019086841115611a4b57600080fd5b8286015b84811015611a665780358352918301918301611a4f565b509695505050505050565b600080600060608486031215611a8657600080fd5b8335925060208085013567ffffffffffffffff80821115611aa657600080fd5b818701915087601f830112611aba57600080fd5b8135611ac8611a27826119e2565b81815260059190911b8301840190848101908a831115611ae757600080fd5b938501935b82851015611b0c57611afd856118bc565b82529385019390850190611aec565b965050506040870135925080831115611b2457600080fd5b5050611b3286828701611a06565b9150509250925092565b60008060408385031215611b4f57600080fd5b82359150602083013560ff8116811461199057600080fd5b8015158114610ddf57600080fd5b600080600060608486031215611b8a57600080fd5b611b93846118bc565b9250602084013591506040840135611baa81611b67565b809150509250925092565b60008060008060808587031215611bcb57600080fd5b84359350611bdb602086016118bc565b9250604085013591506060850135611bf281611b67565b939692955090935050565b600060208284031215611c0f57600080fd5b813561088d8161194d565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b81811015611c5657602081850181015186830182015201611c3a565b81811115611c68576000602083870101525b50601f01601f19169290920160200192915050565b828152604060208201526000611c966040830184611c30565b949350505050565b600060208284031215611cb057600080fd5b815161088d8161194d565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611ce557611ce5611cbb565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020808385031215611d3457600080fd5b825167ffffffffffffffff811115611d4b57600080fd5b8301601f81018513611d5c57600080fd5b8051611d6a611a27826119e2565b81815260059190911b82018301908381019087831115611d8957600080fd5b928401925b82841015611da757835182529284019290840190611d8e565b979650505050505050565b600060208284031215611dc457600080fd5b815161088d81611b67565b600082611dec57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b6000816000190483118215151615611e6f57611e6f611cbb565b500290565b600082821015611e8657611e86611cbb565b500390565b60008219821115611e9e57611e9e611cbb565b500190565b60208152600061088d6020830184611c30565b634e487b7160e01b600052603160045260246000fdfe253a7ab11af7aab3a05c036933f4b4fecce6574aec56d43aa0b98071ef345728253a7ab11af7aab3a05c036933f4b4fecce6574aec56d43aa0b98071ef345727a2646970667358221220a845e5561e52fdcdc234bf52c8dc2e32a1785b3a75dffaf755342f38e830060b64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063715018a6116100a257806399c2e2c41161007157806399c2e2c41461023f578063b1547add14610252578063e099765914610265578063f2fde38b1461026c578063fd86c90c1461027f57600080fd5b8063715018a614610209578063849d7a50146102115780638b1e26a4146102245780638da5cb5b1461023757600080fd5b80632af64bd3116100e95780632af64bd3146101995780633d03b9da146101a157806346b0575d146101b6578063485cc955146101e35780635cdbcd27146101f657600080fd5b806302ccf0151461011b57806304f3bcec14610141578063072d3da51461016c57806329985e5a1461018f575b600080fd5b61012e6101293660046118a3565b6102ad565b6040519081526020015b60405180910390f35b600054610154906001600160a01b031681565b6040516001600160a01b039091168152602001610138565b61017f61017a3660046118d4565b6102be565b6040519015158152602001610138565b610197610302565b005b61017f610495565b6101a96105b3565b6040516101389190611909565b61012e6101c43660046118a3565b6000908152600080516020611eed833981519152602052604090205490565b6101976101f1366004611962565b610644565b610197610204366004611a71565b610737565b610197610846565b61012e61021f366004611b3c565b610881565b6101a9610232366004611b75565b610894565b610154610a03565b61019761024d366004611bb5565b610a36565b6101a9610260366004611b3c565b610d36565b60606101a9565b61019761027a366004611bfd565b610d42565b61029261028d366004611b3c565b610de2565b60408051938452602084019290925290820152606001610138565b60006102b882610e1e565b92915050565b6001600160e01b031982166000908152600080516020611ecd8339815191526020908152604080832084845290915281206102f98186610e5d565b95945050505050565b600061030c6105b3565b905060005b815181101561049157600082828151811061032e5761032e611c1a565b6020026020010151905060008060009054906101000a90046001600160a01b03166001600160a01b0316636795dbcd838460405160200161039b91907f5265736f6c766572206d697373696e67207461726765743a20000000000000008152601981019190915260390190565b6040516020818303038152906040526040518363ffffffff1660e01b81526004016103c7929190611c7d565b60206040518083038186803b1580156103df57600080fd5b505afa1580156103f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104179190611c9e565b60008381526001602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251868152918201529192507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68910160405180910390a15050808061048990611cd1565b915050610311565b5050565b6000806104a06105b3565b905060005b81518110156105aa5760008282815181106104c2576104c2611c1a565b60209081029190910181015160008181526001909252604080832054925490516321f8a72160e01b8152600481018390529193506001600160a01b039283169216906321f8a7219060240160206040518083038186803b15801561052557600080fd5b505afa158015610539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055d9190611c9e565b6001600160a01b031614158061058857506000818152600160205260409020546001600160a01b0316155b15610597576000935050505090565b50806105a281611cd1565b9150506104a5565b50600191505090565b60408051600280825260608083018452926020830190803683370190505090507121bab93932b731bca1b7b73a3937b63632b960711b816000815181106105fc576105fc611c1a565b60200260200101818152505075283937b23ab1ba20b2323932b9b9a932b9b7b63b32b960511b8160018151811061063557610635611c1a565b60200260200101818152505090565b60006106506001610e75565b90508015610668576002805461ff0019166101001790555b6000610672610eff565b6001600160a01b031614156106d95760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b60648201526084015b60405180910390fd5b6106e283610f27565b6106eb82610f98565b8015610732576002805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b505050565b33610740610a03565b6001600160a01b0316146107665760405162461bcd60e51b81526004016106d090611cec565b6000838152600080516020611eed833981519152602052604090208390558151156108165760005b82518110156108145760008382815181106107ab576107ab611c1a565b6020026020010151905060005b83518110156107ff5760008482815181106107d5576107d5611c1a565b602002602001015190506107ec8784836001610a36565b50806107f781611cd1565b9150506107b8565b5050808061080c90611cd1565b91505061078e565b505b6040518381527f85b976c846042e714c80a25af4c8110d83d827086708b873b3fb04ff98e5214490602001610729565b3361084f610a03565b6001600160a01b0316146108755760405162461bcd60e51b81526004016106d090611cec565b61087f6000610f27565b565b600061088d8383611013565b9392505050565b6001600160e01b031983166000908152600080516020611ecd8339815191526020908152604080832085845290915281206060916108d182611225565b905060008167ffffffffffffffff8111156108ee576108ee61199b565b604051908082528060200260200182016040528015610917578160200160208202803683370190505b50905060005b82811015610964576000610931858361122f565b90508083838151811061094657610946611c1a565b6020908102919091010152508061095c81611cd1565b91505061091d565b5084156109f957604051634f64581360e11b815273__$69df8f3ef0941d5dac5ad52c193381be4b$__90639ec8b026906109a2908490600401611909565b60006040518083038186803b1580156109ba57600080fd5b505af41580156109ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109f69190810190611d21565b90505b9695505050505050565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa5b546001600160a01b0316919050565b33610a3f610a03565b6001600160a01b031614610a655760405162461bcd60e51b81526004016106d090611cec565b6000848152600080516020611eed833981519152602052604090205484908114610ac55760405162461bcd60e51b81526020600482015260116024820152704e4f4e204558495354494e47205445524d60781b60448201526064016106d0565b610acd61123b565b604051631356c4d160e11b81526001600160e01b0319861660048201526001600160a01b0391909116906326ad89a29060240160206040518083038186803b158015610b1857600080fd5b505afa158015610b2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b509190611db2565b610b945760405162461bcd60e51b81526020600482015260156024820152741393d38814d5541413d495115108141493d11550d5605a1b60448201526064016106d0565b610b9c611264565b6001600160a01b031663d4d4f6ce846040518263ffffffff1660e01b8152600401610bc991815260200190565b60206040518083038186803b158015610be157600080fd5b505afa158015610bf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c199190611db2565b610c595760405162461bcd60e51b81526020600482015260116024820152704e4f4e20535550504f525445442043435960781b60448201526064016106d0565b8115610ca0576001600160e01b031984166000908152600080516020611ecd833981519152602090815260408083208684529091529020610c9a9086611284565b50610cdd565b6001600160e01b031984166000908152600080516020611ecd833981519152602090815260408083208684529091529020610cdb9086611290565b505b604080518681526001600160e01b03198616602082015290810184905282151560608201527f8b5c8e8024eb720a3028fc80e6a6b7a02e67c1b1d3a40d7063ac37140d3ffe599060800160405180910390a15050505050565b606061088d838361129c565b33610d4b610a03565b6001600160a01b031614610d715760405162461bcd60e51b81526004016106d090611cec565b6001600160a01b038116610dd65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106d0565b610ddf81610f27565b50565b6000828152600080516020611eed83398151915260205260408120549080610e09856102ad565b9150610e158585610881565b90509250925092565b600061016d8210610e325750612710919050565b61016d821015610e58576000610e4a83610168611dcf565b905061088d81612710611dcf565b919050565b6000818152600183016020526040812054151561088d565b600254600090610100900460ff1615610ebe578160ff166001148015610e9a5750303b155b610eb65760405162461bcd60e51b81526004016106d090611df1565b506000919050565b60025460ff808416911610610ee55760405162461bcd60e51b81526004016106d090611df1565b506002805460ff191660ff92909216919091179055600190565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610a27565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000546001600160a01b031615610ff15760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c7265616479000000000060448201526064016106d0565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000808260ff16600481111561102b5761102b611e3f565b600481111561103c5761103c611e3f565b14156110795761016d831061105e5761105761016d84611dcf565b90506102b8565b821561106c575060016102b8565b5060006102b8565b6102b8565b60018260ff16600481111561109057611090611e3f565b60048111156110a1576110a1611e3f565b14156110fb5761016d83106110e85760006110be61016d85611dcf565b6110c9906005611e55565b6110d39085611e74565b90506110e060b482611dcf565b9150506102b8565b60b4831061105e5761105760b484611dcf565b60028260ff16600481111561111257611112611e3f565b600481111561112357611123611e3f565b14156111755761016d831061116257600061114061016d85611dcf565b61114b906005611e55565b6111559085611e74565b90506110e0605a82611dcf565b605a831061105e57611057605a84611dcf565b60038260ff16600481111561118c5761118c611e3f565b600481111561119d5761119d611e3f565b14156111ef5761016d83106111dc5760006111ba61016d85611dcf565b6111c5906005611e55565b6111cf9085611e74565b90506110e0601e82611dcf565b601e831061105e57611057601e84611dcf565b60048260ff16600481111561120657611206611e3f565b600481111561121757611217611e3f565b141561106c575060016102b8565b60006102b8825490565b600061088d83836116c3565b600061125f75283937b23ab1ba20b2323932b9b9a932b9b7b63b32b960511b6116ed565b905090565b600061125f7121bab93932b731bca1b7b73a3937b63632b960711b6116ed565b600061088d8383611769565b600061088d83836117b0565b606060008260ff1660048111156112b5576112b5611e3f565b60048111156112c6576112c6611e3f565b14156113e95761016d831061138c5760006112e361016d85611dcf565b905060008167ffffffffffffffff8111156113005761130061199b565b604051908082528060200260200182016040528015611329578160200160208202803683370190505b50905060005b82811015611382576000611344826001611e8b565b90506113528161016d611e55565b83838151811061136457611364611c1a565b6020908102919091010152508061137a81611cd1565b91505061132f565b5091506102b89050565b821561107457600060015b6040519080825280602002602001820160405280156113c0578160200160208202803683370190505b50905083816000815181106113d7576113d7611c1a565b602090810291909101015290506102b8565b60018260ff16600481111561140057611400611e3f565b600481111561141157611411611e3f565b14156114ca5760b4831061138c57600061142c60b485611dcf565b905060008167ffffffffffffffff8111156114495761144961199b565b604051908082528060200260200182016040528015611472578160200160208202803683370190505b50905060005b8281101561138257600061148d826001611e8b565b905061149a8160b4611e55565b8383815181106114ac576114ac611c1a565b602090810291909101015250806114c281611cd1565b915050611478565b60028260ff1660048111156114e1576114e1611e3f565b60048111156114f2576114f2611e3f565b14156115ab57605a831061138c57600061150d605a85611dcf565b905060008167ffffffffffffffff81111561152a5761152a61199b565b604051908082528060200260200182016040528015611553578160200160208202803683370190505b50905060005b8281101561138257600061156e826001611e8b565b905061157b81605a611e55565b83838151811061158d5761158d611c1a565b602090810291909101015250806115a381611cd1565b915050611559565b60038260ff1660048111156115c2576115c2611e3f565b60048111156115d3576115d3611e3f565b141561168c57601e831061138c5760006115ee601e85611dcf565b905060008167ffffffffffffffff81111561160b5761160b61199b565b604051908082528060200260200182016040528015611634578160200160208202803683370190505b50905060005b8281101561138257600061164f826001611e8b565b905061165c81601e611e55565b83838151811061166e5761166e611c1a565b6020908102919091010152508061168481611cd1565b91505061163a565b60048260ff1660048111156116a3576116a3611e3f565b60048111156116b4576116b4611e3f565b14156102b85760006001611397565b60008260000182815481106116da576116da611c1a565b9060005260206000200154905092915050565b600081815260016020908152604080832054905170026b4b9b9b4b7339030b2323932b9b99d1607d1b92810192909252603182018490526001600160a01b03169081151590605101604051602081830303815290604052906117625760405162461bcd60e51b81526004016106d09190611ea3565b5092915050565b600081815260018301602052604081205461106c575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556102b8565b600081815260018301602052604081205480156118995760006117d4600183611e74565b85549091506000906117e890600190611e74565b905081811461184d57600086600001828154811061180857611808611c1a565b906000526020600020015490508087600001848154811061182b5761182b611c1a565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061185e5761185e611eb6565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506102b8565b60009150506102b8565b6000602082840312156118b557600080fd5b5035919050565b80356001600160e01b031981168114610e5857600080fd5b6000806000606084860312156118e957600080fd5b833592506118f9602085016118bc565b9150604084013590509250925092565b6020808252825182820181905260009190848201906040850190845b8181101561194157835183529284019291840191600101611925565b50909695505050505050565b6001600160a01b0381168114610ddf57600080fd5b6000806040838503121561197557600080fd5b82356119808161194d565b915060208301356119908161194d565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156119da576119da61199b565b604052919050565b600067ffffffffffffffff8211156119fc576119fc61199b565b5060051b60200190565b600082601f830112611a1757600080fd5b81356020611a2c611a27836119e2565b6119b1565b82815260059290921b84018101918181019086841115611a4b57600080fd5b8286015b84811015611a665780358352918301918301611a4f565b509695505050505050565b600080600060608486031215611a8657600080fd5b8335925060208085013567ffffffffffffffff80821115611aa657600080fd5b818701915087601f830112611aba57600080fd5b8135611ac8611a27826119e2565b81815260059190911b8301840190848101908a831115611ae757600080fd5b938501935b82851015611b0c57611afd856118bc565b82529385019390850190611aec565b965050506040870135925080831115611b2457600080fd5b5050611b3286828701611a06565b9150509250925092565b60008060408385031215611b4f57600080fd5b82359150602083013560ff8116811461199057600080fd5b8015158114610ddf57600080fd5b600080600060608486031215611b8a57600080fd5b611b93846118bc565b9250602084013591506040840135611baa81611b67565b809150509250925092565b60008060008060808587031215611bcb57600080fd5b84359350611bdb602086016118bc565b9250604085013591506060850135611bf281611b67565b939692955090935050565b600060208284031215611c0f57600080fd5b813561088d8161194d565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b81811015611c5657602081850181015186830182015201611c3a565b81811115611c68576000602083870101525b50601f01601f19169290920160200192915050565b828152604060208201526000611c966040830184611c30565b949350505050565b600060208284031215611cb057600080fd5b815161088d8161194d565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611ce557611ce5611cbb565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020808385031215611d3457600080fd5b825167ffffffffffffffff811115611d4b57600080fd5b8301601f81018513611d5c57600080fd5b8051611d6a611a27826119e2565b81815260059190911b82018301908381019087831115611d8957600080fd5b928401925b82841015611da757835182529284019290840190611d8e565b979650505050505050565b600060208284031215611dc457600080fd5b815161088d81611b67565b600082611dec57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b6000816000190483118215151615611e6f57611e6f611cbb565b500290565b600082821015611e8657611e86611cbb565b500390565b60008219821115611e9e57611e9e611cbb565b500190565b60208152600061088d6020830184611c30565b634e487b7160e01b600052603160045260246000fdfe253a7ab11af7aab3a05c036933f4b4fecce6574aec56d43aa0b98071ef345728253a7ab11af7aab3a05c036933f4b4fecce6574aec56d43aa0b98071ef345727a2646970667358221220a845e5561e52fdcdc234bf52c8dc2e32a1785b3a75dffaf755342f38e830060b64736f6c63430008090033",
  "libraries": {
    "QuickSort": "0x7C7efeefEBAd3cB1535C81b084Af87Cb28d57567"
  },
  "implementation": "0x1316EbB38d2c670B53473f20bd54FFd81Eff8696",
  "devdoc": {
    "details": "Term Structure contract is responsible for managing supported terms in Secured Finance Protocol per product and currency",
    "kind": "dev",
    "methods": {
      "acceptedContracts()": {
        "details": "Returns contract names that can call this contract."
      },
      "getDfFrac(uint256)": {
        "details": "Triggers to get discount factor fractions.",
        "params": {
          "_numDays": "Number of days in term"
        }
      },
      "getNumDays(uint256)": {
        "details": "Triggers to get number of days for supported term. number of days follows ACT365 market convention",
        "params": {
          "_numDays": "Number of days in term"
        }
      },
      "getNumPayments(uint256,uint8)": {
        "details": "Triggers to get number of coupon payments.",
        "params": {
          "_frequency": "Payment frequency (like annual, semi-annual, etc.)",
          "_numDays": "Number of days in term"
        }
      },
      "getTerm(uint256,uint8)": {
        "details": "Triggers to get term structure.",
        "params": {
          "_numDays": "Number of days in term"
        }
      },
      "getTermSchedule(uint256,uint8)": {
        "details": "Triggers to get payment schedule for supported term according to the payment frequency number of days follows ACT365 market convention",
        "params": {
          "_frequency": "Payment frequency (like annual, semi-annual, etc.)",
          "_numDays": "Number of days in term"
        }
      },
      "getTermsForProductAndCcy(bytes4,bytes32,bool)": {
        "details": "Returns an array of supported terms for a specific product and currency",
        "params": {
          "_ccy": "Currency short identifier",
          "_product": "Product prefix"
        }
      },
      "initialize(address,address)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController"
      },
      "isSupportedTerm(uint256,bytes4,bytes32)": {
        "details": "Triggers to get if specified term is supported for a particular ccy and product.",
        "params": {
          "_ccy": "Currency short identifier",
          "_numDays": "Number of days in term",
          "_product": "Product prefix"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requiredContracts()": {
        "details": "Returns required contract names in this contract"
      },
      "supportTerm(uint256,bytes4[],bytes32[])": {
        "details": "Triggers to add new term into the protocol",
        "params": {
          "_currencies": "Array of currencies supporting this term",
          "_numDays": "Number of calendar days in a term",
          "_products": "Array of products supporting this term"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateTermSupport(uint256,bytes4,bytes32,bool)": {
        "details": "Triggers to update product and currency support for term",
        "params": {
          "_ccy": "Currency short identifier",
          "_isSupported": "Boolean whether term supported for specified `_product` and `_ccy`",
          "_numDays": "Number of days in term",
          "_product": "Product prefix"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address,address)": {
        "notice": "Initializes the contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 35871,
        "contract": "contracts/TermStructure.sol:TermStructure",
        "label": "resolver",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAddressResolver)23433"
      },
      {
        "astId": 35875,
        "contract": "contracts/TermStructure.sol:TermStructure",
        "label": "addressCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2990,
        "contract": "contracts/TermStructure.sol:TermStructure",
        "label": "_initialized",
        "offset": 0,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 2993,
        "contract": "contracts/TermStructure.sol:TermStructure",
        "label": "_initializing",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAddressResolver)23433": {
        "encoding": "inplace",
        "label": "contract IAddressResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}