{
  "address": "0xAB785CC0D30D89C72Fbe91010597C91f231c5f3D",
  "abi": [
    {
      "inputs": [],
      "name": "UnmatchedInputs",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "AddressImported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_names",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "areAddressesImported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        }
      ],
      "name": "getAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_reason",
          "type": "string"
        }
      ],
      "name": "getAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNames",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRevision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_names",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "importAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x843c510b6b9e636aebb30f66de2a658f5349b93825eca8248176bde66007372d",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0xAB785CC0D30D89C72Fbe91010597C91f231c5f3D",
    "transactionIndex": 100,
    "gasUsed": "852927",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x416203dcba7ae0aefbf7354eb1e9f17d5a4abe9379d07594c1fa4f79b5b1a693",
    "transactionHash": "0x843c510b6b9e636aebb30f66de2a658f5349b93825eca8248176bde66007372d",
    "logs": [],
    "blockNumber": 5529434,
    "cumulativeGasUsed": "20870441",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "4b80e782bfeebd0947331735599d1f32",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"UnmatchedInputs\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"AddressImported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_names\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"areAddressesImported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNames\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRevision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_names\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"importAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is used through the `./mixins/MixinAddressResolver.sol`. The names of the contracts that need to be imported into this contract are managed in `./libraries/Contracts.sol`.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"areAddressesImported(bytes32[],address[])\":{\"returns\":{\"_0\":\"The boolean if the addresses are imported or not\"}},\"getAddress(bytes32)\":{\"details\":\"This method is used when the caller doesn't need to get an error if the address in the name is not imported.\",\"returns\":{\"_0\":\"The contract address\"}},\"getAddress(bytes32,string)\":{\"details\":\"This method is used when the caller need to get an error if the address in the name is not imported.\",\"returns\":{\"_0\":\"The contract address\"}},\"getAddresses()\":{\"returns\":{\"_0\":\"Array with the contract address\"}},\"getNames()\":{\"returns\":{\"_0\":\"Array with the contract address\"}},\"getRevision()\":{\"returns\":{\"_0\":\"The revision number\"}},\"importAddresses(bytes32[],address[])\":{\"details\":\"All addresses in the contract are overridden by `_addresses` in the argument.\"},\"initialize(address)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController.\",\"params\":{\"_owner\":\"The address of the contract owner\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"areAddressesImported(bytes32[],address[])\":{\"notice\":\"Gets if the addresses are imported.\"},\"getAddress(bytes32)\":{\"notice\":\"Gets the imported contract addresses for the name.\"},\"getAddress(bytes32,string)\":{\"notice\":\"Gets the imported contract addresses for the name with error.\"},\"getAddresses()\":{\"notice\":\"Gets the all imported contract addresses.\"},\"getNames()\":{\"notice\":\"Gets the all imported contract names.\"},\"getRevision()\":{\"notice\":\"Gets the revision number of the contract\"},\"importAddresses(bytes32[],address[])\":{\"notice\":\"Imports contract addresses.\"},\"initialize(address)\":{\"notice\":\"Initializes the contract.\"}},\"notice\":\"Implements the logic to manage the contract addresses. This contract store the contract name and contract address. When the contract calls other contracts, the caller contract gets the contract address from this contract. However, the contract addresses are cashed into the caller contract through the `MixinAddressResolver.sol` at the deployment, so the caller doesn't need to call this contract each time it calls other contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/AddressResolver.sol\":\"AddressResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) ||\\n                (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(\\n            !_initializing && _initialized < version,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xb13e7a56a0af42137a3e04dccb39c6bd4233d5e5c324197af9d71c3f7af5359c\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data\\n    ) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44e8974f420f05be7bf27220ef8e694d803a281eb0824a2c0d8960d864780bdf\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/protocol/AddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {IAddressResolver} from \\\"./interfaces/IAddressResolver.sol\\\";\\nimport {Ownable} from \\\"./utils/Ownable.sol\\\";\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\nimport {AddressResolverStorage as Storage} from \\\"./storages/AddressResolverStorage.sol\\\";\\n\\n/**\\n * @notice Implements the logic to manage the contract addresses.\\n *\\n * This contract store the contract name and contract address. When the contract calls other contracts,\\n * the caller contract gets the contract address from this contract.\\n * However, the contract addresses are cashed into the caller contract through the `MixinAddressResolver.sol` at the deployment,\\n * so the caller doesn't need to call this contract each time it calls other contracts.\\n *\\n * @dev This contract is used through the `./mixins/MixinAddressResolver.sol`. The names of the contracts that\\n * need to be imported into this contract are managed in `./libraries/Contracts.sol`.\\n */\\ncontract AddressResolver is IAddressResolver, Ownable, Proxyable {\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\\n     * @param _owner The address of the contract owner\\n     */\\n    function initialize(address _owner) public initializer onlyProxy {\\n        _transferOwnership(_owner);\\n    }\\n\\n    /**\\n     * @notice Imports contract addresses.\\n     * @dev All addresses in the contract are overridden by `_addresses` in the argument.\\n     */\\n    function importAddresses(\\n        bytes32[] memory _names,\\n        address[] memory _addresses\\n    ) public onlyOwner {\\n        if (_names.length != _addresses.length) revert UnmatchedInputs();\\n\\n        bytes32[] memory currentNames = Storage.slot().nameCaches;\\n\\n        for (uint256 i; i < currentNames.length; i++) {\\n            Storage.slot().addresses[currentNames[i]] = address(0);\\n        }\\n\\n        Storage.slot().nameCaches = _names;\\n        Storage.slot().addressCaches = _addresses;\\n\\n        for (uint256 i; i < _names.length; i++) {\\n            bytes32 name = _names[i];\\n            address destination = _addresses[i];\\n            Storage.slot().addresses[name] = destination;\\n            emit AddressImported(name, destination);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets if the addresses are imported.\\n     * @return The boolean if the addresses are imported or not\\n     */\\n    function areAddressesImported(\\n        bytes32[] calldata _names,\\n        address[] calldata _addresses\\n    ) external view returns (bool) {\\n        for (uint256 i; i < _names.length; i++) {\\n            if (Storage.slot().addresses[_names[i]] != _addresses[i]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Gets the imported contract addresses for the name with error.\\n     * @dev This method is used when the caller need to get an error if the address in the name\\n     * is not imported.\\n     * @return The contract address\\n     */\\n    function getAddress(\\n        bytes32 _name,\\n        string calldata _reason\\n    ) external view override returns (address) {\\n        address _foundAddress = Storage.slot().addresses[_name];\\n        if (_foundAddress == address(0)) revert(_reason);\\n        return _foundAddress;\\n    }\\n\\n    /**\\n     * @notice Gets the imported contract addresses for the name.\\n     * @dev This method is used when the caller doesn't need to get an error if the address in the name\\n     * is not imported.\\n     * @return The contract address\\n     */\\n    function getAddress(bytes32 _name) external view override returns (address) {\\n        return Storage.slot().addresses[_name];\\n    }\\n\\n    /**\\n     * @notice Gets the all imported contract addresses.\\n     * @return Array with the contract address\\n     */\\n    function getAddresses() external view override returns (address[] memory) {\\n        return Storage.slot().addressCaches;\\n    }\\n\\n    /**\\n     * @notice Gets the all imported contract names.\\n     * @return Array with the contract address\\n     */\\n    function getNames() external view override returns (bytes32[] memory) {\\n        return Storage.slot().nameCaches;\\n    }\\n}\\n\",\"keccak256\":\"0x3930251e762242b5c8767f377b4608020126b770fd72daad187cca22bfcadb88\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IAddressResolver {\\n    error UnmatchedInputs();\\n\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n\\n    function getNames() external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0x902589cadb08c09a44c5cdbe7ed8ba57a93f7e2700681177ef57c47c40e2e161\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/AddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary AddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.addressResolver\\\")) - 1);\\n\\n    struct Storage {\\n        mapping(bytes32 contractName => address contractAddress) addresses;\\n        bytes32[] nameCaches;\\n        address[] addressCaches;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4009e11b1c25a0f6c9b1859d7a6934b8c1bbf29ab68e246cb1138c0a11679c2c\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/utils/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary OwnableStorage {\\n    bytes32 internal constant STORAGE_SLOT = bytes32(uint256(keccak256(\\\"sf.storage.ownable\\\")) - 1);\\n\\n    struct Storage {\\n        address owner;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98130c4c3d0014744b194e179bd65b8b7e73cac9cd33a470d194072e1a06b94e\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/Context.sol\\\";\\nimport \\\"../storages/utils/OwnableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return OwnableStorage.slot().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = OwnableStorage.slot().owner;\\n        OwnableStorage.slot().owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd735ea20ce4e86d574ab372eb79a46510c7be3b12b62f3948bb68dd2bea710ff\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/StorageSlot.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Gets the revision number of the contract\\n     * @return The revision number\\n     */\\n    function getRevision() external pure virtual returns (uint256) {\\n        return 0x1;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0x9a8871621917fe5a0c7175217c5504dab4f935612dff0dadaff62c2d4da87412\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610e77806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80639f42102f116100715780639f42102f14610112578063a39fac1214610135578063ab0b8f771461014a578063c4d66de81461015d578063cd838f0f14610170578063f2fde38b1461018557600080fd5b80631316529d146100ae57806321f8a721146100c25780636795dbcd146100ed578063715018a6146101005780638da5cb5b1461010a575b600080fd5b604051600181526020015b60405180910390f35b6100d56100d03660046109df565b610198565b6040516001600160a01b0390911681526020016100b9565b6100d56100fb3660046109f8565b6101bc565b610108610214565b005b6100d561024f565b610125610120366004610ac0565b610268565b60405190151581526020016100b9565b61013d610310565b6040516100b99190610b2c565b610108610158366004610c72565b61037b565b61010861016b366004610d2b565b6105b5565b610178610733565b6040516100b99190610d4d565b610108610193366004610d2b565b610793565b60006101a2610833565b60009283526020525060409020546001600160a01b031690565b6000806101c7610833565b600086815260209190915260409020546001600160a01b031690508061020c57838360405162461bcd60e51b8152600401610203929190610d85565b60405180910390fd5b949350505050565b3361021d61024f565b6001600160a01b0316146102435760405162461bcd60e51b815260040161020390610db4565b61024d6000610867565b565b60006102596108d4565b546001600160a01b0316919050565b6000805b848110156103045783838281811061028657610286610de9565b905060200201602081019061029b9190610d2b565b6001600160a01b03166102ac610833565b60008888858181106102c0576102c0610de9565b60209081029290920135835250810191909152604001600020546001600160a01b0316146102f257600091505061020c565b806102fc81610e15565b91505061026c565b50600195945050505050565b606061031a610833565b60020180548060200260200160405190810160405280929190818152602001828054801561037157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610353575b5050505050905090565b3361038461024f565b6001600160a01b0316146103aa5760405162461bcd60e51b815260040161020390610db4565b80518251146103cc57604051631bc113b960e11b815260040160405180910390fd5b60006103d6610833565b60010180548060200260200160405190810160405280929190818152602001828054801561042357602002820191906000526020600020905b81548152602001906001019080831161040f575b5050505050905060005b81518110156104a4576000610440610833565b600001600084848151811061045757610457610de9565b6020026020010151815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550808061049c90610e15565b91505061042d565b50826104ae610833565b60010190805190602001906104c492919061092a565b50816104ce610833565b60020190805190602001906104e4929190610975565b5060005b83518110156105af57600084828151811061050557610505610de9565b60200260200101519050600084838151811061052357610523610de9565b6020026020010151905080610536610833565b6000848152602091825260409081902080546001600160a01b0319166001600160a01b039485161790558051858152928416918301919091527fefe884cc7f82a6cf3cf68f64221519dcf96b5cae9048e1bb008ee32cd05aaa91910160405180910390a1505080806105a790610e15565b9150506104e8565b50505050565b600054610100900460ff16158080156105d55750600054600160ff909116105b806105ef5750303b1580156105ef575060005460ff166001145b6106525760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610203565b6000805460ff191660011790558015610675576000805461ff0019166101001790555b600061067f610902565b6001600160a01b0316036106e05760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b6064820152608401610203565b6106e982610867565b801561072f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b606061073d610833565b60010180548060200260200160405190810160405280929190818152602001828054801561037157602002820191906000526020600020905b815481526020019060010190808311610776575050505050905090565b3361079c61024f565b6001600160a01b0316146107c25760405162461bcd60e51b815260040161020390610db4565b6001600160a01b0381166108275760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610203565b61083081610867565b50565b60008061086160017fcc50d67f473b12f6909b9d9962760e48c561299d97e9c3ef3fb57160167be922610e2e565b92915050565b60006108716108d4565b546001600160a01b03169050816108866108d4565b80546001600160a01b0319166001600160a01b03928316179055604051838216918316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008061086160017f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa610e2e565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610259565b828054828255906000526020600020908101928215610965579160200282015b8281111561096557825182559160200191906001019061094a565b506109719291506109ca565b5090565b828054828255906000526020600020908101928215610965579160200282015b8281111561096557825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610995565b5b8082111561097157600081556001016109cb565b6000602082840312156109f157600080fd5b5035919050565b600080600060408486031215610a0d57600080fd5b83359250602084013567ffffffffffffffff80821115610a2c57600080fd5b818601915086601f830112610a4057600080fd5b813581811115610a4f57600080fd5b876020828501011115610a6157600080fd5b6020830194508093505050509250925092565b60008083601f840112610a8657600080fd5b50813567ffffffffffffffff811115610a9e57600080fd5b6020830191508360208260051b8501011115610ab957600080fd5b9250929050565b60008060008060408587031215610ad657600080fd5b843567ffffffffffffffff80821115610aee57600080fd5b610afa88838901610a74565b90965094506020870135915080821115610b1357600080fd5b50610b2087828801610a74565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b81811015610b6d5783516001600160a01b031683529284019291840191600101610b48565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610bb857610bb8610b79565b604052919050565b600067ffffffffffffffff821115610bda57610bda610b79565b5060051b60200190565b80356001600160a01b0381168114610bfb57600080fd5b919050565b600082601f830112610c1157600080fd5b81356020610c26610c2183610bc0565b610b8f565b82815260059290921b84018101918181019086841115610c4557600080fd5b8286015b84811015610c6757610c5a81610be4565b8352918301918301610c49565b509695505050505050565b60008060408385031215610c8557600080fd5b823567ffffffffffffffff80821115610c9d57600080fd5b818501915085601f830112610cb157600080fd5b81356020610cc1610c2183610bc0565b82815260059290921b84018101918181019089841115610ce057600080fd5b948201945b83861015610cfe57853582529482019490820190610ce5565b96505086013592505080821115610d1457600080fd5b50610d2185828601610c00565b9150509250929050565b600060208284031215610d3d57600080fd5b610d4682610be4565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610b6d57835183529284019291840191600101610d69565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610e2757610e27610dff565b5060010190565b8181038181111561086157610861610dff56fea2646970667358221220db52a70d9afc90344adaa051c90e3873096248e5db785d8c64fdd912c7f3f42264736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80639f42102f116100715780639f42102f14610112578063a39fac1214610135578063ab0b8f771461014a578063c4d66de81461015d578063cd838f0f14610170578063f2fde38b1461018557600080fd5b80631316529d146100ae57806321f8a721146100c25780636795dbcd146100ed578063715018a6146101005780638da5cb5b1461010a575b600080fd5b604051600181526020015b60405180910390f35b6100d56100d03660046109df565b610198565b6040516001600160a01b0390911681526020016100b9565b6100d56100fb3660046109f8565b6101bc565b610108610214565b005b6100d561024f565b610125610120366004610ac0565b610268565b60405190151581526020016100b9565b61013d610310565b6040516100b99190610b2c565b610108610158366004610c72565b61037b565b61010861016b366004610d2b565b6105b5565b610178610733565b6040516100b99190610d4d565b610108610193366004610d2b565b610793565b60006101a2610833565b60009283526020525060409020546001600160a01b031690565b6000806101c7610833565b600086815260209190915260409020546001600160a01b031690508061020c57838360405162461bcd60e51b8152600401610203929190610d85565b60405180910390fd5b949350505050565b3361021d61024f565b6001600160a01b0316146102435760405162461bcd60e51b815260040161020390610db4565b61024d6000610867565b565b60006102596108d4565b546001600160a01b0316919050565b6000805b848110156103045783838281811061028657610286610de9565b905060200201602081019061029b9190610d2b565b6001600160a01b03166102ac610833565b60008888858181106102c0576102c0610de9565b60209081029290920135835250810191909152604001600020546001600160a01b0316146102f257600091505061020c565b806102fc81610e15565b91505061026c565b50600195945050505050565b606061031a610833565b60020180548060200260200160405190810160405280929190818152602001828054801561037157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610353575b5050505050905090565b3361038461024f565b6001600160a01b0316146103aa5760405162461bcd60e51b815260040161020390610db4565b80518251146103cc57604051631bc113b960e11b815260040160405180910390fd5b60006103d6610833565b60010180548060200260200160405190810160405280929190818152602001828054801561042357602002820191906000526020600020905b81548152602001906001019080831161040f575b5050505050905060005b81518110156104a4576000610440610833565b600001600084848151811061045757610457610de9565b6020026020010151815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550808061049c90610e15565b91505061042d565b50826104ae610833565b60010190805190602001906104c492919061092a565b50816104ce610833565b60020190805190602001906104e4929190610975565b5060005b83518110156105af57600084828151811061050557610505610de9565b60200260200101519050600084838151811061052357610523610de9565b6020026020010151905080610536610833565b6000848152602091825260409081902080546001600160a01b0319166001600160a01b039485161790558051858152928416918301919091527fefe884cc7f82a6cf3cf68f64221519dcf96b5cae9048e1bb008ee32cd05aaa91910160405180910390a1505080806105a790610e15565b9150506104e8565b50505050565b600054610100900460ff16158080156105d55750600054600160ff909116105b806105ef5750303b1580156105ef575060005460ff166001145b6106525760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610203565b6000805460ff191660011790558015610675576000805461ff0019166101001790555b600061067f610902565b6001600160a01b0316036106e05760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b6064820152608401610203565b6106e982610867565b801561072f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b606061073d610833565b60010180548060200260200160405190810160405280929190818152602001828054801561037157602002820191906000526020600020905b815481526020019060010190808311610776575050505050905090565b3361079c61024f565b6001600160a01b0316146107c25760405162461bcd60e51b815260040161020390610db4565b6001600160a01b0381166108275760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610203565b61083081610867565b50565b60008061086160017fcc50d67f473b12f6909b9d9962760e48c561299d97e9c3ef3fb57160167be922610e2e565b92915050565b60006108716108d4565b546001600160a01b03169050816108866108d4565b80546001600160a01b0319166001600160a01b03928316179055604051838216918316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008061086160017f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa610e2e565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610259565b828054828255906000526020600020908101928215610965579160200282015b8281111561096557825182559160200191906001019061094a565b506109719291506109ca565b5090565b828054828255906000526020600020908101928215610965579160200282015b8281111561096557825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610995565b5b8082111561097157600081556001016109cb565b6000602082840312156109f157600080fd5b5035919050565b600080600060408486031215610a0d57600080fd5b83359250602084013567ffffffffffffffff80821115610a2c57600080fd5b818601915086601f830112610a4057600080fd5b813581811115610a4f57600080fd5b876020828501011115610a6157600080fd5b6020830194508093505050509250925092565b60008083601f840112610a8657600080fd5b50813567ffffffffffffffff811115610a9e57600080fd5b6020830191508360208260051b8501011115610ab957600080fd5b9250929050565b60008060008060408587031215610ad657600080fd5b843567ffffffffffffffff80821115610aee57600080fd5b610afa88838901610a74565b90965094506020870135915080821115610b1357600080fd5b50610b2087828801610a74565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b81811015610b6d5783516001600160a01b031683529284019291840191600101610b48565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610bb857610bb8610b79565b604052919050565b600067ffffffffffffffff821115610bda57610bda610b79565b5060051b60200190565b80356001600160a01b0381168114610bfb57600080fd5b919050565b600082601f830112610c1157600080fd5b81356020610c26610c2183610bc0565b610b8f565b82815260059290921b84018101918181019086841115610c4557600080fd5b8286015b84811015610c6757610c5a81610be4565b8352918301918301610c49565b509695505050505050565b60008060408385031215610c8557600080fd5b823567ffffffffffffffff80821115610c9d57600080fd5b818501915085601f830112610cb157600080fd5b81356020610cc1610c2183610bc0565b82815260059290921b84018101918181019089841115610ce057600080fd5b948201945b83861015610cfe57853582529482019490820190610ce5565b96505086013592505080821115610d1457600080fd5b50610d2185828601610c00565b9150509250929050565b600060208284031215610d3d57600080fd5b610d4682610be4565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610b6d57835183529284019291840191600101610d69565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610e2757610e27610dff565b5060010190565b8181038181111561086157610861610dff56fea2646970667358221220db52a70d9afc90344adaa051c90e3873096248e5db785d8c64fdd912c7f3f42264736f6c63430008130033",
  "devdoc": {
    "details": "This contract is used through the `./mixins/MixinAddressResolver.sol`. The names of the contracts that need to be imported into this contract are managed in `./libraries/Contracts.sol`.",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "areAddressesImported(bytes32[],address[])": {
        "returns": {
          "_0": "The boolean if the addresses are imported or not"
        }
      },
      "getAddress(bytes32)": {
        "details": "This method is used when the caller doesn't need to get an error if the address in the name is not imported.",
        "returns": {
          "_0": "The contract address"
        }
      },
      "getAddress(bytes32,string)": {
        "details": "This method is used when the caller need to get an error if the address in the name is not imported.",
        "returns": {
          "_0": "The contract address"
        }
      },
      "getAddresses()": {
        "returns": {
          "_0": "Array with the contract address"
        }
      },
      "getNames()": {
        "returns": {
          "_0": "Array with the contract address"
        }
      },
      "getRevision()": {
        "returns": {
          "_0": "The revision number"
        }
      },
      "importAddresses(bytes32[],address[])": {
        "details": "All addresses in the contract are overridden by `_addresses` in the argument."
      },
      "initialize(address)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController.",
        "params": {
          "_owner": "The address of the contract owner"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "areAddressesImported(bytes32[],address[])": {
        "notice": "Gets if the addresses are imported."
      },
      "getAddress(bytes32)": {
        "notice": "Gets the imported contract addresses for the name."
      },
      "getAddress(bytes32,string)": {
        "notice": "Gets the imported contract addresses for the name with error."
      },
      "getAddresses()": {
        "notice": "Gets the all imported contract addresses."
      },
      "getNames()": {
        "notice": "Gets the all imported contract names."
      },
      "getRevision()": {
        "notice": "Gets the revision number of the contract"
      },
      "importAddresses(bytes32[],address[])": {
        "notice": "Imports contract addresses."
      },
      "initialize(address)": {
        "notice": "Initializes the contract."
      }
    },
    "notice": "Implements the logic to manage the contract addresses. This contract store the contract name and contract address. When the contract calls other contracts, the caller contract gets the contract address from this contract. However, the contract addresses are cashed into the caller contract through the `MixinAddressResolver.sol` at the deployment, so the caller doesn't need to call this contract each time it calls other contracts.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1445,
        "contract": "contracts/protocol/AddressResolver.sol:AddressResolver",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1448,
        "contract": "contracts/protocol/AddressResolver.sol:AddressResolver",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}