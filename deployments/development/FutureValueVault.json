{
  "address": "0xC88725e639EE23A65eb2a67A7d9a92faa6f432BA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "addBorrowFutureValue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "addLendFutureValue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getFutureValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "futureValue",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getTotalBorrowingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getTotalLendingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "hasFutureValueInPastMaturity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lendingMarket",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_activeMaturity",
          "type": "uint256"
        }
      ],
      "name": "removeFutureValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "removedAmount",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x763e41d0816d497cd7df4a2f60fbbf012f27f304d1947e25009fc7db42ca12c8",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0xC88725e639EE23A65eb2a67A7d9a92faa6f432BA",
    "transactionIndex": 56,
    "gasUsed": "696612",
    "logsBloom": "0x
    "blockHash": "0xc18a7143e6d615726de70da9a97d9d85cf428868eb51872e9b39ab6e02f5231f",
    "transactionHash": "0x763e41d0816d497cd7df4a2f60fbbf012f27f304d1947e25009fc7db42ca12c8",
    "logs": [],
    "blockNumber": 7950626,
    "cumulativeGasUsed": "11423544",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c342d2bd1c99543a927721b4c81728b9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"addBorrowFutureValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"addLendFutureValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getFutureValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"futureValue\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getTotalBorrowingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getTotalLendingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"hasFutureValueInPastMaturity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lendingMarket\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_activeMaturity\",\"type\":\"uint256\"}],\"name\":\"removeFutureValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"removedAmount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addBorrowFutureValue(address,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount to add\",\"_maturity\":\"The maturity of the market\",\"_user\":\"User's address\"}},\"addLendFutureValue(address,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount to add\",\"_maturity\":\"The maturity of the market\",\"_user\":\"User's address\"}},\"getFutureValue(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"futureValue\":\"The future value\",\"maturity\":\"The maturity of the market that the future value was added\"}},\"getTotalBorrowingSupply(uint256)\":{\"params\":{\"_maturity\":\"The maturity of the market\"}},\"getTotalLendingSupply(uint256)\":{\"params\":{\"_maturity\":\"The maturity of the market\"}},\"hasFutureValueInPastMaturity(address,uint256)\":{\"params\":{\"_maturity\":\"The maturity of the market\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The boolean if the lending market is initialized or not\"}},\"initialize(address)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController.\",\"params\":{\"_lendingMarket\":\"The address of the Lending Market contract\"}},\"removeFutureValue(address,uint256)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"maturity\":\"Maturity of future value\",\"removedAmount\":\"Removed future value amount\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addBorrowFutureValue(address,uint256,uint256)\":{\"notice\":\"Adds the future value amount for borrowing deals.\"},\"addLendFutureValue(address,uint256,uint256)\":{\"notice\":\"Adds the future value amount for lending deals.\"},\"getFutureValue(address)\":{\"notice\":\"Gets the future value of the account.\"},\"getTotalBorrowingSupply(uint256)\":{\"notice\":\"Gets the total borrowing supply.\"},\"getTotalLendingSupply(uint256)\":{\"notice\":\"Gets the total lending supply.\"},\"hasFutureValueInPastMaturity(address,uint256)\":{\"notice\":\"Gets if the account has the future value amount in the selected maturity.\"},\"initialize(address)\":{\"notice\":\"Initializes the contract.\"},\"removeFutureValue(address,uint256)\":{\"notice\":\"Remove all future values if there is an amount in the past maturity.\"}},\"notice\":\"Implements the management of the future value as an amount for Lending deals in each currency.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FutureValueVault.sol\":\"FutureValueVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/FutureValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {FutureValueVaultStorage as Storage} from \\\"./storages/FutureValueVaultStorage.sol\\\";\\n// interfaces\\nimport {IFutureValueVault} from \\\"./interfaces/IFutureValueVault.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"./types/ProtocolTypes.sol\\\";\\n// utils\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\n\\n/**\\n * @notice Implements the management of the future value as an amount for Lending deals in each currency.\\n */\\ncontract FutureValueVault is IFutureValueVault, Proxyable {\\n    event Transfer(address indexed from, address indexed to, int256 value);\\n\\n    /**\\n     * @notice Modifier to make a function callable only by lending market.\\n     */\\n    modifier onlyLendingMarket() {\\n        require(Storage.slot().lendingMarket == msg.sender, \\\"Caller is not the lending market\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\\n     * @param _lendingMarket The address of the Lending Market contract\\n     */\\n    function initialize(address _lendingMarket) external initializer onlyBeacon {\\n        Storage.slot().lendingMarket = _lendingMarket;\\n    }\\n\\n    /**\\n     * @notice Gets the total lending supply.\\n     * @param _maturity The maturity of the market\\n     */\\n    function getTotalLendingSupply(uint256 _maturity) external view override returns (uint256) {\\n        return Storage.slot().totalLendingSupply[_maturity];\\n    }\\n\\n    /**\\n     * @notice Gets the total borrowing supply.\\n     * @param _maturity The maturity of the market\\n     */\\n    function getTotalBorrowingSupply(uint256 _maturity) external view override returns (uint256) {\\n        return Storage.slot().totalBorrowingSupply[_maturity];\\n    }\\n\\n    /**\\n     * @notice Gets the future value of the account.\\n     * @param _user User's address\\n     * @return futureValue The future value\\n     * @return maturity The maturity of the market that the future value was added\\n     */\\n    function getFutureValue(address _user)\\n        public\\n        view\\n        override\\n        returns (int256 futureValue, uint256 maturity)\\n    {\\n        return (Storage.slot().balances[_user], Storage.slot().futureValueMaturities[_user]);\\n    }\\n\\n    /**\\n     * @notice Gets if the account has the future value amount in the selected maturity.\\n     * @param _user User's address\\n     * @param _maturity The maturity of the market\\n     * @return The boolean if the lending market is initialized or not\\n     */\\n    function hasFutureValueInPastMaturity(address _user, uint256 _maturity)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        if (Storage.slot().futureValueMaturities[_user] == _maturity) {\\n            return false;\\n        } else {\\n            return Storage.slot().balances[_user] != 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds the future value amount for borrowing deals.\\n     * @param _user User's address\\n     * @param _amount The amount to add\\n     * @param _maturity The maturity of the market\\n     */\\n    function addBorrowFutureValue(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _maturity\\n    ) external override onlyLendingMarket returns (bool) {\\n        require(_user != address(0), \\\"add to the zero address of borrower\\\");\\n        require(\\n            !hasFutureValueInPastMaturity(_user, _maturity),\\n            \\\"borrower has the future value in past maturity\\\"\\n        );\\n\\n        Storage.slot().futureValueMaturities[_user] = _maturity;\\n        Storage.slot().totalBorrowingSupply[_maturity] += _amount;\\n        Storage.slot().balances[_user] -= int256(_amount);\\n        emit Transfer(address(0), _user, -int256(_amount));\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Adds the future value amount for lending deals.\\n     * @param _user User's address\\n     * @param _amount The amount to add\\n     * @param _maturity The maturity of the market\\n     */\\n    function addLendFutureValue(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _maturity\\n    ) external override onlyLendingMarket returns (bool) {\\n        require(_user != address(0), \\\"add to the zero address of lender\\\");\\n        require(\\n            !hasFutureValueInPastMaturity(_user, _maturity),\\n            \\\"lender has the future value in past maturity\\\"\\n        );\\n\\n        Storage.slot().futureValueMaturities[_user] = _maturity;\\n        Storage.slot().totalLendingSupply[_maturity] += _amount;\\n        Storage.slot().balances[_user] += int256(_amount);\\n        emit Transfer(address(0), _user, int256(_amount));\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Remove all future values if there is an amount in the past maturity.\\n     * @param _user User's address\\n     * @return removedAmount Removed future value amount\\n     * @return maturity Maturity of future value\\n     */\\n    function removeFutureValue(address _user, uint256 _activeMaturity)\\n        external\\n        override\\n        onlyLendingMarket\\n        returns (int256 removedAmount, uint256 maturity)\\n    {\\n        if (Storage.slot().futureValueMaturities[_user] != _activeMaturity) {\\n            removedAmount = Storage.slot().balances[_user];\\n            maturity = Storage.slot().futureValueMaturities[_user];\\n\\n            if (removedAmount >= 0) {\\n                Storage.slot().totalLendingSupply[maturity] -= uint256(removedAmount);\\n            } else {\\n                Storage.slot().totalBorrowingSupply[maturity] -= uint256(-removedAmount);\\n            }\\n\\n            Storage.slot().balances[_user] = 0;\\n\\n            emit Transfer(_user, address(0), removedAmount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc228558133dc2407bfcff88b9ef3a4cb833111eacd91dd2c1372a1de662f9e6b\",\"license\":\"MIT\"},\"contracts/interfaces/IFutureValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IFutureValueVault {\\n    function getTotalLendingSupply(uint256 _maturity) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(uint256 _maturity) external view returns (uint256);\\n\\n    function getFutureValue(address _user)\\n        external\\n        view\\n        returns (int256 futureValue, uint256 maturity);\\n\\n    function hasFutureValueInPastMaturity(address _user, uint256 _maturity)\\n        external\\n        view\\n        returns (bool);\\n\\n    function addBorrowFutureValue(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _maturity\\n    ) external returns (bool);\\n\\n    function addLendFutureValue(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _maturity\\n    ) external returns (bool);\\n\\n    function removeFutureValue(address _user, uint256 _maturity)\\n        external\\n        returns (int256 removedAmount, uint256 maturity);\\n}\\n\",\"keccak256\":\"0x788e781b6d43bd08e0619a0eec0479477316d42ffca8f1b3331e95a7546188ac\",\"license\":\"MIT\"},\"contracts/storages/FutureValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary FutureValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.futureValueVault\\\");\\n\\n    struct Storage {\\n        address lendingMarket;\\n        // Mapping from user to balances\\n        mapping(address => int256) balances;\\n        // Mapping from user to maturity\\n        mapping(address => uint256) futureValueMaturities;\\n        // Mapping from maturity to total amount supplied of lending\\n        mapping(uint256 => uint256) totalLendingSupply;\\n        // Mapping from maturity to total amount supplied of borrowing\\n        mapping(uint256 => uint256) totalBorrowingSupply;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a967d739a0e4620471cf77de5c4288e781e55a6b5e8a1081028ea654f9c06f9\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant BP = 10000; // basis point\\n    uint256 public constant PCT = 10000; // percentage point in basis\\n\\n    uint256 internal constant DAYS_IN_YEAR = 365;\\n    uint256 internal constant SECONDS_IN_YEAR = 31557600;\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n}\\n\",\"keccak256\":\"0xebb47b6088b7fa52e4cdab8da1f7ea06308d829aed07ceae13847cbeecea09ba\",\"license\":\"MIT\"},\"contracts/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0xe59cd60631c7c754ed6b77caa6f3a06301ef0df07881a3dcfa85124abc1890b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610ba4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a46971ad1161005b578063a46971ad14610111578063ae100e6d14610124578063c4d66de814610137578063e224e8c01461014c57600080fd5b806308482e5e1461008d5780630e1b435e146100b557806317e2d96a146100dd578063870febf0146100fe575b600080fd5b6100a061009b3660046109bf565b61015f565b60405190151581526020015b60405180910390f35b6100c86100c33660046109f2565b61034d565b604080519283526020830191909152016100ac565b6100f06100eb366004610a14565b6103a3565b6040519081526020016100ac565b6100f061010c366004610a14565b6103c1565b6100a061011f3660046109bf565b6103df565b6100c8610132366004610a2d565b6105c0565b61014a6101453660046109f2565b610752565b005b6100a061015a366004610a2d565b610919565b60003361016a61097f565b546001600160a01b03161461019a5760405162461bcd60e51b815260040161019190610a57565b60405180910390fd5b6001600160a01b0384166101fa5760405162461bcd60e51b815260206004820152602160248201527f61646420746f20746865207a65726f2061646472657373206f66206c656e64656044820152603960f91b6064820152608401610191565b6102048483610919565b156102665760405162461bcd60e51b815260206004820152602c60248201527f6c656e6465722068617320746865206675747572652076616c756520696e207060448201526b617374206d6174757269747960a01b6064820152608401610191565b8161026f61097f565b6001600160a01b038616600090815260029190910160205260409020558261029561097f565b600301600084815260200190815260200160002060008282546102b89190610aa2565b909155508390506102c761097f565b6001016000866001600160a01b03166001600160a01b0316815260200190815260200160002060008282546102fc9190610aba565b90915550506040518381526001600160a01b038516906000907f8b0c34a52f9e28d78caaa7066cd047b398dae74941a208b77777420f492bd7e1906020015b60405180910390a35060019392505050565b60008061035861097f565b6001600160a01b0384166000908152600191909101602052604090205461037d61097f565b6001600160a01b0390941660009081526002949094016020526040909320549293915050565b60006103ad61097f565b600092835260030160205250604090205490565b60006103cb61097f565b600092835260040160205250604090205490565b6000336103ea61097f565b546001600160a01b0316146104115760405162461bcd60e51b815260040161019190610a57565b6001600160a01b0384166104735760405162461bcd60e51b815260206004820152602360248201527f61646420746f20746865207a65726f2061646472657373206f6620626f72726f6044820152623bb2b960e91b6064820152608401610191565b61047d8483610919565b156104e15760405162461bcd60e51b815260206004820152602e60248201527f626f72726f7765722068617320746865206675747572652076616c756520696e60448201526d2070617374206d6174757269747960901b6064820152608401610191565b816104ea61097f565b6001600160a01b038616600090815260029190910160205260409020558261051061097f565b600401600084815260200190815260200160002060008282546105339190610aa2565b9091555083905061054261097f565b6001016000866001600160a01b03166001600160a01b0316815260200190815260200160002060008282546105779190610afb565b90915550506001600160a01b03841660007f8b0c34a52f9e28d78caaa7066cd047b398dae74941a208b77777420f492bd7e16105b286610b3a565b60405190815260200161033b565b600080336105cc61097f565b546001600160a01b0316146105f35760405162461bcd60e51b815260040161019190610a57565b826105fc61097f565b6001600160a01b038616600090815260029190910160205260409020541461074b5761062661097f565b6001600160a01b03851660009081526001919091016020526040902054915061064d61097f565b6001600160a01b03851660009081526002919091016020526040812054915082126106a9578161067b61097f565b6003016000838152602001908152602001600020600082825461069e9190610b57565b909155506106e39050565b6106b282610b3a565b6106ba61097f565b600401600083815260200190815260200160002060008282546106dd9190610b57565b90915550505b60006106ed61097f565b6001600160a01b038616600081815260019290920160205260408083209390935591519091907f8b0c34a52f9e28d78caaa7066cd047b398dae74941a208b77777420f492bd7e1906107429086815260200190565b60405180910390a35b9250929050565b600054610100900460ff16158080156107725750600054600160ff909116105b8061078c5750303b15801561078c575060005460ff166001145b6107ef5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610191565b6000805460ff191660011790558015610812576000805461ff0019166101001790555b60006108457fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b031614156108a85760405162461bcd60e51b815260206004820152602360248201527f4d7573742062652063616c6c65642066726f6d20626561636f6e20636f6e74726044820152621858dd60ea1b6064820152608401610191565b816108b161097f565b80546001600160a01b0319166001600160a01b03929092169190911790558015610915576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60008161092461097f565b6001600160a01b03851660009081526002919091016020526040902054141561094f57506000610979565b61095761097f565b6001600160a01b03841660009081526001919091016020526040902054151590505b92915050565b7fd1b4fbfb8f78bdad30892554423aedac9635765ae463e7c2b7953fa50219190e90565b80356001600160a01b03811681146109ba57600080fd5b919050565b6000806000606084860312156109d457600080fd5b6109dd846109a3565b95602085013595506040909401359392505050565b600060208284031215610a0457600080fd5b610a0d826109a3565b9392505050565b600060208284031215610a2657600080fd5b5035919050565b60008060408385031215610a4057600080fd5b610a49836109a3565b946020939093013593505050565b6020808252818101527f43616c6c6572206973206e6f7420746865206c656e64696e67206d61726b6574604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115610ab557610ab5610a8c565b500190565b600080821280156001600160ff1b0384900385131615610adc57610adc610a8c565b600160ff1b8390038412811615610af557610af5610a8c565b50500190565b60008083128015600160ff1b850184121615610b1957610b19610a8c565b6001600160ff1b0384018313811615610b3457610b34610a8c565b50500390565b6000600160ff1b821415610b5057610b50610a8c565b5060000390565b600082821015610b6957610b69610a8c565b50039056fea26469706673582212209e8e72d55f4363dfcf3f2780811bc5a4f0f53afea278704d7b079a2453d5e43e64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063a46971ad1161005b578063a46971ad14610111578063ae100e6d14610124578063c4d66de814610137578063e224e8c01461014c57600080fd5b806308482e5e1461008d5780630e1b435e146100b557806317e2d96a146100dd578063870febf0146100fe575b600080fd5b6100a061009b3660046109bf565b61015f565b60405190151581526020015b60405180910390f35b6100c86100c33660046109f2565b61034d565b604080519283526020830191909152016100ac565b6100f06100eb366004610a14565b6103a3565b6040519081526020016100ac565b6100f061010c366004610a14565b6103c1565b6100a061011f3660046109bf565b6103df565b6100c8610132366004610a2d565b6105c0565b61014a6101453660046109f2565b610752565b005b6100a061015a366004610a2d565b610919565b60003361016a61097f565b546001600160a01b03161461019a5760405162461bcd60e51b815260040161019190610a57565b60405180910390fd5b6001600160a01b0384166101fa5760405162461bcd60e51b815260206004820152602160248201527f61646420746f20746865207a65726f2061646472657373206f66206c656e64656044820152603960f91b6064820152608401610191565b6102048483610919565b156102665760405162461bcd60e51b815260206004820152602c60248201527f6c656e6465722068617320746865206675747572652076616c756520696e207060448201526b617374206d6174757269747960a01b6064820152608401610191565b8161026f61097f565b6001600160a01b038616600090815260029190910160205260409020558261029561097f565b600301600084815260200190815260200160002060008282546102b89190610aa2565b909155508390506102c761097f565b6001016000866001600160a01b03166001600160a01b0316815260200190815260200160002060008282546102fc9190610aba565b90915550506040518381526001600160a01b038516906000907f8b0c34a52f9e28d78caaa7066cd047b398dae74941a208b77777420f492bd7e1906020015b60405180910390a35060019392505050565b60008061035861097f565b6001600160a01b0384166000908152600191909101602052604090205461037d61097f565b6001600160a01b0390941660009081526002949094016020526040909320549293915050565b60006103ad61097f565b600092835260030160205250604090205490565b60006103cb61097f565b600092835260040160205250604090205490565b6000336103ea61097f565b546001600160a01b0316146104115760405162461bcd60e51b815260040161019190610a57565b6001600160a01b0384166104735760405162461bcd60e51b815260206004820152602360248201527f61646420746f20746865207a65726f2061646472657373206f6620626f72726f6044820152623bb2b960e91b6064820152608401610191565b61047d8483610919565b156104e15760405162461bcd60e51b815260206004820152602e60248201527f626f72726f7765722068617320746865206675747572652076616c756520696e60448201526d2070617374206d6174757269747960901b6064820152608401610191565b816104ea61097f565b6001600160a01b038616600090815260029190910160205260409020558261051061097f565b600401600084815260200190815260200160002060008282546105339190610aa2565b9091555083905061054261097f565b6001016000866001600160a01b03166001600160a01b0316815260200190815260200160002060008282546105779190610afb565b90915550506001600160a01b03841660007f8b0c34a52f9e28d78caaa7066cd047b398dae74941a208b77777420f492bd7e16105b286610b3a565b60405190815260200161033b565b600080336105cc61097f565b546001600160a01b0316146105f35760405162461bcd60e51b815260040161019190610a57565b826105fc61097f565b6001600160a01b038616600090815260029190910160205260409020541461074b5761062661097f565b6001600160a01b03851660009081526001919091016020526040902054915061064d61097f565b6001600160a01b03851660009081526002919091016020526040812054915082126106a9578161067b61097f565b6003016000838152602001908152602001600020600082825461069e9190610b57565b909155506106e39050565b6106b282610b3a565b6106ba61097f565b600401600083815260200190815260200160002060008282546106dd9190610b57565b90915550505b60006106ed61097f565b6001600160a01b038616600081815260019290920160205260408083209390935591519091907f8b0c34a52f9e28d78caaa7066cd047b398dae74941a208b77777420f492bd7e1906107429086815260200190565b60405180910390a35b9250929050565b600054610100900460ff16158080156107725750600054600160ff909116105b8061078c5750303b15801561078c575060005460ff166001145b6107ef5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610191565b6000805460ff191660011790558015610812576000805461ff0019166101001790555b60006108457fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b031614156108a85760405162461bcd60e51b815260206004820152602360248201527f4d7573742062652063616c6c65642066726f6d20626561636f6e20636f6e74726044820152621858dd60ea1b6064820152608401610191565b816108b161097f565b80546001600160a01b0319166001600160a01b03929092169190911790558015610915576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60008161092461097f565b6001600160a01b03851660009081526002919091016020526040902054141561094f57506000610979565b61095761097f565b6001600160a01b03841660009081526001919091016020526040902054151590505b92915050565b7fd1b4fbfb8f78bdad30892554423aedac9635765ae463e7c2b7953fa50219190e90565b80356001600160a01b03811681146109ba57600080fd5b919050565b6000806000606084860312156109d457600080fd5b6109dd846109a3565b95602085013595506040909401359392505050565b600060208284031215610a0457600080fd5b610a0d826109a3565b9392505050565b600060208284031215610a2657600080fd5b5035919050565b60008060408385031215610a4057600080fd5b610a49836109a3565b946020939093013593505050565b6020808252818101527f43616c6c6572206973206e6f7420746865206c656e64696e67206d61726b6574604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115610ab557610ab5610a8c565b500190565b600080821280156001600160ff1b0384900385131615610adc57610adc610a8c565b600160ff1b8390038412811615610af557610af5610a8c565b50500190565b60008083128015600160ff1b850184121615610b1957610b19610a8c565b6001600160ff1b0384018313811615610b3457610b34610a8c565b50500390565b6000600160ff1b821415610b5057610b50610a8c565b5060000390565b600082821015610b6957610b69610a8c565b50039056fea26469706673582212209e8e72d55f4363dfcf3f2780811bc5a4f0f53afea278704d7b079a2453d5e43e64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addBorrowFutureValue(address,uint256,uint256)": {
        "params": {
          "_amount": "The amount to add",
          "_maturity": "The maturity of the market",
          "_user": "User's address"
        }
      },
      "addLendFutureValue(address,uint256,uint256)": {
        "params": {
          "_amount": "The amount to add",
          "_maturity": "The maturity of the market",
          "_user": "User's address"
        }
      },
      "getFutureValue(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "futureValue": "The future value",
          "maturity": "The maturity of the market that the future value was added"
        }
      },
      "getTotalBorrowingSupply(uint256)": {
        "params": {
          "_maturity": "The maturity of the market"
        }
      },
      "getTotalLendingSupply(uint256)": {
        "params": {
          "_maturity": "The maturity of the market"
        }
      },
      "hasFutureValueInPastMaturity(address,uint256)": {
        "params": {
          "_maturity": "The maturity of the market",
          "_user": "User's address"
        },
        "returns": {
          "_0": "The boolean if the lending market is initialized or not"
        }
      },
      "initialize(address)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController.",
        "params": {
          "_lendingMarket": "The address of the Lending Market contract"
        }
      },
      "removeFutureValue(address,uint256)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "maturity": "Maturity of future value",
          "removedAmount": "Removed future value amount"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addBorrowFutureValue(address,uint256,uint256)": {
        "notice": "Adds the future value amount for borrowing deals."
      },
      "addLendFutureValue(address,uint256,uint256)": {
        "notice": "Adds the future value amount for lending deals."
      },
      "getFutureValue(address)": {
        "notice": "Gets the future value of the account."
      },
      "getTotalBorrowingSupply(uint256)": {
        "notice": "Gets the total borrowing supply."
      },
      "getTotalLendingSupply(uint256)": {
        "notice": "Gets the total lending supply."
      },
      "hasFutureValueInPastMaturity(address,uint256)": {
        "notice": "Gets if the account has the future value amount in the selected maturity."
      },
      "initialize(address)": {
        "notice": "Initializes the contract."
      },
      "removeFutureValue(address,uint256)": {
        "notice": "Remove all future values if there is an amount in the past maturity."
      }
    },
    "notice": "Implements the management of the future value as an amount for Lending deals in each currency.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 790,
        "contract": "contracts/FutureValueVault.sol:FutureValueVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 793,
        "contract": "contracts/FutureValueVault.sol:FutureValueVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}