{
  "address": "0x411430417e56eE563eC69e5172cB19c130f21571",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "addBorrowFutureValue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "addLendFutureValue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getFutureValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "futureValue",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getTotalBorrowingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getTotalLendingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "hasFutureValueInPastMaturity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_activeMaturity",
          "type": "uint256"
        }
      ],
      "name": "removeFutureValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "removedAmount",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "currentAmount",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x795c19a365d443a66d0303d879d859c2a7481fc599b8446f747298b47413abe2",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x411430417e56eE563eC69e5172cB19c130f21571",
    "transactionIndex": 50,
    "gasUsed": "1081904",
    "logsBloom": "0x
    "blockHash": "0x69e7841e0a289337d0540873eea1608e6d3957174389bf6e331f773df699bfdd",
    "transactionHash": "0x795c19a365d443a66d0303d879d859c2a7481fc599b8446f747298b47413abe2",
    "logs": [],
    "blockNumber": 8017955,
    "cumulativeGasUsed": "10997698",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "87cfba3f2a70cb5f9aac2e4a848dedef",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"addBorrowFutureValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"addLendFutureValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getFutureValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"futureValue\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getTotalBorrowingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getTotalLendingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"hasFutureValueInPastMaturity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_activeMaturity\",\"type\":\"uint256\"}],\"name\":\"removeFutureValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"removedAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"currentAmount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptedContracts()\":{\"details\":\"The contact name listed in this method is also needed to be listed `requiredContracts` method.\"},\"addBorrowFutureValue(address,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount to add\",\"_maturity\":\"The maturity of the market\",\"_user\":\"User's address\"}},\"addLendFutureValue(address,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount to add\",\"_maturity\":\"The maturity of the market\",\"_user\":\"User's address\"}},\"getFutureValue(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"futureValue\":\"The future value\",\"maturity\":\"The maturity of the market that the future value was added\"}},\"getTotalBorrowingSupply(uint256)\":{\"params\":{\"_maturity\":\"The maturity of the market\"}},\"getTotalLendingSupply(uint256)\":{\"params\":{\"_maturity\":\"The maturity of the market\"}},\"hasFutureValueInPastMaturity(address,uint256)\":{\"params\":{\"_maturity\":\"The maturity of the market\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The boolean if the lending market is initialized or not\"}},\"initialize(address)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController.\",\"params\":{\"_resolver\":\"The address of the Address Resolver contract\"}},\"removeFutureValue(address,uint256)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"currentAmount\":\"Current future value amount after update\",\"maturity\":\"Maturity of future value\",\"removedAmount\":\"Removed future value amount\"}},\"requiredContracts()\":{\"details\":\"The contract name list is in `./libraries/Contracts.sol`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptedContracts()\":{\"notice\":\"Returns contract names that can call this contract.\"},\"addBorrowFutureValue(address,uint256,uint256)\":{\"notice\":\"Adds the future value amount for borrowing deals.\"},\"addLendFutureValue(address,uint256,uint256)\":{\"notice\":\"Adds the future value amount for lending deals.\"},\"getFutureValue(address)\":{\"notice\":\"Gets the future value of the account.\"},\"getTotalBorrowingSupply(uint256)\":{\"notice\":\"Gets the total borrowing supply.\"},\"getTotalLendingSupply(uint256)\":{\"notice\":\"Gets the total lending supply.\"},\"hasFutureValueInPastMaturity(address,uint256)\":{\"notice\":\"Gets if the account has the future value amount in the selected maturity.\"},\"initialize(address)\":{\"notice\":\"Initializes the contract.\"},\"removeFutureValue(address,uint256)\":{\"notice\":\"Remove all future values if there is an amount in the past maturity.\"},\"requiredContracts()\":{\"notice\":\"Returns the contract names used in this contract.\"}},\"notice\":\"Implements the management of the future value as an amount for Lending deals in each currency.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FutureValueVault.sol\":\"FutureValueVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/FutureValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {FutureValueVaultStorage as Storage} from \\\"./storages/FutureValueVaultStorage.sol\\\";\\n// interfaces\\nimport {IFutureValueVault} from \\\"./interfaces/IFutureValueVault.sol\\\";\\n// libraries\\nimport {Contracts} from \\\"./libraries/Contracts.sol\\\";\\n// mixins\\nimport {MixinAddressResolver} from \\\"./mixins/MixinAddressResolver.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"./types/ProtocolTypes.sol\\\";\\n// utils\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\n\\n/**\\n * @notice Implements the management of the future value as an amount for Lending deals in each currency.\\n */\\ncontract FutureValueVault is IFutureValueVault, MixinAddressResolver, Proxyable {\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function initialize(address _resolver) external initializer onlyBeacon {\\n        registerAddressResolver(_resolver);\\n        buildCache();\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](1);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](1);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n    }\\n\\n    /**\\n     * @notice Gets the total lending supply.\\n     * @param _maturity The maturity of the market\\n     */\\n    function getTotalLendingSupply(uint256 _maturity) external view override returns (uint256) {\\n        return Storage.slot().totalLendingSupply[_maturity];\\n    }\\n\\n    /**\\n     * @notice Gets the total borrowing supply.\\n     * @param _maturity The maturity of the market\\n     */\\n    function getTotalBorrowingSupply(uint256 _maturity) external view override returns (uint256) {\\n        return Storage.slot().totalBorrowingSupply[_maturity];\\n    }\\n\\n    /**\\n     * @notice Gets the future value of the account.\\n     * @param _user User's address\\n     * @return futureValue The future value\\n     * @return maturity The maturity of the market that the future value was added\\n     */\\n    function getFutureValue(address _user)\\n        public\\n        view\\n        override\\n        returns (int256 futureValue, uint256 maturity)\\n    {\\n        return (Storage.slot().balances[_user], Storage.slot().futureValueMaturities[_user]);\\n    }\\n\\n    /**\\n     * @notice Gets if the account has the future value amount in the selected maturity.\\n     * @param _user User's address\\n     * @param _maturity The maturity of the market\\n     * @return The boolean if the lending market is initialized or not\\n     */\\n    function hasFutureValueInPastMaturity(address _user, uint256 _maturity)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        if (Storage.slot().futureValueMaturities[_user] == _maturity) {\\n            return false;\\n        } else {\\n            return Storage.slot().balances[_user] != 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds the future value amount for lending deals.\\n     * @param _user User's address\\n     * @param _amount The amount to add\\n     * @param _maturity The maturity of the market\\n     */\\n    function addLendFutureValue(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _maturity\\n    ) external override onlyAcceptedContracts returns (bool) {\\n        require(_user != address(0), \\\"add to the zero address of lender\\\");\\n        require(\\n            !hasFutureValueInPastMaturity(_user, _maturity),\\n            \\\"lender has the future value in past maturity\\\"\\n        );\\n\\n        Storage.slot().futureValueMaturities[_user] = _maturity;\\n        Storage.slot().totalLendingSupply[_maturity] += _amount;\\n        Storage.slot().balances[_user] += int256(_amount);\\n        emit Transfer(address(0), _user, int256(_amount));\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Adds the future value amount for borrowing deals.\\n     * @param _user User's address\\n     * @param _amount The amount to add\\n     * @param _maturity The maturity of the market\\n     */\\n    function addBorrowFutureValue(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _maturity\\n    ) external override onlyAcceptedContracts returns (bool) {\\n        require(_user != address(0), \\\"add to the zero address of borrower\\\");\\n        require(\\n            !hasFutureValueInPastMaturity(_user, _maturity),\\n            \\\"borrower has the future value in past maturity\\\"\\n        );\\n\\n        Storage.slot().futureValueMaturities[_user] = _maturity;\\n        Storage.slot().totalBorrowingSupply[_maturity] += _amount;\\n        Storage.slot().balances[_user] -= int256(_amount);\\n        emit Transfer(address(0), _user, -int256(_amount));\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Remove all future values if there is an amount in the past maturity.\\n     * @param _user User's address\\n     * @return removedAmount Removed future value amount\\n     * @return currentAmount Current future value amount after update\\n     * @return maturity Maturity of future value\\n     */\\n    function removeFutureValue(address _user, uint256 _activeMaturity)\\n        external\\n        override\\n        onlyAcceptedContracts\\n        returns (\\n            int256 removedAmount,\\n            int256 currentAmount,\\n            uint256 maturity\\n        )\\n    {\\n        currentAmount = Storage.slot().balances[_user];\\n\\n        if (Storage.slot().futureValueMaturities[_user] != _activeMaturity && currentAmount != 0) {\\n            removedAmount = currentAmount;\\n            maturity = Storage.slot().futureValueMaturities[_user];\\n\\n            if (removedAmount >= 0) {\\n                Storage.slot().totalLendingSupply[maturity] -= uint256(removedAmount);\\n            } else {\\n                Storage.slot().totalBorrowingSupply[maturity] -= uint256(-removedAmount);\\n            }\\n\\n            Storage.slot().balances[_user] = 0;\\n            currentAmount = 0;\\n\\n            emit Transfer(_user, address(0), removedAmount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x52f85d895203be3bc7bac0b84df3e2730af09a915029205c69972a13b697dc5f\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IBeaconProxyController {\\n    event BeaconProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function deployFutureValueVault() external returns (address futureValueVault);\\n\\n    function deployLendingMarket(\\n        bytes32 _ccy,\\n        uint256 _genesisDate,\\n        uint256 _maturity\\n    ) external returns (address market);\\n}\\n\",\"keccak256\":\"0xc92a3f5ea6c065590788e5d3d7f259790c4f403e8f50af20ff1ea633badfd8e5\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Currency} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event AddSupportCurrency(bytes32 indexed ccy, string name, uint256 haircut);\\n    event UpdateSupportCurrency(bytes32 indexed ccy, bool isSupported);\\n\\n    event UpdateHaircut(bytes32 indexed ccy, uint256 haircut);\\n\\n    event AddPriceFeed(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n    event RemovePriceFeed(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256 amount);\\n\\n    function convertToETH(bytes32 _ccy, int256 _amount) external view returns (int256 amount);\\n\\n    function convertToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getCurrency(bytes32) external view returns (Currency memory);\\n\\n    function getEthDecimals(bytes32) external view returns (uint8);\\n\\n    function getUsdDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        address _ethPriceFeed,\\n        uint256 _haircut\\n    ) external;\\n\\n    function updateHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported) external;\\n}\\n\",\"keccak256\":\"0x67bdb82d0d6a1c353698a87f2bd6bc8aa9635dd8502ecdab420d1b7d2c567d23\",\"license\":\"MIT\"},\"contracts/interfaces/IFutureValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IFutureValueVault {\\n    event Transfer(address indexed from, address indexed to, int256 value);\\n\\n    function getTotalLendingSupply(uint256 _maturity) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(uint256 _maturity) external view returns (uint256);\\n\\n    function getFutureValue(address _user)\\n        external\\n        view\\n        returns (int256 futureValue, uint256 maturity);\\n\\n    function hasFutureValueInPastMaturity(address _user, uint256 _maturity)\\n        external\\n        view\\n        returns (bool);\\n\\n    function addLendFutureValue(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _maturity\\n    ) external returns (bool);\\n\\n    function addBorrowFutureValue(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _maturity\\n    ) external returns (bool);\\n\\n    function removeFutureValue(address _user, uint256 _maturity)\\n        external\\n        returns (\\n            int256 removedAmount,\\n            int256 currentAmount,\\n            uint256 maturity\\n        );\\n}\\n\",\"keccak256\":\"0xb1b5c4dc86b463b0952f2c902a5bbe0dbeb83df579a02a3f34d51d74e28f36bd\",\"license\":\"MIT\"},\"contracts/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {MaturityUnitPrice} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\\n    event CompoundFactorUpdated(\\n        bytes32 indexed ccy,\\n        uint256 compoundFactor,\\n        uint256 unitPrice,\\n        uint256 currentMaturity,\\n        uint256 previousMaturity\\n    );\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getMaturityUnitPrice(bytes32 ccy, uint256 maturity)\\n        external\\n        view\\n        returns (MaturityUnitPrice memory);\\n\\n    function getGenesisValueInFutureValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function registerCurrency(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor\\n    ) external;\\n\\n    function updateCompoundFactor(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice\\n    ) external;\\n\\n    function addGenesisValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x02169abaefd58d0a91ab1877a9adaba8928645ced58c13aefcff2cf7029770f2\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ILendingMarketController {\\n    event CreateLendingMarket(\\n        bytes32 indexed ccy,\\n        address indexed marketAddr,\\n        address futureValueVault,\\n        uint256 index,\\n        uint256 maturity\\n    );\\n    event RotateLendingMarkets(bytes32 ccy, uint256 oldMaturity, uint256 newMaturity);\\n    event PlaceOrder(\\n        address indexed maker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event FillOrder(\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        uint256 filledFutureValue\\n    );\\n    event FillOrdersAsync(\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 filledFutureValue\\n    );\\n    event CancelOrder(\\n        uint48 orderId,\\n        address indexed maker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarkets(bytes32 ccy) external view returns (address[] memory);\\n\\n    function getLendingMarket(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getBorrowUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getLendUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getMidUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getBorrowOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInETH(address user)\\n        external\\n        view\\n        returns (int256 totalPresentValue);\\n\\n    function calculateTotalFundsInETH(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 totalWorkingLendOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalEvaluatedClaimableAmount,\\n            uint256 totalLentAmount,\\n            uint256 totalWorkingBorrowOrdersAmount,\\n            uint256 totalObligationAmount,\\n            uint256 totalBorrowedAmount\\n        );\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor\\n    ) external;\\n\\n    function createLendingMarket(bytes32 ccy)\\n        external\\n        returns (address market, address futureValue);\\n\\n    function createOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndCreateOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function createLendOrderWithETH(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function depositAndCreateLendOrderWithETH(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _unitPrice\\n    ) external payable returns (bool);\\n\\n    function cancelOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint48 orderId\\n    ) external returns (bool);\\n\\n    function rotateLendingMarkets(bytes32 ccy) external;\\n\\n    function pauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function cleanAllOrders(address user) external;\\n\\n    function cleanOrders(bytes32 _ccy, address _user) external;\\n}\\n\",\"keccak256\":\"0x23c39bca9afae581abcf26f7fae90b23c2265eaa114523170f6f2280ae0248db\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ITokenVault {\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event RegisterCurrency(bytes32 ccy, address tokenAddress);\\n\\n    function isCovered(\\n        address user,\\n        bytes32 ccy,\\n        uint256 unsettledExp,\\n        ProtocolTypes.Side _unsettledOrderSide\\n    ) external view returns (bool);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256 maxWithdraw);\\n\\n    function getCoverage(address user) external view returns (uint256 coverage);\\n\\n    function getUnusedCollateral(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address party) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getCollateralParameters()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function setCollateralParameters(\\n        uint256 marginCallThresholdRate,\\n        uint256 autoLiquidationThresholdRate,\\n        uint256 liquidationPriceRate,\\n        uint256 minCollateralRate\\n    ) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositFrom(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addCollateral(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external;\\n\\n    function removeCollateral(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x550e69f9188bfd86fe78e827aeea08e5d3eddfd96d1798e8691f338ca665f38e\",\"license\":\"MIT\"},\"contracts/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE_VAULT = \\\"FutureValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0x49a27b1b2f9cb72c16a7a9066a3df4c5258738c5e0b40d2996e78b29130113c1\",\"license\":\"MIT\"},\"contracts/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/MixinAddressResolverStorage.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    modifier onlyAcceptedContracts() {\\n        require(isAcceptedContract(msg.sender), \\\"Only Accepted Contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the contract names used in this contract.\\n     * @dev The contract name list is in `./libraries/Contracts.sol`.\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @notice Returns contract names that can call this contract.\\n     * @dev The contact name listed in this method is also needed to be listed `requiredContracts` method.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = Storage.slot().resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            Storage.slot().addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                Storage.slot().resolver.getAddress(name) != Storage.slot().addressCache[name] ||\\n                Storage.slot().addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        require(address(Storage.slot().resolver) == address(0), \\\"resolver registered already\\\");\\n        Storage.slot().resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function resolver() public view returns (IAddressResolver) {\\n        return Storage.slot().resolver;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0xf0bb13571fbf8a275118b67bc0332eab0661f4465eff77066755f9320c1bd11d\",\"license\":\"MIT\"},\"contracts/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nstruct Currency {\\n    bool isSupported;\\n    string name;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.currencyController\\\");\\n\\n    struct Storage {\\n        // Protocol currencies\\n        mapping(bytes32 => Currency) currencies;\\n        mapping(bytes32 => uint256) haircuts;\\n        // PriceFeed\\n        mapping(bytes32 => AggregatorV3Interface) usdPriceFeeds;\\n        mapping(bytes32 => AggregatorV3Interface) ethPriceFeeds;\\n        mapping(bytes32 => uint8) usdDecimals;\\n        mapping(bytes32 => uint8) ethDecimals;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0c9e9399e6f58e0702c8edcb6b58603d281668b10bf701b119911e24bba192b\",\"license\":\"MIT\"},\"contracts/storages/FutureValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary FutureValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.futureValueVault\\\");\\n\\n    struct Storage {\\n        address lendingMarket;\\n        // Mapping from user to balances\\n        mapping(address => int256) balances;\\n        // Mapping from user to maturity\\n        mapping(address => uint256) futureValueMaturities;\\n        // Mapping from maturity to total amount supplied of lending\\n        mapping(uint256 => uint256) totalLendingSupply;\\n        // Mapping from maturity to total amount supplied of borrowing\\n        mapping(uint256 => uint256) totalBorrowingSupply;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a967d739a0e4620471cf77de5c4288e781e55a6b5e8a1081028ea654f9c06f9\",\"license\":\"MIT\"},\"contracts/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.genesisValueVault\\\");\\n\\n    struct Storage {\\n        mapping(bytes32 => bool) isRegisteredCurrency;\\n        mapping(bytes32 => uint256) initialCompoundFactors;\\n        mapping(bytes32 => uint256) compoundFactors;\\n        mapping(bytes32 => uint256) currentMaturity;\\n        mapping(bytes32 => uint8) decimals;\\n        // Mapping from user to balance per currency\\n        mapping(bytes32 => mapping(address => int256)) balances;\\n        mapping(bytes32 => uint256) totalLendingSupplies;\\n        mapping(bytes32 => uint256) totalBorrowingSupplies;\\n        // Mapping from maturity to rate per currency\\n        mapping(bytes32 => mapping(uint256 => MaturityUnitPrice)) maturityUnitPrices;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2715307f5a409405179faad8ce1f4a614f1b166bd46cf2fde96d1c90ea5cf4fd\",\"license\":\"MIT\"},\"contracts/storages/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.mixinAddressResolver\\\");\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 => address) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x852b885b6264a58930a0945c68842717e19f954eaefc0137235e6f263e17fa9d\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant PRICE_DIGIT = 10000; // price digit in the basis (10000 -> 1)\\n    uint256 public constant PCT_DIGIT = 10000; // percentage digit in the basis (10000 -> 100%)\\n\\n    uint256 internal constant DAYS_IN_YEAR = 365;\\n    uint256 internal constant SECONDS_IN_YEAR = 31557600;\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n}\\n\",\"keccak256\":\"0xfc44bd731aebae907269f73e2d828379e77253ecd21642a874ab2e4a4f763262\",\"license\":\"MIT\"},\"contracts/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0xe59cd60631c7c754ed6b77caa6f3a06301ef0df07881a3dcfa85124abc1890b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061129e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80633d03b9da1161008c578063ae100e6d11610066578063ae100e6d146101b2578063c4d66de8146101e0578063e099765914610177578063e224e8c0146101f357600080fd5b80633d03b9da14610177578063870febf01461018c578063a46971ad1461019f57600080fd5b806304f3bcec146100d457806308482e5e146100f95780630e1b435e1461011c57806317e2d96a1461014457806329985e5a146101655780632af64bd31461016f575b600080fd5b6100dc610206565b6040516001600160a01b0390911681526020015b60405180910390f35b61010c610107366004610f7e565b610227565b60405190151581526020016100f0565b61012f61012a366004610fb3565b61040a565b604080519283526020830191909152016100f0565b610157610152366004610fd7565b610460565b6040519081526020016100f0565b61016d61047e565b005b61010c61062b565b61017f610791565b6040516100f09190610ff0565b61015761019a366004610fd7565b6107f6565b61010c6101ad366004610f7e565b610814565b6101c56101c0366004611034565b6109ea565b604080519384526020840192909252908201526060016100f0565b61016d6101ee366004610fb3565b610b86565b61010c610201366004611034565b610d0d565b60006000805160206112498339815191525b546001600160a01b0316919050565b600061023233610d73565b6102575760405162461bcd60e51b815260040161024e90611060565b60405180910390fd5b6001600160a01b0384166102b75760405162461bcd60e51b815260206004820152602160248201527f61646420746f20746865207a65726f2061646472657373206f66206c656e64656044820152603960f91b606482015260840161024e565b6102c18483610d0d565b156103235760405162461bcd60e51b815260206004820152602c60248201527f6c656e6465722068617320746865206675747572652076616c756520696e207060448201526b617374206d6174757269747960a01b606482015260840161024e565b8161032c610ded565b6001600160a01b0386166000908152600291909101602052604090205582610352610ded565b6003016000848152602001908152602001600020600082825461037591906110ad565b90915550839050610384610ded565b6001016000866001600160a01b03166001600160a01b0316815260200190815260200160002060008282546103b991906110c5565b90915550506040518381526001600160a01b038516906000907f8b0c34a52f9e28d78caaa7066cd047b398dae74941a208b77777420f492bd7e1906020015b60405180910390a35060019392505050565b600080610415610ded565b6001600160a01b0384166000908152600191909101602052604090205461043a610ded565b6001600160a01b0390941660009081526002949094016020526040909320549293915050565b600061046a610ded565b600092835260030160205250604090205490565b6000610488610791565b905060005b81518110156106275760008282815181106104aa576104aa611106565b6020026020010151905060006104cb60008051602061124983398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd9161053c91869190605d01611169565b60206040518083038186803b15801561055457600080fd5b505afa158015610568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058c919061118a565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a15050808061061f906111a7565b91505061048d565b5050565b600080610636610791565b905060005b815181101561078857600082828151811061065857610658611106565b6020026020010151905061067760008051602061124983398151915290565b600082815260019190910160205260409020546001600160a01b0316600080516020611249833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b1580156106e457600080fd5b505afa1580156106f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071c919061118a565b6001600160a01b0316141580610766575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b15610775576000935050505090565b5080610780816111a7565b91505061063b565b50600191505090565b604080516001808252818301909252606091602080830190803683370190505090507f4c656e64696e674d61726b6574436f6e74726f6c6c6572000000000000000000816000815181106107e7576107e7611106565b60200260200101818152505090565b6000610800610ded565b600092835260040160205250604090205490565b600061081f33610d73565b61083b5760405162461bcd60e51b815260040161024e90611060565b6001600160a01b03841661089d5760405162461bcd60e51b815260206004820152602360248201527f61646420746f20746865207a65726f2061646472657373206f6620626f72726f6044820152623bb2b960e91b606482015260840161024e565b6108a78483610d0d565b1561090b5760405162461bcd60e51b815260206004820152602e60248201527f626f72726f7765722068617320746865206675747572652076616c756520696e60448201526d2070617374206d6174757269747960901b606482015260840161024e565b81610914610ded565b6001600160a01b038616600090815260029190910160205260409020558261093a610ded565b6004016000848152602001908152602001600020600082825461095d91906110ad565b9091555083905061096c610ded565b6001016000866001600160a01b03166001600160a01b0316815260200190815260200160002060008282546109a191906111c2565b90915550506001600160a01b03841660007f8b0c34a52f9e28d78caaa7066cd047b398dae74941a208b77777420f492bd7e16109dc86611201565b6040519081526020016103f8565b60008060006109f833610d73565b610a145760405162461bcd60e51b815260040161024e90611060565b610a1c610ded565b6001600160a01b03861660009081526001919091016020526040902054915083610a44610ded565b6001600160a01b0387166000908152600291909101602052604090205414801590610a6e57508115155b15610b7f57819250610a7e610ded565b6001600160a01b0386166000908152600291909101602052604081205491508312610ada5782610aac610ded565b60030160008381526020019081526020016000206000828254610acf919061121e565b90915550610b149050565b610ae383611201565b610aeb610ded565b60040160008381526020019081526020016000206000828254610b0e919061121e565b90915550505b6000610b1e610ded565b6001600160a01b038716600081815260019290920160205260408083209390935591519093508391907f8b0c34a52f9e28d78caaa7066cd047b398dae74941a208b77777420f492bd7e190610b769087815260200190565b60405180910390a35b9250925092565b600054610100900460ff1615808015610ba65750600054600160ff909116105b80610bc05750303b158015610bc0575060005460ff166001145b610c235760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161024e565b6000805460ff191660011790558015610c46576000805461ff0019166101001790555b6000610c50610e11565b6001600160a01b03161415610cb35760405162461bcd60e51b815260206004820152602360248201527f4d7573742062652063616c6c65642066726f6d20626561636f6e20636f6e74726044820152621858dd60ea1b606482015260840161024e565b610cbc82610e39565b610cc461047e565b8015610627576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600081610d18610ded565b6001600160a01b038516600090815260029190910160205260409020541415610d4357506000610d6d565b610d4b610ded565b6001600160a01b03841660009081526001919091016020526040902054151590505b92915050565b600080610d7e610791565b905060005b8151811015610de357610dae828281518110610da157610da1611106565b6020026020010151610ece565b6001600160a01b0316846001600160a01b03161415610dd1575060019392505050565b80610ddb816111a7565b915050610d83565b5060009392505050565b7fd1b4fbfb8f78bdad30892554423aedac9635765ae463e7c2b7953fa50219190e90565b60007fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50610218565b600080516020611249833981519152546001600160a01b031615610e9f5760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c72656164790000000000604482015260640161024e565b60008051602061124983398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b03169081610f5f5760405162461bcd60e51b815260040161024e9190611235565b5092915050565b6001600160a01b0381168114610f7b57600080fd5b50565b600080600060608486031215610f9357600080fd5b8335610f9e81610f66565b95602085013595506040909401359392505050565b600060208284031215610fc557600080fd5b8135610fd081610f66565b9392505050565b600060208284031215610fe957600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156110285783518352928401929184019160010161100c565b50909695505050505050565b6000806040838503121561104757600080fd5b823561105281610f66565b946020939093013593505050565b60208082526017908201527f4f6e6c7920416363657074656420436f6e747261637473000000000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156110c0576110c0611097565b500190565b600080821280156001600160ff1b03849003851316156110e7576110e7611097565b600160ff1b839003841281161561110057611100611097565b50500190565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b8181101561114257602081850181015186830182015201611126565b81811115611154576000602083870101525b50601f01601f19169290920160200192915050565b828152604060208201526000611182604083018461111c565b949350505050565b60006020828403121561119c57600080fd5b8151610fd081610f66565b60006000198214156111bb576111bb611097565b5060010190565b60008083128015600160ff1b8501841216156111e0576111e0611097565b6001600160ff1b03840183138116156111fb576111fb611097565b50500390565b6000600160ff1b82141561121757611217611097565b5060000390565b60008282101561123057611230611097565b500390565b602081526000610fd0602083018461111c56fe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124018a26469706673582212206df3812ef1a9695f0f4f0d36e069b7ad7333410730de51ca9aaad6b05e23e50864736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80633d03b9da1161008c578063ae100e6d11610066578063ae100e6d146101b2578063c4d66de8146101e0578063e099765914610177578063e224e8c0146101f357600080fd5b80633d03b9da14610177578063870febf01461018c578063a46971ad1461019f57600080fd5b806304f3bcec146100d457806308482e5e146100f95780630e1b435e1461011c57806317e2d96a1461014457806329985e5a146101655780632af64bd31461016f575b600080fd5b6100dc610206565b6040516001600160a01b0390911681526020015b60405180910390f35b61010c610107366004610f7e565b610227565b60405190151581526020016100f0565b61012f61012a366004610fb3565b61040a565b604080519283526020830191909152016100f0565b610157610152366004610fd7565b610460565b6040519081526020016100f0565b61016d61047e565b005b61010c61062b565b61017f610791565b6040516100f09190610ff0565b61015761019a366004610fd7565b6107f6565b61010c6101ad366004610f7e565b610814565b6101c56101c0366004611034565b6109ea565b604080519384526020840192909252908201526060016100f0565b61016d6101ee366004610fb3565b610b86565b61010c610201366004611034565b610d0d565b60006000805160206112498339815191525b546001600160a01b0316919050565b600061023233610d73565b6102575760405162461bcd60e51b815260040161024e90611060565b60405180910390fd5b6001600160a01b0384166102b75760405162461bcd60e51b815260206004820152602160248201527f61646420746f20746865207a65726f2061646472657373206f66206c656e64656044820152603960f91b606482015260840161024e565b6102c18483610d0d565b156103235760405162461bcd60e51b815260206004820152602c60248201527f6c656e6465722068617320746865206675747572652076616c756520696e207060448201526b617374206d6174757269747960a01b606482015260840161024e565b8161032c610ded565b6001600160a01b0386166000908152600291909101602052604090205582610352610ded565b6003016000848152602001908152602001600020600082825461037591906110ad565b90915550839050610384610ded565b6001016000866001600160a01b03166001600160a01b0316815260200190815260200160002060008282546103b991906110c5565b90915550506040518381526001600160a01b038516906000907f8b0c34a52f9e28d78caaa7066cd047b398dae74941a208b77777420f492bd7e1906020015b60405180910390a35060019392505050565b600080610415610ded565b6001600160a01b0384166000908152600191909101602052604090205461043a610ded565b6001600160a01b0390941660009081526002949094016020526040909320549293915050565b600061046a610ded565b600092835260030160205250604090205490565b6000610488610791565b905060005b81518110156106275760008282815181106104aa576104aa611106565b6020026020010151905060006104cb60008051602061124983398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd9161053c91869190605d01611169565b60206040518083038186803b15801561055457600080fd5b505afa158015610568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058c919061118a565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a15050808061061f906111a7565b91505061048d565b5050565b600080610636610791565b905060005b815181101561078857600082828151811061065857610658611106565b6020026020010151905061067760008051602061124983398151915290565b600082815260019190910160205260409020546001600160a01b0316600080516020611249833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b1580156106e457600080fd5b505afa1580156106f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071c919061118a565b6001600160a01b0316141580610766575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b15610775576000935050505090565b5080610780816111a7565b91505061063b565b50600191505090565b604080516001808252818301909252606091602080830190803683370190505090507f4c656e64696e674d61726b6574436f6e74726f6c6c6572000000000000000000816000815181106107e7576107e7611106565b60200260200101818152505090565b6000610800610ded565b600092835260040160205250604090205490565b600061081f33610d73565b61083b5760405162461bcd60e51b815260040161024e90611060565b6001600160a01b03841661089d5760405162461bcd60e51b815260206004820152602360248201527f61646420746f20746865207a65726f2061646472657373206f6620626f72726f6044820152623bb2b960e91b606482015260840161024e565b6108a78483610d0d565b1561090b5760405162461bcd60e51b815260206004820152602e60248201527f626f72726f7765722068617320746865206675747572652076616c756520696e60448201526d2070617374206d6174757269747960901b606482015260840161024e565b81610914610ded565b6001600160a01b038616600090815260029190910160205260409020558261093a610ded565b6004016000848152602001908152602001600020600082825461095d91906110ad565b9091555083905061096c610ded565b6001016000866001600160a01b03166001600160a01b0316815260200190815260200160002060008282546109a191906111c2565b90915550506001600160a01b03841660007f8b0c34a52f9e28d78caaa7066cd047b398dae74941a208b77777420f492bd7e16109dc86611201565b6040519081526020016103f8565b60008060006109f833610d73565b610a145760405162461bcd60e51b815260040161024e90611060565b610a1c610ded565b6001600160a01b03861660009081526001919091016020526040902054915083610a44610ded565b6001600160a01b0387166000908152600291909101602052604090205414801590610a6e57508115155b15610b7f57819250610a7e610ded565b6001600160a01b0386166000908152600291909101602052604081205491508312610ada5782610aac610ded565b60030160008381526020019081526020016000206000828254610acf919061121e565b90915550610b149050565b610ae383611201565b610aeb610ded565b60040160008381526020019081526020016000206000828254610b0e919061121e565b90915550505b6000610b1e610ded565b6001600160a01b038716600081815260019290920160205260408083209390935591519093508391907f8b0c34a52f9e28d78caaa7066cd047b398dae74941a208b77777420f492bd7e190610b769087815260200190565b60405180910390a35b9250925092565b600054610100900460ff1615808015610ba65750600054600160ff909116105b80610bc05750303b158015610bc0575060005460ff166001145b610c235760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161024e565b6000805460ff191660011790558015610c46576000805461ff0019166101001790555b6000610c50610e11565b6001600160a01b03161415610cb35760405162461bcd60e51b815260206004820152602360248201527f4d7573742062652063616c6c65642066726f6d20626561636f6e20636f6e74726044820152621858dd60ea1b606482015260840161024e565b610cbc82610e39565b610cc461047e565b8015610627576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600081610d18610ded565b6001600160a01b038516600090815260029190910160205260409020541415610d4357506000610d6d565b610d4b610ded565b6001600160a01b03841660009081526001919091016020526040902054151590505b92915050565b600080610d7e610791565b905060005b8151811015610de357610dae828281518110610da157610da1611106565b6020026020010151610ece565b6001600160a01b0316846001600160a01b03161415610dd1575060019392505050565b80610ddb816111a7565b915050610d83565b5060009392505050565b7fd1b4fbfb8f78bdad30892554423aedac9635765ae463e7c2b7953fa50219190e90565b60007fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50610218565b600080516020611249833981519152546001600160a01b031615610e9f5760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c72656164790000000000604482015260640161024e565b60008051602061124983398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b03169081610f5f5760405162461bcd60e51b815260040161024e9190611235565b5092915050565b6001600160a01b0381168114610f7b57600080fd5b50565b600080600060608486031215610f9357600080fd5b8335610f9e81610f66565b95602085013595506040909401359392505050565b600060208284031215610fc557600080fd5b8135610fd081610f66565b9392505050565b600060208284031215610fe957600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156110285783518352928401929184019160010161100c565b50909695505050505050565b6000806040838503121561104757600080fd5b823561105281610f66565b946020939093013593505050565b60208082526017908201527f4f6e6c7920416363657074656420436f6e747261637473000000000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156110c0576110c0611097565b500190565b600080821280156001600160ff1b03849003851316156110e7576110e7611097565b600160ff1b839003841281161561110057611100611097565b50500190565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b8181101561114257602081850181015186830182015201611126565b81811115611154576000602083870101525b50601f01601f19169290920160200192915050565b828152604060208201526000611182604083018461111c565b949350505050565b60006020828403121561119c57600080fd5b8151610fd081610f66565b60006000198214156111bb576111bb611097565b5060010190565b60008083128015600160ff1b8501841216156111e0576111e0611097565b6001600160ff1b03840183138116156111fb576111fb611097565b50500390565b6000600160ff1b82141561121757611217611097565b5060000390565b60008282101561123057611230611097565b500390565b602081526000610fd0602083018461111c56fe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124018a26469706673582212206df3812ef1a9695f0f4f0d36e069b7ad7333410730de51ca9aaad6b05e23e50864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptedContracts()": {
        "details": "The contact name listed in this method is also needed to be listed `requiredContracts` method."
      },
      "addBorrowFutureValue(address,uint256,uint256)": {
        "params": {
          "_amount": "The amount to add",
          "_maturity": "The maturity of the market",
          "_user": "User's address"
        }
      },
      "addLendFutureValue(address,uint256,uint256)": {
        "params": {
          "_amount": "The amount to add",
          "_maturity": "The maturity of the market",
          "_user": "User's address"
        }
      },
      "getFutureValue(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "futureValue": "The future value",
          "maturity": "The maturity of the market that the future value was added"
        }
      },
      "getTotalBorrowingSupply(uint256)": {
        "params": {
          "_maturity": "The maturity of the market"
        }
      },
      "getTotalLendingSupply(uint256)": {
        "params": {
          "_maturity": "The maturity of the market"
        }
      },
      "hasFutureValueInPastMaturity(address,uint256)": {
        "params": {
          "_maturity": "The maturity of the market",
          "_user": "User's address"
        },
        "returns": {
          "_0": "The boolean if the lending market is initialized or not"
        }
      },
      "initialize(address)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController.",
        "params": {
          "_resolver": "The address of the Address Resolver contract"
        }
      },
      "removeFutureValue(address,uint256)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "currentAmount": "Current future value amount after update",
          "maturity": "Maturity of future value",
          "removedAmount": "Removed future value amount"
        }
      },
      "requiredContracts()": {
        "details": "The contract name list is in `./libraries/Contracts.sol`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptedContracts()": {
        "notice": "Returns contract names that can call this contract."
      },
      "addBorrowFutureValue(address,uint256,uint256)": {
        "notice": "Adds the future value amount for borrowing deals."
      },
      "addLendFutureValue(address,uint256,uint256)": {
        "notice": "Adds the future value amount for lending deals."
      },
      "getFutureValue(address)": {
        "notice": "Gets the future value of the account."
      },
      "getTotalBorrowingSupply(uint256)": {
        "notice": "Gets the total borrowing supply."
      },
      "getTotalLendingSupply(uint256)": {
        "notice": "Gets the total lending supply."
      },
      "hasFutureValueInPastMaturity(address,uint256)": {
        "notice": "Gets if the account has the future value amount in the selected maturity."
      },
      "initialize(address)": {
        "notice": "Initializes the contract."
      },
      "removeFutureValue(address,uint256)": {
        "notice": "Remove all future values if there is an amount in the past maturity."
      },
      "requiredContracts()": {
        "notice": "Returns the contract names used in this contract."
      }
    },
    "notice": "Implements the management of the future value as an amount for Lending deals in each currency.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 790,
        "contract": "contracts/FutureValueVault.sol:FutureValueVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 793,
        "contract": "contracts/FutureValueVault.sol:FutureValueVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}