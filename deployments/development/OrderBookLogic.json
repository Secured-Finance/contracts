{
  "address": "0x71cb5e58dF3EF607c4e83Bec07477260EE62eeDA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "ProtocolTypes.Side"
        },
        {
          "internalType": "uint256",
          "name": "_futureValue",
          "type": "uint256"
        }
      ],
      "name": "estimateFilledAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getBorrowOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getBorrowOrderIds",
      "outputs": [
        {
          "internalType": "uint48[]",
          "name": "activeOrderIds",
          "type": "uint48[]"
        },
        {
          "internalType": "uint48[]",
          "name": "inActiveOrderIds",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHighestLendingUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getLendOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLendOrderIds",
      "outputs": [
        {
          "internalType": "uint48[]",
          "name": "activeOrderIds",
          "type": "uint48[]"
        },
        {
          "internalType": "uint48[]",
          "name": "inActiveOrderIds",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLowestBorrowingUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOpeningUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "openingUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastLendUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastBorrowUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalOffsetAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint48",
          "name": "_orderId",
          "type": "uint48"
        }
      ],
      "name": "getOrder",
      "outputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "ProtocolTypes.Side"
        },
        {
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPreOrder",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalAmountFromBorrowOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalAmountFromLendOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "hasBorrowOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "hasLendOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbae0dfb6d8fe5a027fd59e0e47a480c3efcd971d3aa9e74560767d730e9f3674",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x71cb5e58dF3EF607c4e83Bec07477260EE62eeDA",
    "transactionIndex": 37,
    "gasUsed": "4824076",
    "logsBloom": "0x
    "blockHash": "0xfca270fb17544092c39ddc2551227e7ee07d10ce4fae0a43cdeeeba41c213e46",
    "transactionHash": "0xbae0dfb6d8fe5a027fd59e0e47a480c3efcd971d3aa9e74560767d730e9f3674",
    "logs": [],
    "blockNumber": 3835431,
    "cumulativeGasUsed": "9706939",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ee0701f0e1353791145c76210180d73b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"ProtocolTypes.Side\"},{\"internalType\":\"uint256\",\"name\":\"_futureValue\",\"type\":\"uint256\"}],\"name\":\"estimateFilledAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getBorrowOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBorrowOrderIds\",\"outputs\":[{\"internalType\":\"uint48[]\",\"name\":\"activeOrderIds\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48[]\",\"name\":\"inActiveOrderIds\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHighestLendingUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getLendOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLendOrderIds\",\"outputs\":[{\"internalType\":\"uint48[]\",\"name\":\"activeOrderIds\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48[]\",\"name\":\"inActiveOrderIds\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLowestBorrowingUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpeningUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"openingUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastLendUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBorrowUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOffsetAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_orderId\",\"type\":\"uint48\"}],\"name\":\"getOrder\",\"outputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"ProtocolTypes.Side\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPreOrder\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalAmountFromBorrowOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalAmountFromLendOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"hasBorrowOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"hasLendOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/libraries/logics/OrderBookLogic.sol\":\"OrderBookLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/protocol/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport {MarketOrder, ItayoseLog} from \\\"../storages/LendingMarketStorage.sol\\\";\\n\\ninterface ILendingMarket {\\n    struct OrderExecutionConditions {\\n        bool isFilled;\\n        uint256 executedUnitPrice;\\n        uint256 cbThresholdUnitPrice;\\n        bool ignoreRemainingAmount;\\n    }\\n\\n    struct PlacedOrder {\\n        uint48 orderId;\\n        uint256 amount;\\n        uint256 unitPrice;\\n    }\\n\\n    struct FilledOrder {\\n        uint256 amount;\\n        uint256 unitPrice;\\n        uint256 futureValue;\\n        uint256 ignoredAmount;\\n    }\\n\\n    struct PartiallyFilledOrder {\\n        uint48 orderId;\\n        address maker;\\n        uint256 amount;\\n        uint256 futureValue;\\n    }\\n\\n    event OrderCanceled(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n\\n    event OrdersCleaned(\\n        uint48[] orderIds,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 futureValue\\n    );\\n\\n    event OrderExecuted(\\n        address indexed user,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 indexed maturity,\\n        uint256 inputAmount,\\n        uint256 inputUnitPrice,\\n        uint256 filledAmount,\\n        uint256 filledUnitPrice,\\n        uint256 filledFutureValue,\\n        uint48 placedOrderId,\\n        uint256 placedAmount,\\n        uint256 placedUnitPrice,\\n        uint256 cbThresholdUnitPrice\\n    );\\n\\n    event PreOrderExecuted(\\n        address indexed user,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 indexed maturity,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        uint48 orderId\\n    );\\n\\n    event PositionUnwound(\\n        address indexed user,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 indexed maturity,\\n        uint256 futureValue,\\n        uint256 filledAmount,\\n        uint256 filledUnitPrice,\\n        uint256 filledFutureValue,\\n        uint256 cbThresholdUnitPrice\\n    );\\n\\n    event MarketOpened(uint256 maturity, uint256 prevMaturity);\\n\\n    event ItayoseExecuted(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 openingUnitPrice,\\n        uint256 lastLendUnitPrice,\\n        uint256 lastBorrowUnitPrice,\\n        uint256 offsetAmount\\n    );\\n\\n    struct Market {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        uint256 openingDate;\\n        uint256 borrowUnitPrice;\\n        uint256 lendUnitPrice;\\n        uint256 midUnitPrice;\\n        uint256 openingUnitPrice;\\n        bool isReady;\\n    }\\n\\n    function getMarket() external view returns (Market memory);\\n\\n    function getBorrowUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getLendUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getMidUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getBorrowOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturity() external view returns (uint256);\\n\\n    function getCurrency() external view returns (bytes32);\\n\\n    function getOpeningDate() external view returns (uint256);\\n\\n    function isReady() external view returns (bool);\\n\\n    function isMatured() external view returns (bool);\\n\\n    function isOpened() external view returns (bool);\\n\\n    function isItayosePeriod() external view returns (bool);\\n\\n    function isPreOrderPeriod() external returns (bool);\\n\\n    function getItayoseLog(uint256 maturity) external view returns (ItayoseLog memory);\\n\\n    function getOrder(uint48 orderId)\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp,\\n            bool isPreOrder\\n        );\\n\\n    function getTotalAmountFromLendOrders(address user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getTotalAmountFromBorrowOrders(address user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getLendOrderIds(address user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds);\\n\\n    function getBorrowOrderIds(address user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds);\\n\\n    function estimateFilledAmount(ProtocolTypes.Side side, uint256 futureValue)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function openMarket(uint256 maturity, uint256 openingDate) external returns (uint256);\\n\\n    function cancelOrder(address user, uint48 orderId) external;\\n\\n    function executeOrder(\\n        ProtocolTypes.Side side,\\n        address account,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        uint256 circuitBreakerLimitRange\\n    )\\n        external\\n        returns (FilledOrder memory filledOrder, PartiallyFilledOrder memory partiallyFilledOrder);\\n\\n    function executePreOrder(\\n        ProtocolTypes.Side side,\\n        address user,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external;\\n\\n    function unwindPosition(\\n        ProtocolTypes.Side side,\\n        address user,\\n        uint256 futureValue,\\n        uint256 circuitBreakerLimitRange\\n    )\\n        external\\n        returns (FilledOrder memory filledOrder, PartiallyFilledOrder memory partiallyFilledOrder);\\n\\n    function executeItayoseCall()\\n        external\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 totalOffsetAmount,\\n            uint256 openingDate,\\n            PartiallyFilledOrder memory partiallyFilledLendingOrder,\\n            PartiallyFilledOrder memory partiallyFilledBorrowingOrder\\n        );\\n\\n    function cleanUpOrders(address user)\\n        external\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        );\\n\\n    function pauseMarket() external;\\n\\n    function unpauseMarket() external;\\n}\\n\",\"keccak256\":\"0xfb9adebfb8a6f444d9aad828596b9e73cc7f11ad33527e697ad8f2af9a92dff2\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Constants {\\n    /// @dev Used for price digits in the basis (10000 -> 1)\\n    uint256 public constant PRICE_DIGIT = 10000;\\n\\n    /// @dev Used for percentage digits in the basis (10000 -> 100%)\\n    uint256 public constant PCT_DIGIT = 10000;\\n\\n    /// @dev Used for seconds in year (60 * 60 * 24 * 365)\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000;\\n\\n    /// @dev Used for maximum order count per currency\\n    uint256 internal constant MAXIMUM_ORDER_COUNT = 20;\\n\\n    /// @dev Used for minimum threshold for circuit breaker unit price threshold\\n    uint256 public constant MINIMUM_CIRCUIT_BREAKER_THRESHOLD = 10;\\n\\n    /// @dev Used for maximum threshold for circuit breaker unit price threshold\\n    uint256 public constant MAXIMUM_CIRCUIT_BREAKER_THRESHOLD = 200;\\n}\\n\",\"keccak256\":\"0x723b180b046e8fbe471400aa11a092e7611556a1467b0eccd6c19c26c7576459\",\"license\":\"MIT\"},\"contracts/protocol/libraries/OrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// libraries\\nimport {Constants} from \\\"../libraries/Constants.sol\\\";\\n// types\\nimport {RoundingUint256} from \\\"./math/RoundingUint256.sol\\\";\\n\\nstruct RemainingOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 unitPrice;\\n}\\n\\nstruct PartiallyFilledOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 futureValue;\\n}\\n\\nstruct OrderItem {\\n    uint48 orderId;\\n    uint48 next;\\n    uint48 prev;\\n    address maker;\\n    uint256 timestamp;\\n    uint256 amount;\\n}\\n\\n/**\\n * @notice OrderStatisticsTreeLib is a Red-Black Tree binary search library\\n * based on the following library that is extended to manage order data.\\n *\\n * https://github.com/rob-Hitchens/OrderStatisticsTree\\n *\\n */\\nlibrary OrderStatisticsTreeLib {\\n    using RoundingUint256 for uint256;\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint48 head;\\n        uint48 tail;\\n        uint256 orderCounter;\\n        uint256 orderTotalAmount;\\n        mapping(uint256 => OrderItem) orders;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].right != EMPTY) {\\n            _value = self.nodes[_value].right;\\n        }\\n    }\\n\\n    function hasOrders(Tree storage self) internal view returns (bool) {\\n        return self.root != EMPTY;\\n    }\\n\\n    function next(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(401) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].right != EMPTY) {\\n            _cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(402) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].left != EMPTY) {\\n            _cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint256 value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        // if (self.nodes[value].parent != EMPTY) return true;\\n        uint256 cursor = value;\\n        while (self.nodes[cursor].parent != EMPTY) {\\n            uint256 parent = self.nodes[cursor].parent;\\n            if (self.nodes[parent].left != cursor && self.nodes[parent].right != cursor) {\\n                return false;\\n            }\\n            if (parent == self.root) {\\n                return true;\\n            }\\n            cursor = self.nodes[cursor].parent;\\n        }\\n        return false;\\n    }\\n\\n    function isActiveOrderId(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        return orderIdExists(self, value, orderId) && exists(self, value);\\n    }\\n\\n    function getNode(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n        return (\\n            gn.parent,\\n            gn.left,\\n            gn.right,\\n            gn.red,\\n            gn.head,\\n            gn.tail,\\n            gn.orderCounter,\\n            gn.orderTotalAmount\\n        );\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function getNodeTotalAmount(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint256 totalAmount)\\n    {\\n        return self.nodes[value].orderTotalAmount;\\n    }\\n\\n    function getNodeOrderIds(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint48[] memory orderIds)\\n    {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[gn.head];\\n        orderIds = new uint48[](gn.orderCounter);\\n\\n        for (uint256 i = 0; i < gn.orderCounter; i++) {\\n            orderIds[i] = order.orderId;\\n            order = gn.orders[order.next];\\n        }\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256 _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(405) - Value to insert cannot be zero\\\");\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                return;\\n            }\\n        }\\n\\n        Node storage nValue = self.nodes[value];\\n        // Update order info as a new one if there is already an old node\\n        if (\\n            self.root == EMPTY ||\\n            (self.nodes[cursor].left != value && self.nodes[cursor].right != value)\\n        ) {\\n            nValue.orderCounter = 0;\\n            nValue.orderTotalAmount = 0;\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        }\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(407) - Value to delete cannot be zero\\\");\\n        Node storage nValue = self.nodes[value];\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint256 a,\\n        uint256 b\\n    ) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    function estimateDroppedAmountFromLeft(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = first(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV).div(\\n                    cursorNodeAmountInFV\\n                );\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n    }\\n\\n    function estimateDroppedAmountFromRight(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = last(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV).div(\\n                    cursorNodeAmountInFV\\n                );\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n    }\\n\\n    function dropLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue,\\n        uint256 limitFutureValue\\n    )\\n        internal\\n        returns (\\n            uint256 value,\\n            uint256 filledAmount,\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            PartiallyFilledOrder memory partiallyFilledOrder\\n        )\\n    {\\n        uint256 cursor = first(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor <= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        uint256 amountDiff;\\n        uint256 futureValueDiff;\\n        while (\\n            (totalAmount < amount || amount == EMPTY) &&\\n            (filledFutureValue < limitFutureValue || limitFutureValue == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor <= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            filledFutureValue += _calculateFutureValue(cursor, cursorNodeAmount);\\n            filledAmount += cursorNodeAmount;\\n\\n            if (totalAmount > amount && amount != EMPTY) {\\n                amountDiff = totalAmount - amount;\\n                futureValueDiff = _calculateFutureValue(cursor, amountDiff);\\n            } else if (filledFutureValue > limitFutureValue && limitFutureValue != EMPTY) {\\n                futureValueDiff = filledFutureValue - limitFutureValue;\\n                amountDiff = _calculatePresentValue(cursor, futureValueDiff);\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n\\n        if (amountDiff > 0) {\\n            filledAmount -= amountDiff;\\n        }\\n        if (futureValueDiff > 0) {\\n            filledFutureValue -= futureValueDiff;\\n        }\\n\\n        if (totalAmount > 0) {\\n            if (amountDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(self, cursor, cursorNodeAmount - amountDiff);\\n            } else if (futureValueDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, futureValueDiff)\\n                );\\n            }\\n\\n            self.nodes[cursor].left = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent > cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].left = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        uint256 lastNode = last(self);\\n\\n        if (lastNode == value && self.nodes[lastNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value > self.root || (value == self.root && filledAmount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToLeft(self);\\n    }\\n\\n    function dropRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue,\\n        uint256 limitFutureValue\\n    )\\n        internal\\n        returns (\\n            uint256 value,\\n            uint256 filledAmount,\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            PartiallyFilledOrder memory partiallyFilledOrder\\n        )\\n    {\\n        uint256 cursor = last(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor >= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        uint256 amountDiff;\\n        uint256 futureValueDiff;\\n        while (\\n            (totalAmount < amount || amount == EMPTY) &&\\n            (filledFutureValue < limitFutureValue || limitFutureValue == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor >= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            filledFutureValue += _calculateFutureValue(cursor, cursorNodeAmount);\\n            filledAmount += cursorNodeAmount;\\n\\n            if (totalAmount > amount && amount != EMPTY) {\\n                amountDiff = totalAmount - amount;\\n                futureValueDiff = _calculateFutureValue(cursor, amountDiff);\\n            } else if (filledFutureValue > limitFutureValue && limitFutureValue != EMPTY) {\\n                futureValueDiff = filledFutureValue - limitFutureValue;\\n                amountDiff = _calculatePresentValue(cursor, futureValueDiff);\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n\\n        if (amountDiff > 0) {\\n            filledAmount -= amountDiff;\\n        }\\n        if (futureValueDiff > 0) {\\n            filledFutureValue -= futureValueDiff;\\n        }\\n\\n        if (totalAmount > 0) {\\n            if (amountDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(self, cursor, cursorNodeAmount - amountDiff);\\n            } else if (futureValueDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, futureValueDiff)\\n                );\\n            }\\n\\n            self.nodes[cursor].right = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent < cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].right = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        uint256 firstNode = first(self);\\n\\n        if (firstNode == value && self.nodes[firstNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value < self.root || (value == self.root && filledAmount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToRight(self);\\n    }\\n\\n    function rotateTreeToLeft(Tree storage self) internal {\\n        if (self.nodes[self.root].left == 0 && self.nodes[self.root].right != 0) {\\n            if (self.nodes[self.nodes[self.root].right].left != 0) {\\n                rotateRight(self, self.nodes[self.root].right);\\n            }\\n            rotateLeft(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function rotateTreeToRight(Tree storage self) internal {\\n        if (self.nodes[self.root].right == 0 && self.nodes[self.root].left != 0) {\\n            if (self.nodes[self.nodes[self.root].left].right != 0) {\\n                rotateLeft(self, self.nodes[self.root].left);\\n            }\\n            rotateRight(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function getFutureValue(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (uint256) {\\n        return _calculateFutureValue(value, self.nodes[value].orders[orderId].amount);\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (OrderItem memory) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orders[orderId];\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function orderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        uint48 cursor = orderId;\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[cursor];\\n\\n        if (order.orderId != cursor) {\\n            return false;\\n        }\\n\\n        while (order.prev != EMPTY) {\\n            cursor = order.prev;\\n            order = gn.orders[cursor];\\n        }\\n\\n        return cursor == gn.head;\\n    }\\n\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal {\\n        require(amount > 0, \\\"Insufficient amount\\\");\\n        require(value <= Constants.PRICE_DIGIT, \\\"Insufficient value\\\");\\n        insert(self, value);\\n\\n        addTail(self, value, orderId, user, amount);\\n    }\\n\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        amount = _removeOrder(self, value, orderId);\\n        remove(self, value);\\n    }\\n\\n    /**\\n     * @dev Reduces order amount once market order taken.\\n     */\\n    function fillOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount\\n    ) internal returns (PartiallyFilledOrder memory partiallyFilledOrder) {\\n        Node storage gn = self.nodes[value];\\n\\n        require(\\n            gn.orderTotalAmount >= _amount,\\n            \\\"OrderStatisticsTree(410) - Amount to fill is insufficient\\\"\\n        );\\n\\n        uint256 remainingAmount = _amount;\\n        OrderItem memory currentOrder = gn.orders[gn.head];\\n        uint48 orderId = gn.head;\\n\\n        while (orderId != 0 && remainingAmount != 0) {\\n            currentOrder = gn.orders[orderId];\\n\\n            if (currentOrder.amount <= remainingAmount) {\\n                remainingAmount -= currentOrder.amount;\\n                orderId = currentOrder.next;\\n            } else {\\n                partiallyFilledOrder = PartiallyFilledOrder(\\n                    currentOrder.orderId,\\n                    currentOrder.maker,\\n                    remainingAmount,\\n                    _calculateFutureValue(value, remainingAmount)\\n                );\\n                currentOrder = gn.orders[currentOrder.prev];\\n                break;\\n            }\\n        }\\n\\n        if (currentOrder.orderId != 0) {\\n            _dropOrders(self, value, currentOrder.orderId);\\n        }\\n\\n        if (partiallyFilledOrder.amount > 0) {\\n            self.nodes[value].orders[partiallyFilledOrder.orderId].amount -= partiallyFilledOrder\\n                .amount;\\n            self.nodes[value].orderTotalAmount -= partiallyFilledOrder.amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n        uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n        _link(self, _value, orderId, gn.head);\\n        _setHead(self, _value, orderId);\\n        if (gn.tail == 0) _setTail(self, _value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, _value, _orderId, _user, _amount);\\n        } else {\\n            uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n            _link(self, _value, gn.tail, orderId);\\n            _setTail(self, _value, orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint48) {\\n        Node storage gn = self.nodes[value];\\n        require(\\n            gn.orders[orderId].timestamp == 0,\\n            \\\"OrderStatisticsTree(409) - Order id already exist.\\\"\\n        );\\n\\n        gn.orderCounter += 1;\\n        gn.orderTotalAmount += amount;\\n        OrderItem memory order = OrderItem(orderId, 0, 0, user, block.timestamp, amount);\\n        gn.orders[orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the list.\\n     */\\n    function _removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n        gn.orderTotalAmount -= order.amount;\\n    }\\n\\n    /**\\n     * @dev Drop the OrderItems older than or equal `orderId` from the list\\n     */\\n    function _dropOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n        uint256 cursor = gn.head;\\n        uint256 removedCount = 1;\\n        uint256 removedAmount = gn.orders[cursor].amount;\\n\\n        while (cursor != orderId) {\\n            cursor = gn.orders[cursor].next;\\n            removedCount++;\\n            removedAmount += gn.orders[cursor].amount;\\n        }\\n\\n        if (gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        }\\n\\n        gn.orderCounter -= removedCount;\\n        gn.orderTotalAmount -= removedAmount;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 _prevId,\\n        uint48 _nextId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[_prevId].next = _nextId;\\n        gn.orders[_nextId].prev = _prevId;\\n    }\\n\\n    function _calculateFutureValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * Constants.PRICE_DIGIT).div(unitPrice);\\n    }\\n\\n    function _calculatePresentValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * unitPrice).div(Constants.PRICE_DIGIT);\\n    }\\n}\\n\",\"keccak256\":\"0x82f693fffbd1f1657b73d69598c7856b403fcccd41ac1c3143e8082e5dc9344d\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/OrderBookLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {OrderStatisticsTreeLib, PartiallyFilledOrder, OrderItem} from \\\"../OrderStatisticsTreeLib.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\nimport {ILendingMarket} from \\\"../../interfaces/ILendingMarket.sol\\\";\\nimport {ProtocolTypes} from \\\"../../types/ProtocolTypes.sol\\\";\\nimport {LendingMarketStorage as Storage, MarketOrder, ItayoseLog} from \\\"../../storages/LendingMarketStorage.sol\\\";\\n\\nlibrary OrderBookLogic {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n    using RoundingUint256 for uint256;\\n\\n    function getHighestLendingUnitPrice() public view returns (uint256) {\\n        return Storage.slot().lendOrders[Storage.slot().maturity].last();\\n    }\\n\\n    function getLowestBorrowingUnitPrice() public view returns (uint256) {\\n        uint256 unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].first();\\n        return unitPrice == 0 ? Constants.PRICE_DIGIT : unitPrice;\\n    }\\n\\n    function hasBorrowOrder(address _user) external view returns (bool) {\\n        return Storage.slot().activeBorrowOrderIds[_user].length != 0;\\n    }\\n\\n    function hasLendOrder(address _user) external view returns (bool) {\\n        return Storage.slot().activeLendOrderIds[_user].length != 0;\\n    }\\n\\n    function getLendOrderBook(uint256 _limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = Storage.slot().lendOrders[Storage.slot().maturity].last();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\\n            unitPrice\\n        );\\n        quantities[0] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeCount(unitPrice);\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = Storage.slot().lendOrders[Storage.slot().maturity].prev(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\\n                unitPrice\\n            );\\n            quantities[i] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeCount(\\n                unitPrice\\n            );\\n        }\\n    }\\n\\n    function getBorrowOrderBook(uint256 _limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].first();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeTotalAmount(\\n            unitPrice\\n        );\\n        quantities[0] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeCount(\\n            unitPrice\\n        );\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].next(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeTotalAmount(\\n                unitPrice\\n            );\\n            quantities[i] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeCount(\\n                unitPrice\\n            );\\n        }\\n    }\\n\\n    function getOrder(uint48 _orderId)\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp,\\n            bool isPreOrder\\n        )\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n\\n        OrderItem memory orderItem;\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            orderItem = Storage.slot().lendOrders[marketOrder.maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n        } else {\\n            orderItem = Storage.slot().borrowOrders[marketOrder.maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n        }\\n\\n        if (orderItem.maker != address(0)) {\\n            side = marketOrder.side;\\n            unitPrice = marketOrder.unitPrice;\\n            maturity = marketOrder.maturity;\\n            maker = orderItem.maker;\\n            amount = orderItem.amount;\\n            timestamp = orderItem.timestamp;\\n            isPreOrder = Storage.slot().isPreOrder[_orderId];\\n        }\\n    }\\n\\n    function getTotalAmountFromLendOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds) = getLendOrderIds(_user);\\n        maturity = Storage.slot().userCurrentMaturities[_user];\\n\\n        for (uint256 i = 0; i < activeOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[activeOrderIds[i]];\\n            // Sum future values in the current maturity.\\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\\n            // as an order canceled in the past market.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .lendOrders[Storage.slot().maturity]\\n                .getOrderById(marketOrder.unitPrice, activeOrderIds[i]);\\n            activeAmount += orderItem.amount;\\n        }\\n\\n        for (uint256 i = 0; i < inActiveOrderIds.length; i++) {\\n            // Sum future values in the maturity of orders.\\n            // It will be the future value when the order is created, even if the market is rotated\\n            // and maturity is updated.\\n            (uint256 presentValue, uint256 futureValue) = _getLendOrderAmounts(inActiveOrderIds[i]);\\n            inactiveAmount += presentValue;\\n            inactiveFutureValue += futureValue;\\n        }\\n    }\\n\\n    function getTotalAmountFromBorrowOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds) = getBorrowOrderIds(\\n            _user\\n        );\\n        maturity = Storage.slot().userCurrentMaturities[_user];\\n\\n        for (uint256 i = 0; i < activeOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[activeOrderIds[i]];\\n            // Sum future values in the current maturity.\\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\\n            // as an order canceled in the past market.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .borrowOrders[Storage.slot().maturity]\\n                .getOrderById(marketOrder.unitPrice, activeOrderIds[i]);\\n            activeAmount += orderItem.amount;\\n        }\\n\\n        maturity = Storage.slot().userCurrentMaturities[_user];\\n\\n        for (uint256 i = 0; i < inActiveOrderIds.length; i++) {\\n            // Sum future values in the maturity of orders\\n            // It will be the future value when the order is created, even if the market is rotated\\n            // and maturity is updated.\\n            (uint256 presentValue, uint256 futureValue) = _getBorrowOrderAmounts(\\n                inActiveOrderIds[i]\\n            );\\n            inactiveAmount += presentValue;\\n            inactiveFutureValue += futureValue;\\n        }\\n    }\\n\\n    function getLendOrderIds(address _user)\\n        public\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        bool isPastMaturity = Storage.slot().userCurrentMaturities[_user] !=\\n            Storage.slot().maturity;\\n\\n        activeOrderIds = new uint48[](\\n            isPastMaturity ? 0 : Storage.slot().activeLendOrderIds[_user].length\\n        );\\n        inActiveOrderIds = new uint48[](Storage.slot().activeLendOrderIds[_user].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().activeLendOrderIds[_user].length; i++) {\\n            uint48 orderId = Storage.slot().activeLendOrderIds[_user][i];\\n            MarketOrder memory marketOrder = Storage.slot().orders[orderId];\\n\\n            if (\\n                !Storage\\n                    .slot()\\n                    .lendOrders[Storage.slot().userCurrentMaturities[_user]]\\n                    .isActiveOrderId(marketOrder.unitPrice, orderId)\\n            ) {\\n                inActiveOrderCount += 1;\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                if (!isPastMaturity) {\\n                    activeOrderCount += 1;\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function getBorrowOrderIds(address _user)\\n        public\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        bool isPastMaturity = Storage.slot().userCurrentMaturities[_user] !=\\n            Storage.slot().maturity;\\n\\n        activeOrderIds = new uint48[](\\n            isPastMaturity ? 0 : Storage.slot().activeBorrowOrderIds[_user].length\\n        );\\n        inActiveOrderIds = new uint48[](Storage.slot().activeBorrowOrderIds[_user].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().activeBorrowOrderIds[_user].length; i++) {\\n            uint48 orderId = Storage.slot().activeBorrowOrderIds[_user][i];\\n            MarketOrder memory marketOrder = Storage.slot().orders[orderId];\\n\\n            if (\\n                !Storage\\n                    .slot()\\n                    .borrowOrders[Storage.slot().userCurrentMaturities[_user]]\\n                    .isActiveOrderId(marketOrder.unitPrice, orderId)\\n            ) {\\n                inActiveOrderCount += 1;\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                activeOrderCount += 1;\\n                if (!isPastMaturity) {\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function estimateFilledAmount(ProtocolTypes.Side _side, uint256 _futureValue)\\n        external\\n        view\\n        returns (uint256 amount)\\n    {\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            return\\n                Storage.slot().lendOrders[Storage.slot().maturity].estimateDroppedAmountFromRight(\\n                    _futureValue\\n                );\\n        } else {\\n            return\\n                Storage.slot().borrowOrders[Storage.slot().maturity].estimateDroppedAmountFromLeft(\\n                    _futureValue\\n                );\\n        }\\n    }\\n\\n    function insertOrder(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) external returns (uint48 orderId) {\\n        orderId = _nextOrderId();\\n        Storage.slot().orders[orderId] = MarketOrder(\\n            _side,\\n            _unitPrice,\\n            Storage.slot().maturity,\\n            block.timestamp\\n        );\\n\\n        if (_side == ProtocolTypes.Side.LEND) {\\n            Storage.slot().lendOrders[Storage.slot().maturity].insertOrder(\\n                _unitPrice,\\n                orderId,\\n                _user,\\n                _amount\\n            );\\n            Storage.slot().activeLendOrderIds[_user].push(orderId);\\n        } else if (_side == ProtocolTypes.Side.BORROW) {\\n            Storage.slot().borrowOrders[Storage.slot().maturity].insertOrder(\\n                _unitPrice,\\n                orderId,\\n                _user,\\n                _amount\\n            );\\n            Storage.slot().activeBorrowOrderIds[_user].push(orderId);\\n        }\\n    }\\n\\n    function dropOrders(\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _futureValue,\\n        uint256 _unitPrice\\n    )\\n        external\\n        returns (\\n            uint256 filledUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledFutureValue,\\n            uint48 partiallyFilledOrderId,\\n            address partiallyFilledMaker,\\n            uint256 partiallyFilledAmount,\\n            uint256 partiallyFilledFutureValue,\\n            uint256 remainingAmount\\n        )\\n    {\\n        PartiallyFilledOrder memory partiallyFilledOrder;\\n\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            (\\n                filledUnitPrice,\\n                filledAmount,\\n                filledFutureValue,\\n                remainingAmount,\\n                partiallyFilledOrder\\n            ) = Storage.slot().lendOrders[Storage.slot().maturity].dropRight(\\n                _amount,\\n                _unitPrice,\\n                _futureValue\\n            );\\n        } else if (_side == ProtocolTypes.Side.LEND) {\\n            (\\n                filledUnitPrice,\\n                filledAmount,\\n                filledFutureValue,\\n                remainingAmount,\\n                partiallyFilledOrder\\n            ) = Storage.slot().borrowOrders[Storage.slot().maturity].dropLeft(\\n                _amount,\\n                _unitPrice,\\n                _futureValue\\n            );\\n        }\\n\\n        partiallyFilledOrderId = partiallyFilledOrder.orderId;\\n        partiallyFilledMaker = partiallyFilledOrder.maker;\\n        partiallyFilledAmount = partiallyFilledOrder.amount;\\n        partiallyFilledFutureValue = partiallyFilledOrder.futureValue;\\n    }\\n\\n    function cleanLendOrders(address _user)\\n        external\\n        returns (\\n            uint48[] memory orderIds,\\n            uint256 activeOrderCount,\\n            uint256 removedFutureValue,\\n            uint256 removedOrderAmount\\n        )\\n    {\\n        (\\n            uint48[] memory activeLendOrderIds,\\n            uint48[] memory inActiveLendOrderIds\\n        ) = getLendOrderIds(_user);\\n\\n        Storage.slot().activeLendOrderIds[_user] = activeLendOrderIds;\\n        activeOrderCount = activeLendOrderIds.length;\\n        uint256 inactiveOrderCount = inActiveLendOrderIds.length;\\n        orderIds = new uint48[](inactiveOrderCount);\\n\\n        for (uint256 i = 0; i < inactiveOrderCount; i++) {\\n            (uint256 presentValue, uint256 futureValue) = _getLendOrderAmounts(\\n                inActiveLendOrderIds[i]\\n            );\\n\\n            removedOrderAmount += presentValue;\\n            removedFutureValue += futureValue;\\n            orderIds[i] = inActiveLendOrderIds[i];\\n        }\\n    }\\n\\n    function cleanBorrowOrders(address _user)\\n        external\\n        returns (\\n            uint48[] memory orderIds,\\n            uint256 activeOrderCount,\\n            uint256 removedFutureValue,\\n            uint256 removedOrderAmount\\n        )\\n    {\\n        (\\n            uint48[] memory activeBorrowOrderIds,\\n            uint48[] memory inActiveBorrowOrderIds\\n        ) = getBorrowOrderIds(_user);\\n\\n        Storage.slot().activeBorrowOrderIds[_user] = activeBorrowOrderIds;\\n        activeOrderCount = activeBorrowOrderIds.length;\\n        uint256 inactiveOrderCount = inActiveBorrowOrderIds.length;\\n        orderIds = new uint48[](inactiveOrderCount);\\n\\n        for (uint256 i = 0; i < inactiveOrderCount; i++) {\\n            (uint256 presentValue, uint256 futureValue) = _getBorrowOrderAmounts(\\n                inActiveBorrowOrderIds[i]\\n            );\\n\\n            removedOrderAmount += presentValue;\\n            removedFutureValue += futureValue;\\n            orderIds[i] = inActiveBorrowOrderIds[i];\\n        }\\n    }\\n\\n    function removeOrder(address _user, uint48 _orderId)\\n        external\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n        uint256 removedAmount;\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            removedAmount = Storage.slot().lendOrders[Storage.slot().maturity].removeOrder(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n            _removeOrderIdFromOrders(Storage.slot().activeLendOrderIds[_user], _orderId);\\n        } else if (marketOrder.side == ProtocolTypes.Side.BORROW) {\\n            removedAmount = Storage.slot().borrowOrders[Storage.slot().maturity].removeOrder(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n            _removeOrderIdFromOrders(Storage.slot().activeBorrowOrderIds[_user], _orderId);\\n        }\\n\\n        return (marketOrder.side, removedAmount, marketOrder.unitPrice);\\n    }\\n\\n    function getOpeningUnitPrice()\\n        external\\n        view\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 lastLendUnitPrice,\\n            uint256 lastBorrowUnitPrice,\\n            uint256 totalOffsetAmount\\n        )\\n    {\\n        uint256 lendUnitPrice = getHighestLendingUnitPrice();\\n        uint256 borrowUnitPrice = getLowestBorrowingUnitPrice();\\n        uint256 lendAmount = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\\n            lendUnitPrice\\n        );\\n        uint256 borrowAmount = Storage\\n            .slot()\\n            .borrowOrders[Storage.slot().maturity]\\n            .getNodeTotalAmount(borrowUnitPrice);\\n\\n        OrderStatisticsTreeLib.Tree storage borrowOrders = Storage.slot().borrowOrders[\\n            Storage.slot().maturity\\n        ];\\n        OrderStatisticsTreeLib.Tree storage lendOrders = Storage.slot().lendOrders[\\n            Storage.slot().maturity\\n        ];\\n\\n        // return mid price when no lending and borrowing orders overwrap\\n        if (borrowUnitPrice > lendUnitPrice) {\\n            openingUnitPrice = (lendUnitPrice + borrowUnitPrice).div(2);\\n            return (openingUnitPrice, 0, 0, 0);\\n        }\\n\\n        while (borrowUnitPrice <= lendUnitPrice && borrowUnitPrice > 0 && lendUnitPrice > 0) {\\n            lastLendUnitPrice = lendUnitPrice;\\n            lastBorrowUnitPrice = borrowUnitPrice;\\n\\n            if (lendAmount > borrowAmount) {\\n                openingUnitPrice = lendUnitPrice;\\n                totalOffsetAmount += borrowAmount;\\n                lendAmount -= borrowAmount;\\n                borrowUnitPrice = borrowOrders.next(borrowUnitPrice);\\n                borrowAmount = borrowOrders.getNodeTotalAmount(borrowUnitPrice);\\n            } else if (lendAmount < borrowAmount) {\\n                openingUnitPrice = borrowUnitPrice;\\n                totalOffsetAmount += lendAmount;\\n                borrowAmount -= lendAmount;\\n                lendUnitPrice = lendOrders.prev(lendUnitPrice);\\n                lendAmount = lendOrders.getNodeTotalAmount(lendUnitPrice);\\n            } else {\\n                openingUnitPrice = (lendUnitPrice + borrowUnitPrice).div(2);\\n                totalOffsetAmount += lendAmount;\\n                lendUnitPrice = lendOrders.prev(lendUnitPrice);\\n                borrowUnitPrice = borrowOrders.next(borrowUnitPrice);\\n                lendAmount = lendOrders.getNodeTotalAmount(lendUnitPrice);\\n                borrowAmount = borrowOrders.getNodeTotalAmount(borrowUnitPrice);\\n            }\\n        }\\n    }\\n\\n    function getOrderExecutionConditions(\\n        ProtocolTypes.Side _side,\\n        uint256 _unitPrice,\\n        uint256 _circuitBreakerLimitRange\\n    )\\n        external\\n        returns (\\n            bool isFilled,\\n            uint256 executedUnitPrice,\\n            uint256 cbThresholdUnitPrice,\\n            bool ignoreRemainingAmount\\n        )\\n    {\\n        require(_circuitBreakerLimitRange < Constants.PCT_DIGIT, \\\"CB limit can not be so high\\\");\\n        cbThresholdUnitPrice = Storage.slot().circuitBreakerThresholdUnitPrices[block.number][\\n            _side\\n        ];\\n        bool isLend = _side == ProtocolTypes.Side.LEND;\\n        bool orderExists;\\n        uint256 bestUnitPrice;\\n\\n        if (isLend) {\\n            bestUnitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].first();\\n            orderExists = bestUnitPrice != 0;\\n\\n            if (orderExists && cbThresholdUnitPrice == 0) {\\n                cbThresholdUnitPrice = _getLendCircuitBreakerThreshold(\\n                    _circuitBreakerLimitRange,\\n                    bestUnitPrice\\n                );\\n                Storage.slot().circuitBreakerThresholdUnitPrices[block.number][\\n                        _side\\n                    ] = cbThresholdUnitPrice;\\n            }\\n        } else {\\n            bestUnitPrice = Storage.slot().lendOrders[Storage.slot().maturity].last();\\n            orderExists = bestUnitPrice != 0;\\n\\n            if (orderExists && cbThresholdUnitPrice == 0) {\\n                cbThresholdUnitPrice = _getBorrowCircuitBreakerThreshold(\\n                    _circuitBreakerLimitRange,\\n                    bestUnitPrice\\n                );\\n\\n                Storage.slot().circuitBreakerThresholdUnitPrices[block.number][\\n                        _side\\n                    ] = cbThresholdUnitPrice;\\n            }\\n        }\\n\\n        if (_unitPrice == 0 && !orderExists) revert(\\\"Order not found\\\");\\n\\n        if (\\n            _unitPrice == 0 ||\\n            (orderExists &&\\n                ((isLend && _unitPrice > cbThresholdUnitPrice) ||\\n                    (!isLend && _unitPrice < cbThresholdUnitPrice)))\\n        ) {\\n            executedUnitPrice = cbThresholdUnitPrice;\\n            ignoreRemainingAmount = true;\\n        } else {\\n            executedUnitPrice = _unitPrice;\\n            ignoreRemainingAmount = false;\\n        }\\n\\n        isFilled = isLend\\n            ? (bestUnitPrice == 0 ? Constants.PRICE_DIGIT : bestUnitPrice) <= executedUnitPrice\\n            : bestUnitPrice >= executedUnitPrice;\\n    }\\n\\n    function _getBorrowCircuitBreakerThreshold(\\n        uint256 _circuitBreakerLimitRange,\\n        uint256 _unitPrice\\n    ) internal pure returns (uint256 cbThresholdUnitPrice) {\\n        // NOTE: Formula of circuit breaker threshold for borrow orders:\\n        // cbThreshold = 100 / (1 + (100 / price - 1) * (1 + range))\\n        uint256 numerator = _unitPrice * Constants.PRICE_DIGIT * Constants.PCT_DIGIT;\\n        uint256 denominator = _unitPrice *\\n            Constants.PCT_DIGIT +\\n            (Constants.PRICE_DIGIT - _unitPrice) *\\n            (Constants.PCT_DIGIT + _circuitBreakerLimitRange);\\n        cbThresholdUnitPrice = numerator.div(denominator);\\n\\n        if (_unitPrice > cbThresholdUnitPrice + Constants.MAXIMUM_CIRCUIT_BREAKER_THRESHOLD) {\\n            cbThresholdUnitPrice = _unitPrice - Constants.MAXIMUM_CIRCUIT_BREAKER_THRESHOLD;\\n        } else if (\\n            _unitPrice < cbThresholdUnitPrice + Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n        ) {\\n            cbThresholdUnitPrice = _unitPrice > Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n                ? _unitPrice - Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n                : 1;\\n        }\\n    }\\n\\n    function _getLendCircuitBreakerThreshold(uint256 _circuitBreakerLimitRange, uint256 _unitPrice)\\n        internal\\n        pure\\n        returns (uint256 cbThresholdUnitPrice)\\n    {\\n        // NOTE: Formula of circuit breaker threshold for lend orders:\\n        // cbThreshold = 100 / (1 + (100 / price - 1) * (1 - range))\\n        uint256 num = _unitPrice * Constants.PRICE_DIGIT * Constants.PCT_DIGIT;\\n        uint256 den = _unitPrice *\\n            Constants.PCT_DIGIT +\\n            (Constants.PRICE_DIGIT - _unitPrice) *\\n            (Constants.PCT_DIGIT - _circuitBreakerLimitRange);\\n        cbThresholdUnitPrice = num.div(den);\\n\\n        if (cbThresholdUnitPrice > _unitPrice + Constants.MAXIMUM_CIRCUIT_BREAKER_THRESHOLD) {\\n            cbThresholdUnitPrice = _unitPrice + Constants.MAXIMUM_CIRCUIT_BREAKER_THRESHOLD;\\n        } else if (\\n            cbThresholdUnitPrice < _unitPrice + Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n        ) {\\n            cbThresholdUnitPrice = _unitPrice + Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD <=\\n                Constants.PRICE_DIGIT\\n                ? _unitPrice + Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n                : Constants.PRICE_DIGIT;\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases and returns id of last order in order book.\\n     * @return The new order id\\n     */\\n    function _nextOrderId() internal returns (uint48) {\\n        Storage.slot().lastOrderId++;\\n        return Storage.slot().lastOrderId;\\n    }\\n\\n    function _removeOrderIdFromOrders(uint48[] storage orders, uint256 orderId) internal {\\n        uint256 lastOrderIndex = orders.length - 1;\\n        for (uint256 i = 0; i <= lastOrderIndex; i++) {\\n            if (orders[i] == orderId) {\\n                if (i != lastOrderIndex) {\\n                    uint48 lastOrderId = orders[lastOrderIndex];\\n                    orders[i] = lastOrderId;\\n                }\\n\\n                orders.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _getLendOrderAmounts(uint48 _orderId)\\n        internal\\n        view\\n        returns (uint256 presentValue, uint256 futureValue)\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n        OrderItem memory orderItem = Storage.slot().lendOrders[marketOrder.maturity].getOrderById(\\n            marketOrder.unitPrice,\\n            _orderId\\n        );\\n        uint256 unitPrice = marketOrder.unitPrice;\\n\\n        if (Storage.slot().isPreOrder[_orderId]) {\\n            ItayoseLog memory itayoseLog = Storage.slot().itayoseLogs[marketOrder.maturity];\\n\\n            unitPrice = itayoseLog.lastLendUnitPrice <= unitPrice\\n                ? itayoseLog.openingUnitPrice\\n                : unitPrice;\\n        }\\n\\n        presentValue = orderItem.amount;\\n        futureValue = (orderItem.amount * Constants.PRICE_DIGIT).div(unitPrice);\\n    }\\n\\n    function _getBorrowOrderAmounts(uint48 _orderId)\\n        internal\\n        view\\n        returns (uint256 presentValue, uint256 futureValue)\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n        OrderItem memory orderItem = Storage.slot().borrowOrders[marketOrder.maturity].getOrderById(\\n            marketOrder.unitPrice,\\n            _orderId\\n        );\\n        uint256 unitPrice = marketOrder.unitPrice;\\n\\n        if (Storage.slot().isPreOrder[_orderId]) {\\n            ItayoseLog memory itayoseLog = Storage.slot().itayoseLogs[marketOrder.maturity];\\n\\n            unitPrice = itayoseLog.lastBorrowUnitPrice >= unitPrice\\n                ? itayoseLog.openingUnitPrice\\n                : unitPrice;\\n        }\\n\\n        presentValue = orderItem.amount;\\n        futureValue = (orderItem.amount * Constants.PRICE_DIGIT).div(unitPrice);\\n    }\\n}\\n\",\"keccak256\":\"0x6621aa59763b3dd6b3a6978710ca4c99033ea273a6e96f5ceb6055d87f0e9f57\",\"license\":\"MIT\"},\"contracts/protocol/libraries/math/RoundingUint256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoundingUint256 {\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0);\\n\\n        if ((a * 10) / b - (a / b) * 10 < 5) {\\n            return a / b;\\n        } else {\\n            return (a / b) + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc360f39a82f1a9a7454726e3db802407d305b5e525aa8c3236fe49ca6ca534d\",\"license\":\"MIT\"},\"contracts/protocol/storages/LendingMarketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {OrderStatisticsTreeLib} from \\\"../libraries/OrderStatisticsTreeLib.sol\\\";\\n\\nstruct MarketOrder {\\n    ProtocolTypes.Side side;\\n    uint256 unitPrice; // in basis points\\n    uint256 maturity;\\n    uint256 timestamp;\\n}\\n\\nstruct ItayoseLog {\\n    uint256 openingUnitPrice;\\n    uint256 lastLendUnitPrice;\\n    uint256 lastBorrowUnitPrice;\\n}\\n\\nlibrary LendingMarketStorage {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarket\\\");\\n\\n    struct Storage {\\n        bytes32 ccy;\\n        uint48 lastOrderId;\\n        uint256 openingDate;\\n        uint256 maturity;\\n        // Mapping from maturity to boolean if the market is ready or not\\n        mapping(uint256 => bool) isReady;\\n        // Mapping from user to active lend order ids\\n        mapping(address => uint48[]) activeLendOrderIds;\\n        // Mapping from user to active borrow order ids\\n        mapping(address => uint48[]) activeBorrowOrderIds;\\n        // Mapping from user to current maturity\\n        mapping(address => uint256) userCurrentMaturities;\\n        // Mapping from orderId to order\\n        mapping(uint256 => MarketOrder) orders;\\n        // Mapping from orderId to boolean for pre-order or not\\n        mapping(uint256 => bool) isPreOrder;\\n        // Mapping from maturity to lending orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) lendOrders;\\n        // Mapping from maturity to borrowing orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) borrowOrders;\\n        // Mapping from order side to threshold unit price of circuit breaker per block\\n        mapping(uint256 => mapping(ProtocolTypes.Side => uint256)) circuitBreakerThresholdUnitPrices;\\n        // Mapping from maturity to Itayose log\\n        mapping(uint256 => ItayoseLog) itayoseLogs;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd4a4b33669770a524107a69a98ecc0e528f021a76388282b778e867eb7c97a5a\",\"license\":\"MIT\"},\"contracts/protocol/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0x7b05f97661e6dfe1142eec9be3dcf86d1eec55ed4fb1dea4a5859f75a0c84c13\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}