{
  "address": "0xAE198C73534dF5C3A6A893AFb6B390fa1FF31d25",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidCircuitBreakerLimitRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOrderFeeRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OrderBookNotMatured",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "CircuitBreakerLimitRangeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "openingUnitPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastLendUnitPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastBorrowUnitPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offsetAmount",
          "type": "uint256"
        }
      ],
      "name": "ItayoseExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "orderBookId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "openingDate",
          "type": "uint256"
        }
      ],
      "name": "OrderBookCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "OrderFeeRateUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "getBestBorrowUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "_orderBookIds",
          "type": "uint8[]"
        }
      ],
      "name": "getBestBorrowUnitPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "getBestLendUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "_orderBookIds",
          "type": "uint8[]"
        }
      ],
      "name": "getBestLendUnitPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "getBlockUnitPriceAverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "getBlockUnitPriceHistory",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getBorrowOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "getCircuitBreakerThresholds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxLendUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBorrowUnitPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "getItayoseEstimation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "openingUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastLendUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastBorrowUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalOffsetAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "getLastOrderBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getLendOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "getMarketUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "_orderBookIds",
          "type": "uint8[]"
        }
      ],
      "name": "getMaturities",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "maturities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "getOrderBookDetail",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openingDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "preOpeningDate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "isItayosePeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "isMatured",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "isOpened",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "isPreOrderPeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "isReady",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x322edb0858a1a33b7cfcc26c821b6a86d200940cac2d8e99937ff1ca1858678b",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0xAE198C73534dF5C3A6A893AFb6B390fa1FF31d25",
    "transactionIndex": 38,
    "gasUsed": "2989869",
    "logsBloom": "0x
    "blockHash": "0x82e71efef68c58329e30d50018413870cc6f9aafe34a4f79419b2afe776a4b69",
    "transactionHash": "0x322edb0858a1a33b7cfcc26c821b6a86d200940cac2d8e99937ff1ca1858678b",
    "logs": [],
    "blockNumber": 4382240,
    "cumulativeGasUsed": "6315722",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6215136020f9975bf2b171c88cb0f429",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidCircuitBreakerLimitRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOrderFeeRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderBookNotMatured\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CircuitBreakerLimitRangeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openingUnitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastLendUnitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastBorrowUnitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offsetAmount\",\"type\":\"uint256\"}],\"name\":\"ItayoseExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"orderBookId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openingDate\",\"type\":\"uint256\"}],\"name\":\"OrderBookCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"OrderFeeRateUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"getBestBorrowUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_orderBookIds\",\"type\":\"uint8[]\"}],\"name\":\"getBestBorrowUnitPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"getBestLendUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_orderBookIds\",\"type\":\"uint8[]\"}],\"name\":\"getBestLendUnitPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getBlockUnitPriceAverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"getBlockUnitPriceHistory\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getBorrowOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"getCircuitBreakerThresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLendUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBorrowUnitPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"getItayoseEstimation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"openingUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastLendUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBorrowUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOffsetAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"getLastOrderBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getLendOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"getMarketUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_orderBookIds\",\"type\":\"uint8[]\"}],\"name\":\"getMaturities\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"maturities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"getOrderBookDetail\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preOpeningDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"isItayosePeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"isMatured\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"isOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"isPreOrderPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"isReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/libraries/logics/OrderBookLogic.sol\":\"OrderBookLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/protocol/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport {ItayoseLog} from \\\"../storages/LendingMarketStorage.sol\\\";\\nimport {OrderBookLib, FilledOrder, PartiallyFilledOrder} from \\\"../libraries/OrderBookLib.sol\\\";\\n\\ninterface ILendingMarket {\\n    error NoOrderExists();\\n    error CallerNotMaker();\\n    error MarketNotOpened();\\n    error NotItayosePeriod();\\n    error NotPreOrderPeriod();\\n\\n    function getOrderBookDetail(uint8 orderBookId)\\n        external\\n        view\\n        returns (\\n            bytes32 ccy,\\n            uint256 maturity,\\n            uint256 openingDate,\\n            uint256 preOpeningDate\\n        );\\n\\n    function getCircuitBreakerThresholds(uint8 orderBookId)\\n        external\\n        view\\n        returns (uint256 lendCircuitBreakerThreshold, uint256 borrowCircuitBreakerThreshold);\\n\\n    function getBestLendUnitPrice(uint8 orderBookId) external view returns (uint256 unitPrice);\\n\\n    function getBestLendUnitPrices(uint8[] calldata orderBookIds)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getBestBorrowUnitPrice(uint8 orderBookId) external view returns (uint256 unitPrice);\\n\\n    function getBestBorrowUnitPrices(uint8[] calldata orderBookIds)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getMarketUnitPrice(uint8 orderBookId) external view returns (uint256);\\n\\n    function getLastOrderBlockNumber(uint8 orderBookId) external view returns (uint256);\\n\\n    function getBlockUnitPriceHistory(uint8 orderBookId) external view returns (uint256[] memory);\\n\\n    function getBlockUnitPriceAverage(uint8 orderBookId, uint256 count)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getBorrowOrderBook(uint8 orderBookId, uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(uint8 orderBookId, uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getItayoseEstimation(uint8 orderBookId)\\n        external\\n        view\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 lastLendUnitPrice,\\n            uint256 lastBorrowUnitPrice,\\n            uint256 totalOffsetAmount\\n        );\\n\\n    function getMaturity(uint8 orderBookId) external view returns (uint256);\\n\\n    function getMaturities(uint8[] calldata orderBookIds)\\n        external\\n        view\\n        returns (uint256[] memory maturities);\\n\\n    function getCurrency() external view returns (bytes32);\\n\\n    function getOrderFeeRate() external view returns (uint256);\\n\\n    function getCircuitBreakerLimitRange() external view returns (uint256);\\n\\n    function getOpeningDate(uint8 orderBookId) external view returns (uint256);\\n\\n    function isReady(uint8 orderBookId) external view returns (bool);\\n\\n    function isMatured(uint8 orderBookId) external view returns (bool);\\n\\n    function isOpened(uint8 orderBookId) external view returns (bool);\\n\\n    function isItayosePeriod(uint8 orderBookId) external view returns (bool);\\n\\n    function isPreOrderPeriod(uint8 orderBookId) external returns (bool);\\n\\n    function getItayoseLog(uint256 maturity) external view returns (ItayoseLog memory);\\n\\n    function getOrder(uint8 orderBookId, uint48 orderId)\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp,\\n            bool isPreOrder\\n        );\\n\\n    function getTotalAmountFromLendOrders(uint8 orderBookId, address user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getTotalAmountFromBorrowOrders(uint8 orderBookId, address user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getLendOrderIds(uint8 orderBookId, address user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds);\\n\\n    function getBorrowOrderIds(uint8 orderBookId, address user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds);\\n\\n    function calculateFilledAmount(\\n        uint8 orderBookId,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV,\\n            uint256 feeInFV,\\n            uint256 placedAmount\\n        );\\n\\n    function createOrderBook(\\n        uint256 maturity,\\n        uint256 openingDate,\\n        uint256 preOpeningDate\\n    ) external returns (uint8 orderBookId);\\n\\n    function executeAutoRoll(\\n        uint8 maturedOrderBookId,\\n        uint8 newNearestOrderBookId,\\n        uint256 newMaturity,\\n        uint256 openingDate,\\n        uint256 autoRollUnitPrice\\n    ) external;\\n\\n    function cancelOrder(\\n        uint8 orderBookId,\\n        address user,\\n        uint48 orderId\\n    ) external;\\n\\n    function executeOrder(\\n        uint8 orderBookId,\\n        ProtocolTypes.Side side,\\n        address account,\\n        uint256 amount,\\n        uint256 unitPrice\\n    )\\n        external\\n        returns (\\n            FilledOrder memory filledOrder,\\n            PartiallyFilledOrder memory partiallyFilledOrder,\\n            uint256 feeInFV\\n        );\\n\\n    function executePreOrder(\\n        uint8 orderBookId,\\n        ProtocolTypes.Side side,\\n        address user,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external;\\n\\n    function unwindPosition(\\n        uint8 orderBookId,\\n        ProtocolTypes.Side side,\\n        address user,\\n        uint256 futureValue\\n    )\\n        external\\n        returns (\\n            FilledOrder memory filledOrder,\\n            PartiallyFilledOrder memory partiallyFilledOrder,\\n            uint256 feeInFV\\n        );\\n\\n    function executeItayoseCall(uint8 orderBookId)\\n        external\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 totalOffsetAmount,\\n            uint256 openingDate,\\n            PartiallyFilledOrder memory partiallyFilledLendingOrder,\\n            PartiallyFilledOrder memory partiallyFilledBorrowingOrder\\n        );\\n\\n    function cleanUpOrders(uint8 orderBookId, address user)\\n        external\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        );\\n\\n    function updateOrderFeeRate(uint256 orderFeeRate) external;\\n\\n    function updateCircuitBreakerLimitRange(uint256 limitRange) external;\\n\\n    function pauseMarket() external;\\n\\n    function unpauseMarket() external;\\n}\\n\",\"keccak256\":\"0x58a4b6aca263a1e313a0cbc917328098339d3835b10780757838866798df2c09\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Constants {\\n    /// @dev Used for price digits in the basis (10000 -> 1)\\n    uint256 internal constant PRICE_DIGIT = 10000;\\n\\n    /// @dev Used for percentage digits in the basis (10000 -> 100%)\\n    uint256 internal constant PCT_DIGIT = 10000;\\n\\n    /// @dev Used for seconds in year (60 * 60 * 24 * 365)\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000;\\n\\n    /// @dev Used for maximum order count per currency\\n    uint256 internal constant MAXIMUM_ORDER_COUNT = 20;\\n\\n    /// @dev Used for minimum range for circuit breaker unit price\\n    uint256 internal constant MINIMUM_CIRCUIT_BREAKER_RANGE = 100;\\n}\\n\",\"keccak256\":\"0x8ab1b7b6191ba0f20fe1d26c937d130cdc52b0f21827aa34103c3b6b425a4c7e\",\"license\":\"MIT\"},\"contracts/protocol/libraries/OrderBookLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Constants} from \\\"./Constants.sol\\\";\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {OrderStatisticsTreeLib, PartiallyRemovedOrder} from \\\"./OrderStatisticsTreeLib.sol\\\";\\nimport {RoundingUint256} from \\\"./math/RoundingUint256.sol\\\";\\n\\nstruct PlacedOrder {\\n    ProtocolTypes.Side side;\\n    uint256 unitPrice;\\n    uint256 maturity;\\n    uint256 timestamp;\\n}\\n\\nstruct FilledOrder {\\n    uint256 amount;\\n    uint256 unitPrice;\\n    uint256 futureValue;\\n    uint256 ignoredAmount;\\n}\\n\\nstruct PartiallyFilledOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 futureValue;\\n}\\n\\nlibrary OrderBookLib {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n    using RoundingUint256 for uint256;\\n\\n    uint256 public constant PRE_ORDER_BASE_PERIOD = 7 days;\\n    uint256 public constant ITAYOSE_PERIOD = 1 hours;\\n\\n    error EmptyOrderBook();\\n    error PastMaturityOrderExists();\\n\\n    struct OrderBook {\\n        uint256 maturity;\\n        uint256 openingDate;\\n        uint256 preOpeningDate;\\n        uint48 lastOrderId;\\n        uint48 lastOrderBlockNumber;\\n        bool isReliableBlock;\\n        // Micro slots for block unit price history\\n        uint80 blockUnitPriceHistory;\\n        uint256 blockTotalAmount;\\n        uint256 blockTotalFutureValue;\\n        // Mapping from user to active lend order ids\\n        mapping(address => uint48[]) activeLendOrderIds;\\n        // Mapping from user to active borrow order ids\\n        mapping(address => uint48[]) activeBorrowOrderIds;\\n        // Mapping from user to current maturity\\n        mapping(address => uint256) userCurrentMaturities;\\n        // Mapping from orderId to order micro slots\\n        mapping(uint256 => uint256) orders;\\n        // Mapping from orderId to boolean for pre-order or not\\n        mapping(uint256 => bool) isPreOrder;\\n        // Mapping from maturity to lending orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) lendOrders;\\n        // Mapping from maturity to borrowing orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) borrowOrders;\\n    }\\n\\n    function initialize(\\n        OrderBook storage self,\\n        uint256 _maturity,\\n        uint256 _openingDate,\\n        uint256 _preOpeningDate\\n    ) internal returns (bool isReady) {\\n        self.maturity = _maturity;\\n        self.openingDate = _openingDate;\\n        self.preOpeningDate = _preOpeningDate;\\n\\n        self.lastOrderBlockNumber = 0;\\n        self.blockTotalAmount = 0;\\n        self.blockTotalFutureValue = 0;\\n        self.blockUnitPriceHistory = 0;\\n        self.isReliableBlock = false;\\n\\n        if (block.timestamp >= (_openingDate - ITAYOSE_PERIOD)) {\\n            isReady = true;\\n        }\\n    }\\n\\n    function isMatured(OrderBook storage self) internal view returns (bool) {\\n        return block.timestamp >= self.maturity;\\n    }\\n\\n    function getBestBorrowUnitPrice(OrderBook storage self) internal view returns (uint256) {\\n        return self.lendOrders[self.maturity].last();\\n    }\\n\\n    function getBestLendUnitPrice(OrderBook storage self) internal view returns (uint256) {\\n        uint256 unitPrice = self.borrowOrders[self.maturity].first();\\n        return unitPrice == 0 ? Constants.PRICE_DIGIT : unitPrice;\\n    }\\n\\n    function hasBorrowOrder(OrderBook storage self, address _user) internal view returns (bool) {\\n        return self.activeBorrowOrderIds[_user].length != 0;\\n    }\\n\\n    function hasLendOrder(OrderBook storage self, address _user) internal view returns (bool) {\\n        return self.activeLendOrderIds[_user].length != 0;\\n    }\\n\\n    function getOrder(OrderBook storage self, uint256 _orderId)\\n        internal\\n        view\\n        returns (PlacedOrder memory order)\\n    {\\n        (\\n            ProtocolTypes.Side side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            uint256 timestamp\\n        ) = _unpackOrder(self.orders[_orderId]);\\n        order = PlacedOrder(side, unitPrice, maturity, timestamp);\\n    }\\n\\n    function getBlockUnitPriceHistory(OrderBook storage self, bool _isReadOnly)\\n        internal\\n        view\\n        returns (uint256[] memory prices)\\n    {\\n        prices = _unpackBlockUnitPriceHistory(self.blockUnitPriceHistory);\\n\\n        // NOTE: If an order is in the first block of the order book, the block unit price history is empty.\\n        // In this case, the first history record is calculated from the current block total amount and total future value\\n        // along with the `getMarketUnitPrice` function logic.\\n        if (\\n            (self.lastOrderBlockNumber != block.number || prices[0] == 0 || _isReadOnly) &&\\n            self.isReliableBlock\\n        ) {\\n            for (uint256 i = prices.length - 1; i > 0; i--) {\\n                prices[i] = prices[i - 1];\\n            }\\n\\n            prices[0] = (self.blockTotalAmount * Constants.PRICE_DIGIT).div(\\n                self.blockTotalFutureValue\\n            );\\n        }\\n    }\\n\\n    function getMarketUnitPrice(OrderBook storage self, bool _isReadOnly)\\n        internal\\n        view\\n        returns (uint256 unitPrice)\\n    {\\n        unitPrice = _unpackBlockUnitPriceHistory(self.blockUnitPriceHistory)[0];\\n\\n        // NOTE: If an order is in the first block of the order book, the block unit price history is empty.\\n        // In this case, the market unit price is calculated from the current block total amount and total future value\\n        // to avoid unwinding or liquidation the order in the same block using 0 as the market unit price.\\n        if (\\n            (self.lastOrderBlockNumber != block.number || unitPrice == 0 || _isReadOnly) &&\\n            self.isReliableBlock\\n        ) {\\n            unitPrice = (self.blockTotalAmount * Constants.PRICE_DIGIT).div(\\n                self.blockTotalFutureValue\\n            );\\n        }\\n    }\\n\\n    function getBlockUnitPriceAverage(\\n        OrderBook storage self,\\n        uint256 maxCount,\\n        bool _isReadOnly\\n    ) internal view returns (uint256 unitPrice) {\\n        uint256[] memory unitPrices = _unpackBlockUnitPriceHistory(self.blockUnitPriceHistory);\\n        uint256 length = unitPrices.length;\\n        uint256 sum;\\n        uint256 count;\\n\\n        if ((self.lastOrderBlockNumber != block.number || _isReadOnly) && self.isReliableBlock) {\\n            sum = (self.blockTotalAmount * Constants.PRICE_DIGIT).div(self.blockTotalFutureValue);\\n            count = 1;\\n            maxCount--;\\n        }\\n\\n        for (uint256 i; i < maxCount; i++) {\\n            if (i >= length || unitPrices[i] == 0) {\\n                break;\\n            }\\n\\n            sum += unitPrices[i];\\n            count++;\\n        }\\n\\n        unitPrice = count > 0 ? sum.div(count) : 0;\\n    }\\n\\n    function getLendOrderBook(OrderBook storage self, uint256 _limit)\\n        internal\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = self.lendOrders[self.maturity].last();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = self.lendOrders[self.maturity].getNodeTotalAmount(unitPrice);\\n        quantities[0] = self.lendOrders[self.maturity].getNodeCount(unitPrice);\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = self.lendOrders[self.maturity].prev(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = self.lendOrders[self.maturity].getNodeTotalAmount(unitPrice);\\n            quantities[i] = self.lendOrders[self.maturity].getNodeCount(unitPrice);\\n        }\\n    }\\n\\n    function getBorrowOrderBook(OrderBook storage self, uint256 _limit)\\n        internal\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = self.borrowOrders[self.maturity].first();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = self.borrowOrders[self.maturity].getNodeTotalAmount(unitPrice);\\n        quantities[0] = self.borrowOrders[self.maturity].getNodeCount(unitPrice);\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = self.borrowOrders[self.maturity].next(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = self.borrowOrders[self.maturity].getNodeTotalAmount(unitPrice);\\n            quantities[i] = self.borrowOrders[self.maturity].getNodeCount(unitPrice);\\n        }\\n    }\\n\\n    function getLendOrderIds(OrderBook storage self, address _user)\\n        internal\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        uint256 userMaturity = self.userCurrentMaturities[_user];\\n        bool isPastMaturity = userMaturity != self.maturity;\\n\\n        uint48[] memory orderIds = self.activeLendOrderIds[_user];\\n        uint256 orderIdLength = orderIds.length;\\n        activeOrderIds = new uint48[](isPastMaturity ? 0 : orderIdLength);\\n        inActiveOrderIds = new uint48[](orderIdLength);\\n\\n        for (uint256 i; i < orderIdLength; i++) {\\n            uint48 orderId = orderIds[i];\\n            (, uint256 unitPrice, , ) = _unpackOrder(self.orders[orderId]);\\n\\n            if (!self.lendOrders[userMaturity].isActiveOrderId(unitPrice, orderId)) {\\n                unchecked {\\n                    inActiveOrderCount += 1;\\n                }\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                if (!isPastMaturity) {\\n                    unchecked {\\n                        activeOrderCount += 1;\\n                    }\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function getBorrowOrderIds(OrderBook storage self, address _user)\\n        internal\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        uint256 userMaturity = self.userCurrentMaturities[_user];\\n        bool isPastMaturity = userMaturity != self.maturity;\\n\\n        uint48[] memory orderIds = self.activeBorrowOrderIds[_user];\\n        uint256 orderIdLength = orderIds.length;\\n        activeOrderIds = new uint48[](isPastMaturity ? 0 : orderIdLength);\\n        inActiveOrderIds = new uint48[](orderIdLength);\\n\\n        for (uint256 i; i < orderIdLength; i++) {\\n            uint48 orderId = orderIds[i];\\n            (, uint256 unitPrice, , ) = _unpackOrder(self.orders[orderId]);\\n\\n            if (!self.borrowOrders[userMaturity].isActiveOrderId(unitPrice, orderId)) {\\n                unchecked {\\n                    inActiveOrderCount += 1;\\n                }\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                unchecked {\\n                    activeOrderCount += 1;\\n                }\\n                if (!isPastMaturity) {\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function calculateFilledAmount(\\n        OrderBook storage self,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV\\n        )\\n    {\\n        if (_amount == 0) return (0, 0, 0);\\n\\n        if (_side == ProtocolTypes.Side.LEND) {\\n            return\\n                self.borrowOrders[self.maturity].calculateDroppedAmountFromLeft(\\n                    _amount,\\n                    0,\\n                    _unitPrice\\n                );\\n        } else {\\n            return\\n                self.lendOrders[self.maturity].calculateDroppedAmountFromRight(\\n                    _amount,\\n                    0,\\n                    _unitPrice\\n                );\\n        }\\n    }\\n\\n    function updateUserMaturity(OrderBook storage self, address _user) internal {\\n        uint256 userMaturity = self.userCurrentMaturities[_user];\\n        uint256 orderBookMaturity = self.maturity;\\n\\n        if (userMaturity != orderBookMaturity) {\\n            if (\\n                self.activeLendOrderIds[_user].length > 0 ||\\n                self.activeBorrowOrderIds[_user].length > 0\\n            ) {\\n                revert PastMaturityOrderExists();\\n            }\\n\\n            self.userCurrentMaturities[_user] = orderBookMaturity;\\n        }\\n    }\\n\\n    function placeOrder(\\n        OrderBook storage self,\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) internal returns (uint48 orderId) {\\n        orderId = _nextOrderId(self);\\n        self.orders[orderId] = _packOrder(_side, _unitPrice, self.maturity, block.timestamp);\\n\\n        if (_side == ProtocolTypes.Side.LEND) {\\n            self.lendOrders[self.maturity].insertOrder(_unitPrice, orderId, _user, _amount);\\n            self.activeLendOrderIds[_user].push(orderId);\\n        } else if (_side == ProtocolTypes.Side.BORROW) {\\n            self.borrowOrders[self.maturity].insertOrder(_unitPrice, orderId, _user, _amount);\\n            self.activeBorrowOrderIds[_user].push(orderId);\\n        }\\n    }\\n\\n    function fillOrders(\\n        OrderBook storage self,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _amountInFV,\\n        uint256 _unitPrice\\n    )\\n        internal\\n        returns (\\n            FilledOrder memory filledOrder,\\n            PartiallyFilledOrder memory partiallyFilledOrder,\\n            uint256 remainingAmount,\\n            bool orderExists\\n        )\\n    {\\n        PartiallyRemovedOrder memory partiallyRemovedOrder;\\n\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            OrderStatisticsTreeLib.Tree storage orders = self.lendOrders[self.maturity];\\n            (\\n                filledOrder.unitPrice,\\n                filledOrder.amount,\\n                filledOrder.futureValue,\\n                remainingAmount,\\n                partiallyRemovedOrder\\n            ) = orders.dropRight(_amount, _amountInFV, _unitPrice);\\n            orderExists = orders.hasOrders();\\n        } else if (_side == ProtocolTypes.Side.LEND) {\\n            OrderStatisticsTreeLib.Tree storage orders = self.borrowOrders[self.maturity];\\n            (\\n                filledOrder.unitPrice,\\n                filledOrder.amount,\\n                filledOrder.futureValue,\\n                remainingAmount,\\n                partiallyRemovedOrder\\n            ) = orders.dropLeft(_amount, _amountInFV, _unitPrice);\\n            orderExists = orders.hasOrders();\\n        }\\n\\n        partiallyFilledOrder = PartiallyFilledOrder(\\n            partiallyRemovedOrder.orderId,\\n            partiallyRemovedOrder.maker,\\n            partiallyRemovedOrder.amount,\\n            partiallyRemovedOrder.futureValue\\n        );\\n    }\\n\\n    function setInitialBlockUnitPrice(OrderBook storage self, uint256 _unitPrice) internal {\\n        self.blockUnitPriceHistory = uint16(_unitPrice);\\n        self.lastOrderBlockNumber = uint48(block.number);\\n    }\\n\\n    function updateBlockUnitPriceHistory(\\n        OrderBook storage self,\\n        uint256 _filledAmount,\\n        uint256 _filledFutureValue,\\n        uint256 _minimumReliableAmount\\n    ) internal {\\n        uint256 latestBlockUnitPrice = _unpackBlockUnitPriceHistory(self.blockUnitPriceHistory)[0];\\n\\n        if (self.lastOrderBlockNumber != block.number) {\\n            if (self.isReliableBlock) {\\n                latestBlockUnitPrice = (self.blockTotalAmount * Constants.PRICE_DIGIT).div(\\n                    self.blockTotalFutureValue\\n                );\\n\\n                // Remove the oldest block unit price and add the latest block unit price\\n                self.blockUnitPriceHistory =\\n                    uint16(latestBlockUnitPrice) |\\n                    (self.blockUnitPriceHistory << 16);\\n            }\\n\\n            self.lastOrderBlockNumber = uint48(block.number);\\n            self.blockTotalAmount = _filledAmount;\\n            self.blockTotalFutureValue = _filledFutureValue;\\n            self.isReliableBlock = false;\\n        } else {\\n            self.blockTotalAmount += _filledAmount;\\n            self.blockTotalFutureValue += _filledFutureValue;\\n        }\\n\\n        if (\\n            self.blockTotalAmount >= _minimumReliableAmount ||\\n            (self.blockTotalAmount > 0 && latestBlockUnitPrice == 0)\\n        ) {\\n            self.isReliableBlock = true;\\n        }\\n    }\\n\\n    function removeOrder(\\n        OrderBook storage self,\\n        address _user,\\n        uint48 _orderId\\n    )\\n        internal\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (ProtocolTypes.Side side, uint256 unitPrice, , ) = _unpackOrder(self.orders[_orderId]);\\n        uint256 removedAmount;\\n\\n        if (side == ProtocolTypes.Side.LEND) {\\n            removedAmount = self.lendOrders[self.maturity].removeOrder(unitPrice, _orderId);\\n            _removeOrderIdFromOrders(self.activeLendOrderIds[_user], _orderId);\\n        } else if (side == ProtocolTypes.Side.BORROW) {\\n            removedAmount = self.borrowOrders[self.maturity].removeOrder(unitPrice, _orderId);\\n            _removeOrderIdFromOrders(self.activeBorrowOrderIds[_user], _orderId);\\n        }\\n\\n        delete self.orders[_orderId];\\n\\n        return (side, removedAmount, unitPrice);\\n    }\\n\\n    function calculateItayoseResult(OrderBook storage self)\\n        internal\\n        view\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 lastLendUnitPrice,\\n            uint256 lastBorrowUnitPrice,\\n            uint256 totalOffsetAmount\\n        )\\n    {\\n        uint256 lendUnitPrice = self.lendOrders[self.maturity].last();\\n        uint256 borrowUnitPrice = self.borrowOrders[self.maturity].first();\\n        uint256 lendAmount = self.lendOrders[self.maturity].getNodeTotalAmount(lendUnitPrice);\\n        uint256 borrowAmount = self.borrowOrders[self.maturity].getNodeTotalAmount(borrowUnitPrice);\\n\\n        OrderStatisticsTreeLib.Tree storage borrowOrders = self.borrowOrders[self.maturity];\\n        OrderStatisticsTreeLib.Tree storage lendOrders = self.lendOrders[self.maturity];\\n\\n        // Return 0 if no orders is filled\\n        if (borrowUnitPrice > lendUnitPrice || borrowUnitPrice == 0 || lendUnitPrice == 0) {\\n            openingUnitPrice = (lendUnitPrice + borrowUnitPrice).div(2);\\n            return (0, 0, 0, 0);\\n        }\\n\\n        while (borrowUnitPrice <= lendUnitPrice && borrowUnitPrice > 0 && lendUnitPrice > 0) {\\n            lastLendUnitPrice = lendUnitPrice;\\n            lastBorrowUnitPrice = borrowUnitPrice;\\n\\n            if (lendAmount > borrowAmount) {\\n                openingUnitPrice = lendUnitPrice;\\n                totalOffsetAmount += borrowAmount;\\n                lendAmount -= borrowAmount;\\n                borrowUnitPrice = borrowOrders.next(borrowUnitPrice);\\n                borrowAmount = borrowOrders.getNodeTotalAmount(borrowUnitPrice);\\n            } else if (lendAmount < borrowAmount) {\\n                openingUnitPrice = borrowUnitPrice;\\n                totalOffsetAmount += lendAmount;\\n                borrowAmount -= lendAmount;\\n                lendUnitPrice = lendOrders.prev(lendUnitPrice);\\n                lendAmount = lendOrders.getNodeTotalAmount(lendUnitPrice);\\n            } else {\\n                openingUnitPrice = (lendUnitPrice + borrowUnitPrice).div(2);\\n                totalOffsetAmount += lendAmount;\\n                lendUnitPrice = lendOrders.prev(lendUnitPrice);\\n                borrowUnitPrice = borrowOrders.next(borrowUnitPrice);\\n                lendAmount = lendOrders.getNodeTotalAmount(lendUnitPrice);\\n                borrowAmount = borrowOrders.getNodeTotalAmount(borrowUnitPrice);\\n            }\\n        }\\n    }\\n\\n    function getOrderExecutionConditions(\\n        OrderBook storage self,\\n        ProtocolTypes.Side _side,\\n        uint256 _unitPrice,\\n        uint256 _circuitBreakerLimitRange,\\n        bool _isReadOnly\\n    )\\n        internal\\n        view\\n        returns (\\n            bool isFilled,\\n            uint256 executedUnitPrice,\\n            bool ignoreRemainingAmount,\\n            bool orderExists\\n        )\\n    {\\n        bool isLend = _side == ProtocolTypes.Side.LEND;\\n        uint256 cbThresholdUnitPrice;\\n        uint256 bestUnitPrice;\\n\\n        if (isLend) {\\n            bestUnitPrice = self.borrowOrders[self.maturity].first();\\n            cbThresholdUnitPrice = getLendCircuitBreakerThreshold(\\n                self,\\n                _circuitBreakerLimitRange,\\n                _isReadOnly\\n            );\\n        } else {\\n            bestUnitPrice = self.lendOrders[self.maturity].last();\\n            cbThresholdUnitPrice = getBorrowCircuitBreakerThreshold(\\n                self,\\n                _circuitBreakerLimitRange,\\n                _isReadOnly\\n            );\\n        }\\n\\n        orderExists = bestUnitPrice != 0;\\n\\n        if (\\n            _unitPrice == 0 ||\\n            (orderExists &&\\n                cbThresholdUnitPrice != 0 &&\\n                ((isLend && _unitPrice > cbThresholdUnitPrice) ||\\n                    (!isLend && _unitPrice < cbThresholdUnitPrice)))\\n        ) {\\n            executedUnitPrice = cbThresholdUnitPrice;\\n            ignoreRemainingAmount = true;\\n        } else {\\n            executedUnitPrice = _unitPrice;\\n            ignoreRemainingAmount = false;\\n        }\\n\\n        if (orderExists) {\\n            isFilled = isLend\\n                ? bestUnitPrice <= executedUnitPrice\\n                : bestUnitPrice >= executedUnitPrice;\\n        }\\n    }\\n\\n    function getLendCircuitBreakerThreshold(\\n        OrderBook storage self,\\n        uint256 _circuitBreakerLimitRange,\\n        bool _isReadOnly\\n    ) internal view returns (uint256 cbThresholdUnitPrice) {\\n        uint256 blockUnitPriceAverage = getBlockUnitPriceAverage(self, 3, _isReadOnly);\\n        cbThresholdUnitPrice = (blockUnitPriceAverage *\\n            (Constants.PCT_DIGIT + _circuitBreakerLimitRange * 2)).div(Constants.PCT_DIGIT);\\n\\n        if (cbThresholdUnitPrice > Constants.PRICE_DIGIT || blockUnitPriceAverage == 0) {\\n            cbThresholdUnitPrice = Constants.PRICE_DIGIT;\\n        } else if (\\n            cbThresholdUnitPrice < blockUnitPriceAverage + Constants.MINIMUM_CIRCUIT_BREAKER_RANGE\\n        ) {\\n            cbThresholdUnitPrice = blockUnitPriceAverage + Constants.MINIMUM_CIRCUIT_BREAKER_RANGE;\\n        }\\n    }\\n\\n    function getBorrowCircuitBreakerThreshold(\\n        OrderBook storage self,\\n        uint256 _circuitBreakerLimitRange,\\n        bool _isReadOnly\\n    ) internal view returns (uint256 cbThresholdUnitPrice) {\\n        uint256 blockUnitPriceAverage = getBlockUnitPriceAverage(self, 5, _isReadOnly);\\n        cbThresholdUnitPrice = (blockUnitPriceAverage *\\n            (Constants.PCT_DIGIT - _circuitBreakerLimitRange)).div(Constants.PCT_DIGIT);\\n\\n        if (\\n            cbThresholdUnitPrice == 0 ||\\n            blockUnitPriceAverage == 0 ||\\n            blockUnitPriceAverage <= Constants.MINIMUM_CIRCUIT_BREAKER_RANGE\\n        ) {\\n            cbThresholdUnitPrice = 1;\\n        } else if (\\n            blockUnitPriceAverage < cbThresholdUnitPrice + Constants.MINIMUM_CIRCUIT_BREAKER_RANGE\\n        ) {\\n            cbThresholdUnitPrice = blockUnitPriceAverage - Constants.MINIMUM_CIRCUIT_BREAKER_RANGE;\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases and returns id of last order in order book.\\n     * @return The new order id\\n     */\\n    function _nextOrderId(OrderBook storage self) private returns (uint48) {\\n        self.lastOrderId++;\\n        return self.lastOrderId;\\n    }\\n\\n    function _removeOrderIdFromOrders(uint48[] storage orders, uint256 orderId) private {\\n        uint256 lastOrderIndex = orders.length - 1;\\n        for (uint256 i; i <= lastOrderIndex; i++) {\\n            if (orders[i] == orderId) {\\n                if (i != lastOrderIndex) {\\n                    uint48 lastOrderId = orders[lastOrderIndex];\\n                    orders[i] = lastOrderId;\\n                }\\n\\n                orders.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Packs order parameters into uint256\\n     */\\n    function _packOrder(\\n        ProtocolTypes.Side _side,\\n        uint256 _unitPrice,\\n        uint256 _maturity,\\n        uint256 _timestamp\\n    ) private pure returns (uint256) {\\n        return uint256(_side) | (_unitPrice << 8) | (_maturity << 24) | (_timestamp << 88);\\n    }\\n\\n    /**\\n     * @notice Unpacks order parameters from uint256\\n     */\\n    function _unpackOrder(uint256 _order)\\n        private\\n        pure\\n        returns (\\n            ProtocolTypes.Side side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            uint256 timestamp\\n        )\\n    {\\n        side = ProtocolTypes.Side(uint8(_order));\\n        unitPrice = uint16(_order >> 8);\\n        maturity = uint64(_order >> 24);\\n        timestamp = uint64(_order >> 88);\\n    }\\n\\n    function _unpackBlockUnitPriceHistory(uint80 _blockUnitPriceHistory)\\n        private\\n        pure\\n        returns (uint256[] memory prices)\\n    {\\n        prices = new uint256[](5);\\n\\n        prices[0] = uint16(_blockUnitPriceHistory);\\n        prices[1] = uint16(_blockUnitPriceHistory >> 16);\\n        prices[2] = uint16(_blockUnitPriceHistory >> 32);\\n        prices[3] = uint16(_blockUnitPriceHistory >> 48);\\n        prices[4] = uint16(_blockUnitPriceHistory >> 64);\\n    }\\n}\\n\",\"keccak256\":\"0x17f8b60fdbe66a6286d5b81c642328121a51a289d049453ac62e5e56f4d259d8\",\"license\":\"MIT\"},\"contracts/protocol/libraries/OrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// libraries\\nimport {Constants} from \\\"../libraries/Constants.sol\\\";\\n// types\\nimport {RoundingUint256} from \\\"./math/RoundingUint256.sol\\\";\\n\\nstruct RemainingOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 unitPrice;\\n}\\n\\nstruct PartiallyRemovedOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 futureValue;\\n}\\n\\n/**\\n * @notice OrderStatisticsTreeLib is a Red-Black Tree binary search library\\n * based on the following library that is extended to manage order data.\\n *\\n * https://github.com/rob-Hitchens/OrderStatisticsTree\\n *\\n */\\nlibrary OrderStatisticsTreeLib {\\n    using RoundingUint256 for uint256;\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint48 head;\\n        uint48 tail;\\n        uint256 orderCounter;\\n        uint256 orderTotalAmount;\\n        mapping(uint256 => OrderItem) orders;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    struct OrderItem {\\n        uint48 orderId;\\n        uint48 next;\\n        uint48 prev;\\n        address maker;\\n        uint256 amount;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].right != EMPTY) {\\n            _value = self.nodes[_value].right;\\n        }\\n    }\\n\\n    function hasOrders(Tree storage self) internal view returns (bool) {\\n        return self.root != EMPTY;\\n    }\\n\\n    function next(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTreeLib: Starting value cannot be zero\\\");\\n        if (self.nodes[value].right != EMPTY) {\\n            _cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTreeLib: Starting value cannot be zero\\\");\\n        if (self.nodes[value].left != EMPTY) {\\n            _cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint256 value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        // if (self.nodes[value].parent != EMPTY) return true;\\n        uint256 cursor = value;\\n        while (self.nodes[cursor].parent != EMPTY) {\\n            uint256 parent = self.nodes[cursor].parent;\\n            if (self.nodes[parent].left != cursor && self.nodes[parent].right != cursor) {\\n                return false;\\n            }\\n            if (parent == self.root) {\\n                return true;\\n            }\\n            cursor = self.nodes[cursor].parent;\\n        }\\n        return false;\\n    }\\n\\n    function isActiveOrderId(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        return orderIdExists(self, value, orderId) && exists(self, value);\\n    }\\n\\n    function getNode(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTreeLib: Value does not exist\\\");\\n        Node storage gn = self.nodes[value];\\n        return (\\n            gn.parent,\\n            gn.left,\\n            gn.right,\\n            gn.red,\\n            gn.head,\\n            gn.tail,\\n            gn.orderCounter,\\n            gn.orderTotalAmount\\n        );\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function getNodeTotalAmount(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint256 totalAmount)\\n    {\\n        return self.nodes[value].orderTotalAmount;\\n    }\\n\\n    function getNodeOrderIds(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint48[] memory orderIds)\\n    {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[gn.head];\\n        orderIds = new uint48[](gn.orderCounter);\\n\\n        for (uint256 i; i < gn.orderCounter; i++) {\\n            orderIds[i] = order.orderId;\\n            order = gn.orders[order.next];\\n        }\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256 _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTreeLib: Value to insert cannot be zero\\\");\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                return;\\n            }\\n        }\\n\\n        Node storage nValue = self.nodes[value];\\n        // Update order info as a new one if there is already an old node\\n        if (\\n            self.root == EMPTY ||\\n            (self.nodes[cursor].left != value && self.nodes[cursor].right != value)\\n        ) {\\n            nValue.orderCounter = 0;\\n            nValue.orderTotalAmount = 0;\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        }\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTreeLib: Value to remove cannot be zero\\\");\\n        Node storage nValue = self.nodes[value];\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint256 a,\\n        uint256 b\\n    ) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    function calculateDroppedAmountFromLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 droppedValue,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV\\n        )\\n    {\\n        (droppedValue, , , droppedAmount, droppedAmountInFV, , ) = _calculateDroppedAmountFromLeft(\\n            self,\\n            amount,\\n            amountInFV,\\n            limitValue,\\n            first(self)\\n        );\\n    }\\n\\n    function calculateDroppedAmountFromRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 droppedValue,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV\\n        )\\n    {\\n        (droppedValue, , , droppedAmount, droppedAmountInFV, , ) = _calculateDroppedAmountFromRight(\\n            self,\\n            amount,\\n            amountInFV,\\n            limitValue,\\n            last(self)\\n        );\\n    }\\n\\n    function dropLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 droppedValue,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV,\\n            uint256 remainingAmount,\\n            PartiallyRemovedOrder memory partiallyRemovedOrder\\n        )\\n    {\\n        uint256 cursor = first(self);\\n        uint256 cursorNodeAmount;\\n        uint256 exceededAmount;\\n        uint256 exceededAmountInFV;\\n\\n        require(cursor <= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        (\\n            droppedValue,\\n            cursor,\\n            cursorNodeAmount,\\n            droppedAmount,\\n            droppedAmountInFV,\\n            exceededAmount,\\n            exceededAmountInFV\\n        ) = _calculateDroppedAmountFromLeft(self, amount, amountInFV, limitValue, cursor);\\n\\n        uint256 totalNodeAmount = droppedAmount + exceededAmount;\\n\\n        if (totalNodeAmount > 0) {\\n            if (exceededAmount > 0) {\\n                cursor = droppedValue;\\n                // Update order ids in the node.\\n                partiallyRemovedOrder = removeOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - exceededAmount\\n                );\\n            } else if (exceededAmountInFV > 0) {\\n                cursor = droppedValue;\\n                // Update order ids in the node.\\n                partiallyRemovedOrder = removeOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, exceededAmountInFV)\\n                );\\n            }\\n\\n            self.nodes[cursor].left = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent > cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].left = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalNodeAmount) {\\n            remainingAmount = amount - totalNodeAmount;\\n        }\\n\\n        uint256 lastNode = last(self);\\n\\n        if (lastNode == droppedValue && self.nodes[lastNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (\\n            droppedValue > self.root ||\\n            (droppedValue == self.root && droppedAmount >= totalNodeAmount)\\n        ) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToLeft(self);\\n    }\\n\\n    function dropRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 droppedValue,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV,\\n            uint256 remainingAmount,\\n            PartiallyRemovedOrder memory partiallyRemovedOrder\\n        )\\n    {\\n        uint256 cursor = last(self);\\n        uint256 cursorNodeAmount;\\n        uint256 exceededAmount;\\n        uint256 exceededAmountInFV;\\n\\n        require(cursor >= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        (\\n            droppedValue,\\n            cursor,\\n            cursorNodeAmount,\\n            droppedAmount,\\n            droppedAmountInFV,\\n            exceededAmount,\\n            exceededAmountInFV\\n        ) = _calculateDroppedAmountFromRight(self, amount, amountInFV, limitValue, cursor);\\n\\n        uint256 totalNodeAmount = droppedAmount + exceededAmount;\\n\\n        if (totalNodeAmount > 0) {\\n            if (exceededAmount > 0) {\\n                cursor = droppedValue;\\n                // Update order ids in the node.\\n                partiallyRemovedOrder = removeOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - exceededAmount\\n                );\\n            } else if (exceededAmountInFV > 0) {\\n                cursor = droppedValue;\\n                // Update order ids in the node.\\n                partiallyRemovedOrder = removeOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, exceededAmountInFV)\\n                );\\n            }\\n\\n            self.nodes[cursor].right = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent < cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].right = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalNodeAmount) {\\n            remainingAmount = amount - totalNodeAmount;\\n        }\\n\\n        uint256 firstNode = first(self);\\n\\n        if (firstNode == droppedValue && self.nodes[firstNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (\\n            droppedValue < self.root ||\\n            (droppedValue == self.root && droppedAmount >= totalNodeAmount)\\n        ) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToRight(self);\\n    }\\n\\n    function rotateTreeToLeft(Tree storage self) internal {\\n        if (self.nodes[self.root].left == 0 && self.nodes[self.root].right != 0) {\\n            if (self.nodes[self.nodes[self.root].right].left != 0) {\\n                rotateRight(self, self.nodes[self.root].right);\\n            }\\n            rotateLeft(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function rotateTreeToRight(Tree storage self) internal {\\n        if (self.nodes[self.root].right == 0 && self.nodes[self.root].left != 0) {\\n            if (self.nodes[self.nodes[self.root].left].right != 0) {\\n                rotateLeft(self, self.nodes[self.root].left);\\n            }\\n            rotateRight(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function getFutureValue(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (uint256) {\\n        return _calculateFutureValue(value, self.nodes[value].orders[orderId].amount);\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (address maker, uint256 amount) {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[orderId];\\n\\n        maker = order.maker;\\n        amount = order.amount;\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function orderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        uint48 cursor = orderId;\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[cursor];\\n\\n        if (order.orderId != cursor) {\\n            return false;\\n        }\\n\\n        while (order.prev != EMPTY) {\\n            cursor = order.prev;\\n            order = gn.orders[cursor];\\n        }\\n\\n        return cursor == gn.head;\\n    }\\n\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal {\\n        require(amount > 0, \\\"Insufficient amount\\\");\\n        require(value <= Constants.PRICE_DIGIT, \\\"Insufficient value\\\");\\n        insert(self, value);\\n\\n        addTail(self, value, orderId, user, amount);\\n    }\\n\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        amount = _removeOrder(self, value, orderId);\\n        remove(self, value);\\n    }\\n\\n    function removeOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount\\n    ) internal returns (PartiallyRemovedOrder memory partiallyRemovedOrder) {\\n        Node storage gn = self.nodes[value];\\n\\n        require(\\n            gn.orderTotalAmount >= _amount,\\n            \\\"OrderStatisticsTreeLib: Amount to remove is insufficient\\\"\\n        );\\n\\n        uint256 remainingAmount = _amount;\\n        OrderItem memory currentOrder = gn.orders[gn.head];\\n        uint48 orderId = gn.head;\\n\\n        while (orderId != 0 && remainingAmount != 0) {\\n            currentOrder = gn.orders[orderId];\\n\\n            if (currentOrder.amount <= remainingAmount) {\\n                remainingAmount -= currentOrder.amount;\\n                orderId = currentOrder.next;\\n            } else {\\n                partiallyRemovedOrder = PartiallyRemovedOrder(\\n                    currentOrder.orderId,\\n                    currentOrder.maker,\\n                    remainingAmount,\\n                    _calculateFutureValue(value, remainingAmount)\\n                );\\n                currentOrder = gn.orders[currentOrder.prev];\\n                break;\\n            }\\n        }\\n\\n        if (currentOrder.orderId != 0) {\\n            _removeOrders(self, value, currentOrder.orderId);\\n        }\\n\\n        if (partiallyRemovedOrder.amount > 0) {\\n            self.nodes[value].orders[partiallyRemovedOrder.orderId].amount -= partiallyRemovedOrder\\n                .amount;\\n            self.nodes[value].orderTotalAmount -= partiallyRemovedOrder.amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n        uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n        _link(self, _value, orderId, gn.head);\\n        _setHead(self, _value, orderId);\\n        if (gn.tail == 0) _setTail(self, _value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, _value, _orderId, _user, _amount);\\n        } else {\\n            uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n            _link(self, _value, gn.tail, orderId);\\n            _setTail(self, _value, orderId);\\n        }\\n    }\\n\\n    function _calculateDroppedAmountFromLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue,\\n        uint256 firstValue\\n    )\\n        private\\n        view\\n        returns (\\n            uint256 droppedValue,\\n            uint256 cursor,\\n            uint256 cursorNodeAmount,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV,\\n            uint256 exceededAmount,\\n            uint256 exceededAmountInFV\\n        )\\n    {\\n        cursor = firstValue;\\n\\n        while (\\n            (droppedAmount < amount || amount == EMPTY) &&\\n            (droppedAmountInFV < amountInFV || amountInFV == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor <= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            droppedValue = cursor;\\n\\n            droppedAmountInFV += _calculateFutureValue(cursor, cursorNodeAmount);\\n            droppedAmount += cursorNodeAmount;\\n\\n            if (droppedAmount > amount && amount != EMPTY) {\\n                exceededAmount = droppedAmount - amount;\\n                exceededAmountInFV = _calculateFutureValue(cursor, exceededAmount);\\n            } else if (droppedAmountInFV > amountInFV && amountInFV != EMPTY) {\\n                exceededAmountInFV = droppedAmountInFV - amountInFV;\\n                exceededAmount = _calculatePresentValue(cursor, exceededAmountInFV);\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n\\n        if (exceededAmount > 0) {\\n            droppedAmount -= exceededAmount;\\n        }\\n        if (exceededAmountInFV > 0) {\\n            droppedAmountInFV -= exceededAmountInFV;\\n        }\\n    }\\n\\n    function _calculateDroppedAmountFromRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue,\\n        uint256 lastValue\\n    )\\n        private\\n        view\\n        returns (\\n            uint256 droppedValue,\\n            uint256 cursor,\\n            uint256 cursorNodeAmount,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV,\\n            uint256 exceededAmount,\\n            uint256 exceededAmountInFV\\n        )\\n    {\\n        cursor = lastValue;\\n\\n        while (\\n            (droppedAmount < amount || amount == EMPTY) &&\\n            (droppedAmountInFV < amountInFV || amountInFV == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor >= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            droppedValue = cursor;\\n\\n            droppedAmountInFV += _calculateFutureValue(cursor, cursorNodeAmount);\\n            droppedAmount += cursorNodeAmount;\\n\\n            if (droppedAmount > amount && amount != EMPTY) {\\n                exceededAmount = droppedAmount - amount;\\n                exceededAmountInFV = _calculateFutureValue(cursor, exceededAmount);\\n            } else if (droppedAmountInFV > amountInFV && amountInFV != EMPTY) {\\n                exceededAmountInFV = droppedAmountInFV - amountInFV;\\n                exceededAmount = _calculatePresentValue(cursor, exceededAmountInFV);\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n\\n        if (exceededAmount > 0) {\\n            droppedAmount -= exceededAmount;\\n        }\\n        if (exceededAmountInFV > 0) {\\n            droppedAmountInFV -= exceededAmountInFV;\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint48) {\\n        Node storage gn = self.nodes[value];\\n        require(\\n            gn.orders[orderId].maker == address(0),\\n            \\\"OrderStatisticsTreeLib: Order id already exists\\\"\\n        );\\n\\n        gn.orderCounter += 1;\\n        gn.orderTotalAmount += amount;\\n        OrderItem memory order = OrderItem(orderId, 0, 0, user, amount);\\n        gn.orders[orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the list.\\n     */\\n    function _removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTreeLib: Order does not exist\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n        gn.orderTotalAmount -= order.amount;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItems older than or equal `orderId` from the list\\n     */\\n    function _removeOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTreeLib: Order does not exist\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n        uint256 cursor = gn.head;\\n        uint256 removedCount = 1;\\n        uint256 removedAmount = gn.orders[cursor].amount;\\n\\n        while (cursor != orderId) {\\n            cursor = gn.orders[cursor].next;\\n            removedCount++;\\n            removedAmount += gn.orders[cursor].amount;\\n        }\\n\\n        if (gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        }\\n\\n        gn.orderCounter -= removedCount;\\n        gn.orderTotalAmount -= removedAmount;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 _prevId,\\n        uint48 _nextId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[_prevId].next = _nextId;\\n        gn.orders[_nextId].prev = _prevId;\\n    }\\n\\n    function _calculateFutureValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * Constants.PRICE_DIGIT).div(unitPrice);\\n    }\\n\\n    function _calculatePresentValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * unitPrice).div(Constants.PRICE_DIGIT);\\n    }\\n}\\n\",\"keccak256\":\"0x51b3ea03bea403512eda801fc0735f94153bfcec8f3ac41d822bf6d7315e75be\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/OrderBookLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {OrderBookLib, FilledOrder, PartiallyFilledOrder} from \\\"../OrderBookLib.sol\\\";\\nimport {ProtocolTypes} from \\\"../../types/ProtocolTypes.sol\\\";\\nimport {LendingMarketStorage as Storage, ItayoseLog} from \\\"../../storages/LendingMarketStorage.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\nimport {ILendingMarket} from \\\"../../interfaces/ILendingMarket.sol\\\";\\n\\nlibrary OrderBookLogic {\\n    using OrderBookLib for OrderBookLib.OrderBook;\\n    using RoundingUint256 for uint256;\\n\\n    error InvalidOrderFeeRate();\\n    error InvalidCircuitBreakerLimitRange();\\n    error OrderBookNotMatured();\\n\\n    event OrderFeeRateUpdated(bytes32 ccy, uint256 previousRate, uint256 rate);\\n    event CircuitBreakerLimitRangeUpdated(bytes32 ccy, uint256 previousRate, uint256 rate);\\n    event OrderBookCreated(uint8 orderBookId, uint256 maturity, uint256 openingDate);\\n\\n    event ItayoseExecuted(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 openingUnitPrice,\\n        uint256 lastLendUnitPrice,\\n        uint256 lastBorrowUnitPrice,\\n        uint256 offsetAmount\\n    );\\n\\n    function isReady(uint8 _orderBookId) public view returns (bool) {\\n        return Storage.slot().isReady[_getOrderBook(_orderBookId).maturity];\\n    }\\n\\n    function isMatured(uint8 _orderBookId) public view returns (bool) {\\n        return _getOrderBook(_orderBookId).isMatured();\\n    }\\n\\n    function isOpened(uint8 _orderBookId) public view returns (bool) {\\n        return\\n            isReady(_orderBookId) &&\\n            !isMatured(_orderBookId) &&\\n            block.timestamp >= _getOrderBook(_orderBookId).openingDate;\\n    }\\n\\n    function isItayosePeriod(uint8 _orderBookId) public view returns (bool) {\\n        return\\n            block.timestamp >=\\n            (_getOrderBook(_orderBookId).openingDate - OrderBookLib.ITAYOSE_PERIOD) &&\\n            !isReady(_orderBookId);\\n    }\\n\\n    function isPreOrderPeriod(uint8 _orderBookId) public view returns (bool) {\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n        return\\n            block.timestamp >= orderBook.preOpeningDate &&\\n            block.timestamp < (orderBook.openingDate - OrderBookLib.ITAYOSE_PERIOD);\\n    }\\n\\n    function getOrderBookDetail(uint8 _orderBookId)\\n        public\\n        view\\n        returns (\\n            bytes32 ccy,\\n            uint256 maturity,\\n            uint256 openingDate,\\n            uint256 preOpeningDate\\n        )\\n    {\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n\\n        ccy = Storage.slot().ccy;\\n        maturity = orderBook.maturity;\\n        openingDate = orderBook.openingDate;\\n        preOpeningDate = orderBook.preOpeningDate;\\n    }\\n\\n    function getLastOrderBlockNumber(uint8 _orderBookId) external view returns (uint256) {\\n        return _getOrderBook(_orderBookId).lastOrderBlockNumber;\\n    }\\n\\n    function getBlockUnitPriceHistory(uint8 _orderBookId) external view returns (uint256[] memory) {\\n        return _getOrderBook(_orderBookId).getBlockUnitPriceHistory(true);\\n    }\\n\\n    function getMarketUnitPrice(uint8 _orderBookId) external view returns (uint256) {\\n        return _getOrderBook(_orderBookId).getMarketUnitPrice(true);\\n    }\\n\\n    function getBlockUnitPriceAverage(uint8 _orderBookId, uint256 _count)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _getOrderBook(_orderBookId).getBlockUnitPriceAverage(_count, true);\\n    }\\n\\n    function getCircuitBreakerThresholds(uint8 _orderBookId)\\n        external\\n        view\\n        returns (uint256 maxLendUnitPrice, uint256 minBorrowUnitPrice)\\n    {\\n        maxLendUnitPrice = _getOrderBook(_orderBookId).getLendCircuitBreakerThreshold(\\n            Storage.slot().circuitBreakerLimitRange,\\n            true\\n        );\\n        minBorrowUnitPrice = _getOrderBook(_orderBookId).getBorrowCircuitBreakerThreshold(\\n            Storage.slot().circuitBreakerLimitRange,\\n            true\\n        );\\n    }\\n\\n    function getBestLendUnitPrice(uint8 _orderBookId) public view returns (uint256) {\\n        return _getOrderBook(_orderBookId).getBestLendUnitPrice();\\n    }\\n\\n    function getBestLendUnitPrices(uint8[] memory _orderBookIds)\\n        external\\n        view\\n        returns (uint256[] memory unitPrices)\\n    {\\n        unitPrices = new uint256[](_orderBookIds.length);\\n\\n        for (uint256 i; i < _orderBookIds.length; i++) {\\n            unitPrices[i] = _getOrderBook(_orderBookIds[i]).getBestLendUnitPrice();\\n        }\\n    }\\n\\n    function getBestBorrowUnitPrice(uint8 _orderBookId) public view returns (uint256) {\\n        return _getOrderBook(_orderBookId).getBestBorrowUnitPrice();\\n    }\\n\\n    function getBestBorrowUnitPrices(uint8[] memory _orderBookIds)\\n        external\\n        view\\n        returns (uint256[] memory unitPrices)\\n    {\\n        unitPrices = new uint256[](_orderBookIds.length);\\n\\n        for (uint256 i; i < _orderBookIds.length; i++) {\\n            unitPrices[i] = _getOrderBook(_orderBookIds[i]).getBestBorrowUnitPrice();\\n        }\\n    }\\n\\n    function getBorrowOrderBook(uint8 _orderBookId, uint256 _limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        return _getOrderBook(_orderBookId).getBorrowOrderBook(_limit);\\n    }\\n\\n    function getLendOrderBook(uint8 _orderBookId, uint256 _limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        return _getOrderBook(_orderBookId).getLendOrderBook(_limit);\\n    }\\n\\n    function getItayoseEstimation(uint8 _orderBookId)\\n        external\\n        view\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 lastLendUnitPrice,\\n            uint256 lastBorrowUnitPrice,\\n            uint256 totalOffsetAmount\\n        )\\n    {\\n        return _getOrderBook(_orderBookId).calculateItayoseResult();\\n    }\\n\\n    function getMaturities(uint8[] memory _orderBookIds)\\n        public\\n        view\\n        returns (uint256[] memory maturities)\\n    {\\n        maturities = new uint256[](_orderBookIds.length);\\n\\n        for (uint256 i; i < _orderBookIds.length; i++) {\\n            maturities[i] = _getOrderBook(_orderBookIds[i]).maturity;\\n        }\\n    }\\n\\n    function updateOrderFeeRate(uint256 _orderFeeRate) external {\\n        if (_orderFeeRate >= Constants.PCT_DIGIT) revert InvalidOrderFeeRate();\\n\\n        uint256 previousRate = Storage.slot().orderFeeRate;\\n\\n        if (_orderFeeRate != previousRate) {\\n            Storage.slot().orderFeeRate = _orderFeeRate;\\n\\n            emit OrderFeeRateUpdated(Storage.slot().ccy, previousRate, _orderFeeRate);\\n        }\\n    }\\n\\n    function updateCircuitBreakerLimitRange(uint256 _cbLimitRange) external {\\n        if (_cbLimitRange >= Constants.PCT_DIGIT) revert InvalidCircuitBreakerLimitRange();\\n\\n        uint256 previousRange = Storage.slot().circuitBreakerLimitRange;\\n\\n        if (_cbLimitRange != previousRange) {\\n            Storage.slot().circuitBreakerLimitRange = _cbLimitRange;\\n\\n            emit CircuitBreakerLimitRangeUpdated(Storage.slot().ccy, previousRange, _cbLimitRange);\\n        }\\n    }\\n\\n    function createOrderBook(\\n        uint256 _maturity,\\n        uint256 _openingDate,\\n        uint256 _preOpeningDate\\n    ) public returns (uint8 orderBookId) {\\n        orderBookId = _nextOrderBookId();\\n\\n        Storage.slot().isReady[_maturity] = _getOrderBook(orderBookId).initialize(\\n            _maturity,\\n            _openingDate,\\n            _preOpeningDate\\n        );\\n\\n        emit OrderBookCreated(orderBookId, _maturity, _openingDate);\\n    }\\n\\n    function executeAutoRoll(\\n        uint8 _maturedOrderBookId,\\n        uint8 _destinationOrderBookId,\\n        uint256 _newMaturity,\\n        uint256 _openingDate,\\n        uint256 _autoRollUnitPrice\\n    ) external {\\n        OrderBookLib.OrderBook storage maturedOrderBook = Storage.slot().orderBooks[\\n            _maturedOrderBookId\\n        ];\\n        if (!maturedOrderBook.isMatured()) revert OrderBookNotMatured();\\n\\n        Storage.slot().isReady[_newMaturity] = maturedOrderBook.initialize(\\n            _newMaturity,\\n            _openingDate,\\n            _openingDate - OrderBookLib.PRE_ORDER_BASE_PERIOD\\n        );\\n\\n        OrderBookLib.OrderBook storage destinationOrderBook = Storage.slot().orderBooks[\\n            _destinationOrderBookId\\n        ];\\n\\n        // NOTE: The auto-roll destination order book has no market unit price if the order has never been filled before.\\n        // In this case, the market unit price is updated with the unit price of the auto-roll.\\n        if (destinationOrderBook.getMarketUnitPrice(false) == 0) {\\n            destinationOrderBook.setInitialBlockUnitPrice(_autoRollUnitPrice);\\n        }\\n    }\\n\\n    function executeItayoseCall(uint8 _orderBookId)\\n        external\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 totalOffsetAmount,\\n            uint256 openingDate,\\n            PartiallyFilledOrder memory partiallyFilledLendingOrder,\\n            PartiallyFilledOrder memory partiallyFilledBorrowingOrder\\n        )\\n    {\\n        uint256 lastLendUnitPrice;\\n        uint256 lastBorrowUnitPrice;\\n        OrderBookLib.OrderBook storage orderBook = _getOrderBook(_orderBookId);\\n\\n        (openingUnitPrice, lastLendUnitPrice, lastBorrowUnitPrice, totalOffsetAmount) = orderBook\\n            .calculateItayoseResult();\\n\\n        if (totalOffsetAmount > 0) {\\n            ProtocolTypes.Side[2] memory sides = [\\n                ProtocolTypes.Side.LEND,\\n                ProtocolTypes.Side.BORROW\\n            ];\\n\\n            for (uint256 i; i < sides.length; i++) {\\n                ProtocolTypes.Side partiallyFilledOrderSide;\\n                PartiallyFilledOrder memory partiallyFilledOrder;\\n                FilledOrder memory filledOrder;\\n                (filledOrder, partiallyFilledOrder, , ) = orderBook.fillOrders(\\n                    sides[i],\\n                    totalOffsetAmount,\\n                    0,\\n                    0\\n                );\\n\\n                if (filledOrder.futureValue > 0) {\\n                    orderBook.setInitialBlockUnitPrice(openingUnitPrice);\\n                }\\n\\n                if (partiallyFilledOrder.futureValue > 0) {\\n                    if (sides[i] == ProtocolTypes.Side.LEND) {\\n                        partiallyFilledOrderSide = ProtocolTypes.Side.BORROW;\\n                        partiallyFilledBorrowingOrder = partiallyFilledOrder;\\n                    } else {\\n                        partiallyFilledOrderSide = ProtocolTypes.Side.LEND;\\n                        partiallyFilledLendingOrder = partiallyFilledOrder;\\n                    }\\n                }\\n            }\\n\\n            emit ItayoseExecuted(\\n                Storage.slot().ccy,\\n                orderBook.maturity,\\n                openingUnitPrice,\\n                lastLendUnitPrice,\\n                lastBorrowUnitPrice,\\n                totalOffsetAmount\\n            );\\n        }\\n\\n        Storage.slot().isReady[orderBook.maturity] = true;\\n        Storage.slot().itayoseLogs[orderBook.maturity] = ItayoseLog(\\n            openingUnitPrice,\\n            lastLendUnitPrice,\\n            lastBorrowUnitPrice\\n        );\\n        openingDate = orderBook.openingDate;\\n    }\\n\\n    function _nextOrderBookId() internal returns (uint8) {\\n        Storage.slot().lastOrderBookId++;\\n        return Storage.slot().lastOrderBookId;\\n    }\\n\\n    function _getOrderBook(uint8 _orderBookId)\\n        private\\n        view\\n        returns (OrderBookLib.OrderBook storage)\\n    {\\n        return Storage.slot().orderBooks[_orderBookId];\\n    }\\n}\\n\",\"keccak256\":\"0x6b086414e561853d554f8f7867415b9741089b7c070ddcd86bafe2705dafb99b\",\"license\":\"MIT\"},\"contracts/protocol/libraries/math/RoundingUint256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoundingUint256 {\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0);\\n\\n        if ((a * 10) / b - (a / b) * 10 < 5) {\\n            return a / b;\\n        } else {\\n            return (a / b) + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc360f39a82f1a9a7454726e3db802407d305b5e525aa8c3236fe49ca6ca534d\",\"license\":\"MIT\"},\"contracts/protocol/storages/LendingMarketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {OrderStatisticsTreeLib} from \\\"../libraries/OrderStatisticsTreeLib.sol\\\";\\nimport {OrderBookLib} from \\\"../libraries/OrderBookLib.sol\\\";\\n\\nstruct ItayoseLog {\\n    uint256 openingUnitPrice;\\n    uint256 lastLendUnitPrice;\\n    uint256 lastBorrowUnitPrice;\\n}\\n\\nlibrary LendingMarketStorage {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarket\\\");\\n\\n    struct Storage {\\n        bytes32 ccy;\\n        uint8 lastOrderBookId;\\n        // Order fee rate received by protocol (in basis point)\\n        uint256 orderFeeRate;\\n        // Rate limit range of yield for the circuit breaker\\n        uint256 circuitBreakerLimitRange;\\n        // Mapping from order book id to order book\\n        mapping(uint8 => OrderBookLib.OrderBook) orderBooks;\\n        // Mapping from maturity to boolean if the market is ready or not per maturity\\n        mapping(uint256 => bool) isReady;\\n        // // Mapping from maturity to Itayose log\\n        mapping(uint256 => ItayoseLog) itayoseLogs;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfdf72a429c0b4e97c4dc09ce5bc5ae4f39ab90678d33211589992eb7a53d870a\",\"license\":\"MIT\"},\"contracts/protocol/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0x7b05f97661e6dfe1142eec9be3dcf86d1eec55ed4fb1dea4a5859f75a0c84c13\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101625760003560e01c80636a5138d6116100cd578063932c938511610086578063932c93851461038c578063a3b88aa0146103ae578063cd458662146103c1578063dded339b146103d4578063f8044e6c146103e7578063fffa87b8146103fa57600080fd5b80636a5138d6146102e05780636aa65aaf146102f35780636c5d6df11461031357806380d5b6091461033357806382bdfed51461036657806385ad3bf21461037957600080fd5b80633a9a3ecc1161011f5780633a9a3ecc1461022b57806350e187011461024d5780635575c7961461027557806357673717146102a757806358e64897146102ba5780635f7f8b45146102cd57600080fd5b80631f98a42014610167578063261cc1b21461019057806329d6dd13146101c15780632bfa7c13146101e4578063381e93441461020557806338b0585214610218575b600080fd5b61017a6101753660046130cb565b61040d565b6040516101879190613121565b60405180910390f35b81801561019c57600080fd5b506101b06101ab3660046130cb565b610429565b604051610187959493929190613134565b6101d46101cf3660046130cb565b610660565b6040519015158152602001610187565b6101f76101f23660046130cb565b610693565b604051908152602001610187565b6101d46102133660046130cb565b6106a9565b61017a6102263660046131e0565b6106df565b81801561023757600080fd5b5061024b610246366004613299565b61078e565b005b61026061025b3660046130cb565b61085f565b60408051928352602083019190915201610187565b81801561028157600080fd5b506102956102903660046132e6565b6108ad565b60405160ff9091168152602001610187565b61017a6102b53660046131e0565b610945565b6101f76102c83660046130cb565b6109e5565b6101f76102db3660046130cb565b6109f3565b6101d46102ee3660046130cb565b610a06565b8180156102ff57600080fd5b5061024b61030e366004613312565b610a40565b81801561031f57600080fd5b5061024b61032e366004613312565b610ad3565b6103466103413660046130cb565b610b42565b604080519485526020850193909352918301526060820152608001610187565b6101d46103743660046130cb565b610b7a565b6101f76103873660046130cb565b610b8f565b61039f61039a36600461332b565b610bb3565b60405161018793929190613355565b6101f76103bc36600461332b565b610bd8565b61017a6103cf3660046131e0565b610bf7565b6103466103e23660046130cb565b610c92565b61039f6103f536600461332b565b610cb9565b6101d46104083660046130cb565b610cd1565b6060610423600161041d84610d09565b90610d2e565b92915050565b6000806000610436613081565b61043e613081565b600080600061044c89610d09565b905061045781610e65565b929a509198509350915086156105c457604080518082019091526000808252600160208301525b6002811015610561576000610491613081565b6104bc6040518060800160405280600081526020016000815260200160008152602001600081525090565b6104e18585600281106104d1576104d16133a4565b602002015187908e600080611093565b50506040820151909350909150156104fd576104fd868e6111e0565b60608201511561054b57600085856002811061051b5761051b6133a4565b602002015160018111156105315761053161338e565b1415610543576001925081985061054b565b600092508199505b5050508080610559906133d0565b91505061047e565b507fa9952c3d01896ca75bba3aede761be10089d8d4725c9fee6b99245515986ef6061058b611235565b54835460408051928352602083019190915281018b9052606081018690526080810185905260a081018a905260c00160405180910390a1505b60016105ce611235565b825460009081526005919091016020908152604091829020805460ff19169315159390931790925580516060810182528a81529182018590528101839052610614611235565b6006016000836000015481526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050508060010154955050505091939590929450565b600061066a611235565b600501600061067884610d09565b54815260208101919091526040016000205460ff1692915050565b600061042360016106a384610d09565b90611259565b6000610e106106b783610d09565b600101546106c591906133eb565b421015801561042357506106d882610660565b1592915050565b6060815167ffffffffffffffff8111156106fb576106fb6131ca565b604051908082528060200260200182016040528015610724578160200160208202803683370190505b50905060005b825181101561078857610755838281518110610748576107486133a4565b6020026020010151610d09565b6000015482828151811061076b5761076b6133a4565b602090810291909101015280610780816133d0565b91505061072a565b50919050565b6000610798611235565b60ff871660009081526004919091016020526040902090506107bb815442101590565b6107d857604051632e98f16560e11b815260040160405180910390fd5b6107f384846107ea62093a80826133eb565b849291906112ff565b6107fb611235565b600086815260059190910160205260408120805460ff191692151592909217909155610825611235565b60ff87166000908152600491909101602052604081209150610848908290611259565b6108565761085681846111e0565b50505050505050565b60008061088361086d611235565b60030154600161087c86610d09565b9190611363565b91506108a6610890611235565b60030154600161089f86610d09565b91906113e2565b9050915091565b60006108b7611447565b90506108d08484846108c885610d09565b9291906112ff565b6108d8611235565b60008681526005919091016020908152604091829020805460ff191693151593909317909255805160ff8416815291820186905281018490527f04ec0e7cdb609ffd421993d30756b50a4c420e88ce7f59bb3e29b5a8fe1fcf4a9060600160405180910390a19392505050565b6060815167ffffffffffffffff811115610961576109616131ca565b60405190808252806020026020018201604052801561098a578160200160208202803683370190505b50905060005b8251811015610788576109b66109b1848381518110610748576107486133a4565b611492565b8282815181106109c8576109c86133a4565b6020908102919091010152806109dd816133d0565b915050610990565b60006104236109b183610d09565b6000610423610a0183610d09565b6114ad565b6000610a1182610660565b8015610a235750610a2182610b7a565b155b80156104235750610a3382610d09565b6001015442101592915050565b6127108110610a6257604051636d3872b560e11b815260040160405180910390fd5b6000610a6c611235565b600201549050808214610acf5781610a82611235565b600201557fad24e9bff76148b1b779fc330ea225198d2b44136c7a8e5fbec46c99c7775632610aaf611235565b546040805191825260208201849052810184905260600160405180910390a15b5050565b6127108110610af557604051631ce2ca3b60e31b815260040160405180910390fd5b6000610aff611235565b600301549050808214610acf5781610b15611235565b600301557fee52d515b96986517a19b501c0a50b03f4edace46ba0484faaea7590969adcf6610aaf611235565b6000806000806000610b5386610d09565b9050610b5d611235565b548154600183015460029093015491989097509195509350915050565b6000610423610b8883610d09565b5442101590565b6000610b9a82610d09565b60030154600160301b900465ffffffffffff1692915050565b6060806060610bcb84610bc587610d09565b906114e2565b9250925092509250925092565b6000610bf0826001610be986610d09565b9190611767565b9392505050565b6060815167ffffffffffffffff811115610c1357610c136131ca565b604051908082528060200260200182016040528015610c3c578160200160208202803683370190505b50905060005b825181101561078857610c63610a01848381518110610748576107486133a4565b828281518110610c7557610c756133a4565b602090810291909101015280610c8a816133d0565b915050610c42565b600080600080610ca9610ca486610d09565b610e65565b93509350935093505b9193509193565b6060806060610bcb84610ccb87610d09565b906118a9565b600080610cdd83610d09565b905080600201544210158015610bf05750610e108160010154610d0091906133eb565b42109392505050565b6000610d13611235565b60ff9092166000908152600492909201602052506040902090565b6003820154606090610d4f90600160681b90046001600160501b0316611b25565b600384015490915065ffffffffffff600160301b9091041643141580610d8f575080600081518110610d8357610d836133a4565b60200260200101516000145b80610d975750815b8015610dae57506003830154600160601b900460ff165b1561042357600060018251610dc391906133eb565b90505b8015610e1f5781610dd86001836133eb565b81518110610de857610de86133a4565b6020026020010151828281518110610e0257610e026133a4565b602090810291909101015280610e1781613402565b915050610dc6565b50610e4083600501546127108560040154610e3a9190613419565b90611c35565b81600081518110610e5357610e536133a4565b60200260200101818152505092915050565b80546000908152600b8201602052604081208190819081908190610e8890611ca6565b86546000908152600c88016020526040812091925090610ea790611ced565b87546000908152600b8901602090815260408083208684526001019091528120600501549192509088546000908152600c8a01602090815260408083208684526001019091528120600501549192509089546000908152600c8b0160209081526040808320600b8e019092529091209192509085851180610f26575084155b80610f2f575085155b15610f5e57610f436002610e3a8789613438565b99506000806000809950995099509950505050505050610cb2565b858511158015610f6e5750600085115b8015610f7a5750600086115b156110865785985084975082841115610fd3578599508287610f9c9190613438565b9650610fa883856133eb565b9350610fb48286611d2f565b60008181526001840160205260409020600501549095505b9250610f5e565b82841015611020578499508387610fea9190613438565b9650610ff684846133eb565b92506110028187611de1565b60008181526001830160205260409020600501549096509350610f5e565b61102f6002610e3a8789613438565b995061103b8488613438565b96506110478187611de1565b95506110538286611d2f565b60008781526001830160205260409020600501549095506000868152600184016020526040902060050154909450610fcc565b5050505050509193509193565b6110be6040518060800160405280600081526020016000815260200160008152602001600081525090565b6110c6613081565b6000806110d1613081565b60018960018111156110e5576110e561338e565b14156111325789546000908152600b8b0160205260409020611109818a8a8a611e8a565b60408b019290925291895260208901929092529450915061112a8154151590565b92505061118f565b60008960018111156111465761114661338e565b141561118f5789546000908152600c8b016020526040902061116a818a8a8a6120d5565b60408b019290925291895260208901929092529450915061118b8154151590565b9250505b6040518060800160405280826000015165ffffffffffff16815260200182602001516001600160a01b0316815260200182604001518152602001826060015181525093505095509550955095915050565b600391909101805476ffffffffffffffffffff00ffffffffffff000000000000191661ffff909216600160681b026bffffffffffff000000000000191691909117600160301b4365ffffffffffff1602179055565b7ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0a90565b600382015460009061127a90600160681b90046001600160501b0316611b25565b60008151811061128c5761128c6133a4565b60200260200101519050438360030160069054906101000a900465ffffffffffff1665ffffffffffff161415806112c1575080155b806112c95750815b80156112e057506003830154600160601b900460ff165b1561042357610bf083600501546127108560040154610e3a9190613419565b82845560018401829055600284018190556003840180546000600487018190556005870181905576ffffffffffffffffffffffffffffffffff00000000000019909116909155611351610e10846133eb565b421061135b575060015b949350505050565b60008061137285600385611767565b905061139b612710611385866002613419565b61139190612710613438565b610e3a9084613419565b91506127108211806113ab575080155b156113ba5761271091506113da565b6113c5606482613438565b8210156113da576113d7606482613438565b91505b509392505050565b6000806113f185600585611767565b905061140361271061139186826133eb565b9150811580611410575080155b8061141c575060648111155b1561142a57600191506113da565b611435606483613438565b8110156113da576113d76064826133eb565b6000611451611235565b600101805460ff1690600061146583613450565b91906101000a81548160ff021916908360ff16021790555050611486611235565b6001015460ff16919050565b80546000908152600b82016020526040812061042390611ca6565b80546000908152600c82016020526040812081906114ca90611ced565b905080156114d85780610bf0565b6127109392505050565b60608060608367ffffffffffffffff811115611500576115006131ca565b604051908082528060200260200182016040528015611529578160200160208202803683370190505b5092508367ffffffffffffffff811115611545576115456131ca565b60405190808252806020026020018201604052801561156e578160200160208202803683370190505b5091508367ffffffffffffffff81111561158a5761158a6131ca565b6040519080825280602002602001820160405280156115b3578160200160208202803683370190505b5085546000908152600c870160205260408120919250906115d390611ced565b905080846000815181106115e9576115e96133a4565b60209081029190910181019190915286546000908152600c88018252604080822084835260010190925220600501548360008151811061162b5761162b6133a4565b60209081029190910181019190915286546000908152600c88018252604080822084835260010190925220600401548260008151811061166d5761166d6133a4565b602090810291909101015260015b845181101561175e578161168e5761175e565b86546000908152600c8801602052604090206116aa9083611d2f565b9150818582815181106116bf576116bf6133a4565b60209081029190910181019190915287546000908152600c8901825260408082208583526001019092522060050154848281518110611700576117006133a4565b60209081029190910181019190915287546000908152600c8901825260408082208583526001019092522060040154838281518110611741576117416133a4565b602090810291909101015280611756816133d0565b91505061167b565b50509250925092565b60008061178a85600301600d9054906101000a90046001600160501b0316611b25565b8051600387015491925090600090819065ffffffffffff600160301b90910416431415806117b55750855b80156117cc57506003880154600160601b900460ff165b156117ff576117eb88600501546127108a60040154610e3a9190613419565b915060019050866117fb81613402565b9750505b60005b878110156118835783811015806118325750848181518110611826576118266133a4565b60200260200101516000145b1561183c57611883565b84818151811061184e5761184e6133a4565b6020026020010151836118619190613438565b92508161186d816133d0565b925050808061187b906133d0565b915050611802565b506000811161189357600061189d565b61189d8282611c35565b98975050505050505050565b60608060608367ffffffffffffffff8111156118c7576118c76131ca565b6040519080825280602002602001820160405280156118f0578160200160208202803683370190505b5092508367ffffffffffffffff81111561190c5761190c6131ca565b604051908082528060200260200182016040528015611935578160200160208202803683370190505b5091508367ffffffffffffffff811115611951576119516131ca565b60405190808252806020026020018201604052801561197a578160200160208202803683370190505b5085546000908152600b8701602052604081209192509061199a90611ca6565b905080846000815181106119b0576119b06133a4565b60209081029190910181019190915286546000908152600b8801825260408082208483526001019092522060050154836000815181106119f2576119f26133a4565b60209081029190910181019190915286546000908152600b880182526040808220848352600101909252206004015482600081518110611a3457611a346133a4565b602090810291909101015260015b845181101561175e5781611a555761175e565b86546000908152600b880160205260409020611a719083611de1565b915081858281518110611a8657611a866133a4565b60209081029190910181019190915287546000908152600b8901825260408082208583526001019092522060050154848281518110611ac757611ac76133a4565b60209081029190910181019190915287546000908152600b8901825260408082208583526001019092522060040154838281518110611b0857611b086133a4565b602090810291909101015280611b1d816133d0565b915050611a42565b60408051600580825260c082019092526060916020820160a0803683370190505090508161ffff1681600081518110611b6057611b606133a4565b6020026020010181815250506010826001600160501b0316901c61ffff1681600181518110611b9157611b916133a4565b6020026020010181815250506020826001600160501b0316901c61ffff1681600281518110611bc257611bc26133a4565b6020026020010181815250506030826001600160501b0316901c61ffff1681600381518110611bf357611bf36133a4565b6020026020010181815250506040826001600160501b0316901c61ffff1681600481518110611c2457611c246133a4565b602002602001018181525050919050565b6000808211611c4357600080fd5b6005611c4f8385613470565b611c5a90600a613419565b83611c6686600a613419565b611c709190613470565b611c7a91906133eb565b1015611c9157611c8a8284613470565b9050610423565b611c9b8284613470565b611c8a906001613438565b805480611cb557506000919050565b5b600081815260018301602052604090206002015415611ce8576000908152600182016020526040902060020154611cb6565b919050565b805480611cfc57506000919050565b5b600081815260018084016020526040909120015415611ce8576000908152600180830160205260409091200154611cfd565b600081611d575760405162461bcd60e51b8152600401611d4e90613492565b60405180910390fd5b600082815260018401602052604090206002015415611d8f576000828152600184016020526040902060020154611c8a908490612324565b5060008181526001830160205260409020545b8015801590611dc35750600081815260018401602052604090206002015482145b15610423576000818152600184016020526040902054909150611da2565b600081611e005760405162461bcd60e51b8152600401611d4e90613492565b600082815260018085016020526040909120015415611e38576000828152600180850160205260409091200154611c8a90849061235c565b5060008181526001830160205260409020545b8015801590611e6c5750600081815260018085016020526040909120015482145b15610423576000818152600184016020526040902054909150611e4b565b600080600080611e98613081565b6000611ea38a611ca6565b905060008060008984101580611eb7575089155b611efe5760405162461bcd60e51b8152602060048201526018602482015277496e73756666696369656e74206c696d69742076616c756560401b6044820152606401611d4e565b611f0b8d8d8d8d88612393565b959e50919c509a509196509450925090506000611f28838a613438565b9050801561201d578215611f5457899450611f4d8e86611f4886886133eb565b6124be565b9550611f79565b8115611f7957899450611f768e86611f6c88866127d7565b611f4890886133eb565b95505b600085815260018f0160205260408120600281019190915554851561201b575b801561201b578581101561200557808f6001016000888152602001908152602001600020600001541461200157808f600101600088815260200190815260200160002060000181905550858f6001016000838152602001908152602001600020600201819055505b8095505b600090815260018f016020526040902054611f99565b505b808d11156120325761202f818e6133eb565b96505b600061203d8f611ced565b90508a8114801561206657508e6001016000828152602001908152602001600020600501546000145b156120745760008f556120bb565b8e548b108061208e57508e548b14801561208e5750818a10155b156120bb57858f6000018190555060008f6001016000888152602001908152602001600020600001819055505b6120c48f6127e9565b505050505050945094509450945094565b6000806000806120e3613081565b60006120ee8a611ced565b905060008060008984111580612102575089155b6121495760405162461bcd60e51b8152602060048201526018602482015277496e73756666696369656e74206c696d69742076616c756560401b6044820152606401611d4e565b6121568d8d8d8d886128b8565b959e50919c509a509196509450925090506000612173838a613438565b9050801561227d57821561219a578994506121938e86611f4886886133eb565b95506121b5565b81156121b5578994506121b28e86611f6c88866127d7565b95505b60008e60010160008781526020019081526020016000206001018190555060008e60010160008781526020019081526020016000206000015490506000861461227b575b801561227b578581111561226557808f6001016000888152602001908152602001600020600001541461226157808f600101600088815260200190815260200160002060000181905550858f6001016000838152602001908152602001600020600101819055505b8095505b600090815260018f0160205260409020546121f9565b505b808d11156122925761228f818e6133eb565b96505b600061229d8f611ca6565b90508a811480156122c657508e6001016000828152602001908152602001600020600501546000145b156122d45760008f5561231b565b8e548b11806122ee57508e548b1480156122ee5750818a10155b1561231b57858f6000018190555060008f6001016000888152602001908152602001600020600001819055505b6120c48f6129ae565b60005b600082815260018085016020526040909120015415610788576000918252600180840160205260409092209091015490612327565b60005b600082815260018401602052604090206002015415610788576000918252600183016020526040909120600201549061235f565b60008181808080805b8a8410806123a857508a155b80156123bb5750898310806123bb575089155b80156123c657508515155b80156123da575088861015806123da575088155b1561248957600086815260018d016020526040902060050154959650869594506124048686612a3d565b61240e9084613438565b925061241a8585613438565b93508a8411801561242a57508a15155b1561244c576124398b856133eb565b91506124458683612a3d565b9050612478565b898311801561245a57508915155b15612478576124698a846133eb565b905061247586826127d7565b91505b6124828c87611de1565b955061239c565b811561249c5761249982856133eb565b93505b80156124af576124ac81846133eb565b92505b959b949a509550955095509550565b6124c6613081565b6000838152600185016020526040902060058101548311156125505760405162461bcd60e51b815260206004820152603860248201527f4f7264657253746174697374696373547265654c69623a20416d6f756e74207460448201527f6f2072656d6f766520697320696e73756666696369656e7400000000000000006064820152608401611d4e565b600381015465ffffffffffff61010090910481166000818152600684016020908152604091829020825160a08101845281548087168252600160301b8104871693820193909352600160601b9092049094169181019190915260018301546001600160a01b0316606082015260029092015460808301528491905b65ffffffffffff8116158015906125e157508215155b1561272f5765ffffffffffff8082166000908152600686016020908152604091829020825160a08101845281548086168252600160301b8104861693820193909352600160601b9092049093169181019190915260018201546001600160a01b0316606082015260029091015460808201819052909250831061267b57608082015161266d90846133eb565b9250816020015190506125cb565b6040518060800160405280836000015165ffffffffffff16815260200183606001516001600160a01b031681526020018481526020016126bb8986612a3d565b905260409283015165ffffffffffff908116600090815260068701602090815290859020855160a08101875281548085168252600160301b8104851693820193909352600160601b9092049092169481019490945260018101546001600160a01b0316606085015260020154608084015294505b815165ffffffffffff161561274f5761274d88888460000151612a4f565b505b6040850151156127cc57604080860151600089815260018b016020908152838220895165ffffffffffff16835260060190529182206002018054919290916127989084906133eb565b9091555050604080860151600089815260018b016020529182206005018054919290916127c69084906133eb565b90915550505b505050509392505050565b6000610bf0612710610e3a8585613419565b8054600090815260018201602052604090206002015415801561282057508054600090815260018083016020526040909120015415155b156128795780546000908152600180830160205260408083209091015482529020600201541561286b578054600090815260018083016020526040909120015461286b908290612c90565b612879818260000154612d68565b8054600090815260018201602052604090206003015460ff16156128b557805460009081526001820160205260409020600301805460ff191690555b50565b60008181808080805b8a8410806128cd57508a155b80156128e05750898310806128e0575089155b80156128eb57508515155b80156128ff575088861115806128ff575088155b1561248957600086815260018d016020526040902060050154959650869594506129298686612a3d565b6129339084613438565b925061293f8585613438565b93508a8411801561294f57508a15155b156129715761295e8b856133eb565b915061296a8683612a3d565b905061299d565b898311801561297f57508915155b1561299d5761298e8a846133eb565b905061299a86826127d7565b91505b6129a78c87611d2f565b95506128c1565b805460009081526001808301602052604090912001541580156129e557508054600090815260018201602052604090206002015415155b15612879578054600090815260018083016020526040808320600201548352909120015415612a2f5780546000908152600182016020526040902060020154612a2f908290612d68565b612879818260000154612c90565b6000610bf083610e3a61271085613419565b6000612a5c848484612e3d565b612abd5760405162461bcd60e51b815260206004820152602c60248201527f4f7264657253746174697374696373547265654c69623a204f7264657220646f60448201526b195cc81b9bdd08195e1a5cdd60a21b6064820152608401611d4e565b50600082815260018085016020908152604080842065ffffffffffff808716865260068201808552838720845160a08101865281548085168252600160301b8104851682890152600160601b9004841681870152818801546001600160a01b031660608201526002918201546080820181905260038601546101009004909416808a529290965293909620909201549194909390915b8665ffffffffffff168314612bb757600092835260068501602052604090922054600160301b900465ffffffffffff169181612b8e816133d0565b6000858152600688016020526040902060020154909350612bb0915082613438565b9050612b53565b600385015465ffffffffffff888116670100000000000000909204161415612c1157612be589896000612e5b565b600088815260018a016020526040902060030180546cffffffffffff0000000000000019169055612c4f565b612c2089898660200151612e5b565b60208085015165ffffffffffff1660009081526006870190915260409020805465ffffffffffff60601b191690555b81856004016000828254612c6391906133eb565b9250508190555080856005016000828254612c7e91906133eb565b90915550959998505050505050505050565b600081815260018084016020526040808320600281018054915482865292852090930154938590529183905590918015612cd857600081815260018601602052604090208490555b6000838152600186016020526040902082905581612cf857828555612d45565b6000828152600180870160205260409091200154841415612d2e5760008281526001808701602052604090912001839055612d45565b600082815260018601602052604090206002018390555b505060008181526001938401602052604080822090940183905591825291902055565b60008181526001808401602052604080832091820180549254838552918420600201549385905283905590918015612dae57600081815260018601602052604090208490555b6000838152600186016020526040902082905581612dce57828555612e1b565b6000828152600186016020526040902060020154841415612e045760008281526001860160205260409020600201839055612e1b565b600082815260018087016020526040909120018390555b5050600081815260019093016020526040808420600201839055918352912055565b6000612e4a848484612e93565b801561135b575061135b8484612fc8565b6000918252600190920160205260409020600301805465ffffffffffff9092166101000266ffffffffffff0019909216919091179055565b600082815260018085016020908152604080842065ffffffffffff808716808752600683018552838720845160a0810186528154808516808352600160301b8204861698830198909852600160601b900490931694830194909452948301546001600160a01b0316606082015260029092015460808301528593909214612f205760009350505050610bf0565b5b604081015165ffffffffffff1615612fa95760409081015165ffffffffffff808216600090815260068501602090815290849020845160a08101865281548085168252600160301b8104851693820193909352600160601b9092049092169381019390935260018101546001600160a01b031660608401526002015460808301529250612f21565b5060030154610100900465ffffffffffff908116911614949350505050565b600081612fd757506000610423565b8254821415612fe857506001610423565b815b600081815260018501602052604090205415613077576000818152600180860160205260408083205480845292200154821480159061303c575060008181526001860160205260409020600201548214155b1561304c57600092505050610423565b845481141561306057600192505050610423565b506000908152600184016020526040902054612fea565b5060009392505050565b6040518060800160405280600065ffffffffffff16815260200160006001600160a01b0316815260200160008152602001600081525090565b803560ff81168114611ce857600080fd5b6000602082840312156130dd57600080fd5b610bf0826130ba565b600081518084526020808501945080840160005b83811015613116578151875295820195908201906001016130fa565b509495945050505050565b602081526000610bf060208301846130e6565b858152602081018590526040810184905261016081016131866060830185805165ffffffffffff1682526020808201516001600160a01b03169083015260408082015190830152606090810151910152565b825165ffffffffffff1660e083015260208301516001600160a01b0316610100830152604083015161012083015260608301516101408301525b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156131f357600080fd5b823567ffffffffffffffff8082111561320b57600080fd5b818501915085601f83011261321f57600080fd5b813581811115613231576132316131ca565b8060051b604051601f19603f83011681018181108582111715613256576132566131ca565b60405291825284820192508381018501918883111561327457600080fd5b938501935b8285101561189d5761328a856130ba565b84529385019392850192613279565b600080600080600060a086880312156132b157600080fd5b6132ba866130ba565b94506132c8602087016130ba565b94979496505050506040830135926060810135926080909101359150565b6000806000606084860312156132fb57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561332457600080fd5b5035919050565b6000806040838503121561333e57600080fd5b613347836130ba565b946020939093013593505050565b60608152600061336860608301866130e6565b828103602084015261337a81866130e6565b905082810360408401526131c081856130e6565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156133e4576133e46133ba565b5060010190565b6000828210156133fd576133fd6133ba565b500390565b600081613411576134116133ba565b506000190190565b6000816000190483118215151615613433576134336133ba565b500290565b6000821982111561344b5761344b6133ba565b500190565b600060ff821660ff811415613467576134676133ba565b60010192915050565b60008261348d57634e487b7160e01b600052601260045260246000fd5b500490565b60208082526035908201527f4f7264657253746174697374696373547265654c69623a205374617274696e676040820152742076616c75652063616e6e6f74206265207a65726f60581b60608201526080019056fea2646970667358221220313740fbc41095540ea495b27bbcf396e7f339150389a40a2ef092bcdf6db6f664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}