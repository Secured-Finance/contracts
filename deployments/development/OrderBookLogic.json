{
  "address": "0xece5F143206AaF6A8DCAc5e0e9435f099DEDA101",
  "abi": [
    {
      "inputs": [],
      "name": "checkBorrowOrderExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkLendOrderExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "ProtocolTypes.Side"
        },
        {
          "internalType": "uint256",
          "name": "_futureValue",
          "type": "uint256"
        }
      ],
      "name": "estimateFilledAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getBorrowOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getBorrowOrderIds",
      "outputs": [
        {
          "internalType": "uint48[]",
          "name": "activeOrderIds",
          "type": "uint48[]"
        },
        {
          "internalType": "uint48[]",
          "name": "inActiveOrderIds",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHighestLendingUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getLendOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLendOrderIds",
      "outputs": [
        {
          "internalType": "uint48[]",
          "name": "activeOrderIds",
          "type": "uint48[]"
        },
        {
          "internalType": "uint48[]",
          "name": "inActiveOrderIds",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLowestBorrowingUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOpeningUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "openingUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalOffsetAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint48",
          "name": "_orderId",
          "type": "uint48"
        }
      ],
      "name": "getOrder",
      "outputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "ProtocolTypes.Side"
        },
        {
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalAmountFromBorrowOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalAmountFromLendOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf019aafb25195f3d6c41f6e3c3ed914b2195a3baa20199bc0526684bfbb23bed",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0xece5F143206AaF6A8DCAc5e0e9435f099DEDA101",
    "transactionIndex": 19,
    "gasUsed": "4744246",
    "logsBloom": "0x
    "blockHash": "0x7ee234a5aa3a1a146fcebe3ba8e1efaf40e97745da850afc0933819af6503f0c",
    "transactionHash": "0xf019aafb25195f3d6c41f6e3c3ed914b2195a3baa20199bc0526684bfbb23bed",
    "logs": [],
    "blockNumber": 3515623,
    "cumulativeGasUsed": "13814935",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cfa315a724dea306e056c522042f92c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"checkBorrowOrderExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkLendOrderExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"ProtocolTypes.Side\"},{\"internalType\":\"uint256\",\"name\":\"_futureValue\",\"type\":\"uint256\"}],\"name\":\"estimateFilledAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getBorrowOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBorrowOrderIds\",\"outputs\":[{\"internalType\":\"uint48[]\",\"name\":\"activeOrderIds\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48[]\",\"name\":\"inActiveOrderIds\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHighestLendingUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getLendOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLendOrderIds\",\"outputs\":[{\"internalType\":\"uint48[]\",\"name\":\"activeOrderIds\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48[]\",\"name\":\"inActiveOrderIds\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLowestBorrowingUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpeningUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"openingUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOffsetAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_orderId\",\"type\":\"uint48\"}],\"name\":\"getOrder\",\"outputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"ProtocolTypes.Side\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalAmountFromBorrowOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalAmountFromLendOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/libraries/logics/OrderBookLogic.sol\":\"OrderBookLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/protocol/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport {MarketOrder} from \\\"../storages/LendingMarketStorage.sol\\\";\\n\\ninterface ILendingMarket {\\n    struct PartiallyFilledOrder {\\n        address maker;\\n        uint256 amount;\\n        uint256 futureValue;\\n    }\\n\\n    event OrderCanceled(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n\\n    event OrderMade(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n\\n    event OrdersTaken(\\n        address indexed taker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 filledAmount,\\n        uint256 unitPrice,\\n        uint256 filledFutureValue\\n    );\\n\\n    event OrderPartiallyTaken(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 maturity,\\n        uint256 filledAmount,\\n        uint256 filledFutureValue\\n    );\\n\\n    event OrdersCleaned(\\n        uint48[] orderIds,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 maturity\\n    );\\n\\n    event MarketOpened(uint256 maturity, uint256 prevMaturity);\\n\\n    event ItayoseExecuted(bytes32 ccy, uint256 maturity, uint256 openingPrice);\\n\\n    struct Market {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        uint256 openingDate;\\n        uint256 borrowUnitPrice;\\n        uint256 lendUnitPrice;\\n        uint256 midUnitPrice;\\n        bool isReady;\\n    }\\n\\n    function getMarket() external view returns (Market memory);\\n\\n    function getBorrowUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getLendUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getMidUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getBorrowOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturity() external view returns (uint256);\\n\\n    function getCurrency() external view returns (bytes32);\\n\\n    function getOpeningDate() external view returns (uint256);\\n\\n    function getOpeningUnitPrice() external view returns (uint256);\\n\\n    function isReady() external view returns (bool);\\n\\n    function isMatured() external view returns (bool);\\n\\n    function isOpened() external view returns (bool);\\n\\n    function isItayosePeriod() external view returns (bool);\\n\\n    function isPreOrderPeriod() external returns (bool);\\n\\n    function getOrder(uint48 _orderId)\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        );\\n\\n    function getTotalAmountFromLendOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getTotalAmountFromBorrowOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getLendOrderIds(address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds);\\n\\n    function getBorrowOrderIds(address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds);\\n\\n    function estimateFilledAmount(ProtocolTypes.Side _side, uint256 _futureValue)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function openMarket(uint256 maturity, uint256 openingDate) external returns (uint256);\\n\\n    function cancelOrder(address user, uint48 orderId)\\n        external\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        );\\n\\n    function createPreOrder(\\n        ProtocolTypes.Side side,\\n        address user,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external;\\n\\n    function unwind(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _futureValue\\n    )\\n        external\\n        returns (\\n            uint256 filledUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledFutureValue,\\n            PartiallyFilledOrder memory partiallyFilledOrder\\n        );\\n\\n    function executeItayoseCall()\\n        external\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 totalOffsetAmount,\\n            uint256 openingDate,\\n            PartiallyFilledOrder memory partiallyFilledLendingOrder,\\n            PartiallyFilledOrder memory partiallyFilledBorrowingOrder\\n        );\\n\\n    function cleanUpOrders(address _user)\\n        external\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        );\\n\\n    function createOrder(\\n        ProtocolTypes.Side side,\\n        address account,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        bool ignoreRemainingAmount\\n    )\\n        external\\n        returns (\\n            uint256 filledUnitPrice,\\n            uint256 filledFutureValue,\\n            PartiallyFilledOrder memory partiallyFilledOrder,\\n            uint256 remainingAmount\\n        );\\n\\n    function pauseMarket() external;\\n\\n    function unpauseMarket() external;\\n}\\n\",\"keccak256\":\"0x62ac9c1bdda878bd09344db5bc140a51021abda1858560f05a123a91941c49b7\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Constants {\\n    /// @dev Used for price digits in the basis (10000 -> 1)\\n    uint256 public constant PRICE_DIGIT = 10000;\\n\\n    /// @dev Used for percentage digits in the basis (10000 -> 100%)\\n    uint256 public constant PCT_DIGIT = 10000;\\n\\n    /// @dev Used for seconds in year (60 * 60 * 24 * 365)\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000;\\n\\n    /// @dev Used for maximum order count per currency\\n    uint256 internal constant MAXIMUM_ORDER_COUNT = 20;\\n}\\n\",\"keccak256\":\"0x89fe39938c9a7dd4133dba6099285937c94718a355bd904f48989b795cee2898\",\"license\":\"MIT\"},\"contracts/protocol/libraries/OrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// libraries\\nimport {Constants} from \\\"../libraries/Constants.sol\\\";\\n// types\\nimport {RoundingUint256} from \\\"./math/RoundingUint256.sol\\\";\\n\\nstruct RemainingOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 unitPrice;\\n}\\n\\nstruct PartiallyFilledOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 futureValue;\\n}\\n\\nstruct OrderItem {\\n    uint48 orderId;\\n    uint48 next;\\n    uint48 prev;\\n    address maker;\\n    uint256 timestamp;\\n    uint256 amount;\\n}\\n\\n/**\\n * @notice OrderStatisticsTreeLib is a Red-Black Tree binary search library\\n * based on the following library that is extended to manage order data.\\n *\\n * https://github.com/rob-Hitchens/OrderStatisticsTree\\n *\\n */\\nlibrary OrderStatisticsTreeLib {\\n    using RoundingUint256 for uint256;\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint48 head;\\n        uint48 tail;\\n        uint256 orderCounter;\\n        uint256 orderTotalAmount;\\n        mapping(uint256 => OrderItem) orders;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].right != EMPTY) {\\n            _value = self.nodes[_value].right;\\n        }\\n    }\\n\\n    function hasOrders(Tree storage self) internal view returns (bool) {\\n        return self.root != EMPTY;\\n    }\\n\\n    function next(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(401) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].right != EMPTY) {\\n            _cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(402) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].left != EMPTY) {\\n            _cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint256 value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        // if (self.nodes[value].parent != EMPTY) return true;\\n        uint256 cursor = value;\\n        while (self.nodes[cursor].parent != EMPTY) {\\n            uint256 parent = self.nodes[cursor].parent;\\n            if (self.nodes[parent].left != cursor && self.nodes[parent].right != cursor) {\\n                return false;\\n            }\\n            if (parent == self.root) {\\n                return true;\\n            }\\n            cursor = self.nodes[cursor].parent;\\n        }\\n        return false;\\n    }\\n\\n    function isActiveOrderId(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        return orderIdExists(self, value, orderId) && exists(self, value);\\n    }\\n\\n    function getNode(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n        return (\\n            gn.parent,\\n            gn.left,\\n            gn.right,\\n            gn.red,\\n            gn.head,\\n            gn.tail,\\n            gn.orderCounter,\\n            gn.orderTotalAmount\\n        );\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function getNodeTotalAmount(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint256 totalAmount)\\n    {\\n        return self.nodes[value].orderTotalAmount;\\n    }\\n\\n    function getNodeOrderIds(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint48[] memory orderIds)\\n    {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[gn.head];\\n        orderIds = new uint48[](gn.orderCounter);\\n\\n        for (uint256 i = 0; i < gn.orderCounter; i++) {\\n            orderIds[i] = order.orderId;\\n            order = gn.orders[order.next];\\n        }\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256 _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(405) - Value to insert cannot be zero\\\");\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                return;\\n            }\\n        }\\n\\n        Node storage nValue = self.nodes[value];\\n        // Update order info as a new one if there is already an old node\\n        if (\\n            self.root == EMPTY ||\\n            (self.nodes[cursor].left != value && self.nodes[cursor].right != value)\\n        ) {\\n            nValue.orderCounter = 0;\\n            nValue.orderTotalAmount = 0;\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        }\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(407) - Value to delete cannot be zero\\\");\\n        Node storage nValue = self.nodes[value];\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint256 a,\\n        uint256 b\\n    ) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    function estimateDroppedAmountFromLeft(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = first(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV).div(\\n                    cursorNodeAmountInFV\\n                );\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n    }\\n\\n    function estimateDroppedAmountFromRight(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = last(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV).div(\\n                    cursorNodeAmountInFV\\n                );\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n    }\\n\\n    function dropLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue,\\n        uint256 limitFutureValue\\n    )\\n        internal\\n        returns (\\n            uint256 value,\\n            uint256 filledAmount,\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            PartiallyFilledOrder memory partiallyFilledOrder\\n        )\\n    {\\n        uint256 cursor = first(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor <= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        uint256 amountDiff;\\n        uint256 futureValueDiff;\\n        while (\\n            (totalAmount < amount || amount == EMPTY) &&\\n            (filledFutureValue < limitFutureValue || limitFutureValue == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor <= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            filledFutureValue += _calculateFutureValue(cursor, cursorNodeAmount);\\n            filledAmount += cursorNodeAmount;\\n\\n            if (totalAmount > amount && amount != EMPTY) {\\n                amountDiff = totalAmount - amount;\\n                futureValueDiff = _calculateFutureValue(cursor, amountDiff);\\n            } else if (filledFutureValue > limitFutureValue && limitFutureValue != EMPTY) {\\n                futureValueDiff = filledFutureValue - limitFutureValue;\\n                amountDiff = _calculatePresentValue(cursor, futureValueDiff);\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n\\n        if (amountDiff > 0) {\\n            filledAmount -= amountDiff;\\n        }\\n        if (futureValueDiff > 0) {\\n            filledFutureValue -= futureValueDiff;\\n        }\\n\\n        if (totalAmount > 0) {\\n            if (amountDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(self, cursor, cursorNodeAmount - amountDiff);\\n            } else if (futureValueDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, futureValueDiff)\\n                );\\n            }\\n\\n            self.nodes[cursor].left = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent > cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].left = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        uint256 lastNode = last(self);\\n\\n        if (lastNode == value && self.nodes[lastNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value > self.root || (value == self.root && filledAmount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToLeft(self);\\n    }\\n\\n    function dropRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue,\\n        uint256 limitFutureValue\\n    )\\n        internal\\n        returns (\\n            uint256 value,\\n            uint256 filledAmount,\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            PartiallyFilledOrder memory partiallyFilledOrder\\n        )\\n    {\\n        uint256 cursor = last(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor >= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        uint256 amountDiff;\\n        uint256 futureValueDiff;\\n        while (\\n            (totalAmount < amount || amount == EMPTY) &&\\n            (filledFutureValue < limitFutureValue || limitFutureValue == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor >= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            filledFutureValue += _calculateFutureValue(cursor, cursorNodeAmount);\\n            filledAmount += cursorNodeAmount;\\n\\n            if (totalAmount > amount && amount != EMPTY) {\\n                amountDiff = totalAmount - amount;\\n                futureValueDiff = _calculateFutureValue(cursor, amountDiff);\\n            } else if (filledFutureValue > limitFutureValue && limitFutureValue != EMPTY) {\\n                futureValueDiff = filledFutureValue - limitFutureValue;\\n                amountDiff = _calculatePresentValue(cursor, futureValueDiff);\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n\\n        if (amountDiff > 0) {\\n            filledAmount -= amountDiff;\\n        }\\n        if (futureValueDiff > 0) {\\n            filledFutureValue -= futureValueDiff;\\n        }\\n\\n        if (totalAmount > 0) {\\n            if (amountDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(self, cursor, cursorNodeAmount - amountDiff);\\n            } else if (futureValueDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, futureValueDiff)\\n                );\\n            }\\n\\n            self.nodes[cursor].right = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent < cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].right = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        uint256 firstNode = first(self);\\n\\n        if (firstNode == value && self.nodes[firstNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value < self.root || (value == self.root && filledAmount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToRight(self);\\n    }\\n\\n    function rotateTreeToLeft(Tree storage self) internal {\\n        if (self.nodes[self.root].left == 0 && self.nodes[self.root].right != 0) {\\n            if (self.nodes[self.nodes[self.root].right].left != 0) {\\n                rotateRight(self, self.nodes[self.root].right);\\n            }\\n            rotateLeft(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function rotateTreeToRight(Tree storage self) internal {\\n        if (self.nodes[self.root].right == 0 && self.nodes[self.root].left != 0) {\\n            if (self.nodes[self.nodes[self.root].left].right != 0) {\\n                rotateLeft(self, self.nodes[self.root].left);\\n            }\\n            rotateRight(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function getFutureValue(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (uint256) {\\n        return _calculateFutureValue(value, self.nodes[value].orders[orderId].amount);\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (OrderItem memory) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orders[orderId];\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function orderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        uint48 cursor = orderId;\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[cursor];\\n\\n        if (order.orderId != cursor) {\\n            return false;\\n        }\\n\\n        while (order.prev != EMPTY) {\\n            cursor = order.prev;\\n            order = gn.orders[cursor];\\n        }\\n\\n        return cursor == gn.head;\\n    }\\n\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal {\\n        require(amount > 0, \\\"Insufficient amount\\\");\\n        require(value <= Constants.PRICE_DIGIT, \\\"Insufficient value\\\");\\n        insert(self, value);\\n\\n        addTail(self, value, orderId, user, amount);\\n    }\\n\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        amount = _removeOrder(self, value, orderId);\\n        remove(self, value);\\n    }\\n\\n    /**\\n     * @dev Reduces order amount once market order taken.\\n     */\\n    function fillOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount\\n    ) internal returns (PartiallyFilledOrder memory partiallyFilledOrder) {\\n        Node storage gn = self.nodes[value];\\n\\n        require(\\n            gn.orderTotalAmount >= _amount,\\n            \\\"OrderStatisticsTree(410) - Amount to fill is insufficient\\\"\\n        );\\n\\n        uint256 remainingAmount = _amount;\\n        OrderItem memory currentOrder = gn.orders[gn.head];\\n        uint48 orderId = gn.head;\\n\\n        while (orderId != 0 && remainingAmount != 0) {\\n            currentOrder = gn.orders[orderId];\\n\\n            if (currentOrder.amount <= remainingAmount) {\\n                remainingAmount -= currentOrder.amount;\\n                orderId = currentOrder.next;\\n            } else {\\n                partiallyFilledOrder = PartiallyFilledOrder(\\n                    currentOrder.orderId,\\n                    currentOrder.maker,\\n                    remainingAmount,\\n                    _calculateFutureValue(value, remainingAmount)\\n                );\\n                currentOrder = gn.orders[currentOrder.prev];\\n                break;\\n            }\\n        }\\n\\n        if (currentOrder.orderId != 0) {\\n            _dropOrders(self, value, currentOrder.orderId);\\n        }\\n\\n        if (partiallyFilledOrder.amount > 0) {\\n            self.nodes[value].orders[partiallyFilledOrder.orderId].amount -= partiallyFilledOrder\\n                .amount;\\n            self.nodes[value].orderTotalAmount -= partiallyFilledOrder.amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n        uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n        _link(self, _value, orderId, gn.head);\\n        _setHead(self, _value, orderId);\\n        if (gn.tail == 0) _setTail(self, _value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, _value, _orderId, _user, _amount);\\n        } else {\\n            uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n            _link(self, _value, gn.tail, orderId);\\n            _setTail(self, _value, orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint48) {\\n        Node storage gn = self.nodes[value];\\n        require(\\n            gn.orders[orderId].timestamp == 0,\\n            \\\"OrderStatisticsTree(409) - Order id already exist.\\\"\\n        );\\n\\n        gn.orderCounter += 1;\\n        gn.orderTotalAmount += amount;\\n        OrderItem memory order = OrderItem(orderId, 0, 0, user, block.timestamp, amount);\\n        gn.orders[orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the list.\\n     */\\n    function _removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n        gn.orderTotalAmount -= order.amount;\\n    }\\n\\n    /**\\n     * @dev Drop the OrderItems older than or equal `orderId` from the list\\n     */\\n    function _dropOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n        uint256 cursor = gn.head;\\n        uint256 removedCount = 1;\\n        uint256 removedAmount = gn.orders[cursor].amount;\\n\\n        while (cursor != orderId) {\\n            cursor = gn.orders[cursor].next;\\n            removedCount++;\\n            removedAmount += gn.orders[cursor].amount;\\n        }\\n\\n        if (gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        }\\n\\n        gn.orderCounter -= removedCount;\\n        gn.orderTotalAmount -= removedAmount;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 _prevId,\\n        uint48 _nextId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[_prevId].next = _nextId;\\n        gn.orders[_nextId].prev = _prevId;\\n    }\\n\\n    function _calculateFutureValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * Constants.PRICE_DIGIT).div(unitPrice);\\n    }\\n\\n    function _calculatePresentValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * unitPrice).div(Constants.PRICE_DIGIT);\\n    }\\n}\\n\",\"keccak256\":\"0x82f693fffbd1f1657b73d69598c7856b403fcccd41ac1c3143e8082e5dc9344d\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/OrderBookLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {OrderStatisticsTreeLib, PartiallyFilledOrder, OrderItem} from \\\"../OrderStatisticsTreeLib.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\nimport {ILendingMarket} from \\\"../../interfaces/ILendingMarket.sol\\\";\\nimport {ProtocolTypes} from \\\"../../types/ProtocolTypes.sol\\\";\\nimport {LendingMarketStorage as Storage, MarketOrder} from \\\"../../storages/LendingMarketStorage.sol\\\";\\n\\nlibrary OrderBookLogic {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n    using RoundingUint256 for uint256;\\n\\n    function getHighestLendingUnitPrice() public view returns (uint256) {\\n        return Storage.slot().lendOrders[Storage.slot().maturity].last();\\n    }\\n\\n    function getLowestBorrowingUnitPrice() public view returns (uint256) {\\n        uint256 unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].first();\\n        return unitPrice == 0 ? Constants.PRICE_DIGIT : unitPrice;\\n    }\\n\\n    function checkBorrowOrderExist() public view returns (bool) {\\n        return Storage.slot().borrowOrders[Storage.slot().maturity].hasOrders();\\n    }\\n\\n    function checkLendOrderExist() public view returns (bool) {\\n        return Storage.slot().lendOrders[Storage.slot().maturity].hasOrders();\\n    }\\n\\n    function getLendOrderBook(uint256 _limit)\\n        public\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = Storage.slot().lendOrders[Storage.slot().maturity].last();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\\n            unitPrice\\n        );\\n        quantities[0] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeCount(unitPrice);\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = Storage.slot().lendOrders[Storage.slot().maturity].prev(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\\n                unitPrice\\n            );\\n            quantities[i] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeCount(\\n                unitPrice\\n            );\\n        }\\n    }\\n\\n    function getBorrowOrderBook(uint256 _limit)\\n        public\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].first();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeTotalAmount(\\n            unitPrice\\n        );\\n        quantities[0] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeCount(\\n            unitPrice\\n        );\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].next(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeTotalAmount(\\n                unitPrice\\n            );\\n            quantities[i] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeCount(\\n                unitPrice\\n            );\\n        }\\n    }\\n\\n    function getOrder(uint48 _orderId)\\n        public\\n        view\\n        returns (\\n            ProtocolTypes.Side side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        )\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n\\n        OrderItem memory orderItem;\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            orderItem = Storage.slot().lendOrders[marketOrder.maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n        } else {\\n            orderItem = Storage.slot().borrowOrders[marketOrder.maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n        }\\n\\n        if (orderItem.maker != address(0)) {\\n            return (\\n                marketOrder.side,\\n                marketOrder.unitPrice,\\n                marketOrder.maturity,\\n                orderItem.maker,\\n                orderItem.amount,\\n                orderItem.timestamp\\n            );\\n        }\\n    }\\n\\n    function getTotalAmountFromLendOrders(address _user)\\n        public\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds) = getLendOrderIds(_user);\\n\\n        maturity = Storage.slot().userCurrentMaturities[_user];\\n\\n        for (uint256 i = 0; i < activeOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[activeOrderIds[i]];\\n            // Sum future values in the current maturity.\\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\\n            // as an order canceled in the past market.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .lendOrders[Storage.slot().maturity]\\n                .getOrderById(marketOrder.unitPrice, activeOrderIds[i]);\\n            activeAmount += orderItem.amount;\\n        }\\n\\n        for (uint256 i = 0; i < inActiveOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveOrderIds[i]];\\n            if (maturity == 0) {\\n                maturity = marketOrder.maturity;\\n            }\\n            // Sum future values in the maturity of orders\\n            // It will be the future value when the order is created, even if the market is rotated\\n            // and maturity is updated.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .lendOrders[marketOrder.maturity]\\n                .getOrderById(marketOrder.unitPrice, inActiveOrderIds[i]);\\n            inactiveAmount += orderItem.amount;\\n\\n            // Check if the order is filled by Itayose.\\n            // If the order is filled by Itayose, the opening unit price is used instead of the order's one.\\n            uint256 unitPrice = marketOrder.unitPrice;\\n            if (Storage.slot().isPreOrder[inActiveOrderIds[i]] == true) {\\n                uint256 openingUnitPrice = Storage.slot().openingUnitPrices[marketOrder.maturity];\\n                if (openingUnitPrice < unitPrice) {\\n                    unitPrice = openingUnitPrice;\\n                }\\n            }\\n\\n            inactiveFutureValue += (orderItem.amount * Constants.PRICE_DIGIT).div(unitPrice);\\n        }\\n    }\\n\\n    function getTotalAmountFromBorrowOrders(address _user)\\n        public\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds) = getBorrowOrderIds(\\n            _user\\n        );\\n\\n        for (uint256 i = 0; i < activeOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[activeOrderIds[i]];\\n            // Sum future values in the current maturity.\\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\\n            // as an order canceled in the past market.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .borrowOrders[Storage.slot().maturity]\\n                .getOrderById(marketOrder.unitPrice, activeOrderIds[i]);\\n            activeAmount += orderItem.amount;\\n        }\\n\\n        maturity = Storage.slot().userCurrentMaturities[_user];\\n\\n        for (uint256 i = 0; i < inActiveOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveOrderIds[i]];\\n            // Sum future values in the maturity of orders\\n            // It will be the future value when the order is created, even if the market is rotated\\n            // and maturity is updated.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .borrowOrders[marketOrder.maturity]\\n                .getOrderById(marketOrder.unitPrice, inActiveOrderIds[i]);\\n            inactiveAmount += orderItem.amount;\\n\\n            // Check if the order is filled by Itayose.\\n            // If the order is filled by Itayose, the opening unit price is used instead of the order's one.\\n            uint256 unitPrice = marketOrder.unitPrice;\\n            if (Storage.slot().isPreOrder[inActiveOrderIds[i]] == true) {\\n                uint256 openingUnitPrice = Storage.slot().openingUnitPrices[marketOrder.maturity];\\n                if (openingUnitPrice > unitPrice) {\\n                    unitPrice = openingUnitPrice;\\n                }\\n            }\\n\\n            inactiveFutureValue += (orderItem.amount * Constants.PRICE_DIGIT).div(unitPrice);\\n        }\\n    }\\n\\n    function getLendOrderIds(address _user)\\n        public\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        bool isPastMaturity = Storage.slot().userCurrentMaturities[_user] !=\\n            Storage.slot().maturity;\\n\\n        activeOrderIds = new uint48[](\\n            isPastMaturity ? 0 : Storage.slot().activeLendOrderIds[_user].length\\n        );\\n        inActiveOrderIds = new uint48[](Storage.slot().activeLendOrderIds[_user].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().activeLendOrderIds[_user].length; i++) {\\n            uint48 orderId = Storage.slot().activeLendOrderIds[_user][i];\\n            MarketOrder memory marketOrder = Storage.slot().orders[orderId];\\n\\n            if (\\n                !Storage\\n                    .slot()\\n                    .lendOrders[Storage.slot().userCurrentMaturities[_user]]\\n                    .isActiveOrderId(marketOrder.unitPrice, orderId)\\n            ) {\\n                inActiveOrderCount += 1;\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                if (!isPastMaturity) {\\n                    activeOrderCount += 1;\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function getBorrowOrderIds(address _user)\\n        public\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        bool isPastMaturity = Storage.slot().userCurrentMaturities[_user] !=\\n            Storage.slot().maturity;\\n\\n        activeOrderIds = new uint48[](\\n            isPastMaturity ? 0 : Storage.slot().activeBorrowOrderIds[_user].length\\n        );\\n        inActiveOrderIds = new uint48[](Storage.slot().activeBorrowOrderIds[_user].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().activeBorrowOrderIds[_user].length; i++) {\\n            uint48 orderId = Storage.slot().activeBorrowOrderIds[_user][i];\\n            MarketOrder memory marketOrder = Storage.slot().orders[orderId];\\n\\n            if (\\n                !Storage\\n                    .slot()\\n                    .borrowOrders[Storage.slot().userCurrentMaturities[_user]]\\n                    .isActiveOrderId(marketOrder.unitPrice, orderId)\\n            ) {\\n                inActiveOrderCount += 1;\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                activeOrderCount += 1;\\n                if (!isPastMaturity) {\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function estimateFilledAmount(ProtocolTypes.Side _side, uint256 _futureValue)\\n        public\\n        view\\n        returns (uint256 amount)\\n    {\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            return\\n                Storage.slot().lendOrders[Storage.slot().maturity].estimateDroppedAmountFromRight(\\n                    _futureValue\\n                );\\n        } else {\\n            return\\n                Storage.slot().borrowOrders[Storage.slot().maturity].estimateDroppedAmountFromLeft(\\n                    _futureValue\\n                );\\n        }\\n    }\\n\\n    function insertOrder(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) public returns (uint48 orderId) {\\n        orderId = _nextOrderId();\\n        Storage.slot().orders[orderId] = MarketOrder(\\n            _side,\\n            _unitPrice,\\n            Storage.slot().maturity,\\n            block.timestamp\\n        );\\n\\n        if (_side == ProtocolTypes.Side.LEND) {\\n            Storage.slot().lendOrders[Storage.slot().maturity].insertOrder(\\n                _unitPrice,\\n                orderId,\\n                _user,\\n                _amount\\n            );\\n            Storage.slot().activeLendOrderIds[_user].push(orderId);\\n        } else if (_side == ProtocolTypes.Side.BORROW) {\\n            Storage.slot().borrowOrders[Storage.slot().maturity].insertOrder(\\n                _unitPrice,\\n                orderId,\\n                _user,\\n                _amount\\n            );\\n            Storage.slot().activeBorrowOrderIds[_user].push(orderId);\\n        }\\n    }\\n\\n    function dropOrders(\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    )\\n        public\\n        returns (\\n            uint256 filledUnitPrice,\\n            uint256 filledFutureValue,\\n            uint48 partiallyFilledOrderId,\\n            address partiallyFilledMaker,\\n            uint256 partiallyFilledAmount,\\n            uint256 partiallyFilledFutureValue,\\n            uint256 remainingAmount\\n        )\\n    {\\n        PartiallyFilledOrder memory partiallyFilledOrder;\\n\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            (filledUnitPrice, , filledFutureValue, remainingAmount, partiallyFilledOrder) = Storage\\n                .slot()\\n                .lendOrders[Storage.slot().maturity]\\n                .dropRight(_amount, _unitPrice, 0);\\n        } else if (_side == ProtocolTypes.Side.LEND) {\\n            (filledUnitPrice, , filledFutureValue, remainingAmount, partiallyFilledOrder) = Storage\\n                .slot()\\n                .borrowOrders[Storage.slot().maturity]\\n                .dropLeft(_amount, _unitPrice, 0);\\n        }\\n\\n        partiallyFilledOrderId = partiallyFilledOrder.orderId;\\n        partiallyFilledMaker = partiallyFilledOrder.maker;\\n        partiallyFilledAmount = partiallyFilledOrder.amount;\\n        partiallyFilledFutureValue = partiallyFilledOrder.futureValue;\\n    }\\n\\n    function dropOrders(ProtocolTypes.Side _side, uint256 _futureValue)\\n        public\\n        returns (\\n            uint256 filledUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledFutureValue,\\n            uint48 partiallyFilledOrderId,\\n            address partiallyFilledMaker,\\n            uint256 partiallyFilledAmount,\\n            uint256 partiallyFilledFutureValue\\n        )\\n    {\\n        PartiallyFilledOrder memory partiallyFilledOrder;\\n\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            (filledUnitPrice, filledAmount, filledFutureValue, , partiallyFilledOrder) = Storage\\n                .slot()\\n                .lendOrders[Storage.slot().maturity]\\n                .dropRight(0, 0, _futureValue);\\n        } else if (_side == ProtocolTypes.Side.LEND) {\\n            (filledUnitPrice, filledAmount, filledFutureValue, , partiallyFilledOrder) = Storage\\n                .slot()\\n                .borrowOrders[Storage.slot().maturity]\\n                .dropLeft(0, 0, _futureValue);\\n        }\\n\\n        partiallyFilledOrderId = partiallyFilledOrder.orderId;\\n        partiallyFilledMaker = partiallyFilledOrder.maker;\\n        partiallyFilledAmount = partiallyFilledOrder.amount;\\n        partiallyFilledFutureValue = partiallyFilledOrder.futureValue;\\n    }\\n\\n    function cleanLendOrders(address _user, uint256 _maturity)\\n        public\\n        returns (\\n            uint48[] memory orderIds,\\n            uint256 activeOrderCount,\\n            uint256 removedFutureValue,\\n            uint256 removedOrderAmount\\n        )\\n    {\\n        (\\n            uint48[] memory activeLendOrderIds,\\n            uint48[] memory inActiveLendOrderIds\\n        ) = getLendOrderIds(_user);\\n\\n        Storage.slot().activeLendOrderIds[_user] = activeLendOrderIds;\\n        activeOrderCount = activeLendOrderIds.length;\\n        uint256 inactiveOrderCount = inActiveLendOrderIds.length;\\n        orderIds = new uint48[](inactiveOrderCount);\\n\\n        for (uint256 i = 0; i < inactiveOrderCount; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveLendOrderIds[i]];\\n            OrderItem memory orderItem = Storage.slot().lendOrders[_maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                inActiveLendOrderIds[i]\\n            );\\n            removedFutureValue += Storage.slot().lendOrders[_maturity].getFutureValue(\\n                marketOrder.unitPrice,\\n                inActiveLendOrderIds[i]\\n            );\\n            removedOrderAmount += orderItem.amount;\\n\\n            orderIds[i] = orderItem.orderId;\\n        }\\n    }\\n\\n    function cleanBorrowOrders(address _user, uint256 _maturity)\\n        public\\n        returns (\\n            uint48[] memory orderIds,\\n            uint256 activeOrderCount,\\n            uint256 removedFutureValue,\\n            uint256 removedOrderAmount\\n        )\\n    {\\n        (\\n            uint48[] memory activeBorrowOrderIds,\\n            uint48[] memory inActiveBorrowOrderIds\\n        ) = getBorrowOrderIds(_user);\\n\\n        Storage.slot().activeBorrowOrderIds[_user] = activeBorrowOrderIds;\\n        activeOrderCount = activeBorrowOrderIds.length;\\n        uint256 inactiveOrderCount = inActiveBorrowOrderIds.length;\\n        orderIds = new uint48[](inactiveOrderCount);\\n\\n        for (uint256 i = 0; i < inactiveOrderCount; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveBorrowOrderIds[i]];\\n            OrderItem memory orderItem = Storage.slot().borrowOrders[_maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                inActiveBorrowOrderIds[i]\\n            );\\n            removedFutureValue += Storage.slot().borrowOrders[_maturity].getFutureValue(\\n                marketOrder.unitPrice,\\n                inActiveBorrowOrderIds[i]\\n            );\\n\\n            removedOrderAmount += orderItem.amount;\\n\\n            orderIds[i] = orderItem.orderId;\\n        }\\n    }\\n\\n    function removeOrder(address _user, uint48 _orderId)\\n        public\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n        uint256 removedAmount;\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            removedAmount = Storage.slot().lendOrders[Storage.slot().maturity].removeOrder(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n            _removeOrderIdFromOrders(Storage.slot().activeLendOrderIds[_user], _orderId);\\n        } else if (marketOrder.side == ProtocolTypes.Side.BORROW) {\\n            removedAmount = Storage.slot().borrowOrders[Storage.slot().maturity].removeOrder(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n            _removeOrderIdFromOrders(Storage.slot().activeBorrowOrderIds[_user], _orderId);\\n        }\\n\\n        return (marketOrder.side, removedAmount, marketOrder.unitPrice);\\n    }\\n\\n    function getOpeningUnitPrice()\\n        public\\n        view\\n        returns (uint256 openingUnitPrice, uint256 totalOffsetAmount)\\n    {\\n        uint256 lendUnitPrice = getHighestLendingUnitPrice();\\n        uint256 borrowUnitPrice = getLowestBorrowingUnitPrice();\\n        uint256 lendAmount = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\\n            lendUnitPrice\\n        );\\n        uint256 borrowAmount = Storage\\n            .slot()\\n            .borrowOrders[Storage.slot().maturity]\\n            .getNodeTotalAmount(borrowUnitPrice);\\n\\n        OrderStatisticsTreeLib.Tree storage borrowOrders = Storage.slot().borrowOrders[\\n            Storage.slot().maturity\\n        ];\\n        OrderStatisticsTreeLib.Tree storage lendOrders = Storage.slot().lendOrders[\\n            Storage.slot().maturity\\n        ];\\n\\n        // return mid price when no lending and borrowing orders overwrap\\n        if (borrowUnitPrice > lendUnitPrice) {\\n            openingUnitPrice = (lendUnitPrice + borrowUnitPrice).div(2);\\n            return (openingUnitPrice, 0);\\n        }\\n\\n        while (borrowUnitPrice <= lendUnitPrice && borrowUnitPrice > 0 && lendUnitPrice > 0) {\\n            if (lendAmount > borrowAmount) {\\n                openingUnitPrice = lendUnitPrice;\\n                totalOffsetAmount += borrowAmount;\\n                lendAmount -= borrowAmount;\\n                borrowUnitPrice = borrowOrders.next(borrowUnitPrice);\\n                borrowAmount = borrowOrders.getNodeTotalAmount(borrowUnitPrice);\\n            } else if (lendAmount < borrowAmount) {\\n                openingUnitPrice = borrowUnitPrice;\\n                totalOffsetAmount += lendAmount;\\n                borrowAmount -= lendAmount;\\n                lendUnitPrice = lendOrders.prev(lendUnitPrice);\\n                lendAmount = lendOrders.getNodeTotalAmount(lendUnitPrice);\\n            } else {\\n                openingUnitPrice = (lendUnitPrice + borrowUnitPrice).div(2);\\n                totalOffsetAmount += lendAmount;\\n                lendUnitPrice = lendOrders.prev(lendUnitPrice);\\n                borrowUnitPrice = borrowOrders.next(borrowUnitPrice);\\n                lendAmount = lendOrders.getNodeTotalAmount(lendUnitPrice);\\n                borrowAmount = borrowOrders.getNodeTotalAmount(borrowUnitPrice);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases and returns id of last order in order book.\\n     * @return The new order id\\n     */\\n    function _nextOrderId() private returns (uint48) {\\n        Storage.slot().lastOrderId++;\\n        return Storage.slot().lastOrderId;\\n    }\\n\\n    function _removeOrderIdFromOrders(uint48[] storage orders, uint256 orderId) private {\\n        uint256 lastOrderIndex = orders.length - 1;\\n        for (uint256 i = 0; i <= lastOrderIndex; i++) {\\n            if (orders[i] == orderId) {\\n                if (i != lastOrderIndex) {\\n                    uint48 lastOrderId = orders[lastOrderIndex];\\n                    orders[i] = lastOrderId;\\n                }\\n\\n                orders.pop();\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb687f07cb58847914334ae0fa8608e8d8acf3803b37c3c15153d5c172bf774a\",\"license\":\"MIT\"},\"contracts/protocol/libraries/math/RoundingUint256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoundingUint256 {\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0);\\n\\n        if ((a * 10) / b - (a / b) * 10 < 5) {\\n            return a / b;\\n        } else {\\n            return (a / b) + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc360f39a82f1a9a7454726e3db802407d305b5e525aa8c3236fe49ca6ca534d\",\"license\":\"MIT\"},\"contracts/protocol/storages/LendingMarketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {OrderStatisticsTreeLib} from \\\"../libraries/OrderStatisticsTreeLib.sol\\\";\\n\\nstruct MarketOrder {\\n    ProtocolTypes.Side side;\\n    uint256 unitPrice; // in basis points\\n    uint256 maturity;\\n    uint256 timestamp;\\n}\\n\\nlibrary LendingMarketStorage {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarket\\\");\\n\\n    struct Storage {\\n        bytes32 ccy;\\n        uint48 lastOrderId;\\n        uint256 openingDate;\\n        uint256 maturity;\\n        // Mapping from maturity to opening unit price\\n        mapping(uint256 => uint256) openingUnitPrices;\\n        // Mapping from maturity to boolean if the market is ready or not\\n        mapping(uint256 => bool) isReady;\\n        // Mapping from user to active lend order ids\\n        mapping(address => uint48[]) activeLendOrderIds;\\n        // Mapping from user to active borrow order ids\\n        mapping(address => uint48[]) activeBorrowOrderIds;\\n        // Mapping from user to current maturity\\n        mapping(address => uint256) userCurrentMaturities;\\n        // Mapping from orderId to order\\n        mapping(uint256 => MarketOrder) orders;\\n        // Mapping from orderId to boolean for pre-order or not\\n        mapping(uint256 => bool) isPreOrder;\\n        // Mapping from maturity to lending orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) lendOrders;\\n        // Mapping from maturity to borrowing orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) borrowOrders;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf1e8a94bddc8815e546bd6261e9580eea0d14e918d4dac8f3e3abf193bcd929\",\"license\":\"MIT\"},\"contracts/protocol/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0x7b05f97661e6dfe1142eec9be3dcf86d1eec55ed4fb1dea4a5859f75a0c84c13\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061012b5760003560e01c8063914551f1116100b7578063e2afb0411161007b578063e2afb04114610393578063e3d904d81461039b578063e54e56ff146103ce578063e7df768c146103d6578063fa6127aa146103e957600080fd5b8063914551f1146102d05780639ca16952146102f0578063bcc012ad14610355578063d3b59f7f14610368578063d866d3551461038057600080fd5b806363978ac8116100fe57806363978ac8146101d45780636a2c42741461023e5780636c5db8431461025b5780637ce219aa1461028a5780638152b173146102af57600080fd5b806330318f1c146101305780634a53967b1461016c5780634bf62d161461019c578063614152b9146101be575b600080fd5b81801561013c57600080fd5b5061015061014b36600461504d565b6103fc565b60405165ffffffffffff90911681526020015b60405180910390f35b81801561017857600080fd5b5061018c61018736600461508f565b610603565b60405161016394939291906150fc565b6101af6101aa36600461512b565b610856565b60405161016393929190615174565b6101c6610b0a565b604051908152602001610163565b8180156101e057600080fd5b506101f46101ef3660046151b7565b610b54565b60408051978852602088019690965265ffffffffffff909416948601949094526001600160a01b039091166060850152608084015260a083019190915260c082015260e001610163565b610246610c5d565b60408051928352602083019190915201610163565b81801561026757600080fd5b5061027b610276366004615200565b610e53565b6040516101639392919061526b565b61029d61029836600461528a565b610ff1565b604051610163969594939291906152a5565b6102c26102bd3660046152e4565b611180565b6040516101639291906152ff565b8180156102dc57600080fd5b5061018c6102eb36600461508f565b6114dc565b8180156102fc57600080fd5b5061031061030b36600461532d565b611722565b6040805197885260208801969096529486019390935265ffffffffffff90911660608501526001600160a01b0316608084015260a083015260c082015260e001610163565b6102c26103633660046152e4565b6117cd565b610370611adc565b6040519015158152602001610163565b6101af61038e36600461512b565b611b13565b6101c6611d4d565b6103ae6103a93660046152e4565b611d5a565b604080519485526020850193909352918301526060820152608001610163565b610370612081565b6103ae6103e43660046152e4565b61209b565b6101c66103f736600461532d565b6123a4565b600061040661243f565b9050604051806080016040528086600181111561042557610425615233565b815260200183815260200161043861249e565b6003015481526020014281525061044d61249e565b65ffffffffffff831660009081526009919091016020526040902081518154829060ff19166001838181111561048557610485615233565b0217905550602082015160018201556040820151600282015560609091015160039091015560008560018111156104be576104be615233565b141561056757610503828286866104d361249e565b600b0160006104e061249e565b6003015481526020019081526020016000206124c290949392919063ffffffff16565b61050b61249e565b6001600160a01b03851660009081526006918201602090815260408220805460018101825590835291206005808304909101805465ffffffffffff808716939094069094026101000a91820292909102199092161790556105fb565b600185600181111561057b5761057b615233565b14156105fb5761059d8282868661059061249e565b600c0160006104e061249e565b6105a561249e565b6001600160a01b03851660009081526007919091016020908152604082208054600181018255908352912060058083049091018054919092066006026101000a65ffffffffffff81810219909216918416021790555b949350505050565b60606000806000806000610616886117cd565b915091508161062361249e565b60070160008a6001600160a01b03166001600160a01b03168152602001908152602001600020908051906020019061065c929190614f24565b50815181519095508067ffffffffffffffff81111561067d5761067d615349565b6040519080825280602002602001820160405280156106a6578160200160208202803683370190505b50965060005b818110156108495760006106be61249e565b60090160008584815181106106d5576106d561535f565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16600181111561072257610722615233565b600181111561073357610733615233565b815260200160018201548152602001600282015481526020016003820154815250509050600061079c82602001518685815181106107735761077361535f565b602002602001015161078361249e565b60008f8152600c91909101602052604090209190612572565b90506107e182602001518685815181106107b8576107b861535f565b60200260200101516107c861249e565b60008f8152600c9190910160205260409020919061262d565b6107eb908961538b565b97508060a00151876107fd919061538b565b965080600001518a84815181106108165761081661535f565b602002602001019065ffffffffffff16908165ffffffffffff168152505050508080610841906153a3565b9150506106ac565b5050505092959194509250565b60608060608367ffffffffffffffff81111561087457610874615349565b60405190808252806020026020018201604052801561089d578160200160208202803683370190505b5092508367ffffffffffffffff8111156108b9576108b9615349565b6040519080825280602002602001820160405280156108e2578160200160208202803683370190505b5091508367ffffffffffffffff8111156108fe576108fe615349565b604051908082528060200260200182016040528015610927578160200160208202803683370190505b509050600061095b61093761249e565b600b01600061094461249e565b600301548152602001908152602001600020612662565b905080846000815181106109715761097161535f565b6020026020010181815250506109b68161098961249e565b600b01600061099661249e565b6003015481526020019081526020016000206126a990919063ffffffff16565b836000815181106109c9576109c961535f565b602002602001018181525050610a0e816109e161249e565b600b0160006109ee61249e565b6003015481526020019081526020016000206126c290919063ffffffff16565b82600081518110610a2157610a2161535f565b602090810291909101015260015b8451811015610b015781610a4257610b01565b610a7b82610a4e61249e565b600b016000610a5b61249e565b6003015481526020019081526020016000206126db90919063ffffffff16565b915081858281518110610a9057610a9061535f565b602002602001018181525050610aa88261098961249e565b848281518110610aba57610aba61535f565b602002602001018181525050610ad2826109e161249e565b838281518110610ae457610ae461535f565b602090810291909101015280610af9816153a3565b915050610a2f565b50509193909250565b600080610b3c610b1861249e565b600c016000610b2561249e565b6003015481526020019081526020016000206127d5565b90508015610b4a5780610b4e565b6127105b91505090565b6000806000806000806000610b67614fd9565b60018b6001811115610b7b57610b7b615233565b1415610bd157610bbf8a8a6000610b9061249e565b600b016000610b9d61249e565b600301548152602001908152602001600020612817909392919063ffffffff16565b939b509099509350909150610c369050565b60008b6001811115610be557610be5615233565b1415610c3657610c298a8a6000610bfa61249e565b600c016000610c0761249e565b600301548152602001908152602001600020612b55909392919063ffffffff16565b939b509099509350909150505b805160208201516040830151606090930151999d989c50909a509850969590945092505050565b6000806000610c6a611d4d565b90506000610c76610b0a565b90506000610c868361098961249e565b90506000610ca383610c9661249e565b600c01600061099661249e565b90506000610caf61249e565b600c016000610cbc61249e565b60030154815260200190815260200160002090506000610cda61249e565b600b016000610ce761249e565b600301548152602001908152602001600020905085851115610d2757610d186002610d12878961538b565b90612e97565b98600098509650505050505050565b858511158015610d375750600085115b8015610d435750600086115b15610e495782841115610d96578597508287610d5f919061538b565b9650610d6b83856153be565b9350610d778286612f01565b60008181526001840160205260409020600501549095505b9250610d27565b82841015610de3578497508387610dad919061538b565b9650610db984846153be565b9250610dc581876126db565b60008181526001830160205260409020600501549096509350610d27565b610df26002610d12878961538b565b9750610dfe848861538b565b9650610e0a81876126db565b9550610e168286612f01565b60008781526001830160205260409020600501549095506000868152600184016020526040902060050154909450610d8f565b5050505050509091565b600080600080610e6161249e565b65ffffffffffff861660009081526009919091016020526040908190208151608081019092528054829060ff166001811115610e9f57610e9f615233565b6001811115610eb057610eb0615233565b81526001820154602082015260028201546040820152600390910154606090910152905060008082516001811115610eea57610eea615233565b1415610f6b57610f2f826020015187610f0161249e565b600b016000610f0e61249e565b600301548152602001908152602001600020612ffb9092919063ffffffff16565b9050610f66610f3c61249e565b6001600160a01b03891660009081526006919091016020526040902065ffffffffffff8816613014565b610fdb565b600182516001811115610f8057610f80615233565b1415610fdb57610fa4826020015187610f9761249e565b600c016000610f0e61249e565b9050610fdb610fb161249e565b6001600160a01b03891660009081526007919091016020526040902065ffffffffffff8816613014565b8151602090920151919450925090509250925092565b600080600080600080600061100461249e565b65ffffffffffff891660009081526009919091016020526040908190208151608081019092528054829060ff16600181111561104257611042615233565b600181111561105357611053615233565b8152602001600182015481526020016002820154815260200160038201548152505090506110af6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b6000825160018111156110c4576110c4615233565b14156110ff576110f882602001518a6110db61249e565b6040808701516000908152600b9290920160205290209190612572565b9050611130565b61112d82602001518a61111061249e565b6040808701516000908152600c9290920160205290209190612572565b90505b60608101516001600160a01b0316156111745781600001518260200151836040015183606001518460a0015185608001519750975097509750975097505050611177565b50505b91939550919395565b606080600080600061119061249e565b6003015461119c61249e565b6001600160a01b0388166000908152600891909101602052604090205414159050806111ec576111ca61249e565b6001600160a01b038716600090815260069190910160205260409020546111ef565b60005b67ffffffffffffffff81111561120757611207615349565b604051908082528060200260200182016040528015611230578160200160208202803683370190505b50945061123b61249e565b6001600160a01b0387166000908152600691909101602052604090205467ffffffffffffffff81111561127057611270615349565b604051908082528060200260200182016040528015611299578160200160208202803683370190505b50935060005b6112a761249e565b6001600160a01b038816600090815260069190910160205260409020548110156114d35760006112d561249e565b6001600160a01b0389166000908152600691909101602052604090208054839081106113035761130361535f565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff169050600061133761249e565b65ffffffffffff831660009081526009919091016020526040908190208151608081019092528054829060ff16600181111561137557611375615233565b600181111561138657611386615233565b81526020016001820154815260200160028201548152602001600382015481525050905061140c8160200151836113bb61249e565b600b0160006113c861249e565b60080160008f6001600160a01b03166001600160a01b0316815260200190815260200160002054815260200190815260200160002061316a9092919063ffffffff16565b6114695761141b60018661538b565b9450818761142988866153be565b815181106114395761143961535f565b602002602001019065ffffffffffff16908165ffffffffffff16815250508361146457600188510388525b6114be565b836114b65761147960018761538b565b9550818861148787866153be565b815181106114975761149761535f565b602002602001019065ffffffffffff16908165ffffffffffff16815250505b600187510387525b505080806114cb906153a3565b91505061129f565b50505050915091565b606060008060008060006114ef88611180565b91509150816114fc61249e565b60060160008a6001600160a01b03166001600160a01b031681526020019081526020016000209080519060200190611535929190614f24565b50815181519095508067ffffffffffffffff81111561155657611556615349565b60405190808252806020026020018201604052801561157f578160200160208202803683370190505b50965060005b8181101561084957600061159761249e565b60090160008584815181106115ae576115ae61535f565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff1660018111156115fb576115fb615233565b600181111561160c5761160c615233565b8152602001600182015481526020016002820154815260200160038201548152505090506000611675826020015186858151811061164c5761164c61535f565b602002602001015161165c61249e565b60008f8152600b91909101602052604090209190612572565b90506116ba82602001518685815181106116915761169161535f565b60200260200101516116a161249e565b60008f8152600b9190910160205260409020919061262d565b6116c4908961538b565b97508060a00151876116d6919061538b565b965080600001518a84815181106116ef576116ef61535f565b602002602001019065ffffffffffff16908165ffffffffffff16815250505050808061171a906153a3565b915050611585565b6000806000806000806000611735614fd9565b60018a600181111561174957611749615233565b14156117705761175e6000808b610b9061249e565b939b5091995097509091506117a69050565b60008a600181111561178457611784615233565b14156117a6576117996000808b610bfa61249e565b939b509199509750909150505b805160208201516040830151606090930151999c989b509699509795969095945092505050565b60608060008060006117dd61249e565b600301546117e961249e565b6001600160a01b0388166000908152600891909101602052604090205414159050806118395761181761249e565b6001600160a01b0387166000908152600791909101602052604090205461183c565b60005b67ffffffffffffffff81111561185457611854615349565b60405190808252806020026020018201604052801561187d578160200160208202803683370190505b50945061188861249e565b6001600160a01b0387166000908152600791909101602052604090205467ffffffffffffffff8111156118bd576118bd615349565b6040519080825280602002602001820160405280156118e6578160200160208202803683370190505b50935060005b6118f461249e565b6001600160a01b038816600090815260079190910160205260409020548110156114d357600061192261249e565b6001600160a01b0389166000908152600791909101602052604090208054839081106119505761195061535f565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff169050600061198461249e565b65ffffffffffff831660009081526009919091016020526040908190208151608081019092528054829060ff1660018111156119c2576119c2615233565b60018111156119d3576119d3615233565b815260200160018201548152602001600282015481526020016003820154815250509050611a15816020015183611a0861249e565b600c0160006113c861249e565b611a7257611a2460018661538b565b94508187611a3288866153be565b81518110611a4257611a4261535f565b602002602001019065ffffffffffff16908165ffffffffffff168152505083611a6d57600188510388525b611ac7565b611a7d60018761538b565b955083611abf578188611a9087866153be565b81518110611aa057611aa061535f565b602002602001019065ffffffffffff16908165ffffffffffff16815250505b600187510387525b50508080611ad4906153a3565b9150506118ec565b6000611b0e611ae961249e565b600b016000611af661249e565b60030154815260200190815260200160002054151590565b905090565b60608060608367ffffffffffffffff811115611b3157611b31615349565b604051908082528060200260200182016040528015611b5a578160200160208202803683370190505b5092508367ffffffffffffffff811115611b7657611b76615349565b604051908082528060200260200182016040528015611b9f578160200160208202803683370190505b5091508367ffffffffffffffff811115611bbb57611bbb615349565b604051908082528060200260200182016040528015611be4578160200160208202803683370190505b5090506000611bf4610b1861249e565b90508084600081518110611c0a57611c0a61535f565b602002602001018181525050611c2281610c9661249e565b83600081518110611c3557611c3561535f565b602002602001018181525050611c5a81611c4d61249e565b600c0160006109ee61249e565b82600081518110611c6d57611c6d61535f565b602090810291909101015260015b8451811015610b015781611c8e57610b01565b611cc782611c9a61249e565b600c016000611ca761249e565b600301548152602001908152602001600020612f0190919063ffffffff16565b915081858281518110611cdc57611cdc61535f565b602002602001018181525050611cf482610c9661249e565b848281518110611d0657611d0661535f565b602002602001018181525050611d1e82611c4d61249e565b838281518110611d3057611d3061535f565b602090810291909101015280611d45816153a3565b915050611c7b565b6000611b0e61093761249e565b600080600080600080611d6c876117cd565b9150915060005b8251811015611ea2576000611d8661249e565b6009016000858481518110611d9d57611d9d61535f565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff166001811115611dea57611dea615233565b6001811115611dfb57611dfb615233565b8152602001600182015481526020016002820154815260200160038201548152505090506000611e798260200151868581518110611e3b57611e3b61535f565b6020026020010151611e4b61249e565b600c016000611e5861249e565b6003015481526020019081526020016000206125729092919063ffffffff16565b90508060a0015189611e8b919061538b565b985050508080611e9a906153a3565b915050611d73565b50611eab61249e565b6001600160a01b0388166000908152600891909101602052604081205493505b8151811015612077576000611ede61249e565b6009016000848481518110611ef557611ef561535f565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff166001811115611f4257611f42615233565b6001811115611f5357611f53615233565b8152602001600182015481526020016002820154815260200160038201548152505090506000611fa38260200151858581518110611f9357611f9361535f565b602002602001015161111061249e565b90508060a0015188611fb5919061538b565b6020830151909850611fc561249e565b600a016000868681518110611fdc57611fdc61535f565b60209081029190910181015165ffffffffffff1682528101919091526040016000205460ff1615156001141561203f57600061201661249e565b6004016000856040015181526020019081526020016000205490508181111561203d578091505b505b612055816127108460a00151610d1291906153d5565b61205f908961538b565b9750505050808061206f906153a3565b915050611ecb565b5050509193509193565b6000611b0e61208e61249e565b600c016000611af661249e565b6000806000806000806120ad87611180565b915091506120b961249e565b6001600160a01b0388166000908152600891909101602052604081205493505b82518110156121e75760006120ec61249e565b60090160008584815181106121035761210361535f565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16600181111561215057612150615233565b600181111561216157612161615233565b81526020016001820154815260200160028201548152602001600382015481525050905060006121be82602001518685815181106121a1576121a161535f565b60200260200101516121b161249e565b600b016000611e5861249e565b90508060a00151896121d0919061538b565b9850505080806121df906153a3565b9150506120d9565b5060005b81518110156120775760006121fe61249e565b60090160008484815181106122155761221561535f565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16600181111561226257612262615233565b600181111561227357612273615233565b815260018201546020820152600282015460408201526003909101546060909101529050846122a457806040015194505b60006122d082602001518585815181106122c0576122c061535f565b60200260200101516110db61249e565b90508060a00151886122e2919061538b565b60208301519098506122f261249e565b600a0160008686815181106123095761230961535f565b60209081029190910181015165ffffffffffff1682528101919091526040016000205460ff1615156001141561236c57600061234361249e565b6004016000856040015181526020019081526020016000205490508181101561236a578091505b505b612382816127108460a00151610d1291906153d5565b61238c908961538b565b9750505050808061239c906153a3565b9150506121eb565b600060018360018111156123ba576123ba615233565b1415612400576123f9826123cc61249e565b600b0160006123d961249e565b60030154815260200190815260200160002061318890919063ffffffff16565b9050612439565b6123f98261240c61249e565b600c01600061241961249e565b60030154815260200190815260200160002061324490919063ffffffff16565b92915050565b600061244961249e565b600101805465ffffffffffff16906000612462836153f4565b91906101000a81548165ffffffffffff021916908365ffffffffffff1602179055505061248d61249e565b6001015465ffffffffffff16919050565b7ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0a90565b6000811161250d5760405162461bcd60e51b8152602060048201526013602482015272125b9cdd59999a58da595b9d08185b5bdd5b9d606a1b60448201526064015b60405180910390fd5b6127108411156125545760405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742076616c756560701b6044820152606401612504565b61255e85856132f8565b61256b85858585856134c1565b5050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915250600082815260018085016020908152604080842065ffffffffffff80871686526006909101835293819020815160c08101835281548087168252600160301b8104871694820194909452600160601b90930490941690820152908201546001600160a01b031660608201526002820154608082015260039091015460a08201525b9392505050565b6000828152600184016020908152604080832065ffffffffffff851684526006019091528120600301546105fb908490613541565b80548061267157506000919050565b5b6000818152600183016020526040902060020154156126a4576000908152600182016020526040902060020154612672565b919050565b6000908152600191909101602052604090206005015490565b6000908152600191909101602052604090206004015490565b60008161274b5760405162461bcd60e51b815260206004820152603860248201527f4f7264657253746174697374696373547265652834303229202d205374617274604482015277696e672076616c75652063616e6e6f74206265207a65726f60401b6064820152608401612504565b6000828152600180850160205260409091200154156127835760008281526001808501602052604090912001546123f9908490613553565b5060008181526001830160205260409020545b80158015906127b75750600081815260018085016020526040909120015482145b15612439576000818152600184016020526040902054909150612796565b8054806127e457506000919050565b5b6000818152600180840160205260409091200154156126a45760009081526001808301602052604090912001546127e5565b600080600080612825614fd9565b60006128308a612662565b90506000808983101580612842575089155b6128895760405162461bcd60e51b8152602060048201526018602482015277496e73756666696369656e74206c696d69742076616c756560401b6044820152606401612504565b6000805b8c83108061289957508c155b80156128ac57508a8810806128ac57508a155b80156128b757508415155b80156128cb57508b851015806128cb57508b155b1561298457600085815260018f01602052604090206005015493506128f0848461538b565b92508499506128ff8585613541565b612909908961538b565b9750612915848a61538b565b98508c8311801561292557508c15155b15612947576129348d846153be565b91506129408583613541565b9050612973565b8a8811801561295557508a15155b15612973576129648b896153be565b90506129708582613590565b91505b61297d8e866126db565b945061288d565b811561299757612994828a6153be565b98505b80156129aa576129a781896153be565b97505b8215612a9d5781156129d4578994506129cd8e866129c885886153be565b6135a2565b95506129f9565b80156129f9578994506129f68e866129ec8885613590565b6129c890886153be565b95505b600085815260018f01602052604081206002810191909155548515612a9b575b8015612a9b5785811015612a8557808f60010160008881526020019081526020016000206000015414612a8157808f600101600088815260200190815260200160002060000181905550858f6001016000838152602001908152602001600020600201819055505b8095505b600090815260018f016020526040902054612a19565b505b828d1115612ab257612aaf838e6153be565b96505b6000612abd8f6127d5565b90508a81148015612ae657508e6001016000828152602001908152602001600020600501546000145b15612af45760008f55612b3b565b8e548b1080612b0e57508e548b148015612b0e5750838a10155b15612b3b57858f6000018190555060008f6001016000888152602001908152602001600020600001819055505b612b448f6138d8565b505050505050945094509450945094565b600080600080612b63614fd9565b6000612b6e8a6127d5565b90506000808983111580612b80575089155b612bc75760405162461bcd60e51b8152602060048201526018602482015277496e73756666696369656e74206c696d69742076616c756560401b6044820152606401612504565b6000805b8c831080612bd757508c155b8015612bea57508a881080612bea57508a155b8015612bf557508415155b8015612c0957508b85111580612c0957508b155b15612cc257600085815260018f0160205260409020600501549350612c2e848461538b565b9250849950612c3d8585613541565b612c47908961538b565b9750612c53848a61538b565b98508c83118015612c6357508c15155b15612c8557612c728d846153be565b9150612c7e8583613541565b9050612cb1565b8a88118015612c9357508a15155b15612cb157612ca28b896153be565b9050612cae8582613590565b91505b612cbb8e86612f01565b9450612bcb565b8115612cd557612cd2828a6153be565b98505b8015612ce857612ce581896153be565b97505b8215612df0578115612d0d57899450612d068e866129c885886153be565b9550612d28565b8015612d2857899450612d258e866129ec8885613590565b95505b60008e60010160008781526020019081526020016000206001018190555060008e600101600087815260200190815260200160002060000154905060008614612dee575b8015612dee5785811115612dd857808f60010160008881526020019081526020016000206000015414612dd457808f600101600088815260200190815260200160002060000181905550858f6001016000838152602001908152602001600020600101819055505b8095505b600090815260018f016020526040902054612d6c565b505b828d1115612e0557612e02838e6153be565b96505b6000612e108f612662565b90508a81148015612e3957508e6001016000828152602001908152602001600020600501546000145b15612e475760008f55612e8e565b8e548b1180612e6157508e548b148015612e615750838a10155b15612e8e57858f6000018190555060008f6001016000888152602001908152602001600020600001819055505b612b448f6139a7565b6000808211612ea557600080fd5b6005612eb1838561541a565b612ebc90600a6153d5565b83612ec886600a6153d5565b612ed2919061541a565b612edc91906153be565b1015612eec576123f9828461541a565b612ef6828461541a565b6123f990600161538b565b600081612f715760405162461bcd60e51b815260206004820152603860248201527f4f7264657253746174697374696373547265652834303129202d205374617274604482015277696e672076616c75652063616e6e6f74206265207a65726f60401b6064820152608401612504565b600082815260018401602052604090206002015415612fa95760008281526001840160205260409020600201546123f9908490613a36565b5060008181526001830160205260409020545b8015801590612fdd5750600081815260018401602052604090206002015482145b15612439576000818152600184016020526040902054909150612fbc565b6000613008848484613a6e565b90506126268484613cda565b8154600090613025906001906153be565b905060005b81811161316457828482815481106130445761304461535f565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff1614156131525781811461310b5760008483815481106130955761309561535f565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff169050808583815481106130d2576130d261535f565b90600052602060002090600591828204019190066006026101000a81548165ffffffffffff021916908365ffffffffffff160217905550505b8380548061311b5761311b61543c565b60019003818190600052602060002090600591828204019190066006026101000a81549065ffffffffffff02191690559055613164565b8061315c816153a3565b91505061302a565b50505050565b6000613177848484613f97565b80156105fb57506105fb84846140e0565b60008061319484612662565b905060008092505b83811080156131aa57508115155b1561323c576000828152600186016020526040812060050154906131ce8483613541565b90506131da818461538b565b92508583111561321c5760006131f087856153be565b6131fa90836153be565b905061320a82610d1283866153d5565b613214908761538b565b955050613229565b613226828661538b565b94505b61323387856126db565b9350505061319c565b505092915050565b600080613250846127d5565b905060008092505b838110801561326657508115155b1561323c5760008281526001860160205260408120600501549061328a8483613541565b9050613296818461538b565b9250858311156132d85760006132ac87856153be565b6132b690836153be565b90506132c682610d1283866153d5565b6132d0908761538b565b9550506132e5565b6132e2828661538b565b94505b6132ef8785612f01565b93505050613258565b8061336b5760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303529202d2056616c756560448201527f20746f20696e736572742063616e6e6f74206265207a65726f000000000000006064820152608401612504565b81546000905b80156133cf578091508083101561339b576000908152600180850160205260409091200154613371565b808311156133bc576000908152600184016020526040902060020154613371565b808314156133ca5750505050565b613371565b600083815260018501602052604090208454158061341e57506000838152600180870160205260409091200154841480159061341e575060008381526001860160205260409020600201548414155b1561344c57600060048201819055600582018190556134409086908690614199565b61344c858560006141d1565b82815560006001808301829055600283019190915560038201805460ff191690911790558261347d578385556134b7565b828410156134a057600083815260018087016020526040909120018490556134b7565b600083815260018601602052604090206002018490555b61256b8585614211565b600084815260018601602052604090206003810154610100900465ffffffffffff166134f9576134f4868686868661447c565b613539565b600061350887878787876144ec565b905061352c87878460030160079054906101000a900465ffffffffffff168461468b565b6135378787836141d1565b505b505050505050565b600061262683610d12612710856153d5565b60005b60008281526001840160205260409020600201541561358a5760009182526001830160205260409091206002015490613556565b50919050565b6000612626612710610d1285856153d5565b6135aa614fd9565b6000838152600185016020526040902060058101548311156136345760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834313029202d20416d6f756e60448201527f7420746f2066696c6c20697320696e73756666696369656e74000000000000006064820152608401612504565b60038082015465ffffffffffff61010090910481166000818152600685016020908152604091829020825160c08101845281548087168252600160301b8104871693820193909352600160601b9092049094169181019190915260018301546001600160a01b0316606082015260028301546080820152919092015460a082015284915b65ffffffffffff8116158015906136ce57508215155b156138305765ffffffffffff8082166000908152600686016020908152604091829020825160c08101845281548086168252600160301b8104861693820193909352600160601b9092049093169181019190915260018201546001600160a01b031660608201526002820154608082015260039091015460a0820181905290925083106137725760a082015161376490846153be565b9250816020015190506136b8565b6040518060800160405280836000015165ffffffffffff16815260200183606001516001600160a01b031681526020018481526020016137b28986613541565b905260409283015165ffffffffffff908116600090815260068701602090815290859020855160c08101875281548085168252600160301b8104851693820193909352600160601b9092049092169481019490945260018101546001600160a01b03166060850152600281015460808501526003015460a084015294505b815165ffffffffffff16156138505761384e88888460000151614700565b505b6040850151156138cd57604080860151600089815260018b016020908152838220895165ffffffffffff16835260060190529182206003018054919290916138999084906153be565b9091555050604080860151600089815260018b016020529182206005018054919290916138c79084906153be565b90915550505b505050509392505050565b8054600090815260018201602052604090206002015415801561390f57508054600090815260018083016020526040909120015415155b156139685780546000908152600180830160205260408083209091015482529020600201541561395a578054600090815260018083016020526040909120015461395a9082906148e6565b6139688182600001546149be565b8054600090815260018201602052604090206003015460ff16156139a457805460009081526001820160205260409020600301805460ff191690555b50565b805460009081526001808301602052604090912001541580156139de57508054600090815260018201602052604090206002015415155b15613968578054600090815260018083016020526040808320600201548352909120015415613a285780546000908152600182016020526040902060020154613a289082906149be565b6139688182600001546148e6565b60005b60008281526001808501602052604090912001541561358a576000918252600180840160205260409092209091015490613a39565b6000613a7b84848461316a565b613a975760405162461bcd60e51b815260040161250490615452565b50600082815260018085016020908152604080842065ffffffffffff80871680875260068301855295839020835160c08101855281548084168252600160301b8104841696820196909652600160601b909504821693850193909352938201546001600160a01b031660608401526002820154608084015260039182015460a084018190529181015491949093610100909204909116148015613b4f5750600382015465ffffffffffff858116600160381b90920416145b15613b7157613b6086866000614199565b613b6c868660006141d1565b613c43565b600382015465ffffffffffff858116610100909204161415613bcf57613b9c86868360200151614199565b60208082015165ffffffffffff1660009081526006840190915260409020805465ffffffffffff60601b19169055613c43565b600382015465ffffffffffff858116600160381b909204161415613c2f57613bfc868683604001516141d1565b60408082015165ffffffffffff166000908152600684016020522080546bffffffffffff00000000000019169055613c43565b613c4386868360400151846020015161468b565b805165ffffffffffff1660009081526006830160205260408120805471ffffffffffffffffffffffffffffffffffff19168155600180820180546001600160a01b031916905560028201839055600390910182905560048401805491929091613cad9084906153be565b909155505060a0810151600583018054600090613ccb9084906153be565b90915550929695505050505050565b80613d4d5760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303729202d2056616c756560448201527f20746f2064656c6574652063616e6e6f74206265207a65726f000000000000006064820152608401612504565b600081815260018301602052604081206004810154909190819061256b5760008481526001808701602052604090912001541580613d9c57506000848152600186016020526040902060020154155b15613da8575082613df0565b5060008381526001850160205260409020600201545b600081815260018087016020526040909120015415613df0576000908152600180860160205260409091200154613dbe565b600081815260018087016020526040909120015415613e245760008181526001808701602052604090912001549150613e3b565b600081815260018601602052604090206002015491505b60008181526001860160205260408082205484835291208190558015613eac576000818152600180880160205260409091200154821415613e915760008181526001808801602052604090912001839055613eb0565b60008181526001870160205260409020600201839055613eb0565b8286555b600082815260018701602052604090206003015460ff1615858314613f3a57613eda878488614a93565b60008681526001888101602052604080832080830154878552828520938401819055845281842087905560028082015490840181905584529083208690556003908101549286905201805460ff191660ff90921615159190911790559194915b8015613f4a57613f4a8785614b0a565b50506000818152600180870160205260408220828155908101829055600281018290556003810180546cffffffffffffffffffffffffff1916905560048101829055600501555050505050565b600082815260018085016020908152604080842065ffffffffffff808716808752600683018552838720845160c0810186528154808516808352600160301b8204861698830198909852600160601b900490931694830194909452948301546001600160a01b031660608201526002830154608082015260039092015460a0830152859390921461402e5760009350505050612626565b5b604081015165ffffffffffff16156140c15760409081015165ffffffffffff808216600090815260068501602090815290849020845160c08101865281548085168252600160301b8104851693820193909352600160601b9092049092169381019390935260018101546001600160a01b03166060840152600281015460808401526003015460a0830152925061402f565b5060030154610100900465ffffffffffff908116911614949350505050565b6000816140ef57506000612439565b825482141561410057506001612439565b815b60008181526001850160205260409020541561418f5760008181526001808601602052604080832054808452922001548214801590614154575060008181526001860160205260409020600201548214155b1561416457600092505050612439565b845481141561417857600192505050612439565b506000908152600184016020526040902054614102565b5060009392505050565b6000918252600190920160205260409020600301805465ffffffffffff9092166101000266ffffffffffff0019909216919091179055565b6000918252600190920160205260409020600301805465ffffffffffff909216600160381b026cffffffffffff0000000000000019909216919091179055565b60005b8254821480159061423e5750600082815260018401602052604080822054825290206003015460ff165b1561445a5760008281526001808501602052604080832054808452818420548452922001548114156143615760008181526001850160205260408082205482528082206002015480835291206003015490925060ff16156142e7576000818152600180860160205260408083206003808201805460ff19908116909155878652838620820180548216905582548652928520018054909216909217905590829052549250614454565b600081815260018501602052604090206002015483141561430f5780925061430f84846148e6565b50600082815260018085016020526040808320548084528184206003808201805460ff1990811690915582548752938620018054909316909317909155918290525461435c9085906149be565b614454565b6000818152600180860160205260408083205483528083209091015480835291206003015490925060ff16156143df576000818152600180860160205260408083206003808201805460ff19908116909155878652838620820180548216905582548652928520018054909216909217905590829052549250614454565b60008181526001808601602052604090912001548314156144075780925061440784846149be565b50600082815260018085016020526040808320548084528184206003808201805460ff199081169091558254875293862001805490931690931790915591829052546144549085906148e6565b50614214565b505080546000908152600190910160205260409020600301805460ff19169055565b600084815260018601602052604081209061449a87878787876144ec565b90506144be8787838560030160019054906101000a900465ffffffffffff1661468b565b6144c9878783614199565b6003820154600160381b900465ffffffffffff16613537576135378787836141d1565b6000848152600186016020908152604080832065ffffffffffff87168452600681019092528220600201541561457f5760405162461bcd60e51b815260206004820152603260248201527f4f7264657253746174697374696373547265652834303929202d204f726465726044820152711034b21030b63932b0b23c9032bc34b9ba1760711b6064820152608401612504565b6001816004016000828254614594919061538b565b92505081905550828160050160008282546145af919061538b565b90915550506040805160c08101825265ffffffffffff808816808352600060208085018281528587018381526001600160a01b03808d16606089019081524260808a0190815260a08a018e81529787526006909b019094529790932095518654915193518616600160601b0265ffffffffffff60601b19948716600160301b026bffffffffffffffffffffffff199093169682169690961791909117929092169390931784559151600184018054919095166001600160a01b031990911617909355925160028201559051600390910155905095945050505050565b60009283526001939093016020908152604080842065ffffffffffff938416808652600690910190925280842080546bffffffffffff0000000000001916600160301b9490961693840295909517909455908252919020805465ffffffffffff60601b1916600160601b909202919091179055565b600061470d84848461316a565b6147295760405162461bcd60e51b815260040161250490615452565b50600082815260018085016020908152604080842065ffffffffffff808716865260068201808552838720845160c08101865281548085168252600160301b8104851682890152600160601b9004841681870152818801546001600160a01b031660608201526002820154608082015260039182015460a08201819052828601546101009004909416808a529290965293909620909201549194909390915b8665ffffffffffff16831461482c57600092835260068501602052604090922054600160301b900465ffffffffffff169181614803816153a3565b600085815260068801602052604090206003015490935061482591508261538b565b90506147c8565b600385015465ffffffffffff888116600160381b9092041614156148675761485689896000614199565b614862898960006141d1565b6148a5565b61487689898660200151614199565b60208085015165ffffffffffff1660009081526006870190915260409020805465ffffffffffff60601b191690555b818560040160008282546148b991906153be565b92505081905550808560050160008282546148d491906153be565b90915550959998505050505050505050565b60008181526001808401602052604080832060028101805491548286529285209093015493859052918390559091801561492e57600081815260018601602052604090208490555b600083815260018601602052604090208290558161494e5782855561499b565b6000828152600180870160205260409091200154841415614984576000828152600180870160205260409091200183905561499b565b600082815260018601602052604090206002018390555b505060008181526001938401602052604080822090940183905591825291902055565b60008181526001808401602052604080832091820180549254838552918420600201549385905283905590918015614a0457600081815260018601602052604090208490555b6000838152600186016020526040902082905581614a2457828555614a71565b6000828152600186016020526040902060020154841415614a5a5760008281526001860160205260409020600201839055614a71565b600082815260018087016020526040909120018390555b5050600081815260019093016020526040808420600201839055918352912055565b600081815260018401602052604080822054848352912081905580614aba57828455613164565b6000818152600180860160205260409091200154821415614af05760008181526001808601602052604090912001839055613164565b600090815260019390930160205250604090912060020155565b60005b82548214801590614b325750600082815260018401602052604090206003015460ff16155b15614f05576000828152600180850160205260408083205480845292200154831415614d2e5760008181526001850160205260408082206002015480835291206003015490925060ff1615614bd6576000828152600180860160205260408083206003908101805460ff19908116909155858552919093209092018054909216179055614bbf84826148e6565b600081815260018501602052604090206002015491505b60008281526001808601602052604080832090910154825290206003015460ff16158015614c215750600082815260018501602052604080822060020154825290206003015460ff16155b15614c4e57600082815260018581016020526040909120600301805460ff19169091179055915081614eff565b600082815260018501602052604080822060020154825290206003015460ff16614ccb576000828152600180860160205260408083208083015484529083206003908101805460ff1990811690915593869052018054909216179055614cb484836149be565b600081815260018501602052604090206002015491505b600081815260018501602052604080822060039081018054868552838520808401805460ff909316151560ff199384161790558254821690925560029091015484529190922090910180549091169055614d2584826148e6565b83549250614eff565b6000818152600180860160205260408083209091015480835291206003015490925060ff1615614dad576000828152600180860160205260408083206003908101805460ff19908116909155858552919093209092018054909216179055614d9684826149be565b600081815260018086016020526040909120015491505b600082815260018501602052604080822060020154825290206003015460ff16158015614df8575060008281526001808601602052604080832090910154825290206003015460ff16155b15614e2557600082815260018581016020526040909120600301805460ff19169091179055915081614eff565b60008281526001808601602052604080832090910154825290206003015460ff16614ea457600082815260018086016020526040808320600281015484529083206003908101805460ff1990811690915593869052018054909216179055614e8d84836148e6565b600081815260018086016020526040909120015491505b60008181526001808601602052604080832060039081018054878652838620808401805460ff909316151560ff19938416179055825482169092559301548452922090910180549091169055614efa84826149be565b835492505b50614b0d565b506000908152600190910160205260409020600301805460ff19169055565b82805482825590600052602060002090600401600590048101928215614fc95791602002820160005b83821115614f9557835183826101000a81548165ffffffffffff021916908365ffffffffffff1602179055509260200192600601602081600501049283019260010302614f4d565b8015614fc75782816101000a81549065ffffffffffff0219169055600601602081600501049283019260010302614f95565b505b50614fd5929150615012565b5090565b6040518060800160405280600065ffffffffffff16815260200160006001600160a01b0316815260200160008152602001600081525090565b5b80821115614fd55760008155600101615013565b8035600281106126a457600080fd5b80356001600160a01b03811681146126a457600080fd5b6000806000806080858703121561506357600080fd5b61506c85615027565b935061507a60208601615036565b93969395505050506040820135916060013590565b600080604083850312156150a257600080fd5b6150ab83615036565b946020939093013593505050565b600081518084526020808501945080840160005b838110156150f157815165ffffffffffff16875295820195908201906001016150cd565b509495945050505050565b60808152600061510f60808301876150b9565b6020830195909552506040810192909252606090910152919050565b60006020828403121561513d57600080fd5b5035919050565b600081518084526020808501945080840160005b838110156150f157815187529582019590820190600101615158565b6060815260006151876060830186615144565b82810360208401526151998186615144565b905082810360408401526151ad8185615144565b9695505050505050565b6000806000606084860312156151cc57600080fd5b6151d584615027565b95602085013595506040909401359392505050565b803565ffffffffffff811681146126a457600080fd5b6000806040838503121561521357600080fd5b61521c83615036565b915061522a602084016151ea565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b6002811061526757634e487b7160e01b600052602160045260246000fd5b9052565b606081016152798286615249565b602082019390935260400152919050565b60006020828403121561529c57600080fd5b612626826151ea565b60c081016152b38289615249565b602082019690965260408101949094526001600160a01b03929092166060840152608083015260a090910152919050565b6000602082840312156152f657600080fd5b61262682615036565b60408152600061531260408301856150b9565b828103602084015261532481856150b9565b95945050505050565b6000806040838503121561534057600080fd5b6150ab83615027565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561539e5761539e615375565b500190565b60006000198214156153b7576153b7615375565b5060010190565b6000828210156153d0576153d0615375565b500390565b60008160001904831182151516156153ef576153ef615375565b500290565b600065ffffffffffff8083168181141561541057615410615375565b6001019392505050565b60008261543757634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603160045260246000fd5b60208082526030908201527f4f7264657253746174697374696373547265652834313029202d204f7264657260408201526f103237b2b9903737ba1032bc34b9ba1760811b60608201526080019056fea2646970667358221220ad53d68a727e1df467c2b023f6af91e2b965aa5daec572326ab304ab854ae49764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}