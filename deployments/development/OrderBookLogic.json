{
  "address": "0xEBFe83e5CB9173465636dD0A34443B677C61Df3a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "ProtocolTypes.Side"
        },
        {
          "internalType": "uint256",
          "name": "_futureValue",
          "type": "uint256"
        }
      ],
      "name": "estimateFilledAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getActiveBorrowOrderIds",
      "outputs": [
        {
          "internalType": "uint48[]",
          "name": "activeOrderIds",
          "type": "uint48[]"
        },
        {
          "internalType": "uint48[]",
          "name": "inActiveOrderIds",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getActiveLendOrderIds",
      "outputs": [
        {
          "internalType": "uint48[]",
          "name": "activeOrderIds",
          "type": "uint48[]"
        },
        {
          "internalType": "uint48[]",
          "name": "inActiveOrderIds",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getBorrowOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHighestLendingUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getLendOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLowestBorrowingUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint48",
          "name": "_orderId",
          "type": "uint48"
        }
      ],
      "name": "getOrder",
      "outputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "ProtocolTypes.Side"
        },
        {
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalAmountFromBorrowOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalAmountFromLendOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x470baee824b9ea55b02758230ff629093eb84b9d962318c0a4d47d7bf4ad5d79",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0xEBFe83e5CB9173465636dD0A34443B677C61Df3a",
    "transactionIndex": 35,
    "gasUsed": "4380597",
    "logsBloom": "0x
    "blockHash": "0xa13652e11abf6d4de8c99754c9ea25498d64e16f5432ef1d6ad643d646d49c9a",
    "transactionHash": "0x470baee824b9ea55b02758230ff629093eb84b9d962318c0a4d47d7bf4ad5d79",
    "logs": [],
    "blockNumber": 8623335,
    "cumulativeGasUsed": "8433474",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "6c799c235967b1c1211807a54240d5e9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"ProtocolTypes.Side\"},{\"internalType\":\"uint256\",\"name\":\"_futureValue\",\"type\":\"uint256\"}],\"name\":\"estimateFilledAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getActiveBorrowOrderIds\",\"outputs\":[{\"internalType\":\"uint48[]\",\"name\":\"activeOrderIds\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48[]\",\"name\":\"inActiveOrderIds\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getActiveLendOrderIds\",\"outputs\":[{\"internalType\":\"uint48[]\",\"name\":\"activeOrderIds\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48[]\",\"name\":\"inActiveOrderIds\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getBorrowOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHighestLendingUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getLendOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLowestBorrowingUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_orderId\",\"type\":\"uint48\"}],\"name\":\"getOrder\",\"outputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"ProtocolTypes.Side\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalAmountFromBorrowOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalAmountFromLendOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/logics/OrderBookLogic.sol\":\"OrderBookLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport {MarketOrder} from \\\"../storages/LendingMarketStorage.sol\\\";\\n\\ninterface ILendingMarket {\\n    event OrderCanceled(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event OrderMade(\\n        uint48 orderId,\\n        uint48 originalOrderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event OrdersTaken(\\n        address indexed taker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 filledAmount,\\n        uint256 unitPrice,\\n        uint256 filledFutureValue\\n    );\\n\\n    event OrdersCleaned(\\n        uint48[] orderIds,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 maturity\\n    );\\n\\n    event MarketOpened(uint256 maturity, uint256 prevMaturity);\\n\\n    struct Market {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        uint256 genesisDate;\\n        uint256 borrowUnitPrice;\\n        uint256 lendUnitPrice;\\n        uint256 midUnitPrice;\\n    }\\n\\n    function getMarket() external view returns (Market memory);\\n\\n    function getBorrowUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getLendUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getMidUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getBorrowOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturity() external view returns (uint256);\\n\\n    function getCurrency() external view returns (bytes32);\\n\\n    function isMatured() external view returns (bool);\\n\\n    function isOpened() external view returns (bool);\\n\\n    function getOrder(uint48 _orderId)\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        );\\n\\n    function getTotalAmountFromLendOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getTotalAmountFromBorrowOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getActiveLendOrderIds(address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds);\\n\\n    function getActiveBorrowOrderIds(address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds);\\n\\n    function estimateFilledAmount(ProtocolTypes.Side _side, uint256 _futureValue)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function openMarket(uint256 maturity) external returns (uint256);\\n\\n    function cancelOrder(address user, uint48 orderId)\\n        external\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        );\\n\\n    function cleanOrders(address _user)\\n        external\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        );\\n\\n    function createOrder(\\n        ProtocolTypes.Side side,\\n        address account,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        bool ignoreRemainingAmount\\n    ) external returns (uint256 executedRate, uint256 remainingAmount);\\n\\n    function pauseMarket() external;\\n\\n    function unpauseMarket() external;\\n}\\n\",\"keccak256\":\"0x5afd878f854e184d8a64db2605635a2604a9bff98308cea420a2610ec6cc323b\",\"license\":\"MIT\"},\"contracts/libraries/OrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// types\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {RoundingUint256} from \\\"./math/RoundingUint256.sol\\\";\\n\\nstruct RemainingOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 unitPrice;\\n}\\n\\nstruct OrderItem {\\n    uint48 orderId;\\n    uint48 next;\\n    uint48 prev;\\n    address maker;\\n    uint256 timestamp;\\n    uint256 amount;\\n}\\n\\n/**\\n * @notice OrderStatisticsTreeLib is a Red-Black Tree binary search library\\n * based on the following library that is extended to manage order data.\\n *\\n * https://github.com/rob-Hitchens/OrderStatisticsTree\\n *\\n */\\nlibrary OrderStatisticsTreeLib {\\n    using RoundingUint256 for uint256;\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint48 head;\\n        uint48 tail;\\n        uint256 orderCounter;\\n        uint256 orderTotalAmount;\\n        mapping(uint256 => OrderItem) orders;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].right != EMPTY) {\\n            _value = self.nodes[_value].right;\\n        }\\n    }\\n\\n    function next(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(401) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].right != EMPTY) {\\n            _cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(402) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].left != EMPTY) {\\n            _cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint256 value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        // if (self.nodes[value].parent != EMPTY) return true;\\n        uint256 cursor = value;\\n        while (self.nodes[cursor].parent != EMPTY) {\\n            uint256 parent = self.nodes[cursor].parent;\\n            if (self.nodes[parent].left != cursor && self.nodes[parent].right != cursor) {\\n                return false;\\n            }\\n            if (parent == self.root) {\\n                return true;\\n            }\\n            cursor = self.nodes[cursor].parent;\\n        }\\n        return false;\\n    }\\n\\n    function isActiveOrderId(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        return orderIdExists(self, value, orderId) && exists(self, value);\\n    }\\n\\n    function getNode(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n        return (\\n            gn.parent,\\n            gn.left,\\n            gn.right,\\n            gn.red,\\n            gn.head,\\n            gn.tail,\\n            gn.orderCounter,\\n            gn.orderTotalAmount\\n        );\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function getNodeTotalAmount(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint256 totalAmount)\\n    {\\n        return self.nodes[value].orderTotalAmount;\\n    }\\n\\n    function getNodeOrderIds(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint48[] memory orderIds)\\n    {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[gn.head];\\n        orderIds = new uint48[](gn.orderCounter);\\n\\n        for (uint256 i = 0; i < gn.orderCounter; i++) {\\n            orderIds[i] = order.orderId;\\n            order = gn.orders[order.next];\\n        }\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256 _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(405) - Value to insert cannot be zero\\\");\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                return;\\n            }\\n        }\\n\\n        Node storage nValue = self.nodes[value];\\n        // Update order info as a new one if there is already an old node\\n        if (\\n            self.root == EMPTY ||\\n            (self.nodes[cursor].left != value && self.nodes[cursor].right != value)\\n        ) {\\n            nValue.orderCounter = 0;\\n            nValue.orderTotalAmount = 0;\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        }\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(407) - Value to delete cannot be zero\\\");\\n        Node storage nValue = self.nodes[value];\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint256 a,\\n        uint256 b\\n    ) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    function estimateDroppedAmountFromLeft(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = first(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV).div(\\n                    cursorNodeAmountInFV\\n                );\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n    }\\n\\n    function estimateDroppedAmountFromRight(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = last(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV).div(\\n                    cursorNodeAmountInFV\\n                );\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n    }\\n\\n    function dropLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            RemainingOrder memory remainingOrder\\n        )\\n    {\\n        require(amount != EMPTY, \\\"OrderStatisticsTree(408) - Amount to drop cannot be zero\\\");\\n        uint256 value;\\n        uint256 cursor = first(self);\\n        uint256 lastNode = last(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor <= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (\\n            totalAmount < amount && cursor != EMPTY && (limitValue == 0 || cursor <= limitValue)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            uint256 filledAmount = cursorNodeAmount -\\n                (totalAmount > amount ? totalAmount - amount : 0);\\n            filledFutureValue += _calculateFutureValue(cursor, filledAmount);\\n\\n            cursor = next(self, cursor);\\n        }\\n\\n        if (totalAmount > 0) {\\n            if (totalAmount > amount) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                uint256 filledNodeAmount = cursorNodeAmount - (totalAmount - amount);\\n                remainingOrder = fillOrders(self, cursor, filledNodeAmount);\\n            }\\n\\n            self.nodes[cursor].left = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            while (parent != EMPTY) {\\n                if (parent > cursor) {\\n                    // Relink the nodes\\n                    if (self.nodes[cursor].parent != parent) {\\n                        self.nodes[cursor].parent = parent;\\n                        self.nodes[parent].left = cursor;\\n                    }\\n\\n                    cursor = parent;\\n                }\\n\\n                parent = self.nodes[parent].parent;\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        if (lastNode == value && self.nodes[lastNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value > self.root || (value == self.root && amount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        if (self.nodes[self.root].left == 0 && self.nodes[self.root].right != 0) {\\n            if (self.nodes[self.nodes[self.root].right].left != 0) {\\n                rotateRight(self, self.nodes[self.root].right);\\n            }\\n            rotateLeft(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function dropRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            RemainingOrder memory remainingOrder\\n        )\\n    {\\n        require(amount != EMPTY, \\\"OrderStatisticsTree(408) - Amount to drop cannot be zero\\\");\\n        uint256 value;\\n        uint256 cursor = last(self);\\n        uint256 firstNode = first(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor >= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (\\n            totalAmount < amount && cursor != EMPTY && (limitValue == 0 || cursor >= limitValue)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            uint256 filledAmount = cursorNodeAmount -\\n                (totalAmount > amount ? totalAmount - amount : 0);\\n            filledFutureValue += _calculateFutureValue(cursor, filledAmount);\\n\\n            cursor = prev(self, cursor);\\n        }\\n\\n        if (totalAmount > 0) {\\n            if (totalAmount > amount) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                uint256 filledNodeAmount = cursorNodeAmount - (totalAmount - amount);\\n                remainingOrder = fillOrders(self, cursor, filledNodeAmount);\\n            }\\n\\n            self.nodes[cursor].right = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            while (parent != EMPTY) {\\n                if (parent < cursor) {\\n                    // Relink the nodes\\n                    if (self.nodes[cursor].parent != parent) {\\n                        self.nodes[cursor].parent = parent;\\n                        self.nodes[parent].right = cursor;\\n                    }\\n\\n                    cursor = parent;\\n                }\\n\\n                parent = self.nodes[parent].parent;\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        if (firstNode == value && self.nodes[firstNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value < self.root || (value == self.root && amount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        if (self.nodes[self.root].right == 0 && self.nodes[self.root].left != 0) {\\n            if (self.nodes[self.nodes[self.root].left].right != 0) {\\n                rotateLeft(self, self.nodes[self.root].left);\\n            }\\n            rotateRight(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function getFutureValue(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (uint256) {\\n        return _calculateFutureValue(value, self.nodes[value].orders[orderId].amount);\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (OrderItem memory) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orders[orderId];\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function orderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        uint48 cursor = orderId;\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[cursor];\\n\\n        if (order.orderId != cursor) {\\n            return false;\\n        }\\n\\n        while (order.prev != EMPTY) {\\n            cursor = order.prev;\\n            order = gn.orders[cursor];\\n        }\\n\\n        return cursor == gn.head;\\n    }\\n\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount,\\n        bool isInterruption\\n    ) internal {\\n        require(amount > 0, \\\"Insufficient amount\\\");\\n        require(value <= ProtocolTypes.PRICE_DIGIT, \\\"Insufficient value\\\");\\n        insert(self, value);\\n\\n        if (isInterruption) {\\n            addHead(self, value, orderId, user, amount);\\n        } else {\\n            addTail(self, value, orderId, user, amount);\\n        }\\n    }\\n\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        amount = _removeOrder(self, value, orderId);\\n        remove(self, value);\\n    }\\n\\n    /**\\n     * @dev Reduces order amount once market order taken.\\n     */\\n    function fillOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount\\n    ) internal returns (RemainingOrder memory remainingOrder) {\\n        Node storage gn = self.nodes[value];\\n\\n        require(\\n            gn.orderTotalAmount >= _amount,\\n            \\\"OrderStatisticsTree(410) - Amount to fill is insufficient\\\"\\n        );\\n\\n        uint256 remainingAmount = _amount;\\n        uint256 filledCount = 0;\\n        OrderItem memory currentOrder = gn.orders[gn.head];\\n        uint48 orderId = gn.head;\\n\\n        while (orderId != 0 && remainingAmount != 0) {\\n            currentOrder = gn.orders[orderId];\\n\\n            if (currentOrder.amount <= remainingAmount) {\\n                remainingAmount -= currentOrder.amount;\\n                orderId = currentOrder.next;\\n            } else {\\n                remainingOrder = RemainingOrder(\\n                    currentOrder.orderId,\\n                    currentOrder.maker,\\n                    currentOrder.amount - remainingAmount,\\n                    value\\n                );\\n                remainingAmount = 0;\\n            }\\n\\n            filledCount++;\\n        }\\n\\n        _dropOrders(self, value, currentOrder.orderId);\\n\\n        if (remainingOrder.amount > 0) {\\n            // NOTE: This order that the filled partially was dropped from a node, and the unfilled amount\\n            // will be inserted newly as a new orders.\\n            // However, that filled order amount is used when future value is calculated from inactive order.\\n            // For that calculation, this order amount needs to be updated by an actual filled amount at this point.\\n            OrderItem storage order = self.nodes[value].orders[currentOrder.orderId];\\n            order.amount -= remainingOrder.amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n        uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n        _link(self, _value, orderId, gn.head);\\n        _setHead(self, _value, orderId);\\n        if (gn.tail == 0) _setTail(self, _value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, _value, _orderId, _user, _amount);\\n        } else {\\n            uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n            _link(self, _value, gn.tail, orderId);\\n            _setTail(self, _value, orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint48) {\\n        Node storage gn = self.nodes[value];\\n        require(\\n            gn.orders[orderId].timestamp == 0,\\n            \\\"OrderStatisticsTree(409) - Order id already exist.\\\"\\n        );\\n\\n        gn.orderCounter += 1;\\n        gn.orderTotalAmount += amount;\\n        OrderItem memory order = OrderItem(orderId, 0, 0, user, block.timestamp, amount);\\n        gn.orders[orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the list.\\n     */\\n    function _removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n        gn.orderTotalAmount -= order.amount;\\n    }\\n\\n    /**\\n     * @dev Drop the OrderItems older than or equal `orderId` from the list\\n     */\\n    function _dropOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n        uint256 cursor = gn.head;\\n        uint256 removedCount = 1;\\n        uint256 removedAmount = gn.orders[cursor].amount;\\n\\n        while (cursor != orderId) {\\n            cursor = gn.orders[cursor].next;\\n            removedCount++;\\n            removedAmount += gn.orders[cursor].amount;\\n        }\\n\\n        if (gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        }\\n\\n        gn.orderCounter -= removedCount;\\n        gn.orderTotalAmount -= removedAmount;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 _prevId,\\n        uint48 _nextId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[_prevId].next = _nextId;\\n        gn.orders[_nextId].prev = _prevId;\\n    }\\n\\n    function _calculateFutureValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * ProtocolTypes.PRICE_DIGIT).div(unitPrice);\\n    }\\n}\\n\",\"keccak256\":\"0x945968d912b342f84669c3886829ab522cb35d86b9425af8dcacac7b48d66014\",\"license\":\"MIT\"},\"contracts/libraries/logics/OrderBookLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {OrderStatisticsTreeLib, RemainingOrder, OrderItem} from \\\"../OrderStatisticsTreeLib.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\nimport {ILendingMarket} from \\\"../../interfaces/ILendingMarket.sol\\\";\\nimport {ProtocolTypes} from \\\"../../types/ProtocolTypes.sol\\\";\\nimport {LendingMarketStorage as Storage, MarketOrder} from \\\"../../storages/LendingMarketStorage.sol\\\";\\n\\nlibrary OrderBookLogic {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n    using RoundingUint256 for uint256;\\n\\n    function getHighestLendingUnitPrice() public view returns (uint256) {\\n        return Storage.slot().lendOrders[Storage.slot().maturity].last();\\n    }\\n\\n    function getLowestBorrowingUnitPrice() public view returns (uint256) {\\n        uint256 unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].first();\\n        return unitPrice == 0 ? ProtocolTypes.PRICE_DIGIT : unitPrice;\\n    }\\n\\n    function getLendOrderBook(uint256 _limit)\\n        public\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = Storage.slot().lendOrders[Storage.slot().maturity].last();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\\n            unitPrice\\n        );\\n        quantities[0] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeCount(unitPrice);\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = Storage.slot().lendOrders[Storage.slot().maturity].prev(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\\n                unitPrice\\n            );\\n            quantities[i] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeCount(\\n                unitPrice\\n            );\\n        }\\n    }\\n\\n    function getBorrowOrderBook(uint256 _limit)\\n        public\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].first();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeTotalAmount(\\n            unitPrice\\n        );\\n        quantities[0] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeCount(\\n            unitPrice\\n        );\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].next(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeTotalAmount(\\n                unitPrice\\n            );\\n            quantities[i] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeCount(\\n                unitPrice\\n            );\\n        }\\n    }\\n\\n    function getOrder(uint48 _orderId)\\n        public\\n        view\\n        returns (\\n            ProtocolTypes.Side side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        )\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n\\n        OrderItem memory orderItem;\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            orderItem = Storage.slot().lendOrders[marketOrder.maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n        } else {\\n            orderItem = Storage.slot().borrowOrders[marketOrder.maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n        }\\n\\n        if (orderItem.maker != address(0)) {\\n            return (\\n                marketOrder.side,\\n                marketOrder.unitPrice,\\n                marketOrder.maturity,\\n                orderItem.maker,\\n                orderItem.amount,\\n                orderItem.timestamp\\n            );\\n        }\\n    }\\n\\n    function getTotalAmountFromLendOrders(address _user)\\n        public\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds) = getActiveLendOrderIds(\\n            _user\\n        );\\n\\n        maturity = Storage.slot().userCurrentMaturities[_user];\\n\\n        for (uint256 i = 0; i < activeOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[activeOrderIds[i]];\\n            // Sum future values in the current maturity.\\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\\n            // as an order canceled in the past market.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .lendOrders[Storage.slot().maturity]\\n                .getOrderById(marketOrder.unitPrice, activeOrderIds[i]);\\n            activeAmount += orderItem.amount;\\n        }\\n\\n        for (uint256 i = 0; i < inActiveOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveOrderIds[i]];\\n            if (maturity == 0) {\\n                maturity = marketOrder.maturity;\\n            }\\n            // Sum future values in the maturity of orders\\n            // It will be the future value when the order is created, even if the market is rotated\\n            // and maturity is updated.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .lendOrders[marketOrder.maturity]\\n                .getOrderById(marketOrder.unitPrice, inActiveOrderIds[i]);\\n            inactiveAmount += orderItem.amount;\\n            inactiveFutureValue += (orderItem.amount * ProtocolTypes.PRICE_DIGIT).div(\\n                marketOrder.unitPrice\\n            );\\n        }\\n    }\\n\\n    function getTotalAmountFromBorrowOrders(address _user)\\n        public\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        (\\n            uint48[] memory activeOrderIds,\\n            uint48[] memory inActiveOrderIds\\n        ) = getActiveBorrowOrderIds(_user);\\n\\n        for (uint256 i = 0; i < activeOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[activeOrderIds[i]];\\n            // Sum future values in the current maturity.\\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\\n            // as an order canceled in the past market.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .borrowOrders[Storage.slot().maturity]\\n                .getOrderById(marketOrder.unitPrice, activeOrderIds[i]);\\n            activeAmount += orderItem.amount;\\n        }\\n\\n        maturity = Storage.slot().userCurrentMaturities[_user];\\n\\n        for (uint256 i = 0; i < inActiveOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveOrderIds[i]];\\n            // Sum future values in the maturity of orders\\n            // It will be the future value when the order is created, even if the market is rotated\\n            // and maturity is updated.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .borrowOrders[marketOrder.maturity]\\n                .getOrderById(marketOrder.unitPrice, inActiveOrderIds[i]);\\n            inactiveAmount += orderItem.amount;\\n            inactiveFutureValue += (orderItem.amount * ProtocolTypes.PRICE_DIGIT).div(\\n                marketOrder.unitPrice\\n            );\\n        }\\n    }\\n\\n    function getActiveLendOrderIds(address _user)\\n        public\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        bool isPastMaturity = Storage.slot().userCurrentMaturities[_user] !=\\n            Storage.slot().maturity;\\n\\n        activeOrderIds = new uint48[](\\n            isPastMaturity ? 0 : Storage.slot().activeLendOrderIds[_user].length\\n        );\\n        inActiveOrderIds = new uint48[](Storage.slot().activeLendOrderIds[_user].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().activeLendOrderIds[_user].length; i++) {\\n            uint48 orderId = Storage.slot().activeLendOrderIds[_user][i];\\n            MarketOrder memory marketOrder = Storage.slot().orders[orderId];\\n\\n            if (\\n                !Storage\\n                    .slot()\\n                    .lendOrders[Storage.slot().userCurrentMaturities[_user]]\\n                    .isActiveOrderId(marketOrder.unitPrice, orderId)\\n            ) {\\n                inActiveOrderCount += 1;\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                if (!isPastMaturity) {\\n                    activeOrderCount += 1;\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function getActiveBorrowOrderIds(address _user)\\n        public\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        bool isPastMaturity = Storage.slot().userCurrentMaturities[_user] !=\\n            Storage.slot().maturity;\\n\\n        activeOrderIds = new uint48[](\\n            isPastMaturity ? 0 : Storage.slot().activeBorrowOrderIds[_user].length\\n        );\\n        inActiveOrderIds = new uint48[](Storage.slot().activeBorrowOrderIds[_user].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().activeBorrowOrderIds[_user].length; i++) {\\n            uint48 orderId = Storage.slot().activeBorrowOrderIds[_user][i];\\n            MarketOrder memory marketOrder = Storage.slot().orders[orderId];\\n\\n            if (\\n                !Storage\\n                    .slot()\\n                    .borrowOrders[Storage.slot().userCurrentMaturities[_user]]\\n                    .isActiveOrderId(marketOrder.unitPrice, orderId)\\n            ) {\\n                inActiveOrderCount += 1;\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                activeOrderCount += 1;\\n                if (!isPastMaturity) {\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function estimateFilledAmount(ProtocolTypes.Side _side, uint256 _futureValue)\\n        public\\n        view\\n        returns (uint256 amount)\\n    {\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            return\\n                Storage.slot().lendOrders[Storage.slot().maturity].estimateDroppedAmountFromRight(\\n                    _futureValue\\n                );\\n        } else {\\n            return\\n                Storage.slot().borrowOrders[Storage.slot().maturity].estimateDroppedAmountFromLeft(\\n                    _futureValue\\n                );\\n        }\\n    }\\n\\n    function insertOrder(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice,\\n        bool _isInterruption\\n    ) public returns (uint48 orderId) {\\n        orderId = nextOrderId();\\n        Storage.slot().orders[orderId] = MarketOrder(\\n            _side,\\n            _unitPrice,\\n            Storage.slot().maturity,\\n            block.timestamp\\n        );\\n\\n        if (_side == ProtocolTypes.Side.LEND) {\\n            Storage.slot().lendOrders[Storage.slot().maturity].insertOrder(\\n                _unitPrice,\\n                orderId,\\n                _user,\\n                _amount,\\n                _isInterruption\\n            );\\n            Storage.slot().activeLendOrderIds[_user].push(orderId);\\n        } else if (_side == ProtocolTypes.Side.BORROW) {\\n            Storage.slot().borrowOrders[Storage.slot().maturity].insertOrder(\\n                _unitPrice,\\n                orderId,\\n                _user,\\n                _amount,\\n                _isInterruption\\n            );\\n            Storage.slot().activeBorrowOrderIds[_user].push(orderId);\\n        }\\n    }\\n\\n    function dropOrders(\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    )\\n        public\\n        returns (\\n            RemainingOrder memory remainingOrder,\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount\\n        )\\n    {\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            (filledFutureValue, remainingAmount, remainingOrder) = Storage\\n                .slot()\\n                .lendOrders[Storage.slot().maturity]\\n                .dropRight(_amount, _unitPrice);\\n        } else if (_side == ProtocolTypes.Side.LEND) {\\n            (filledFutureValue, remainingAmount, remainingOrder) = Storage\\n                .slot()\\n                .borrowOrders[Storage.slot().maturity]\\n                .dropLeft(_amount, _unitPrice);\\n        }\\n    }\\n\\n    function cleanLendOrders(address _user, uint256 _maturity)\\n        public\\n        returns (\\n            uint48[] memory orderIds,\\n            uint256 activeOrderCount,\\n            uint256 removedFutureValue,\\n            uint256 removedOrderAmount\\n        )\\n    {\\n        (\\n            uint48[] memory activeLendOrderIds,\\n            uint48[] memory inActiveLendOrderIds\\n        ) = getActiveLendOrderIds(_user);\\n\\n        Storage.slot().activeLendOrderIds[_user] = activeLendOrderIds;\\n        activeOrderCount = activeLendOrderIds.length;\\n        uint256 inactiveOrderCount = inActiveLendOrderIds.length;\\n        orderIds = new uint48[](inactiveOrderCount);\\n\\n        for (uint256 i = 0; i < inactiveOrderCount; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveLendOrderIds[i]];\\n            OrderItem memory orderItem = Storage.slot().lendOrders[_maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                inActiveLendOrderIds[i]\\n            );\\n            removedFutureValue += Storage.slot().lendOrders[_maturity].getFutureValue(\\n                marketOrder.unitPrice,\\n                inActiveLendOrderIds[i]\\n            );\\n            removedOrderAmount += orderItem.amount;\\n\\n            orderIds[i] = orderItem.orderId;\\n        }\\n    }\\n\\n    function cleanBorrowOrders(address _user, uint256 _maturity)\\n        public\\n        returns (\\n            uint48[] memory orderIds,\\n            uint256 activeOrderCount,\\n            uint256 removedFutureValue,\\n            uint256 removedOrderAmount\\n        )\\n    {\\n        (\\n            uint48[] memory activeBorrowOrderIds,\\n            uint48[] memory inActiveBorrowOrderIds\\n        ) = getActiveBorrowOrderIds(_user);\\n\\n        Storage.slot().activeBorrowOrderIds[_user] = activeBorrowOrderIds;\\n        activeOrderCount = activeBorrowOrderIds.length;\\n        uint256 inactiveOrderCount = inActiveBorrowOrderIds.length;\\n        orderIds = new uint48[](inactiveOrderCount);\\n\\n        for (uint256 i = 0; i < inactiveOrderCount; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveBorrowOrderIds[i]];\\n            OrderItem memory orderItem = Storage.slot().borrowOrders[_maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                inActiveBorrowOrderIds[i]\\n            );\\n            removedFutureValue += Storage.slot().borrowOrders[_maturity].getFutureValue(\\n                marketOrder.unitPrice,\\n                inActiveBorrowOrderIds[i]\\n            );\\n\\n            removedOrderAmount += orderItem.amount;\\n\\n            orderIds[i] = orderItem.orderId;\\n        }\\n    }\\n\\n    function removeOrder(address _user, uint48 _orderId)\\n        public\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n        uint256 removedAmount;\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            removedAmount = Storage.slot().lendOrders[Storage.slot().maturity].removeOrder(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n            removeOrderIdFromOrders(Storage.slot().activeLendOrderIds[_user], _orderId);\\n        } else if (marketOrder.side == ProtocolTypes.Side.BORROW) {\\n            removedAmount = Storage.slot().borrowOrders[Storage.slot().maturity].removeOrder(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n            removeOrderIdFromOrders(Storage.slot().activeBorrowOrderIds[_user], _orderId);\\n        }\\n\\n        return (marketOrder.side, removedAmount, marketOrder.unitPrice);\\n    }\\n\\n    /**\\n     * @notice Increases and returns id of last order in order book.\\n     * @return The new order id\\n     */\\n    function nextOrderId() private returns (uint48) {\\n        Storage.slot().lastOrderId++;\\n        return Storage.slot().lastOrderId;\\n    }\\n\\n    function removeOrderIdFromOrders(uint48[] storage orders, uint256 orderId) private {\\n        uint256 lastOrderIndex = orders.length - 1;\\n        for (uint256 i = 0; i <= lastOrderIndex; i++) {\\n            if (orders[i] == orderId) {\\n                if (i != lastOrderIndex) {\\n                    uint48 lastOrderId = orders[lastOrderIndex];\\n                    orders[i] = lastOrderId;\\n                }\\n\\n                orders.pop();\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x790c5aea034ecd7c36465d2057582056542629d53751be50ffe197b8198aa782\",\"license\":\"MIT\"},\"contracts/libraries/math/RoundingUint256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoundingUint256 {\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0);\\n\\n        if ((a * 10) / b - (a / b) * 10 < 5) {\\n            return a / b;\\n        } else {\\n            return (a / b) + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc360f39a82f1a9a7454726e3db802407d305b5e525aa8c3236fe49ca6ca534d\",\"license\":\"MIT\"},\"contracts/storages/LendingMarketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport \\\"../libraries/OrderStatisticsTreeLib.sol\\\";\\n\\nstruct MarketOrder {\\n    ProtocolTypes.Side side;\\n    uint256 unitPrice; // in basis points\\n    uint256 maturity;\\n    uint256 timestamp;\\n}\\n\\nlibrary LendingMarketStorage {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarket\\\");\\n\\n    struct Storage {\\n        uint48 lastOrderId;\\n        bytes32 ccy;\\n        uint256 genesisDate;\\n        uint256 maturity;\\n        // Mapping from user to active lend order ids\\n        mapping(address => uint48[]) activeLendOrderIds;\\n        // Mapping from user to active borrow order ids\\n        mapping(address => uint48[]) activeBorrowOrderIds;\\n        // Mapping from user to current maturity\\n        mapping(address => uint256) userCurrentMaturities;\\n        // Mapping from orderId to order\\n        mapping(uint256 => MarketOrder) orders;\\n        // Mapping from maturity to lending orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) lendOrders;\\n        // Mapping from maturity to borrowing orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) borrowOrders;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x853ba93239853c61035a10d0b2dc1249039b33fba8f29d4a9dbd7601ec55216b\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant PRICE_DIGIT = 10000; // price digit in the basis (10000 -> 1)\\n    uint256 public constant PCT_DIGIT = 10000; // percentage digit in the basis (10000 -> 100%)\\n\\n    uint256 internal constant DAYS_IN_YEAR = 365;\\n    uint256 internal constant SECONDS_IN_MONTH = 2592000; // 60 * 60 * 24 * 30 * 12\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000; // 60 * 60 * 24 * 365\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0xb4f718379c4b1a90400813f4789e853dccb1e474697282e4ed5e36c0d0bd385b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x614e4961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100ff5760003560e01c8063914551f1116100a1578063e3d904d811610070578063e3d904d8146102c8578063e7df768c146102fb578063eebc28f91461030e578063fa6127aa1461032157600080fd5b8063914551f11461026c578063a452c3f81461028c578063d866d355146102ad578063e2afb041146102c057600080fd5b8063614152b9116100dd578063614152b91461019257806363978ac8146101a85780636c5db843146102185780637ce219aa1461024757600080fd5b80633684d3ea146101045780634a53967b146101405780634bf62d1614610170575b600080fd5b81801561011057600080fd5b5061012461011f36600461494c565b610334565b60405165ffffffffffff90911681526020015b60405180910390f35b81801561014c57600080fd5b5061016061015b3660046149ac565b61053b565b6040516101379493929190614a19565b61018361017e366004614a48565b61078e565b60405161013793929190614a91565b61019a610a42565b604051908152602001610137565b8180156101b457600080fd5b506101c86101c3366004614ad4565b610a8c565b60408051845165ffffffffffff1681526020808601516001600160a01b031690820152848201519181019190915260609384015193810193909352608083019190915260a082015260c001610137565b81801561022457600080fd5b50610238610233366004614b1d565b610b5e565b60405161013793929190614b88565b61025a610255366004614ba7565b610cfc565b60405161013796959493929190614bc2565b81801561027857600080fd5b506101606102873660046149ac565b610e8b565b61029f61029a366004614c01565b6110d1565b604051610137929190614c1c565b6101836102bb366004614a48565b61142d565b61019a611674565b6102db6102d6366004614c01565b611686565b604080519485526020850193909352918301526060820152608001610137565b6102db610309366004614c01565b61192e565b61029f61031c366004614c01565b611bb2565b61019a61032f366004614c41565b611ec1565b600061033e611f5c565b9050604051806080016040528087600181111561035d5761035d614b50565b8152602001848152602001610370611fb5565b60030154815260200142815250610385611fb5565b65ffffffffffff831660009081526007919091016020526040902081518154829060ff1916600183818111156103bd576103bd614b50565b0217905550602082015160018201556040820151600282015560609091015160039091015560008660018111156103f6576103f6614b50565b141561049f5761043d838287878661040c611fb5565b6008016000610419611fb5565b600301548152602001908152602001600020611fd99095949392919063ffffffff16565b610445611fb5565b6001600160a01b03861660009081526004919091016020908152604082208054600181018255908352912060058083049091018054919092066006026101000a65ffffffffffff8181021990921691841602179055610532565b60018660018111156104b3576104b3614b50565b1415610532576104d683828787866104c9611fb5565b6009016000610419611fb5565b6104de611fb5565b6001600160a01b0386166000908152600591820160209081526040822080546001810182559083529120828204018054929091066006026101000a65ffffffffffff81810219909316928416029190911790555b95945050505050565b6060600080600080600061054e88611bb2565b915091508161055b611fb5565b60050160008a6001600160a01b03166001600160a01b031681526020019081526020016000209080519060200190610594929190614823565b50815181519095508067ffffffffffffffff8111156105b5576105b5614c5d565b6040519080825280602002602001820160405280156105de578160200160208202803683370190505b50965060005b818110156107815760006105f6611fb5565b600701600085848151811061060d5761060d614c73565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16600181111561065a5761065a614b50565b600181111561066b5761066b614b50565b81526020016001820154815260200160028201548152602001600382015481525050905060006106d482602001518685815181106106ab576106ab614c73565b60200260200101516106bb611fb5565b60008f81526009919091016020526040902091906120a2565b905061071982602001518685815181106106f0576106f0614c73565b6020026020010151610700611fb5565b60008f815260099190910160205260409020919061215d565b6107239089614c9f565b97508060a00151876107359190614c9f565b965080600001518a848151811061074e5761074e614c73565b602002602001019065ffffffffffff16908165ffffffffffff16815250505050808061077990614cb7565b9150506105e4565b5050505092959194509250565b60608060608367ffffffffffffffff8111156107ac576107ac614c5d565b6040519080825280602002602001820160405280156107d5578160200160208202803683370190505b5092508367ffffffffffffffff8111156107f1576107f1614c5d565b60405190808252806020026020018201604052801561081a578160200160208202803683370190505b5091508367ffffffffffffffff81111561083657610836614c5d565b60405190808252806020026020018201604052801561085f578160200160208202803683370190505b509050600061089361086f611fb5565b600801600061087c611fb5565b60030154815260200190815260200160002061219a565b905080846000815181106108a9576108a9614c73565b6020026020010181815250506108ee816108c1611fb5565b60080160006108ce611fb5565b6003015481526020019081526020016000206121e190919063ffffffff16565b8360008151811061090157610901614c73565b60200260200101818152505061094681610919611fb5565b6008016000610926611fb5565b6003015481526020019081526020016000206121fa90919063ffffffff16565b8260008151811061095957610959614c73565b602090810291909101015260015b8451811015610a39578161097a57610a39565b6109b382610986611fb5565b6008016000610993611fb5565b60030154815260200190815260200160002061221390919063ffffffff16565b9150818582815181106109c8576109c8614c73565b6020026020010181815250506109e0826108c1611fb5565b8482815181106109f2576109f2614c73565b602002602001018181525050610a0a82610919611fb5565b838281518110610a1c57610a1c614c73565b602090810291909101015280610a3181614cb7565b915050610967565b50509193909250565b600080610a74610a50611fb5565b6009016000610a5d611fb5565b60030154815260200190815260200160002061230d565b90508015610a825780610a86565b6127105b91505090565b610a946148d8565b6000806001866001811115610aab57610aab614b50565b1415610af857610aec8585610abe611fb5565b6008016000610acb611fb5565b60030154815260200190815260200160002061234f9092919063ffffffff16565b94509092509050610b55565b6000866001811115610b0c57610b0c614b50565b1415610b5557610b4d8585610b1f611fb5565b6009016000610b2c611fb5565b6003015481526020019081526020016000206126879092919063ffffffff16565b945090925090505b93509350939050565b600080600080610b6c611fb5565b65ffffffffffff861660009081526007919091016020526040908190208151608081019092528054829060ff166001811115610baa57610baa614b50565b6001811115610bbb57610bbb614b50565b81526001820154602082015260028201546040820152600390910154606090910152905060008082516001811115610bf557610bf5614b50565b1415610c7657610c3a826020015187610c0c611fb5565b6008016000610c19611fb5565b6003015481526020019081526020016000206129749092919063ffffffff16565b9050610c71610c47611fb5565b6001600160a01b03891660009081526004919091016020526040902065ffffffffffff88166129b4565b610ce6565b600182516001811115610c8b57610c8b614b50565b1415610ce657610caf826020015187610ca2611fb5565b6009016000610c19611fb5565b9050610ce6610cbc611fb5565b6001600160a01b03891660009081526005919091016020526040902065ffffffffffff88166129b4565b8151602090920151919450925090509250925092565b6000806000806000806000610d0f611fb5565b65ffffffffffff891660009081526007919091016020526040908190208151608081019092528054829060ff166001811115610d4d57610d4d614b50565b6001811115610d5e57610d5e614b50565b815260200160018201548152602001600282015481526020016003820154815250509050610dba6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b600082516001811115610dcf57610dcf614b50565b1415610e0a57610e0382602001518a610de6611fb5565b6040808701516000908152600892909201602052902091906120a2565b9050610e3b565b610e3882602001518a610e1b611fb5565b6040808701516000908152600992909201602052902091906120a2565b90505b60608101516001600160a01b031615610e7f5781600001518260200151836040015183606001518460a0015185608001519750975097509750975097505050610e82565b50505b91939550919395565b60606000806000806000610e9e886110d1565b9150915081610eab611fb5565b60040160008a6001600160a01b03166001600160a01b031681526020019081526020016000209080519060200190610ee4929190614823565b50815181519095508067ffffffffffffffff811115610f0557610f05614c5d565b604051908082528060200260200182016040528015610f2e578160200160208202803683370190505b50965060005b81811015610781576000610f46611fb5565b6007016000858481518110610f5d57610f5d614c73565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff166001811115610faa57610faa614b50565b6001811115610fbb57610fbb614b50565b81526020016001820154815260200160028201548152602001600382015481525050905060006110248260200151868581518110610ffb57610ffb614c73565b602002602001015161100b611fb5565b60008f81526008919091016020526040902091906120a2565b9050611069826020015186858151811061104057611040614c73565b6020026020010151611050611fb5565b60008f815260089190910160205260409020919061215d565b6110739089614c9f565b97508060a00151876110859190614c9f565b965080600001518a848151811061109e5761109e614c73565b602002602001019065ffffffffffff16908165ffffffffffff1681525050505080806110c990614cb7565b915050610f34565b60608060008060006110e1611fb5565b600301546110ed611fb5565b6001600160a01b03881660009081526006919091016020526040902054141590508061113d5761111b611fb5565b6001600160a01b03871660009081526004919091016020526040902054611140565b60005b67ffffffffffffffff81111561115857611158614c5d565b604051908082528060200260200182016040528015611181578160200160208202803683370190505b50945061118c611fb5565b6001600160a01b0387166000908152600491909101602052604090205467ffffffffffffffff8111156111c1576111c1614c5d565b6040519080825280602002602001820160405280156111ea578160200160208202803683370190505b50935060005b6111f8611fb5565b6001600160a01b03881660009081526004919091016020526040902054811015611424576000611226611fb5565b6001600160a01b03891660009081526004919091016020526040902080548390811061125457611254614c73565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1690506000611288611fb5565b65ffffffffffff831660009081526007919091016020526040908190208151608081019092528054829060ff1660018111156112c6576112c6614b50565b60018111156112d7576112d7614b50565b81526020016001820154815260200160028201548152602001600382015481525050905061135d81602001518361130c611fb5565b6008016000611319611fb5565b60060160008f6001600160a01b03166001600160a01b03168152602001908152602001600020548152602001908152602001600020612b0a9092919063ffffffff16565b6113ba5761136c600186614c9f565b9450818761137a8886614cd2565b8151811061138a5761138a614c73565b602002602001019065ffffffffffff16908165ffffffffffff1681525050836113b557600188510388525b61140f565b83611407576113ca600187614c9f565b955081886113d88786614cd2565b815181106113e8576113e8614c73565b602002602001019065ffffffffffff16908165ffffffffffff16815250505b600187510387525b5050808061141c90614cb7565b9150506111f0565b50505050915091565b60608060608367ffffffffffffffff81111561144b5761144b614c5d565b604051908082528060200260200182016040528015611474578160200160208202803683370190505b5092508367ffffffffffffffff81111561149057611490614c5d565b6040519080825280602002602001820160405280156114b9578160200160208202803683370190505b5091508367ffffffffffffffff8111156114d5576114d5614c5d565b6040519080825280602002602001820160405280156114fe578160200160208202803683370190505b509050600061150e610a50611fb5565b9050808460008151811061152457611524614c73565b6020026020010181815250506115498161153c611fb5565b60090160006108ce611fb5565b8360008151811061155c5761155c614c73565b60200260200101818152505061158181611574611fb5565b6009016000610926611fb5565b8260008151811061159457611594614c73565b602090810291909101015260015b8451811015610a3957816115b557610a39565b6115ee826115c1611fb5565b60090160006115ce611fb5565b600301548152602001908152602001600020612b2890919063ffffffff16565b91508185828151811061160357611603614c73565b60200260200101818152505061161b8261153c611fb5565b84828151811061162d5761162d614c73565b60200260200101818152505061164582611574611fb5565b83828151811061165757611657614c73565b60209081029190910101528061166c81614cb7565b9150506115a2565b600061168161086f611fb5565b905090565b60008060008060008061169887611bb2565b9150915060005b82518110156117ce5760006116b2611fb5565b60070160008584815181106116c9576116c9614c73565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16600181111561171657611716614b50565b600181111561172757611727614b50565b81526020016001820154815260200160028201548152602001600382015481525050905060006117a5826020015186858151811061176757611767614c73565b6020026020010151611777611fb5565b6009016000611784611fb5565b6003015481526020019081526020016000206120a29092919063ffffffff16565b90508060a00151896117b79190614c9f565b9850505080806117c690614cb7565b91505061169f565b506117d7611fb5565b6001600160a01b0388166000908152600691909101602052604081205493505b815181101561192457600061180a611fb5565b600701600084848151811061182157611821614c73565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16600181111561186e5761186e614b50565b600181111561187f5761187f614b50565b81526020016001820154815260200160028201548152602001600382015481525050905060006118cf82602001518585815181106118bf576118bf614c73565b6020026020010151610e1b611fb5565b90508060a00151886118e19190614c9f565b975061190382602001516127108360a001516118fd9190614ce9565b90612c22565b61190d9088614c9f565b96505050808061191c90614cb7565b9150506117f7565b5050509193509193565b600080600080600080611940876110d1565b9150915061194c611fb5565b6001600160a01b0388166000908152600691909101602052604081205493505b8251811015611a7a57600061197f611fb5565b600701600085848151811061199657611996614c73565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff1660018111156119e3576119e3614b50565b60018111156119f4576119f4614b50565b8152602001600182015481526020016002820154815260200160038201548152505090506000611a518260200151868581518110611a3457611a34614c73565b6020026020010151611a44611fb5565b6008016000611784611fb5565b90508060a0015189611a639190614c9f565b985050508080611a7290614cb7565b91505061196c565b5060005b8151811015611924576000611a91611fb5565b6007016000848481518110611aa857611aa8614c73565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff166001811115611af557611af5614b50565b6001811115611b0657611b06614b50565b81526001820154602082015260028201546040820152600390910154606090910152905084611b3757806040015194505b6000611b638260200151858581518110611b5357611b53614c73565b6020026020010151610de6611fb5565b90508060a0015188611b759190614c9f565b9750611b9182602001516127108360a001516118fd9190614ce9565b611b9b9088614c9f565b965050508080611baa90614cb7565b915050611a7e565b6060806000806000611bc2611fb5565b60030154611bce611fb5565b6001600160a01b038816600090815260069190910160205260409020541415905080611c1e57611bfc611fb5565b6001600160a01b03871660009081526005919091016020526040902054611c21565b60005b67ffffffffffffffff811115611c3957611c39614c5d565b604051908082528060200260200182016040528015611c62578160200160208202803683370190505b509450611c6d611fb5565b6001600160a01b0387166000908152600591909101602052604090205467ffffffffffffffff811115611ca257611ca2614c5d565b604051908082528060200260200182016040528015611ccb578160200160208202803683370190505b50935060005b611cd9611fb5565b6001600160a01b03881660009081526005919091016020526040902054811015611424576000611d07611fb5565b6001600160a01b038916600090815260059190910160205260409020805483908110611d3557611d35614c73565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1690506000611d69611fb5565b65ffffffffffff831660009081526007919091016020526040908190208151608081019092528054829060ff166001811115611da757611da7614b50565b6001811115611db857611db8614b50565b815260200160018201548152602001600282015481526020016003820154815250509050611dfa816020015183611ded611fb5565b6009016000611319611fb5565b611e5757611e09600186614c9f565b94508187611e178886614cd2565b81518110611e2757611e27614c73565b602002602001019065ffffffffffff16908165ffffffffffff168152505083611e5257600188510388525b611eac565b611e62600187614c9f565b955083611ea4578188611e758786614cd2565b81518110611e8557611e85614c73565b602002602001019065ffffffffffff16908165ffffffffffff16815250505b600187510387525b50508080611eb990614cb7565b915050611cd1565b60006001836001811115611ed757611ed7614b50565b1415611f1d57611f1682611ee9611fb5565b6008016000611ef6611fb5565b600301548152602001908152602001600020612c8c90919063ffffffff16565b9050611f56565b611f1682611f29611fb5565b6009016000611f36611fb5565b600301548152602001908152602001600020612d4890919063ffffffff16565b92915050565b6000611f66611fb5565b805465ffffffffffff16906000611f7c83614d08565b91906101000a81548165ffffffffffff021916908365ffffffffffff16021790555050611fa7611fb5565b5465ffffffffffff16919050565b7ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0a90565b600082116120245760405162461bcd60e51b8152602060048201526013602482015272125b9cdd59999a58da595b9d08185b5bdd5b9d606a1b60448201526064015b60405180910390fd5b61271085111561206b5760405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742076616c756560701b604482015260640161201b565b6120758686612dfc565b801561208d576120888686868686612fcc565b61209a565b61209a8686868686613045565b505050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915250600082815260018085016020908152604080842065ffffffffffff80871686526006909101835293819020815160c08101835281548087168252600160301b8104871694820194909452600160601b90930490941690820152908201546001600160a01b031660608201526002820154608082015260039091015460a08201525b9392505050565b6000828152600184016020908152604080832065ffffffffffff851684526006019091528120600301546121929084906130b6565b949350505050565b8054806121a957506000919050565b5b6000818152600183016020526040902060020154156121dc5760009081526001820160205260409020600201546121aa565b919050565b6000908152600191909101602052604090206005015490565b6000908152600191909101602052604090206004015490565b6000816122835760405162461bcd60e51b815260206004820152603860248201527f4f7264657253746174697374696373547265652834303229202d205374617274604482015277696e672076616c75652063616e6e6f74206265207a65726f60401b606482015260840161201b565b6000828152600180850160205260409091200154156122bb576000828152600180850160205260409091200154611f169084906130c8565b5060008181526001830160205260409020545b80158015906122ef5750600081815260018085016020526040909120015482145b15611f565760008181526001840160205260409020549091506122ce565b80548061231c57506000919050565b5b6000818152600180840160205260409091200154156121dc57600090815260018083016020526040909120015461231d565b60008061235a6148d8565b846123775760405162461bcd60e51b815260040161201b90614d2e565b6000806123838861219a565b905060006123908961230d565b905060008088841015806123a2575088155b6123e95760405162461bcd60e51b8152602060048201526018602482015277496e73756666696369656e74206c696d69742076616c756560401b604482015260640161201b565b89811080156123f757508315155b801561240b575088158061240b5750888410155b1561248357600084815260018c01602052604090206005015491506124308282614c9f565b905083945060008a821161244557600061244f565b61244f8b83614cd2565b6124599084614cd2565b905061246585826130b6565b61246f908a614c9f565b985061247b8c86612213565b9450506123e9565b801561253657898111156124bb5784935060006124a08b83614cd2565b6124aa9084614cd2565b90506124b78c8683613105565b9650505b600084815260018c01602052604081206002810191909155545b8015612534578481101561251e57600085815260018d016020526040902054811461251a57600085815260018d01602052604080822083905582825290206002018590555b8094505b600090815260018c0160205260409020546124d5565b505b808a111561254b57612548818b614cd2565b96505b848314801561256b5750600083815260018c016020526040902060050154155b156125795760008b556125ad565b8a5485108061259357508a54851480156125935750808a10155b156125ad57838b55600084815260018c0160205260408120555b8a54600090815260018c0160205260409020600201541580156125e457508a5460009081526001808d016020526040909120015415155b1561263d578a5460009081526001808d0160205260408083209091015482529020600201541561262f578a5460009081526001808d016020526040909120015461262f908c906133a5565b61263d8b8c6000015461347d565b8a54600090815260018c01602052604090206003015460ff1615612679578a54600090815260018c0160205260409020600301805460ff191690555b505050505093509350939050565b6000806126926148d8565b846126af5760405162461bcd60e51b815260040161201b90614d2e565b6000806126bb8861230d565b905060006126c88961219a565b905060008088841115806126da575088155b6127215760405162461bcd60e51b8152602060048201526018602482015277496e73756666696369656e74206c696d69742076616c756560401b604482015260640161201b565b898110801561272f57508315155b801561274357508815806127435750888411155b156127bb57600084815260018c01602052604090206005015491506127688282614c9f565b905083945060008a821161277d576000612787565b6127878b83614cd2565b6127919084614cd2565b905061279d85826130b6565b6127a7908a614c9f565b98506127b38c86612b28565b945050612721565b801561286e57898111156127f35784935060006127d88b83614cd2565b6127e29084614cd2565b90506127ef8c8683613105565b9650505b60008481526001808d016020526040822090810191909155545b801561286c578481111561285657600085815260018d01602052604090205481146128525760008581526001808e016020526040808320849055838352909120018590555b8094505b600090815260018c01602052604090205461280d565b505b808a111561288357612880818b614cd2565b96505b84831480156128a35750600083815260018c016020526040902060050154155b156128b15760008b556128e5565b8a548511806128cb57508a54851480156128cb5750808a10155b156128e557838b55600084815260018c0160205260408120555b8a5460009081526001808d016020526040909120015415801561291c57508a54600090815260018c01602052604090206002015415155b1561263d578a5460009081526001808d016020526040808320600201548352909120015415612966578a54600090815260018c016020526040902060020154612966908c9061347d565b61263d8b8c600001546133a5565b6000612981848484612b0a565b61299d5760405162461bcd60e51b815260040161201b90614d8b565b6129a8848484613552565b905061215684846137be565b81546000906129c590600190614cd2565b905060005b818111612b0457828482815481106129e4576129e4614c73565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff161415612af257818114612aab576000848381548110612a3557612a35614c73565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff16905080858381548110612a7257612a72614c73565b90600052602060002090600591828204019190066006026101000a81548165ffffffffffff021916908365ffffffffffff160217905550505b83805480612abb57612abb614ddb565b60019003818190600052602060002090600591828204019190066006026101000a81549065ffffffffffff02191690559055612b04565b80612afc81614cb7565b9150506129ca565b50505050565b6000612b17848484613a7b565b801561219257506121928484613bc4565b600081612b985760405162461bcd60e51b815260206004820152603860248201527f4f7264657253746174697374696373547265652834303129202d205374617274604482015277696e672076616c75652063616e6e6f74206265207a65726f60401b606482015260840161201b565b600082815260018401602052604090206002015415612bd0576000828152600184016020526040902060020154611f16908490613c7d565b5060008181526001830160205260409020545b8015801590612c045750600081815260018401602052604090206002015482145b15611f56576000818152600184016020526040902054909150612be3565b6000808211612c3057600080fd5b6005612c3c8385614df1565b612c4790600a614ce9565b83612c5386600a614ce9565b612c5d9190614df1565b612c679190614cd2565b1015612c7757611f168284614df1565b612c818284614df1565b611f16906001614c9f565b600080612c988461219a565b905060008092505b8381108015612cae57508115155b15612d4057600082815260018601602052604081206005015490612cd284836130b6565b9050612cde8184614c9f565b925085831115612d20576000612cf48785614cd2565b612cfe9083614cd2565b9050612d0e826118fd8386614ce9565b612d189087614c9f565b955050612d2d565b612d2a8286614c9f565b94505b612d378785612213565b93505050612ca0565b505092915050565b600080612d548461230d565b905060008092505b8381108015612d6a57508115155b15612d4057600082815260018601602052604081206005015490612d8e84836130b6565b9050612d9a8184614c9f565b925085831115612ddc576000612db08785614cd2565b612dba9083614cd2565b9050612dca826118fd8386614ce9565b612dd49087614c9f565b955050612de9565b612de68286614c9f565b94505b612df38785612b28565b93505050612d5c565b80612e6f5760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303529202d2056616c756560448201527f20746f20696e736572742063616e6e6f74206265207a65726f00000000000000606482015260840161201b565b81546000905b8015612ed35780915080831015612e9f576000908152600180850160205260409091200154612e75565b80831115612ec0576000908152600184016020526040902060020154612e75565b80831415612ece5750505050565b612e75565b6000838152600185016020526040902084541580612f22575060008381526001808701602052604090912001548414801590612f22575060008381526001860160205260409020600201548414155b15612f505760006004820181905560058201819055612f449086908690613cb5565b612f5085856000613ced565b82815560006001808301829055600283019190915560038201805460ff1916909117905582612f8157838555612fbb565b82841015612fa45760008381526001808701602052604090912001849055612fbb565b600083815260018601602052604090206002018490555b612fc58585613d2d565b5050505050565b6000848152600186016020526040812090612fea8787878787613f98565b905061300e8787838560030160019054906101000a900465ffffffffffff16614137565b613019878783613cb5565b6003820154600160381b900465ffffffffffff1661303c5761303c878783613ced565b50505050505050565b600084815260018601602052604090206003810154610100900465ffffffffffff16613078576120888686868686612fcc565b60006130878787878787613f98565b90506130ab87878460030160079054906101000a900465ffffffffffff1684614137565b61303c878783613ced565b6000612156836118fd61271085614ce9565b60005b6000828152600184016020526040902060020154156130ff57600091825260018301602052604090912060020154906130cb565b50919050565b61310d6148d8565b6000838152600185016020526040902060058101548311156131975760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834313029202d20416d6f756e60448201527f7420746f2066696c6c20697320696e73756666696369656e7400000000000000606482015260840161201b565b60038082015465ffffffffffff610100909104811660008181526006850160209081526040808320815160c08101835281548088168252600160301b8104881694820194909452600160601b9093049095169082015260018401546001600160a01b0316606082015260028401546080820152929093015460a0830152859291905b65ffffffffffff81161580159061322f57508315155b156133345765ffffffffffff8082166000908152600687016020908152604091829020825160c08101845281548086168252600160301b8104861693820193909352600160601b9092049093169181019190915260018201546001600160a01b031660608201526002820154608082015260039091015460a0820181905290925084106132d35760a08201516132c59085614cd2565b935081602001519050613322565b6040518060800160405280836000015165ffffffffffff16815260200183606001516001600160a01b03168152602001858460a001516133139190614cd2565b81526020018990529550600093505b8261332c81614cb7565b935050613219565b613343898984600001516141ac565b5060408601511561339957600088815260018a0160209081526040808320855165ffffffffffff1684526006019091528082209088015160038201805492939192909190613392908490614cd2565b9091555050505b50505050509392505050565b6000818152600180840160205260408083206002810180549154828652928520909301549385905291839055909180156133ed57600081815260018601602052604090208490555b600083815260018601602052604090208290558161340d5782855561345a565b6000828152600180870160205260409091200154841415613443576000828152600180870160205260409091200183905561345a565b600082815260018601602052604090206002018390555b505060008181526001938401602052604080822090940183905591825291902055565b600081815260018084016020526040808320918201805492548385529184206002015493859052839055909180156134c357600081815260018601602052604090208490555b60008381526001860160205260409020829055816134e357828555613530565b60008281526001860160205260409020600201548414156135195760008281526001860160205260409020600201839055613530565b600082815260018087016020526040909120018390555b5050600081815260019093016020526040808420600201839055918352912055565b600061355f848484612b0a565b61357b5760405162461bcd60e51b815260040161201b90614d8b565b50600082815260018085016020908152604080842065ffffffffffff80871680875260068301855295839020835160c08101855281548084168252600160301b8104841696820196909652600160601b909504821693850193909352938201546001600160a01b031660608401526002820154608084015260039182015460a0840181905291810154919490936101009092049091161480156136335750600382015465ffffffffffff858116600160381b90920416145b156136555761364486866000613cb5565b61365086866000613ced565b613727565b600382015465ffffffffffff8581166101009092041614156136b35761368086868360200151613cb5565b60208082015165ffffffffffff1660009081526006840190915260409020805465ffffffffffff60601b19169055613727565b600382015465ffffffffffff858116600160381b909204161415613713576136e086868360400151613ced565b60408082015165ffffffffffff166000908152600684016020522080546bffffffffffff00000000000019169055613727565b613727868683604001518460200151614137565b805165ffffffffffff1660009081526006830160205260408120805471ffffffffffffffffffffffffffffffffffff19168155600180820180546001600160a01b031916905560028201839055600390910182905560048401805491929091613791908490614cd2565b909155505060a08101516005830180546000906137af908490614cd2565b90915550929695505050505050565b806138315760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303729202d2056616c756560448201527f20746f2064656c6574652063616e6e6f74206265207a65726f00000000000000606482015260840161201b565b6000818152600183016020526040812060048101549091908190612fc5576000848152600180870160205260409091200154158061388057506000848152600186016020526040902060020154155b1561388c5750826138d4565b5060008381526001850160205260409020600201545b6000818152600180870160205260409091200154156138d45760009081526001808601602052604090912001546138a2565b600081815260018087016020526040909120015415613908576000818152600180870160205260409091200154915061391f565b600081815260018601602052604090206002015491505b600081815260018601602052604080822054848352912081905580156139905760008181526001808801602052604090912001548214156139755760008181526001808801602052604090912001839055613994565b60008181526001870160205260409020600201839055613994565b8286555b600082815260018701602052604090206003015460ff1615858314613a1e576139be878488614392565b60008681526001888101602052604080832080830154878552828520938401819055845281842087905560028082015490840181905584529083208690556003908101549286905201805460ff191660ff90921615159190911790559194915b8015613a2e57613a2e8785614409565b50506000818152600180870160205260408220828155908101829055600281018290556003810180546cffffffffffffffffffffffffff1916905560048101829055600501555050505050565b600082815260018085016020908152604080842065ffffffffffff808716808752600683018552838720845160c0810186528154808516808352600160301b8204861698830198909852600160601b900490931694830194909452948301546001600160a01b031660608201526002830154608082015260039092015460a08301528593909214613b125760009350505050612156565b5b604081015165ffffffffffff1615613ba55760409081015165ffffffffffff808216600090815260068501602090815290849020845160c08101865281548085168252600160301b8104851693820193909352600160601b9092049092169381019390935260018101546001600160a01b03166060840152600281015460808401526003015460a08301529250613b13565b5060030154610100900465ffffffffffff908116911614949350505050565b600081613bd357506000611f56565b8254821415613be457506001611f56565b815b600081815260018501602052604090205415613c735760008181526001808601602052604080832054808452922001548214801590613c38575060008181526001860160205260409020600201548214155b15613c4857600092505050611f56565b8454811415613c5c57600192505050611f56565b506000908152600184016020526040902054613be6565b5060009392505050565b60005b6000828152600180850160205260409091200154156130ff576000918252600180840160205260409092209091015490613c80565b6000918252600190920160205260409020600301805465ffffffffffff9092166101000266ffffffffffff0019909216919091179055565b6000918252600190920160205260409020600301805465ffffffffffff909216600160381b026cffffffffffff0000000000000019909216919091179055565b60005b82548214801590613d5a5750600082815260018401602052604080822054825290206003015460ff165b15613f76576000828152600180850160205260408083205480845281842054845292200154811415613e7d5760008181526001850160205260408082205482528082206002015480835291206003015490925060ff1615613e03576000818152600180860160205260408083206003808201805460ff19908116909155878652838620820180548216905582548652928520018054909216909217905590829052549250613f70565b6000818152600185016020526040902060020154831415613e2b57809250613e2b84846133a5565b50600082815260018085016020526040808320548084528184206003808201805460ff19908116909155825487529386200180549093169093179091559182905254613e7890859061347d565b613f70565b6000818152600180860160205260408083205483528083209091015480835291206003015490925060ff1615613efb576000818152600180860160205260408083206003808201805460ff19908116909155878652838620820180548216905582548652928520018054909216909217905590829052549250613f70565b6000818152600180860160205260409091200154831415613f2357809250613f23848461347d565b50600082815260018085016020526040808320548084528184206003808201805460ff19908116909155825487529386200180549093169093179091559182905254613f709085906133a5565b50613d30565b505080546000908152600190910160205260409020600301805460ff19169055565b6000848152600186016020908152604080832065ffffffffffff87168452600681019092528220600201541561402b5760405162461bcd60e51b815260206004820152603260248201527f4f7264657253746174697374696373547265652834303929202d204f726465726044820152711034b21030b63932b0b23c9032bc34b9ba1760711b606482015260840161201b565b60018160040160008282546140409190614c9f565b925050819055508281600501600082825461405b9190614c9f565b90915550506040805160c08101825265ffffffffffff808816808352600060208085018281528587018381526001600160a01b03808d16606089019081524260808a0190815260a08a018e81529787526006909b019094529790932095518654915193518616600160601b0265ffffffffffff60601b19948716600160301b026bffffffffffffffffffffffff199093169682169690961791909117929092169390931784559151600184018054919095166001600160a01b031990911617909355925160028201559051600390910155905095945050505050565b60009283526001939093016020908152604080842065ffffffffffff938416808652600690910190925280842080546bffffffffffff0000000000001916600160301b9490961693840295909517909455908252919020805465ffffffffffff60601b1916600160601b909202919091179055565b60006141b9848484612b0a565b6141d55760405162461bcd60e51b815260040161201b90614d8b565b50600082815260018085016020908152604080842065ffffffffffff808716865260068201808552838720845160c08101865281548085168252600160301b8104851682890152600160601b9004841681870152818801546001600160a01b031660608201526002820154608082015260039182015460a08201819052828601546101009004909416808a529290965293909620909201549194909390915b8665ffffffffffff1683146142d857600092835260068501602052604090922054600160301b900465ffffffffffff1691816142af81614cb7565b60008581526006880160205260409020600301549093506142d1915082614c9f565b9050614274565b600385015465ffffffffffff888116600160381b9092041614156143135761430289896000613cb5565b61430e89896000613ced565b614351565b61432289898660200151613cb5565b60208085015165ffffffffffff1660009081526006870190915260409020805465ffffffffffff60601b191690555b818560040160008282546143659190614cd2565b92505081905550808560050160008282546143809190614cd2565b90915550959998505050505050505050565b6000818152600184016020526040808220548483529120819055806143b957828455612b04565b60008181526001808601602052604090912001548214156143ef5760008181526001808601602052604090912001839055612b04565b600090815260019390930160205250604090912060020155565b60005b825482148015906144315750600082815260018401602052604090206003015460ff16155b1561480457600082815260018085016020526040808320548084529220015483141561462d5760008181526001850160205260408082206002015480835291206003015490925060ff16156144d5576000828152600180860160205260408083206003908101805460ff199081169091558585529190932090920180549092161790556144be84826133a5565b600081815260018501602052604090206002015491505b60008281526001808601602052604080832090910154825290206003015460ff161580156145205750600082815260018501602052604080822060020154825290206003015460ff16155b1561454d57600082815260018581016020526040909120600301805460ff191690911790559150816147fe565b600082815260018501602052604080822060020154825290206003015460ff166145ca576000828152600180860160205260408083208083015484529083206003908101805460ff19908116909155938690520180549092161790556145b3848361347d565b600081815260018501602052604090206002015491505b600081815260018501602052604080822060039081018054868552838520808401805460ff909316151560ff19938416179055825482169092556002909101548452919092209091018054909116905561462484826133a5565b835492506147fe565b6000818152600180860160205260408083209091015480835291206003015490925060ff16156146ac576000828152600180860160205260408083206003908101805460ff19908116909155858552919093209092018054909216179055614695848261347d565b600081815260018086016020526040909120015491505b600082815260018501602052604080822060020154825290206003015460ff161580156146f7575060008281526001808601602052604080832090910154825290206003015460ff16155b1561472457600082815260018581016020526040909120600301805460ff191690911790559150816147fe565b60008281526001808601602052604080832090910154825290206003015460ff166147a357600082815260018086016020526040808320600281015484529083206003908101805460ff199081169091559386905201805490921617905561478c84836133a5565b600081815260018086016020526040909120015491505b60008181526001808601602052604080832060039081018054878652838620808401805460ff909316151560ff199384161790558254821690925593015484529220909101805490911690556147f9848261347d565b835492505b5061440c565b506000908152600190910160205260409020600301805460ff19169055565b828054828255906000526020600020906004016005900481019282156148c85791602002820160005b8382111561489457835183826101000a81548165ffffffffffff021916908365ffffffffffff160217905550926020019260060160208160050104928301926001030261484c565b80156148c65782816101000a81549065ffffffffffff0219169055600601602081600501049283019260010302614894565b505b506148d4929150614911565b5090565b6040518060800160405280600065ffffffffffff16815260200160006001600160a01b0316815260200160008152602001600081525090565b5b808211156148d45760008155600101614912565b8035600281106121dc57600080fd5b80356001600160a01b03811681146121dc57600080fd5b600080600080600060a0868803121561496457600080fd5b61496d86614926565b945061497b60208701614935565b935060408601359250606086013591506080860135801515811461499e57600080fd5b809150509295509295909350565b600080604083850312156149bf57600080fd5b6149c883614935565b946020939093013593505050565b600081518084526020808501945080840160005b83811015614a0e57815165ffffffffffff16875295820195908201906001016149ea565b509495945050505050565b608081526000614a2c60808301876149d6565b6020830195909552506040810192909252606090910152919050565b600060208284031215614a5a57600080fd5b5035919050565b600081518084526020808501945080840160005b83811015614a0e57815187529582019590820190600101614a75565b606081526000614aa46060830186614a61565b8281036020840152614ab68186614a61565b90508281036040840152614aca8185614a61565b9695505050505050565b600080600060608486031215614ae957600080fd5b614af284614926565b95602085013595506040909401359392505050565b803565ffffffffffff811681146121dc57600080fd5b60008060408385031215614b3057600080fd5b614b3983614935565b9150614b4760208401614b07565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b60028110614b8457634e487b7160e01b600052602160045260246000fd5b9052565b60608101614b968286614b66565b602082019390935260400152919050565b600060208284031215614bb957600080fd5b61215682614b07565b60c08101614bd08289614b66565b602082019690965260408101949094526001600160a01b03929092166060840152608083015260a090910152919050565b600060208284031215614c1357600080fd5b61215682614935565b604081526000614c2f60408301856149d6565b828103602084015261053281856149d6565b60008060408385031215614c5457600080fd5b6149c883614926565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115614cb257614cb2614c89565b500190565b6000600019821415614ccb57614ccb614c89565b5060010190565b600082821015614ce457614ce4614c89565b500390565b6000816000190483118215151615614d0357614d03614c89565b500290565b600065ffffffffffff80831681811415614d2457614d24614c89565b6001019392505050565b60208082526038908201527f4f7264657253746174697374696373547265652834303829202d20416d6f756e60408201527f7420746f2064726f702063616e6e6f74206265207a65726f0000000000000000606082015260800190565b60208082526030908201527f4f7264657253746174697374696373547265652834313029202d204f7264657260408201526f103237b2b9903737ba1032bc34b9ba1760811b606082015260800190565b634e487b7160e01b600052603160045260246000fd5b600082614e0e57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220907c89a62e1438c3f76f6a2561180b925dcd7b1f1d23c68d431879f14764e5d364736f6c63430008090033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100ff5760003560e01c8063914551f1116100a1578063e3d904d811610070578063e3d904d8146102c8578063e7df768c146102fb578063eebc28f91461030e578063fa6127aa1461032157600080fd5b8063914551f11461026c578063a452c3f81461028c578063d866d355146102ad578063e2afb041146102c057600080fd5b8063614152b9116100dd578063614152b91461019257806363978ac8146101a85780636c5db843146102185780637ce219aa1461024757600080fd5b80633684d3ea146101045780634a53967b146101405780634bf62d1614610170575b600080fd5b81801561011057600080fd5b5061012461011f36600461494c565b610334565b60405165ffffffffffff90911681526020015b60405180910390f35b81801561014c57600080fd5b5061016061015b3660046149ac565b61053b565b6040516101379493929190614a19565b61018361017e366004614a48565b61078e565b60405161013793929190614a91565b61019a610a42565b604051908152602001610137565b8180156101b457600080fd5b506101c86101c3366004614ad4565b610a8c565b60408051845165ffffffffffff1681526020808601516001600160a01b031690820152848201519181019190915260609384015193810193909352608083019190915260a082015260c001610137565b81801561022457600080fd5b50610238610233366004614b1d565b610b5e565b60405161013793929190614b88565b61025a610255366004614ba7565b610cfc565b60405161013796959493929190614bc2565b81801561027857600080fd5b506101606102873660046149ac565b610e8b565b61029f61029a366004614c01565b6110d1565b604051610137929190614c1c565b6101836102bb366004614a48565b61142d565b61019a611674565b6102db6102d6366004614c01565b611686565b604080519485526020850193909352918301526060820152608001610137565b6102db610309366004614c01565b61192e565b61029f61031c366004614c01565b611bb2565b61019a61032f366004614c41565b611ec1565b600061033e611f5c565b9050604051806080016040528087600181111561035d5761035d614b50565b8152602001848152602001610370611fb5565b60030154815260200142815250610385611fb5565b65ffffffffffff831660009081526007919091016020526040902081518154829060ff1916600183818111156103bd576103bd614b50565b0217905550602082015160018201556040820151600282015560609091015160039091015560008660018111156103f6576103f6614b50565b141561049f5761043d838287878661040c611fb5565b6008016000610419611fb5565b600301548152602001908152602001600020611fd99095949392919063ffffffff16565b610445611fb5565b6001600160a01b03861660009081526004919091016020908152604082208054600181018255908352912060058083049091018054919092066006026101000a65ffffffffffff8181021990921691841602179055610532565b60018660018111156104b3576104b3614b50565b1415610532576104d683828787866104c9611fb5565b6009016000610419611fb5565b6104de611fb5565b6001600160a01b0386166000908152600591820160209081526040822080546001810182559083529120828204018054929091066006026101000a65ffffffffffff81810219909316928416029190911790555b95945050505050565b6060600080600080600061054e88611bb2565b915091508161055b611fb5565b60050160008a6001600160a01b03166001600160a01b031681526020019081526020016000209080519060200190610594929190614823565b50815181519095508067ffffffffffffffff8111156105b5576105b5614c5d565b6040519080825280602002602001820160405280156105de578160200160208202803683370190505b50965060005b818110156107815760006105f6611fb5565b600701600085848151811061060d5761060d614c73565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16600181111561065a5761065a614b50565b600181111561066b5761066b614b50565b81526020016001820154815260200160028201548152602001600382015481525050905060006106d482602001518685815181106106ab576106ab614c73565b60200260200101516106bb611fb5565b60008f81526009919091016020526040902091906120a2565b905061071982602001518685815181106106f0576106f0614c73565b6020026020010151610700611fb5565b60008f815260099190910160205260409020919061215d565b6107239089614c9f565b97508060a00151876107359190614c9f565b965080600001518a848151811061074e5761074e614c73565b602002602001019065ffffffffffff16908165ffffffffffff16815250505050808061077990614cb7565b9150506105e4565b5050505092959194509250565b60608060608367ffffffffffffffff8111156107ac576107ac614c5d565b6040519080825280602002602001820160405280156107d5578160200160208202803683370190505b5092508367ffffffffffffffff8111156107f1576107f1614c5d565b60405190808252806020026020018201604052801561081a578160200160208202803683370190505b5091508367ffffffffffffffff81111561083657610836614c5d565b60405190808252806020026020018201604052801561085f578160200160208202803683370190505b509050600061089361086f611fb5565b600801600061087c611fb5565b60030154815260200190815260200160002061219a565b905080846000815181106108a9576108a9614c73565b6020026020010181815250506108ee816108c1611fb5565b60080160006108ce611fb5565b6003015481526020019081526020016000206121e190919063ffffffff16565b8360008151811061090157610901614c73565b60200260200101818152505061094681610919611fb5565b6008016000610926611fb5565b6003015481526020019081526020016000206121fa90919063ffffffff16565b8260008151811061095957610959614c73565b602090810291909101015260015b8451811015610a39578161097a57610a39565b6109b382610986611fb5565b6008016000610993611fb5565b60030154815260200190815260200160002061221390919063ffffffff16565b9150818582815181106109c8576109c8614c73565b6020026020010181815250506109e0826108c1611fb5565b8482815181106109f2576109f2614c73565b602002602001018181525050610a0a82610919611fb5565b838281518110610a1c57610a1c614c73565b602090810291909101015280610a3181614cb7565b915050610967565b50509193909250565b600080610a74610a50611fb5565b6009016000610a5d611fb5565b60030154815260200190815260200160002061230d565b90508015610a825780610a86565b6127105b91505090565b610a946148d8565b6000806001866001811115610aab57610aab614b50565b1415610af857610aec8585610abe611fb5565b6008016000610acb611fb5565b60030154815260200190815260200160002061234f9092919063ffffffff16565b94509092509050610b55565b6000866001811115610b0c57610b0c614b50565b1415610b5557610b4d8585610b1f611fb5565b6009016000610b2c611fb5565b6003015481526020019081526020016000206126879092919063ffffffff16565b945090925090505b93509350939050565b600080600080610b6c611fb5565b65ffffffffffff861660009081526007919091016020526040908190208151608081019092528054829060ff166001811115610baa57610baa614b50565b6001811115610bbb57610bbb614b50565b81526001820154602082015260028201546040820152600390910154606090910152905060008082516001811115610bf557610bf5614b50565b1415610c7657610c3a826020015187610c0c611fb5565b6008016000610c19611fb5565b6003015481526020019081526020016000206129749092919063ffffffff16565b9050610c71610c47611fb5565b6001600160a01b03891660009081526004919091016020526040902065ffffffffffff88166129b4565b610ce6565b600182516001811115610c8b57610c8b614b50565b1415610ce657610caf826020015187610ca2611fb5565b6009016000610c19611fb5565b9050610ce6610cbc611fb5565b6001600160a01b03891660009081526005919091016020526040902065ffffffffffff88166129b4565b8151602090920151919450925090509250925092565b6000806000806000806000610d0f611fb5565b65ffffffffffff891660009081526007919091016020526040908190208151608081019092528054829060ff166001811115610d4d57610d4d614b50565b6001811115610d5e57610d5e614b50565b815260200160018201548152602001600282015481526020016003820154815250509050610dba6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b600082516001811115610dcf57610dcf614b50565b1415610e0a57610e0382602001518a610de6611fb5565b6040808701516000908152600892909201602052902091906120a2565b9050610e3b565b610e3882602001518a610e1b611fb5565b6040808701516000908152600992909201602052902091906120a2565b90505b60608101516001600160a01b031615610e7f5781600001518260200151836040015183606001518460a0015185608001519750975097509750975097505050610e82565b50505b91939550919395565b60606000806000806000610e9e886110d1565b9150915081610eab611fb5565b60040160008a6001600160a01b03166001600160a01b031681526020019081526020016000209080519060200190610ee4929190614823565b50815181519095508067ffffffffffffffff811115610f0557610f05614c5d565b604051908082528060200260200182016040528015610f2e578160200160208202803683370190505b50965060005b81811015610781576000610f46611fb5565b6007016000858481518110610f5d57610f5d614c73565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff166001811115610faa57610faa614b50565b6001811115610fbb57610fbb614b50565b81526020016001820154815260200160028201548152602001600382015481525050905060006110248260200151868581518110610ffb57610ffb614c73565b602002602001015161100b611fb5565b60008f81526008919091016020526040902091906120a2565b9050611069826020015186858151811061104057611040614c73565b6020026020010151611050611fb5565b60008f815260089190910160205260409020919061215d565b6110739089614c9f565b97508060a00151876110859190614c9f565b965080600001518a848151811061109e5761109e614c73565b602002602001019065ffffffffffff16908165ffffffffffff1681525050505080806110c990614cb7565b915050610f34565b60608060008060006110e1611fb5565b600301546110ed611fb5565b6001600160a01b03881660009081526006919091016020526040902054141590508061113d5761111b611fb5565b6001600160a01b03871660009081526004919091016020526040902054611140565b60005b67ffffffffffffffff81111561115857611158614c5d565b604051908082528060200260200182016040528015611181578160200160208202803683370190505b50945061118c611fb5565b6001600160a01b0387166000908152600491909101602052604090205467ffffffffffffffff8111156111c1576111c1614c5d565b6040519080825280602002602001820160405280156111ea578160200160208202803683370190505b50935060005b6111f8611fb5565b6001600160a01b03881660009081526004919091016020526040902054811015611424576000611226611fb5565b6001600160a01b03891660009081526004919091016020526040902080548390811061125457611254614c73565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1690506000611288611fb5565b65ffffffffffff831660009081526007919091016020526040908190208151608081019092528054829060ff1660018111156112c6576112c6614b50565b60018111156112d7576112d7614b50565b81526020016001820154815260200160028201548152602001600382015481525050905061135d81602001518361130c611fb5565b6008016000611319611fb5565b60060160008f6001600160a01b03166001600160a01b03168152602001908152602001600020548152602001908152602001600020612b0a9092919063ffffffff16565b6113ba5761136c600186614c9f565b9450818761137a8886614cd2565b8151811061138a5761138a614c73565b602002602001019065ffffffffffff16908165ffffffffffff1681525050836113b557600188510388525b61140f565b83611407576113ca600187614c9f565b955081886113d88786614cd2565b815181106113e8576113e8614c73565b602002602001019065ffffffffffff16908165ffffffffffff16815250505b600187510387525b5050808061141c90614cb7565b9150506111f0565b50505050915091565b60608060608367ffffffffffffffff81111561144b5761144b614c5d565b604051908082528060200260200182016040528015611474578160200160208202803683370190505b5092508367ffffffffffffffff81111561149057611490614c5d565b6040519080825280602002602001820160405280156114b9578160200160208202803683370190505b5091508367ffffffffffffffff8111156114d5576114d5614c5d565b6040519080825280602002602001820160405280156114fe578160200160208202803683370190505b509050600061150e610a50611fb5565b9050808460008151811061152457611524614c73565b6020026020010181815250506115498161153c611fb5565b60090160006108ce611fb5565b8360008151811061155c5761155c614c73565b60200260200101818152505061158181611574611fb5565b6009016000610926611fb5565b8260008151811061159457611594614c73565b602090810291909101015260015b8451811015610a3957816115b557610a39565b6115ee826115c1611fb5565b60090160006115ce611fb5565b600301548152602001908152602001600020612b2890919063ffffffff16565b91508185828151811061160357611603614c73565b60200260200101818152505061161b8261153c611fb5565b84828151811061162d5761162d614c73565b60200260200101818152505061164582611574611fb5565b83828151811061165757611657614c73565b60209081029190910101528061166c81614cb7565b9150506115a2565b600061168161086f611fb5565b905090565b60008060008060008061169887611bb2565b9150915060005b82518110156117ce5760006116b2611fb5565b60070160008584815181106116c9576116c9614c73565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16600181111561171657611716614b50565b600181111561172757611727614b50565b81526020016001820154815260200160028201548152602001600382015481525050905060006117a5826020015186858151811061176757611767614c73565b6020026020010151611777611fb5565b6009016000611784611fb5565b6003015481526020019081526020016000206120a29092919063ffffffff16565b90508060a00151896117b79190614c9f565b9850505080806117c690614cb7565b91505061169f565b506117d7611fb5565b6001600160a01b0388166000908152600691909101602052604081205493505b815181101561192457600061180a611fb5565b600701600084848151811061182157611821614c73565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16600181111561186e5761186e614b50565b600181111561187f5761187f614b50565b81526020016001820154815260200160028201548152602001600382015481525050905060006118cf82602001518585815181106118bf576118bf614c73565b6020026020010151610e1b611fb5565b90508060a00151886118e19190614c9f565b975061190382602001516127108360a001516118fd9190614ce9565b90612c22565b61190d9088614c9f565b96505050808061191c90614cb7565b9150506117f7565b5050509193509193565b600080600080600080611940876110d1565b9150915061194c611fb5565b6001600160a01b0388166000908152600691909101602052604081205493505b8251811015611a7a57600061197f611fb5565b600701600085848151811061199657611996614c73565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff1660018111156119e3576119e3614b50565b60018111156119f4576119f4614b50565b8152602001600182015481526020016002820154815260200160038201548152505090506000611a518260200151868581518110611a3457611a34614c73565b6020026020010151611a44611fb5565b6008016000611784611fb5565b90508060a0015189611a639190614c9f565b985050508080611a7290614cb7565b91505061196c565b5060005b8151811015611924576000611a91611fb5565b6007016000848481518110611aa857611aa8614c73565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff166001811115611af557611af5614b50565b6001811115611b0657611b06614b50565b81526001820154602082015260028201546040820152600390910154606090910152905084611b3757806040015194505b6000611b638260200151858581518110611b5357611b53614c73565b6020026020010151610de6611fb5565b90508060a0015188611b759190614c9f565b9750611b9182602001516127108360a001516118fd9190614ce9565b611b9b9088614c9f565b965050508080611baa90614cb7565b915050611a7e565b6060806000806000611bc2611fb5565b60030154611bce611fb5565b6001600160a01b038816600090815260069190910160205260409020541415905080611c1e57611bfc611fb5565b6001600160a01b03871660009081526005919091016020526040902054611c21565b60005b67ffffffffffffffff811115611c3957611c39614c5d565b604051908082528060200260200182016040528015611c62578160200160208202803683370190505b509450611c6d611fb5565b6001600160a01b0387166000908152600591909101602052604090205467ffffffffffffffff811115611ca257611ca2614c5d565b604051908082528060200260200182016040528015611ccb578160200160208202803683370190505b50935060005b611cd9611fb5565b6001600160a01b03881660009081526005919091016020526040902054811015611424576000611d07611fb5565b6001600160a01b038916600090815260059190910160205260409020805483908110611d3557611d35614c73565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1690506000611d69611fb5565b65ffffffffffff831660009081526007919091016020526040908190208151608081019092528054829060ff166001811115611da757611da7614b50565b6001811115611db857611db8614b50565b815260200160018201548152602001600282015481526020016003820154815250509050611dfa816020015183611ded611fb5565b6009016000611319611fb5565b611e5757611e09600186614c9f565b94508187611e178886614cd2565b81518110611e2757611e27614c73565b602002602001019065ffffffffffff16908165ffffffffffff168152505083611e5257600188510388525b611eac565b611e62600187614c9f565b955083611ea4578188611e758786614cd2565b81518110611e8557611e85614c73565b602002602001019065ffffffffffff16908165ffffffffffff16815250505b600187510387525b50508080611eb990614cb7565b915050611cd1565b60006001836001811115611ed757611ed7614b50565b1415611f1d57611f1682611ee9611fb5565b6008016000611ef6611fb5565b600301548152602001908152602001600020612c8c90919063ffffffff16565b9050611f56565b611f1682611f29611fb5565b6009016000611f36611fb5565b600301548152602001908152602001600020612d4890919063ffffffff16565b92915050565b6000611f66611fb5565b805465ffffffffffff16906000611f7c83614d08565b91906101000a81548165ffffffffffff021916908365ffffffffffff16021790555050611fa7611fb5565b5465ffffffffffff16919050565b7ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0a90565b600082116120245760405162461bcd60e51b8152602060048201526013602482015272125b9cdd59999a58da595b9d08185b5bdd5b9d606a1b60448201526064015b60405180910390fd5b61271085111561206b5760405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742076616c756560701b604482015260640161201b565b6120758686612dfc565b801561208d576120888686868686612fcc565b61209a565b61209a8686868686613045565b505050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915250600082815260018085016020908152604080842065ffffffffffff80871686526006909101835293819020815160c08101835281548087168252600160301b8104871694820194909452600160601b90930490941690820152908201546001600160a01b031660608201526002820154608082015260039091015460a08201525b9392505050565b6000828152600184016020908152604080832065ffffffffffff851684526006019091528120600301546121929084906130b6565b949350505050565b8054806121a957506000919050565b5b6000818152600183016020526040902060020154156121dc5760009081526001820160205260409020600201546121aa565b919050565b6000908152600191909101602052604090206005015490565b6000908152600191909101602052604090206004015490565b6000816122835760405162461bcd60e51b815260206004820152603860248201527f4f7264657253746174697374696373547265652834303229202d205374617274604482015277696e672076616c75652063616e6e6f74206265207a65726f60401b606482015260840161201b565b6000828152600180850160205260409091200154156122bb576000828152600180850160205260409091200154611f169084906130c8565b5060008181526001830160205260409020545b80158015906122ef5750600081815260018085016020526040909120015482145b15611f565760008181526001840160205260409020549091506122ce565b80548061231c57506000919050565b5b6000818152600180840160205260409091200154156121dc57600090815260018083016020526040909120015461231d565b60008061235a6148d8565b846123775760405162461bcd60e51b815260040161201b90614d2e565b6000806123838861219a565b905060006123908961230d565b905060008088841015806123a2575088155b6123e95760405162461bcd60e51b8152602060048201526018602482015277496e73756666696369656e74206c696d69742076616c756560401b604482015260640161201b565b89811080156123f757508315155b801561240b575088158061240b5750888410155b1561248357600084815260018c01602052604090206005015491506124308282614c9f565b905083945060008a821161244557600061244f565b61244f8b83614cd2565b6124599084614cd2565b905061246585826130b6565b61246f908a614c9f565b985061247b8c86612213565b9450506123e9565b801561253657898111156124bb5784935060006124a08b83614cd2565b6124aa9084614cd2565b90506124b78c8683613105565b9650505b600084815260018c01602052604081206002810191909155545b8015612534578481101561251e57600085815260018d016020526040902054811461251a57600085815260018d01602052604080822083905582825290206002018590555b8094505b600090815260018c0160205260409020546124d5565b505b808a111561254b57612548818b614cd2565b96505b848314801561256b5750600083815260018c016020526040902060050154155b156125795760008b556125ad565b8a5485108061259357508a54851480156125935750808a10155b156125ad57838b55600084815260018c0160205260408120555b8a54600090815260018c0160205260409020600201541580156125e457508a5460009081526001808d016020526040909120015415155b1561263d578a5460009081526001808d0160205260408083209091015482529020600201541561262f578a5460009081526001808d016020526040909120015461262f908c906133a5565b61263d8b8c6000015461347d565b8a54600090815260018c01602052604090206003015460ff1615612679578a54600090815260018c0160205260409020600301805460ff191690555b505050505093509350939050565b6000806126926148d8565b846126af5760405162461bcd60e51b815260040161201b90614d2e565b6000806126bb8861230d565b905060006126c88961219a565b905060008088841115806126da575088155b6127215760405162461bcd60e51b8152602060048201526018602482015277496e73756666696369656e74206c696d69742076616c756560401b604482015260640161201b565b898110801561272f57508315155b801561274357508815806127435750888411155b156127bb57600084815260018c01602052604090206005015491506127688282614c9f565b905083945060008a821161277d576000612787565b6127878b83614cd2565b6127919084614cd2565b905061279d85826130b6565b6127a7908a614c9f565b98506127b38c86612b28565b945050612721565b801561286e57898111156127f35784935060006127d88b83614cd2565b6127e29084614cd2565b90506127ef8c8683613105565b9650505b60008481526001808d016020526040822090810191909155545b801561286c578481111561285657600085815260018d01602052604090205481146128525760008581526001808e016020526040808320849055838352909120018590555b8094505b600090815260018c01602052604090205461280d565b505b808a111561288357612880818b614cd2565b96505b84831480156128a35750600083815260018c016020526040902060050154155b156128b15760008b556128e5565b8a548511806128cb57508a54851480156128cb5750808a10155b156128e557838b55600084815260018c0160205260408120555b8a5460009081526001808d016020526040909120015415801561291c57508a54600090815260018c01602052604090206002015415155b1561263d578a5460009081526001808d016020526040808320600201548352909120015415612966578a54600090815260018c016020526040902060020154612966908c9061347d565b61263d8b8c600001546133a5565b6000612981848484612b0a565b61299d5760405162461bcd60e51b815260040161201b90614d8b565b6129a8848484613552565b905061215684846137be565b81546000906129c590600190614cd2565b905060005b818111612b0457828482815481106129e4576129e4614c73565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff161415612af257818114612aab576000848381548110612a3557612a35614c73565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff16905080858381548110612a7257612a72614c73565b90600052602060002090600591828204019190066006026101000a81548165ffffffffffff021916908365ffffffffffff160217905550505b83805480612abb57612abb614ddb565b60019003818190600052602060002090600591828204019190066006026101000a81549065ffffffffffff02191690559055612b04565b80612afc81614cb7565b9150506129ca565b50505050565b6000612b17848484613a7b565b801561219257506121928484613bc4565b600081612b985760405162461bcd60e51b815260206004820152603860248201527f4f7264657253746174697374696373547265652834303129202d205374617274604482015277696e672076616c75652063616e6e6f74206265207a65726f60401b606482015260840161201b565b600082815260018401602052604090206002015415612bd0576000828152600184016020526040902060020154611f16908490613c7d565b5060008181526001830160205260409020545b8015801590612c045750600081815260018401602052604090206002015482145b15611f56576000818152600184016020526040902054909150612be3565b6000808211612c3057600080fd5b6005612c3c8385614df1565b612c4790600a614ce9565b83612c5386600a614ce9565b612c5d9190614df1565b612c679190614cd2565b1015612c7757611f168284614df1565b612c818284614df1565b611f16906001614c9f565b600080612c988461219a565b905060008092505b8381108015612cae57508115155b15612d4057600082815260018601602052604081206005015490612cd284836130b6565b9050612cde8184614c9f565b925085831115612d20576000612cf48785614cd2565b612cfe9083614cd2565b9050612d0e826118fd8386614ce9565b612d189087614c9f565b955050612d2d565b612d2a8286614c9f565b94505b612d378785612213565b93505050612ca0565b505092915050565b600080612d548461230d565b905060008092505b8381108015612d6a57508115155b15612d4057600082815260018601602052604081206005015490612d8e84836130b6565b9050612d9a8184614c9f565b925085831115612ddc576000612db08785614cd2565b612dba9083614cd2565b9050612dca826118fd8386614ce9565b612dd49087614c9f565b955050612de9565b612de68286614c9f565b94505b612df38785612b28565b93505050612d5c565b80612e6f5760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303529202d2056616c756560448201527f20746f20696e736572742063616e6e6f74206265207a65726f00000000000000606482015260840161201b565b81546000905b8015612ed35780915080831015612e9f576000908152600180850160205260409091200154612e75565b80831115612ec0576000908152600184016020526040902060020154612e75565b80831415612ece5750505050565b612e75565b6000838152600185016020526040902084541580612f22575060008381526001808701602052604090912001548414801590612f22575060008381526001860160205260409020600201548414155b15612f505760006004820181905560058201819055612f449086908690613cb5565b612f5085856000613ced565b82815560006001808301829055600283019190915560038201805460ff1916909117905582612f8157838555612fbb565b82841015612fa45760008381526001808701602052604090912001849055612fbb565b600083815260018601602052604090206002018490555b612fc58585613d2d565b5050505050565b6000848152600186016020526040812090612fea8787878787613f98565b905061300e8787838560030160019054906101000a900465ffffffffffff16614137565b613019878783613cb5565b6003820154600160381b900465ffffffffffff1661303c5761303c878783613ced565b50505050505050565b600084815260018601602052604090206003810154610100900465ffffffffffff16613078576120888686868686612fcc565b60006130878787878787613f98565b90506130ab87878460030160079054906101000a900465ffffffffffff1684614137565b61303c878783613ced565b6000612156836118fd61271085614ce9565b60005b6000828152600184016020526040902060020154156130ff57600091825260018301602052604090912060020154906130cb565b50919050565b61310d6148d8565b6000838152600185016020526040902060058101548311156131975760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834313029202d20416d6f756e60448201527f7420746f2066696c6c20697320696e73756666696369656e7400000000000000606482015260840161201b565b60038082015465ffffffffffff610100909104811660008181526006850160209081526040808320815160c08101835281548088168252600160301b8104881694820194909452600160601b9093049095169082015260018401546001600160a01b0316606082015260028401546080820152929093015460a0830152859291905b65ffffffffffff81161580159061322f57508315155b156133345765ffffffffffff8082166000908152600687016020908152604091829020825160c08101845281548086168252600160301b8104861693820193909352600160601b9092049093169181019190915260018201546001600160a01b031660608201526002820154608082015260039091015460a0820181905290925084106132d35760a08201516132c59085614cd2565b935081602001519050613322565b6040518060800160405280836000015165ffffffffffff16815260200183606001516001600160a01b03168152602001858460a001516133139190614cd2565b81526020018990529550600093505b8261332c81614cb7565b935050613219565b613343898984600001516141ac565b5060408601511561339957600088815260018a0160209081526040808320855165ffffffffffff1684526006019091528082209088015160038201805492939192909190613392908490614cd2565b9091555050505b50505050509392505050565b6000818152600180840160205260408083206002810180549154828652928520909301549385905291839055909180156133ed57600081815260018601602052604090208490555b600083815260018601602052604090208290558161340d5782855561345a565b6000828152600180870160205260409091200154841415613443576000828152600180870160205260409091200183905561345a565b600082815260018601602052604090206002018390555b505060008181526001938401602052604080822090940183905591825291902055565b600081815260018084016020526040808320918201805492548385529184206002015493859052839055909180156134c357600081815260018601602052604090208490555b60008381526001860160205260409020829055816134e357828555613530565b60008281526001860160205260409020600201548414156135195760008281526001860160205260409020600201839055613530565b600082815260018087016020526040909120018390555b5050600081815260019093016020526040808420600201839055918352912055565b600061355f848484612b0a565b61357b5760405162461bcd60e51b815260040161201b90614d8b565b50600082815260018085016020908152604080842065ffffffffffff80871680875260068301855295839020835160c08101855281548084168252600160301b8104841696820196909652600160601b909504821693850193909352938201546001600160a01b031660608401526002820154608084015260039182015460a0840181905291810154919490936101009092049091161480156136335750600382015465ffffffffffff858116600160381b90920416145b156136555761364486866000613cb5565b61365086866000613ced565b613727565b600382015465ffffffffffff8581166101009092041614156136b35761368086868360200151613cb5565b60208082015165ffffffffffff1660009081526006840190915260409020805465ffffffffffff60601b19169055613727565b600382015465ffffffffffff858116600160381b909204161415613713576136e086868360400151613ced565b60408082015165ffffffffffff166000908152600684016020522080546bffffffffffff00000000000019169055613727565b613727868683604001518460200151614137565b805165ffffffffffff1660009081526006830160205260408120805471ffffffffffffffffffffffffffffffffffff19168155600180820180546001600160a01b031916905560028201839055600390910182905560048401805491929091613791908490614cd2565b909155505060a08101516005830180546000906137af908490614cd2565b90915550929695505050505050565b806138315760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303729202d2056616c756560448201527f20746f2064656c6574652063616e6e6f74206265207a65726f00000000000000606482015260840161201b565b6000818152600183016020526040812060048101549091908190612fc5576000848152600180870160205260409091200154158061388057506000848152600186016020526040902060020154155b1561388c5750826138d4565b5060008381526001850160205260409020600201545b6000818152600180870160205260409091200154156138d45760009081526001808601602052604090912001546138a2565b600081815260018087016020526040909120015415613908576000818152600180870160205260409091200154915061391f565b600081815260018601602052604090206002015491505b600081815260018601602052604080822054848352912081905580156139905760008181526001808801602052604090912001548214156139755760008181526001808801602052604090912001839055613994565b60008181526001870160205260409020600201839055613994565b8286555b600082815260018701602052604090206003015460ff1615858314613a1e576139be878488614392565b60008681526001888101602052604080832080830154878552828520938401819055845281842087905560028082015490840181905584529083208690556003908101549286905201805460ff191660ff90921615159190911790559194915b8015613a2e57613a2e8785614409565b50506000818152600180870160205260408220828155908101829055600281018290556003810180546cffffffffffffffffffffffffff1916905560048101829055600501555050505050565b600082815260018085016020908152604080842065ffffffffffff808716808752600683018552838720845160c0810186528154808516808352600160301b8204861698830198909852600160601b900490931694830194909452948301546001600160a01b031660608201526002830154608082015260039092015460a08301528593909214613b125760009350505050612156565b5b604081015165ffffffffffff1615613ba55760409081015165ffffffffffff808216600090815260068501602090815290849020845160c08101865281548085168252600160301b8104851693820193909352600160601b9092049092169381019390935260018101546001600160a01b03166060840152600281015460808401526003015460a08301529250613b13565b5060030154610100900465ffffffffffff908116911614949350505050565b600081613bd357506000611f56565b8254821415613be457506001611f56565b815b600081815260018501602052604090205415613c735760008181526001808601602052604080832054808452922001548214801590613c38575060008181526001860160205260409020600201548214155b15613c4857600092505050611f56565b8454811415613c5c57600192505050611f56565b506000908152600184016020526040902054613be6565b5060009392505050565b60005b6000828152600180850160205260409091200154156130ff576000918252600180840160205260409092209091015490613c80565b6000918252600190920160205260409020600301805465ffffffffffff9092166101000266ffffffffffff0019909216919091179055565b6000918252600190920160205260409020600301805465ffffffffffff909216600160381b026cffffffffffff0000000000000019909216919091179055565b60005b82548214801590613d5a5750600082815260018401602052604080822054825290206003015460ff165b15613f76576000828152600180850160205260408083205480845281842054845292200154811415613e7d5760008181526001850160205260408082205482528082206002015480835291206003015490925060ff1615613e03576000818152600180860160205260408083206003808201805460ff19908116909155878652838620820180548216905582548652928520018054909216909217905590829052549250613f70565b6000818152600185016020526040902060020154831415613e2b57809250613e2b84846133a5565b50600082815260018085016020526040808320548084528184206003808201805460ff19908116909155825487529386200180549093169093179091559182905254613e7890859061347d565b613f70565b6000818152600180860160205260408083205483528083209091015480835291206003015490925060ff1615613efb576000818152600180860160205260408083206003808201805460ff19908116909155878652838620820180548216905582548652928520018054909216909217905590829052549250613f70565b6000818152600180860160205260409091200154831415613f2357809250613f23848461347d565b50600082815260018085016020526040808320548084528184206003808201805460ff19908116909155825487529386200180549093169093179091559182905254613f709085906133a5565b50613d30565b505080546000908152600190910160205260409020600301805460ff19169055565b6000848152600186016020908152604080832065ffffffffffff87168452600681019092528220600201541561402b5760405162461bcd60e51b815260206004820152603260248201527f4f7264657253746174697374696373547265652834303929202d204f726465726044820152711034b21030b63932b0b23c9032bc34b9ba1760711b606482015260840161201b565b60018160040160008282546140409190614c9f565b925050819055508281600501600082825461405b9190614c9f565b90915550506040805160c08101825265ffffffffffff808816808352600060208085018281528587018381526001600160a01b03808d16606089019081524260808a0190815260a08a018e81529787526006909b019094529790932095518654915193518616600160601b0265ffffffffffff60601b19948716600160301b026bffffffffffffffffffffffff199093169682169690961791909117929092169390931784559151600184018054919095166001600160a01b031990911617909355925160028201559051600390910155905095945050505050565b60009283526001939093016020908152604080842065ffffffffffff938416808652600690910190925280842080546bffffffffffff0000000000001916600160301b9490961693840295909517909455908252919020805465ffffffffffff60601b1916600160601b909202919091179055565b60006141b9848484612b0a565b6141d55760405162461bcd60e51b815260040161201b90614d8b565b50600082815260018085016020908152604080842065ffffffffffff808716865260068201808552838720845160c08101865281548085168252600160301b8104851682890152600160601b9004841681870152818801546001600160a01b031660608201526002820154608082015260039182015460a08201819052828601546101009004909416808a529290965293909620909201549194909390915b8665ffffffffffff1683146142d857600092835260068501602052604090922054600160301b900465ffffffffffff1691816142af81614cb7565b60008581526006880160205260409020600301549093506142d1915082614c9f565b9050614274565b600385015465ffffffffffff888116600160381b9092041614156143135761430289896000613cb5565b61430e89896000613ced565b614351565b61432289898660200151613cb5565b60208085015165ffffffffffff1660009081526006870190915260409020805465ffffffffffff60601b191690555b818560040160008282546143659190614cd2565b92505081905550808560050160008282546143809190614cd2565b90915550959998505050505050505050565b6000818152600184016020526040808220548483529120819055806143b957828455612b04565b60008181526001808601602052604090912001548214156143ef5760008181526001808601602052604090912001839055612b04565b600090815260019390930160205250604090912060020155565b60005b825482148015906144315750600082815260018401602052604090206003015460ff16155b1561480457600082815260018085016020526040808320548084529220015483141561462d5760008181526001850160205260408082206002015480835291206003015490925060ff16156144d5576000828152600180860160205260408083206003908101805460ff199081169091558585529190932090920180549092161790556144be84826133a5565b600081815260018501602052604090206002015491505b60008281526001808601602052604080832090910154825290206003015460ff161580156145205750600082815260018501602052604080822060020154825290206003015460ff16155b1561454d57600082815260018581016020526040909120600301805460ff191690911790559150816147fe565b600082815260018501602052604080822060020154825290206003015460ff166145ca576000828152600180860160205260408083208083015484529083206003908101805460ff19908116909155938690520180549092161790556145b3848361347d565b600081815260018501602052604090206002015491505b600081815260018501602052604080822060039081018054868552838520808401805460ff909316151560ff19938416179055825482169092556002909101548452919092209091018054909116905561462484826133a5565b835492506147fe565b6000818152600180860160205260408083209091015480835291206003015490925060ff16156146ac576000828152600180860160205260408083206003908101805460ff19908116909155858552919093209092018054909216179055614695848261347d565b600081815260018086016020526040909120015491505b600082815260018501602052604080822060020154825290206003015460ff161580156146f7575060008281526001808601602052604080832090910154825290206003015460ff16155b1561472457600082815260018581016020526040909120600301805460ff191690911790559150816147fe565b60008281526001808601602052604080832090910154825290206003015460ff166147a357600082815260018086016020526040808320600281015484529083206003908101805460ff199081169091559386905201805490921617905561478c84836133a5565b600081815260018086016020526040909120015491505b60008181526001808601602052604080832060039081018054878652838620808401805460ff909316151560ff199384161790558254821690925593015484529220909101805490911690556147f9848261347d565b835492505b5061440c565b506000908152600190910160205260409020600301805460ff19169055565b828054828255906000526020600020906004016005900481019282156148c85791602002820160005b8382111561489457835183826101000a81548165ffffffffffff021916908365ffffffffffff160217905550926020019260060160208160050104928301926001030261484c565b80156148c65782816101000a81549065ffffffffffff0219169055600601602081600501049283019260010302614894565b505b506148d4929150614911565b5090565b6040518060800160405280600065ffffffffffff16815260200160006001600160a01b0316815260200160008152602001600081525090565b5b808211156148d45760008155600101614912565b8035600281106121dc57600080fd5b80356001600160a01b03811681146121dc57600080fd5b600080600080600060a0868803121561496457600080fd5b61496d86614926565b945061497b60208701614935565b935060408601359250606086013591506080860135801515811461499e57600080fd5b809150509295509295909350565b600080604083850312156149bf57600080fd5b6149c883614935565b946020939093013593505050565b600081518084526020808501945080840160005b83811015614a0e57815165ffffffffffff16875295820195908201906001016149ea565b509495945050505050565b608081526000614a2c60808301876149d6565b6020830195909552506040810192909252606090910152919050565b600060208284031215614a5a57600080fd5b5035919050565b600081518084526020808501945080840160005b83811015614a0e57815187529582019590820190600101614a75565b606081526000614aa46060830186614a61565b8281036020840152614ab68186614a61565b90508281036040840152614aca8185614a61565b9695505050505050565b600080600060608486031215614ae957600080fd5b614af284614926565b95602085013595506040909401359392505050565b803565ffffffffffff811681146121dc57600080fd5b60008060408385031215614b3057600080fd5b614b3983614935565b9150614b4760208401614b07565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b60028110614b8457634e487b7160e01b600052602160045260246000fd5b9052565b60608101614b968286614b66565b602082019390935260400152919050565b600060208284031215614bb957600080fd5b61215682614b07565b60c08101614bd08289614b66565b602082019690965260408101949094526001600160a01b03929092166060840152608083015260a090910152919050565b600060208284031215614c1357600080fd5b61215682614935565b604081526000614c2f60408301856149d6565b828103602084015261053281856149d6565b60008060408385031215614c5457600080fd5b6149c883614926565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115614cb257614cb2614c89565b500190565b6000600019821415614ccb57614ccb614c89565b5060010190565b600082821015614ce457614ce4614c89565b500390565b6000816000190483118215151615614d0357614d03614c89565b500290565b600065ffffffffffff80831681811415614d2457614d24614c89565b6001019392505050565b60208082526038908201527f4f7264657253746174697374696373547265652834303829202d20416d6f756e60408201527f7420746f2064726f702063616e6e6f74206265207a65726f0000000000000000606082015260800190565b60208082526030908201527f4f7264657253746174697374696373547265652834313029202d204f7264657260408201526f103237b2b9903737ba1032bc34b9ba1760811b606082015260800190565b634e487b7160e01b600052603160045260246000fd5b600082614e0e57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220907c89a62e1438c3f76f6a2561180b925dcd7b1f1d23c68d431879f14764e5d364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}