{
  "address": "0x7aF50fD21c40ab3128927b9a4E4368922c609B78",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "ProtocolTypes.Side"
        },
        {
          "internalType": "uint256",
          "name": "_futureValue",
          "type": "uint256"
        }
      ],
      "name": "estimateFilledAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getActiveBorrowOrderIds",
      "outputs": [
        {
          "internalType": "uint48[]",
          "name": "activeOrderIds",
          "type": "uint48[]"
        },
        {
          "internalType": "uint48[]",
          "name": "inActiveOrderIds",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getActiveLendOrderIds",
      "outputs": [
        {
          "internalType": "uint48[]",
          "name": "activeOrderIds",
          "type": "uint48[]"
        },
        {
          "internalType": "uint48[]",
          "name": "inActiveOrderIds",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getBorrowOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHighestBorrowUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getLendOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLowestLendUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint48",
          "name": "_orderId",
          "type": "uint48"
        }
      ],
      "name": "getOrder",
      "outputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "ProtocolTypes.Side"
        },
        {
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalAmountFromBorrowOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalAmountFromLendOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x06ec551fb70ee3baab4ff0306b2159942dd9f3f3889ef1067f367b689bb37eca",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x7aF50fD21c40ab3128927b9a4E4368922c609B78",
    "transactionIndex": 28,
    "gasUsed": "4348809",
    "logsBloom": "0x
    "blockHash": "0x3787686ef576b9ced939d18fedf1ad22bc9c98171d7b2d42cb1524db764f0013",
    "transactionHash": "0x06ec551fb70ee3baab4ff0306b2159942dd9f3f3889ef1067f367b689bb37eca",
    "logs": [],
    "blockNumber": 8104751,
    "cumulativeGasUsed": "12119472",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "812031abb9c060713bf3d8062f532a78",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"ProtocolTypes.Side\"},{\"internalType\":\"uint256\",\"name\":\"_futureValue\",\"type\":\"uint256\"}],\"name\":\"estimateFilledAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getActiveBorrowOrderIds\",\"outputs\":[{\"internalType\":\"uint48[]\",\"name\":\"activeOrderIds\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48[]\",\"name\":\"inActiveOrderIds\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getActiveLendOrderIds\",\"outputs\":[{\"internalType\":\"uint48[]\",\"name\":\"activeOrderIds\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48[]\",\"name\":\"inActiveOrderIds\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getBorrowOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHighestBorrowUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getLendOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLowestLendUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_orderId\",\"type\":\"uint48\"}],\"name\":\"getOrder\",\"outputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"ProtocolTypes.Side\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalAmountFromBorrowOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalAmountFromLendOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/OrderBookLogic.sol\":\"OrderBookLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport {MarketOrder} from \\\"../storages/LendingMarketStorage.sol\\\";\\n\\ninterface ILendingMarket {\\n    event CancelOrder(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event MakeOrder(\\n        uint48 orderId,\\n        uint48 originalOrderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event TakeOrders(\\n        address indexed taker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 filledAmount,\\n        uint256 unitPrice,\\n        uint256 filledFutureValue\\n    );\\n\\n    event CleanOrders(\\n        uint48[] orderIds,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 maturity\\n    );\\n\\n    event OpenMarket(uint256 maturity, uint256 prevMaturity);\\n\\n    struct Market {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        uint256 genesisDate;\\n        uint256 borrowUnitPrice;\\n        uint256 lendUnitPrice;\\n        uint256 midUnitPrice;\\n    }\\n\\n    function getMarket() external view returns (Market memory);\\n\\n    function getBorrowUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getLendUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getMidUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getBorrowOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturity() external view returns (uint256);\\n\\n    function getCurrency() external view returns (bytes32);\\n\\n    function isMatured() external view returns (bool);\\n\\n    function isOpened() external view returns (bool);\\n\\n    function getOrder(uint48 _orderId)\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        );\\n\\n    function getTotalAmountFromLendOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getTotalAmountFromBorrowOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getActiveLendOrderIds(address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds);\\n\\n    function getActiveBorrowOrderIds(address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds);\\n\\n    function estimateFilledAmount(ProtocolTypes.Side _side, uint256 _futureValue)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function openMarket(uint256 maturity) external returns (uint256);\\n\\n    function cancelOrder(address user, uint48 orderId)\\n        external\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        );\\n\\n    function cleanOrders(address _user)\\n        external\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        );\\n\\n    function createOrder(\\n        ProtocolTypes.Side side,\\n        address account,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        bool ignoreRemainingAmount\\n    ) external returns (uint256 executedRate, uint256 remainingAmount);\\n\\n    function pauseMarket() external;\\n\\n    function unpauseMarket() external;\\n}\\n\",\"keccak256\":\"0xdaddf47c580c339bc1ffe7cb8f2990b1d93c0831b896d1d2ce18d56473b3a821\",\"license\":\"MIT\"},\"contracts/libraries/HitchensOrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// types\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\n\\nstruct RemainingOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 unitPrice;\\n}\\n\\nstruct OrderItem {\\n    uint48 orderId;\\n    uint48 next;\\n    uint48 prev;\\n    address maker;\\n    uint256 timestamp;\\n    uint256 amount;\\n}\\n\\n/**\\n * @notice HitchensOrderStatisticsTreeLib is a Red-Black Tree binary search library\\n * based on the following library that is extended to manage order data.\\n *\\n * https://github.com/rob-Hitchens/OrderStatisticsTree\\n *\\n */\\nlibrary HitchensOrderStatisticsTreeLib {\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint48 head;\\n        uint48 tail;\\n        uint256 orderCounter;\\n        uint256 orderTotalAmount;\\n        mapping(uint256 => OrderItem) orders;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].right != EMPTY) {\\n            _value = self.nodes[_value].right;\\n        }\\n    }\\n\\n    function next(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(401) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].right != EMPTY) {\\n            _cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(402) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].left != EMPTY) {\\n            _cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint256 value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        // if (self.nodes[value].parent != EMPTY) return true;\\n        uint256 cursor = value;\\n        while (self.nodes[cursor].parent != EMPTY) {\\n            uint256 parent = self.nodes[cursor].parent;\\n            if (self.nodes[parent].left != cursor && self.nodes[parent].right != cursor) {\\n                return false;\\n            }\\n            if (parent == self.root) {\\n                return true;\\n            }\\n            cursor = self.nodes[cursor].parent;\\n        }\\n        return false;\\n    }\\n\\n    function isActiveOrderId(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        return orderIdExists(self, value, orderId) && exists(self, value);\\n    }\\n\\n    function getNode(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n        return (\\n            gn.parent,\\n            gn.left,\\n            gn.right,\\n            gn.red,\\n            gn.head,\\n            gn.tail,\\n            gn.orderCounter,\\n            gn.orderTotalAmount\\n        );\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function getNodeTotalAmount(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint256 totalAmount)\\n    {\\n        return self.nodes[value].orderTotalAmount;\\n    }\\n\\n    function getNodeOrderIds(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint48[] memory orderIds)\\n    {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[gn.head];\\n        orderIds = new uint48[](gn.orderCounter);\\n\\n        for (uint256 i = 0; i < gn.orderCounter; i++) {\\n            orderIds[i] = order.orderId;\\n            order = gn.orders[order.next];\\n        }\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256 _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(405) - Value to insert cannot be zero\\\");\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                return;\\n            }\\n        }\\n\\n        Node storage nValue = self.nodes[value];\\n        // Update order info as a new one if there is already an old node\\n        if (\\n            self.root == EMPTY ||\\n            (self.nodes[cursor].left != value && self.nodes[cursor].right != value)\\n        ) {\\n            nValue.orderCounter = 0;\\n            nValue.orderTotalAmount = 0;\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        }\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(407) - Value to delete cannot be zero\\\");\\n        Node storage nValue = self.nodes[value];\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint256 a,\\n        uint256 b\\n    ) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    function estimateDroppedAmountFromLeft(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = first(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV) / cursorNodeAmountInFV;\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n    }\\n\\n    function estimateDroppedAmountFromRight(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = last(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV) / cursorNodeAmountInFV;\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n    }\\n\\n    function dropLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            RemainingOrder memory remainingOrder\\n        )\\n    {\\n        require(amount != EMPTY, \\\"OrderStatisticsTree(408) - Amount to drop cannot be zero\\\");\\n        uint256 value;\\n        uint256 cursor = first(self);\\n        uint256 lastNode = last(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor <= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (\\n            totalAmount < amount && cursor != EMPTY && (limitValue == 0 || cursor <= limitValue)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            uint256 filledAmount = cursorNodeAmount -\\n                (totalAmount > amount ? totalAmount - amount : 0);\\n            filledFutureValue += _calculateFutureValue(cursor, filledAmount);\\n\\n            cursor = next(self, cursor);\\n        }\\n\\n        if (totalAmount >= amount || value == limitValue) {\\n            if (totalAmount > amount) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                uint256 filledNodeAmount = cursorNodeAmount - (totalAmount - amount);\\n                remainingOrder = fillOrders(self, cursor, filledNodeAmount);\\n            }\\n\\n            self.nodes[cursor].left = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            while (parent != EMPTY) {\\n                if (parent > cursor) {\\n                    // Relink the nodes\\n                    if (self.nodes[cursor].parent != parent) {\\n                        self.nodes[cursor].parent = parent;\\n                        self.nodes[parent].left = cursor;\\n                    }\\n\\n                    cursor = parent;\\n                }\\n\\n                parent = self.nodes[parent].parent;\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        if (lastNode == value && self.nodes[lastNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value > self.root || (value == self.root && amount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        if (self.nodes[self.root].left == 0 && self.nodes[self.root].right != 0) {\\n            if (self.nodes[self.nodes[self.root].right].left != 0) {\\n                rotateRight(self, self.nodes[self.root].right);\\n            }\\n            rotateLeft(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function dropRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            RemainingOrder memory remainingOrder\\n        )\\n    {\\n        require(amount != EMPTY, \\\"OrderStatisticsTree(408) - Amount to drop cannot be zero\\\");\\n        uint256 value;\\n        uint256 cursor = last(self);\\n        uint256 firstNode = first(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor >= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (\\n            totalAmount < amount && cursor != EMPTY && (limitValue == 0 || cursor >= limitValue)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            uint256 filledAmount = cursorNodeAmount -\\n                (totalAmount > amount ? totalAmount - amount : 0);\\n            filledFutureValue += _calculateFutureValue(cursor, filledAmount);\\n\\n            cursor = prev(self, cursor);\\n        }\\n\\n        if (totalAmount >= amount || value == limitValue) {\\n            if (totalAmount > amount) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                uint256 filledNodeAmount = cursorNodeAmount - (totalAmount - amount);\\n                remainingOrder = fillOrders(self, cursor, filledNodeAmount);\\n            }\\n\\n            self.nodes[cursor].right = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            while (parent != EMPTY) {\\n                if (parent < cursor) {\\n                    // Relink the nodes\\n                    if (self.nodes[cursor].parent != parent) {\\n                        self.nodes[cursor].parent = parent;\\n                        self.nodes[parent].right = cursor;\\n                    }\\n\\n                    cursor = parent;\\n                }\\n\\n                parent = self.nodes[parent].parent;\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        if (firstNode == value && self.nodes[firstNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value < self.root || (value == self.root && amount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        if (self.nodes[self.root].right == 0 && self.nodes[self.root].left != 0) {\\n            if (self.nodes[self.nodes[self.root].left].right != 0) {\\n                rotateLeft(self, self.nodes[self.root].left);\\n            }\\n            rotateRight(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function getFutureValue(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (uint256) {\\n        return _calculateFutureValue(value, self.nodes[value].orders[orderId].amount);\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (OrderItem memory) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orders[orderId];\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function orderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        uint48 cursor = orderId;\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[cursor];\\n\\n        if (order.orderId != cursor) {\\n            return false;\\n        }\\n\\n        while (order.prev != EMPTY) {\\n            cursor = order.prev;\\n            order = gn.orders[cursor];\\n        }\\n\\n        return cursor == gn.head;\\n    }\\n\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount,\\n        bool isInterruption\\n    ) internal {\\n        require(amount > 0, \\\"Insufficient amount\\\");\\n        insert(self, value);\\n\\n        if (isInterruption) {\\n            addHead(self, value, orderId, user, amount);\\n        } else {\\n            addTail(self, value, orderId, user, amount);\\n        }\\n    }\\n\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        amount = _removeOrder(self, value, orderId);\\n        remove(self, value);\\n    }\\n\\n    /**\\n     * @dev Reduces order amount once market order taken.\\n     */\\n    function fillOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount\\n    ) internal returns (RemainingOrder memory remainingOrder) {\\n        Node storage gn = self.nodes[value];\\n\\n        require(\\n            gn.orderTotalAmount >= _amount,\\n            \\\"OrderStatisticsTree(410) - Amount to fill is insufficient\\\"\\n        );\\n\\n        uint256 remainingAmount = _amount;\\n        uint256 filledCount = 0;\\n        OrderItem memory currentOrder = gn.orders[gn.head];\\n        uint48 orderId = gn.head;\\n\\n        while (orderId != 0 && remainingAmount != 0) {\\n            currentOrder = gn.orders[orderId];\\n\\n            if (currentOrder.amount <= remainingAmount) {\\n                remainingAmount -= currentOrder.amount;\\n                orderId = currentOrder.next;\\n            } else {\\n                remainingOrder = RemainingOrder(\\n                    currentOrder.orderId,\\n                    currentOrder.maker,\\n                    currentOrder.amount - remainingAmount,\\n                    value\\n                );\\n                remainingAmount = 0;\\n            }\\n\\n            filledCount++;\\n        }\\n\\n        _dropOrders(self, value, currentOrder.orderId);\\n\\n        if (remainingOrder.amount > 0) {\\n            // NOTE: This order that the filled partially was dropped from a node, and the unfilled amount\\n            // will be inserted newly as a new orders.\\n            // However, that filled order amount is used when future value is calculated from inactive order.\\n            // For that calculation, this order amount needs to be updated by an actual filled amount at this point.\\n            OrderItem storage order = self.nodes[value].orders[currentOrder.orderId];\\n            order.amount -= remainingOrder.amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n        uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n        _link(self, _value, orderId, gn.head);\\n        _setHead(self, _value, orderId);\\n        if (gn.tail == 0) _setTail(self, _value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, _value, _orderId, _user, _amount);\\n        } else {\\n            uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n            _link(self, _value, gn.tail, orderId);\\n            _setTail(self, _value, orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint48) {\\n        Node storage gn = self.nodes[value];\\n        require(\\n            gn.orders[orderId].timestamp == 0,\\n            \\\"OrderStatisticsTree(409) - Order id already exist.\\\"\\n        );\\n\\n        gn.orderCounter += 1;\\n        gn.orderTotalAmount += amount;\\n        OrderItem memory order = OrderItem(orderId, 0, 0, user, block.timestamp, amount);\\n        gn.orders[orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the list.\\n     */\\n    function _removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n        gn.orderTotalAmount -= order.amount;\\n    }\\n\\n    /**\\n     * @dev Drop the OrderItems older than or equal `orderId` from the list\\n     */\\n    function _dropOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n        uint256 cursor = gn.head;\\n        uint256 removedCount = 1;\\n        uint256 removedAmount = gn.orders[cursor].amount;\\n\\n        while (cursor != orderId) {\\n            cursor = gn.orders[cursor].next;\\n            removedCount++;\\n            removedAmount += gn.orders[cursor].amount;\\n        }\\n\\n        if (gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        }\\n\\n        gn.orderCounter -= removedCount;\\n        gn.orderTotalAmount -= removedAmount;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 _prevId,\\n        uint48 _nextId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[_prevId].next = _nextId;\\n        gn.orders[_nextId].prev = _prevId;\\n    }\\n\\n    function _calculateFutureValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * ProtocolTypes.PRICE_DIGIT) / unitPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xe32c29c21e8197e9096eed0f7074dba3c9e396d4d3c997310cd3bf9fe6a0d53a\",\"license\":\"MIT\"},\"contracts/libraries/OrderBookLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ILendingMarket} from \\\"../interfaces/ILendingMarket.sol\\\";\\nimport {HitchensOrderStatisticsTreeLib, RemainingOrder, OrderItem} from \\\"../libraries/HitchensOrderStatisticsTreeLib.sol\\\";\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {LendingMarketStorage as Storage, MarketOrder} from \\\"../storages/LendingMarketStorage.sol\\\";\\n\\nlibrary OrderBookLogic {\\n    using HitchensOrderStatisticsTreeLib for HitchensOrderStatisticsTreeLib.Tree;\\n\\n    function getHighestBorrowUnitPrice() public view returns (uint256) {\\n        return Storage.slot().borrowOrders[Storage.slot().maturity].last();\\n    }\\n\\n    function getLowestLendUnitPrice() public view returns (uint256) {\\n        return Storage.slot().lendOrders[Storage.slot().maturity].first();\\n    }\\n\\n    function getBorrowOrderBook(uint256 _limit)\\n        public\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].last();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeTotalAmount(\\n            unitPrice\\n        );\\n        quantities[0] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeCount(\\n            unitPrice\\n        );\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].prev(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeTotalAmount(\\n                unitPrice\\n            );\\n            quantities[i] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeCount(\\n                unitPrice\\n            );\\n        }\\n    }\\n\\n    function getLendOrderBook(uint256 _limit)\\n        public\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = Storage.slot().lendOrders[Storage.slot().maturity].first();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\\n            unitPrice\\n        );\\n        quantities[0] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeCount(unitPrice);\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = Storage.slot().lendOrders[Storage.slot().maturity].next(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\\n                unitPrice\\n            );\\n            quantities[i] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeCount(\\n                unitPrice\\n            );\\n        }\\n    }\\n\\n    function getOrder(uint48 _orderId)\\n        public\\n        view\\n        returns (\\n            ProtocolTypes.Side side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        )\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n\\n        OrderItem memory orderItem;\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            orderItem = Storage.slot().lendOrders[marketOrder.maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n        } else {\\n            orderItem = Storage.slot().borrowOrders[marketOrder.maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n        }\\n\\n        if (orderItem.maker != address(0)) {\\n            return (\\n                marketOrder.side,\\n                marketOrder.unitPrice,\\n                marketOrder.maturity,\\n                orderItem.maker,\\n                orderItem.amount,\\n                orderItem.timestamp\\n            );\\n        }\\n    }\\n\\n    function getTotalAmountFromLendOrders(address _user)\\n        public\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds) = getActiveLendOrderIds(\\n            _user\\n        );\\n\\n        maturity = Storage.slot().userCurrentMaturities[_user];\\n\\n        for (uint256 i = 0; i < activeOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[activeOrderIds[i]];\\n            // Sum future values in the current maturity.\\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\\n            // as an order canceled in the past market.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .lendOrders[Storage.slot().maturity]\\n                .getOrderById(marketOrder.unitPrice, activeOrderIds[i]);\\n            activeAmount += orderItem.amount;\\n        }\\n\\n        for (uint256 i = 0; i < inActiveOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveOrderIds[i]];\\n            if (maturity == 0) {\\n                maturity = marketOrder.maturity;\\n            }\\n            // Sum future values in the maturity of orders\\n            // It will be the future value when the order is created, even if the market is rotated\\n            // and maturity is updated.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .lendOrders[marketOrder.maturity]\\n                .getOrderById(marketOrder.unitPrice, inActiveOrderIds[i]);\\n            inactiveAmount += orderItem.amount;\\n            inactiveFutureValue +=\\n                (orderItem.amount * ProtocolTypes.PRICE_DIGIT) /\\n                marketOrder.unitPrice;\\n        }\\n    }\\n\\n    function getTotalAmountFromBorrowOrders(address _user)\\n        public\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        (\\n            uint48[] memory activeOrderIds,\\n            uint48[] memory inActiveOrderIds\\n        ) = getActiveBorrowOrderIds(_user);\\n\\n        for (uint256 i = 0; i < activeOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[activeOrderIds[i]];\\n            // Sum future values in the current maturity.\\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\\n            // as an order canceled in the past market.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .borrowOrders[Storage.slot().maturity]\\n                .getOrderById(marketOrder.unitPrice, activeOrderIds[i]);\\n            activeAmount += orderItem.amount;\\n        }\\n\\n        maturity = Storage.slot().userCurrentMaturities[_user];\\n\\n        for (uint256 i = 0; i < inActiveOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveOrderIds[i]];\\n            // Sum future values in the maturity of orders\\n            // It will be the future value when the order is created, even if the market is rotated\\n            // and maturity is updated.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .borrowOrders[marketOrder.maturity]\\n                .getOrderById(marketOrder.unitPrice, inActiveOrderIds[i]);\\n            inactiveAmount += orderItem.amount;\\n            inactiveFutureValue +=\\n                (orderItem.amount * ProtocolTypes.PRICE_DIGIT) /\\n                marketOrder.unitPrice;\\n        }\\n    }\\n\\n    function getActiveLendOrderIds(address _user)\\n        public\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        bool isPastMaturity = Storage.slot().userCurrentMaturities[_user] !=\\n            Storage.slot().maturity;\\n\\n        activeOrderIds = new uint48[](\\n            isPastMaturity ? 0 : Storage.slot().activeLendOrderIds[_user].length\\n        );\\n        inActiveOrderIds = new uint48[](Storage.slot().activeLendOrderIds[_user].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().activeLendOrderIds[_user].length; i++) {\\n            uint48 orderId = Storage.slot().activeLendOrderIds[_user][i];\\n            MarketOrder memory marketOrder = Storage.slot().orders[orderId];\\n\\n            if (\\n                !Storage\\n                    .slot()\\n                    .lendOrders[Storage.slot().userCurrentMaturities[_user]]\\n                    .isActiveOrderId(marketOrder.unitPrice, orderId)\\n            ) {\\n                inActiveOrderCount += 1;\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                if (!isPastMaturity) {\\n                    activeOrderCount += 1;\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function getActiveBorrowOrderIds(address _user)\\n        public\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        bool isPastMaturity = Storage.slot().userCurrentMaturities[_user] !=\\n            Storage.slot().maturity;\\n\\n        activeOrderIds = new uint48[](\\n            isPastMaturity ? 0 : Storage.slot().activeBorrowOrderIds[_user].length\\n        );\\n        inActiveOrderIds = new uint48[](Storage.slot().activeBorrowOrderIds[_user].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().activeBorrowOrderIds[_user].length; i++) {\\n            uint48 orderId = Storage.slot().activeBorrowOrderIds[_user][i];\\n            MarketOrder memory marketOrder = Storage.slot().orders[orderId];\\n\\n            if (\\n                !Storage\\n                    .slot()\\n                    .borrowOrders[Storage.slot().userCurrentMaturities[_user]]\\n                    .isActiveOrderId(marketOrder.unitPrice, orderId)\\n            ) {\\n                inActiveOrderCount += 1;\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                if (!isPastMaturity) {\\n                    activeOrderCount += 1;\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function estimateFilledAmount(ProtocolTypes.Side _side, uint256 _futureValue)\\n        public\\n        view\\n        returns (uint256 amount)\\n    {\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            return\\n                Storage.slot().lendOrders[Storage.slot().maturity].estimateDroppedAmountFromLeft(\\n                    _futureValue\\n                );\\n        } else {\\n            return\\n                Storage.slot().borrowOrders[Storage.slot().maturity].estimateDroppedAmountFromRight(\\n                    _futureValue\\n                );\\n        }\\n    }\\n\\n    function insertOrder(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice,\\n        bool _isInterruption\\n    ) public returns (uint48 orderId) {\\n        orderId = nextOrderId();\\n        Storage.slot().orders[orderId] = MarketOrder(\\n            _side,\\n            _unitPrice,\\n            Storage.slot().maturity,\\n            block.timestamp\\n        );\\n\\n        if (_side == ProtocolTypes.Side.LEND) {\\n            Storage.slot().lendOrders[Storage.slot().maturity].insertOrder(\\n                _unitPrice,\\n                orderId,\\n                _user,\\n                _amount,\\n                _isInterruption\\n            );\\n            Storage.slot().activeLendOrderIds[_user].push(orderId);\\n        } else if (_side == ProtocolTypes.Side.BORROW) {\\n            Storage.slot().borrowOrders[Storage.slot().maturity].insertOrder(\\n                _unitPrice,\\n                orderId,\\n                _user,\\n                _amount,\\n                _isInterruption\\n            );\\n            Storage.slot().activeBorrowOrderIds[_user].push(orderId);\\n        }\\n    }\\n\\n    function dropOrders(\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    )\\n        public\\n        returns (\\n            RemainingOrder memory remainingOrder,\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount\\n        )\\n    {\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            (filledFutureValue, remainingAmount, remainingOrder) = Storage\\n                .slot()\\n                .lendOrders[Storage.slot().maturity]\\n                .dropLeft(_amount, _unitPrice);\\n        } else if (_side == ProtocolTypes.Side.LEND) {\\n            (filledFutureValue, remainingAmount, remainingOrder) = Storage\\n                .slot()\\n                .borrowOrders[Storage.slot().maturity]\\n                .dropRight(_amount, _unitPrice);\\n        }\\n    }\\n\\n    function cleanLendOrders(address _user, uint256 _maturity)\\n        public\\n        returns (\\n            uint48[] memory orderIds,\\n            uint256 activeOrderCount,\\n            uint256 removedFutureValue,\\n            uint256 removedOrderAmount\\n        )\\n    {\\n        (\\n            uint48[] memory activeLendOrderIds,\\n            uint48[] memory inActiveLendOrderIds\\n        ) = getActiveLendOrderIds(_user);\\n\\n        Storage.slot().activeLendOrderIds[_user] = activeLendOrderIds;\\n        activeOrderCount = activeLendOrderIds.length;\\n        uint256 inactiveOrderCount = inActiveLendOrderIds.length;\\n        orderIds = new uint48[](inactiveOrderCount);\\n\\n        for (uint256 i = 0; i < inactiveOrderCount; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveLendOrderIds[i]];\\n            OrderItem memory orderItem = Storage.slot().lendOrders[_maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                inActiveLendOrderIds[i]\\n            );\\n            removedFutureValue += Storage.slot().lendOrders[_maturity].getFutureValue(\\n                marketOrder.unitPrice,\\n                inActiveLendOrderIds[i]\\n            );\\n            removedOrderAmount += orderItem.amount;\\n\\n            orderIds[i] = orderItem.orderId;\\n        }\\n    }\\n\\n    function cleanBorrowOrders(address _user, uint256 _maturity)\\n        public\\n        returns (\\n            uint48[] memory orderIds,\\n            uint256 activeOrderCount,\\n            uint256 removedFutureValue,\\n            uint256 removedOrderAmount\\n        )\\n    {\\n        (\\n            uint48[] memory activeBorrowOrderIds,\\n            uint48[] memory inActiveBorrowOrderIds\\n        ) = getActiveBorrowOrderIds(_user);\\n\\n        Storage.slot().activeBorrowOrderIds[_user] = activeBorrowOrderIds;\\n        activeOrderCount = activeBorrowOrderIds.length;\\n        uint256 inactiveOrderCount = inActiveBorrowOrderIds.length;\\n        orderIds = new uint48[](inactiveOrderCount);\\n\\n        for (uint256 i = 0; i < inactiveOrderCount; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveBorrowOrderIds[i]];\\n            OrderItem memory orderItem = Storage.slot().borrowOrders[_maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                inActiveBorrowOrderIds[i]\\n            );\\n            removedFutureValue += Storage.slot().borrowOrders[_maturity].getFutureValue(\\n                marketOrder.unitPrice,\\n                inActiveBorrowOrderIds[i]\\n            );\\n\\n            removedOrderAmount += orderItem.amount;\\n\\n            orderIds[i] = orderItem.orderId;\\n        }\\n    }\\n\\n    function removeOrder(address _user, uint48 _orderId)\\n        public\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n        uint256 removedAmount;\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            removedAmount = Storage.slot().lendOrders[Storage.slot().maturity].removeOrder(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n            removeOrderIdFromOrders(Storage.slot().activeLendOrderIds[_user], _orderId);\\n        } else if (marketOrder.side == ProtocolTypes.Side.BORROW) {\\n            removedAmount = Storage.slot().borrowOrders[Storage.slot().maturity].removeOrder(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n            removeOrderIdFromOrders(Storage.slot().activeBorrowOrderIds[_user], _orderId);\\n        }\\n\\n        return (marketOrder.side, removedAmount, marketOrder.unitPrice);\\n    }\\n\\n    /**\\n     * @notice Increases and returns id of last order in order book.\\n     * @return The new order id\\n     */\\n    function nextOrderId() private returns (uint48) {\\n        Storage.slot().lastOrderId++;\\n        return Storage.slot().lastOrderId;\\n    }\\n\\n    function removeOrderIdFromOrders(uint48[] storage orders, uint256 orderId) private {\\n        uint256 lastOrderIndex = orders.length - 1;\\n        for (uint256 i = 0; i <= lastOrderIndex; i++) {\\n            if (orders[i] == orderId) {\\n                if (i != lastOrderIndex) {\\n                    uint48 lastOrderId = orders[lastOrderIndex];\\n                    orders[i] = lastOrderId;\\n                }\\n\\n                orders.pop();\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x52d1c2284cf6727dd5f11a0a35aa11566a5e6853e038ed61d86d0c3e2180bc8a\",\"license\":\"MIT\"},\"contracts/storages/LendingMarketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport \\\"../libraries/HitchensOrderStatisticsTreeLib.sol\\\";\\n\\nstruct MarketOrder {\\n    ProtocolTypes.Side side;\\n    uint256 unitPrice; // in basis points\\n    uint256 maturity;\\n    uint256 timestamp;\\n}\\n\\nlibrary LendingMarketStorage {\\n    using HitchensOrderStatisticsTreeLib for HitchensOrderStatisticsTreeLib.Tree;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarket\\\");\\n\\n    struct Storage {\\n        uint48 lastOrderId;\\n        bytes32 ccy;\\n        uint256 genesisDate;\\n        uint256 maturity;\\n        // Mapping from user to active lend order ids\\n        mapping(address => uint48[]) activeLendOrderIds;\\n        // Mapping from user to active borrow order ids\\n        mapping(address => uint48[]) activeBorrowOrderIds;\\n        // Mapping from user to current maturity\\n        mapping(address => uint256) userCurrentMaturities;\\n        // Mapping from orderId to order\\n        mapping(uint256 => MarketOrder) orders;\\n        // Mapping from maturity to lending orders\\n        mapping(uint256 => HitchensOrderStatisticsTreeLib.Tree) lendOrders;\\n        // Mapping from maturity to borrowing orders\\n        mapping(uint256 => HitchensOrderStatisticsTreeLib.Tree) borrowOrders;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x04b080d246d43abd5cd7c970c3375a5a707587a58dc13d172c41a9aed97f76f3\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant PRICE_DIGIT = 10000; // price digit in the basis (10000 -> 1)\\n    uint256 public constant PCT_DIGIT = 10000; // percentage digit in the basis (10000 -> 100%)\\n\\n    uint256 internal constant DAYS_IN_YEAR = 365;\\n    uint256 internal constant SECONDS_IN_YEAR = 31557600;\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n}\\n\",\"keccak256\":\"0xfc44bd731aebae907269f73e2d828379e77253ecd21642a874ab2e4a4f763262\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x614db661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100ff5760003560e01c8063914551f1116100a1578063e3d904d811610070578063e3d904d8146102c8578063e7df768c146102fb578063eebc28f91461030e578063fa6127aa1461032157600080fd5b8063914551f11461026c578063a452c3f81461028c578063d866d355146102ad578063e1396d15146102c057600080fd5b806357b5758c116100dd57806357b5758c1461019257806363978ac8146101a85780636c5db843146102185780637ce219aa1461024757600080fd5b80633684d3ea146101045780634a53967b146101405780634bf62d1614610170575b600080fd5b81801561011057600080fd5b5061012461011f3660046148b9565b610334565b60405165ffffffffffff90911681526020015b60405180910390f35b81801561014c57600080fd5b5061016061015b366004614919565b61053b565b6040516101379493929190614986565b61018361017e3660046149b5565b61078e565b604051610137939291906149fe565b61019a610a42565b604051908152602001610137565b8180156101b457600080fd5b506101c86101c3366004614a41565b610a78565b60408051845165ffffffffffff1681526020808601516001600160a01b031690820152848201519181019190915260609384015193810193909352608083019190915260a082015260c001610137565b81801561022457600080fd5b50610238610233366004614a8a565b610b4a565b60405161013793929190614af5565b61025a610255366004614b14565b610ce8565b60405161013796959493929190614b2f565b81801561027857600080fd5b50610160610287366004614919565b610e77565b61029f61029a366004614b6e565b6110bd565b604051610137929190614b89565b6101836102bb3660046149b5565b611419565b61019a611660565b6102db6102d6366004614b6e565b61166d565b604080519485526020850193909352918301526060820152608001610137565b6102db610309366004614b6e565b611916565b61029f61031c366004614b6e565b611ba1565b61019a61032f366004614bae565b611eb0565b600061033e611f4b565b9050604051806080016040528087600181111561035d5761035d614abd565b8152602001848152602001610370611fa4565b60030154815260200142815250610385611fa4565b65ffffffffffff831660009081526007919091016020526040902081518154829060ff1916600183818111156103bd576103bd614abd565b0217905550602082015160018201556040820151600282015560609091015160039091015560008660018111156103f6576103f6614abd565b141561049f5761043d838287878661040c611fa4565b6008016000610419611fa4565b600301548152602001908152602001600020611fc89095949392919063ffffffff16565b610445611fa4565b6001600160a01b03861660009081526004919091016020908152604082208054600181018255908352912060058083049091018054919092066006026101000a65ffffffffffff8181021990921691841602179055610532565b60018660018111156104b3576104b3614abd565b1415610532576104d683828787866104c9611fa4565b6009016000610419611fa4565b6104de611fa4565b6001600160a01b0386166000908152600591820160209081526040822080546001810182559083529120828204018054929091066006026101000a65ffffffffffff81810219909316928416029190911790555b95945050505050565b6060600080600080600061054e88611ba1565b915091508161055b611fa4565b60050160008a6001600160a01b03166001600160a01b031681526020019081526020016000209080519060200190610594929190614790565b50815181519095508067ffffffffffffffff8111156105b5576105b5614bca565b6040519080825280602002602001820160405280156105de578160200160208202803683370190505b50965060005b818110156107815760006105f6611fa4565b600701600085848151811061060d5761060d614be0565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16600181111561065a5761065a614abd565b600181111561066b5761066b614abd565b81526020016001820154815260200160028201548152602001600382015481525050905060006106d482602001518685815181106106ab576106ab614be0565b60200260200101516106bb611fa4565b60008f815260099190910160205260409020919061204a565b905061071982602001518685815181106106f0576106f0614be0565b6020026020010151610700611fa4565b60008f8152600991909101602052604090209190612105565b6107239089614c0c565b97508060a00151876107359190614c0c565b965080600001518a848151811061074e5761074e614be0565b602002602001019065ffffffffffff16908165ffffffffffff16815250505050808061077990614c24565b9150506105e4565b5050505092959194509250565b60608060608367ffffffffffffffff8111156107ac576107ac614bca565b6040519080825280602002602001820160405280156107d5578160200160208202803683370190505b5092508367ffffffffffffffff8111156107f1576107f1614bca565b60405190808252806020026020018201604052801561081a578160200160208202803683370190505b5091508367ffffffffffffffff81111561083657610836614bca565b60405190808252806020026020018201604052801561085f578160200160208202803683370190505b509050600061089361086f611fa4565b600801600061087c611fa4565b600301548152602001908152602001600020612142565b905080846000815181106108a9576108a9614be0565b6020026020010181815250506108ee816108c1611fa4565b60080160006108ce611fa4565b60030154815260200190815260200160002061218990919063ffffffff16565b8360008151811061090157610901614be0565b60200260200101818152505061094681610919611fa4565b6008016000610926611fa4565b6003015481526020019081526020016000206121a290919063ffffffff16565b8260008151811061095957610959614be0565b602090810291909101015260015b8451811015610a39578161097a57610a39565b6109b382610986611fa4565b6008016000610993611fa4565b6003015481526020019081526020016000206121bb90919063ffffffff16565b9150818582815181106109c8576109c8614be0565b6020026020010181815250506109e0826108c1611fa4565b8482815181106109f2576109f2614be0565b602002602001018181525050610a0a82610919611fa4565b838281518110610a1c57610a1c614be0565b602090810291909101015280610a3181614c24565b915050610967565b50509193909250565b6000610a73610a4f611fa4565b6009016000610a5c611fa4565b6003015481526020019081526020016000206122b5565b905090565b610a80614845565b6000806001866001811115610a9757610a97614abd565b1415610ae457610ad88585610aaa611fa4565b6008016000610ab7611fa4565b6003015481526020019081526020016000206122f79092919063ffffffff16565b94509092509050610b41565b6000866001811115610af857610af8614abd565b1415610b4157610b398585610b0b611fa4565b6009016000610b18611fa4565b60030154815260200190815260200160002061263b9092919063ffffffff16565b945090925090505b93509350939050565b600080600080610b58611fa4565b65ffffffffffff861660009081526007919091016020526040908190208151608081019092528054829060ff166001811115610b9657610b96614abd565b6001811115610ba757610ba7614abd565b81526001820154602082015260028201546040820152600390910154606090910152905060008082516001811115610be157610be1614abd565b1415610c6257610c26826020015187610bf8611fa4565b6008016000610c05611fa4565b6003015481526020019081526020016000206129369092919063ffffffff16565b9050610c5d610c33611fa4565b6001600160a01b03891660009081526004919091016020526040902065ffffffffffff8816612976565b610cd2565b600182516001811115610c7757610c77614abd565b1415610cd257610c9b826020015187610c8e611fa4565b6009016000610c05611fa4565b9050610cd2610ca8611fa4565b6001600160a01b03891660009081526005919091016020526040902065ffffffffffff8816612976565b8151602090920151919450925090509250925092565b6000806000806000806000610cfb611fa4565b65ffffffffffff891660009081526007919091016020526040908190208151608081019092528054829060ff166001811115610d3957610d39614abd565b6001811115610d4a57610d4a614abd565b815260200160018201548152602001600282015481526020016003820154815250509050610da66040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b600082516001811115610dbb57610dbb614abd565b1415610df657610def82602001518a610dd2611fa4565b60408087015160009081526008929092016020529020919061204a565b9050610e27565b610e2482602001518a610e07611fa4565b60408087015160009081526009929092016020529020919061204a565b90505b60608101516001600160a01b031615610e6b5781600001518260200151836040015183606001518460a0015185608001519750975097509750975097505050610e6e565b50505b91939550919395565b60606000806000806000610e8a886110bd565b9150915081610e97611fa4565b60040160008a6001600160a01b03166001600160a01b031681526020019081526020016000209080519060200190610ed0929190614790565b50815181519095508067ffffffffffffffff811115610ef157610ef1614bca565b604051908082528060200260200182016040528015610f1a578160200160208202803683370190505b50965060005b81811015610781576000610f32611fa4565b6007016000858481518110610f4957610f49614be0565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff166001811115610f9657610f96614abd565b6001811115610fa757610fa7614abd565b81526020016001820154815260200160028201548152602001600382015481525050905060006110108260200151868581518110610fe757610fe7614be0565b6020026020010151610ff7611fa4565b60008f815260089190910160205260409020919061204a565b9050611055826020015186858151811061102c5761102c614be0565b602002602001015161103c611fa4565b60008f8152600891909101602052604090209190612105565b61105f9089614c0c565b97508060a00151876110719190614c0c565b965080600001518a848151811061108a5761108a614be0565b602002602001019065ffffffffffff16908165ffffffffffff1681525050505080806110b590614c24565b915050610f20565b60608060008060006110cd611fa4565b600301546110d9611fa4565b6001600160a01b03881660009081526006919091016020526040902054141590508061112957611107611fa4565b6001600160a01b0387166000908152600491909101602052604090205461112c565b60005b67ffffffffffffffff81111561114457611144614bca565b60405190808252806020026020018201604052801561116d578160200160208202803683370190505b509450611178611fa4565b6001600160a01b0387166000908152600491909101602052604090205467ffffffffffffffff8111156111ad576111ad614bca565b6040519080825280602002602001820160405280156111d6578160200160208202803683370190505b50935060005b6111e4611fa4565b6001600160a01b03881660009081526004919091016020526040902054811015611410576000611212611fa4565b6001600160a01b03891660009081526004919091016020526040902080548390811061124057611240614be0565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1690506000611274611fa4565b65ffffffffffff831660009081526007919091016020526040908190208151608081019092528054829060ff1660018111156112b2576112b2614abd565b60018111156112c3576112c3614abd565b8152602001600182015481526020016002820154815260200160038201548152505090506113498160200151836112f8611fa4565b6008016000611305611fa4565b60060160008f6001600160a01b03166001600160a01b03168152602001908152602001600020548152602001908152602001600020612acc9092919063ffffffff16565b6113a657611358600186614c0c565b945081876113668886614c3f565b8151811061137657611376614be0565b602002602001019065ffffffffffff16908165ffffffffffff1681525050836113a157600188510388525b6113fb565b836113f3576113b6600187614c0c565b955081886113c48786614c3f565b815181106113d4576113d4614be0565b602002602001019065ffffffffffff16908165ffffffffffff16815250505b600187510387525b5050808061140890614c24565b9150506111dc565b50505050915091565b60608060608367ffffffffffffffff81111561143757611437614bca565b604051908082528060200260200182016040528015611460578160200160208202803683370190505b5092508367ffffffffffffffff81111561147c5761147c614bca565b6040519080825280602002602001820160405280156114a5578160200160208202803683370190505b5091508367ffffffffffffffff8111156114c1576114c1614bca565b6040519080825280602002602001820160405280156114ea578160200160208202803683370190505b50905060006114fa610a4f611fa4565b9050808460008151811061151057611510614be0565b60200260200101818152505061153581611528611fa4565b60090160006108ce611fa4565b8360008151811061154857611548614be0565b60200260200101818152505061156d81611560611fa4565b6009016000610926611fa4565b8260008151811061158057611580614be0565b602090810291909101015260015b8451811015610a3957816115a157610a39565b6115da826115ad611fa4565b60090160006115ba611fa4565b600301548152602001908152602001600020612aea90919063ffffffff16565b9150818582815181106115ef576115ef614be0565b60200260200101818152505061160782611528611fa4565b84828151811061161957611619614be0565b60200260200101818152505061163182611560611fa4565b83828151811061164357611643614be0565b60209081029190910101528061165881614c24565b91505061158e565b6000610a7361086f611fa4565b60008060008060008061167f87611ba1565b9150915060005b82518110156117b5576000611699611fa4565b60070160008584815181106116b0576116b0614be0565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff1660018111156116fd576116fd614abd565b600181111561170e5761170e614abd565b815260200160018201548152602001600282015481526020016003820154815250509050600061178c826020015186858151811061174e5761174e614be0565b602002602001015161175e611fa4565b600901600061176b611fa4565b60030154815260200190815260200160002061204a9092919063ffffffff16565b90508060a001518961179e9190614c0c565b9850505080806117ad90614c24565b915050611686565b506117be611fa4565b6001600160a01b0388166000908152600691909101602052604081205493505b815181101561190c5760006117f1611fa4565b600701600084848151811061180857611808614be0565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16600181111561185557611855614abd565b600181111561186657611866614abd565b81526020016001820154815260200160028201548152602001600382015481525050905060006118b682602001518585815181106118a6576118a6614be0565b6020026020010151610e07611fa4565b90508060a00151886118c89190614c0c565b975081602001516127108260a001516118e19190614c56565b6118eb9190614c75565b6118f59088614c0c565b96505050808061190490614c24565b9150506117de565b5050509193509193565b600080600080600080611928876110bd565b91509150611934611fa4565b6001600160a01b0388166000908152600691909101602052604081205493505b8251811015611a62576000611967611fa4565b600701600085848151811061197e5761197e614be0565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff1660018111156119cb576119cb614abd565b60018111156119dc576119dc614abd565b8152602001600182015481526020016002820154815260200160038201548152505090506000611a398260200151868581518110611a1c57611a1c614be0565b6020026020010151611a2c611fa4565b600801600061176b611fa4565b90508060a0015189611a4b9190614c0c565b985050508080611a5a90614c24565b915050611954565b5060005b815181101561190c576000611a79611fa4565b6007016000848481518110611a9057611a90614be0565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff166001811115611add57611add614abd565b6001811115611aee57611aee614abd565b81526001820154602082015260028201546040820152600390910154606090910152905084611b1f57806040015194505b6000611b4b8260200151858581518110611b3b57611b3b614be0565b6020026020010151610dd2611fa4565b90508060a0015188611b5d9190614c0c565b975081602001516127108260a00151611b769190614c56565b611b809190614c75565b611b8a9088614c0c565b965050508080611b9990614c24565b915050611a66565b6060806000806000611bb1611fa4565b60030154611bbd611fa4565b6001600160a01b038816600090815260069190910160205260409020541415905080611c0d57611beb611fa4565b6001600160a01b03871660009081526005919091016020526040902054611c10565b60005b67ffffffffffffffff811115611c2857611c28614bca565b604051908082528060200260200182016040528015611c51578160200160208202803683370190505b509450611c5c611fa4565b6001600160a01b0387166000908152600591909101602052604090205467ffffffffffffffff811115611c9157611c91614bca565b604051908082528060200260200182016040528015611cba578160200160208202803683370190505b50935060005b611cc8611fa4565b6001600160a01b03881660009081526005919091016020526040902054811015611410576000611cf6611fa4565b6001600160a01b038916600090815260059190910160205260409020805483908110611d2457611d24614be0565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1690506000611d58611fa4565b65ffffffffffff831660009081526007919091016020526040908190208151608081019092528054829060ff166001811115611d9657611d96614abd565b6001811115611da757611da7614abd565b815260200160018201548152602001600282015481526020016003820154815250509050611de9816020015183611ddc611fa4565b6009016000611305611fa4565b611e4657611df8600186614c0c565b94508187611e068886614c3f565b81518110611e1657611e16614be0565b602002602001019065ffffffffffff16908165ffffffffffff168152505083611e4157600188510388525b611e9b565b83611e9357611e56600187614c0c565b95508188611e648786614c3f565b81518110611e7457611e74614be0565b602002602001019065ffffffffffff16908165ffffffffffff16815250505b600187510387525b50508080611ea890614c24565b915050611cc0565b60006001836001811115611ec657611ec6614abd565b1415611f0c57611f0582611ed8611fa4565b6008016000611ee5611fa4565b600301548152602001908152602001600020612be490919063ffffffff16565b9050611f45565b611f0582611f18611fa4565b6009016000611f25611fa4565b600301548152602001908152602001600020612ca790919063ffffffff16565b92915050565b6000611f55611fa4565b805465ffffffffffff16906000611f6b83614c97565b91906101000a81548165ffffffffffff021916908365ffffffffffff16021790555050611f96611fa4565b5465ffffffffffff16919050565b7ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0a90565b600082116120135760405162461bcd60e51b8152602060048201526013602482015272125b9cdd59999a58da595b9d08185b5bdd5b9d606a1b60448201526064015b60405180910390fd5b61201d8686612d62565b8015612035576120308686868686612f32565b612042565b6120428686868686612fab565b505050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915250600082815260018085016020908152604080842065ffffffffffff80871686526006909101835293819020815160c08101835281548087168252600160301b8104871694820194909452600160601b90930490941690820152908201546001600160a01b031660608201526002820154608082015260039091015460a08201525b9392505050565b6000828152600184016020908152604080832065ffffffffffff8516845260060190915281206003015461213a90849061301c565b949350505050565b80548061215157506000919050565b5b600081815260018084016020526040909120015415612184576000908152600180830160205260409091200154612152565b919050565b6000908152600191909101602052604090206005015490565b6000908152600191909101602052604090206004015490565b60008161222b5760405162461bcd60e51b815260206004820152603860248201527f4f7264657253746174697374696373547265652834303129202d205374617274604482015277696e672076616c75652063616e6e6f74206265207a65726f60401b606482015260840161200a565b600082815260018401602052604090206002015415612263576000828152600184016020526040902060020154611f05908490613035565b5060008181526001830160205260409020545b80158015906122975750600081815260018401602052604090206002015482145b15611f45576000818152600184016020526040902054909150612276565b8054806122c457506000919050565b5b6000818152600183016020526040902060020154156121845760009081526001820160205260409020600201546122c5565b600080612302614845565b8461231f5760405162461bcd60e51b815260040161200a90614cbd565b60008061232b88612142565b90506000612338896122b5565b9050600080888411158061234a575088155b6123915760405162461bcd60e51b8152602060048201526018602482015277496e73756666696369656e74206c696d69742076616c756560401b604482015260640161200a565b898110801561239f57508315155b80156123b357508815806123b35750888411155b1561242b57600084815260018c01602052604090206005015491506123d88282614c0c565b905083945060008a82116123ed5760006123f7565b6123f78b83614c3f565b6124019084614c3f565b905061240d858261301c565b612417908a614c0c565b98506124238c866121bb565b945050612391565b898110158061243957508885145b156124eb57898111156124705784935060006124558b83614c3f565b61245f9084614c3f565b905061246c8c8683613073565b9650505b60008481526001808d016020526040822090810191909155545b80156124e957848111156124d357600085815260018d01602052604090205481146124cf5760008581526001808e016020526040808320849055838352909120018590555b8094505b600090815260018c01602052604090205461248a565b505b808a1115612500576124fd818b614c3f565b96505b84831480156125205750600083815260018c016020526040902060050154155b1561252e5760008b55612562565b8a5485118061254857508a54851480156125485750808a10155b1561256257838b55600084815260018c0160205260408120555b8a5460009081526001808d016020526040909120015415801561259957508a54600090815260018c01602052604090206002015415155b156125f1578a5460009081526001808d0160205260408083206002015483529091200154156125e3578a54600090815260018c0160205260409020600201546125e3908c90613313565b6125f18b8c600001546133e8565b8a54600090815260018c01602052604090206003015460ff161561262d578a54600090815260018c0160205260409020600301805460ff191690555b505050505093509350939050565b600080612646614845565b846126635760405162461bcd60e51b815260040161200a90614cbd565b60008061266f886122b5565b9050600061267c89612142565b9050600080888410158061268e575088155b6126d55760405162461bcd60e51b8152602060048201526018602482015277496e73756666696369656e74206c696d69742076616c756560401b604482015260640161200a565b89811080156126e357508315155b80156126f757508815806126f75750888410155b1561276f57600084815260018c016020526040902060050154915061271c8282614c0c565b905083945060008a821161273157600061273b565b61273b8b83614c3f565b6127459084614c3f565b9050612751858261301c565b61275b908a614c0c565b98506127678c86612aea565b9450506126d5565b898110158061277d57508885145b1561282f57898111156127b45784935060006127998b83614c3f565b6127a39084614c3f565b90506127b08c8683613073565b9650505b600084815260018c01602052604081206002810191909155545b801561282d578481101561281757600085815260018d016020526040902054811461281357600085815260018d01602052604080822083905582825290206002018590555b8094505b600090815260018c0160205260409020546127ce565b505b808a111561284457612841818b614c3f565b96505b84831480156128645750600083815260018c016020526040902060050154155b156128725760008b556128a6565b8a5485108061288c57508a548514801561288c5750808a10155b156128a657838b55600084815260018c0160205260408120555b8a54600090815260018c0160205260409020600201541580156128dd57508a5460009081526001808d016020526040909120015415155b156125f1578a5460009081526001808d01602052604080832090910154825290206002015415612928578a5460009081526001808d0160205260409091200154612928908c906133e8565b6125f18b8c60000154613313565b6000612943848484612acc565b61295f5760405162461bcd60e51b815260040161200a90614d1a565b61296a8484846134c0565b90506120fe848461372c565b815460009061298790600190614c3f565b905060005b818111612ac657828482815481106129a6576129a6614be0565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff161415612ab457818114612a6d5760008483815481106129f7576129f7614be0565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff16905080858381548110612a3457612a34614be0565b90600052602060002090600591828204019190066006026101000a81548165ffffffffffff021916908365ffffffffffff160217905550505b83805480612a7d57612a7d614d6a565b60019003818190600052602060002090600591828204019190066006026101000a81549065ffffffffffff02191690559055612ac6565b80612abe81614c24565b91505061298c565b50505050565b6000612ad98484846139e9565b801561213a575061213a8484613b32565b600081612b5a5760405162461bcd60e51b815260206004820152603860248201527f4f7264657253746174697374696373547265652834303229202d205374617274604482015277696e672076616c75652063616e6e6f74206265207a65726f60401b606482015260840161200a565b600082815260018085016020526040909120015415612b92576000828152600180850160205260409091200154611f05908490613beb565b5060008181526001830160205260409020545b8015801590612bc65750600081815260018085016020526040909120015482145b15611f45576000818152600184016020526040902054909150612ba5565b600080612bf084612142565b905060008092505b8381108015612c0657508115155b15612c9f57600082815260018601602052604081206005015490612c2a848361301c565b9050612c368184614c0c565b925085831115612c7f576000612c4c8785614c3f565b612c569083614c3f565b905081612c638285614c56565b612c6d9190614c75565b612c779087614c0c565b955050612c8c565b612c898286614c0c565b94505b612c9687856121bb565b93505050612bf8565b505092915050565b600080612cb3846122b5565b905060008092505b8381108015612cc957508115155b15612c9f57600082815260018601602052604081206005015490612ced848361301c565b9050612cf98184614c0c565b925085831115612d42576000612d0f8785614c3f565b612d199083614c3f565b905081612d268285614c56565b612d309190614c75565b612d3a9087614c0c565b955050612d4f565b612d4c8286614c0c565b94505b612d598785612aea565b93505050612cbb565b80612dd55760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303529202d2056616c756560448201527f20746f20696e736572742063616e6e6f74206265207a65726f00000000000000606482015260840161200a565b81546000905b8015612e395780915080831015612e05576000908152600180850160205260409091200154612ddb565b80831115612e26576000908152600184016020526040902060020154612ddb565b80831415612e345750505050565b612ddb565b6000838152600185016020526040902084541580612e88575060008381526001808701602052604090912001548414801590612e88575060008381526001860160205260409020600201548414155b15612eb65760006004820181905560058201819055612eaa9086908690613c22565b612eb685856000613c5a565b82815560006001808301829055600283019190915560038201805460ff1916909117905582612ee757838555612f21565b82841015612f0a5760008381526001808701602052604090912001849055612f21565b600083815260018601602052604090206002018490555b612f2b8585613c9a565b5050505050565b6000848152600186016020526040812090612f508787878787613f05565b9050612f748787838560030160019054906101000a900465ffffffffffff166140a4565b612f7f878783613c22565b6003820154600160381b900465ffffffffffff16612fa257612fa2878783613c5a565b50505050505050565b600084815260018601602052604090206003810154610100900465ffffffffffff16612fde576120308686868686612f32565b6000612fed8787878787613f05565b905061301187878460030160079054906101000a900465ffffffffffff16846140a4565b612fa2878783613c5a565b60008261302b61271084614c56565b6120fe9190614c75565b60005b60008281526001808501602052604090912001541561306d576000918252600180840160205260409092209091015490613038565b50919050565b61307b614845565b6000838152600185016020526040902060058101548311156131055760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834313029202d20416d6f756e60448201527f7420746f2066696c6c20697320696e73756666696369656e7400000000000000606482015260840161200a565b60038082015465ffffffffffff610100909104811660008181526006850160209081526040808320815160c08101835281548088168252600160301b8104881694820194909452600160601b9093049095169082015260018401546001600160a01b0316606082015260028401546080820152929093015460a0830152859291905b65ffffffffffff81161580159061319d57508315155b156132a25765ffffffffffff8082166000908152600687016020908152604091829020825160c08101845281548086168252600160301b8104861693820193909352600160601b9092049093169181019190915260018201546001600160a01b031660608201526002820154608082015260039091015460a0820181905290925084106132415760a08201516132339085614c3f565b935081602001519050613290565b6040518060800160405280836000015165ffffffffffff16815260200183606001516001600160a01b03168152602001858460a001516132819190614c3f565b81526020018990529550600093505b8261329a81614c24565b935050613187565b6132b189898460000151614119565b5060408601511561330757600088815260018a0160209081526040808320855165ffffffffffff1684526006019091528082209088015160038201805492939192909190613300908490614c3f565b9091555050505b50505050509392505050565b6000818152600180840160205260408083209182018054925483855291842060020154938590528390559091801561335957600081815260018601602052604090208490555b6000838152600186016020526040902082905581613379578285556133c6565b60008281526001860160205260409020600201548414156133af57600082815260018601602052604090206002018390556133c6565b600082815260018087016020526040909120018390555b5050600081815260019093016020526040808420600201839055918352912055565b60008181526001808401602052604080832060028101805491548286529285209093015493859052918390559091801561343057600081815260018601602052604090208490555b60008381526001860160205260409020829055816134505782855561349d565b6000828152600180870160205260409091200154841415613486576000828152600180870160205260409091200183905561349d565b600082815260018601602052604090206002018390555b505060008181526001938401602052604080822090940183905591825291902055565b60006134cd848484612acc565b6134e95760405162461bcd60e51b815260040161200a90614d1a565b50600082815260018085016020908152604080842065ffffffffffff80871680875260068301855295839020835160c08101855281548084168252600160301b8104841696820196909652600160601b909504821693850193909352938201546001600160a01b031660608401526002820154608084015260039182015460a0840181905291810154919490936101009092049091161480156135a15750600382015465ffffffffffff858116600160381b90920416145b156135c3576135b286866000613c22565b6135be86866000613c5a565b613695565b600382015465ffffffffffff858116610100909204161415613621576135ee86868360200151613c22565b60208082015165ffffffffffff1660009081526006840190915260409020805465ffffffffffff60601b19169055613695565b600382015465ffffffffffff858116600160381b9092041614156136815761364e86868360400151613c5a565b60408082015165ffffffffffff166000908152600684016020522080546bffffffffffff00000000000019169055613695565b6136958686836040015184602001516140a4565b805165ffffffffffff1660009081526006830160205260408120805471ffffffffffffffffffffffffffffffffffff19168155600180820180546001600160a01b0319169055600282018390556003909101829055600484018054919290916136ff908490614c3f565b909155505060a081015160058301805460009061371d908490614c3f565b90915550929695505050505050565b8061379f5760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303729202d2056616c756560448201527f20746f2064656c6574652063616e6e6f74206265207a65726f00000000000000606482015260840161200a565b6000818152600183016020526040812060048101549091908190612f2b57600084815260018087016020526040909120015415806137ee57506000848152600186016020526040902060020154155b156137fa575082613842565b5060008381526001850160205260409020600201545b600081815260018087016020526040909120015415613842576000908152600180860160205260409091200154613810565b600081815260018087016020526040909120015415613876576000818152600180870160205260409091200154915061388d565b600081815260018601602052604090206002015491505b600081815260018601602052604080822054848352912081905580156138fe5760008181526001808801602052604090912001548214156138e35760008181526001808801602052604090912001839055613902565b60008181526001870160205260409020600201839055613902565b8286555b600082815260018701602052604090206003015460ff161585831461398c5761392c8784886142ff565b60008681526001888101602052604080832080830154878552828520938401819055845281842087905560028082015490840181905584529083208690556003908101549286905201805460ff191660ff90921615159190911790559194915b801561399c5761399c8785614376565b50506000818152600180870160205260408220828155908101829055600281018290556003810180546cffffffffffffffffffffffffff1916905560048101829055600501555050505050565b600082815260018085016020908152604080842065ffffffffffff808716808752600683018552838720845160c0810186528154808516808352600160301b8204861698830198909852600160601b900490931694830194909452948301546001600160a01b031660608201526002830154608082015260039092015460a08301528593909214613a8057600093505050506120fe565b5b604081015165ffffffffffff1615613b135760409081015165ffffffffffff808216600090815260068501602090815290849020845160c08101865281548085168252600160301b8104851693820193909352600160601b9092049092169381019390935260018101546001600160a01b03166060840152600281015460808401526003015460a08301529250613a81565b5060030154610100900465ffffffffffff908116911614949350505050565b600081613b4157506000611f45565b8254821415613b5257506001611f45565b815b600081815260018501602052604090205415613be15760008181526001808601602052604080832054808452922001548214801590613ba6575060008181526001860160205260409020600201548214155b15613bb657600092505050611f45565b8454811415613bca57600192505050611f45565b506000908152600184016020526040902054613b54565b5060009392505050565b60005b60008281526001840160205260409020600201541561306d5760009182526001830160205260409091206002015490613bee565b6000918252600190920160205260409020600301805465ffffffffffff9092166101000266ffffffffffff0019909216919091179055565b6000918252600190920160205260409020600301805465ffffffffffff909216600160381b026cffffffffffff0000000000000019909216919091179055565b60005b82548214801590613cc75750600082815260018401602052604080822054825290206003015460ff165b15613ee3576000828152600180850160205260408083205480845281842054845292200154811415613dea5760008181526001850160205260408082205482528082206002015480835291206003015490925060ff1615613d70576000818152600180860160205260408083206003808201805460ff19908116909155878652838620820180548216905582548652928520018054909216909217905590829052549250613edd565b6000818152600185016020526040902060020154831415613d9857809250613d9884846133e8565b50600082815260018085016020526040808320548084528184206003808201805460ff19908116909155825487529386200180549093169093179091559182905254613de5908590613313565b613edd565b6000818152600180860160205260408083205483528083209091015480835291206003015490925060ff1615613e68576000818152600180860160205260408083206003808201805460ff19908116909155878652838620820180548216905582548652928520018054909216909217905590829052549250613edd565b6000818152600180860160205260409091200154831415613e9057809250613e908484613313565b50600082815260018085016020526040808320548084528184206003808201805460ff19908116909155825487529386200180549093169093179091559182905254613edd9085906133e8565b50613c9d565b505080546000908152600190910160205260409020600301805460ff19169055565b6000848152600186016020908152604080832065ffffffffffff871684526006810190925282206002015415613f985760405162461bcd60e51b815260206004820152603260248201527f4f7264657253746174697374696373547265652834303929202d204f726465726044820152711034b21030b63932b0b23c9032bc34b9ba1760711b606482015260840161200a565b6001816004016000828254613fad9190614c0c565b9250508190555082816005016000828254613fc89190614c0c565b90915550506040805160c08101825265ffffffffffff808816808352600060208085018281528587018381526001600160a01b03808d16606089019081524260808a0190815260a08a018e81529787526006909b019094529790932095518654915193518616600160601b0265ffffffffffff60601b19948716600160301b026bffffffffffffffffffffffff199093169682169690961791909117929092169390931784559151600184018054919095166001600160a01b031990911617909355925160028201559051600390910155905095945050505050565b60009283526001939093016020908152604080842065ffffffffffff938416808652600690910190925280842080546bffffffffffff0000000000001916600160301b9490961693840295909517909455908252919020805465ffffffffffff60601b1916600160601b909202919091179055565b6000614126848484612acc565b6141425760405162461bcd60e51b815260040161200a90614d1a565b50600082815260018085016020908152604080842065ffffffffffff808716865260068201808552838720845160c08101865281548085168252600160301b8104851682890152600160601b9004841681870152818801546001600160a01b031660608201526002820154608082015260039182015460a08201819052828601546101009004909416808a529290965293909620909201549194909390915b8665ffffffffffff16831461424557600092835260068501602052604090922054600160301b900465ffffffffffff16918161421c81614c24565b600085815260068801602052604090206003015490935061423e915082614c0c565b90506141e1565b600385015465ffffffffffff888116600160381b9092041614156142805761426f89896000613c22565b61427b89896000613c5a565b6142be565b61428f89898660200151613c22565b60208085015165ffffffffffff1660009081526006870190915260409020805465ffffffffffff60601b191690555b818560040160008282546142d29190614c3f565b92505081905550808560050160008282546142ed9190614c3f565b90915550959998505050505050505050565b60008181526001840160205260408082205484835291208190558061432657828455612ac6565b600081815260018086016020526040909120015482141561435c5760008181526001808601602052604090912001839055612ac6565b600090815260019390930160205250604090912060020155565b60005b8254821480159061439e5750600082815260018401602052604090206003015460ff16155b1561477157600082815260018085016020526040808320548084529220015483141561459a5760008181526001850160205260408082206002015480835291206003015490925060ff1615614442576000828152600180860160205260408083206003908101805460ff1990811690915585855291909320909201805490921617905561442b84826133e8565b600081815260018501602052604090206002015491505b60008281526001808601602052604080832090910154825290206003015460ff1615801561448d5750600082815260018501602052604080822060020154825290206003015460ff16155b156144ba57600082815260018581016020526040909120600301805460ff1916909117905591508161476b565b600082815260018501602052604080822060020154825290206003015460ff16614537576000828152600180860160205260408083208083015484529083206003908101805460ff19908116909155938690520180549092161790556145208483613313565b600081815260018501602052604090206002015491505b600081815260018501602052604080822060039081018054868552838520808401805460ff909316151560ff19938416179055825482169092556002909101548452919092209091018054909116905561459184826133e8565b8354925061476b565b6000818152600180860160205260408083209091015480835291206003015490925060ff1615614619576000828152600180860160205260408083206003908101805460ff199081169091558585529190932090920180549092161790556146028482613313565b600081815260018086016020526040909120015491505b600082815260018501602052604080822060020154825290206003015460ff16158015614664575060008281526001808601602052604080832090910154825290206003015460ff16155b1561469157600082815260018581016020526040909120600301805460ff1916909117905591508161476b565b60008281526001808601602052604080832090910154825290206003015460ff1661471057600082815260018086016020526040808320600281015484529083206003908101805460ff19908116909155938690520180549092161790556146f984836133e8565b600081815260018086016020526040909120015491505b60008181526001808601602052604080832060039081018054878652838620808401805460ff909316151560ff199384161790558254821690925593015484529220909101805490911690556147668482613313565b835492505b50614379565b506000908152600190910160205260409020600301805460ff19169055565b828054828255906000526020600020906004016005900481019282156148355791602002820160005b8382111561480157835183826101000a81548165ffffffffffff021916908365ffffffffffff16021790555092602001926006016020816005010492830192600103026147b9565b80156148335782816101000a81549065ffffffffffff0219169055600601602081600501049283019260010302614801565b505b5061484192915061487e565b5090565b6040518060800160405280600065ffffffffffff16815260200160006001600160a01b0316815260200160008152602001600081525090565b5b80821115614841576000815560010161487f565b80356002811061218457600080fd5b80356001600160a01b038116811461218457600080fd5b600080600080600060a086880312156148d157600080fd5b6148da86614893565b94506148e8602087016148a2565b935060408601359250606086013591506080860135801515811461490b57600080fd5b809150509295509295909350565b6000806040838503121561492c57600080fd5b614935836148a2565b946020939093013593505050565b600081518084526020808501945080840160005b8381101561497b57815165ffffffffffff1687529582019590820190600101614957565b509495945050505050565b6080815260006149996080830187614943565b6020830195909552506040810192909252606090910152919050565b6000602082840312156149c757600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561497b578151875295820195908201906001016149e2565b606081526000614a1160608301866149ce565b8281036020840152614a2381866149ce565b90508281036040840152614a3781856149ce565b9695505050505050565b600080600060608486031215614a5657600080fd5b614a5f84614893565b95602085013595506040909401359392505050565b803565ffffffffffff8116811461218457600080fd5b60008060408385031215614a9d57600080fd5b614aa6836148a2565b9150614ab460208401614a74565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b60028110614af157634e487b7160e01b600052602160045260246000fd5b9052565b60608101614b038286614ad3565b602082019390935260400152919050565b600060208284031215614b2657600080fd5b6120fe82614a74565b60c08101614b3d8289614ad3565b602082019690965260408101949094526001600160a01b03929092166060840152608083015260a090910152919050565b600060208284031215614b8057600080fd5b6120fe826148a2565b604081526000614b9c6040830185614943565b82810360208401526105328185614943565b60008060408385031215614bc157600080fd5b61493583614893565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115614c1f57614c1f614bf6565b500190565b6000600019821415614c3857614c38614bf6565b5060010190565b600082821015614c5157614c51614bf6565b500390565b6000816000190483118215151615614c7057614c70614bf6565b500290565b600082614c9257634e487b7160e01b600052601260045260246000fd5b500490565b600065ffffffffffff80831681811415614cb357614cb3614bf6565b6001019392505050565b60208082526038908201527f4f7264657253746174697374696373547265652834303829202d20416d6f756e60408201527f7420746f2064726f702063616e6e6f74206265207a65726f0000000000000000606082015260800190565b60208082526030908201527f4f7264657253746174697374696373547265652834313029202d204f7264657260408201526f103237b2b9903737ba1032bc34b9ba1760811b606082015260800190565b634e487b7160e01b600052603160045260246000fdfea26469706673582212204605a55286846a69e8f9a56f36f277315ab84f1049dba23b6ee6f8bde68b960b64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}