{
  "address": "0x4a825aB4bd5bBEAAE2705d9C530D85d9E25454da",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getActiveBorrowOrderIds",
      "outputs": [
        {
          "internalType": "uint48[]",
          "name": "activeOrderIds",
          "type": "uint48[]"
        },
        {
          "internalType": "uint48[]",
          "name": "inActiveOrderIds",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getActiveLendOrderIds",
      "outputs": [
        {
          "internalType": "uint48[]",
          "name": "activeOrderIds",
          "type": "uint48[]"
        },
        {
          "internalType": "uint48[]",
          "name": "inActiveOrderIds",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getBorrowOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHighestBorrowUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getLendOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLowestLendUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint48",
          "name": "_orderId",
          "type": "uint48"
        }
      ],
      "name": "getOrder",
      "outputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "ProtocolTypes.Side"
        },
        {
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalAmountFromBorrowOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalAmountFromLendOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xed931f3ba244189f75fb33e6c832ecc1c63687ad32b07885803a94210670f608",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x4a825aB4bd5bBEAAE2705d9C530D85d9E25454da",
    "transactionIndex": 41,
    "gasUsed": "4222268",
    "logsBloom": "0x
    "blockHash": "0x6a278463662cf57e26f7c43c4accab79b291c62f96120f540e61c0d812035b6f",
    "transactionHash": "0xed931f3ba244189f75fb33e6c832ecc1c63687ad32b07885803a94210670f608",
    "logs": [],
    "blockNumber": 8017935,
    "cumulativeGasUsed": "10853624",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "87cfba3f2a70cb5f9aac2e4a848dedef",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getActiveBorrowOrderIds\",\"outputs\":[{\"internalType\":\"uint48[]\",\"name\":\"activeOrderIds\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48[]\",\"name\":\"inActiveOrderIds\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getActiveLendOrderIds\",\"outputs\":[{\"internalType\":\"uint48[]\",\"name\":\"activeOrderIds\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48[]\",\"name\":\"inActiveOrderIds\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getBorrowOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHighestBorrowUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getLendOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLowestLendUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_orderId\",\"type\":\"uint48\"}],\"name\":\"getOrder\",\"outputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"ProtocolTypes.Side\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalAmountFromBorrowOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalAmountFromLendOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/OrderBookLogic.sol\":\"OrderBookLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport {MarketOrder} from \\\"../storages/LendingMarketStorage.sol\\\";\\n\\ninterface ILendingMarket {\\n    event CancelOrder(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event MakeOrder(\\n        uint48 orderId,\\n        uint48 originalOrderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event TakeOrders(\\n        address indexed taker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 filledAmount,\\n        uint256 unitPrice,\\n        uint256 filledFutureValue\\n    );\\n\\n    event CleanOrders(\\n        uint48[] orderIds,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 maturity\\n    );\\n\\n    event OpenMarket(uint256 maturity, uint256 prevMaturity);\\n\\n    struct Market {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        uint256 genesisDate;\\n        uint256 borrowUnitPrice;\\n        uint256 lendUnitPrice;\\n        uint256 midUnitPrice;\\n    }\\n\\n    function getMarket() external view returns (Market memory);\\n\\n    function getBorrowUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getLendUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getMidUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getBorrowOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturity() external view returns (uint256);\\n\\n    function getCurrency() external view returns (bytes32);\\n\\n    function isMatured() external view returns (bool);\\n\\n    function isOpened() external view returns (bool);\\n\\n    function getOrder(uint48 _orderId)\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        );\\n\\n    function getTotalAmountFromLendOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getTotalAmountFromBorrowOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getActiveLendOrderIds(address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds);\\n\\n    function getActiveBorrowOrderIds(address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds);\\n\\n    function openMarket(uint256 maturity) external returns (uint256);\\n\\n    function cancelOrder(address user, uint48 orderId)\\n        external\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        );\\n\\n    function cleanOrders(address _user)\\n        external\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        );\\n\\n    function createOrder(\\n        ProtocolTypes.Side side,\\n        address account,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (uint256 executedRate, uint256 remainingAmount);\\n\\n    function pauseMarket() external;\\n\\n    function unpauseMarket() external;\\n}\\n\",\"keccak256\":\"0xc9541afea517801ed34a1b39850a5805abd84c915154d4d374ef873f2f18a178\",\"license\":\"MIT\"},\"contracts/libraries/HitchensOrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// types\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\n\\nstruct RemainingOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 unitPrice;\\n}\\n\\nstruct OrderItem {\\n    uint48 orderId;\\n    uint48 next;\\n    uint48 prev;\\n    address maker;\\n    uint256 timestamp;\\n    uint256 amount;\\n}\\n\\n/**\\n * @notice HitchensOrderStatisticsTreeLib is a Red-Black Tree binary search library\\n * based on the following library that is extended to manage order data.\\n *\\n * https://github.com/rob-Hitchens/OrderStatisticsTree\\n *\\n */\\nlibrary HitchensOrderStatisticsTreeLib {\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint48 head;\\n        uint48 tail;\\n        uint256 orderCounter;\\n        uint256 orderTotalAmount;\\n        mapping(uint256 => OrderItem) orders;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].right != EMPTY) {\\n            _value = self.nodes[_value].right;\\n        }\\n    }\\n\\n    function next(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(401) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].right != EMPTY) {\\n            _cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(402) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].left != EMPTY) {\\n            _cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint256 value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        // if (self.nodes[value].parent != EMPTY) return true;\\n        uint256 cursor = value;\\n        while (self.nodes[cursor].parent != EMPTY) {\\n            uint256 parent = self.nodes[cursor].parent;\\n            if (self.nodes[parent].left != cursor && self.nodes[parent].right != cursor) {\\n                return false;\\n            }\\n            if (parent == self.root) {\\n                return true;\\n            }\\n            cursor = self.nodes[cursor].parent;\\n        }\\n        return false;\\n    }\\n\\n    function isActiveOrderId(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        return orderIdExists(self, value, orderId) && exists(self, value);\\n    }\\n\\n    function getNode(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n        return (\\n            gn.parent,\\n            gn.left,\\n            gn.right,\\n            gn.red,\\n            gn.head,\\n            gn.tail,\\n            gn.orderCounter,\\n            gn.orderTotalAmount\\n        );\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function getNodeTotalAmount(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint256 totalAmount)\\n    {\\n        return self.nodes[value].orderTotalAmount;\\n    }\\n\\n    function getNodeOrderIds(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint48[] memory orderIds)\\n    {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[gn.head];\\n        orderIds = new uint48[](gn.orderCounter);\\n\\n        for (uint256 i = 0; i < gn.orderCounter; i++) {\\n            orderIds[i] = order.orderId;\\n            order = gn.orders[order.next];\\n        }\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256 _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(405) - Value to insert cannot be zero\\\");\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                return;\\n            }\\n        }\\n\\n        Node storage nValue = self.nodes[value];\\n        // Update order info as a new one if there is already an old node\\n        if (\\n            self.root == EMPTY ||\\n            (self.nodes[cursor].left != value && self.nodes[cursor].right != value)\\n        ) {\\n            nValue.orderCounter = 0;\\n            nValue.orderTotalAmount = 0;\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        }\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(407) - Value to delete cannot be zero\\\");\\n        Node storage nValue = self.nodes[value];\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint256 a,\\n        uint256 b\\n    ) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    function dropLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            RemainingOrder memory remainingOrder\\n        )\\n    {\\n        require(amount != EMPTY, \\\"OrderStatisticsTree(408) - Amount to drop cannot be zero\\\");\\n        uint256 value;\\n        uint256 cursor = first(self);\\n        uint256 lastNode = last(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor <= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (\\n            totalAmount < amount && cursor != EMPTY && (limitValue == 0 || cursor <= limitValue)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            uint256 filledAmount = cursorNodeAmount -\\n                (totalAmount > amount ? totalAmount - amount : 0);\\n            filledFutureValue += _calculateFutureValue(cursor, filledAmount);\\n\\n            cursor = next(self, cursor);\\n        }\\n\\n        if (totalAmount >= amount || value == limitValue) {\\n            if (totalAmount > amount) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                uint256 filledNodeAmount = cursorNodeAmount - (totalAmount - amount);\\n                remainingOrder = fillOrders(self, cursor, filledNodeAmount);\\n            }\\n\\n            self.nodes[cursor].left = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            while (parent != EMPTY) {\\n                if (parent > cursor) {\\n                    // Relink the nodes\\n                    if (self.nodes[cursor].parent != parent) {\\n                        self.nodes[cursor].parent = parent;\\n                        self.nodes[parent].left = cursor;\\n                    }\\n\\n                    cursor = parent;\\n                }\\n\\n                parent = self.nodes[parent].parent;\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        if (lastNode == value && self.nodes[lastNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value > self.root || (value == self.root && amount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        if (self.nodes[self.root].left == 0 && self.nodes[self.root].right != 0) {\\n            if (self.nodes[self.nodes[self.root].right].left != 0) {\\n                rotateRight(self, self.nodes[self.root].right);\\n            }\\n            rotateLeft(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function dropRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            RemainingOrder memory remainingOrder\\n        )\\n    {\\n        require(amount != EMPTY, \\\"OrderStatisticsTree(408) - Amount to drop cannot be zero\\\");\\n        uint256 value;\\n        uint256 cursor = last(self);\\n        uint256 firstNode = first(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor >= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (\\n            totalAmount < amount && cursor != EMPTY && (limitValue == 0 || cursor >= limitValue)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            uint256 filledAmount = cursorNodeAmount -\\n                (totalAmount > amount ? totalAmount - amount : 0);\\n            filledFutureValue += _calculateFutureValue(cursor, filledAmount);\\n\\n            cursor = prev(self, cursor);\\n        }\\n\\n        if (totalAmount >= amount || value == limitValue) {\\n            if (totalAmount > amount) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                uint256 filledNodeAmount = cursorNodeAmount - (totalAmount - amount);\\n                remainingOrder = fillOrders(self, cursor, filledNodeAmount);\\n            }\\n\\n            self.nodes[cursor].right = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            while (parent != EMPTY) {\\n                if (parent < cursor) {\\n                    // Relink the nodes\\n                    if (self.nodes[cursor].parent != parent) {\\n                        self.nodes[cursor].parent = parent;\\n                        self.nodes[parent].right = cursor;\\n                    }\\n\\n                    cursor = parent;\\n                }\\n\\n                parent = self.nodes[parent].parent;\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        if (firstNode == value && self.nodes[firstNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value < self.root || (value == self.root && amount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        if (self.nodes[self.root].right == 0 && self.nodes[self.root].left != 0) {\\n            if (self.nodes[self.nodes[self.root].left].right != 0) {\\n                rotateLeft(self, self.nodes[self.root].left);\\n            }\\n            rotateRight(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function getFutureValue(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (uint256) {\\n        return _calculateFutureValue(value, self.nodes[value].orders[orderId].amount);\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (OrderItem memory) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orders[orderId];\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function orderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        uint48 cursor = orderId;\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[cursor];\\n\\n        if (order.orderId != cursor) {\\n            return false;\\n        }\\n\\n        while (order.prev != EMPTY) {\\n            cursor = order.prev;\\n            order = gn.orders[cursor];\\n        }\\n\\n        return cursor == gn.head;\\n    }\\n\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount,\\n        bool isInterruption\\n    ) internal {\\n        require(amount > 0, \\\"Insufficient amount\\\");\\n        insert(self, value);\\n\\n        if (isInterruption) {\\n            addHead(self, value, orderId, user, amount);\\n        } else {\\n            addTail(self, value, orderId, user, amount);\\n        }\\n    }\\n\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        amount = _removeOrder(self, value, orderId);\\n        remove(self, value);\\n    }\\n\\n    /**\\n     * @dev Reduces order amount once market order taken.\\n     */\\n    function fillOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount\\n    ) internal returns (RemainingOrder memory remainingOrder) {\\n        Node storage gn = self.nodes[value];\\n\\n        require(\\n            gn.orderTotalAmount >= _amount,\\n            \\\"OrderStatisticsTree(410) - Amount to fill is insufficient\\\"\\n        );\\n\\n        uint256 remainingAmount = _amount;\\n        uint256 filledCount = 0;\\n        OrderItem memory currentOrder = gn.orders[gn.head];\\n        uint48 orderId = gn.head;\\n\\n        while (orderId != 0 && remainingAmount != 0) {\\n            currentOrder = gn.orders[orderId];\\n\\n            if (currentOrder.amount <= remainingAmount) {\\n                remainingAmount -= currentOrder.amount;\\n                orderId = currentOrder.next;\\n            } else {\\n                remainingOrder = RemainingOrder(\\n                    currentOrder.orderId,\\n                    currentOrder.maker,\\n                    currentOrder.amount - remainingAmount,\\n                    value\\n                );\\n                remainingAmount = 0;\\n            }\\n\\n            filledCount++;\\n        }\\n\\n        _dropOrders(self, value, currentOrder.orderId);\\n\\n        if (remainingOrder.amount > 0) {\\n            // NOTE: This order that the filled partially was dropped from a node, and the unfilled amount\\n            // will be inserted newly as a new orders.\\n            // However, that filled order amount is used when future value is calculated from inactive order.\\n            // For that calculation, this order amount needs to be updated by an actual filled amount at this point.\\n            OrderItem storage order = self.nodes[value].orders[currentOrder.orderId];\\n            order.amount -= remainingOrder.amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n        uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n        _link(self, _value, orderId, gn.head);\\n        _setHead(self, _value, orderId);\\n        if (gn.tail == 0) _setTail(self, _value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, _value, _orderId, _user, _amount);\\n        } else {\\n            uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n            _link(self, _value, gn.tail, orderId);\\n            _setTail(self, _value, orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint48) {\\n        Node storage gn = self.nodes[value];\\n        require(\\n            gn.orders[orderId].timestamp == 0,\\n            \\\"OrderStatisticsTree(409) - Order id already exist.\\\"\\n        );\\n\\n        gn.orderCounter += 1;\\n        gn.orderTotalAmount += amount;\\n        OrderItem memory order = OrderItem(orderId, 0, 0, user, block.timestamp, amount);\\n        gn.orders[orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the list.\\n     */\\n    function _removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n        gn.orderTotalAmount -= order.amount;\\n    }\\n\\n    /**\\n     * @dev Drop the OrderItems older than or equal `orderId` from the list\\n     */\\n    function _dropOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n        uint256 cursor = gn.head;\\n        uint256 removedCount = 1;\\n        uint256 removedAmount = gn.orders[cursor].amount;\\n\\n        while (cursor != orderId) {\\n            cursor = gn.orders[cursor].next;\\n            removedCount++;\\n            removedAmount += gn.orders[cursor].amount;\\n        }\\n\\n        if (gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        }\\n\\n        gn.orderCounter -= removedCount;\\n        gn.orderTotalAmount -= removedAmount;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 _prevId,\\n        uint48 _nextId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[_prevId].next = _nextId;\\n        gn.orders[_nextId].prev = _prevId;\\n    }\\n\\n    function _calculateFutureValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * ProtocolTypes.PRICE_DIGIT) / unitPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x24094ea7da46999044cf4eebcf49e5df63759bfc55a0f15e96b4c1aafa2abd3f\",\"license\":\"MIT\"},\"contracts/libraries/OrderBookLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ILendingMarket} from \\\"../interfaces/ILendingMarket.sol\\\";\\nimport {HitchensOrderStatisticsTreeLib, RemainingOrder, OrderItem} from \\\"../libraries/HitchensOrderStatisticsTreeLib.sol\\\";\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {LendingMarketStorage as Storage, MarketOrder} from \\\"../storages/LendingMarketStorage.sol\\\";\\n\\nlibrary OrderBookLogic {\\n    using HitchensOrderStatisticsTreeLib for HitchensOrderStatisticsTreeLib.Tree;\\n\\n    function getHighestBorrowUnitPrice() public view returns (uint256) {\\n        return Storage.slot().borrowOrders[Storage.slot().maturity].last();\\n    }\\n\\n    function getLowestLendUnitPrice() public view returns (uint256) {\\n        return Storage.slot().lendOrders[Storage.slot().maturity].first();\\n    }\\n\\n    function getBorrowOrderBook(uint256 _limit)\\n        public\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].last();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeTotalAmount(\\n            unitPrice\\n        );\\n        quantities[0] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeCount(\\n            unitPrice\\n        );\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].prev(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeTotalAmount(\\n                unitPrice\\n            );\\n            quantities[i] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeCount(\\n                unitPrice\\n            );\\n        }\\n    }\\n\\n    function getLendOrderBook(uint256 _limit)\\n        public\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = Storage.slot().lendOrders[Storage.slot().maturity].first();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\\n            unitPrice\\n        );\\n        quantities[0] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeCount(unitPrice);\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = Storage.slot().lendOrders[Storage.slot().maturity].next(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\\n                unitPrice\\n            );\\n            quantities[i] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeCount(\\n                unitPrice\\n            );\\n        }\\n    }\\n\\n    function getOrder(uint48 _orderId)\\n        public\\n        view\\n        returns (\\n            ProtocolTypes.Side side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        )\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n\\n        OrderItem memory orderItem;\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            orderItem = Storage.slot().lendOrders[marketOrder.maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n        } else {\\n            orderItem = Storage.slot().borrowOrders[marketOrder.maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n        }\\n\\n        if (orderItem.maker != address(0)) {\\n            return (\\n                marketOrder.side,\\n                marketOrder.unitPrice,\\n                marketOrder.maturity,\\n                orderItem.maker,\\n                orderItem.amount,\\n                orderItem.timestamp\\n            );\\n        }\\n    }\\n\\n    function getTotalAmountFromLendOrders(address _user)\\n        public\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds) = getActiveLendOrderIds(\\n            _user\\n        );\\n\\n        maturity = Storage.slot().userCurrentMaturities[_user];\\n\\n        for (uint256 i = 0; i < activeOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[activeOrderIds[i]];\\n            // Sum future values in the current maturity.\\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\\n            // as an order canceled in the past market.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .lendOrders[Storage.slot().maturity]\\n                .getOrderById(marketOrder.unitPrice, activeOrderIds[i]);\\n            activeAmount += orderItem.amount;\\n        }\\n\\n        for (uint256 i = 0; i < inActiveOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveOrderIds[i]];\\n            if (maturity == 0) {\\n                maturity = marketOrder.maturity;\\n            }\\n            // Sum future values in the maturity of orders\\n            // It will be the future value when the order is created, even if the market is rotated\\n            // and maturity is updated.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .lendOrders[marketOrder.maturity]\\n                .getOrderById(marketOrder.unitPrice, inActiveOrderIds[i]);\\n            inactiveAmount += orderItem.amount;\\n            inactiveFutureValue +=\\n                (orderItem.amount * ProtocolTypes.PRICE_DIGIT) /\\n                marketOrder.unitPrice;\\n        }\\n    }\\n\\n    function getTotalAmountFromBorrowOrders(address _user)\\n        public\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        (\\n            uint48[] memory activeOrderIds,\\n            uint48[] memory inActiveOrderIds\\n        ) = getActiveBorrowOrderIds(_user);\\n\\n        for (uint256 i = 0; i < activeOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[activeOrderIds[i]];\\n            // Sum future values in the current maturity.\\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\\n            // as an order canceled in the past market.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .borrowOrders[Storage.slot().maturity]\\n                .getOrderById(marketOrder.unitPrice, activeOrderIds[i]);\\n            activeAmount += orderItem.amount;\\n        }\\n\\n        maturity = Storage.slot().userCurrentMaturities[_user];\\n\\n        for (uint256 i = 0; i < inActiveOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveOrderIds[i]];\\n            // Sum future values in the maturity of orders\\n            // It will be the future value when the order is created, even if the market is rotated\\n            // and maturity is updated.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .borrowOrders[marketOrder.maturity]\\n                .getOrderById(marketOrder.unitPrice, inActiveOrderIds[i]);\\n            inactiveAmount += orderItem.amount;\\n            inactiveFutureValue +=\\n                (orderItem.amount * ProtocolTypes.PRICE_DIGIT) /\\n                marketOrder.unitPrice;\\n        }\\n    }\\n\\n    function getActiveLendOrderIds(address _user)\\n        public\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        bool isPastMaturity = Storage.slot().userCurrentMaturities[_user] !=\\n            Storage.slot().maturity;\\n\\n        activeOrderIds = new uint48[](\\n            isPastMaturity ? 0 : Storage.slot().activeLendOrderIds[_user].length\\n        );\\n        inActiveOrderIds = new uint48[](Storage.slot().activeLendOrderIds[_user].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().activeLendOrderIds[_user].length; i++) {\\n            uint48 orderId = Storage.slot().activeLendOrderIds[_user][i];\\n            MarketOrder memory marketOrder = Storage.slot().orders[orderId];\\n\\n            if (\\n                !Storage\\n                    .slot()\\n                    .lendOrders[Storage.slot().userCurrentMaturities[_user]]\\n                    .isActiveOrderId(marketOrder.unitPrice, orderId)\\n            ) {\\n                inActiveOrderCount += 1;\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                if (!isPastMaturity) {\\n                    activeOrderCount += 1;\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function getActiveBorrowOrderIds(address _user)\\n        public\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        bool isPastMaturity = Storage.slot().userCurrentMaturities[_user] !=\\n            Storage.slot().maturity;\\n\\n        activeOrderIds = new uint48[](\\n            isPastMaturity ? 0 : Storage.slot().activeBorrowOrderIds[_user].length\\n        );\\n        inActiveOrderIds = new uint48[](Storage.slot().activeBorrowOrderIds[_user].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().activeBorrowOrderIds[_user].length; i++) {\\n            uint48 orderId = Storage.slot().activeBorrowOrderIds[_user][i];\\n            MarketOrder memory marketOrder = Storage.slot().orders[orderId];\\n\\n            if (\\n                !Storage\\n                    .slot()\\n                    .borrowOrders[Storage.slot().userCurrentMaturities[_user]]\\n                    .isActiveOrderId(marketOrder.unitPrice, orderId)\\n            ) {\\n                inActiveOrderCount += 1;\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                if (!isPastMaturity) {\\n                    activeOrderCount += 1;\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function insertOrder(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice,\\n        bool _isInterruption\\n    ) public returns (uint48 orderId) {\\n        orderId = nextOrderId();\\n        Storage.slot().orders[orderId] = MarketOrder(\\n            _side,\\n            _unitPrice,\\n            Storage.slot().maturity,\\n            block.timestamp\\n        );\\n\\n        if (_side == ProtocolTypes.Side.LEND) {\\n            Storage.slot().lendOrders[Storage.slot().maturity].insertOrder(\\n                _unitPrice,\\n                orderId,\\n                _user,\\n                _amount,\\n                _isInterruption\\n            );\\n            Storage.slot().activeLendOrderIds[_user].push(orderId);\\n        } else if (_side == ProtocolTypes.Side.BORROW) {\\n            Storage.slot().borrowOrders[Storage.slot().maturity].insertOrder(\\n                _unitPrice,\\n                orderId,\\n                _user,\\n                _amount,\\n                _isInterruption\\n            );\\n            Storage.slot().activeBorrowOrderIds[_user].push(orderId);\\n        }\\n    }\\n\\n    function dropOrders(\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    )\\n        public\\n        returns (\\n            RemainingOrder memory remainingOrder,\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount\\n        )\\n    {\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            (filledFutureValue, remainingAmount, remainingOrder) = Storage\\n                .slot()\\n                .lendOrders[Storage.slot().maturity]\\n                .dropLeft(_amount, _unitPrice);\\n        } else if (_side == ProtocolTypes.Side.LEND) {\\n            (filledFutureValue, remainingAmount, remainingOrder) = Storage\\n                .slot()\\n                .borrowOrders[Storage.slot().maturity]\\n                .dropRight(_amount, _unitPrice);\\n        }\\n    }\\n\\n    function cleanLendOrders(address _user, uint256 _maturity)\\n        public\\n        returns (\\n            uint48[] memory orderIds,\\n            uint256 activeOrderCount,\\n            uint256 removedFutureValue,\\n            uint256 removedOrderAmount\\n        )\\n    {\\n        (\\n            uint48[] memory activeLendOrderIds,\\n            uint48[] memory inActiveLendOrderIds\\n        ) = getActiveLendOrderIds(_user);\\n\\n        Storage.slot().activeLendOrderIds[_user] = activeLendOrderIds;\\n        activeOrderCount = activeLendOrderIds.length;\\n        uint256 inactiveOrderCount = inActiveLendOrderIds.length;\\n        orderIds = new uint48[](inactiveOrderCount);\\n\\n        for (uint256 i = 0; i < inactiveOrderCount; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveLendOrderIds[i]];\\n            OrderItem memory orderItem = Storage.slot().lendOrders[_maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                inActiveLendOrderIds[i]\\n            );\\n            removedFutureValue += Storage.slot().lendOrders[_maturity].getFutureValue(\\n                marketOrder.unitPrice,\\n                inActiveLendOrderIds[i]\\n            );\\n            removedOrderAmount += orderItem.amount;\\n\\n            orderIds[i] = orderItem.orderId;\\n        }\\n    }\\n\\n    function cleanBorrowOrders(address _user, uint256 _maturity)\\n        public\\n        returns (\\n            uint48[] memory orderIds,\\n            uint256 activeOrderCount,\\n            uint256 removedFutureValue,\\n            uint256 removedOrderAmount\\n        )\\n    {\\n        (\\n            uint48[] memory activeBorrowOrderIds,\\n            uint48[] memory inActiveBorrowOrderIds\\n        ) = getActiveBorrowOrderIds(_user);\\n\\n        Storage.slot().activeBorrowOrderIds[_user] = activeBorrowOrderIds;\\n        activeOrderCount = activeBorrowOrderIds.length;\\n        uint256 inactiveOrderCount = inActiveBorrowOrderIds.length;\\n        orderIds = new uint48[](inactiveOrderCount);\\n\\n        for (uint256 i = 0; i < inactiveOrderCount; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveBorrowOrderIds[i]];\\n            OrderItem memory orderItem = Storage.slot().borrowOrders[_maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                inActiveBorrowOrderIds[i]\\n            );\\n            removedFutureValue += Storage.slot().borrowOrders[_maturity].getFutureValue(\\n                marketOrder.unitPrice,\\n                inActiveBorrowOrderIds[i]\\n            );\\n\\n            removedOrderAmount += orderItem.amount;\\n\\n            orderIds[i] = orderItem.orderId;\\n        }\\n    }\\n\\n    function removeOrder(address _user, uint48 _orderId)\\n        public\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n        uint256 removedAmount;\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            removedAmount = Storage.slot().lendOrders[Storage.slot().maturity].removeOrder(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n            removeOrderIdFromOrders(Storage.slot().activeLendOrderIds[_user], _orderId);\\n        } else if (marketOrder.side == ProtocolTypes.Side.BORROW) {\\n            removedAmount = Storage.slot().borrowOrders[Storage.slot().maturity].removeOrder(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n            removeOrderIdFromOrders(Storage.slot().activeBorrowOrderIds[_user], _orderId);\\n        }\\n\\n        return (marketOrder.side, removedAmount, marketOrder.unitPrice);\\n    }\\n\\n    /**\\n     * @notice Increases and returns id of last order in order book.\\n     * @return The new order id\\n     */\\n    function nextOrderId() private returns (uint48) {\\n        Storage.slot().lastOrderId++;\\n        return Storage.slot().lastOrderId;\\n    }\\n\\n    function removeOrderIdFromOrders(uint48[] storage orders, uint256 orderId) private {\\n        uint256 lastOrderIndex = orders.length - 1;\\n        for (uint256 i = 0; i <= lastOrderIndex; i++) {\\n            if (orders[i] == orderId) {\\n                if (i != lastOrderIndex) {\\n                    uint48 lastOrderId = orders[lastOrderIndex];\\n                    orders[i] = lastOrderId;\\n                }\\n\\n                orders.pop();\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3ff849649784a018a372f581bc3e84c9cca9ccb7c21812442f6012e1e509597b\",\"license\":\"MIT\"},\"contracts/storages/LendingMarketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport \\\"../libraries/HitchensOrderStatisticsTreeLib.sol\\\";\\n\\nstruct MarketOrder {\\n    ProtocolTypes.Side side;\\n    uint256 unitPrice; // in basis points\\n    uint256 maturity;\\n    uint256 timestamp;\\n}\\n\\nlibrary LendingMarketStorage {\\n    using HitchensOrderStatisticsTreeLib for HitchensOrderStatisticsTreeLib.Tree;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarket\\\");\\n\\n    struct Storage {\\n        uint48 lastOrderId;\\n        bytes32 ccy;\\n        uint256 genesisDate;\\n        uint256 maturity;\\n        // Mapping from user to active lend order ids\\n        mapping(address => uint48[]) activeLendOrderIds;\\n        // Mapping from user to active borrow order ids\\n        mapping(address => uint48[]) activeBorrowOrderIds;\\n        // Mapping from user to current maturity\\n        mapping(address => uint256) userCurrentMaturities;\\n        // Mapping from orderId to order\\n        mapping(uint256 => MarketOrder) orders;\\n        // Mapping from maturity to lending orders\\n        mapping(uint256 => HitchensOrderStatisticsTreeLib.Tree) lendOrders;\\n        // Mapping from maturity to borrowing orders\\n        mapping(uint256 => HitchensOrderStatisticsTreeLib.Tree) borrowOrders;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x04b080d246d43abd5cd7c970c3375a5a707587a58dc13d172c41a9aed97f76f3\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant PRICE_DIGIT = 10000; // price digit in the basis (10000 -> 1)\\n    uint256 public constant PCT_DIGIT = 10000; // percentage digit in the basis (10000 -> 100%)\\n\\n    uint256 internal constant DAYS_IN_YEAR = 365;\\n    uint256 internal constant SECONDS_IN_YEAR = 31557600;\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n}\\n\",\"keccak256\":\"0xfc44bd731aebae907269f73e2d828379e77253ecd21642a874ab2e4a4f763262\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x614b6c61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100f45760003560e01c8063914551f111610096578063e1396d1511610070578063e1396d15146102b5578063e3d904d8146102bd578063e7df768c146102f0578063eebc28f91461030357600080fd5b8063914551f114610261578063a452c3f814610281578063d866d355146102a257600080fd5b806357b5758c116100d257806357b5758c1461018757806363978ac81461019d5780636c5db8431461020d5780637ce219aa1461023c57600080fd5b80633684d3ea146100f95780634a53967b146101355780634bf62d1614610165575b600080fd5b81801561010557600080fd5b5061011961011436600461468b565b610316565b60405165ffffffffffff90911681526020015b60405180910390f35b81801561014157600080fd5b506101556101503660046146eb565b61051d565b60405161012c9493929190614758565b610178610173366004614787565b610770565b60405161012c939291906147d0565b61018f610a24565b60405190815260200161012c565b8180156101a957600080fd5b506101bd6101b8366004614813565b610a5a565b60408051845165ffffffffffff1681526020808601516001600160a01b031690820152848201519181019190915260609384015193810193909352608083019190915260a082015260c00161012c565b81801561021957600080fd5b5061022d61022836600461485c565b610b2c565b60405161012c939291906148c7565b61024f61024a3660046148e6565b610cca565b60405161012c96959493929190614901565b81801561026d57600080fd5b5061015561027c3660046146eb565b610e59565b61029461028f366004614940565b61109f565b60405161012c92919061495b565b6101786102b0366004614787565b6113fb565b61018f611642565b6102d06102cb366004614940565b61164f565b60408051948552602085019390935291830152606082015260800161012c565b6102d06102fe366004614940565b6118f8565b610294610311366004614940565b611b83565b6000610320611e92565b9050604051806080016040528087600181111561033f5761033f61488f565b8152602001848152602001610352611eeb565b60030154815260200142815250610367611eeb565b65ffffffffffff831660009081526007919091016020526040902081518154829060ff19166001838181111561039f5761039f61488f565b0217905550602082015160018201556040820151600282015560609091015160039091015560008660018111156103d8576103d861488f565b14156104815761041f83828787866103ee611eeb565b60080160006103fb611eeb565b600301548152602001908152602001600020611f0f9095949392919063ffffffff16565b610427611eeb565b6001600160a01b03861660009081526004919091016020908152604082208054600181018255908352912060058083049091018054919092066006026101000a65ffffffffffff8181021990921691841602179055610514565b60018660018111156104955761049561488f565b1415610514576104b883828787866104ab611eeb565b60090160006103fb611eeb565b6104c0611eeb565b6001600160a01b0386166000908152600591820160209081526040822080546001810182559083529120828204018054929091066006026101000a65ffffffffffff81810219909316928416029190911790555b95945050505050565b6060600080600080600061053088611b83565b915091508161053d611eeb565b60050160008a6001600160a01b03166001600160a01b031681526020019081526020016000209080519060200190610576929190614562565b50815181519095508067ffffffffffffffff81111561059757610597614980565b6040519080825280602002602001820160405280156105c0578160200160208202803683370190505b50965060005b818110156107635760006105d8611eeb565b60070160008584815181106105ef576105ef614996565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16600181111561063c5761063c61488f565b600181111561064d5761064d61488f565b81526020016001820154815260200160028201548152602001600382015481525050905060006106b6826020015186858151811061068d5761068d614996565b602002602001015161069d611eeb565b60008f8152600991909101602052604090209190611f91565b90506106fb82602001518685815181106106d2576106d2614996565b60200260200101516106e2611eeb565b60008f815260099190910160205260409020919061204c565b61070590896149c2565b97508060a001518761071791906149c2565b965080600001518a848151811061073057610730614996565b602002602001019065ffffffffffff16908165ffffffffffff16815250505050808061075b906149da565b9150506105c6565b5050505092959194509250565b60608060608367ffffffffffffffff81111561078e5761078e614980565b6040519080825280602002602001820160405280156107b7578160200160208202803683370190505b5092508367ffffffffffffffff8111156107d3576107d3614980565b6040519080825280602002602001820160405280156107fc578160200160208202803683370190505b5091508367ffffffffffffffff81111561081857610818614980565b604051908082528060200260200182016040528015610841578160200160208202803683370190505b5090506000610875610851611eeb565b600801600061085e611eeb565b600301548152602001908152602001600020612089565b9050808460008151811061088b5761088b614996565b6020026020010181815250506108d0816108a3611eeb565b60080160006108b0611eeb565b6003015481526020019081526020016000206120d090919063ffffffff16565b836000815181106108e3576108e3614996565b602002602001018181525050610928816108fb611eeb565b6008016000610908611eeb565b6003015481526020019081526020016000206120eb90919063ffffffff16565b8260008151811061093b5761093b614996565b602090810291909101015260015b8451811015610a1b578161095c57610a1b565b61099582610968611eeb565b6008016000610975611eeb565b60030154815260200190815260200160002061210490919063ffffffff16565b9150818582815181106109aa576109aa614996565b6020026020010181815250506109c2826108a3611eeb565b8482815181106109d4576109d4614996565b6020026020010181815250506109ec826108fb611eeb565b8382815181106109fe576109fe614996565b602090810291909101015280610a13816149da565b915050610949565b50509193909250565b6000610a55610a31611eeb565b6009016000610a3e611eeb565b600301548152602001908152602001600020612205565b905090565b610a62614617565b6000806001866001811115610a7957610a7961488f565b1415610ac657610aba8585610a8c611eeb565b6008016000610a99611eeb565b6003015481526020019081526020016000206122479092919063ffffffff16565b94509092509050610b23565b6000866001811115610ada57610ada61488f565b1415610b2357610b1b8585610aed611eeb565b6009016000610afa611eeb565b60030154815260200190815260200160002061258b9092919063ffffffff16565b945090925090505b93509350939050565b600080600080610b3a611eeb565b65ffffffffffff861660009081526007919091016020526040908190208151608081019092528054829060ff166001811115610b7857610b7861488f565b6001811115610b8957610b8961488f565b81526001820154602082015260028201546040820152600390910154606090910152905060008082516001811115610bc357610bc361488f565b1415610c4457610c08826020015187610bda611eeb565b6008016000610be7611eeb565b6003015481526020019081526020016000206128869092919063ffffffff16565b9050610c3f610c15611eeb565b6001600160a01b03891660009081526004919091016020526040902065ffffffffffff88166128c6565b610cb4565b600182516001811115610c5957610c5961488f565b1415610cb457610c7d826020015187610c70611eeb565b6009016000610be7611eeb565b9050610cb4610c8a611eeb565b6001600160a01b03891660009081526005919091016020526040902065ffffffffffff88166128c6565b8151602090920151919450925090509250925092565b6000806000806000806000610cdd611eeb565b65ffffffffffff891660009081526007919091016020526040908190208151608081019092528054829060ff166001811115610d1b57610d1b61488f565b6001811115610d2c57610d2c61488f565b815260200160018201548152602001600282015481526020016003820154815250509050610d886040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b600082516001811115610d9d57610d9d61488f565b1415610dd857610dd182602001518a610db4611eeb565b604080870151600090815260089290920160205290209190611f91565b9050610e09565b610e0682602001518a610de9611eeb565b604080870151600090815260099290920160205290209190611f91565b90505b60608101516001600160a01b031615610e4d5781600001518260200151836040015183606001518460a0015185608001519750975097509750975097505050610e50565b50505b91939550919395565b60606000806000806000610e6c8861109f565b9150915081610e79611eeb565b60040160008a6001600160a01b03166001600160a01b031681526020019081526020016000209080519060200190610eb2929190614562565b50815181519095508067ffffffffffffffff811115610ed357610ed3614980565b604051908082528060200260200182016040528015610efc578160200160208202803683370190505b50965060005b81811015610763576000610f14611eeb565b6007016000858481518110610f2b57610f2b614996565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff166001811115610f7857610f7861488f565b6001811115610f8957610f8961488f565b8152602001600182015481526020016002820154815260200160038201548152505090506000610ff28260200151868581518110610fc957610fc9614996565b6020026020010151610fd9611eeb565b60008f8152600891909101602052604090209190611f91565b9050611037826020015186858151811061100e5761100e614996565b602002602001015161101e611eeb565b60008f815260089190910160205260409020919061204c565b61104190896149c2565b97508060a001518761105391906149c2565b965080600001518a848151811061106c5761106c614996565b602002602001019065ffffffffffff16908165ffffffffffff168152505050508080611097906149da565b915050610f02565b60608060008060006110af611eeb565b600301546110bb611eeb565b6001600160a01b03881660009081526006919091016020526040902054141590508061110b576110e9611eeb565b6001600160a01b0387166000908152600491909101602052604090205461110e565b60005b67ffffffffffffffff81111561112657611126614980565b60405190808252806020026020018201604052801561114f578160200160208202803683370190505b50945061115a611eeb565b6001600160a01b0387166000908152600491909101602052604090205467ffffffffffffffff81111561118f5761118f614980565b6040519080825280602002602001820160405280156111b8578160200160208202803683370190505b50935060005b6111c6611eeb565b6001600160a01b038816600090815260049190910160205260409020548110156113f25760006111f4611eeb565b6001600160a01b03891660009081526004919091016020526040902080548390811061122257611222614996565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1690506000611256611eeb565b65ffffffffffff831660009081526007919091016020526040908190208151608081019092528054829060ff1660018111156112945761129461488f565b60018111156112a5576112a561488f565b81526020016001820154815260200160028201548152602001600382015481525050905061132b8160200151836112da611eeb565b60080160006112e7611eeb565b60060160008f6001600160a01b03166001600160a01b03168152602001908152602001600020548152602001908152602001600020612a1c9092919063ffffffff16565b6113885761133a6001866149c2565b9450818761134888866149f5565b8151811061135857611358614996565b602002602001019065ffffffffffff16908165ffffffffffff16815250508361138357600188510388525b6113dd565b836113d5576113986001876149c2565b955081886113a687866149f5565b815181106113b6576113b6614996565b602002602001019065ffffffffffff16908165ffffffffffff16815250505b600187510387525b505080806113ea906149da565b9150506111be565b50505050915091565b60608060608367ffffffffffffffff81111561141957611419614980565b604051908082528060200260200182016040528015611442578160200160208202803683370190505b5092508367ffffffffffffffff81111561145e5761145e614980565b604051908082528060200260200182016040528015611487578160200160208202803683370190505b5091508367ffffffffffffffff8111156114a3576114a3614980565b6040519080825280602002602001820160405280156114cc578160200160208202803683370190505b50905060006114dc610a31611eeb565b905080846000815181106114f2576114f2614996565b6020026020010181815250506115178161150a611eeb565b60090160006108b0611eeb565b8360008151811061152a5761152a614996565b60200260200101818152505061154f81611542611eeb565b6009016000610908611eeb565b8260008151811061156257611562614996565b602090810291909101015260015b8451811015610a1b578161158357610a1b565b6115bc8261158f611eeb565b600901600061159c611eeb565b600301548152602001908152602001600020612a3a90919063ffffffff16565b9150818582815181106115d1576115d1614996565b6020026020010181815250506115e98261150a611eeb565b8482815181106115fb576115fb614996565b60200260200101818152505061161382611542611eeb565b83828151811061162557611625614996565b60209081029190910101528061163a816149da565b915050611570565b6000610a55610851611eeb565b60008060008060008061166187611b83565b9150915060005b825181101561179757600061167b611eeb565b600701600085848151811061169257611692614996565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff1660018111156116df576116df61488f565b60018111156116f0576116f061488f565b815260200160018201548152602001600282015481526020016003820154815250509050600061176e826020015186858151811061173057611730614996565b6020026020010151611740611eeb565b600901600061174d611eeb565b600301548152602001908152602001600020611f919092919063ffffffff16565b90508060a001518961178091906149c2565b98505050808061178f906149da565b915050611668565b506117a0611eeb565b6001600160a01b0388166000908152600691909101602052604081205493505b81518110156118ee5760006117d3611eeb565b60070160008484815181106117ea576117ea614996565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff1660018111156118375761183761488f565b60018111156118485761184861488f565b8152602001600182015481526020016002820154815260200160038201548152505090506000611898826020015185858151811061188857611888614996565b6020026020010151610de9611eeb565b90508060a00151886118aa91906149c2565b975081602001516127108260a001516118c39190614a0c565b6118cd9190614a2b565b6118d790886149c2565b9650505080806118e6906149da565b9150506117c0565b5050509193509193565b60008060008060008061190a8761109f565b91509150611916611eeb565b6001600160a01b0388166000908152600691909101602052604081205493505b8251811015611a44576000611949611eeb565b600701600085848151811061196057611960614996565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff1660018111156119ad576119ad61488f565b60018111156119be576119be61488f565b8152602001600182015481526020016002820154815260200160038201548152505090506000611a1b82602001518685815181106119fe576119fe614996565b6020026020010151611a0e611eeb565b600801600061174d611eeb565b90508060a0015189611a2d91906149c2565b985050508080611a3c906149da565b915050611936565b5060005b81518110156118ee576000611a5b611eeb565b6007016000848481518110611a7257611a72614996565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff166001811115611abf57611abf61488f565b6001811115611ad057611ad061488f565b81526001820154602082015260028201546040820152600390910154606090910152905084611b0157806040015194505b6000611b2d8260200151858581518110611b1d57611b1d614996565b6020026020010151610db4611eeb565b90508060a0015188611b3f91906149c2565b975081602001516127108260a00151611b589190614a0c565b611b629190614a2b565b611b6c90886149c2565b965050508080611b7b906149da565b915050611a48565b6060806000806000611b93611eeb565b60030154611b9f611eeb565b6001600160a01b038816600090815260069190910160205260409020541415905080611bef57611bcd611eeb565b6001600160a01b03871660009081526005919091016020526040902054611bf2565b60005b67ffffffffffffffff811115611c0a57611c0a614980565b604051908082528060200260200182016040528015611c33578160200160208202803683370190505b509450611c3e611eeb565b6001600160a01b0387166000908152600591909101602052604090205467ffffffffffffffff811115611c7357611c73614980565b604051908082528060200260200182016040528015611c9c578160200160208202803683370190505b50935060005b611caa611eeb565b6001600160a01b038816600090815260059190910160205260409020548110156113f2576000611cd8611eeb565b6001600160a01b038916600090815260059190910160205260409020805483908110611d0657611d06614996565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1690506000611d3a611eeb565b65ffffffffffff831660009081526007919091016020526040908190208151608081019092528054829060ff166001811115611d7857611d7861488f565b6001811115611d8957611d8961488f565b815260200160018201548152602001600282015481526020016003820154815250509050611dcb816020015183611dbe611eeb565b60090160006112e7611eeb565b611e2857611dda6001866149c2565b94508187611de888866149f5565b81518110611df857611df8614996565b602002602001019065ffffffffffff16908165ffffffffffff168152505083611e2357600188510388525b611e7d565b83611e7557611e386001876149c2565b95508188611e4687866149f5565b81518110611e5657611e56614996565b602002602001019065ffffffffffff16908165ffffffffffff16815250505b600187510387525b50508080611e8a906149da565b915050611ca2565b6000611e9c611eeb565b805465ffffffffffff16906000611eb283614a4d565b91906101000a81548165ffffffffffff021916908365ffffffffffff16021790555050611edd611eeb565b5465ffffffffffff16919050565b7ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0a90565b60008211611f5a5760405162461bcd60e51b8152602060048201526013602482015272125b9cdd59999a58da595b9d08185b5bdd5b9d606a1b60448201526064015b60405180910390fd5b611f648686612b34565b8015611f7c57611f778686868686612d04565b611f89565b611f898686868686612d7d565b505050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915250600082815260018085016020908152604080842065ffffffffffff80871686526006909101835293819020815160c08101835281548087168252600160301b8104871694820194909452600160601b90930490941690820152908201546001600160a01b031660608201526002820154608082015260039091015460a08201525b9392505050565b6000828152600184016020908152604080832065ffffffffffff85168452600601909152812060030154612081908490612dee565b949350505050565b80548061209857506000919050565b5b6000818152600180840160205260409091200154156120cb576000908152600180830160205260409091200154612099565b919050565b60008181526001830160205260409020600501545b92915050565b6000908152600191909101602052604090206004015490565b6000816121745760405162461bcd60e51b815260206004820152603860248201527f4f7264657253746174697374696373547265652834303129202d205374617274604482015277696e672076616c75652063616e6e6f74206265207a65726f60401b6064820152608401611f51565b6000828152600184016020526040902060020154156121b35760008281526001840160205260409020600201546121ac908490612e07565b90506120e5565b5060008181526001830160205260409020545b80158015906121e75750600081815260018401602052604090206002015482145b156120e55760008181526001840160205260409020549091506121c6565b80548061221457506000919050565b5b6000818152600183016020526040902060020154156120cb576000908152600182016020526040902060020154612215565b600080612252614617565b8461226f5760405162461bcd60e51b8152600401611f5190614a73565b60008061227b88612089565b9050600061228889612205565b9050600080888411158061229a575088155b6122e15760405162461bcd60e51b8152602060048201526018602482015277496e73756666696369656e74206c696d69742076616c756560401b6044820152606401611f51565b89811080156122ef57508315155b801561230357508815806123035750888411155b1561237b57600084815260018c016020526040902060050154915061232882826149c2565b905083945060008a821161233d576000612347565b6123478b836149f5565b61235190846149f5565b905061235d8582612dee565b612367908a6149c2565b98506123738c86612104565b9450506122e1565b898110158061238957508885145b1561243b57898111156123c05784935060006123a58b836149f5565b6123af90846149f5565b90506123bc8c8683612e45565b9650505b60008481526001808d016020526040822090810191909155545b8015612439578481111561242357600085815260018d016020526040902054811461241f5760008581526001808e016020526040808320849055838352909120018590555b8094505b600090815260018c0160205260409020546123da565b505b808a11156124505761244d818b6149f5565b96505b84831480156124705750600083815260018c016020526040902060050154155b1561247e5760008b556124b2565b8a5485118061249857508a54851480156124985750808a10155b156124b257838b55600084815260018c0160205260408120555b8a5460009081526001808d01602052604090912001541580156124e957508a54600090815260018c01602052604090206002015415155b15612541578a5460009081526001808d016020526040808320600201548352909120015415612533578a54600090815260018c016020526040902060020154612533908c906130e5565b6125418b8c600001546131ba565b8a54600090815260018c01602052604090206003015460ff161561257d578a54600090815260018c0160205260409020600301805460ff191690555b505050505093509350939050565b600080612596614617565b846125b35760405162461bcd60e51b8152600401611f5190614a73565b6000806125bf88612205565b905060006125cc89612089565b905060008088841015806125de575088155b6126255760405162461bcd60e51b8152602060048201526018602482015277496e73756666696369656e74206c696d69742076616c756560401b6044820152606401611f51565b898110801561263357508315155b801561264757508815806126475750888410155b156126bf57600084815260018c016020526040902060050154915061266c82826149c2565b905083945060008a821161268157600061268b565b61268b8b836149f5565b61269590846149f5565b90506126a18582612dee565b6126ab908a6149c2565b98506126b78c86612a3a565b945050612625565b89811015806126cd57508885145b1561277f57898111156127045784935060006126e98b836149f5565b6126f390846149f5565b90506127008c8683612e45565b9650505b600084815260018c01602052604081206002810191909155545b801561277d578481101561276757600085815260018d016020526040902054811461276357600085815260018d01602052604080822083905582825290206002018590555b8094505b600090815260018c01602052604090205461271e565b505b808a111561279457612791818b6149f5565b96505b84831480156127b45750600083815260018c016020526040902060050154155b156127c25760008b556127f6565b8a548510806127dc57508a54851480156127dc5750808a10155b156127f657838b55600084815260018c0160205260408120555b8a54600090815260018c01602052604090206002015415801561282d57508a5460009081526001808d016020526040909120015415155b15612541578a5460009081526001808d01602052604080832090910154825290206002015415612878578a5460009081526001808d0160205260409091200154612878908c906131ba565b6125418b8c600001546130e5565b6000612893848484612a1c565b6128af5760405162461bcd60e51b8152600401611f5190614ad0565b6128ba848484613292565b905061204584846134fe565b81546000906128d7906001906149f5565b905060005b818111612a1657828482815481106128f6576128f6614996565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff161415612a04578181146129bd57600084838154811061294757612947614996565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1690508085838154811061298457612984614996565b90600052602060002090600591828204019190066006026101000a81548165ffffffffffff021916908365ffffffffffff160217905550505b838054806129cd576129cd614b20565b60019003818190600052602060002090600591828204019190066006026101000a81549065ffffffffffff02191690559055612a16565b80612a0e816149da565b9150506128dc565b50505050565b6000612a298484846137bb565b801561208157506120818484613904565b600081612aaa5760405162461bcd60e51b815260206004820152603860248201527f4f7264657253746174697374696373547265652834303229202d205374617274604482015277696e672076616c75652063616e6e6f74206265207a65726f60401b6064820152608401611f51565b600082815260018085016020526040909120015415612ae25760008281526001808501602052604090912001546121ac9084906139bd565b5060008181526001830160205260409020545b8015801590612b165750600081815260018085016020526040909120015482145b156120e5576000818152600184016020526040902054909150612af5565b80612ba75760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303529202d2056616c756560448201527f20746f20696e736572742063616e6e6f74206265207a65726f000000000000006064820152608401611f51565b81546000905b8015612c0b5780915080831015612bd7576000908152600180850160205260409091200154612bad565b80831115612bf8576000908152600184016020526040902060020154612bad565b80831415612c065750505050565b612bad565b6000838152600185016020526040902084541580612c5a575060008381526001808701602052604090912001548414801590612c5a575060008381526001860160205260409020600201548414155b15612c885760006004820181905560058201819055612c7c90869086906139f4565b612c8885856000613a2c565b82815560006001808301829055600283019190915560038201805460ff1916909117905582612cb957838555612cf3565b82841015612cdc5760008381526001808701602052604090912001849055612cf3565b600083815260018601602052604090206002018490555b612cfd8585613a6c565b5050505050565b6000848152600186016020526040812090612d228787878787613cd7565b9050612d468787838560030160019054906101000a900465ffffffffffff16613e76565b612d518787836139f4565b6003820154600160381b900465ffffffffffff16612d7457612d74878783613a2c565b50505050505050565b600084815260018601602052604090206003810154610100900465ffffffffffff16612db057611f778686868686612d04565b6000612dbf8787878787613cd7565b9050612de387878460030160079054906101000a900465ffffffffffff1684613e76565b612d74878783613a2c565b600082612dfd61271084614a0c565b6120459190614a2b565b60005b600082815260018085016020526040909120015415612e3f576000918252600180840160205260409092209091015490612e0a565b50919050565b612e4d614617565b600083815260018501602052604090206005810154831115612ed75760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834313029202d20416d6f756e60448201527f7420746f2066696c6c20697320696e73756666696369656e74000000000000006064820152608401611f51565b60038082015465ffffffffffff610100909104811660008181526006850160209081526040808320815160c08101835281548088168252600160301b8104881694820194909452600160601b9093049095169082015260018401546001600160a01b0316606082015260028401546080820152929093015460a0830152859291905b65ffffffffffff811615801590612f6f57508315155b156130745765ffffffffffff8082166000908152600687016020908152604091829020825160c08101845281548086168252600160301b8104861693820193909352600160601b9092049093169181019190915260018201546001600160a01b031660608201526002820154608082015260039091015460a0820181905290925084106130135760a082015161300590856149f5565b935081602001519050613062565b6040518060800160405280836000015165ffffffffffff16815260200183606001516001600160a01b03168152602001858460a0015161305391906149f5565b81526020018990529550600093505b8261306c816149da565b935050612f59565b61308389898460000151613eeb565b506040860151156130d957600088815260018a0160209081526040808320855165ffffffffffff16845260060190915280822090880151600382018054929391929091906130d29084906149f5565b9091555050505b50505050509392505050565b6000818152600180840160205260408083209182018054925483855291842060020154938590528390559091801561312b57600081815260018601602052604090208490555b600083815260018601602052604090208290558161314b57828555613198565b60008281526001860160205260409020600201548414156131815760008281526001860160205260409020600201839055613198565b600082815260018087016020526040909120018390555b5050600081815260019093016020526040808420600201839055918352912055565b60008181526001808401602052604080832060028101805491548286529285209093015493859052918390559091801561320257600081815260018601602052604090208490555b60008381526001860160205260409020829055816132225782855561326f565b6000828152600180870160205260409091200154841415613258576000828152600180870160205260409091200183905561326f565b600082815260018601602052604090206002018390555b505060008181526001938401602052604080822090940183905591825291902055565b600061329f848484612a1c565b6132bb5760405162461bcd60e51b8152600401611f5190614ad0565b50600082815260018085016020908152604080842065ffffffffffff80871680875260068301855295839020835160c08101855281548084168252600160301b8104841696820196909652600160601b909504821693850193909352938201546001600160a01b031660608401526002820154608084015260039182015460a0840181905291810154919490936101009092049091161480156133735750600382015465ffffffffffff858116600160381b90920416145b1561339557613384868660006139f4565b61339086866000613a2c565b613467565b600382015465ffffffffffff8581166101009092041614156133f3576133c0868683602001516139f4565b60208082015165ffffffffffff1660009081526006840190915260409020805465ffffffffffff60601b19169055613467565b600382015465ffffffffffff858116600160381b9092041614156134535761342086868360400151613a2c565b60408082015165ffffffffffff166000908152600684016020522080546bffffffffffff00000000000019169055613467565b613467868683604001518460200151613e76565b805165ffffffffffff1660009081526006830160205260408120805471ffffffffffffffffffffffffffffffffffff19168155600180820180546001600160a01b0319169055600282018390556003909101829055600484018054919290916134d19084906149f5565b909155505060a08101516005830180546000906134ef9084906149f5565b90915550929695505050505050565b806135715760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303729202d2056616c756560448201527f20746f2064656c6574652063616e6e6f74206265207a65726f000000000000006064820152608401611f51565b6000818152600183016020526040812060048101549091908190612cfd57600084815260018087016020526040909120015415806135c057506000848152600186016020526040902060020154155b156135cc575082613614565b5060008381526001850160205260409020600201545b6000818152600180870160205260409091200154156136145760009081526001808601602052604090912001546135e2565b600081815260018087016020526040909120015415613648576000818152600180870160205260409091200154915061365f565b600081815260018601602052604090206002015491505b600081815260018601602052604080822054848352912081905580156136d05760008181526001808801602052604090912001548214156136b557600081815260018088016020526040909120018390556136d4565b600081815260018701602052604090206002018390556136d4565b8286555b600082815260018701602052604090206003015460ff161585831461375e576136fe8784886140d1565b60008681526001888101602052604080832080830154878552828520938401819055845281842087905560028082015490840181905584529083208690556003908101549286905201805460ff191660ff90921615159190911790559194915b801561376e5761376e8785614148565b50506000818152600180870160205260408220828155908101829055600281018290556003810180546cffffffffffffffffffffffffff1916905560048101829055600501555050505050565b600082815260018085016020908152604080842065ffffffffffff808716808752600683018552838720845160c0810186528154808516808352600160301b8204861698830198909852600160601b900490931694830194909452948301546001600160a01b031660608201526002830154608082015260039092015460a083015285939092146138525760009350505050612045565b5b604081015165ffffffffffff16156138e55760409081015165ffffffffffff808216600090815260068501602090815290849020845160c08101865281548085168252600160301b8104851693820193909352600160601b9092049092169381019390935260018101546001600160a01b03166060840152600281015460808401526003015460a08301529250613853565b5060030154610100900465ffffffffffff908116911614949350505050565b600081613913575060006120e5565b8254821415613924575060016120e5565b815b6000818152600185016020526040902054156139b35760008181526001808601602052604080832054808452922001548214801590613978575060008181526001860160205260409020600201548214155b15613988576000925050506120e5565b845481141561399c576001925050506120e5565b506000908152600184016020526040902054613926565b5060009392505050565b60005b600082815260018401602052604090206002015415612e3f57600091825260018301602052604090912060020154906139c0565b6000918252600190920160205260409020600301805465ffffffffffff9092166101000266ffffffffffff0019909216919091179055565b6000918252600190920160205260409020600301805465ffffffffffff909216600160381b026cffffffffffff0000000000000019909216919091179055565b60005b82548214801590613a995750600082815260018401602052604080822054825290206003015460ff165b15613cb5576000828152600180850160205260408083205480845281842054845292200154811415613bbc5760008181526001850160205260408082205482528082206002015480835291206003015490925060ff1615613b42576000818152600180860160205260408083206003808201805460ff19908116909155878652838620820180548216905582548652928520018054909216909217905590829052549250613caf565b6000818152600185016020526040902060020154831415613b6a57809250613b6a84846131ba565b50600082815260018085016020526040808320548084528184206003808201805460ff19908116909155825487529386200180549093169093179091559182905254613bb79085906130e5565b613caf565b6000818152600180860160205260408083205483528083209091015480835291206003015490925060ff1615613c3a576000818152600180860160205260408083206003808201805460ff19908116909155878652838620820180548216905582548652928520018054909216909217905590829052549250613caf565b6000818152600180860160205260409091200154831415613c6257809250613c6284846130e5565b50600082815260018085016020526040808320548084528184206003808201805460ff19908116909155825487529386200180549093169093179091559182905254613caf9085906131ba565b50613a6f565b505080546000908152600190910160205260409020600301805460ff19169055565b6000848152600186016020908152604080832065ffffffffffff871684526006810190925282206002015415613d6a5760405162461bcd60e51b815260206004820152603260248201527f4f7264657253746174697374696373547265652834303929202d204f726465726044820152711034b21030b63932b0b23c9032bc34b9ba1760711b6064820152608401611f51565b6001816004016000828254613d7f91906149c2565b9250508190555082816005016000828254613d9a91906149c2565b90915550506040805160c08101825265ffffffffffff808816808352600060208085018281528587018381526001600160a01b03808d16606089019081524260808a0190815260a08a018e81529787526006909b019094529790932095518654915193518616600160601b0265ffffffffffff60601b19948716600160301b026bffffffffffffffffffffffff199093169682169690961791909117929092169390931784559151600184018054919095166001600160a01b031990911617909355925160028201559051600390910155905095945050505050565b60009283526001939093016020908152604080842065ffffffffffff938416808652600690910190925280842080546bffffffffffff0000000000001916600160301b9490961693840295909517909455908252919020805465ffffffffffff60601b1916600160601b909202919091179055565b6000613ef8848484612a1c565b613f145760405162461bcd60e51b8152600401611f5190614ad0565b50600082815260018085016020908152604080842065ffffffffffff808716865260068201808552838720845160c08101865281548085168252600160301b8104851682890152600160601b9004841681870152818801546001600160a01b031660608201526002820154608082015260039182015460a08201819052828601546101009004909416808a529290965293909620909201549194909390915b8665ffffffffffff16831461401757600092835260068501602052604090922054600160301b900465ffffffffffff169181613fee816149da565b60008581526006880160205260409020600301549093506140109150826149c2565b9050613fb3565b600385015465ffffffffffff888116600160381b90920416141561405257614041898960006139f4565b61404d89896000613a2c565b614090565b614061898986602001516139f4565b60208085015165ffffffffffff1660009081526006870190915260409020805465ffffffffffff60601b191690555b818560040160008282546140a491906149f5565b92505081905550808560050160008282546140bf91906149f5565b90915550959998505050505050505050565b6000818152600184016020526040808220548483529120819055806140f857828455612a16565b600081815260018086016020526040909120015482141561412e5760008181526001808601602052604090912001839055612a16565b600090815260019390930160205250604090912060020155565b60005b825482148015906141705750600082815260018401602052604090206003015460ff16155b1561454357600082815260018085016020526040808320548084529220015483141561436c5760008181526001850160205260408082206002015480835291206003015490925060ff1615614214576000828152600180860160205260408083206003908101805460ff199081169091558585529190932090920180549092161790556141fd84826131ba565b600081815260018501602052604090206002015491505b60008281526001808601602052604080832090910154825290206003015460ff1615801561425f5750600082815260018501602052604080822060020154825290206003015460ff16155b1561428c57600082815260018581016020526040909120600301805460ff1916909117905591508161453d565b600082815260018501602052604080822060020154825290206003015460ff16614309576000828152600180860160205260408083208083015484529083206003908101805460ff19908116909155938690520180549092161790556142f284836130e5565b600081815260018501602052604090206002015491505b600081815260018501602052604080822060039081018054868552838520808401805460ff909316151560ff19938416179055825482169092556002909101548452919092209091018054909116905561436384826131ba565b8354925061453d565b6000818152600180860160205260408083209091015480835291206003015490925060ff16156143eb576000828152600180860160205260408083206003908101805460ff199081169091558585529190932090920180549092161790556143d484826130e5565b600081815260018086016020526040909120015491505b600082815260018501602052604080822060020154825290206003015460ff16158015614436575060008281526001808601602052604080832090910154825290206003015460ff16155b1561446357600082815260018581016020526040909120600301805460ff1916909117905591508161453d565b60008281526001808601602052604080832090910154825290206003015460ff166144e257600082815260018086016020526040808320600281015484529083206003908101805460ff19908116909155938690520180549092161790556144cb84836131ba565b600081815260018086016020526040909120015491505b60008181526001808601602052604080832060039081018054878652838620808401805460ff909316151560ff1993841617905582548216909255930154845292209091018054909116905561453884826130e5565b835492505b5061414b565b506000908152600190910160205260409020600301805460ff19169055565b828054828255906000526020600020906004016005900481019282156146075791602002820160005b838211156145d357835183826101000a81548165ffffffffffff021916908365ffffffffffff160217905550926020019260060160208160050104928301926001030261458b565b80156146055782816101000a81549065ffffffffffff02191690556006016020816005010492830192600103026145d3565b505b50614613929150614650565b5090565b6040518060800160405280600065ffffffffffff16815260200160006001600160a01b0316815260200160008152602001600081525090565b5b808211156146135760008155600101614651565b8035600281106120cb57600080fd5b80356001600160a01b03811681146120cb57600080fd5b600080600080600060a086880312156146a357600080fd5b6146ac86614665565b94506146ba60208701614674565b93506040860135925060608601359150608086013580151581146146dd57600080fd5b809150509295509295909350565b600080604083850312156146fe57600080fd5b61470783614674565b946020939093013593505050565b600081518084526020808501945080840160005b8381101561474d57815165ffffffffffff1687529582019590820190600101614729565b509495945050505050565b60808152600061476b6080830187614715565b6020830195909552506040810192909252606090910152919050565b60006020828403121561479957600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561474d578151875295820195908201906001016147b4565b6060815260006147e360608301866147a0565b82810360208401526147f581866147a0565b9050828103604084015261480981856147a0565b9695505050505050565b60008060006060848603121561482857600080fd5b61483184614665565b95602085013595506040909401359392505050565b803565ffffffffffff811681146120cb57600080fd5b6000806040838503121561486f57600080fd5b61487883614674565b915061488660208401614846565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b600281106148c357634e487b7160e01b600052602160045260246000fd5b9052565b606081016148d582866148a5565b602082019390935260400152919050565b6000602082840312156148f857600080fd5b61204582614846565b60c0810161490f82896148a5565b602082019690965260408101949094526001600160a01b03929092166060840152608083015260a090910152919050565b60006020828403121561495257600080fd5b61204582614674565b60408152600061496e6040830185614715565b82810360208401526105148185614715565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156149d5576149d56149ac565b500190565b60006000198214156149ee576149ee6149ac565b5060010190565b600082821015614a0757614a076149ac565b500390565b6000816000190483118215151615614a2657614a266149ac565b500290565b600082614a4857634e487b7160e01b600052601260045260246000fd5b500490565b600065ffffffffffff80831681811415614a6957614a696149ac565b6001019392505050565b60208082526038908201527f4f7264657253746174697374696373547265652834303829202d20416d6f756e60408201527f7420746f2064726f702063616e6e6f74206265207a65726f0000000000000000606082015260800190565b60208082526030908201527f4f7264657253746174697374696373547265652834313029202d204f7264657260408201526f103237b2b9903737ba1032bc34b9ba1760811b606082015260800190565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220c8ba49890e1764240f7ea669ac6e233ff1d7df6bb3828cb41dc3b6d3d7b4a19d64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}