{
  "address": "0xa76916BE5e5C29bA6c6Efb911249564dBfa73f6B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_unsettledOrderCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_unsettledOrderAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isUnsettledBorrowOrder",
          "type": "bool"
        }
      ],
      "name": "getCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalUsedCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalActualCollateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalUsedCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalActualCollateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUsedCurrencies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getWithdrawableCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_unsettledOrderCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_unsettledOrderAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isUnsettledBorrowOrder",
          "type": "bool"
        }
      ],
      "name": "isCovered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x088abd33b524a4c5e0384ea7648273923e8af1941c2dcd5f4dfc6c1ad6db5814",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0xa76916BE5e5C29bA6c6Efb911249564dBfa73f6B",
    "transactionIndex": 62,
    "gasUsed": "1609615",
    "logsBloom": "0x
    "blockHash": "0x70a26c4ca638882281e5e054e194a554d5e48a52811f9abd88103707561332e2",
    "transactionHash": "0x088abd33b524a4c5e0384ea7648273923e8af1941c2dcd5f4dfc6c1ad6db5814",
    "logs": [],
    "blockNumber": 8444829,
    "cumulativeGasUsed": "27330699",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "756e02af0d0a4a19fa1850709e39bdb9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_unsettledOrderCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_unsettledOrderAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isUnsettledBorrowOrder\",\"type\":\"bool\"}],\"name\":\"getCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUsedCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalActualCollateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUsedCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalActualCollateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUsedCurrencies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_unsettledOrderCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_unsettledOrderAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isUnsettledBorrowOrder\",\"type\":\"bool\"}],\"name\":\"isCovered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getWithdrawableCollateral(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"Maximum amount of ETH that can be withdrawn\"}},\"withdraw(address,bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to withdraw.\",\"_ccy\":\"Currency name in bytes32\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getWithdrawableCollateral(address)\":{\"notice\":\"Calculates maximum amount of ETH that can be withdrawn.\"},\"withdraw(address,bytes32,uint256)\":{\"notice\":\"Withdraws funds by the caller from unused collateral.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/logics/DepositManagementLogic.sol\":\"DepositManagementLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Quoter Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x124b4334f058f70afd8f3b04315cc0812961d400957225d0875872b2a31afbff\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IBeaconProxyController {\\n    event BeaconProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function deployFutureValueVault() external returns (address futureValueVault);\\n\\n    function deployLendingMarket(\\n        bytes32 _ccy,\\n        uint256 _genesisDate,\\n        uint256 _maturity\\n    ) external returns (address market);\\n}\\n\",\"keccak256\":\"0xc92a3f5ea6c065590788e5d3d7f259790c4f403e8f50af20ff1ea633badfd8e5\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Currency} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event AddCurrency(bytes32 indexed ccy, uint256 haircut);\\n    event RemoveCurrency(bytes32 indexed ccy);\\n\\n    event UpdateHaircut(bytes32 indexed ccy, uint256 haircut);\\n\\n    event AddPriceFeed(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n    event RemovePriceFeed(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256 amount);\\n\\n    function convertToETH(bytes32 _ccy, int256 _amount) external view returns (int256 amount);\\n\\n    function convertToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getEthDecimals(bytes32) external view returns (uint8);\\n\\n    function getUsdDecimals(bytes32) external view returns (uint8);\\n\\n    function getCurrencies() external view returns (bytes32[] memory);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function currencyExists(bytes32 _ccy) external view returns (bool);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function addCurrency(\\n        bytes32 _ccy,\\n        address _ethPriceFeed,\\n        uint256 _haircut\\n    ) external;\\n\\n    function updateHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function removeCurrency(bytes32 _ccy) external;\\n}\\n\",\"keccak256\":\"0xa06fb4afa7c9577db3b943b6abe5d4e297ef202cc72d8941ab150e708963e351\",\"license\":\"MIT\"},\"contracts/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {MaturityUnitPrice} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\\n    event CompoundFactorUpdated(\\n        bytes32 indexed ccy,\\n        uint256 compoundFactor,\\n        uint256 unitPrice,\\n        uint256 currentMaturity,\\n        uint256 previousMaturity\\n    );\\n\\n    function isInitialized(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getMaturityUnitPrice(bytes32 ccy, uint256 maturity)\\n        external\\n        view\\n        returns (MaturityUnitPrice memory);\\n\\n    function getGenesisValueInFutureValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function calculateCurrentFVFromFVInMaturity(\\n        bytes32 _ccy,\\n        uint256 _basisMaturity,\\n        int256 _futureValue\\n    ) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function initialize(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor,\\n        uint256 maturity\\n    ) external;\\n\\n    function updateCompoundFactor(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice\\n    ) external;\\n\\n    function addGenesisValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external returns (bool);\\n\\n    function addGenesisValue(\\n        bytes32 ccy,\\n        address user,\\n        int256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf54297e7f9ab7be473c244b3c85c68c54124f4ff69867f54f6e5ce93dc536213\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ILendingMarketController {\\n    event CreateLendingMarket(\\n        bytes32 indexed ccy,\\n        address indexed marketAddr,\\n        address futureValueVault,\\n        uint256 index,\\n        uint256 maturity\\n    );\\n    event RotateLendingMarkets(bytes32 ccy, uint256 oldMaturity, uint256 newMaturity);\\n    event FillOrder(\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        uint256 filledFutureValue\\n    );\\n    event FillOrdersAsync(\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 filledFutureValue\\n    );\\n    event CancelOrder(\\n        uint48 orderId,\\n        address indexed maker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event Liquidate(\\n        address indexed user,\\n        bytes32 collateralCcy,\\n        bytes32 indexed debtCcy,\\n        uint256 indexed debtMaturity,\\n        uint256 amount\\n    );\\n\\n    function isLiquidator(address user) external view returns (bool);\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarkets(bytes32 ccy) external view returns (address[] memory);\\n\\n    function getLendingMarket(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getBorrowUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getLendUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getMidUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getBorrowOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getFutureValue(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        address user\\n    ) external view returns (int256 futureValue);\\n\\n    function getPresentValue(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        address user\\n    ) external view returns (int256 presentValue);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInETH(address user)\\n        external\\n        view\\n        returns (int256 totalPresentValue);\\n\\n    function getOrderFeeRate(bytes32 ccy) external view returns (uint256);\\n\\n    function calculateLentFundsFromOrders(bytes32 ccy, address user)\\n        external\\n        view\\n        returns (\\n            uint256 workingOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 lentAmount\\n        );\\n\\n    function calculateBorrowedFundsFromOrders(bytes32 ccy, address user)\\n        external\\n        view\\n        returns (\\n            uint256 workingOrdersAmount,\\n            uint256 debtAmount,\\n            uint256 borrowedAmount\\n        );\\n\\n    function calculateFunds(bytes32 ccy, address user)\\n        external\\n        view\\n        returns (\\n            uint256 workingLendOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 collateralAmount,\\n            uint256 lentAmount,\\n            uint256 workingBorrowOrdersAmount,\\n            uint256 debtAmount,\\n            uint256 borrowedAmount\\n        );\\n\\n    function calculateTotalFundsInETH(\\n        address user,\\n        bytes32 depositCcy,\\n        uint256 depositAmount\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalWorkingLendOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalCollateralAmount,\\n            uint256 totalLentAmount,\\n            uint256 totalWorkingBorrowOrdersAmount,\\n            uint256 totalDebtAmount,\\n            uint256 totalBorrowedAmount,\\n            bool isEnoughDeposit\\n        );\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor,\\n        uint256 orderFeeRate\\n    ) external;\\n\\n    function createLendingMarket(bytes32 ccy)\\n        external\\n        returns (address market, address futureValue);\\n\\n    function createOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndCreateOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function executeLiquidationCall(\\n        bytes32 collateralCcy,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        address user,\\n        uint24 poolFee\\n    ) external returns (bool);\\n\\n    function registerLiquidator(bool isLiquidator) external;\\n\\n    function cancelOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint48 orderId\\n    ) external returns (bool);\\n\\n    function rotateLendingMarkets(bytes32 ccy) external;\\n\\n    function pauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function updateOrderFeeRate(bytes32 ccy, uint256 orderFeeRate) external;\\n\\n    function cleanAllOrders(address user) external;\\n\\n    function cleanOrders(bytes32 ccy, address user) external returns (uint256 activeOrderCount);\\n}\\n\",\"keccak256\":\"0xdd7d9976197d82239f32cc436c37556b9ceb335d56c50c37aed2ce33efce1084\",\"license\":\"MIT\"},\"contracts/interfaces/IReserveFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IReserveFund {\\n    event Pause(address account);\\n    event Unpause(address account);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xa2a6df7a095ca8f8874d26672f75fe1f09c45caf041cb27d5e265bcb974a9754\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ITokenVault {\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event RegisterCurrency(bytes32 ccy, address tokenAddress, bool isCollateral);\\n    event UpdateCurrency(bytes32 ccy, bool isCollateral);\\n    event Swap(\\n        address indexed user,\\n        bytes32 ccyIn,\\n        bytes32 ccyOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        uint256 liquidatorFee,\\n        uint256 protocolFee\\n    );\\n\\n    function isCovered(\\n        address user,\\n        bytes32 ccy,\\n        uint256 unsettledExp,\\n        ProtocolTypes.Side unsettledOrderSide\\n    ) external view returns (bool);\\n\\n    function isCovered(address user) external view returns (bool);\\n\\n    function isCollateral(bytes32 _ccy) external view returns (bool);\\n\\n    function isCollateral(bytes32[] calldata _ccys)\\n        external\\n        view\\n        returns (bool[] memory isCollateralCurrencies);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getTokenAddress(bytes32 ccy) external view returns (address);\\n\\n    function getCollateralCurrencies() external view returns (bytes32[] memory);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256 maxWithdraw);\\n\\n    function getCoverage(address user) external view returns (uint256 coverage);\\n\\n    function getUnusedCollateral(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address party) external view returns (uint256);\\n\\n    function getLiquidationAmount(address user) external view returns (uint256 liquidationAmount);\\n\\n    function getTotalDepositAmount(bytes32 _ccy) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getCollateralParameters()\\n        external\\n        view\\n        returns (\\n            uint256 liquidationThresholdRate,\\n            uint256 liquidationProtocolFeeRate,\\n            uint256 liquidatorFeeRate,\\n            address uniswapRouter,\\n            address uniswapQuoter\\n        );\\n\\n    function setCollateralParameters(\\n        uint256 liquidationThresholdRate,\\n        uint256 liquidationProtocolFeeRate,\\n        uint256 liquidatorFeeRate,\\n        address uniswapRouter,\\n        address uniswapQuoter\\n    ) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositFrom(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function removeDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function swapDepositAmounts(\\n        address liquidator,\\n        address user,\\n        bytes32 ccyFrom,\\n        bytes32 ccyTo,\\n        uint256 amountOut,\\n        uint24 poolFee,\\n        uint256 offsetAmount\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0xde1b9f00071f44b49b3787878e42b762e5102f4461cba69eb5b2f758e2ebb026\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH9 is IERC20 {\\n    event Deposit(address user, uint256 amount);\\n    event Withdrawal(address user, uint256 amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x5aefa06efedcbfe7d7605aa67217f066a0e84b450d416695254eb95239a251d7\",\"license\":\"MIT\"},\"contracts/libraries/AddressResolverLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/MixinAddressResolverStorage.sol\\\";\\n\\nlibrary AddressResolverLib {\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return IReserveFund(getAddress(Contracts.RESERVE_FUND));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0x65d55399d6c8b753ddaa36c1370fae1c68dfbfb8b6b2d09b1717ba037b079998\",\"license\":\"MIT\"},\"contracts/libraries/CollateralParametersHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ISwapRouter} from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport {IQuoter} from \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\\\";\\nimport {CollateralParametersStorage as Storage} from \\\"../storages/CollateralParametersStorage.sol\\\";\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\n\\n/**\\n * @notice CollateralParametersHandler is an library to handle the main collateral parameters.\\n */\\nlibrary CollateralParametersHandler {\\n    event UpdateAutoLiquidationThresholdRate(uint256 previousRate, uint256 ratio);\\n    event UpdateLiquidationProtocolFeeRate(uint256 previousRate, uint256 ratio);\\n    event UpdateLiquidatorFeeRate(uint256 previousRate, uint256 ratio);\\n    event UpdateUniswapRouter(address previousUniswapRouter, address uniswapRouter);\\n    event UpdateUniswapQuoter(address previousUniswapQuoter, address uniswapQuoter);\\n\\n    /**\\n     * @dev Gets the liquidation threshold rate\\n     * @return The liquidation threshold rate\\n     */\\n    function liquidationThresholdRate() internal view returns (uint256) {\\n        return Storage.slot().liquidationThresholdRate;\\n    }\\n\\n    /**\\n     * @dev Gets the liquidation fee received by liquidators\\n     * @return The liquidation fee received by liquidators\\n     */\\n    function liquidatorFeeRate() internal view returns (uint256) {\\n        return Storage.slot().liquidatorFeeRate;\\n    }\\n\\n    /**\\n     * @dev Gets the liquidation protocol fee received by protocol\\n     * @return The liquidation protocol fee received by protocol\\n     */\\n    function liquidationProtocolFeeRate() internal view returns (uint256) {\\n        return Storage.slot().liquidationProtocolFeeRate;\\n    }\\n\\n    /**\\n     * @dev Gets Uniswap Router contract address\\n     */\\n    function uniswapRouter() internal view returns (ISwapRouter) {\\n        return Storage.slot().uniswapRouter;\\n    }\\n\\n    /**\\n     * @dev Gets Uniswap Quoter contract address\\n     */\\n    function uniswapQuoter() internal view returns (IQuoter) {\\n        return Storage.slot().uniswapQuoter;\\n    }\\n\\n    /**\\n     * @dev Sets main collateral parameters this function\\n     * solves the issue of frontrunning during parameters tuning\\n     * @param _liquidationThresholdRate The liquidation threshold rate\\n     * @param _liquidationProtocolFeeRate The liquidation fee rate received by protocol\\n     * @param _liquidatorFeeRate The liquidation fee rate received by liquidators\\n     * @param _uniswapRouter Uniswap router contract address\\n     * @param _uniswapQuoter Uniswap quoter contract address\\n     * @notice Triggers only be contract owner\\n     */\\n    function setCollateralParameters(\\n        uint256 _liquidationThresholdRate,\\n        uint256 _liquidationProtocolFeeRate,\\n        uint256 _liquidatorFeeRate,\\n        address _uniswapRouter,\\n        address _uniswapQuoter\\n    ) internal {\\n        require(_liquidationThresholdRate > 0, \\\"Invalid liquidation threshold rate\\\");\\n        require(\\n            _liquidationProtocolFeeRate <= ProtocolTypes.PCT_DIGIT,\\n            \\\"Invalid liquidation protocol fee rate\\\"\\n        );\\n        require(_liquidatorFeeRate <= ProtocolTypes.PCT_DIGIT, \\\"Invalid liquidator fee rate\\\");\\n        require(_uniswapRouter != address(0), \\\"Invalid Uniswap Router\\\");\\n        require(_uniswapQuoter != address(0), \\\"Invalid Uniswap Quoter\\\");\\n\\n        if (_liquidationThresholdRate != Storage.slot().liquidationThresholdRate) {\\n            emit UpdateAutoLiquidationThresholdRate(\\n                Storage.slot().liquidationThresholdRate,\\n                _liquidationThresholdRate\\n            );\\n            Storage.slot().liquidationThresholdRate = _liquidationThresholdRate;\\n        }\\n\\n        if (_liquidationProtocolFeeRate != Storage.slot().liquidationProtocolFeeRate) {\\n            emit UpdateLiquidationProtocolFeeRate(\\n                Storage.slot().liquidationProtocolFeeRate,\\n                _liquidationProtocolFeeRate\\n            );\\n            Storage.slot().liquidationProtocolFeeRate = _liquidationProtocolFeeRate;\\n        }\\n\\n        if (_liquidatorFeeRate != Storage.slot().liquidatorFeeRate) {\\n            Storage.slot().liquidatorFeeRate = _liquidatorFeeRate;\\n            emit UpdateLiquidatorFeeRate(Storage.slot().liquidatorFeeRate, _liquidatorFeeRate);\\n        }\\n\\n        if (_uniswapRouter != address(Storage.slot().uniswapRouter)) {\\n            emit UpdateUniswapRouter(address(Storage.slot().uniswapRouter), _uniswapRouter);\\n            Storage.slot().uniswapRouter = ISwapRouter(_uniswapRouter);\\n        }\\n\\n        if (_uniswapQuoter != address(Storage.slot().uniswapQuoter)) {\\n            emit UpdateUniswapQuoter(address(Storage.slot().uniswapQuoter), _uniswapQuoter);\\n            Storage.slot().uniswapQuoter = IQuoter(_uniswapQuoter);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9ca05349bd9d73b87d6ed756fb3e7dddb276f678fbbae512937927b4ca6cd94d\",\"license\":\"MIT\"},\"contracts/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant RESERVE_FUND = \\\"ReserveFund\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE_VAULT = \\\"FutureValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0x8e73eead72efa03bcc03c1cdf72cdcebed0f7e6f5a58cda1fd74e0fc03f356e6\",\"license\":\"MIT\"},\"contracts/libraries/ERC20Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IWETH9} from \\\"../interfaces/IWETH9.sol\\\";\\nimport {ERC20Storage as Storage} from \\\"../storages/ERC20Storage.sol\\\";\\n\\nlibrary ERC20Handler {\\n    function initialize(address _weth) internal {\\n        require(Storage.slot().weth == address(0), \\\"Already initialized\\\");\\n        Storage.slot().weth = _weth;\\n    }\\n\\n    function weth() internal view returns (address) {\\n        return Storage.slot().weth;\\n    }\\n\\n    function depositAssets(\\n        address _token,\\n        address _payer,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == Storage.slot().weth) {\\n            wrapWETH(_receiver, _amount);\\n        } else {\\n            safeTransferFrom(_token, _payer, _receiver, _amount);\\n        }\\n    }\\n\\n    function withdrawAssets(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == Storage.slot().weth) {\\n            unwrapWETH(_receiver, _amount);\\n        } else {\\n            safeTransfer(_token, _receiver, _amount);\\n        }\\n    }\\n\\n    function wrapWETH(address _receiver, uint256 _amount) internal {\\n        require(address(this).balance >= _amount, \\\"Insufficient ETH\\\");\\n\\n        IWETH9(Storage.slot().weth).deposit{value: _amount}();\\n        IWETH9(Storage.slot().weth).transfer(_receiver, _amount);\\n    }\\n\\n    function unwrapWETH(address _receiver, uint256 _amount) internal {\\n        uint256 balanceWETH9 = IWETH9(Storage.slot().weth).balanceOf(address(this));\\n        require(balanceWETH9 >= _amount, \\\"Insufficient WETH\\\");\\n\\n        if (balanceWETH9 > 0) {\\n            IWETH9(Storage.slot().weth).withdraw(_amount);\\n            safeTransferETH(_receiver, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer helper from UniswapV2 Router\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    /**\\n     * There are many non-compliant ERC20 tokens... this can handle most, adapted from UniSwap V2\\n     * Im trying to make it a habit to put external calls last (reentrancy)\\n     * You can put this in an internal function if you like.\\n     */\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // 0xa9059cbb = bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n            abi.encodeWithSelector(0xa9059cbb, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        ); // ERC20 Transfer failed\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x815d7e717efb9e9f837464cdcf19feb7a08f4166e145481fcd35f679050526c3\",\"license\":\"MIT\"},\"contracts/libraries/logics/DepositManagementLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {ISwapRouter} from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\n// libraries\\nimport {AddressResolverLib} from \\\"../AddressResolverLib.sol\\\";\\nimport {CollateralParametersHandler as Params} from \\\"../CollateralParametersHandler.sol\\\";\\nimport {ERC20Handler} from \\\"../ERC20Handler.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"../../types/ProtocolTypes.sol\\\";\\n// storages\\nimport {TokenVaultStorage as Storage} from \\\"../../storages/TokenVaultStorage.sol\\\";\\n\\nlibrary DepositManagementLogic {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    struct CalculatedFundVars {\\n        uint256 workingLendOrdersAmount;\\n        uint256 collateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n        bool isEnoughDeposit;\\n    }\\n\\n    struct SwapDepositAmountsVars {\\n        uint256 userDepositAmount;\\n        uint256 depositAmount;\\n        uint256 amountOutWithFee;\\n        uint256 estimatedAmountOut;\\n    }\\n\\n    function isCovered(\\n        address _user,\\n        bytes32 _unsettledOrderCcy,\\n        uint256 _unsettledOrderAmount,\\n        bool _isUnsettledBorrowOrder\\n    ) public view returns (bool) {\\n        (uint256 totalCollateral, uint256 totalUsedCollateral, ) = getCollateralAmount(\\n            _user,\\n            _unsettledOrderCcy,\\n            _unsettledOrderAmount,\\n            _isUnsettledBorrowOrder\\n        );\\n\\n        return\\n            totalUsedCollateral == 0 ||\\n            (totalCollateral * ProtocolTypes.PCT_DIGIT >=\\n                totalUsedCollateral * Params.liquidationThresholdRate());\\n    }\\n\\n    function getUsedCurrencies(address _user) public view returns (bytes32[] memory) {\\n        EnumerableSet.Bytes32Set storage currencySet = Storage.slot().usedCurrencies[_user];\\n\\n        uint256 numCurrencies = currencySet.length();\\n        bytes32[] memory currencies = new bytes32[](numCurrencies);\\n\\n        for (uint256 i = 0; i < numCurrencies; i++) {\\n            bytes32 currency = currencySet.at(i);\\n            currencies[i] = currency;\\n        }\\n\\n        return currencies;\\n    }\\n\\n    function getDepositAmount(address _user, bytes32 _ccy) public view returns (uint256) {\\n        (, , , uint256 lentAmount, , , uint256 borrowedAmount) = AddressResolverLib\\n            .lendingMarketController()\\n            .calculateFunds(_ccy, _user);\\n        return Storage.slot().depositAmounts[_user][_ccy] + borrowedAmount - lentAmount;\\n    }\\n\\n    function getCollateralAmount(address _user)\\n        public\\n        view\\n        returns (\\n            uint256 totalCollateral,\\n            uint256 totalUsedCollateral,\\n            uint256 totalActualCollateral\\n        )\\n    {\\n        return getCollateralAmount(_user, \\\"\\\", 0, false);\\n    }\\n\\n    function getCollateralAmount(\\n        address _user,\\n        bytes32 _unsettledOrderCcy,\\n        uint256 _unsettledOrderAmount,\\n        bool _isUnsettledBorrowOrder\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 totalCollateral,\\n            uint256 totalUsedCollateral,\\n            uint256 totalActualCollateral\\n        )\\n    {\\n        CalculatedFundVars memory vars;\\n\\n        uint256 depositAmount = Storage.slot().depositAmounts[_user][_unsettledOrderCcy];\\n        uint256 unsettledBorrowOrdersAmountInETH;\\n\\n        if (_unsettledOrderAmount > 0) {\\n            if (_isUnsettledBorrowOrder) {\\n                unsettledBorrowOrdersAmountInETH = AddressResolverLib\\n                    .currencyController()\\n                    .convertToETH(_unsettledOrderCcy, _unsettledOrderAmount);\\n            } else {\\n                require(\\n                    depositAmount >= _unsettledOrderAmount,\\n                    \\\"Not enough collateral in the selected currency\\\"\\n                );\\n                depositAmount -= _unsettledOrderAmount;\\n\\n                if (Storage.slot().collateralCurrencies.contains(_unsettledOrderCcy)) {\\n                    vars.workingLendOrdersAmount += AddressResolverLib\\n                        .currencyController()\\n                        .convertToETH(_unsettledOrderCcy, _unsettledOrderAmount);\\n                }\\n            }\\n        }\\n\\n        (\\n            vars.workingLendOrdersAmount,\\n            ,\\n            vars.collateralAmount,\\n            vars.lentAmount,\\n            vars.workingBorrowOrdersAmount,\\n            vars.debtAmount,\\n            vars.borrowedAmount,\\n            vars.isEnoughDeposit\\n        ) = AddressResolverLib.lendingMarketController().calculateTotalFundsInETH(\\n            _user,\\n            _unsettledOrderCcy,\\n            depositAmount\\n        );\\n\\n        require(\\n            vars.isEnoughDeposit || _isUnsettledBorrowOrder || _unsettledOrderAmount == 0,\\n            \\\"Not enough collateral in the selected currency\\\"\\n        );\\n\\n        uint256 totalInternalDepositAmount = _getTotalInternalDepositAmountInETH(_user);\\n\\n        uint256 actualPlusCollateral = totalInternalDepositAmount + vars.borrowedAmount;\\n        uint256 minusCollateral = vars.workingLendOrdersAmount + vars.lentAmount;\\n        uint256 plusCollateral = actualPlusCollateral + vars.collateralAmount;\\n\\n        totalCollateral = plusCollateral >= minusCollateral ? plusCollateral - minusCollateral : 0;\\n        totalUsedCollateral =\\n            vars.workingBorrowOrdersAmount +\\n            vars.debtAmount +\\n            unsettledBorrowOrdersAmountInETH;\\n        totalActualCollateral = actualPlusCollateral >= minusCollateral\\n            ? actualPlusCollateral - minusCollateral\\n            : 0;\\n    }\\n\\n    /**\\n     * @notice Calculates maximum amount of ETH that can be withdrawn.\\n     * @param _user User's address\\n     * @return Maximum amount of ETH that can be withdrawn\\n     */\\n    function getWithdrawableCollateral(address _user) public view returns (uint256) {\\n        (\\n            uint256 totalCollateral,\\n            uint256 totalUsedCollateral,\\n            uint256 totalActualCollateral\\n        ) = getCollateralAmount(_user);\\n\\n        if (totalUsedCollateral == 0) {\\n            return totalActualCollateral;\\n        } else if (\\n            totalCollateral * ProtocolTypes.PRICE_DIGIT >\\n            totalUsedCollateral * Params.liquidationThresholdRate()\\n        ) {\\n            // NOTE: The formula is:\\n            // maxWithdraw = totalCollateral - ((totalUsedCollateral) * marginCallThresholdRate).\\n            uint256 maxWithdraw = (totalCollateral *\\n                ProtocolTypes.PRICE_DIGIT -\\n                (totalUsedCollateral) *\\n                Params.liquidationThresholdRate()) / ProtocolTypes.PRICE_DIGIT;\\n            return maxWithdraw >= totalActualCollateral ? totalActualCollateral : maxWithdraw;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function addDepositAmount(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) public {\\n        Storage.slot().depositAmounts[_user][_ccy] += _amount;\\n        Storage.slot().totalDepositAmount[_ccy] += _amount;\\n\\n        _updateUsedCurrencies(_user, _ccy);\\n    }\\n\\n    function removeDepositAmount(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) public {\\n        require(\\n            Storage.slot().depositAmounts[_user][_ccy] >= _amount,\\n            \\\"Not enough collateral in the selected currency\\\"\\n        );\\n\\n        Storage.slot().depositAmounts[_user][_ccy] -= _amount;\\n        Storage.slot().totalDepositAmount[_ccy] -= _amount;\\n\\n        _updateUsedCurrencies(_user, _ccy);\\n    }\\n\\n    /**\\n     * @notice Withdraws funds by the caller from unused collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to withdraw.\\n     */\\n    function withdraw(\\n        address user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) public returns (uint256 withdrawableAmount) {\\n        uint256 depositAmount = Storage.slot().depositAmounts[user][_ccy];\\n        if (Storage.slot().collateralCurrencies.contains(_ccy)) {\\n            uint256 maxWithdrawETH = getWithdrawableCollateral(user);\\n            uint256 maxWithdraw = AddressResolverLib.currencyController().convertFromETH(\\n                _ccy,\\n                maxWithdrawETH\\n            );\\n\\n            withdrawableAmount = _amount > maxWithdraw ? maxWithdraw : _amount;\\n            withdrawableAmount = depositAmount >= withdrawableAmount\\n                ? withdrawableAmount\\n                : depositAmount;\\n        } else {\\n            withdrawableAmount = depositAmount;\\n        }\\n\\n        removeDepositAmount(user, _ccy, withdrawableAmount);\\n\\n        return withdrawableAmount;\\n    }\\n\\n    function swapDepositAmounts(\\n        address _liquidator,\\n        address _user,\\n        bytes32 _ccyFrom,\\n        bytes32 _ccyTo,\\n        uint256 _amountOut,\\n        uint24 _poolFee,\\n        uint256 _offsetAmount\\n    )\\n        public\\n        returns (\\n            uint256 amountOut,\\n            uint256 amountInWithFee,\\n            uint256 liquidatorFee,\\n            uint256 protocolFee\\n        )\\n    {\\n        SwapDepositAmountsVars memory vars;\\n        address reserveFund = address(AddressResolverLib.reserveFund());\\n\\n        vars.userDepositAmount = Storage.slot().depositAmounts[_user][_ccyFrom];\\n        vars.depositAmount = vars.userDepositAmount;\\n\\n        if (!AddressResolverLib.reserveFund().isPaused()) {\\n            vars.depositAmount += Storage.slot().depositAmounts[reserveFund][_ccyFrom];\\n        }\\n\\n        require(vars.depositAmount > 0, \\\"No deposit amount in the selected currency\\\");\\n\\n        vars.amountOutWithFee =\\n            (_amountOut * ProtocolTypes.PCT_DIGIT) /\\n            (ProtocolTypes.PCT_DIGIT -\\n                Params.liquidatorFeeRate() -\\n                Params.liquidationProtocolFeeRate());\\n\\n        vars.estimatedAmountOut = Params.uniswapQuoter().quoteExactInputSingle(\\n            Storage.slot().tokenAddresses[_ccyFrom],\\n            Storage.slot().tokenAddresses[_ccyTo],\\n            _poolFee,\\n            vars.depositAmount,\\n            0\\n        );\\n\\n        if (vars.amountOutWithFee > vars.estimatedAmountOut) {\\n            vars.amountOutWithFee = vars.estimatedAmountOut;\\n        }\\n\\n        amountInWithFee = _executeSwap(\\n            _ccyFrom,\\n            _ccyTo,\\n            vars.amountOutWithFee,\\n            vars.depositAmount,\\n            _poolFee\\n        );\\n\\n        liquidatorFee =\\n            (vars.amountOutWithFee * Params.liquidatorFeeRate()) /\\n            ProtocolTypes.PCT_DIGIT;\\n\\n        if (vars.amountOutWithFee == vars.estimatedAmountOut) {\\n            protocolFee =\\n                (vars.amountOutWithFee * Params.liquidationProtocolFeeRate()) /\\n                ProtocolTypes.PCT_DIGIT;\\n            amountOut = vars.amountOutWithFee - liquidatorFee - protocolFee - _offsetAmount;\\n        } else {\\n            protocolFee = vars.amountOutWithFee - _amountOut - liquidatorFee;\\n            amountOut = _amountOut - _offsetAmount;\\n        }\\n\\n        if (amountInWithFee > vars.userDepositAmount) {\\n            removeDepositAmount(_user, _ccyFrom, vars.userDepositAmount);\\n            removeDepositAmount(reserveFund, _ccyFrom, amountInWithFee - vars.userDepositAmount);\\n        } else {\\n            removeDepositAmount(_user, _ccyFrom, amountInWithFee);\\n        }\\n\\n        addDepositAmount(_user, _ccyTo, amountOut);\\n        addDepositAmount(_liquidator, _ccyTo, liquidatorFee);\\n        addDepositAmount(reserveFund, _ccyTo, protocolFee);\\n    }\\n\\n    /**\\n     * @notice Gets the total of amount deposited in the user's collateral of all currencies\\n     *  in this contract by converting it to ETH.\\n     * @param _user Address of collateral user\\n     * @return totalDepositAmount The total deposited amount in ETH\\n     */\\n    function _getTotalInternalDepositAmountInETH(address _user)\\n        internal\\n        view\\n        returns (uint256 totalDepositAmount)\\n    {\\n        EnumerableSet.Bytes32Set storage currencies = Storage.slot().usedCurrencies[_user];\\n        uint256 len = currencies.length();\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            bytes32 ccy = currencies.at(i);\\n            if (Storage.slot().collateralCurrencies.contains(ccy)) {\\n                uint256 depositAmount = Storage.slot().depositAmounts[_user][ccy];\\n                totalDepositAmount += AddressResolverLib.currencyController().convertToETH(\\n                    ccy,\\n                    depositAmount\\n                );\\n            }\\n        }\\n\\n        return totalDepositAmount;\\n    }\\n\\n    function _updateUsedCurrencies(address _user, bytes32 _ccy) internal {\\n        if (Storage.slot().depositAmounts[_user][_ccy] > 0) {\\n            Storage.slot().usedCurrencies[_user].add(_ccy);\\n        } else {\\n            Storage.slot().usedCurrencies[_user].remove(_ccy);\\n        }\\n    }\\n\\n    function _executeSwap(\\n        bytes32 _ccyFrom,\\n        bytes32 _ccyTo,\\n        uint256 _amountOut,\\n        uint256 _amountInMaximum,\\n        uint24 _poolFee\\n    ) internal returns (uint256) {\\n        ERC20Handler.safeApprove(\\n            Storage.slot().tokenAddresses[_ccyFrom],\\n            address(Params.uniswapRouter()),\\n            _amountInMaximum\\n        );\\n\\n        ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter.ExactOutputSingleParams({\\n            tokenIn: Storage.slot().tokenAddresses[_ccyFrom],\\n            tokenOut: Storage.slot().tokenAddresses[_ccyTo],\\n            fee: _poolFee,\\n            recipient: address(this),\\n            deadline: block.timestamp,\\n            amountOut: _amountOut,\\n            amountInMaximum: _amountInMaximum,\\n            sqrtPriceLimitX96: 0\\n        });\\n\\n        return Params.uniswapRouter().exactOutputSingle(params);\\n    }\\n}\\n\",\"keccak256\":\"0xf12462b52f20bfe85ff1ba11edf86c4b77bb51a2a6fa90ee52482cd6565c2c0b\",\"license\":\"MIT\"},\"contracts/storages/CollateralParametersStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ISwapRouter} from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport {IQuoter} from \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\\\";\\n\\nlibrary CollateralParametersStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.collateralParameters\\\");\\n\\n    struct Storage {\\n        // Liquidation threshold rate (in basis point)\\n        uint256 liquidationThresholdRate;\\n        // Liquidation fee rate received by protocol (in basis point)\\n        uint256 liquidationProtocolFeeRate;\\n        // Liquidation fee rate received by liquidators (in basis point)\\n        uint256 liquidatorFeeRate;\\n        //  Uniswap router contract\\n        ISwapRouter uniswapRouter;\\n        //  Uniswap quoter contract\\n        IQuoter uniswapQuoter;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7cabba4652947d3dd17c78c9d972d9d65f4b9ca1297343074000bdca427070ac\",\"license\":\"MIT\"},\"contracts/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct Currency {\\n    bool isSupported;\\n    string name;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.currencyController\\\");\\n\\n    struct Storage {\\n        // Protocol currencies\\n        EnumerableSet.Bytes32Set currencies;\\n        mapping(bytes32 => uint256) haircuts;\\n        // PriceFeed\\n        mapping(bytes32 => AggregatorV3Interface) usdPriceFeeds;\\n        mapping(bytes32 => AggregatorV3Interface) ethPriceFeeds;\\n        mapping(bytes32 => uint8) usdDecimals;\\n        mapping(bytes32 => uint8) ethDecimals;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x318293c6e7a2b9129e4c4e05a873c772e3a0cc4a92b40cc88749586f716c6643\",\"license\":\"MIT\"},\"contracts/storages/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary ERC20Storage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.erc20\\\");\\n\\n    struct Storage {\\n        address weth;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d84467eb850e5927870cb2551e5d0631854cef875f2d3ede75861b5eb738c7c\",\"license\":\"MIT\"},\"contracts/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.genesisValueVault\\\");\\n\\n    struct Storage {\\n        mapping(bytes32 => bool) isInitialized;\\n        mapping(bytes32 => uint256) initialCompoundFactors;\\n        mapping(bytes32 => uint256) compoundFactors;\\n        mapping(bytes32 => uint256) currentMaturity;\\n        mapping(bytes32 => uint8) decimals;\\n        // Mapping from user to balance per currency\\n        mapping(bytes32 => mapping(address => int256)) balances;\\n        mapping(bytes32 => uint256) totalLendingSupplies;\\n        mapping(bytes32 => uint256) totalBorrowingSupplies;\\n        // Mapping from maturity to rate per currency\\n        mapping(bytes32 => mapping(uint256 => MaturityUnitPrice)) maturityUnitPrices;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x54db3779bbc12fa6f080e017f07334f6f846739b8b3648d56b113f67bec3e48d\",\"license\":\"MIT\"},\"contracts/storages/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.mixinAddressResolver\\\");\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 => address) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x852b885b6264a58930a0945c68842717e19f954eaefc0137235e6f263e17fa9d\",\"license\":\"MIT\"},\"contracts/storages/TokenVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary TokenVaultStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.tokenVault\\\");\\n\\n    struct Storage {\\n        // Currencies accepted as collateral\\n        EnumerableSet.Bytes32Set collateralCurrencies;\\n        // Mapping from currency name to token address\\n        mapping(bytes32 => address) tokenAddresses;\\n        // Mapping for used currency vaults per user.\\n        mapping(address => EnumerableSet.Bytes32Set) usedCurrencies;\\n        // Mapping from currency to total deposit amount\\n        mapping(bytes32 => uint256) totalDepositAmount;\\n        // Mapping for all deposits per users\\n        mapping(address => mapping(bytes32 => uint256)) depositAmounts;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbfc07559d1a3496d3f401ed5fef9d44cf64a0c412491066850a6fbf2b301e6a8\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant PRICE_DIGIT = 10000; // price digit in the basis (10000 -> 1)\\n    uint256 public constant PCT_DIGIT = 10000; // percentage digit in the basis (10000 -> 100%)\\n\\n    uint256 internal constant DAYS_IN_YEAR = 365;\\n    uint256 internal constant SECONDS_IN_MONTH = 2592000; // 60 * 60 * 24 * 30 * 12\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000; // 60 * 60 * 24 * 365\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0xb4f718379c4b1a90400813f4789e853dccb1e474697282e4ed5e36c0d0bd385b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x611c2a61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100a85760003560e01c8063948060dd11610070578063948060dd14610156578063ab2a077714610169578063fb7bd3b4146101a9578063fc700810146101c9578063fd2117fb146101e957600080fd5b80630253cd7e146100ad5780632917173a146100d357806346b1cb2c146100f35780634ba0c9b514610121578063654c629514610143575b600080fd5b6100c06100bb3660046117c5565b61020c565b6040519081526020015b60405180910390f35b8180156100df57600080fd5b506100c06100ee3660046117ef565b6102f5565b610106610101366004611833565b61041c565b604080519384526020840192909252908201526060016100ca565b81801561012d57600080fd5b5061014161013c3660046117ef565b6107bd565b005b61010661015136600461187b565b610844565b6100c061016436600461187b565b610864565b81801561017557600080fd5b50610189610184366004611896565b61094e565b6040805194855260208501939093529183015260608201526080016100ca565b8180156101b557600080fd5b506101416101c43660046117ef565b610dff565b6101dc6101d736600461187b565b610ec0565b6040516100ca919061190c565b6101fc6101f7366004611833565b610f8f565b60405190151581526020016100ca565b6000806000610219610ff5565b604051635c34776560e01b8152600481018690526001600160a01b0387811660248301529190911690635c3477659060440160e06040518083038186803b15801561026357600080fd5b505afa158015610277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029b9190611950565b96505050945050505081816102ae611025565b6001600160a01b0388166000908152600591909101602090815260408083208984529091529020546102e091906119ba565b6102ea91906119d2565b925050505b92915050565b600080610300611025565b6001600160a01b038616600090815260059190910160209081526040808320878452909152902054905061033c84610336611025565b90611049565b1561040557600061034c86610864565b90506000610358611064565b6040516306d062ad60e01b815260048101889052602481018490526001600160a01b0391909116906306d062ad9060440160206040518083038186803b1580156103a157600080fd5b505afa1580156103b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d991906119e9565b90508085116103e857846103ea565b805b9350838310156103fa57826103fc565b835b93505050610409565b8091505b610414858584610dff565b509392505050565b60008060006104636040518060e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b600061046d611025565b6001600160a01b038a166000908152600591909101602090815260408083208b845290915281205491508715610615578615610533576104ab611064565b6040516344a6ecdd60e01b8152600481018b9052602481018a90526001600160a01b0391909116906344a6ecdd9060440160206040518083038186803b1580156104f457600080fd5b505afa158015610508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052c91906119e9565b9050610615565b8782101561055c5760405162461bcd60e51b815260040161055390611a02565b60405180910390fd5b61056688836119d2565b915061057489610336611025565b1561061557610581611064565b6040516344a6ecdd60e01b8152600481018b9052602481018a90526001600160a01b0391909116906344a6ecdd9060440160206040518083038186803b1580156105ca57600080fd5b505afa1580156105de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060291906119e9565b835184906106119083906119ba565b9052505b61061d610ff5565b604051626256a560e31b81526001600160a01b038c81166004830152602482018c9052604482018590529190911690630312b528906064016101006040518083038186803b15801561066e57600080fd5b505afa158015610682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a69190611a50565b151560c08b0181905260a08b019190915260808a019190915260608901919091526040880191909152602087019190915291855250806106e35750865b806106ec575087155b6107085760405162461bcd60e51b815260040161055390611a02565b60006107138b611084565b905060008460a001518261072791906119ba565b905060008560400151866000015161073f91906119ba565b9050600086602001518361075391906119ba565b90508181101561076457600061076e565b61076e82826119d2565b9950848760800151886060015161078591906119ba565b61078f91906119ba565b9850818310156107a05760006107aa565b6107aa82846119d2565b9750505050505050509450945094915050565b806107c6611025565b6001600160a01b038516600090815260059190910160209081526040808320868452909152812080549091906107fd9084906119ba565b9091555081905061080c611025565b6004016000848152602001908152602001600020600082825461082f91906119ba565b9091555061083f905083836111c0565b505050565b600080600061085784600080600061041c565b9250925092509193909250565b60008060008061087385610844565b925092509250816000141561088a57949350505050565b7f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d052546108b69083611aba565b6108c261271085611aba565b111561093b5760006127106108f57f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d0525490565b6108ff9085611aba565b61090b61271087611aba565b61091591906119d2565b61091f9190611ad9565b90508181101561092f5780610931565b815b9695505050505050565b506000949350505050565b505050919050565b60008060008061097f6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000610989611254565b9050610993611025565b6001600160a01b038d166000908152600591909101602090815260408083208e8452825290912054808452908301526109ca611254565b6001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0257600080fd5b505afa158015610a16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3a9190611afb565b610a8257610a46611025565b6001600160a01b0382166000908152600591909101602090815260408083208e84528252909120549083018051610a7e9083906119ba565b9052505b6000826020015111610ae95760405162461bcd60e51b815260206004820152602a60248201527f4e6f206465706f73697420616d6f756e7420696e207468652073656c65637465604482015269642063757272656e637960b01b6064820152608401610553565b7f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d053547f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d05454610b39906127106119d2565b610b4391906119d2565b610b4f6127108b611aba565b610b599190611ad9565b60408301527f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d056546001600160a01b031663f7729d43610b96611025565b60008e815260029190910160205260409020546001600160a01b0316610bba611025565b60008e8152600291909101602090815260408083205491880151905160e086901b6001600160e01b03191681526001600160a01b03948516600482015293909116602484015262ffffff8d1660448401526064830152608482015260a401602060405180830381600087803b158015610c3257600080fd5b505af1158015610c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6a91906119e9565b6060830181905260408301511115610c8757606082015160408301525b610c9c8b8b846040015185602001518c61126d565b9450612710610cc97f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d0545490565b8360400151610cd89190611aba565b610ce29190611ad9565b9350816060015182604001511415610d6757612710610d1f7f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d0535490565b8360400151610d2e9190611aba565b610d389190611ad9565b92508683858460400151610d4c91906119d2565b610d5691906119d2565b610d6091906119d2565b9550610d91565b83898360400151610d7891906119d2565b610d8291906119d2565b9250610d8e878a6119d2565b95505b8151851115610dc357610da98c8c8460000151610dff565b610dbe818c8460000151886101c491906119d2565b610dce565b610dce8c8c87610dff565b610dd98c8b886107bd565b610de48d8b866107bd565b610def818b856107bd565b5050975097509750979350505050565b80610e08611025565b6001600160a01b0385166000908152600591909101602090815260408083208684529091529020541015610e4e5760405162461bcd60e51b815260040161055390611a02565b80610e57611025565b6001600160a01b03851660009081526005919091016020908152604080832086845290915281208054909190610e8e9084906119d2565b90915550819050610e9d611025565b6004016000848152602001908152602001600020600082825461082f91906119d2565b60606000610ecc611025565b6001600160a01b0384166000908152600391909101602052604081209150610ef38261145c565b905060008167ffffffffffffffff811115610f1057610f10611b18565b604051908082528060200260200182016040528015610f39578160200160208202803683370190505b50905060005b82811015610f86576000610f538583611466565b905080838381518110610f6857610f68611b2e565b60209081029190910101525080610f7e81611b44565b915050610f3f565b50949350505050565b6000806000610fa08787878761041c565b50915091508060001480610fea57507f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d05254610fdb9082611aba565b610fe761271084611aba565b10155b979650505050505050565b60006110207f4c656e64696e674d61726b6574436f6e74726f6c6c6572000000000000000000611472565b905090565b7f53832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a831790565b600081815260018301602052604081205415155b9392505050565b60006110207121bab93932b731bca1b7b73a3937b63632b960711b611472565b60008061108f611025565b6001600160a01b03841660009081526003919091016020526040812091506110b68261145c565b905060005b818110156109465760006110cf8483611466565b90506110dd81610336611025565b156111ad5760006110ec611025565b6001600160a01b038816600090815260059190910160209081526040808320858452909152902054905061111e611064565b6040516344a6ecdd60e01b815260048101849052602481018390526001600160a01b0391909116906344a6ecdd9060440160206040518083038186803b15801561116757600080fd5b505afa15801561117b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119f91906119e9565b6111a990876119ba565b9550505b50806111b881611b44565b9150506110bb565b60006111ca611025565b6001600160a01b03841660009081526005919091016020908152604080832085845290915290205411156112265761083f81611204611025565b6001600160a01b0385166000908152600391909101602052604090209061150a565b61083f81611232611025565b6001600160a01b03851660009081526003919091016020526040902090611516565b60006110206a14995cd95c9d99519d5b9960aa1b611472565b60006112cd61127a611025565b600088815260029190910160205260409020546001600160a01b03166112c77f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d055546001600160a01b031690565b85611522565b60006040518061010001604052806112e3611025565b60008a815260029190910160209081526040909120546001600160a01b031682520161130d611025565b600089815260029190910160209081526040808320546001600160a01b0316845262ffffff88169184019190915230908301524260608301526080820188905260a0820187905260c090910152905061138d7f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d055546001600160a01b031690565b60408051631b67c43360e31b815283516001600160a01b0390811660048301526020850151811660248301529184015162ffffff1660448201526060840151821660648201526080840151608482015260a084015160a482015260c084015160c482015260e0840151821660e482015291169063db3e21989061010401602060405180830381600087803b15801561142457600080fd5b505af1158015611438573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fea91906119e9565b60006102ef825490565b600061105d838361163d565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b031690816115035760405162461bcd60e51b81526004016105539190611b8f565b5092915050565b600061105d8383611667565b600061105d83836116b6565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b179052915160009283929087169161157e9190611bc2565b6000604051808303816000865af19150503d80600081146115bb576040519150601f19603f3d011682016040523d82523d6000602084013e6115c0565b606091505b50915091508180156115ea5750805115806115ea5750808060200190518101906115ea9190611afb565b6116365760405162461bcd60e51b815260206004820152601e60248201527f5472616e7366657248656c7065723a20415050524f56455f4641494c454400006044820152606401610553565b5050505050565b600082600001828154811061165457611654611b2e565b9060005260206000200154905092915050565b60008181526001830160205260408120546116ae575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556102ef565b5060006102ef565b6000818152600183016020526040812054801561179f5760006116da6001836119d2565b85549091506000906116ee906001906119d2565b905081811461175357600086600001828154811061170e5761170e611b2e565b906000526020600020015490508087600001848154811061173157611731611b2e565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061176457611764611bde565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506102ef565b60009150506102ef565b80356001600160a01b03811681146117c057600080fd5b919050565b600080604083850312156117d857600080fd5b6117e1836117a9565b946020939093013593505050565b60008060006060848603121561180457600080fd5b61180d846117a9565b95602085013595506040909401359392505050565b801515811461183057600080fd5b50565b6000806000806080858703121561184957600080fd5b611852856117a9565b93506020850135925060408501359150606085013561187081611822565b939692955090935050565b60006020828403121561188d57600080fd5b61105d826117a9565b600080600080600080600060e0888a0312156118b157600080fd5b6118ba886117a9565b96506118c8602089016117a9565b955060408801359450606088013593506080880135925060a088013562ffffff811681146118f557600080fd5b8092505060c0880135905092959891949750929550565b6020808252825182820181905260009190848201906040850190845b8181101561194457835183529284019291840191600101611928565b50909695505050505050565b600080600080600080600060e0888a03121561196b57600080fd5b5050855160208701516040880151606089015160808a015160a08b015160c0909b0151949c939b50919990985090965094509092509050565b634e487b7160e01b600052601160045260246000fd5b600082198211156119cd576119cd6119a4565b500190565b6000828210156119e4576119e46119a4565b500390565b6000602082840312156119fb57600080fd5b5051919050565b6020808252602e908201527f4e6f7420656e6f75676820636f6c6c61746572616c20696e207468652073656c60408201526d65637465642063757272656e637960901b606082015260800190565b600080600080600080600080610100898b031215611a6d57600080fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151915060e0890151611aa981611822565b809150509295985092959890939650565b6000816000190483118215151615611ad457611ad46119a4565b500290565b600082611af657634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611b0d57600080fd5b815161105d81611822565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600019821415611b5857611b586119a4565b5060010190565b60005b83811015611b7a578181015183820152602001611b62565b83811115611b89576000848401525b50505050565b6020815260008251806020840152611bae816040850160208701611b5f565b601f01601f19169190910160400192915050565b60008251611bd4818460208701611b5f565b9190910192915050565b634e487b7160e01b600052603160045260246000fdfea264697066735822122043cf2afd22e1e5928f4f5d522849d1e32b0cd4ec9b95f904ccd319188e70241e64736f6c63430008090033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100a85760003560e01c8063948060dd11610070578063948060dd14610156578063ab2a077714610169578063fb7bd3b4146101a9578063fc700810146101c9578063fd2117fb146101e957600080fd5b80630253cd7e146100ad5780632917173a146100d357806346b1cb2c146100f35780634ba0c9b514610121578063654c629514610143575b600080fd5b6100c06100bb3660046117c5565b61020c565b6040519081526020015b60405180910390f35b8180156100df57600080fd5b506100c06100ee3660046117ef565b6102f5565b610106610101366004611833565b61041c565b604080519384526020840192909252908201526060016100ca565b81801561012d57600080fd5b5061014161013c3660046117ef565b6107bd565b005b61010661015136600461187b565b610844565b6100c061016436600461187b565b610864565b81801561017557600080fd5b50610189610184366004611896565b61094e565b6040805194855260208501939093529183015260608201526080016100ca565b8180156101b557600080fd5b506101416101c43660046117ef565b610dff565b6101dc6101d736600461187b565b610ec0565b6040516100ca919061190c565b6101fc6101f7366004611833565b610f8f565b60405190151581526020016100ca565b6000806000610219610ff5565b604051635c34776560e01b8152600481018690526001600160a01b0387811660248301529190911690635c3477659060440160e06040518083038186803b15801561026357600080fd5b505afa158015610277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029b9190611950565b96505050945050505081816102ae611025565b6001600160a01b0388166000908152600591909101602090815260408083208984529091529020546102e091906119ba565b6102ea91906119d2565b925050505b92915050565b600080610300611025565b6001600160a01b038616600090815260059190910160209081526040808320878452909152902054905061033c84610336611025565b90611049565b1561040557600061034c86610864565b90506000610358611064565b6040516306d062ad60e01b815260048101889052602481018490526001600160a01b0391909116906306d062ad9060440160206040518083038186803b1580156103a157600080fd5b505afa1580156103b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d991906119e9565b90508085116103e857846103ea565b805b9350838310156103fa57826103fc565b835b93505050610409565b8091505b610414858584610dff565b509392505050565b60008060006104636040518060e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b600061046d611025565b6001600160a01b038a166000908152600591909101602090815260408083208b845290915281205491508715610615578615610533576104ab611064565b6040516344a6ecdd60e01b8152600481018b9052602481018a90526001600160a01b0391909116906344a6ecdd9060440160206040518083038186803b1580156104f457600080fd5b505afa158015610508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052c91906119e9565b9050610615565b8782101561055c5760405162461bcd60e51b815260040161055390611a02565b60405180910390fd5b61056688836119d2565b915061057489610336611025565b1561061557610581611064565b6040516344a6ecdd60e01b8152600481018b9052602481018a90526001600160a01b0391909116906344a6ecdd9060440160206040518083038186803b1580156105ca57600080fd5b505afa1580156105de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060291906119e9565b835184906106119083906119ba565b9052505b61061d610ff5565b604051626256a560e31b81526001600160a01b038c81166004830152602482018c9052604482018590529190911690630312b528906064016101006040518083038186803b15801561066e57600080fd5b505afa158015610682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a69190611a50565b151560c08b0181905260a08b019190915260808a019190915260608901919091526040880191909152602087019190915291855250806106e35750865b806106ec575087155b6107085760405162461bcd60e51b815260040161055390611a02565b60006107138b611084565b905060008460a001518261072791906119ba565b905060008560400151866000015161073f91906119ba565b9050600086602001518361075391906119ba565b90508181101561076457600061076e565b61076e82826119d2565b9950848760800151886060015161078591906119ba565b61078f91906119ba565b9850818310156107a05760006107aa565b6107aa82846119d2565b9750505050505050509450945094915050565b806107c6611025565b6001600160a01b038516600090815260059190910160209081526040808320868452909152812080549091906107fd9084906119ba565b9091555081905061080c611025565b6004016000848152602001908152602001600020600082825461082f91906119ba565b9091555061083f905083836111c0565b505050565b600080600061085784600080600061041c565b9250925092509193909250565b60008060008061087385610844565b925092509250816000141561088a57949350505050565b7f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d052546108b69083611aba565b6108c261271085611aba565b111561093b5760006127106108f57f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d0525490565b6108ff9085611aba565b61090b61271087611aba565b61091591906119d2565b61091f9190611ad9565b90508181101561092f5780610931565b815b9695505050505050565b506000949350505050565b505050919050565b60008060008061097f6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000610989611254565b9050610993611025565b6001600160a01b038d166000908152600591909101602090815260408083208e8452825290912054808452908301526109ca611254565b6001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0257600080fd5b505afa158015610a16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3a9190611afb565b610a8257610a46611025565b6001600160a01b0382166000908152600591909101602090815260408083208e84528252909120549083018051610a7e9083906119ba565b9052505b6000826020015111610ae95760405162461bcd60e51b815260206004820152602a60248201527f4e6f206465706f73697420616d6f756e7420696e207468652073656c65637465604482015269642063757272656e637960b01b6064820152608401610553565b7f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d053547f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d05454610b39906127106119d2565b610b4391906119d2565b610b4f6127108b611aba565b610b599190611ad9565b60408301527f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d056546001600160a01b031663f7729d43610b96611025565b60008e815260029190910160205260409020546001600160a01b0316610bba611025565b60008e8152600291909101602090815260408083205491880151905160e086901b6001600160e01b03191681526001600160a01b03948516600482015293909116602484015262ffffff8d1660448401526064830152608482015260a401602060405180830381600087803b158015610c3257600080fd5b505af1158015610c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6a91906119e9565b6060830181905260408301511115610c8757606082015160408301525b610c9c8b8b846040015185602001518c61126d565b9450612710610cc97f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d0545490565b8360400151610cd89190611aba565b610ce29190611ad9565b9350816060015182604001511415610d6757612710610d1f7f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d0535490565b8360400151610d2e9190611aba565b610d389190611ad9565b92508683858460400151610d4c91906119d2565b610d5691906119d2565b610d6091906119d2565b9550610d91565b83898360400151610d7891906119d2565b610d8291906119d2565b9250610d8e878a6119d2565b95505b8151851115610dc357610da98c8c8460000151610dff565b610dbe818c8460000151886101c491906119d2565b610dce565b610dce8c8c87610dff565b610dd98c8b886107bd565b610de48d8b866107bd565b610def818b856107bd565b5050975097509750979350505050565b80610e08611025565b6001600160a01b0385166000908152600591909101602090815260408083208684529091529020541015610e4e5760405162461bcd60e51b815260040161055390611a02565b80610e57611025565b6001600160a01b03851660009081526005919091016020908152604080832086845290915281208054909190610e8e9084906119d2565b90915550819050610e9d611025565b6004016000848152602001908152602001600020600082825461082f91906119d2565b60606000610ecc611025565b6001600160a01b0384166000908152600391909101602052604081209150610ef38261145c565b905060008167ffffffffffffffff811115610f1057610f10611b18565b604051908082528060200260200182016040528015610f39578160200160208202803683370190505b50905060005b82811015610f86576000610f538583611466565b905080838381518110610f6857610f68611b2e565b60209081029190910101525080610f7e81611b44565b915050610f3f565b50949350505050565b6000806000610fa08787878761041c565b50915091508060001480610fea57507f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d05254610fdb9082611aba565b610fe761271084611aba565b10155b979650505050505050565b60006110207f4c656e64696e674d61726b6574436f6e74726f6c6c6572000000000000000000611472565b905090565b7f53832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a831790565b600081815260018301602052604081205415155b9392505050565b60006110207121bab93932b731bca1b7b73a3937b63632b960711b611472565b60008061108f611025565b6001600160a01b03841660009081526003919091016020526040812091506110b68261145c565b905060005b818110156109465760006110cf8483611466565b90506110dd81610336611025565b156111ad5760006110ec611025565b6001600160a01b038816600090815260059190910160209081526040808320858452909152902054905061111e611064565b6040516344a6ecdd60e01b815260048101849052602481018390526001600160a01b0391909116906344a6ecdd9060440160206040518083038186803b15801561116757600080fd5b505afa15801561117b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119f91906119e9565b6111a990876119ba565b9550505b50806111b881611b44565b9150506110bb565b60006111ca611025565b6001600160a01b03841660009081526005919091016020908152604080832085845290915290205411156112265761083f81611204611025565b6001600160a01b0385166000908152600391909101602052604090209061150a565b61083f81611232611025565b6001600160a01b03851660009081526003919091016020526040902090611516565b60006110206a14995cd95c9d99519d5b9960aa1b611472565b60006112cd61127a611025565b600088815260029190910160205260409020546001600160a01b03166112c77f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d055546001600160a01b031690565b85611522565b60006040518061010001604052806112e3611025565b60008a815260029190910160209081526040909120546001600160a01b031682520161130d611025565b600089815260029190910160209081526040808320546001600160a01b0316845262ffffff88169184019190915230908301524260608301526080820188905260a0820187905260c090910152905061138d7f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d055546001600160a01b031690565b60408051631b67c43360e31b815283516001600160a01b0390811660048301526020850151811660248301529184015162ffffff1660448201526060840151821660648201526080840151608482015260a084015160a482015260c084015160c482015260e0840151821660e482015291169063db3e21989061010401602060405180830381600087803b15801561142457600080fd5b505af1158015611438573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fea91906119e9565b60006102ef825490565b600061105d838361163d565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b031690816115035760405162461bcd60e51b81526004016105539190611b8f565b5092915050565b600061105d8383611667565b600061105d83836116b6565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b179052915160009283929087169161157e9190611bc2565b6000604051808303816000865af19150503d80600081146115bb576040519150601f19603f3d011682016040523d82523d6000602084013e6115c0565b606091505b50915091508180156115ea5750805115806115ea5750808060200190518101906115ea9190611afb565b6116365760405162461bcd60e51b815260206004820152601e60248201527f5472616e7366657248656c7065723a20415050524f56455f4641494c454400006044820152606401610553565b5050505050565b600082600001828154811061165457611654611b2e565b9060005260206000200154905092915050565b60008181526001830160205260408120546116ae575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556102ef565b5060006102ef565b6000818152600183016020526040812054801561179f5760006116da6001836119d2565b85549091506000906116ee906001906119d2565b905081811461175357600086600001828154811061170e5761170e611b2e565b906000526020600020015490508087600001848154811061173157611731611b2e565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061176457611764611bde565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506102ef565b60009150506102ef565b80356001600160a01b03811681146117c057600080fd5b919050565b600080604083850312156117d857600080fd5b6117e1836117a9565b946020939093013593505050565b60008060006060848603121561180457600080fd5b61180d846117a9565b95602085013595506040909401359392505050565b801515811461183057600080fd5b50565b6000806000806080858703121561184957600080fd5b611852856117a9565b93506020850135925060408501359150606085013561187081611822565b939692955090935050565b60006020828403121561188d57600080fd5b61105d826117a9565b600080600080600080600060e0888a0312156118b157600080fd5b6118ba886117a9565b96506118c8602089016117a9565b955060408801359450606088013593506080880135925060a088013562ffffff811681146118f557600080fd5b8092505060c0880135905092959891949750929550565b6020808252825182820181905260009190848201906040850190845b8181101561194457835183529284019291840191600101611928565b50909695505050505050565b600080600080600080600060e0888a03121561196b57600080fd5b5050855160208701516040880151606089015160808a015160a08b015160c0909b0151949c939b50919990985090965094509092509050565b634e487b7160e01b600052601160045260246000fd5b600082198211156119cd576119cd6119a4565b500190565b6000828210156119e4576119e46119a4565b500390565b6000602082840312156119fb57600080fd5b5051919050565b6020808252602e908201527f4e6f7420656e6f75676820636f6c6c61746572616c20696e207468652073656c60408201526d65637465642063757272656e637960901b606082015260800190565b600080600080600080600080610100898b031215611a6d57600080fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151915060e0890151611aa981611822565b809150509295985092959890939650565b6000816000190483118215151615611ad457611ad46119a4565b500290565b600082611af657634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611b0d57600080fd5b815161105d81611822565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600019821415611b5857611b586119a4565b5060010190565b60005b83811015611b7a578181015183820152602001611b62565b83811115611b89576000848401525b50505050565b6020815260008251806020840152611bae816040850160208701611b5f565b601f01601f19169190910160400192915050565b60008251611bd4818460208701611b5f565b9190910192915050565b634e487b7160e01b600052603160045260246000fdfea264697066735822122043cf2afd22e1e5928f4f5d522849d1e32b0cd4ec9b95f904ccd319188e70241e64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getWithdrawableCollateral(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "Maximum amount of ETH that can be withdrawn"
        }
      },
      "withdraw(address,bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to withdraw.",
          "_ccy": "Currency name in bytes32"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getWithdrawableCollateral(address)": {
        "notice": "Calculates maximum amount of ETH that can be withdrawn."
      },
      "withdraw(address,bytes32,uint256)": {
        "notice": "Withdraws funds by the caller from unused collateral."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}