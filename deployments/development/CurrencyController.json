{
  "address": "0x32648DbeEEA548577d026b44cC56e9B94F31D22b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "name": "CcyAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isCollateral",
          "type": "bool"
        }
      ],
      "name": "CcyCollateralUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isSupported",
          "type": "bool"
        }
      ],
      "name": "CcySupportUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "name": "HaircutUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minMargin",
          "type": "uint256"
        }
      ],
      "name": "MinMarginUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "secondCcy",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "PriceFeedAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "secondCcy",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "PriceFeedRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "convertBulkToETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amountETH",
          "type": "uint256"
        }
      ],
      "name": "convertFromETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "int256",
          "name": "_amount",
          "type": "int256"
        }
      ],
      "name": "convertToETH",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "convertToETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getCurrencies",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isSupported",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint16",
              "name": "chainId",
              "type": "uint16"
            }
          ],
          "internalType": "struct ProtocolTypes.Currency",
          "name": "currency",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getEthDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getHaircut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getHistoricalETHPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getHistoricalUSDPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getLastETHPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getLastUSDPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getMinMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getUsdDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "isCollateral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "isSupportedCcy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isEthPriceFeed",
          "type": "bool"
        }
      ],
      "name": "linkPriceFeed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_isEthPriceFeed",
          "type": "bool"
        }
      ],
      "name": "removePriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_ethPriceFeed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_haircut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "supportCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_haircut",
          "type": "uint256"
        }
      ],
      "name": "updateCcyHaircut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_isSupported",
          "type": "bool"
        }
      ],
      "name": "updateCollateralSupport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_isSupported",
          "type": "bool"
        }
      ],
      "name": "updateCurrencySupport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_minMargin",
          "type": "uint256"
        }
      ],
      "name": "updateMinMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x60695abc72aadb27730369bc12087b992c972a0e638732b4b26ac7f5d29c0657",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x9420d9Cb95db1897Be41EFC6328Cf3f0C7B64B12",
    "transactionIndex": 28,
    "gasUsed": "2043488",
    "logsBloom": "0x
    "blockHash": "0xf433d08dc6d0663a04fcfe1d08c0ebf366cb479cfa358330d1278ce3cfa6edb4",
    "transactionHash": "0x60695abc72aadb27730369bc12087b992c972a0e638732b4b26ac7f5d29c0657",
    "logs": [],
    "blockNumber": 11287612,
    "cumulativeGasUsed": "7888362",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "a7e3ab467ecfb49fd651019f24032f54",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"name\":\"CcyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCollateral\",\"type\":\"bool\"}],\"name\":\"CcyCollateralUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"}],\"name\":\"CcySupportUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"name\":\"HaircutUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minMargin\",\"type\":\"uint256\"}],\"name\":\"MinMarginUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"secondCcy\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"PriceFeedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"secondCcy\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"PriceFeedRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"convertBulkToETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amountETH\",\"type\":\"uint256\"}],\"name\":\"convertFromETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"}],\"name\":\"convertToETH\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertToETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getCurrencies\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"}],\"internalType\":\"struct ProtocolTypes.Currency\",\"name\":\"currency\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getEthDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getHaircut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getHistoricalETHPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getHistoricalUSDPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getLastETHPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getLastUSDPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getMinMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getUsdDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"isCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"isSupportedCcy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isEthPriceFeed\",\"type\":\"bool\"}],\"name\":\"linkPriceFeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isEthPriceFeed\",\"type\":\"bool\"}],\"name\":\"removePriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_ethPriceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_haircut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"supportCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_haircut\",\"type\":\"uint256\"}],\"name\":\"updateCcyHaircut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isSupported\",\"type\":\"bool\"}],\"name\":\"updateCollateralSupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isSupported\",\"type\":\"bool\"}],\"name\":\"updateCurrencySupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_minMargin\",\"type\":\"uint256\"}],\"name\":\"updateMinMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Currency Controller contract is responsible for managing supported currencies in Secured Finance Protocol Contract links new currencies to ETH Chainlink price feeds, without existing price feed contract owner is not able to add a new currency into the protocol\",\"kind\":\"dev\",\"methods\":{\"convertBulkToETH(bytes32,uint256[])\":{\"details\":\"Triggers to get converted amounts of currency to ETH.\",\"params\":{\"_amounts\":\"Array with amounts of funds to be converted\",\"_ccy\":\"Currency that has to be convered to ETH\"}},\"convertFromETH(bytes32,uint256)\":{\"details\":\"Triggers to convert ETH amount of funds to specified currency.\",\"params\":{\"_amountETH\":\"Amount of funds in ETH to be converted\",\"_ccy\":\"Currency that has to be convered from ETH\"}},\"convertToETH(bytes32,int256)\":{\"details\":\"Triggers to get converted amount of currency in ETH.\",\"params\":{\"_amount\":\"Amount of funds to be converted\",\"_ccy\":\"Currency that has to be convered to ETH\"}},\"convertToETH(bytes32,uint256)\":{\"details\":\"Triggers to get converted amount of currency in ETH.\",\"params\":{\"_amount\":\"Amount of funds to be converted\",\"_ccy\":\"Currency that has to be convered to ETH\"}},\"getChainId(bytes32)\":{\"details\":\"Triggers to get chainId for a specific currency. Chain ID is a unique identifier of another chain like Bitcoin, Filecoin, etc.\",\"params\":{\"_ccy\":\"Currency short ticket\"}},\"getCurrencies(bytes32)\":{\"details\":\"Triggers to get specified currency.\",\"params\":{\"_ccy\":\"Currency short ticket\"}},\"getEthDecimals(bytes32)\":{\"details\":\"Triggers to get ETH decimal for specific currency.\",\"params\":{\"_ccy\":\"Currency short ticket\"}},\"getHaircut(bytes32)\":{\"details\":\"Triggers to get haircut ratio for specific currency. Haircut is used in bilateral netting cross-calculation.\",\"params\":{\"_ccy\":\"Currency short ticket\"}},\"getHistoricalETHPrice(bytes32,uint80)\":{\"details\":\"Triggers to get historical price in ETH for selected currency.\",\"params\":{\"_ccy\":\"Currency\",\"_roundId\":\"RoundId\"}},\"getHistoricalUSDPrice(bytes32,uint80)\":{\"details\":\"Triggers to get historical price in USD for selected currency.\",\"params\":{\"_ccy\":\"Currency\",\"_roundId\":\"RoundId\"}},\"getLastETHPrice(bytes32)\":{\"details\":\"Triggers to get last price in ETH for selected currency.\",\"params\":{\"_ccy\":\"Currency\"}},\"getLastUSDPrice(bytes32)\":{\"details\":\"Triggers to get last price in USD for selected currency.\",\"params\":{\"_ccy\":\"Currency\"}},\"getMinMargin(bytes32)\":{\"details\":\"Triggers to get minimal margin percentage for specific currency.\",\"params\":{\"_ccy\":\"Currency short ticket\"}},\"getTokenAddresses(bytes32)\":{\"details\":\"Triggers to get token address for specific currency.\",\"params\":{\"_ccy\":\"Currency short ticket\"}},\"getUsdDecimals(bytes32)\":{\"details\":\"Triggers to get USD decimal for specific currency.\",\"params\":{\"_ccy\":\"Currency short ticket\"}},\"initialize(address)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController\"},\"isCollateral(bytes32)\":{\"details\":\"Triggers to get if specified currency is collateral.\",\"params\":{\"_ccy\":\"Currency short ticket\"}},\"isSupportedCcy(bytes32)\":{\"details\":\"Triggers to get if specified currency is supported.\",\"params\":{\"_ccy\":\"Currency short ticket\"}},\"linkPriceFeed(bytes32,address,bool)\":{\"details\":\"Links the contract to existing chainlink price feed.\",\"params\":{\"_ccy\":\"Specified currency short code\",\"_isEthPriceFeed\":\"Boolean for price feed with ETH price\",\"_priceFeedAddr\":\"Chainlink price feed contract address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removePriceFeed(bytes32,bool)\":{\"details\":\"Triggers to remove existing chainlink price feed.\",\"params\":{\"_ccy\":\"Specified currency\",\"_isEthPriceFeed\":\"Boolean for price feed with ETH price\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportCurrency(bytes32,string,address,uint256,address)\":{\"details\":\"Triggers to add new currency into the protocol. Links with existing ETH chainlink pricefeed\",\"params\":{\"_ccy\":\"Currency short ticket\",\"_ethPriceFeed\":\"Address for ETH price feed\",\"_name\":\"Currency full name\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCcyHaircut(bytes32,uint256)\":{\"details\":\"Triggers to update the haircut ratio for supported currency\",\"params\":{\"_ccy\":\"Currency short ticket\",\"_haircut\":\"Currency haircut ratio used to calculate in collateral calculations\"}},\"updateCollateralSupport(bytes32,bool)\":{\"details\":\"Triggers to update if currency is accepted as collateral\",\"params\":{\"_ccy\":\"Currency short ticket\",\"_isSupported\":\"Boolean whether currency supported as collateral or not\"}},\"updateCurrencySupport(bytes32,bool)\":{\"details\":\"Triggers to update currency support\",\"params\":{\"_ccy\":\"Currency short ticket\",\"_isSupported\":\"Boolean whether currency supported as collateral or not\"}},\"updateMinMargin(bytes32,uint256)\":{\"details\":\"Triggers to update the minimal margin requirements for currency supported as collateral\",\"params\":{\"_ccy\":\"Currency short ticket\",\"_minMargin\":\"Currency minimal margin ratio used to calculate collateral coverage\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address)\":{\"notice\":\"Initializes the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CurrencyController.sol\":\"CurrencyController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/CurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {ICurrencyController} from \\\"./interfaces/ICurrencyController.sol\\\";\\nimport {ProtocolTypes} from \\\"./types/ProtocolTypes.sol\\\";\\nimport {Ownable} from \\\"./utils/Ownable.sol\\\";\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\nimport {CurrencyControllerStorage as Storage} from \\\"./storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ncontract CurrencyController is ICurrencyController, Ownable, Proxyable {\\n    modifier supportedCcyOnly(bytes32 _ccy) {\\n        require(isSupportedCcy(_ccy), \\\"Unsupported asset\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController\\n     */\\n    function initialize(address owner) public initializer onlyProxy {\\n        _transferOwnership(owner);\\n    }\\n\\n    // =========== CURRENCY CONTROL SECTION ===========\\n\\n    /**\\n     * @dev Triggers to add new currency into the protocol. Links with existing ETH chainlink pricefeed\\n     * @param _ccy Currency short ticket\\n     * @param _name Currency full name\\n     * @param _ethPriceFeed Address for ETH price feed\\n     */\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        address _ethPriceFeed,\\n        uint256 _haircut,\\n        address _tokenAddress\\n    ) public override onlyOwner {\\n        ProtocolTypes.Currency memory currency;\\n        currency.name = _name;\\n\\n        if (_tokenAddress != address(0)) {\\n            Storage.slot().tokenAddresses[_ccy] = _tokenAddress;\\n        }\\n\\n        currency.isSupported = true;\\n\\n        Storage.slot().currencies[_ccy] = currency;\\n        Storage.slot().haircuts[_ccy] = _haircut;\\n\\n        if (_ccy != \\\"ETH\\\") {\\n            require(linkPriceFeed(_ccy, _ethPriceFeed, true), \\\"Invalid PriceFeed\\\");\\n        } else {\\n            require(linkPriceFeed(_ccy, _ethPriceFeed, false), \\\"Invalid PriceFeed\\\");\\n        }\\n        emit CcyAdded(_ccy, _name, _haircut);\\n    }\\n\\n    /**\\n     * @dev Triggers to update currency support\\n     * @param _ccy Currency short ticket\\n     * @param _isSupported Boolean whether currency supported as collateral or not\\n     */\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported) public override onlyOwner {\\n        ProtocolTypes.Currency storage currency = Storage.slot().currencies[_ccy];\\n        currency.isSupported = _isSupported;\\n\\n        emit CcySupportUpdate(_ccy, _isSupported);\\n    }\\n\\n    /**\\n     * @dev Triggers to update if currency is accepted as collateral\\n     * @param _ccy Currency short ticket\\n     * @param _isSupported Boolean whether currency supported as collateral or not\\n     */\\n    function updateCollateralSupport(bytes32 _ccy, bool _isSupported)\\n        public\\n        override\\n        onlyOwner\\n        supportedCcyOnly(_ccy)\\n    {\\n        Storage.slot().isCollateral[_ccy] = _isSupported;\\n\\n        emit CcyCollateralUpdate(_ccy, _isSupported);\\n    }\\n\\n    /**\\n     * @dev Triggers to update the haircut ratio for supported currency\\n     * @param _ccy Currency short ticket\\n     * @param _haircut Currency haircut ratio used to calculate in collateral calculations\\n     */\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut)\\n        public\\n        override\\n        onlyOwner\\n        supportedCcyOnly(_ccy)\\n    {\\n        require(_haircut > 0, \\\"Incorrect haircut ratio\\\");\\n        require(_haircut <= 10000, \\\"Haircut ratio overflow\\\");\\n\\n        Storage.slot().haircuts[_ccy] = _haircut;\\n\\n        emit HaircutUpdated(_ccy, _haircut);\\n    }\\n\\n    /**\\n     * @dev Triggers to update the minimal margin requirements for currency supported as collateral\\n     * @param _ccy Currency short ticket\\n     * @param _minMargin Currency minimal margin ratio used to calculate collateral coverage\\n     */\\n    function updateMinMargin(bytes32 _ccy, uint256 _minMargin)\\n        public\\n        override\\n        onlyOwner\\n        supportedCcyOnly(_ccy)\\n    {\\n        require(_minMargin > 0, \\\"Incorrect MinMargin\\\");\\n        require(_minMargin <= 10000, \\\"MinMargin overflow\\\");\\n        require(isCollateral(_ccy), \\\"Unable to set MinMargin\\\");\\n\\n        Storage.slot().minMargins[_ccy] = _minMargin;\\n\\n        emit MinMarginUpdated(_ccy, _minMargin);\\n    }\\n\\n    // =========== EXTERNAL GET FUNCTIONS ===========\\n\\n    /**\\n     * @dev Triggers to get specified currency.\\n     * @param _ccy Currency short ticket\\n     */\\n    function getCurrencies(bytes32 _ccy)\\n        external\\n        view\\n        returns (ProtocolTypes.Currency memory currency)\\n    {\\n        currency = Storage.slot().currencies[_ccy];\\n    }\\n\\n    /**\\n     * @dev Triggers to get ETH decimal for specific currency.\\n     * @param _ccy Currency short ticket\\n     */\\n    function getEthDecimals(bytes32 _ccy) external view returns (uint8) {\\n        return Storage.slot().ethDecimals[_ccy];\\n    }\\n\\n    /**\\n     * @dev Triggers to get USD decimal for specific currency.\\n     * @param _ccy Currency short ticket\\n     */\\n    function getUsdDecimals(bytes32 _ccy) external view returns (uint8) {\\n        return Storage.slot().usdDecimals[_ccy];\\n    }\\n\\n    /**\\n     * @dev Triggers to get haircut ratio for specific currency.\\n     * Haircut is used in bilateral netting cross-calculation.\\n     * @param _ccy Currency short ticket\\n     */\\n    function getHaircut(bytes32 _ccy) external view override returns (uint256) {\\n        return Storage.slot().haircuts[_ccy];\\n    }\\n\\n    /**\\n     * @dev Triggers to get minimal margin percentage for specific currency.\\n     * @param _ccy Currency short ticket\\n     */\\n    function getMinMargin(bytes32 _ccy) external view override returns (uint256) {\\n        require(isCollateral(_ccy), \\\"Unable to get MinMargin\\\");\\n        return Storage.slot().minMargins[_ccy];\\n    }\\n\\n    /**\\n     * @dev Triggers to get token address for specific currency.\\n     * @param _ccy Currency short ticket\\n     */\\n    function getTokenAddresses(bytes32 _ccy) external view returns (address) {\\n        return Storage.slot().tokenAddresses[_ccy];\\n    }\\n\\n    /**\\n     * @dev Triggers to get if specified currency is supported.\\n     * @param _ccy Currency short ticket\\n     */\\n    function isSupportedCcy(bytes32 _ccy) public view override returns (bool) {\\n        return Storage.slot().currencies[_ccy].isSupported;\\n    }\\n\\n    /**\\n     * @dev Triggers to get if specified currency is collateral.\\n     * @param _ccy Currency short ticket\\n     */\\n    function isCollateral(bytes32 _ccy) public view returns (bool) {\\n        return Storage.slot().isCollateral[_ccy];\\n    }\\n\\n    /**\\n     * @dev Triggers to get chainId for a specific currency.\\n     * Chain ID is a unique identifier of another chain like Bitcoin, Filecoin, etc.\\n     * @param _ccy Currency short ticket\\n     */\\n    function getChainId(bytes32 _ccy) external view override returns (uint16) {\\n        return Storage.slot().currencies[_ccy].chainId;\\n    }\\n\\n    // =========== CHAINLINK PRICE FEED FUNCTIONS ===========\\n    // TODO: add additional price feeds in case if chainlink is not reliable\\n\\n    /**\\n     * @dev Links the contract to existing chainlink price feed.\\n     * @param _ccy Specified currency short code\\n     * @param _priceFeedAddr Chainlink price feed contract address\\n     * @param _isEthPriceFeed Boolean for price feed with ETH price\\n     */\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) public override onlyOwner returns (bool) {\\n        require(_priceFeedAddr != address(0), \\\"Couldn't link 0x0 address\\\");\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(_priceFeedAddr);\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        require(price >= 0, \\\"Invalid PriceFeed\\\");\\n\\n        uint8 decimals = priceFeed.decimals();\\n        require(decimals <= 18, \\\"Invalid decimals\\\");\\n\\n        if (_isEthPriceFeed) {\\n            require(!_isETH(_ccy), \\\"Can't link to ETH\\\");\\n            Storage.slot().ethPriceFeeds[_ccy] = priceFeed;\\n            Storage.slot().ethDecimals[_ccy] = decimals;\\n            emit PriceFeedAdded(_ccy, \\\"ETH\\\", _priceFeedAddr);\\n        } else {\\n            Storage.slot().usdPriceFeeds[_ccy] = priceFeed;\\n            Storage.slot().usdDecimals[_ccy] = decimals;\\n            emit PriceFeedAdded(_ccy, \\\"USD\\\", _priceFeedAddr);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Triggers to remove existing chainlink price feed.\\n     * @param _ccy Specified currency\\n     * @param _isEthPriceFeed Boolean for price feed with ETH price\\n     */\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed)\\n        external\\n        override\\n        onlyOwner\\n        supportedCcyOnly(_ccy)\\n    {\\n        if (_isEthPriceFeed == true) {\\n            address priceFeed = address(Storage.slot().ethPriceFeeds[_ccy]);\\n\\n            require(priceFeed != address(0), \\\"Invalid PriceFeed\\\");\\n            delete Storage.slot().ethPriceFeeds[_ccy];\\n            delete Storage.slot().ethDecimals[_ccy];\\n\\n            emit PriceFeedRemoved(_ccy, \\\"ETH\\\", priceFeed);\\n        } else {\\n            address priceFeed = address(Storage.slot().usdPriceFeeds[_ccy]);\\n\\n            require(priceFeed != address(0), \\\"Invalid PriceFeed\\\");\\n            delete Storage.slot().usdPriceFeeds[_ccy];\\n            delete Storage.slot().usdDecimals[_ccy];\\n\\n            emit PriceFeedRemoved(_ccy, \\\"USD\\\", priceFeed);\\n        }\\n    }\\n\\n    // =========== GET PRICE FUNCTIONS ===========\\n\\n    /**\\n     * @dev Triggers to get last price in USD for selected currency.\\n     * @param _ccy Currency\\n     */\\n    function getLastUSDPrice(bytes32 _ccy) public view override returns (int256) {\\n        AggregatorV3Interface priceFeed = Storage.slot().usdPriceFeeds[_ccy];\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n        return price;\\n    }\\n\\n    /**\\n     * @dev Triggers to get historical price in USD for selected currency.\\n     * @param _ccy Currency\\n     * @param _roundId RoundId\\n     */\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId)\\n        public\\n        view\\n        override\\n        returns (int256)\\n    {\\n        AggregatorV3Interface priceFeed = Storage.slot().usdPriceFeeds[_ccy];\\n        (, int256 price, , uint256 timeStamp, ) = priceFeed.getRoundData(_roundId);\\n\\n        require(timeStamp > 0, \\\"Round not completed yet\\\");\\n        return price;\\n    }\\n\\n    /**\\n     * @dev Triggers to get last price in ETH for selected currency.\\n     * @param _ccy Currency\\n     */\\n    function getLastETHPrice(bytes32 _ccy) public view override returns (int256) {\\n        if (_isETH(_ccy)) return 1e18;\\n\\n        AggregatorV3Interface priceFeed = Storage.slot().ethPriceFeeds[_ccy];\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n        return price;\\n    }\\n\\n    /**\\n     * @dev Triggers to get historical price in ETH for selected currency.\\n     * @param _ccy Currency\\n     * @param _roundId RoundId\\n     */\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId)\\n        public\\n        view\\n        override\\n        returns (int256)\\n    {\\n        if (_isETH(_ccy)) return 1e18;\\n\\n        AggregatorV3Interface priceFeed = Storage.slot().ethPriceFeeds[_ccy];\\n        (, int256 price, , uint256 timeStamp, ) = priceFeed.getRoundData(_roundId);\\n\\n        require(timeStamp > 0, \\\"Round not completed yet\\\");\\n        return price;\\n    }\\n\\n    /**\\n     * @dev Triggers to get converted amount of currency in ETH.\\n     * @param _ccy Currency that has to be convered to ETH\\n     * @param _amount Amount of funds to be converted\\n     */\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view override returns (uint256) {\\n        if (_isETH(_ccy)) return _amount;\\n\\n        AggregatorV3Interface priceFeed = Storage.slot().ethPriceFeeds[_ccy];\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n        return (_amount * uint256(price)) / 1e18;\\n    }\\n\\n    /**\\n     * @dev Triggers to get converted amount of currency in ETH.\\n     * @param _ccy Currency that has to be convered to ETH\\n     * @param _amount Amount of funds to be converted\\n     */\\n    function convertToETH(bytes32 _ccy, int256 _amount) external view override returns (int256) {\\n        if (_isETH(_ccy)) return _amount;\\n\\n        AggregatorV3Interface priceFeed = Storage.slot().ethPriceFeeds[_ccy];\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n        return (_amount * price) / 1e18;\\n    }\\n\\n    /**\\n     * @dev Triggers to get converted amounts of currency to ETH.\\n     * @param _ccy Currency that has to be convered to ETH\\n     * @param _amounts Array with amounts of funds to be converted\\n     */\\n    function convertBulkToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        public\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        if (_isETH(_ccy)) return _amounts;\\n\\n        AggregatorV3Interface priceFeed = Storage.slot().ethPriceFeeds[_ccy];\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        uint256[] memory amounts = new uint256[](_amounts.length);\\n\\n        for (uint256 i = 0; i < _amounts.length; i++) {\\n            uint256 amount = _amounts[i];\\n\\n            if (amount > 0) {\\n                amounts[i] = (amount * uint256(price)) / 1e18;\\n            } else {\\n                amounts[i] = 0;\\n            }\\n        }\\n\\n        return amounts;\\n    }\\n\\n    /**\\n     * @dev Triggers to convert ETH amount of funds to specified currency.\\n     * @param _ccy Currency that has to be convered from ETH\\n     * @param _amountETH Amount of funds in ETH to be converted\\n     */\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (_isETH(_ccy)) return _amountETH;\\n\\n        AggregatorV3Interface priceFeed = Storage.slot().ethPriceFeeds[_ccy];\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n        return (_amountETH * 1e18) / uint256(price); // add decimals checks\\n    }\\n\\n    function _isETH(bytes32 _ccy) internal pure returns (bool) {\\n        return _ccy == \\\"ETH\\\";\\n    }\\n}\\n\",\"keccak256\":\"0xd9467289dfbb972d5b5a053176dea2e1688515d2159102e88d99a22fd51e80ce\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CcyAdded(bytes32 indexed ccy, string name, uint256 haircut);\\n    event CcyCollateralUpdate(bytes32 indexed ccy, bool isCollateral);\\n    event CcySupportUpdate(bytes32 indexed ccy, bool isSupported);\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n    event MinMarginUpdated(bytes32 indexed ccy, uint256 minMargin);\\n    event PriceFeedAdded(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n    event PriceFeedRemoved(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n\\n    function convertBulkToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH) external view returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, int256 _amount) external view returns (int256);\\n\\n    function getCurrencies(bytes32) external view returns (ProtocolTypes.Currency memory);\\n\\n    function getEthDecimals(bytes32) external view returns (uint8);\\n\\n    function getUsdDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getMinMargin(bytes32 _ccy) external view returns (uint256);\\n\\n    function getChainId(bytes32 _ccy) external view returns (uint16);\\n\\n    function isCollateral(bytes32) external view returns (bool);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        address _ethPriceFeed,\\n        uint256 _haircut,\\n        address _tokenAddress\\n    ) external;\\n\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function updateCollateralSupport(bytes32 _ccy, bool _isSupported) external;\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported) external;\\n\\n    function updateMinMargin(bytes32 _ccy, uint256 _minMargin) external;\\n\\n    function getTokenAddresses(bytes32) external view returns (address);\\n}\\n\",\"keccak256\":\"0x76e6d32008b43f2d07106060f8eeb9e05242cdc3d772597f299cb3b2d5cda49d\",\"license\":\"MIT\"},\"contracts/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\nlibrary CurrencyControllerStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.currencyController\\\");\\n\\n    struct Storage {\\n        // Protocol currencies\\n        mapping(bytes32 => ProtocolTypes.Currency) currencies;\\n        mapping(bytes32 => uint256) haircuts;\\n        mapping(bytes32 => uint256) minMargins;\\n        mapping(bytes32 => bool) isCollateral;\\n        mapping(bytes32 => address) tokenAddresses;\\n        // PriceFeed\\n        mapping(bytes32 => AggregatorV3Interface) usdPriceFeeds;\\n        mapping(bytes32 => AggregatorV3Interface) ethPriceFeeds;\\n        mapping(bytes32 => uint8) usdDecimals;\\n        mapping(bytes32 => uint8) ethDecimals;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc97c968cfc238a2842b6027940adad14be6a348c7be9a9868aa2dbaf4fbe246f\",\"license\":\"MIT\"},\"contracts/storages/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary OwnableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.ownable\\\");\\n\\n    struct Storage {\\n        address owner;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ef8bfa06947cdb63d47248ad074ac42a1b1ba828a2c97e42486a5dbb2c03e1d\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant BP = 10000; // basis point\\n    uint256 public constant PCT = 10000; // percentage point in basis\\n    uint256 public constant PENALTYLEVEL = 1000; // 10% settlement failure penalty\\n    uint256 public constant MKTMAKELEVEL = 2000; // 20% for market making\\n\\n    uint256 internal constant DAYS_IN_YEAR = 365;\\n    uint256 internal constant SECONDS_IN_YEAR = 31557600;\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n\\n    struct Currency {\\n        bool isSupported;\\n        string name;\\n        uint16 chainId; // chain id for address conversion\\n    }\\n}\\n\",\"keccak256\":\"0x861d92708d6610f9e3378b4cfb3475c4c780df5b5ba3d23e1736bfe4267876f5\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../storages/OwnableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return OwnableStorage.slot().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = OwnableStorage.slot().owner;\\n        OwnableStorage.slot().owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1c782b9deaf1f94d2af99826e6e8207f5e71f3fbb6ce18805913a3ca7dda9579\",\"license\":\"MIT\"},\"contracts/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0xe59cd60631c7c754ed6b77caa6f3a06301ef0df07881a3dcfa85124abc1890b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612403806100206000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c8063715018a6116100f9578063c4d66de811610097578063d4d4f6ce11610071578063d4d4f6ce146103f7578063ea6c88a51461040a578063f2fde38b1461041d578063facae93f1461043057600080fd5b8063c4d66de8146103b1578063cc106de1146103c4578063cc8dd9f1146103e457600080fd5b80639abdb38a116100d35780639abdb38a14610352578063a38061c914610365578063b11459b414610378578063b43a9e6c1461038b57600080fd5b8063715018a61461032f5780637b7904e3146103375780638da5cb5b1461034a57600080fd5b806346498c2e116101665780635d95df8a116101405780635d95df8a146102c65780635e5658d2146102e957806360cd4478146103095780636d01544d1461031c57600080fd5b806346498c2e1461028d5780634caeebaf146102a057806350326d22146102b357600080fd5b806334cc1f36116101a257806334cc1f36146102275780633a0a22f01461023c57806342e863911461024f57806344a6ecdd1461027a57600080fd5b806304261371146101c957806306d062ad146101f35780631743ffce14610214575b600080fd5b6101dc6101d7366004611d58565b610443565b60405160ff90911681526020015b60405180910390f35b610206610201366004611d71565b610464565b6040519081526020016101ea565b610206610222366004611d58565b610543565b61023a610235366004611d71565b610607565b005b61020661024a366004611d71565b6107a7565b61026261025d366004611d58565b61087b565b6040516001600160a01b0390911681526020016101ea565b610206610288366004611d71565b6108a2565b61023a61029b366004611da8565b61096c565b61023a6102ae366004611e32565b610a20565b6102066102c1366004611d58565b610bec565b6102d96102d4366004611d58565b610c4d565b60405190151581526020016101ea565b6102fc6102f7366004611d58565b610c6e565b6040516101ea9190611f49565b610206610317366004611fa3565b610d71565b61020661032a366004611fa3565b610e97565b61023a610ef3565b61023a610345366004611da8565b610f2e565b610262611168565b610206610360366004611d58565b61119b565b610206610373366004611d58565b6111b9565b61023a610386366004611d71565b61122c565b61039e610399366004611d58565b61136f565b60405161ffff90911681526020016101ea565b61023a6103bf366004611fd3565b611391565b6103d76103d2366004611ff5565b611510565b6040516101ea91906120a7565b6102d96103f23660046120eb565b6116be565b6102d9610405366004611d58565b611a9b565b61023a610418366004611da8565b611ab9565b61023a61042b366004611fd3565b611b41565b6101dc61043e366004611d58565b611be1565b600061044d611c02565b600092835260070160205250604090205460ff1690565b60006208aa8960eb1b83141561047b57508061053d565b6000610485611c02565b60008581526006919091016020526040808220548151633fabe5a360e21b815291516001600160a01b039091169350839163feaf968c9160048083019260a0929190829003018186803b1580156104db57600080fd5b505afa1580156104ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105139190612127565b5050509150508084670de0b6b3a764000061052e9190612195565b61053891906121ca565b925050505b92915050565b60006208aa8960eb1b8214156105625750670de0b6b3a7640000919050565b600061056c611c02565b60008481526006919091016020526040808220548151633fabe5a360e21b815291516001600160a01b039091169350839163feaf968c9160048083019260a0929190829003018186803b1580156105c257600080fd5b505afa1580156105d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fa9190612127565b5091979650505050505050565b33610610611168565b6001600160a01b03161461063f5760405162461bcd60e51b8152600401610636906121de565b60405180910390fd5b8161064981611a9b565b6106655760405162461bcd60e51b815260040161063690612213565b600082116106ab5760405162461bcd60e51b815260206004820152601360248201527224b731b7b93932b1ba1026b4b726b0b933b4b760691b6044820152606401610636565b6127108211156106f25760405162461bcd60e51b81526020600482015260126024820152714d696e4d617267696e206f766572666c6f7760701b6044820152606401610636565b6106fb83610c4d565b6107475760405162461bcd60e51b815260206004820152601760248201527f556e61626c6520746f20736574204d696e4d617267696e0000000000000000006044820152606401610636565b81610750611c02565b600201600085815260200190815260200160002081905550827f93aab202383cdcea234ec12d5ae14be597c1fcbe7c93b4843b5df57793917f0c8360405161079a91815260200190565b60405180910390a2505050565b60006208aa8960eb1b8314156107be57508061053d565b60006107c8611c02565b60008581526006919091016020526040808220548151633fabe5a360e21b815291516001600160a01b039091169350839163feaf968c9160048083019260a0929190829003018186803b15801561081e57600080fd5b505afa158015610832573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108569190612127565b505050915050670de0b6b3a76400008185610871919061223e565b61053891906122c3565b6000610885611c02565b60009283526004016020525060409020546001600160a01b031690565b60006208aa8960eb1b8314156108b957508061053d565b60006108c3611c02565b60008581526006919091016020526040808220548151633fabe5a360e21b815291516001600160a01b039091169350839163feaf968c9160048083019260a0929190829003018186803b15801561091957600080fd5b505afa15801561092d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109519190612127565b505050915050670de0b6b3a7640000818561052e9190612195565b33610975611168565b6001600160a01b03161461099b5760405162461bcd60e51b8152600401610636906121de565b816109a581611a9b565b6109c15760405162461bcd60e51b815260040161063690612213565b816109ca611c02565b60008581526003919091016020908152604091829020805460ff19169315159390931790925551831515815284917f2184292b9bb18c7204e8a0f1e8b90159dc7830d4f547cf8c2ba0358ef18b05b2910161079a565b33610a29611168565b6001600160a01b031614610a4f5760405162461bcd60e51b8152600401610636906121de565b610a79604051806060016040528060001515815260200160608152602001600061ffff1681525090565b602081018590526001600160a01b03821615610ac95781610a98611c02565b60008881526004919091016020526040902080546001600160a01b0319166001600160a01b03929092169190911790555b6001815280610ad6611c02565b60008881526020918252604090208251815460ff19169015151781558282015180519192610b0c92600185019290910190611cbf565b50604091909101516002909101805461ffff191661ffff90921691909117905582610b35611c02565b600088815260019190910160205260409020556208aa8960eb1b8614610b8257610b61868560016116be565b610b7d5760405162461bcd60e51b8152600401610636906122f1565b610baa565b610b8e868560006116be565b610baa5760405162461bcd60e51b8152600401610636906122f1565b857fac23727d2c524a59eb5ce3843d78ac0fecf91617367c24767157f62d5ad006e98685604051610bdc92919061231c565b60405180910390a2505050505050565b600080610bf7611c02565b60008481526005919091016020526040808220548151633fabe5a360e21b815291516001600160a01b039091169350839163feaf968c9160048083019260a0929190829003018186803b1580156105c257600080fd5b6000610c57611c02565b600092835260030160205250604090205460ff1690565b610c98604051806060016040528060001515815260200160608152602001600061ffff1681525090565b610ca0611c02565b60008381526020918252604090819020815160608101909252805460ff16151582526001810180549293919291840191610cd99061233e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d059061233e565b8015610d525780601f10610d2757610100808354040283529160200191610d52565b820191906000526020600020905b815481529060010190602001808311610d3557829003601f168201915b50505091835250506002919091015461ffff1660209091015292915050565b60006208aa8960eb1b831415610d905750670de0b6b3a764000061053d565b6000610d9a611c02565b60008581526006919091016020526040808220549051639a6fc8f560e01b815269ffffffffffffffffffff861660048201526001600160a01b03909116925081908390639a6fc8f5906024015b60a06040518083038186803b158015610dff57600080fd5b505afa158015610e13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e379190612127565b5093505092505060008111610e8e5760405162461bcd60e51b815260206004820152601760248201527f526f756e64206e6f7420636f6d706c65746564207965740000000000000000006044820152606401610636565b50949350505050565b600080610ea2611c02565b60008581526005919091016020526040808220549051639a6fc8f560e01b815269ffffffffffffffffffff861660048201526001600160a01b03909116925081908390639a6fc8f590602401610de7565b33610efc611168565b6001600160a01b031614610f225760405162461bcd60e51b8152600401610636906121de565b610f2c6000611c26565b565b33610f37611168565b6001600160a01b031614610f5d5760405162461bcd60e51b8152600401610636906121de565b81610f6781611a9b565b610f835760405162461bcd60e51b815260040161063690612213565b60018215151415611082576000610f98611c02565b600085815260069190910160205260409020546001600160a01b0316905080610fd35760405162461bcd60e51b8152600401610636906122f1565b610fdb611c02565b60008581526006919091016020526040902080546001600160a01b0319169055611003611c02565b6000858152600891909101602052604090819020805460ff19169055516001600160a01b038216907ea0d5a605fe34a5efa696fb7b7fc385f4efcc9d0ff516d7dc7a1cbfbe065ee790611074908781526040602082018190526003908201526208aa8960eb1b606082015260800190565b60405180910390a250505050565b600061108c611c02565b600085815260059190910160205260409020546001600160a01b03169050806110c75760405162461bcd60e51b8152600401610636906122f1565b6110cf611c02565b60008581526005919091016020526040902080546001600160a01b03191690556110f7611c02565b6000858152600791909101602052604090819020805460ff19169055516001600160a01b038216907ea0d5a605fe34a5efa696fb7b7fc385f4efcc9d0ff516d7dc7a1cbfbe065ee79061107490878152604060208201819052600390820152621554d160ea1b606082015260800190565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa5b546001600160a01b0316919050565b60006111a5611c02565b600092835260010160205250604090205490565b60006111c482610c4d565b6112105760405162461bcd60e51b815260206004820152601760248201527f556e61626c6520746f20676574204d696e4d617267696e0000000000000000006044820152606401610636565b611218611c02565b600092835260020160205250604090205490565b33611235611168565b6001600160a01b03161461125b5760405162461bcd60e51b8152600401610636906121de565b8161126581611a9b565b6112815760405162461bcd60e51b815260040161063690612213565b600082116112d15760405162461bcd60e51b815260206004820152601760248201527f496e636f7272656374206861697263757420726174696f0000000000000000006044820152606401610636565b61271082111561131c5760405162461bcd60e51b81526020600482015260166024820152754861697263757420726174696f206f766572666c6f7760501b6044820152606401610636565b81611325611c02565b600101600085815260200190815260200160002081905550827f99d976082a5e53ffddd334dbf2aec9b617affac6394470feb508f5fb662e0a1a8360405161079a91815260200190565b6000611379611c02565b600092835260205250604090206002015461ffff1690565b600054610100900460ff16158080156113b15750600054600160ff909116105b806113cb5750303b1580156113cb575060005460ff166001145b61142e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610636565b6000805460ff191660011790558015611451576000805461ff0019166101001790555b600061145b611c97565b6001600160a01b031614156114bd5760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b6064820152608401610636565b6114c682611c26565b801561150c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60606208aa8960eb1b83141561152757508061053d565b6000611531611c02565b60008581526006919091016020526040808220548151633fabe5a360e21b815291516001600160a01b039091169350839163feaf968c9160048083019260a0929190829003018186803b15801561158757600080fd5b505afa15801561159b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bf9190612127565b5050509150506000845167ffffffffffffffff8111156115e1576115e1611dd4565b60405190808252806020026020018201604052801561160a578160200160208202803683370190505b50905060005b85518110156116b457600086828151811061162d5761162d612379565b60200260200101519050600081111561168057670de0b6b3a76400006116538583612195565b61165d91906121ca565b83838151811061166f5761166f612379565b6020026020010181815250506116a1565b600083838151811061169457611694612379565b6020026020010181815250505b50806116ac8161238f565b915050611610565b5095945050505050565b6000336116c9611168565b6001600160a01b0316146116ef5760405162461bcd60e51b8152600401610636906121de565b6001600160a01b0383166117455760405162461bcd60e51b815260206004820152601960248201527f436f756c646e2774206c696e6b203078302061646472657373000000000000006044820152606401610636565b60008390506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561178557600080fd5b505afa158015611799573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bd9190612127565b50505091505060008112156117e45760405162461bcd60e51b8152600401610636906122f1565b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561181f57600080fd5b505afa158015611833573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185791906123aa565b905060128160ff1611156118a05760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420646563696d616c7360801b6044820152606401610636565b84156119c1576208aa8960eb1b8714156118f05760405162461bcd60e51b8152602060048201526011602482015270086c2dc4ee840d8d2dcd640e8de408aa89607b1b6044820152606401610636565b826118f9611c02565b60008981526006919091016020526040902080546001600160a01b0319166001600160a01b039290921691909117905580611932611c02565b600801600089815260200190815260200160002060006101000a81548160ff021916908360ff160217905550856001600160a01b03167f6537ffaaeebdb294479a8b7fab1081c2b15de1a4bc9df657aad801547748fa4a886040516119b49181526040602082018190526003908201526208aa8960eb1b606082015260800190565b60405180910390a2611a8e565b826119ca611c02565b60008981526005919091016020526040902080546001600160a01b0319166001600160a01b039290921691909117905580611a03611c02565b600701600089815260200190815260200160002060006101000a81548160ff021916908360ff160217905550856001600160a01b03167f6537ffaaeebdb294479a8b7fab1081c2b15de1a4bc9df657aad801547748fa4a88604051611a85918152604060208201819052600390820152621554d160ea1b606082015260800190565b60405180910390a25b5060019695505050505050565b6000611aa5611c02565b600092835260205250604090205460ff1690565b33611ac2611168565b6001600160a01b031614611ae85760405162461bcd60e51b8152600401610636906121de565b6000611af2611c02565b60008481526020918252604090819020805460ff191685151590811782559151918252925084917f9abbefd519a8bdb26fbc476187bc19038a6a41a175946595f6e9e900d9eb2a31910161079a565b33611b4a611168565b6001600160a01b031614611b705760405162461bcd60e51b8152600401610636906121de565b6001600160a01b038116611bd55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610636565b611bde81611c26565b50565b6000611beb611c02565b600092835260080160205250604090205460ff1690565b7fbf1f6da7b18d0b1bd723139ae003962c8fa874ed2f9ff2b1948edfe1e7915f5d90565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61118c565b828054611ccb9061233e565b90600052602060002090601f016020900481019282611ced5760008555611d33565b82601f10611d0657805160ff1916838001178555611d33565b82800160010185558215611d33579182015b82811115611d33578251825591602001919060010190611d18565b50611d3f929150611d43565b5090565b5b80821115611d3f5760008155600101611d44565b600060208284031215611d6a57600080fd5b5035919050565b60008060408385031215611d8457600080fd5b50508035926020909101359150565b80358015158114611da357600080fd5b919050565b60008060408385031215611dbb57600080fd5b82359150611dcb60208401611d93565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611e1357611e13611dd4565b604052919050565b80356001600160a01b0381168114611da357600080fd5b600080600080600060a08688031215611e4a57600080fd5b8535945060208087013567ffffffffffffffff80821115611e6a57600080fd5b818901915089601f830112611e7e57600080fd5b813581811115611e9057611e90611dd4565b611ea2601f8201601f19168501611dea565b91508082528a84828501011115611eb857600080fd5b8084840185840137600084828401015250809650505050611edb60408701611e1b565b925060608601359150611ef060808701611e1b565b90509295509295909350565b6000815180845260005b81811015611f2257602081850181015186830182015201611f06565b81811115611f34576000602083870101525b50601f01601f19169290920160200192915050565b602081528151151560208201526000602083015160606040840152611f716080840182611efc565b905061ffff60408501511660608401528091505092915050565b69ffffffffffffffffffff81168114611bde57600080fd5b60008060408385031215611fb657600080fd5b823591506020830135611fc881611f8b565b809150509250929050565b600060208284031215611fe557600080fd5b611fee82611e1b565b9392505050565b6000806040838503121561200857600080fd5b8235915060208084013567ffffffffffffffff8082111561202857600080fd5b818601915086601f83011261203c57600080fd5b81358181111561204e5761204e611dd4565b8060051b915061205f848301611dea565b818152918301840191848101908984111561207957600080fd5b938501935b838510156120975784358252938501939085019061207e565b8096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b818110156120df578351835292840192918401916001016120c3565b50909695505050505050565b60008060006060848603121561210057600080fd5b8335925061211060208501611e1b565b915061211e60408501611d93565b90509250925092565b600080600080600060a0868803121561213f57600080fd5b855161214a81611f8b565b80955050602086015193506040860151925060608601519150608086015161217181611f8b565b809150509295509295909350565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156121af576121af61217f565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826121d9576121d96121b4565b500490565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602080825260119082015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b604082015260600190565b60006001600160ff1b03818413828413808216868404861116156122645761226461217f565b600160ff1b60008712828116878305891216156122835761228361217f565b6000871292508782058712848416161561229f5761229f61217f565b878505871281841616156122b5576122b561217f565b505050929093029392505050565b6000826122d2576122d26121b4565b600160ff1b8214600019841416156122ec576122ec61217f565b500590565b602080825260119082015270125b9d985b1a5908141c9a58d951995959607a1b604082015260600190565b60408152600061232f6040830185611efc565b90508260208301529392505050565b600181811c9082168061235257607f821691505b6020821081141561237357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156123a3576123a361217f565b5060010190565b6000602082840312156123bc57600080fd5b815160ff81168114611fee57600080fdfea264697066735822122028602e8d165f5776df4e597ff3dc2ec6dbba224094269cbb8f1e7b66eb17939f64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c8063715018a6116100f9578063c4d66de811610097578063d4d4f6ce11610071578063d4d4f6ce146103f7578063ea6c88a51461040a578063f2fde38b1461041d578063facae93f1461043057600080fd5b8063c4d66de8146103b1578063cc106de1146103c4578063cc8dd9f1146103e457600080fd5b80639abdb38a116100d35780639abdb38a14610352578063a38061c914610365578063b11459b414610378578063b43a9e6c1461038b57600080fd5b8063715018a61461032f5780637b7904e3146103375780638da5cb5b1461034a57600080fd5b806346498c2e116101665780635d95df8a116101405780635d95df8a146102c65780635e5658d2146102e957806360cd4478146103095780636d01544d1461031c57600080fd5b806346498c2e1461028d5780634caeebaf146102a057806350326d22146102b357600080fd5b806334cc1f36116101a257806334cc1f36146102275780633a0a22f01461023c57806342e863911461024f57806344a6ecdd1461027a57600080fd5b806304261371146101c957806306d062ad146101f35780631743ffce14610214575b600080fd5b6101dc6101d7366004611d58565b610443565b60405160ff90911681526020015b60405180910390f35b610206610201366004611d71565b610464565b6040519081526020016101ea565b610206610222366004611d58565b610543565b61023a610235366004611d71565b610607565b005b61020661024a366004611d71565b6107a7565b61026261025d366004611d58565b61087b565b6040516001600160a01b0390911681526020016101ea565b610206610288366004611d71565b6108a2565b61023a61029b366004611da8565b61096c565b61023a6102ae366004611e32565b610a20565b6102066102c1366004611d58565b610bec565b6102d96102d4366004611d58565b610c4d565b60405190151581526020016101ea565b6102fc6102f7366004611d58565b610c6e565b6040516101ea9190611f49565b610206610317366004611fa3565b610d71565b61020661032a366004611fa3565b610e97565b61023a610ef3565b61023a610345366004611da8565b610f2e565b610262611168565b610206610360366004611d58565b61119b565b610206610373366004611d58565b6111b9565b61023a610386366004611d71565b61122c565b61039e610399366004611d58565b61136f565b60405161ffff90911681526020016101ea565b61023a6103bf366004611fd3565b611391565b6103d76103d2366004611ff5565b611510565b6040516101ea91906120a7565b6102d96103f23660046120eb565b6116be565b6102d9610405366004611d58565b611a9b565b61023a610418366004611da8565b611ab9565b61023a61042b366004611fd3565b611b41565b6101dc61043e366004611d58565b611be1565b600061044d611c02565b600092835260070160205250604090205460ff1690565b60006208aa8960eb1b83141561047b57508061053d565b6000610485611c02565b60008581526006919091016020526040808220548151633fabe5a360e21b815291516001600160a01b039091169350839163feaf968c9160048083019260a0929190829003018186803b1580156104db57600080fd5b505afa1580156104ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105139190612127565b5050509150508084670de0b6b3a764000061052e9190612195565b61053891906121ca565b925050505b92915050565b60006208aa8960eb1b8214156105625750670de0b6b3a7640000919050565b600061056c611c02565b60008481526006919091016020526040808220548151633fabe5a360e21b815291516001600160a01b039091169350839163feaf968c9160048083019260a0929190829003018186803b1580156105c257600080fd5b505afa1580156105d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fa9190612127565b5091979650505050505050565b33610610611168565b6001600160a01b03161461063f5760405162461bcd60e51b8152600401610636906121de565b60405180910390fd5b8161064981611a9b565b6106655760405162461bcd60e51b815260040161063690612213565b600082116106ab5760405162461bcd60e51b815260206004820152601360248201527224b731b7b93932b1ba1026b4b726b0b933b4b760691b6044820152606401610636565b6127108211156106f25760405162461bcd60e51b81526020600482015260126024820152714d696e4d617267696e206f766572666c6f7760701b6044820152606401610636565b6106fb83610c4d565b6107475760405162461bcd60e51b815260206004820152601760248201527f556e61626c6520746f20736574204d696e4d617267696e0000000000000000006044820152606401610636565b81610750611c02565b600201600085815260200190815260200160002081905550827f93aab202383cdcea234ec12d5ae14be597c1fcbe7c93b4843b5df57793917f0c8360405161079a91815260200190565b60405180910390a2505050565b60006208aa8960eb1b8314156107be57508061053d565b60006107c8611c02565b60008581526006919091016020526040808220548151633fabe5a360e21b815291516001600160a01b039091169350839163feaf968c9160048083019260a0929190829003018186803b15801561081e57600080fd5b505afa158015610832573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108569190612127565b505050915050670de0b6b3a76400008185610871919061223e565b61053891906122c3565b6000610885611c02565b60009283526004016020525060409020546001600160a01b031690565b60006208aa8960eb1b8314156108b957508061053d565b60006108c3611c02565b60008581526006919091016020526040808220548151633fabe5a360e21b815291516001600160a01b039091169350839163feaf968c9160048083019260a0929190829003018186803b15801561091957600080fd5b505afa15801561092d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109519190612127565b505050915050670de0b6b3a7640000818561052e9190612195565b33610975611168565b6001600160a01b03161461099b5760405162461bcd60e51b8152600401610636906121de565b816109a581611a9b565b6109c15760405162461bcd60e51b815260040161063690612213565b816109ca611c02565b60008581526003919091016020908152604091829020805460ff19169315159390931790925551831515815284917f2184292b9bb18c7204e8a0f1e8b90159dc7830d4f547cf8c2ba0358ef18b05b2910161079a565b33610a29611168565b6001600160a01b031614610a4f5760405162461bcd60e51b8152600401610636906121de565b610a79604051806060016040528060001515815260200160608152602001600061ffff1681525090565b602081018590526001600160a01b03821615610ac95781610a98611c02565b60008881526004919091016020526040902080546001600160a01b0319166001600160a01b03929092169190911790555b6001815280610ad6611c02565b60008881526020918252604090208251815460ff19169015151781558282015180519192610b0c92600185019290910190611cbf565b50604091909101516002909101805461ffff191661ffff90921691909117905582610b35611c02565b600088815260019190910160205260409020556208aa8960eb1b8614610b8257610b61868560016116be565b610b7d5760405162461bcd60e51b8152600401610636906122f1565b610baa565b610b8e868560006116be565b610baa5760405162461bcd60e51b8152600401610636906122f1565b857fac23727d2c524a59eb5ce3843d78ac0fecf91617367c24767157f62d5ad006e98685604051610bdc92919061231c565b60405180910390a2505050505050565b600080610bf7611c02565b60008481526005919091016020526040808220548151633fabe5a360e21b815291516001600160a01b039091169350839163feaf968c9160048083019260a0929190829003018186803b1580156105c257600080fd5b6000610c57611c02565b600092835260030160205250604090205460ff1690565b610c98604051806060016040528060001515815260200160608152602001600061ffff1681525090565b610ca0611c02565b60008381526020918252604090819020815160608101909252805460ff16151582526001810180549293919291840191610cd99061233e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d059061233e565b8015610d525780601f10610d2757610100808354040283529160200191610d52565b820191906000526020600020905b815481529060010190602001808311610d3557829003601f168201915b50505091835250506002919091015461ffff1660209091015292915050565b60006208aa8960eb1b831415610d905750670de0b6b3a764000061053d565b6000610d9a611c02565b60008581526006919091016020526040808220549051639a6fc8f560e01b815269ffffffffffffffffffff861660048201526001600160a01b03909116925081908390639a6fc8f5906024015b60a06040518083038186803b158015610dff57600080fd5b505afa158015610e13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e379190612127565b5093505092505060008111610e8e5760405162461bcd60e51b815260206004820152601760248201527f526f756e64206e6f7420636f6d706c65746564207965740000000000000000006044820152606401610636565b50949350505050565b600080610ea2611c02565b60008581526005919091016020526040808220549051639a6fc8f560e01b815269ffffffffffffffffffff861660048201526001600160a01b03909116925081908390639a6fc8f590602401610de7565b33610efc611168565b6001600160a01b031614610f225760405162461bcd60e51b8152600401610636906121de565b610f2c6000611c26565b565b33610f37611168565b6001600160a01b031614610f5d5760405162461bcd60e51b8152600401610636906121de565b81610f6781611a9b565b610f835760405162461bcd60e51b815260040161063690612213565b60018215151415611082576000610f98611c02565b600085815260069190910160205260409020546001600160a01b0316905080610fd35760405162461bcd60e51b8152600401610636906122f1565b610fdb611c02565b60008581526006919091016020526040902080546001600160a01b0319169055611003611c02565b6000858152600891909101602052604090819020805460ff19169055516001600160a01b038216907ea0d5a605fe34a5efa696fb7b7fc385f4efcc9d0ff516d7dc7a1cbfbe065ee790611074908781526040602082018190526003908201526208aa8960eb1b606082015260800190565b60405180910390a250505050565b600061108c611c02565b600085815260059190910160205260409020546001600160a01b03169050806110c75760405162461bcd60e51b8152600401610636906122f1565b6110cf611c02565b60008581526005919091016020526040902080546001600160a01b03191690556110f7611c02565b6000858152600791909101602052604090819020805460ff19169055516001600160a01b038216907ea0d5a605fe34a5efa696fb7b7fc385f4efcc9d0ff516d7dc7a1cbfbe065ee79061107490878152604060208201819052600390820152621554d160ea1b606082015260800190565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa5b546001600160a01b0316919050565b60006111a5611c02565b600092835260010160205250604090205490565b60006111c482610c4d565b6112105760405162461bcd60e51b815260206004820152601760248201527f556e61626c6520746f20676574204d696e4d617267696e0000000000000000006044820152606401610636565b611218611c02565b600092835260020160205250604090205490565b33611235611168565b6001600160a01b03161461125b5760405162461bcd60e51b8152600401610636906121de565b8161126581611a9b565b6112815760405162461bcd60e51b815260040161063690612213565b600082116112d15760405162461bcd60e51b815260206004820152601760248201527f496e636f7272656374206861697263757420726174696f0000000000000000006044820152606401610636565b61271082111561131c5760405162461bcd60e51b81526020600482015260166024820152754861697263757420726174696f206f766572666c6f7760501b6044820152606401610636565b81611325611c02565b600101600085815260200190815260200160002081905550827f99d976082a5e53ffddd334dbf2aec9b617affac6394470feb508f5fb662e0a1a8360405161079a91815260200190565b6000611379611c02565b600092835260205250604090206002015461ffff1690565b600054610100900460ff16158080156113b15750600054600160ff909116105b806113cb5750303b1580156113cb575060005460ff166001145b61142e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610636565b6000805460ff191660011790558015611451576000805461ff0019166101001790555b600061145b611c97565b6001600160a01b031614156114bd5760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b6064820152608401610636565b6114c682611c26565b801561150c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60606208aa8960eb1b83141561152757508061053d565b6000611531611c02565b60008581526006919091016020526040808220548151633fabe5a360e21b815291516001600160a01b039091169350839163feaf968c9160048083019260a0929190829003018186803b15801561158757600080fd5b505afa15801561159b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bf9190612127565b5050509150506000845167ffffffffffffffff8111156115e1576115e1611dd4565b60405190808252806020026020018201604052801561160a578160200160208202803683370190505b50905060005b85518110156116b457600086828151811061162d5761162d612379565b60200260200101519050600081111561168057670de0b6b3a76400006116538583612195565b61165d91906121ca565b83838151811061166f5761166f612379565b6020026020010181815250506116a1565b600083838151811061169457611694612379565b6020026020010181815250505b50806116ac8161238f565b915050611610565b5095945050505050565b6000336116c9611168565b6001600160a01b0316146116ef5760405162461bcd60e51b8152600401610636906121de565b6001600160a01b0383166117455760405162461bcd60e51b815260206004820152601960248201527f436f756c646e2774206c696e6b203078302061646472657373000000000000006044820152606401610636565b60008390506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561178557600080fd5b505afa158015611799573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bd9190612127565b50505091505060008112156117e45760405162461bcd60e51b8152600401610636906122f1565b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561181f57600080fd5b505afa158015611833573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185791906123aa565b905060128160ff1611156118a05760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420646563696d616c7360801b6044820152606401610636565b84156119c1576208aa8960eb1b8714156118f05760405162461bcd60e51b8152602060048201526011602482015270086c2dc4ee840d8d2dcd640e8de408aa89607b1b6044820152606401610636565b826118f9611c02565b60008981526006919091016020526040902080546001600160a01b0319166001600160a01b039290921691909117905580611932611c02565b600801600089815260200190815260200160002060006101000a81548160ff021916908360ff160217905550856001600160a01b03167f6537ffaaeebdb294479a8b7fab1081c2b15de1a4bc9df657aad801547748fa4a886040516119b49181526040602082018190526003908201526208aa8960eb1b606082015260800190565b60405180910390a2611a8e565b826119ca611c02565b60008981526005919091016020526040902080546001600160a01b0319166001600160a01b039290921691909117905580611a03611c02565b600701600089815260200190815260200160002060006101000a81548160ff021916908360ff160217905550856001600160a01b03167f6537ffaaeebdb294479a8b7fab1081c2b15de1a4bc9df657aad801547748fa4a88604051611a85918152604060208201819052600390820152621554d160ea1b606082015260800190565b60405180910390a25b5060019695505050505050565b6000611aa5611c02565b600092835260205250604090205460ff1690565b33611ac2611168565b6001600160a01b031614611ae85760405162461bcd60e51b8152600401610636906121de565b6000611af2611c02565b60008481526020918252604090819020805460ff191685151590811782559151918252925084917f9abbefd519a8bdb26fbc476187bc19038a6a41a175946595f6e9e900d9eb2a31910161079a565b33611b4a611168565b6001600160a01b031614611b705760405162461bcd60e51b8152600401610636906121de565b6001600160a01b038116611bd55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610636565b611bde81611c26565b50565b6000611beb611c02565b600092835260080160205250604090205460ff1690565b7fbf1f6da7b18d0b1bd723139ae003962c8fa874ed2f9ff2b1948edfe1e7915f5d90565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61118c565b828054611ccb9061233e565b90600052602060002090601f016020900481019282611ced5760008555611d33565b82601f10611d0657805160ff1916838001178555611d33565b82800160010185558215611d33579182015b82811115611d33578251825591602001919060010190611d18565b50611d3f929150611d43565b5090565b5b80821115611d3f5760008155600101611d44565b600060208284031215611d6a57600080fd5b5035919050565b60008060408385031215611d8457600080fd5b50508035926020909101359150565b80358015158114611da357600080fd5b919050565b60008060408385031215611dbb57600080fd5b82359150611dcb60208401611d93565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611e1357611e13611dd4565b604052919050565b80356001600160a01b0381168114611da357600080fd5b600080600080600060a08688031215611e4a57600080fd5b8535945060208087013567ffffffffffffffff80821115611e6a57600080fd5b818901915089601f830112611e7e57600080fd5b813581811115611e9057611e90611dd4565b611ea2601f8201601f19168501611dea565b91508082528a84828501011115611eb857600080fd5b8084840185840137600084828401015250809650505050611edb60408701611e1b565b925060608601359150611ef060808701611e1b565b90509295509295909350565b6000815180845260005b81811015611f2257602081850181015186830182015201611f06565b81811115611f34576000602083870101525b50601f01601f19169290920160200192915050565b602081528151151560208201526000602083015160606040840152611f716080840182611efc565b905061ffff60408501511660608401528091505092915050565b69ffffffffffffffffffff81168114611bde57600080fd5b60008060408385031215611fb657600080fd5b823591506020830135611fc881611f8b565b809150509250929050565b600060208284031215611fe557600080fd5b611fee82611e1b565b9392505050565b6000806040838503121561200857600080fd5b8235915060208084013567ffffffffffffffff8082111561202857600080fd5b818601915086601f83011261203c57600080fd5b81358181111561204e5761204e611dd4565b8060051b915061205f848301611dea565b818152918301840191848101908984111561207957600080fd5b938501935b838510156120975784358252938501939085019061207e565b8096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b818110156120df578351835292840192918401916001016120c3565b50909695505050505050565b60008060006060848603121561210057600080fd5b8335925061211060208501611e1b565b915061211e60408501611d93565b90509250925092565b600080600080600060a0868803121561213f57600080fd5b855161214a81611f8b565b80955050602086015193506040860151925060608601519150608086015161217181611f8b565b809150509295509295909350565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156121af576121af61217f565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826121d9576121d96121b4565b500490565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602080825260119082015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b604082015260600190565b60006001600160ff1b03818413828413808216868404861116156122645761226461217f565b600160ff1b60008712828116878305891216156122835761228361217f565b6000871292508782058712848416161561229f5761229f61217f565b878505871281841616156122b5576122b561217f565b505050929093029392505050565b6000826122d2576122d26121b4565b600160ff1b8214600019841416156122ec576122ec61217f565b500590565b602080825260119082015270125b9d985b1a5908141c9a58d951995959607a1b604082015260600190565b60408152600061232f6040830185611efc565b90508260208301529392505050565b600181811c9082168061235257607f821691505b6020821081141561237357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156123a3576123a361217f565b5060010190565b6000602082840312156123bc57600080fd5b815160ff81168114611fee57600080fdfea264697066735822122028602e8d165f5776df4e597ff3dc2ec6dbba224094269cbb8f1e7b66eb17939f64736f6c63430008090033",
  "implementation": "0x9420d9Cb95db1897Be41EFC6328Cf3f0C7B64B12",
  "devdoc": {
    "details": "Currency Controller contract is responsible for managing supported currencies in Secured Finance Protocol Contract links new currencies to ETH Chainlink price feeds, without existing price feed contract owner is not able to add a new currency into the protocol",
    "kind": "dev",
    "methods": {
      "convertBulkToETH(bytes32,uint256[])": {
        "details": "Triggers to get converted amounts of currency to ETH.",
        "params": {
          "_amounts": "Array with amounts of funds to be converted",
          "_ccy": "Currency that has to be convered to ETH"
        }
      },
      "convertFromETH(bytes32,uint256)": {
        "details": "Triggers to convert ETH amount of funds to specified currency.",
        "params": {
          "_amountETH": "Amount of funds in ETH to be converted",
          "_ccy": "Currency that has to be convered from ETH"
        }
      },
      "convertToETH(bytes32,int256)": {
        "details": "Triggers to get converted amount of currency in ETH.",
        "params": {
          "_amount": "Amount of funds to be converted",
          "_ccy": "Currency that has to be convered to ETH"
        }
      },
      "convertToETH(bytes32,uint256)": {
        "details": "Triggers to get converted amount of currency in ETH.",
        "params": {
          "_amount": "Amount of funds to be converted",
          "_ccy": "Currency that has to be convered to ETH"
        }
      },
      "getChainId(bytes32)": {
        "details": "Triggers to get chainId for a specific currency. Chain ID is a unique identifier of another chain like Bitcoin, Filecoin, etc.",
        "params": {
          "_ccy": "Currency short ticket"
        }
      },
      "getCurrencies(bytes32)": {
        "details": "Triggers to get specified currency.",
        "params": {
          "_ccy": "Currency short ticket"
        }
      },
      "getEthDecimals(bytes32)": {
        "details": "Triggers to get ETH decimal for specific currency.",
        "params": {
          "_ccy": "Currency short ticket"
        }
      },
      "getHaircut(bytes32)": {
        "details": "Triggers to get haircut ratio for specific currency. Haircut is used in bilateral netting cross-calculation.",
        "params": {
          "_ccy": "Currency short ticket"
        }
      },
      "getHistoricalETHPrice(bytes32,uint80)": {
        "details": "Triggers to get historical price in ETH for selected currency.",
        "params": {
          "_ccy": "Currency",
          "_roundId": "RoundId"
        }
      },
      "getHistoricalUSDPrice(bytes32,uint80)": {
        "details": "Triggers to get historical price in USD for selected currency.",
        "params": {
          "_ccy": "Currency",
          "_roundId": "RoundId"
        }
      },
      "getLastETHPrice(bytes32)": {
        "details": "Triggers to get last price in ETH for selected currency.",
        "params": {
          "_ccy": "Currency"
        }
      },
      "getLastUSDPrice(bytes32)": {
        "details": "Triggers to get last price in USD for selected currency.",
        "params": {
          "_ccy": "Currency"
        }
      },
      "getMinMargin(bytes32)": {
        "details": "Triggers to get minimal margin percentage for specific currency.",
        "params": {
          "_ccy": "Currency short ticket"
        }
      },
      "getTokenAddresses(bytes32)": {
        "details": "Triggers to get token address for specific currency.",
        "params": {
          "_ccy": "Currency short ticket"
        }
      },
      "getUsdDecimals(bytes32)": {
        "details": "Triggers to get USD decimal for specific currency.",
        "params": {
          "_ccy": "Currency short ticket"
        }
      },
      "initialize(address)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController"
      },
      "isCollateral(bytes32)": {
        "details": "Triggers to get if specified currency is collateral.",
        "params": {
          "_ccy": "Currency short ticket"
        }
      },
      "isSupportedCcy(bytes32)": {
        "details": "Triggers to get if specified currency is supported.",
        "params": {
          "_ccy": "Currency short ticket"
        }
      },
      "linkPriceFeed(bytes32,address,bool)": {
        "details": "Links the contract to existing chainlink price feed.",
        "params": {
          "_ccy": "Specified currency short code",
          "_isEthPriceFeed": "Boolean for price feed with ETH price",
          "_priceFeedAddr": "Chainlink price feed contract address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removePriceFeed(bytes32,bool)": {
        "details": "Triggers to remove existing chainlink price feed.",
        "params": {
          "_ccy": "Specified currency",
          "_isEthPriceFeed": "Boolean for price feed with ETH price"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportCurrency(bytes32,string,address,uint256,address)": {
        "details": "Triggers to add new currency into the protocol. Links with existing ETH chainlink pricefeed",
        "params": {
          "_ccy": "Currency short ticket",
          "_ethPriceFeed": "Address for ETH price feed",
          "_name": "Currency full name"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCcyHaircut(bytes32,uint256)": {
        "details": "Triggers to update the haircut ratio for supported currency",
        "params": {
          "_ccy": "Currency short ticket",
          "_haircut": "Currency haircut ratio used to calculate in collateral calculations"
        }
      },
      "updateCollateralSupport(bytes32,bool)": {
        "details": "Triggers to update if currency is accepted as collateral",
        "params": {
          "_ccy": "Currency short ticket",
          "_isSupported": "Boolean whether currency supported as collateral or not"
        }
      },
      "updateCurrencySupport(bytes32,bool)": {
        "details": "Triggers to update currency support",
        "params": {
          "_ccy": "Currency short ticket",
          "_isSupported": "Boolean whether currency supported as collateral or not"
        }
      },
      "updateMinMargin(bytes32,uint256)": {
        "details": "Triggers to update the minimal margin requirements for currency supported as collateral",
        "params": {
          "_ccy": "Currency short ticket",
          "_minMargin": "Currency minimal margin ratio used to calculate collateral coverage"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address)": {
        "notice": "Initializes the contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 790,
        "contract": "contracts/CurrencyController.sol:CurrencyController",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 793,
        "contract": "contracts/CurrencyController.sol:CurrencyController",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}