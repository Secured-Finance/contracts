{
  "address": "0x411DE07Da2Ff306DA6feA89374787A17E9600D9A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment1",
          "type": "uint256"
        }
      ],
      "name": "AddCloseOutPayments",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment1",
          "type": "uint256"
        }
      ],
      "name": "RemoveCloseOutPayments",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "netPayment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "txHash",
          "type": "bytes32"
        }
      ],
      "name": "SettleCloseOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "netPayment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "txHash",
          "type": "bytes32"
        }
      ],
      "name": "VerifyCloseOut",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "payment0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "payment1",
          "type": "uint256"
        }
      ],
      "name": "addPayments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "checkDefault",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        }
      ],
      "name": "getCloseOutPayment",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "netPayment",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "flipped",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "closed",
              "type": "bool"
            }
          ],
          "internalType": "struct CloseOut.Payment",
          "name": "payment",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "payment0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "payment1",
          "type": "uint256"
        }
      ],
      "name": "removePayments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x72684899e601ececf75cc883816bdf53302b6965e4f71b01f811bb700a68022f",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0xb893472e4C8e7b4FaBd4842fdDb9B7AA6C7Ab004",
    "transactionIndex": 26,
    "gasUsed": "1023951",
    "logsBloom": "0x
    "blockHash": "0x4ff3ce169202a01033466ff612f2c2533e2d2030f3e80ffdc51580f24ff7cb87",
    "transactionHash": "0x72684899e601ececf75cc883816bdf53302b6965e4f71b01f811bb700a68022f",
    "logs": [],
    "blockNumber": 11027797,
    "cumulativeGasUsed": "13705279",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 10,
  "solcInputHash": "971962312d57c9fa43e93f0d7765eb35",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment1\",\"type\":\"uint256\"}],\"name\":\"AddCloseOutPayments\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment1\",\"type\":\"uint256\"}],\"name\":\"RemoveCloseOutPayments\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"SettleCloseOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"VerifyCloseOut\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"payment0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment1\",\"type\":\"uint256\"}],\"name\":\"addPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_party\",\"type\":\"address\"}],\"name\":\"checkDefault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"}],\"name\":\"getCloseOutPayment\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"netPayment\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flipped\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"internalType\":\"struct CloseOut.Payment\",\"name\":\"payment\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"payment0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment1\",\"type\":\"uint256\"}],\"name\":\"removePayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptedContracts()\":{\"details\":\"Returns contract names that can call this contract.\"},\"addPayments(address,address,bytes32,uint256,uint256)\":{\"details\":\"Triggers to add total payments during the registration of the deal in close out netting\",\"params\":{\"ccy\":\"Main settlement currency of the deal\",\"party0\":\"First counterparty address\",\"party1\":\"Second counterparty address\",\"payment0\":\"Aggregated payment for first counterparty\",\"payment1\":\"Aggregated payment for second counterparty\"}},\"checkDefault(address)\":{\"details\":\"External function to check if `_party` is in default\"},\"getCloseOutPayment(address,address,bytes32)\":{\"details\":\"Returns the close out payment between two counterparties\",\"params\":{\"ccy\":\"Main payment settlement currency\",\"party0\":\"First counterparty address\",\"party1\":\"Second counterparty address\"}},\"initialize(address)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController\"},\"removePayments(address,address,bytes32,uint256,uint256)\":{\"details\":\"Triggers to remove aggregated payments during the liquidation of the deal in close out netting\",\"params\":{\"ccy\":\"Main settlement currency of the deal\",\"party0\":\"First counterparty address\",\"party1\":\"Second counterparty address\",\"payment0\":\"Aggregated payment for first counterparty\",\"payment1\":\"Aggregated payment for second counterparty\"}},\"requiredContracts()\":{\"details\":\"Returns required contract names in this contract\"}},\"title\":\"Close Out Netting contract is used in close out operations Close out is the process while one of the counterparties declared as defaulted party and all deals should be terminated Contract linked to all product based contracts (ex. Loan, Swap, etc), and Collateral Aggregator contract.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPayments(address,address,bytes32,uint256,uint256)\":{\"notice\":\"Executed only be PaymentAggregator contract\"},\"initialize(address)\":{\"notice\":\"Initializes the contract.\"},\"removePayments(address,address,bytes32,uint256,uint256)\":{\"notice\":\"Executed only be PaymentAggregator contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CloseOutNetting.sol\":\"CloseOutNetting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"contracts/CloseOutNetting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./libraries/CloseOut.sol\\\";\\nimport \\\"./interfaces/ICloseOutNetting.sol\\\";\\nimport \\\"./mixins/MixinAddressResolver.sol\\\";\\nimport \\\"./utils/Proxyable.sol\\\";\\nimport {CloseOutNettingStorage as Storage} from \\\"./storages/CloseOutNettingStorage.sol\\\";\\n\\n/**\\n * @title Close Out Netting contract is used in close out operations\\n * Close out is the process while one of the counterparties declared\\n * as defaulted party and all deals should be terminated\\n *\\n * Contract linked to all product based contracts (ex. Loan, Swap, etc), and Collateral Aggregator contract.\\n */\\ncontract CloseOutNetting is ICloseOutNetting, MixinAddressResolver, Proxyable {\\n    /**\\n     * @dev Modifier to make a function callable only by defaulted counterparty.\\n     */\\n    modifier defaultedParty() {\\n        require(Storage.slot().isDefaulted[msg.sender]);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by non defaulted counterparty.\\n     */\\n    modifier nonDefaultedParty() {\\n        require(!Storage.slot().isDefaulted[msg.sender]);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController\\n     */\\n    function initialize(address resolver) public initializer onlyProxy {\\n        registerAddressResolver(resolver);\\n    }\\n\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](1);\\n        contracts[0] = Contracts.PAYMENT_AGGREGATOR;\\n    }\\n\\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](1);\\n        contracts[0] = Contracts.PAYMENT_AGGREGATOR;\\n    }\\n\\n    /**\\n     * @dev Returns the close out payment between two counterparties\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main payment settlement currency\\n     */\\n    function getCloseOutPayment(\\n        address party0,\\n        address party1,\\n        bytes32 ccy\\n    ) public view returns (CloseOut.Payment memory payment) {\\n        payment = CloseOut.get(Storage.slot().closeOuts, party0, party1, ccy);\\n    }\\n\\n    /**\\n     * @dev Triggers to add total payments during the registration of the deal in close out netting\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main settlement currency of the deal\\n     * @param payment0 Aggregated payment for first counterparty\\n     * @param payment1 Aggregated payment for second counterparty\\n     *\\n     * @notice Executed only be PaymentAggregator contract\\n     */\\n    function addPayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) external override onlyAcceptedContracts {\\n        CloseOut.addPayments(Storage.slot().closeOuts, party0, party1, ccy, payment0, payment1);\\n\\n        emit AddCloseOutPayments(party0, party1, ccy, payment0, payment1);\\n    }\\n\\n    /**\\n     * @dev Triggers to remove aggregated payments during the liquidation of the deal in close out netting\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main settlement currency of the deal\\n     * @param payment0 Aggregated payment for first counterparty\\n     * @param payment1 Aggregated payment for second counterparty\\n     *\\n     * @notice Executed only be PaymentAggregator contract\\n     */\\n    function removePayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) external override onlyAcceptedContracts {\\n        CloseOut.removePayments(Storage.slot().closeOuts, party0, party1, ccy, payment0, payment1);\\n\\n        emit RemoveCloseOutPayments(party0, party1, ccy, payment0, payment1);\\n    }\\n\\n    /**\\n     * @dev External function to check if `_party` is in default\\n     */\\n    function checkDefault(address _party) external view override returns (bool) {\\n        return Storage.slot().isDefaulted[_party];\\n    }\\n\\n    /**\\n     * @dev Internal function to declare default for `_defaultedParty`\\n     */\\n    function _handleDefault(address _defaultedParty) internal {\\n        Storage.slot().isDefaulted[_defaultedParty] = true;\\n    }\\n\\n    // TODO: Need to update using CollateralAggregatorV2\\n    // /**\\n    //  * @dev Internal function to execute close out netting payment\\n    //  * liquidates ETH from party's collateral with bigger net payment to their counterparty\\n    //  * @notice Only triggers if one of the counterparties in default\\n    //  */\\n    // function _handleCloseOut(address party0, address party1) internal {\\n    //     require(\\n    //         Storage.slot().isDefaulted[party0] || Storage.slot().isDefaulted[party1],\\n    //         \\\"NON_DEFAULTED_PARTIES\\\"\\n    //     );\\n    //     bytes32[] memory currencies = collateralAggregator.getExposedCurrencies(\\n    //         party0,\\n    //         party1\\n    //     );\\n\\n    //     for (uint256 i = 0; i < currencies.length; i++) {\\n    //         bytes32 ccy = currencies[i];\\n\\n    //         CloseOut.Payment memory payment = CloseOut.get(\\n    //             Storage.slot().closeOuts,\\n    //             party0,\\n    //             party1,\\n    //             ccy\\n    //         );\\n\\n    //         if (payment.flipped) {\\n    //             collateralAggregator.liquidate(\\n    //                 party1,\\n    //                 party0,\\n    //                 ccy,\\n    //                 payment.netPayment\\n    //             );\\n    //         } else {\\n    //             collateralAggregator.liquidate(\\n    //                 party0,\\n    //                 party1,\\n    //                 ccy,\\n    //                 payment.netPayment\\n    //             );\\n    //         }\\n\\n    //         CloseOut.close(Storage.slot().closeOuts, party0, party1, ccy);\\n    //     }\\n    // }\\n}\\n\",\"keccak256\":\"0x62e5c3d016203c04813608303c32fd3ca7678f44c85926536ff0776f471adfc7\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/interfaces/ICloseOutNetting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICloseOutNetting {\\n    event AddCloseOutPayments(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event RemoveCloseOutPayments(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event SettleCloseOut(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 netPayment,\\n        bytes32 txHash\\n    );\\n    event VerifyCloseOut(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 netPayment,\\n        bytes32 txHash\\n    );\\n\\n    function addPayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) external;\\n\\n    function checkDefault(address _party) external view returns (bool);\\n\\n    function removePayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6bbe6c9de500443c72cde8832c0ff9c921c6f38ace09523d3a1769f6e855830e\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralAggregatorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICollateralAggregator {\\n    event Register(address indexed addr);\\n    event Release(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    );\\n    event Liquidate(address indexed from, address indexed to, bytes32 ccy, uint256 amount);\\n    event ReleaseUnsettled(address indexed party, bytes32 ccy, uint256 amount);\\n    event SettleCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event UpdatePV(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    );\\n    event UseCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    );\\n    event UseUnsettledCollateral(address indexed party, bytes32 ccy, uint256 amount);\\n\\n    function checkRegisteredUser(address addr) external view returns (bool);\\n\\n    function getCcyExposures(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getCoverage(address _party0, address _party1) external view returns (uint256, uint256);\\n\\n    function getExposedCurrencies(address partyA, address partyB)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getMaxCollateralBookWidthdraw(address _user)\\n        external\\n        view\\n        returns (uint256 maxWithdraw);\\n\\n    function getMaxCollateralWidthdraw(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getNetAndTotalPV(address _party0, address _party1)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getRebalanceCollateralAmounts(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getTotalUnsettledExp(address _user) external view returns (uint256);\\n\\n    function getUnsettledCoverage(address _user) external view returns (uint256 coverage);\\n\\n    function isCovered(\\n        address _party0,\\n        address _party1,\\n        bytes32 _ccy,\\n        uint256 _party0PV,\\n        uint256 _party1PV,\\n        bool _isSettled\\n    ) external view returns (bool, bool);\\n\\n    function isCoveredUnsettled(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) external view returns (bool);\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        uint256 liquidationInETH\\n    ) external;\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        bytes32 ccy,\\n        uint256 liquidationAmount,\\n        uint256 pv,\\n        bool isSettled\\n    ) external;\\n\\n    function register() external;\\n\\n    function register(string[] memory _addresses, uint256[] memory _chainIds) external;\\n\\n    function releaseCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function releaseUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function settleCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external;\\n\\n    function updatePV(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    ) external;\\n\\n    function useCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function useUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function getUnsettledCollateral(address user, bytes32 ccy) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6ce0f77af603bba3166a03eebf4b1679a78491c64cce912331765889583a4369\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICollateralVault {\\n    event Deposit(address user, bytes32 ccy, uint256 amount);\\n    event PositionDeposit(address user, address counterparty, bytes32 ccy, uint256 amount);\\n    event RebalanceBetween(\\n        address user,\\n        address fromCounterparty,\\n        address toCounterparty,\\n        bytes32 ccy,\\n        uint256 amount\\n    );\\n    event RebalanceFrom(address user, address counterparty, bytes32 ccy, uint256 amount);\\n    event RebalanceTo(address user, address counterparty, bytes32 ccy, uint256 amount);\\n    event Withdraw(address from, bytes32 ccy, uint256 amount);\\n    event PositionWithdraw(address from, address counterparty, bytes32 ccy, uint256 amount);\\n    event Liquidate(address from, address to, bytes32 ccy, uint256 amount);\\n    event LiquidateIndependent(address from, address to, bytes32 ccy, uint256 amount);\\n\\n    function deposit(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external;\\n\\n    function deposit(bytes32 _ccy, uint256 _amount) external payable;\\n\\n    function getIndependentCollateral(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getIndependentCollateralInETH(address _user, bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLockedCollateral(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getLockedCollateralInETH(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getLockedCollateral(\\n        address _partyA,\\n        address _partyB,\\n        bytes32 _ccy\\n    ) external view returns (uint256, uint256);\\n\\n    function getLockedCollateralInETH(\\n        address _partyA,\\n        address _partyB,\\n        bytes32 _ccy\\n    ) external view returns (uint256, uint256);\\n\\n    function liquidate(\\n        address _from,\\n        address _to,\\n        uint256 _liquidationTarget\\n    ) external returns (bool);\\n\\n    function rebalanceCollateral(\\n        address _party0,\\n        address _party1,\\n        uint256 _rebalanceTarget,\\n        bool isRebalanceFrom\\n    ) external returns (bool);\\n\\n    function rebalanceBetween(\\n        address _user,\\n        address _fromParty,\\n        address _toParty,\\n        bytes32 _ccy,\\n        uint256 _amountETH\\n    ) external returns (uint256);\\n\\n    function withdraw(bytes32 _ccy, uint256 _amount) external;\\n\\n    function withdrawFrom(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external;\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getUsedCurrencies(address party0, address party1)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getTotalIndependentCollateralInETH(address _party) external view returns (uint256);\\n\\n    function getTotalLockedCollateralInETH(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x05a973a84165750802bf97f2c889467191ae0a99fb50221149f46b9df35bdd6e\",\"license\":\"MIT\"},\"contracts/interfaces/ICrosschainAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICrosschainAddressResolver {\\n    event UpdateAddress(address _user, uint256 _chainId, string _address);\\n\\n    /**\\n     * @dev Trigers to register multiple cross-chain addresses per chainId for user\\n     * @param _user Secured Finance user ETH address\\n     * @param _chainIds Array of chain ID number\\n     * @param _addresses Array of the target blockchain addresses\\n     *\\n     * @notice This function triggers by the Collateral Aggregator while user is registered in a system\\n     *\\n     */\\n    function updateAddresses(\\n        address _user,\\n        uint256[] memory _chainIds,\\n        string[] memory _addresses\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to register cross-chain address per chainId by user\\n     * @param _chainId Chain ID number\\n     * @param _address Target blockchain address\\n     *\\n     */\\n    function updateAddress(uint256 _chainId, string memory _address) external;\\n\\n    /**\\n     * @dev Trigers to register cross-chain address per chainId by user\\n     * @param _user Secured Finance user ETH address\\n     * @param _chainId Chain ID number\\n     * @param _address Target blockchain address\\n     *\\n     */\\n    function updateAddress(\\n        address _user,\\n        uint256 _chainId,\\n        string memory _address\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to get target blockchain address for a specific user.\\n     * @param _user Ethereum address of the Secured Finance user\\n     * @param _user Chain ID number\\n     */\\n    function getUserAddress(address _user, uint256 _chainId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ef89efa2bd508258da18e2ca2699cb07847d75d6df996cde56b8f6d524d7db8\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CcyAdded(bytes32 indexed ccy, string name, uint16 chainId, uint256 haircut);\\n    event CcyCollateralUpdate(bytes32 indexed ccy, bool isCollateral);\\n    event CcySupportUpdate(bytes32 indexed ccy, bool isSupported);\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n    event MinMarginUpdated(bytes32 indexed ccy, uint256 minMargin);\\n    event PriceFeedAdded(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n    event PriceFeedRemoved(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n\\n    function convertBulkToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH) external view returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256);\\n\\n    function getCurrencies(bytes32) external view returns (ProtocolTypes.Currency memory);\\n\\n    function getEthDecimals(bytes32) external view returns (uint8);\\n\\n    function getUsdDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getMinMargin(bytes32 _ccy) external view returns (uint256);\\n\\n    function getChainId(bytes32 _ccy) external view returns (uint16);\\n\\n    function isCollateral(bytes32) external view returns (bool);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        uint16 _chainId,\\n        address _ethPriceFeed,\\n        uint256 _haircut,\\n        address _tokenAddress\\n    ) external;\\n\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function updateCollateralSupport(bytes32 _ccy, bool _isSupported) external;\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported) external;\\n\\n    function updateMinMargin(bytes32 _ccy, uint256 _minMargin) external;\\n\\n    function getTokenAddresses(bytes32) external view returns (address);\\n}\\n\",\"keccak256\":\"0x0bad90929934b6a43200ae276697a9e428d47b119120ea81208778ced9abbe76\",\"license\":\"MIT\"},\"contracts/interfaces/IExternalAdapterTxResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IExternalAdapterTxResponse {\\n    struct FulfillData {\\n        string from;\\n        string to;\\n        uint256 value;\\n        uint256 timestamp;\\n        string txHash;\\n    }\\n}\\n\",\"keccak256\":\"0x2fde36d406ead00758aeccdf58fd8be1b32cf2fd3fd2061824d538bd06d4ab4c\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\nstruct Order {\\n    bytes32 ccy;\\n    uint256 term;\\n    ProtocolTypes.Side side;\\n    uint256 amount;\\n    uint256 rate;\\n}\\n\\ninterface ILendingMarketController {\\n    event LendingMarketCreated(bytes32 ccy, uint256 term, address indexed marketAddr);\\n    event LendingMarketsPaused(bytes32 ccy);\\n    event LendingMarketsUnpaused(bytes32 ccy);\\n\\n    function deployLendingMarket(bytes32 _ccy, uint256 _term) external returns (address market);\\n\\n    function getBorrowRatesForCcy(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getDiscountFactorsForCcy(bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256[] memory, uint256[] memory);\\n\\n    function getLendRatesForCcy(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getMidRatesForCcy(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getLendingMarket(bytes32, uint256) external view returns (address);\\n\\n    function pauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function placeBulkOrders(Order[] memory orders) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function getSupportedTerms(bytes32 _ccy) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x8c2a321d93fb14a1878ffb332e03d8201c4998ecca88b8862347855787ebf49c\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ILiquidations {\\n    event DealAddedToLiquidationQueue(address party0, address party1, bytes32 dealId);\\n    event DealRemovedFromLiquidationQueue(address party0, address party1, bytes32 dealId);\\n    event LiquidationAgentAdded(address indexed liquidationAgent);\\n    event LiquidationAgentRemoved(address indexed liquidationAgent);\\n    event OffsetUpdated(uint256 oldOffset, uint256 newOffset);\\n\\n    function addDealToLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external;\\n\\n    function addLiquidationAgent(address _liquidationAgent) external;\\n\\n    function liquidateDeals(\\n        address party0,\\n        address party1,\\n        bytes32[] memory dealIds\\n    ) external;\\n\\n    function liquidateDeals(address party0, address party1) external;\\n\\n    function getOffset() external view returns (uint256);\\n\\n    function removeDealFromLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external;\\n\\n    function removeLiquidationAgent(address _liquidationAgent) external;\\n\\n    function updateLiquidationOffset(uint256 _offset) external;\\n}\\n\",\"keccak256\":\"0x4e2784b0014ff688a60c4628cc1ebab63ca0aa40aa9949dbde6d53c69dbe3746\",\"license\":\"MIT\"},\"contracts/interfaces/IMarkToMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IMarkToMarket {\\n    function updatePV(bytes32 dealId) external;\\n\\n    function updatePVs(bytes32[] memory dealIds) external;\\n}\\n\",\"keccak256\":\"0xb100f8c173fda11136c5579306d99065752bb797bff6ffe91c64eee228ae2df9\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct Slot {\\n    uint256 totalPayment0;\\n    uint256 totalPayment1;\\n    uint256 netPayment;\\n    bool flipped;\\n    bytes32 paymentProof;\\n    address verificationParty;\\n    bool isSettled;\\n}\\n\\ninterface IPaymentAggregator {\\n    event RegisterPayment(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event VerifyPayment(\\n        address indexed verifier,\\n        address indexed counterparty,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment,\\n        bytes32 settlementId\\n    );\\n    event SettlePayment(\\n        address indexed verifier,\\n        address indexed counterparty,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        bytes32 settlementId\\n    );\\n    event RemovePayment(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n\\n    function registerPayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 dealId,\\n        uint256[] memory timestamps,\\n        uint256[] memory payments0,\\n        uint256[] memory payments1\\n    ) external;\\n\\n    function removePayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 dealId,\\n        uint256[] calldata timestamps,\\n        uint256[] calldata payments0,\\n        uint256[] calldata payments1\\n    ) external;\\n\\n    function verifyPayment(\\n        address verifier,\\n        address counterparty,\\n        bytes32 ccy,\\n        uint256 timestamp,\\n        uint256 payment,\\n        bytes32 settlementId\\n    ) external;\\n\\n    function isSettled(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 timestamp\\n    ) external view returns (bool status);\\n\\n    function getDealsFromSlot(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 slotPosition\\n    ) external view returns (bytes32[] memory);\\n\\n    // function getTimeSlotByDate(\\n    //     address party0,\\n    //     address party1,\\n    //     bytes32 ccy,\\n    //     uint256 year,\\n    //     uint256 month,\\n    //     uint256 day\\n    // ) external view returns (Slot memory timeSlot);\\n\\n    // function getTimeSlotBySlotId(\\n    //     address party0,\\n    //     address party1,\\n    //     bytes32 ccy,\\n    //     bytes32 slot\\n    // ) external view returns (Slot memory timeSlot);\\n\\n    function checkSettlementWindow(uint256 targetTime) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x626f4bb7d28a476b21c2bc18278a091f134fbd98a6e06e586cd63180184518f4\",\"license\":\"MIT\"},\"contracts/interfaces/IProductAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IProductAddressResolver {\\n    event RegisterProduct(bytes4 prefix, address indexed product, address indexed controller);\\n\\n    /**\\n     * @dev Triggers to register new product type in a address resolver\\n     * @param _prefix Bytes4 prefix for product type\\n     * @param _contract Product contract address\\n     * @param _controller Market controller address\\n     *\\n     * @notice Triggers only be contract owner\\n     * @notice Reverts on saving contract which is not supporting a common interface\\n     */\\n    function registerProduct(\\n        bytes4 _prefix,\\n        address _contract,\\n        address _controller\\n    ) external;\\n\\n    /**\\n     * @dev Triggers to register several product types in a address resolver\\n     * @param _prefixes Array of Bytes4 prefixes for each product type\\n     * @param _contracts Array of smart contract addresses for each product\\n     * @param _controllers Array of market controller addresses\\n     *\\n     * @notice Triggers only be contract owner\\n     * @notice Reverts on saving contract which is not supporting common interface\\n     */\\n    function registerProducts(\\n        bytes4[] calldata _prefixes,\\n        address[] calldata _contracts,\\n        address[] calldata _controllers\\n    ) external;\\n\\n    /**\\n     * @dev Triggers to get product address by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContract(bytes4 _prefix) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to get product addresses\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContracts() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Triggers to get product address by deal id\\n     * @param _dealId Product deal idenfitier\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContractByDealId(bytes32 _dealId) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to get market controller address by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     * @notice To work with the contract this address should be wrapped around IYieldCurve interface\\n     */\\n    function getControllerContract(bytes4 _prefix) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to get market controller address by deal id\\n     * @param _dealId Product deal idenfitier\\n     * @notice To work with the contract this address should be wrapped around IYieldCurve interface\\n     */\\n    function getControllerContractByDealId(bytes32 _dealId) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product is supported by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     */\\n    function isSupportedProduct(bytes4 _prefix) external view returns (bool);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product is supported by deal id.\\n     * @param _dealId Product deal idenfitier\\n     */\\n    function isSupportedProductByDealId(bytes32 _dealId) external view returns (bool);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product contract is registered.\\n     * @param _product Product contract address\\n     */\\n    function isRegisteredProductContract(address _product) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x44855f57913172a86e203a89d7713efe1ec39351a0830b0f35fac9ffa24ec770\",\"license\":\"MIT\"},\"contracts/interfaces/ISettlementEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.3. SEE SOURCE BELOW. !!\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IExternalAdapterTxResponse.sol\\\";\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ISettlementEngine {\\n    event CrosschainSettlementRequested(\\n        address payer,\\n        address receiver,\\n        uint16 chainId,\\n        uint256 timestamp,\\n        string txHash,\\n        bytes32 requestId\\n    );\\n    event CrosschainSettlementRequestFulfilled(\\n        string payer,\\n        string receiver,\\n        uint16 chainId,\\n        uint256 amount,\\n        uint256 timestamp,\\n        string txHash,\\n        bytes32 settlementId\\n    );\\n    event ExternalAdapterAdded(address indexed adapter, bytes32 ccy);\\n\\n    function addExternalAdapter(address _adapter, bytes32 _ccy) external;\\n\\n    function getExternalAdapters(bytes32) external view returns (address);\\n\\n    function fulfillSettlementRequest(\\n        bytes32 _requestId,\\n        IExternalAdapterTxResponse.FulfillData calldata _txData,\\n        bytes32 _ccy\\n    ) external;\\n\\n    function getVersion() external view returns (uint16);\\n\\n    function getSettlementRequests(bytes32)\\n        external\\n        view\\n        returns (ProtocolTypes.SettlementRequest memory);\\n\\n    function verifyPayment(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _payment,\\n        uint256 _timestamp,\\n        string calldata _txHash\\n    ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3888a41e40b8eb2cebf8557436b0f09286dfaeb08a3762a33c0a6ae0521f67a3\",\"license\":\"MIT\"},\"contracts/interfaces/ITermStructure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ITermStructure {\\n    event TermAdded(uint256 numDays);\\n    event ProductTermSupportUpdated(\\n        uint256 numDays,\\n        bytes4 product,\\n        bytes32 _ccy,\\n        bool isSupported\\n    );\\n    event TermSupportUpdated(uint256 numDays, bool isSupported);\\n\\n    function getDfFrac(uint256 _numDays) external view returns (uint256);\\n\\n    function getNumDays(uint256 _numDays) external view returns (uint256);\\n\\n    function getNumPayments(uint256 _numDays, uint8 frequency) external view returns (uint256);\\n\\n    function getTerm(uint256 _numDays, uint8 frequency)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getTermSchedule(uint256 _numDays, uint8 frequency)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isSupportedTerm(\\n        uint256 _numDays,\\n        bytes4 _product,\\n        bytes32 _ccy\\n    ) external view returns (bool);\\n\\n    function supportTerm(\\n        uint256 _numDays,\\n        bytes4[] memory _products,\\n        bytes32[] memory _currencies\\n    ) external;\\n\\n    function updateTermSupport(\\n        uint256 _numDays,\\n        bytes4 _product,\\n        bytes32 _ccy,\\n        bool _isSupported\\n    ) external;\\n\\n    function getTermsForProductAndCcy(\\n        bytes4 _product,\\n        bytes32 _ccy,\\n        bool sort\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x8509c4f927878626ee8cb73d0fb2daa0cf0a7c9869bb6241ccc180d0854544f4\",\"license\":\"MIT\"},\"contracts/libraries/AddressPacking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary AddressPacking {\\n    /**\\n     * @dev Packs two addresses into one hash to reduce the number of arguments\\n     * @param addr0 First address\\n     * @param addr1 Second address\\n     * @return Boolean to identify if addresses were flipped\\n     */\\n    function pack(address addr0, address addr1) internal pure returns (bytes32, bool) {\\n        require(addr0 != addr1, \\\"Identical addresses\\\");\\n        (address _addr0, address _addr1) = addr0 < addr1 ? (addr0, addr1) : (addr1, addr0);\\n        require(_addr0 != address(0), \\\"Invalid address\\\");\\n\\n        if (_addr0 != addr0) {\\n            return (keccak256(abi.encode(_addr0, _addr1)), true);\\n        } else {\\n            return (keccak256(abi.encode(_addr0, _addr1)), false);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x545d44428f420fcace95eecc5a7483a055154741753a4a4ff4c50b77c2a230fa\",\"license\":\"MIT\"},\"contracts/libraries/CloseOut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./AddressPacking.sol\\\";\\n\\nlibrary CloseOut {\\n    /**\\n     * @dev Payment keeps track of net payment for close out netting\\n     * and an indicator if party's obligations are flipped\\n     */\\n    struct Payment {\\n        uint256 netPayment;\\n        bool flipped;\\n        bool closed;\\n    }\\n\\n    /**\\n     * @dev Returns the close out payment between 2 counterparties\\n     * @param self The mapping with all close out netting payments\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main currency for the close out\\n     */\\n    function get(\\n        mapping(bytes32 => mapping(bytes32 => CloseOut.Payment)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy\\n    ) internal view returns (CloseOut.Payment memory payment) {\\n        (bytes32 packedAddrs, bool flipped) = AddressPacking.pack(party0, party1);\\n        payment = self[packedAddrs][ccy];\\n\\n        flipped ? payment.flipped = !payment.flipped : payment.flipped = payment.flipped;\\n    }\\n\\n    struct CloseOutLocalVars {\\n        bytes32 packedAddrs;\\n        bool flipped;\\n        uint256 payment0;\\n        uint256 payment1;\\n    }\\n\\n    /**\\n     * @dev Adds payments into the close out with provided information\\n     * @param self The mapping with all close out netting payments\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main currency for the close out\\n     * @param payment0 New payment obligated to the first counterparty\\n     * @param payment1 New payment obligated to the second counterparty\\n     * @return Boolean wether close out net amount was flipped during the update, if close out is flipped the net payment obligated to the second party and vice versa\\n     */\\n    function addPayments(\\n        mapping(bytes32 => mapping(bytes32 => CloseOut.Payment)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) internal returns (bool) {\\n        CloseOutLocalVars memory vars;\\n        (vars.packedAddrs, vars.flipped) = AddressPacking.pack(party0, party1);\\n\\n        if (vars.flipped) {\\n            vars.payment0 = payment1;\\n            vars.payment1 = payment0;\\n        } else {\\n            vars.payment0 = payment0;\\n            vars.payment1 = payment1;\\n        }\\n\\n        CloseOut.Payment storage closeOut = self[vars.packedAddrs][ccy];\\n\\n        if (closeOut.flipped) {\\n            if (vars.payment0 > closeOut.netPayment && vars.payment1 < vars.payment0) {\\n                closeOut.netPayment = vars.payment0 - closeOut.netPayment - vars.payment1;\\n                closeOut.flipped = false;\\n            } else {\\n                closeOut.netPayment = closeOut.netPayment + vars.payment1 - vars.payment0;\\n            }\\n        } else {\\n            if (vars.payment1 > closeOut.netPayment && vars.payment0 < vars.payment1) {\\n                closeOut.netPayment = vars.payment1 - closeOut.netPayment - vars.payment0;\\n                closeOut.flipped = true;\\n            } else {\\n                closeOut.netPayment = closeOut.netPayment + vars.payment0 - vars.payment1;\\n            }\\n        }\\n\\n        return closeOut.flipped;\\n    }\\n\\n    /**\\n     * @dev Removes payments from the close out with provided information\\n     * @param self The mapping with all close out netting payments\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main currency for the close out\\n     * @param payment0 Payment to remove for the first counterparty\\n     * @param payment1 Payment to remove for the second counterparty\\n     * @return Boolean wether close out net amount was flipped during the update, if close out is flipped the net payment obligated to the second party and vice versa\\n     */\\n    function removePayments(\\n        mapping(bytes32 => mapping(bytes32 => CloseOut.Payment)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) internal returns (bool) {\\n        CloseOutLocalVars memory vars;\\n        (vars.packedAddrs, vars.flipped) = AddressPacking.pack(party0, party1);\\n\\n        if (vars.flipped) {\\n            vars.payment0 = payment1;\\n            vars.payment1 = payment0;\\n        } else {\\n            vars.payment0 = payment0;\\n            vars.payment1 = payment1;\\n        }\\n\\n        CloseOut.Payment storage closeOut = self[vars.packedAddrs][ccy];\\n        uint256 paymentDelta = vars.payment0 > vars.payment1\\n            ? vars.payment0 - vars.payment1\\n            : vars.payment1 - vars.payment0;\\n        bool substraction;\\n\\n        if (closeOut.flipped) {\\n            substraction = vars.payment0 >= vars.payment1 ? false : true;\\n        } else {\\n            substraction = vars.payment0 >= vars.payment1 ? true : false;\\n        }\\n\\n        if (paymentDelta >= closeOut.netPayment && substraction) {\\n            closeOut.netPayment = paymentDelta - closeOut.netPayment;\\n            closeOut.flipped = !closeOut.flipped;\\n        } else {\\n            closeOut.netPayment = substraction\\n                ? closeOut.netPayment - paymentDelta\\n                : closeOut.netPayment + paymentDelta;\\n        }\\n\\n        return closeOut.flipped;\\n    }\\n\\n    /**\\n     * @dev Closes the close out payment if both parties don't have any trading activities anymore\\n     * @param self The mapping with all close out netting payments\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main currency for the close out\\n     */\\n    function close(\\n        mapping(bytes32 => mapping(bytes32 => CloseOut.Payment)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy\\n    ) internal {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(party0, party1);\\n        CloseOut.Payment storage closeOut = self[packedAddrs][ccy];\\n\\n        closeOut.closed = true;\\n    }\\n\\n    /**\\n     * @dev Clears the state of close out payment\\n     * @param self The mapping with all close out netting payments\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Main currency for the close out\\n     */\\n    function clear(\\n        mapping(bytes32 => mapping(bytes32 => CloseOut.Payment)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy\\n    ) internal {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(party0, party1);\\n        delete self[packedAddrs][ccy];\\n    }\\n}\\n\",\"keccak256\":\"0x4da5372b3795c3b25d0fee557c17a960a8863d482d10356579d2c1e857db5d0b\",\"license\":\"MIT\"},\"contracts/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant CLOSE_OUT_NETTING = \\\"CloseOutNetting\\\";\\n    bytes32 internal constant COLLATERAL_AGGREGATOR = \\\"CollateralAggregator\\\";\\n    bytes32 internal constant COLLATERAL_VAULT = \\\"CollateralVault\\\";\\n    bytes32 internal constant CROSSCHAIN_ADDRESS_RESOLVER = \\\"CrosschainAddressResolver\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant LIQUIDATIONS = \\\"Liquidations\\\";\\n    bytes32 internal constant MARK_TO_MARKET = \\\"MarkToMarket\\\";\\n    bytes32 internal constant PAYMENT_AGGREGATOR = \\\"PaymentAggregator\\\";\\n    bytes32 internal constant PRODUCT_ADDRESS_RESOLVER = \\\"ProductAddressResolver\\\";\\n    bytes32 internal constant SETTLEMENT_ENGINE = \\\"SettlementEngine\\\";\\n    bytes32 internal constant TERM_STRUCTURE = \\\"TermStructure\\\";\\n}\\n\",\"keccak256\":\"0x939f50a87aa51db235c78c3c224edc9123271a5b44974e13557e4590958e83df\",\"license\":\"MIT\"},\"contracts/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../libraries/Contracts.sol\\\";\\nimport \\\"../interfaces/IAddressResolver.sol\\\";\\nimport \\\"../interfaces/ICloseOutNetting.sol\\\";\\nimport \\\"../interfaces/ICollateralAggregatorV2.sol\\\";\\nimport \\\"../interfaces/ICollateralVault.sol\\\";\\nimport \\\"../interfaces/ICrosschainAddressResolver.sol\\\";\\nimport \\\"../interfaces/ICurrencyController.sol\\\";\\nimport \\\"../interfaces/IMarkToMarket.sol\\\";\\nimport \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport \\\"../interfaces/ILiquidations.sol\\\";\\nimport \\\"../interfaces/IPaymentAggregator.sol\\\";\\nimport \\\"../interfaces/IProductAddressResolver.sol\\\";\\nimport \\\"../interfaces/ISettlementEngine.sol\\\";\\nimport \\\"../interfaces/ITermStructure.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    IAddressResolver public resolver;\\n\\n    mapping(bytes32 => address) private addressCache;\\n\\n    modifier onlyAcceptedContracts() {\\n        require(isAcceptedContract(msg.sender), \\\"Only Accepted Contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns required contract names in this contract\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @dev Returns contract names that can call this contract.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        require(address(resolver) == address(0), \\\"resolver registered already\\\");\\n        resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function closeOutNetting() internal view returns (ICloseOutNetting) {\\n        return ICloseOutNetting(getAddress(Contracts.CLOSE_OUT_NETTING));\\n    }\\n\\n    function collateralAggregator() internal view returns (ICollateralAggregator) {\\n        return ICollateralAggregator(getAddress(Contracts.COLLATERAL_AGGREGATOR));\\n    }\\n\\n    function collateralVault() internal view returns (ICollateralVault) {\\n        return ICollateralVault(getAddress(Contracts.COLLATERAL_VAULT));\\n    }\\n\\n    function crosschainAddressResolver() internal view returns (ICrosschainAddressResolver) {\\n        return ICrosschainAddressResolver(getAddress(Contracts.CROSSCHAIN_ADDRESS_RESOLVER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function markToMarket() internal view returns (IMarkToMarket) {\\n        return IMarkToMarket(getAddress(Contracts.MARK_TO_MARKET));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function liquidations() internal view returns (ILiquidations) {\\n        return ILiquidations(getAddress(Contracts.LIQUIDATIONS));\\n    }\\n\\n    function paymentAggregator() internal view returns (IPaymentAggregator) {\\n        return IPaymentAggregator(getAddress(Contracts.PAYMENT_AGGREGATOR));\\n    }\\n\\n    function productAddressResolver() internal view returns (IProductAddressResolver) {\\n        return IProductAddressResolver(getAddress(Contracts.PRODUCT_ADDRESS_RESOLVER));\\n    }\\n\\n    function settlementEngine() internal view returns (ISettlementEngine) {\\n        return ISettlementEngine(getAddress(Contracts.SETTLEMENT_ENGINE));\\n    }\\n\\n    function termStructure() internal view returns (ITermStructure) {\\n        return ITermStructure(getAddress(Contracts.TERM_STRUCTURE));\\n    }\\n}\\n\",\"keccak256\":\"0xa11e12f5ac8a1710ad3f16fb7d867e615ed13dd98324eea2f7eb36c00b21c2fb\",\"license\":\"MIT\"},\"contracts/storages/CloseOutNettingStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../libraries/CloseOut.sol\\\";\\n\\nlibrary CloseOutNettingStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.closeOutNetting\\\");\\n\\n    struct Storage {\\n        // Mapping structure for storing Close Out payments\\n        mapping(bytes32 => mapping(bytes32 => CloseOut.Payment)) closeOuts;\\n        // Mapping structure for storing default boolean per address\\n        mapping(address => bool) isDefaulted;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x16ecd00098897954164ace20772200bfee45e2358e16835143843f093c023364\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant BP = 10000; // basis point\\n    uint256 public constant PCT = 10000; // percentage point in basis\\n    uint256 public constant PENALTYLEVEL = 1000; // 10% settlement failure penalty\\n    uint256 public constant MKTMAKELEVEL = 2000; // 20% for market making\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Loan common types\\n    enum LoanState {\\n        REGISTERED,\\n        WORKING,\\n        DUE,\\n        PAST_DUE,\\n        CLOSED,\\n        TERMINATED\\n    }\\n    enum DFTERM {\\n        _3m,\\n        _6m,\\n        _1y,\\n        _2y,\\n        _3y,\\n        _4y,\\n        _5y\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n\\n    // FXMarket common types\\n    enum CcyPair {\\n        FILETH,\\n        FILUSDC,\\n        ETHUSDC,\\n        BTCUSDC,\\n        BTCETH,\\n        BTCFIL\\n    }\\n    enum FXSide {\\n        BID,\\n        OFFER\\n    }\\n\\n    enum PaymentFrequency {\\n        ANNUAL,\\n        SEMI_ANNUAL,\\n        QUARTERLY,\\n        MONTHLY,\\n        FORWARD\\n    }\\n\\n    struct Currency {\\n        bool isSupported;\\n        string name;\\n        uint16 chainId; // chain id for address conversion\\n    }\\n\\n    struct SettlementRequest {\\n        address payer;\\n        address receiver;\\n        uint16 chainId;\\n        uint256 timestamp;\\n        string txHash;\\n    }\\n}\\n\",\"keccak256\":\"0x6419e0bcd07b8ff86e0ffce1e7f16e9a38a470f0ab2f697af0f5234cb943303f\",\"license\":\"MIT\"},\"contracts/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9f02e4ae76f34a28299e4b6a10490ebf99b9c9a8454765bff7977cc4f3d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061118f806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638c9165b0116100665780638c9165b014610143578063c4d66de814610156578063ca2da52914610169578063e09976591461012e578063ebbb7de91461017c57600080fd5b806304f3bcec146100a357806329985e5a146100d35780632af64bd3146100dd5780633a6d7596146100f55780633d03b9da1461012e575b600080fd5b6000546100b6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100db6101c7565b005b6100e561035a565b60405190151581526020016100ca565b610108610103366004610f05565b610478565b6040805182518152602080840151151590820152918101511515908201526060016100ca565b6101366104c9565b6040516100ca9190610f46565b6100db610151366004610f8a565b610522565b6100db610164366004610fdb565b6105fe565b6100db610177366004610f8a565b610709565b6100e561018a366004610fdb565b6001600160a01b031660009081527f1ae7b5618399ecc2c5d3c14c1cb4607dd7fc1a97fd1515c3f885dbd5490e5493602052604090205460ff1690565b60006101d16104c9565b905060005b81518110156103565760008282815181106101f3576101f3610fff565b6020026020010151905060008060009054906101000a90046001600160a01b03166001600160a01b0316636795dbcd838460405160200161026091907f5265736f6c766572206d697373696e67207461726765743a20000000000000008152601981019190915260390190565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161028c929190611062565b60206040518083038186803b1580156102a457600080fd5b505afa1580156102b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102dc919061107b565b60008381526001602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251868152918201529192507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68910160405180910390a15050808061034e906110ae565b9150506101d6565b5050565b6000806103656104c9565b905060005b815181101561046f57600082828151811061038757610387610fff565b60209081029190910181015160008181526001909252604080832054925490516321f8a72160e01b8152600481018390529193506001600160a01b039283169216906321f8a7219060240160206040518083038186803b1580156103ea57600080fd5b505afa1580156103fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610422919061107b565b6001600160a01b031614158061044d57506000818152600160205260409020546001600160a01b0316155b1561045c576000935050505090565b5080610467816110ae565b91505061036a565b50600191505090565b60408051606081018252600080825260208201819052918101919091526104c17f1ae7b5618399ecc2c5d3c14c1cb4607dd7fc1a97fd1515c3f885dbd5490e54928585856107d5565b949350505050565b60408051600180825281830190925260609160208083019080368337019050509050702830bcb6b2b73a20b3b3b932b3b0ba37b960791b8160008151811061051357610513610fff565b60200260200101818152505090565b61052b3361087a565b6105765760405162461bcd60e51b81526020600482015260176024820152764f6e6c7920416363657074656420436f6e74726163747360481b60448201526064015b60405180910390fd5b6105a47f1ae7b5618399ecc2c5d3c14c1cb4607dd7fc1a97fd1515c3f885dbd5490e549286868686866108f4565b5060408051848152602081018490529081018290526001600160a01b0380861691908716907f96dc6c2618ed726615771c9e1252ef89239f3f1fc009126b10580edfcf81bf59906060015b60405180910390a35050505050565b600061060a6001610a71565b90508015610622576002805461ff0019166101001790555b60006106557f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614156106b75760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b606482015260840161056d565b6106c082610afb565b8015610356576002805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6107123361087a565b6107585760405162461bcd60e51b81526020600482015260176024820152764f6e6c7920416363657074656420436f6e74726163747360481b604482015260640161056d565b6107867f1ae7b5618399ecc2c5d3c14c1cb4607dd7fc1a97fd1515c3f885dbd5490e54928686868686610b76565b5060408051848152602081018490529081018290526001600160a01b0380861691908716907f4aaf456318661525ee0231fc2662025a6af97cd168232ca86a78d50a6d5120f5906060016105ef565b6040805160608101825260008082526020820181905291810182905290806107fd8686610d01565b600082815260208a8152604080832089845282529182902082516060810184528154815260019091015460ff808216151593830193909352610100900490911615159181019190915294509092509050806108635760208301805115159081905261086f565b60208301805115908190525b505050949350505050565b6000806108856104c9565b905060005b81518110156108ea576108b58282815181106108a8576108a8610fff565b6020026020010151610e71565b6001600160a01b0316846001600160a01b031614156108d8575060019392505050565b806108e2816110ae565b91505061088a565b5060009392505050565b60408051608081018252600080825260208201819052918101829052606081018290526109218787610d01565b1580156020840152908252610943576040810183905260608101849052610952565b60408101849052606081018390525b805160009081526020898152604080832088845290915280822060608401519184015190929110610996578260400151836060015161099191906110c9565b6109aa565b826060015183604001516109aa91906110c9565b600183015490915060009060ff16156109de578360600151846040015110156109d45760016109d7565b60005b90506109fb565b8360600151846040015110156109f55760006109f8565b60015b90505b82548210801590610a095750805b15610a35578254610a1a90836110c9565b835560018301805460ff19811660ff90911615179055610a5c565b80610a4c578254610a479083906110e0565b610a59565b8254610a599083906110c9565b83555b50506001015460ff1698975050505050505050565b600254600090610100900460ff1615610aba578160ff166001148015610a965750303b155b610ab25760405162461bcd60e51b815260040161056d906110f8565b506000919050565b60025460ff808416911610610ae15760405162461bcd60e51b815260040161056d906110f8565b506002805460ff191660ff92909216919091179055600190565b6000546001600160a01b031615610b545760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c72656164790000000000604482015260640161056d565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6040805160808101825260008082526020820181905291810182905260608101829052610ba38787610d01565b1580156020840152908252610bc5576040810183905260608101849052610bd4565b60408101849052606081018390525b80516000908152602089815260408083208884529091529020600181015460ff1615610c745780546040830151118015610c15575081604001518260600151105b15610c4d57606082015181546040840151610c3091906110c9565b610c3a91906110c9565b815560018101805460ff19169055610cee565b604082015160608301518254610c6391906110e0565b610c6d91906110c9565b8155610cee565b80546060830151118015610c8f575081606001518260400151105b15610ccb57604082015181546060840151610caa91906110c9565b610cb491906110c9565b81556001808201805460ff19169091179055610cee565b606082015160408301518254610ce191906110e0565b610ceb91906110c9565b81555b6001015460ff1698975050505050505050565b600080826001600160a01b0316846001600160a01b03161415610d5c5760405162461bcd60e51b81526020600482015260136024820152724964656e746963616c2061646472657373657360681b604482015260640161056d565b600080846001600160a01b0316866001600160a01b031610610d7f578486610d82565b85855b90925090506001600160a01b038216610dcf5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640161056d565b856001600160a01b0316826001600160a01b031614610e2b57604080516001600160a01b038085166020830152831691810191909152606001604051602081830303815290604052805190602001206001935093505050610e6a565b604080516001600160a01b0380851660208301528316918101919091526060016040516020818303038152906040528051906020012060009350935050505b9250929050565b600081815260016020908152604080832054905170026b4b9b9b4b7339030b2323932b9b99d1607d1b92810192909252603182018490526001600160a01b0316908115159060510160405160208183030381529060405290610ee65760405162461bcd60e51b815260040161056d9190611146565b5092915050565b6001600160a01b0381168114610f0257600080fd5b50565b600080600060608486031215610f1a57600080fd5b8335610f2581610eed565b92506020840135610f3581610eed565b929592945050506040919091013590565b6020808252825182820181905260009190848201906040850190845b81811015610f7e57835183529284019291840191600101610f62565b50909695505050505050565b600080600080600060a08688031215610fa257600080fd5b8535610fad81610eed565b94506020860135610fbd81610eed565b94979496505050506040830135926060810135926080909101359150565b600060208284031215610fed57600080fd5b8135610ff881610eed565b9392505050565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b8181101561103b5760208185018101518683018201520161101f565b8181111561104d576000602083870101525b50601f01601f19169290920160200192915050565b8281526040602082015260006104c16040830184611015565b60006020828403121561108d57600080fd5b8151610ff881610eed565b634e487b7160e01b600052601160045260246000fd5b60006000198214156110c2576110c2611098565b5060010190565b6000828210156110db576110db611098565b500390565b600082198211156110f3576110f3611098565b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b602081526000610ff8602083018461101556fea26469706673582212205feb2ae3fa46090ef8005b3feaf89452d097079addfcd063a1b05e2abf6dd54b64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80638c9165b0116100665780638c9165b014610143578063c4d66de814610156578063ca2da52914610169578063e09976591461012e578063ebbb7de91461017c57600080fd5b806304f3bcec146100a357806329985e5a146100d35780632af64bd3146100dd5780633a6d7596146100f55780633d03b9da1461012e575b600080fd5b6000546100b6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100db6101c7565b005b6100e561035a565b60405190151581526020016100ca565b610108610103366004610f05565b610478565b6040805182518152602080840151151590820152918101511515908201526060016100ca565b6101366104c9565b6040516100ca9190610f46565b6100db610151366004610f8a565b610522565b6100db610164366004610fdb565b6105fe565b6100db610177366004610f8a565b610709565b6100e561018a366004610fdb565b6001600160a01b031660009081527f1ae7b5618399ecc2c5d3c14c1cb4607dd7fc1a97fd1515c3f885dbd5490e5493602052604090205460ff1690565b60006101d16104c9565b905060005b81518110156103565760008282815181106101f3576101f3610fff565b6020026020010151905060008060009054906101000a90046001600160a01b03166001600160a01b0316636795dbcd838460405160200161026091907f5265736f6c766572206d697373696e67207461726765743a20000000000000008152601981019190915260390190565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161028c929190611062565b60206040518083038186803b1580156102a457600080fd5b505afa1580156102b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102dc919061107b565b60008381526001602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251868152918201529192507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68910160405180910390a15050808061034e906110ae565b9150506101d6565b5050565b6000806103656104c9565b905060005b815181101561046f57600082828151811061038757610387610fff565b60209081029190910181015160008181526001909252604080832054925490516321f8a72160e01b8152600481018390529193506001600160a01b039283169216906321f8a7219060240160206040518083038186803b1580156103ea57600080fd5b505afa1580156103fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610422919061107b565b6001600160a01b031614158061044d57506000818152600160205260409020546001600160a01b0316155b1561045c576000935050505090565b5080610467816110ae565b91505061036a565b50600191505090565b60408051606081018252600080825260208201819052918101919091526104c17f1ae7b5618399ecc2c5d3c14c1cb4607dd7fc1a97fd1515c3f885dbd5490e54928585856107d5565b949350505050565b60408051600180825281830190925260609160208083019080368337019050509050702830bcb6b2b73a20b3b3b932b3b0ba37b960791b8160008151811061051357610513610fff565b60200260200101818152505090565b61052b3361087a565b6105765760405162461bcd60e51b81526020600482015260176024820152764f6e6c7920416363657074656420436f6e74726163747360481b60448201526064015b60405180910390fd5b6105a47f1ae7b5618399ecc2c5d3c14c1cb4607dd7fc1a97fd1515c3f885dbd5490e549286868686866108f4565b5060408051848152602081018490529081018290526001600160a01b0380861691908716907f96dc6c2618ed726615771c9e1252ef89239f3f1fc009126b10580edfcf81bf59906060015b60405180910390a35050505050565b600061060a6001610a71565b90508015610622576002805461ff0019166101001790555b60006106557f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614156106b75760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b606482015260840161056d565b6106c082610afb565b8015610356576002805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6107123361087a565b6107585760405162461bcd60e51b81526020600482015260176024820152764f6e6c7920416363657074656420436f6e74726163747360481b604482015260640161056d565b6107867f1ae7b5618399ecc2c5d3c14c1cb4607dd7fc1a97fd1515c3f885dbd5490e54928686868686610b76565b5060408051848152602081018490529081018290526001600160a01b0380861691908716907f4aaf456318661525ee0231fc2662025a6af97cd168232ca86a78d50a6d5120f5906060016105ef565b6040805160608101825260008082526020820181905291810182905290806107fd8686610d01565b600082815260208a8152604080832089845282529182902082516060810184528154815260019091015460ff808216151593830193909352610100900490911615159181019190915294509092509050806108635760208301805115159081905261086f565b60208301805115908190525b505050949350505050565b6000806108856104c9565b905060005b81518110156108ea576108b58282815181106108a8576108a8610fff565b6020026020010151610e71565b6001600160a01b0316846001600160a01b031614156108d8575060019392505050565b806108e2816110ae565b91505061088a565b5060009392505050565b60408051608081018252600080825260208201819052918101829052606081018290526109218787610d01565b1580156020840152908252610943576040810183905260608101849052610952565b60408101849052606081018390525b805160009081526020898152604080832088845290915280822060608401519184015190929110610996578260400151836060015161099191906110c9565b6109aa565b826060015183604001516109aa91906110c9565b600183015490915060009060ff16156109de578360600151846040015110156109d45760016109d7565b60005b90506109fb565b8360600151846040015110156109f55760006109f8565b60015b90505b82548210801590610a095750805b15610a35578254610a1a90836110c9565b835560018301805460ff19811660ff90911615179055610a5c565b80610a4c578254610a479083906110e0565b610a59565b8254610a599083906110c9565b83555b50506001015460ff1698975050505050505050565b600254600090610100900460ff1615610aba578160ff166001148015610a965750303b155b610ab25760405162461bcd60e51b815260040161056d906110f8565b506000919050565b60025460ff808416911610610ae15760405162461bcd60e51b815260040161056d906110f8565b506002805460ff191660ff92909216919091179055600190565b6000546001600160a01b031615610b545760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c72656164790000000000604482015260640161056d565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6040805160808101825260008082526020820181905291810182905260608101829052610ba38787610d01565b1580156020840152908252610bc5576040810183905260608101849052610bd4565b60408101849052606081018390525b80516000908152602089815260408083208884529091529020600181015460ff1615610c745780546040830151118015610c15575081604001518260600151105b15610c4d57606082015181546040840151610c3091906110c9565b610c3a91906110c9565b815560018101805460ff19169055610cee565b604082015160608301518254610c6391906110e0565b610c6d91906110c9565b8155610cee565b80546060830151118015610c8f575081606001518260400151105b15610ccb57604082015181546060840151610caa91906110c9565b610cb491906110c9565b81556001808201805460ff19169091179055610cee565b606082015160408301518254610ce191906110e0565b610ceb91906110c9565b81555b6001015460ff1698975050505050505050565b600080826001600160a01b0316846001600160a01b03161415610d5c5760405162461bcd60e51b81526020600482015260136024820152724964656e746963616c2061646472657373657360681b604482015260640161056d565b600080846001600160a01b0316866001600160a01b031610610d7f578486610d82565b85855b90925090506001600160a01b038216610dcf5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640161056d565b856001600160a01b0316826001600160a01b031614610e2b57604080516001600160a01b038085166020830152831691810191909152606001604051602081830303815290604052805190602001206001935093505050610e6a565b604080516001600160a01b0380851660208301528316918101919091526060016040516020818303038152906040528051906020012060009350935050505b9250929050565b600081815260016020908152604080832054905170026b4b9b9b4b7339030b2323932b9b99d1607d1b92810192909252603182018490526001600160a01b0316908115159060510160405160208183030381529060405290610ee65760405162461bcd60e51b815260040161056d9190611146565b5092915050565b6001600160a01b0381168114610f0257600080fd5b50565b600080600060608486031215610f1a57600080fd5b8335610f2581610eed565b92506020840135610f3581610eed565b929592945050506040919091013590565b6020808252825182820181905260009190848201906040850190845b81811015610f7e57835183529284019291840191600101610f62565b50909695505050505050565b600080600080600060a08688031215610fa257600080fd5b8535610fad81610eed565b94506020860135610fbd81610eed565b94979496505050506040830135926060810135926080909101359150565b600060208284031215610fed57600080fd5b8135610ff881610eed565b9392505050565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b8181101561103b5760208185018101518683018201520161101f565b8181111561104d576000602083870101525b50601f01601f19169290920160200192915050565b8281526040602082015260006104c16040830184611015565b60006020828403121561108d57600080fd5b8151610ff881610eed565b634e487b7160e01b600052601160045260246000fd5b60006000198214156110c2576110c2611098565b5060010190565b6000828210156110db576110db611098565b500390565b600082198211156110f3576110f3611098565b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b602081526000610ff8602083018461101556fea26469706673582212205feb2ae3fa46090ef8005b3feaf89452d097079addfcd063a1b05e2abf6dd54b64736f6c63430008090033",
  "implementation": "0xb893472e4C8e7b4FaBd4842fdDb9B7AA6C7Ab004",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptedContracts()": {
        "details": "Returns contract names that can call this contract."
      },
      "addPayments(address,address,bytes32,uint256,uint256)": {
        "details": "Triggers to add total payments during the registration of the deal in close out netting",
        "params": {
          "ccy": "Main settlement currency of the deal",
          "party0": "First counterparty address",
          "party1": "Second counterparty address",
          "payment0": "Aggregated payment for first counterparty",
          "payment1": "Aggregated payment for second counterparty"
        }
      },
      "checkDefault(address)": {
        "details": "External function to check if `_party` is in default"
      },
      "getCloseOutPayment(address,address,bytes32)": {
        "details": "Returns the close out payment between two counterparties",
        "params": {
          "ccy": "Main payment settlement currency",
          "party0": "First counterparty address",
          "party1": "Second counterparty address"
        }
      },
      "initialize(address)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController"
      },
      "removePayments(address,address,bytes32,uint256,uint256)": {
        "details": "Triggers to remove aggregated payments during the liquidation of the deal in close out netting",
        "params": {
          "ccy": "Main settlement currency of the deal",
          "party0": "First counterparty address",
          "party1": "Second counterparty address",
          "payment0": "Aggregated payment for first counterparty",
          "payment1": "Aggregated payment for second counterparty"
        }
      },
      "requiredContracts()": {
        "details": "Returns required contract names in this contract"
      }
    },
    "title": "Close Out Netting contract is used in close out operations Close out is the process while one of the counterparties declared as defaulted party and all deals should be terminated Contract linked to all product based contracts (ex. Loan, Swap, etc), and Collateral Aggregator contract.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPayments(address,address,bytes32,uint256,uint256)": {
        "notice": "Executed only be PaymentAggregator contract"
      },
      "initialize(address)": {
        "notice": "Initializes the contract."
      },
      "removePayments(address,address,bytes32,uint256,uint256)": {
        "notice": "Executed only be PaymentAggregator contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 35714,
        "contract": "contracts/CloseOutNetting.sol:CloseOutNetting",
        "label": "resolver",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAddressResolver)23276"
      },
      {
        "astId": 35718,
        "contract": "contracts/CloseOutNetting.sol:CloseOutNetting",
        "label": "addressCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2833,
        "contract": "contracts/CloseOutNetting.sol:CloseOutNetting",
        "label": "_initialized",
        "offset": 0,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 2836,
        "contract": "contracts/CloseOutNetting.sol:CloseOutNetting",
        "label": "_initializing",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAddressResolver)23276": {
        "encoding": "inplace",
        "label": "contract IAddressResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}