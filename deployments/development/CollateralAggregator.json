{
  "address": "0x146eDe476f2cE8Dc9FCEaD69075114194f2D08d5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "Register",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReleaseUnsettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UseUnsettledCollateral",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralParameters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "marginCallThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "autoLiquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationPriceRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minCollateralRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getCoverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalUnsettledExposure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getUnsettledCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUnusedCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getWithdrawableCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marginCallThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_autoLiquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationPriceRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateralRate",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isCovered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isRegisteredUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "releaseUnsettledCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marginCallThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_autoLiquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationPriceRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateralRate",
          "type": "uint256"
        }
      ],
      "name": "setCollateralParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "useUnsettledCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7a2d61362e3323a1aeb94b65a68eda23d2883295bd2955812c6b6206a9ad98de",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x3972e15e8FAF2414D74e650dC01c7251987f3402",
    "transactionIndex": 18,
    "gasUsed": "1686374",
    "logsBloom": "0x
    "blockHash": "0x12b6a8a4d620a9fc5b901af8f9939cf74b9bb2a5fcfdf3d3d9ee728ae1a8db90",
    "transactionHash": "0x7a2d61362e3323a1aeb94b65a68eda23d2883295bd2955812c6b6206a9ad98de",
    "logs": [],
    "blockNumber": 11343725,
    "cumulativeGasUsed": "3623659",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "d4bdd79c132b5ae2c41e287553dc1e3d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReleaseUnsettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UseUnsettledCollateral\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marginCallThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoLiquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationPriceRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalUnsettledExposure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getUnsettledCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUnusedCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marginCallThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autoLiquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationPriceRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateralRate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isCovered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isRegisteredUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseUnsettledCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marginCallThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autoLiquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationPriceRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateralRate\",\"type\":\"uint256\"}],\"name\":\"setCollateralParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"useUnsettledCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The deposited amount is managed in the CollateralVault contract now. It will be merged to this contract in the future.\",\"kind\":\"dev\",\"methods\":{\"acceptedContracts()\":{\"details\":\"The contact name listed in this method is also needed to be listed `requiredContracts` method.\"},\"getCollateralParameters()\":{\"returns\":{\"autoLiquidationThresholdRate\":\" The rate used as the auto liquidation threshold\",\"liquidationPriceRate\":\"The rate used as the liquidation price\",\"marginCallThresholdRate\":\"The rate used as the margin call threshold\",\"minCollateralRate\":\"The rate used minima collateral\"}},\"getCoverage(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The rate of collateral used\"}},\"getTotalUnsettledExposure(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"Total unsettled exposure\"}},\"getUnsettledCollateral(address,bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"Unsettled exposure\"}},\"getUnusedCollateral(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The total amount of unused collateral\"}},\"getWithdrawableCollateral(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"Maximum amount of ETH that can be withdrawn\"}},\"initialize(address,address,uint256,uint256,uint256,uint256)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController.\",\"params\":{\"_autoLiquidationThresholdRate\":\"The rate used as the auto liquidation threshold\",\"_liquidationPriceRate\":\"The rate used as the liquidation price\",\"_marginCallThresholdRate\":\"The rate used as the margin call threshold\",\"_minCollateralRate\":\"The rate used minima collateral\",\"_owner\":\"The address of the contract owner\",\"_resolver\":\"The address of the Address Resolver contract\"}},\"isCovered(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The boolean if the collateral has sufficient coverage or not\"}},\"isRegisteredUser(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The boolean if the user is registered or not\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"releaseUnsettledCollateral(address,bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to be unlocked from unsettled exposure in a specified currency\",\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requiredContracts()\":{\"details\":\"The contract name list is in `./libraries/Contracts.sol`.\"},\"setCollateralParameters(uint256,uint256,uint256,uint256)\":{\"params\":{\"_autoLiquidationThresholdRate\":\"Auto liquidation threshold rate\",\"_liquidationPriceRate\":\"Liquidation price rate\",\"_marginCallThresholdRate\":\"Margin call threshold ratio\",\"_minCollateralRate\":\"Minimal collateral rate\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"useUnsettledCollateral(address,bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to be locked in a specified currency\",\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptedContracts()\":{\"notice\":\"Returns contract names that can call this contract.\"},\"getCollateralParameters()\":{\"notice\":\"Gets parameters related to collateral.\"},\"getCoverage(address)\":{\"notice\":\"Gets the rate of collateral used.\"},\"getTotalUnsettledExposure(address)\":{\"notice\":\"Gets total unsettled exposure in all currencies.\"},\"getUnsettledCollateral(address,bytes32)\":{\"notice\":\"Gets unsettled exposure for the selected currency\"},\"getUnusedCollateral(address)\":{\"notice\":\"Gets the total amount of unused collateral\"},\"getWithdrawableCollateral(address)\":{\"notice\":\"Gets the maximum amount of ETH that can be withdrawn from user collateral.\"},\"initialize(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Initializes the contract.\"},\"isCovered(address)\":{\"notice\":\"Gets if the collateral has enough coverage.\"},\"isRegisteredUser(address)\":{\"notice\":\"Gets if the user is registered.\"},\"register()\":{\"notice\":\"Register user.\"},\"releaseUnsettledCollateral(address,bytes32,uint256)\":{\"notice\":\"Releases the amount of unsettled exposure for the selected currency.\"},\"requiredContracts()\":{\"notice\":\"Returns the contract names used in this contract.\"},\"setCollateralParameters(uint256,uint256,uint256,uint256)\":{\"notice\":\"Sets main collateral parameters this function solves the issue of frontrunning during parameters tuning.Triggers only be contract owner\"},\"useUnsettledCollateral(address,bytes32,uint256)\":{\"notice\":\"Locks unsettled collateral for the selected currency.\"}},\"notice\":\"Implements the management of the collateral in each currency for users. This contract manages the following data related to the collateral. - Deposited amount as the collateral - Unsettled collateral amount used by order - Parameters related to the collateral   - Margin Call Threshold Rate   - Auto Liquidation Threshold Rate   - Liquidation Price Rate   - Min Collateral Rate\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CollateralAggregator.sol\":\"CollateralAggregator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/CollateralAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n// libraries\\nimport {Contracts} from \\\"./libraries/Contracts.sol\\\";\\nimport {CollateralParametersHandler} from \\\"./libraries/CollateralParametersHandler.sol\\\";\\n// interfaces\\nimport {ICollateralAggregator} from \\\"./interfaces/ICollateralAggregator.sol\\\";\\n// mixins\\nimport {MixinAddressResolver} from \\\"./mixins/MixinAddressResolver.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"./types/ProtocolTypes.sol\\\";\\n// utils\\nimport {Ownable} from \\\"./utils/Ownable.sol\\\";\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\n// storages\\nimport {CollateralAggregatorStorage as Storage} from \\\"./storages/CollateralAggregatorStorage.sol\\\";\\n\\n/**\\n * @notice Implements the management of the collateral in each currency for users.\\n *\\n * This contract manages the following data related to the collateral.\\n * - Deposited amount as the collateral\\n * - Unsettled collateral amount used by order\\n * - Parameters related to the collateral\\n *   - Margin Call Threshold Rate\\n *   - Auto Liquidation Threshold Rate\\n *   - Liquidation Price Rate\\n *   - Min Collateral Rate\\n *\\n * @dev The deposited amount is managed in the CollateralVault contract now. It will be merged to this contract\\n * in the future.\\n */\\ncontract CollateralAggregator is ICollateralAggregator, MixinAddressResolver, Ownable, Proxyable {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    /**\\n     * @notice Modifier to check if user hasn't been registered yet\\n     * @param _user User's address\\n     */\\n    modifier nonRegisteredUser(address _user) {\\n        require(!Storage.slot().isRegistered[_user], \\\"User exists\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\\n     * @param _owner The address of the contract owner\\n     * @param _resolver The address of the Address Resolver contract\\n     * @param _marginCallThresholdRate The rate used as the margin call threshold\\n     * @param _autoLiquidationThresholdRate  The rate used as the auto liquidation threshold\\n     * @param _liquidationPriceRate The rate used as the liquidation price\\n     * @param _minCollateralRate The rate used minima collateral\\n     */\\n    function initialize(\\n        address _owner,\\n        address _resolver,\\n        uint256 _marginCallThresholdRate,\\n        uint256 _autoLiquidationThresholdRate,\\n        uint256 _liquidationPriceRate,\\n        uint256 _minCollateralRate\\n    ) public initializer onlyProxy {\\n        _transferOwnership(_owner);\\n        registerAddressResolver(_resolver);\\n\\n        CollateralParametersHandler.setCollateralParameters(\\n            _marginCallThresholdRate,\\n            _autoLiquidationThresholdRate,\\n            _liquidationPriceRate,\\n            _minCollateralRate\\n        );\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](3);\\n        contracts[0] = Contracts.COLLATERAL_VAULT;\\n        contracts[1] = Contracts.CURRENCY_CONTROLLER;\\n        contracts[2] = Contracts.LENDING_MARKET_CONTROLLER;\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](1);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n    }\\n\\n    /**\\n     * @notice Gets if the collateral has enough coverage.\\n     * @param _user User's address\\n     * @return The boolean if the collateral has sufficient coverage or not\\n     */\\n    function isCovered(address _user) public view override returns (bool) {\\n        return _isCovered(_user, \\\"\\\", 0);\\n    }\\n\\n    /**\\n     * @notice Gets if the user is registered.\\n     * @param _user User's address\\n     * @return The boolean if the user is registered or not\\n     */\\n    function isRegisteredUser(address _user) external view override returns (bool) {\\n        return Storage.slot().isRegistered[_user];\\n    }\\n\\n    /**\\n     * @notice Gets the maximum amount of ETH that can be withdrawn from user collateral.\\n     * @param _user User's address\\n     * @return Maximum amount of ETH that can be withdrawn\\n     */\\n    function getWithdrawableCollateral(address _user) external view virtual returns (uint256) {\\n        return _getWithdrawableCollateral(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the rate of collateral used.\\n     * @param _user User's address\\n     * @return The rate of collateral used\\n     */\\n    function getCoverage(address _user) public view override returns (uint256) {\\n        return _getCoverage(_user, \\\"\\\", 0);\\n    }\\n\\n    /**\\n     * @notice Gets unsettled exposure for the selected currency\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @return Unsettled exposure\\n     */\\n    function getUnsettledCollateral(address _user, bytes32 _ccy) external view returns (uint256) {\\n        return Storage.slot().unsettledCollateral[_user][_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the total amount of unused collateral\\n     * @param _user User's address\\n     * @return The total amount of unused collateral\\n     */\\n    function getUnusedCollateral(address _user) external view returns (uint256) {\\n        uint256 totalCollateral = _getTotalCollateral(_user);\\n        uint256 totalUsedCollateral = _getUsedCollateral(_user) +\\n            _getTotalUnsettledExposure(_user, \\\"\\\", 0);\\n\\n        return totalCollateral > totalUsedCollateral ? totalCollateral - totalUsedCollateral : 0;\\n    }\\n\\n    /**\\n     * @notice Gets total unsettled exposure in all currencies.\\n     * @param _user User's address\\n     * @return Total unsettled exposure\\n     */\\n    function getTotalUnsettledExposure(address _user) external view override returns (uint256) {\\n        return _getTotalUnsettledExposure(_user, \\\"\\\", 0);\\n    }\\n\\n    /**\\n     * @notice Gets parameters related to collateral.\\n     * @return marginCallThresholdRate The rate used as the margin call threshold\\n     * @return autoLiquidationThresholdRate  The rate used as the auto liquidation threshold\\n     * @return liquidationPriceRate The rate used as the liquidation price\\n     * @return minCollateralRate The rate used minima collateral\\n     */\\n    function getCollateralParameters()\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 marginCallThresholdRate,\\n            uint256 autoLiquidationThresholdRate,\\n            uint256 liquidationPriceRate,\\n            uint256 minCollateralRate\\n        )\\n    {\\n        return CollateralParametersHandler.getCollateralParameters();\\n    }\\n\\n    /**\\n     * @notice Register user.\\n     */\\n    function register() external override nonRegisteredUser(msg.sender) {\\n        Storage.slot().isRegistered[msg.sender] = true;\\n\\n        emit Register(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Locks unsettled collateral for the selected currency.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to be locked in a specified currency\\n     */\\n    function useUnsettledCollateral(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external override onlyAcceptedContracts {\\n        Storage.slot().exposedUnsettledCurrencies[_user].add(_ccy);\\n        require(_isCovered(_user, _ccy, _amount), \\\"Not enough collateral\\\");\\n\\n        Storage.slot().unsettledCollateral[_user][_ccy] += _amount;\\n\\n        emit UseUnsettledCollateral(_user, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Releases the amount of unsettled exposure for the selected currency.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to be unlocked from unsettled exposure in a specified currency\\n     */\\n    function releaseUnsettledCollateral(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external override onlyAcceptedContracts {\\n        Storage.slot().unsettledCollateral[_user][_ccy] -= _amount;\\n\\n        if (Storage.slot().unsettledCollateral[_user][_ccy] == 0) {\\n            Storage.slot().exposedUnsettledCurrencies[_user].remove(_ccy);\\n        }\\n\\n        emit ReleaseUnsettled(_user, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Sets main collateral parameters this function\\n     * solves the issue of frontrunning during parameters tuning.\\n     *\\n     * @param _marginCallThresholdRate Margin call threshold ratio\\n     * @param _autoLiquidationThresholdRate Auto liquidation threshold rate\\n     * @param _liquidationPriceRate Liquidation price rate\\n     * @param _minCollateralRate Minimal collateral rate\\n     * @notice Triggers only be contract owner\\n     */\\n    function setCollateralParameters(\\n        uint256 _marginCallThresholdRate,\\n        uint256 _autoLiquidationThresholdRate,\\n        uint256 _liquidationPriceRate,\\n        uint256 _minCollateralRate\\n    ) external onlyOwner {\\n        CollateralParametersHandler.setCollateralParameters(\\n            _marginCallThresholdRate,\\n            _autoLiquidationThresholdRate,\\n            _liquidationPriceRate,\\n            _minCollateralRate\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets if the collateral has enough coverage.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @param _unsettledExp Additional exposure to lock into unsettled exposure\\n     * @return The boolean if the collateral has enough coverage or not\\n     */\\n    function _isCovered(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) internal view returns (bool) {\\n        uint256 totalCollateral = _getTotalCollateral(_user);\\n        uint256 totalUsedCollateral = _getUsedCollateral(_user) +\\n            _getTotalUnsettledExposure(_user, _ccy, _unsettledExp);\\n\\n        return\\n            totalUsedCollateral == 0 ||\\n            (totalCollateral * ProtocolTypes.PCT >=\\n                totalUsedCollateral * CollateralParametersHandler.marginCallThresholdRate());\\n    }\\n\\n    /**\\n     * @notice Gets the collateral coverage.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @param _unsettledExp Additional exposure to lock into unsettled exposure\\n     * @return coverage The rate of collateral used\\n     */\\n    function _getCoverage(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) internal view returns (uint256 coverage) {\\n        uint256 totalCollateral = _getTotalCollateral(_user);\\n        uint256 totalUsedCollateral = _getUsedCollateral(_user) +\\n            _getTotalUnsettledExposure(_user, _ccy, _unsettledExp);\\n\\n        if (totalCollateral > 0) {\\n            coverage = (((totalUsedCollateral) * ProtocolTypes.PCT) / totalCollateral);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets total unsettled exposure in all currencies.\\n     * @param _user User's ethereum address\\n     * @param _ccy Currency name in bytes32\\n     * @param _unsettledExp Additional exposure to lock into unsettled exposure\\n     * @return totalExp The total collateral amount\\n     */\\n    function _getTotalUnsettledExposure(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) internal view returns (uint256 totalExp) {\\n        EnumerableSet.Bytes32Set storage expCcy = Storage.slot().exposedUnsettledCurrencies[_user];\\n        uint256 ccyExp;\\n\\n        for (uint256 i = 0; i < expCcy.length(); i++) {\\n            bytes32 ccy = expCcy.at(i);\\n            ccyExp = Storage.slot().unsettledCollateral[_user][ccy];\\n\\n            if (_ccy == ccy) {\\n                ccyExp += _unsettledExp;\\n            }\\n\\n            totalExp += ccyExp > 0 ? currencyController().convertToETH(ccy, ccyExp) : 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the total collateral in all currencies.\\n     * @param _user User's address\\n     * @return The total amount of collateral\\n     */\\n    function _getTotalCollateral(address _user) internal view returns (uint256) {\\n        return collateralVault().getTotalIndependentCollateralInETH(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the total collateral used in all currencies.\\n     * The collateral used is defined as the negative future value in the lending market contract.\\n     * @param _user User's address\\n     * @return The total amount of used collateral\\n     */\\n    function _getUsedCollateral(address _user) internal view returns (uint256) {\\n        int256 totalPVInETH = lendingMarketController().getTotalPresentValueInETH(_user);\\n        return totalPVInETH > 0 ? 0 : uint256(-totalPVInETH);\\n    }\\n\\n    /**\\n     * @notice Calculates maximum amount of ETH that can be withdrawn.\\n     * @param _user User's address\\n     * @return Maximum amount of ETH that can be withdrawn\\n     */\\n    function _getWithdrawableCollateral(address _user) internal view returns (uint256) {\\n        uint256 totalCollateral = _getTotalCollateral(_user);\\n        uint256 totalUsedCollateral = _getUsedCollateral(_user) +\\n            _getTotalUnsettledExposure(_user, \\\"\\\", 0);\\n\\n        if (totalUsedCollateral == 0) {\\n            return totalCollateral;\\n        } else if (\\n            totalCollateral >\\n            ((totalUsedCollateral) * CollateralParametersHandler.marginCallThresholdRate()) /\\n                ProtocolTypes.BP\\n        ) {\\n            // NOTE: The formula is:\\n            // maxWithdraw = totalCollateral - ((totalUsedCollateral) * marginCallThresholdRate).\\n            return\\n                (totalCollateral *\\n                    ProtocolTypes.BP -\\n                    (totalUsedCollateral) *\\n                    CollateralParametersHandler.marginCallThresholdRate()) / ProtocolTypes.BP;\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc8d16b4f743bfbcb757080cef0836795304b13fa6e7446944c8e91fd3eac58c0\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICollateralAggregator {\\n    event Register(address indexed addr);\\n    event ReleaseUnsettled(address indexed party, bytes32 ccy, uint256 amount);\\n    event UseUnsettledCollateral(address indexed party, bytes32 ccy, uint256 amount);\\n\\n    function isCovered(address _user) external view returns (bool);\\n\\n    function isRegisteredUser(address addr) external view returns (bool);\\n\\n    function getWithdrawableCollateral(address _user) external view returns (uint256 maxWithdraw);\\n\\n    function getCoverage(address _user) external view returns (uint256 coverage);\\n\\n    function getUnsettledCollateral(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUnusedCollateral(address _user) external view returns (uint256);\\n\\n    function getTotalUnsettledExposure(address _user) external view returns (uint256);\\n\\n    function getCollateralParameters()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function register() external;\\n\\n    function useUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function releaseUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function setCollateralParameters(\\n        uint256 marginCallThresholdRate,\\n        uint256 autoLiquidationThresholdRate,\\n        uint256 liquidationPriceRate,\\n        uint256 minCollateralRate\\n    ) external;\\n}\\n\",\"keccak256\":\"0x044f9ce00b347c34307571cb24b3d8c3435db583f9d92b5554dbf847f7fcd477\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICollateralVault {\\n    event Deposit(address user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address from, bytes32 ccy, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress);\\n\\n    function deposit(bytes32 _ccy, uint256 _amount) external payable;\\n\\n    function getIndependentCollateral(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getIndependentCollateralInETH(address _user, bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function withdraw(bytes32 _ccy, uint256 _amount) external;\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getTotalIndependentCollateralInETH(address _party) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb67032b6e0eaf42b0eab142605bd2310d6432cee771ed1fe8a89546a7a1c2ef4\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CcyAdded(bytes32 indexed ccy, string name, uint256 haircut);\\n    event CcyCollateralUpdate(bytes32 indexed ccy, bool isCollateral);\\n    event CcySupportUpdate(bytes32 indexed ccy, bool isSupported);\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n    event MinMarginUpdated(bytes32 indexed ccy, uint256 minMargin);\\n    event PriceFeedAdded(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n    event PriceFeedRemoved(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH) external view returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, int256 _amount) external view returns (int256);\\n\\n    function getCurrencies(bytes32) external view returns (ProtocolTypes.Currency memory);\\n\\n    function getEthDecimals(bytes32) external view returns (uint8);\\n\\n    function getUsdDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function isCollateral(bytes32) external view returns (bool);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        address _ethPriceFeed,\\n        uint256 _haircut,\\n        address _tokenAddress\\n    ) external;\\n\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function updateCollateralSupport(bytes32 _ccy, bool _isSupported) external;\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported) external;\\n\\n    function getTokenAddresses(bytes32) external view returns (address);\\n}\\n\",\"keccak256\":\"0x1956cb9ac170250917d9b284882bc10d0fd025198f7b3e711cb7acd089a74a79\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\nstruct Order {\\n    bytes32 ccy;\\n    uint256 term;\\n    ProtocolTypes.Side side;\\n    uint256 amount;\\n    uint256 rate;\\n}\\n\\ninterface ILendingMarketController {\\n    event LendingMarketCreated(\\n        bytes32 ccy,\\n        address indexed marketAddr,\\n        uint256 index,\\n        uint256 maturity\\n    );\\n    event LendingMarketsRotated(bytes32 ccy, uint256 oldMaturity, uint256 newMaturity);\\n    event OrderFilled(\\n        address lender,\\n        address borrower,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n\\n    function getBasisDate(bytes32 _ccy) external view returns (uint256);\\n\\n    function getLendingMarkets(bytes32 _ccy) external view returns (address[] memory);\\n\\n    function getLendingMarket(bytes32 _ccy, uint256 _maturity) external view returns (address);\\n\\n    function getBorrowRates(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getLendRates(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getMidRates(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getMaturities(bytes32 _ccy) external view returns (uint256[] memory);\\n\\n    function getTotalPresentValue(bytes32 ccy, address account) external view returns (int256);\\n\\n    function getTotalPresentValueInETH(address account)\\n        external\\n        view\\n        returns (int256 totalPresentValue);\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function isInitializedLendingMarket(bytes32 _ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 _ccy,\\n        uint256 _basisDate,\\n        uint256 _compoundFactor\\n    ) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function createLendingMarket(bytes32 _ccy) external returns (address market);\\n\\n    function rotateLendingMarkets(bytes32 _ccy) external;\\n\\n    function pauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc0180bda434cdb5037733142df7e43682eab6872ced3c2435cbb108edfc01349\",\"license\":\"MIT\"},\"contracts/libraries/CollateralParametersHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {CollateralParametersStorage as Storage} from \\\"../storages/CollateralParametersStorage.sol\\\";\\n\\n/**\\n * @notice CollateralParametersHandler is an library to handle the parameters fro CollateralAggregator contract.\\n *\\n * This manage the main collateral parameters like Margin Call ratio, Auto-Liquidation level,\\n * Liquidation price, and Minimal collateral ratio.\\n *\\n */\\nlibrary CollateralParametersHandler {\\n    event LiquidationPriceRateUpdated(uint256 previousPrice, uint256 price);\\n    event AutoLiquidationThresholdRateUpdated(uint256 previousRatio, uint256 ratio);\\n    event MarginCallThresholdRateUpdated(uint256 previousRatio, uint256 ratio);\\n    event MinCollateralRateUpdated(uint256 previousRatio, uint256 price);\\n\\n    /**\\n     * @dev Gets collateral parameters\\n     */\\n    function getCollateralParameters()\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            Storage.slot().marginCallThresholdRate,\\n            Storage.slot().autoLiquidationThresholdRate,\\n            Storage.slot().liquidationPriceRate,\\n            Storage.slot().minCollateralRate\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets auto liquidation threshold rate\\n     */\\n    function autoLiquidationThresholdRate() internal view returns (uint256) {\\n        return Storage.slot().autoLiquidationThresholdRate;\\n    }\\n\\n    /**\\n     * @dev Gets liquidation price rate\\n     */\\n    function liquidationPriceRate() internal view returns (uint256) {\\n        return Storage.slot().liquidationPriceRate;\\n    }\\n\\n    /**\\n     * @dev Gets margin call threshold rate\\n     */\\n    function marginCallThresholdRate() internal view returns (uint256) {\\n        return Storage.slot().marginCallThresholdRate;\\n    }\\n\\n    /**\\n     * @dev Gets min collateral rate\\n     */\\n    function minCollateralRate() internal view returns (uint256) {\\n        return Storage.slot().minCollateralRate;\\n    }\\n\\n    /**\\n     * @dev Sets main collateral parameters this function\\n     * solves the issue of frontrunning during parameters tuning\\n     *\\n     * @param _marginCallThresholdRate Margin call threshold ratio\\n     * @param _autoLiquidationThresholdRate Auto liquidation threshold rate\\n     * @param _liquidationPriceRate Liquidation price rate\\n     * @param _minCollateralRate Minimal collateral rate\\n     * @notice Triggers only be contract owner\\n     */\\n    function setCollateralParameters(\\n        uint256 _marginCallThresholdRate,\\n        uint256 _autoLiquidationThresholdRate,\\n        uint256 _liquidationPriceRate,\\n        uint256 _minCollateralRate\\n    ) internal {\\n        if (_marginCallThresholdRate != Storage.slot().marginCallThresholdRate) {\\n            _updateMarginCallThresholdRate(_marginCallThresholdRate);\\n        }\\n\\n        if (_autoLiquidationThresholdRate != Storage.slot().autoLiquidationThresholdRate) {\\n            _updateAutoLiquidationThresholdRate(_autoLiquidationThresholdRate);\\n        }\\n\\n        if (_liquidationPriceRate != Storage.slot().liquidationPriceRate) {\\n            _updateLiquidationPriceRate(_liquidationPriceRate);\\n        }\\n\\n        if (_minCollateralRate != Storage.slot().minCollateralRate) {\\n            _updateMinCollateralRate(_minCollateralRate);\\n        }\\n    }\\n\\n    function _updateMarginCallThresholdRate(uint256 _rate) private {\\n        require(_rate > 0, \\\"Rate is zero\\\");\\n\\n        emit MarginCallThresholdRateUpdated(Storage.slot().marginCallThresholdRate, _rate);\\n        Storage.slot().marginCallThresholdRate = _rate;\\n    }\\n\\n    function _updateAutoLiquidationThresholdRate(uint256 _rate) private {\\n        require(_rate > 0, \\\"Rate is zero\\\");\\n        require(\\n            _rate < Storage.slot().marginCallThresholdRate,\\n            \\\"Auto liquidation threshold rate overflow\\\"\\n        );\\n\\n        emit AutoLiquidationThresholdRateUpdated(\\n            Storage.slot().autoLiquidationThresholdRate,\\n            _rate\\n        );\\n        Storage.slot().autoLiquidationThresholdRate = _rate;\\n    }\\n\\n    function _updateLiquidationPriceRate(uint256 _rate) private {\\n        require(_rate > 0, \\\"Rate is zero\\\");\\n        require(\\n            _rate < Storage.slot().autoLiquidationThresholdRate,\\n            \\\"Liquidation price rate overflow\\\"\\n        );\\n\\n        emit LiquidationPriceRateUpdated(Storage.slot().liquidationPriceRate, _rate);\\n        Storage.slot().liquidationPriceRate = _rate;\\n    }\\n\\n    function _updateMinCollateralRate(uint256 _rate) private {\\n        require(_rate > 0, \\\"Rate is zero\\\");\\n        require(\\n            _rate < Storage.slot().autoLiquidationThresholdRate,\\n            \\\"Min collateral rate overflow\\\"\\n        );\\n\\n        emit MinCollateralRateUpdated(Storage.slot().minCollateralRate, _rate);\\n        Storage.slot().minCollateralRate = _rate;\\n    }\\n}\\n\",\"keccak256\":\"0x956de72c15685f06cea0d67b501d27d968b8e2f0786ac1e284d11c16ee36dc90\",\"license\":\"MIT\"},\"contracts/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant COLLATERAL_AGGREGATOR = \\\"CollateralAggregator\\\";\\n    bytes32 internal constant COLLATERAL_VAULT = \\\"CollateralVault\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0xd2dc9d943f2de1871ee4ffa4b801291c2369985b61b40508576c8770aed8eff4\",\"license\":\"MIT\"},\"contracts/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../libraries/Contracts.sol\\\";\\nimport \\\"../interfaces/IAddressResolver.sol\\\";\\nimport \\\"../interfaces/ICollateralAggregator.sol\\\";\\nimport \\\"../interfaces/ICollateralVault.sol\\\";\\nimport \\\"../interfaces/ICurrencyController.sol\\\";\\nimport \\\"../interfaces/ILendingMarketController.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    IAddressResolver public resolver;\\n\\n    mapping(bytes32 => address) private addressCache;\\n\\n    modifier onlyAcceptedContracts() {\\n        require(isAcceptedContract(msg.sender), \\\"Only Accepted Contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the contract names used in this contract.\\n     * @dev The contract name list is in `./libraries/Contracts.sol`.\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @notice Returns contract names that can call this contract.\\n     * @dev The contact name listed in this method is also needed to be listed `requiredContracts` method.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        require(address(resolver) == address(0), \\\"resolver registered already\\\");\\n        resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function collateralAggregator() internal view returns (ICollateralAggregator) {\\n        return ICollateralAggregator(getAddress(Contracts.COLLATERAL_AGGREGATOR));\\n    }\\n\\n    function collateralVault() internal view returns (ICollateralVault) {\\n        return ICollateralVault(getAddress(Contracts.COLLATERAL_VAULT));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n}\\n\",\"keccak256\":\"0x98a8ba49db3740dd8f058343297f54713fa6859f0aea363a5444063ef7a11f5b\",\"license\":\"MIT\"},\"contracts/storages/CollateralAggregatorStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary CollateralAggregatorStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.collateralAggregator\\\");\\n\\n    struct Storage {\\n        // Mapping from user to total unsettled collateral per currency\\n        mapping(address => mapping(bytes32 => uint256)) unsettledCollateral;\\n        // Mapping from user to unsettled exposure\\n        mapping(address => EnumerableSet.Bytes32Set) exposedUnsettledCurrencies;\\n        // Mapping for all registered users\\n        mapping(address => bool) isRegistered;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ffd25e28387e169e83f4195808378d4ea775e1dfef24109ec993327171d1da3\",\"license\":\"MIT\"},\"contracts/storages/CollateralParametersStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary CollateralParametersStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.collateralParameters\\\");\\n\\n    struct Storage {\\n        // liquidation price rate in basis point\\n        uint256 liquidationPriceRate;\\n        // margin call threshold rate in basis point\\n        uint256 marginCallThresholdRate;\\n        // auto liquidation threshold rate in basis point\\n        uint256 autoLiquidationThresholdRate;\\n        //  minimal collateral rate in basis point\\n        uint256 minCollateralRate;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x415a942e51ef153edd4bad40a4d9e3940e7e29770172f015647f39eab45b195a\",\"license\":\"MIT\"},\"contracts/storages/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary OwnableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.ownable\\\");\\n\\n    struct Storage {\\n        address owner;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ef8bfa06947cdb63d47248ad074ac42a1b1ba828a2c97e42486a5dbb2c03e1d\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant BP = 10000; // basis point\\n    uint256 public constant PCT = 10000; // percentage point in basis\\n    uint256 public constant PENALTYLEVEL = 1000; // 10% settlement failure penalty\\n    uint256 public constant MKTMAKELEVEL = 2000; // 20% for market making\\n\\n    uint256 internal constant DAYS_IN_YEAR = 365;\\n    uint256 internal constant SECONDS_IN_YEAR = 31557600;\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n\\n    struct Currency {\\n        bool isSupported;\\n        string name;\\n    }\\n}\\n\",\"keccak256\":\"0xb7d72cd14320881eb1a6832ead684c89854fd643958d07e5d3476134f57328a8\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../storages/OwnableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return OwnableStorage.slot().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = OwnableStorage.slot().owner;\\n        OwnableStorage.slot().owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1c782b9deaf1f94d2af99826e6e8207f5e71f3fbb6ce18805913a3ca7dda9579\",\"license\":\"MIT\"},\"contracts/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0xe59cd60631c7c754ed6b77caa6f3a06301ef0df07881a3dcfa85124abc1890b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611d8c806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80637ea24133116100b85780639fcaebfa1161007c5780639fcaebfa146102de578063ae812841146102f1578063c91a99f914610304578063ca42303114610317578063e09976591461032a578063f2fde38b1461033257600080fd5b80637ea241331461025a57806386489ba91461029d5780638cbf5e78146102b05780638da5cb5b146102c3578063948060dd146102cb57600080fd5b806329985e5a116100ff57806329985e5a146102055780632af64bd31461020d5780633d03b9da146102155780635d8615051461022a578063715018a61461025257600080fd5b806304f3bcec1461013c5780630cfe33fa1461016c5780631aa3a0081461018d5780631f5bdf5d1461019757806325e1f09f146101f2575b600080fd5b60005461014f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61017f61017a3660046119f5565b610345565b604051908152602001610163565b610195610396565b005b6101e26101a53660046119f5565b6001600160a01b031660009081527f747d407d1d7f7c17ec532d202f3588c3ef20935de503a75a59a836e49167b600602052604090205460ff1690565b6040519015158152602001610163565b6101e26102003660046119f5565b61046a565b61019561047e565b6101e2610611565b61021d61072f565b6040516101639190611a12565b6102326107f5565b604080519485526020850193909352918301526060820152608001610163565b610195610811565b61017f610268366004611a56565b6001600160a01b03919091166000908152600080516020611d3783398151915260209081526040808320938352929052205490565b6101956102ab366004611a82565b61084c565b6101956102be366004611adb565b6109e5565b61014f610b3b565b61017f6102d93660046119f5565b610b6e565b6101956102ec366004611adb565b610b79565b6101956102ff366004611b10565b610cdf565b61017f6103123660046119f5565b610d20565b61017f6103253660046119f5565b610d2e565b61021d610d3c565b6101956103403660046119f5565b610d8c565b60008061035183610e2c565b9050600061036184600080610eb1565b61036a85611012565b6103749190611b58565b905080821161038457600061038e565b61038e8183611b70565b949350505050565b3360008181527f747d407d1d7f7c17ec532d202f3588c3ef20935de503a75a59a836e49167b600602052604090205460ff16156104085760405162461bcd60e51b815260206004820152600b60248201526a557365722065786973747360a81b60448201526064015b60405180910390fd5b3360008181527f747d407d1d7f7c17ec532d202f3588c3ef20935de503a75a59a836e49167b6006020526040808220805460ff19166001179055517feeda149c76076b34d4b9d8896c2f7efc0d33d1c7b53ea3c5db490d64613f603a9190a250565b6000610478826000806110ba565b92915050565b600061048861072f565b905060005b815181101561060d5760008282815181106104aa576104aa611b87565b6020026020010151905060008060009054906101000a90046001600160a01b03166001600160a01b0316636795dbcd838460405160200161051791907f5265736f6c766572206d697373696e67207461726765743a20000000000000008152601981019190915260390190565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401610543929190611bea565b60206040518083038186803b15801561055b57600080fd5b505afa15801561056f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105939190611c03565b60008381526001602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251868152918201529192507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68910160405180910390a15050808061060590611c20565b91505061048d565b5050565b60008061061c61072f565b905060005b815181101561072657600082828151811061063e5761063e611b87565b60209081029190910181015160008181526001909252604080832054925490516321f8a72160e01b8152600481018390529193506001600160a01b039283169216906321f8a7219060240160206040518083038186803b1580156106a157600080fd5b505afa1580156106b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d99190611c03565b6001600160a01b031614158061070457506000818152600160205260409020546001600160a01b0316155b15610713576000935050505090565b508061071e81611c20565b915050610621565b50600191505090565b604080516003808252608082019092526060916020820183803683370190505090506e10dbdb1b185d195c985b15985d5b1d608a1b8160008151811061077757610777611b87565b6020026020010181815250507121bab93932b731bca1b7b73a3937b63632b960711b816001815181106107ac576107ac611b87565b602002602001018181525050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b816002815181106107e6576107e6611b87565b60200260200101818152505090565b60008060008061080361111d565b935093509350935090919293565b3361081a610b3b565b6001600160a01b0316146108405760405162461bcd60e51b81526004016103ff90611c3b565b61084a600061115e565b565b600254610100900460ff161580801561086c5750600254600160ff909116105b806108865750303b158015610886575060025460ff166001145b6108e95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103ff565b6002805460ff19166001179055801561090c576002805461ff0019166101001790555b60006109166111cf565b6001600160a01b031614156109785760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b60648201526084016103ff565b6109818761115e565b61098a866111f7565b61099685858585611272565b80156109dc576002805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b6109ee336112db565b610a345760405162461bcd60e51b81526020600482015260176024820152764f6e6c7920416363657074656420436f6e74726163747360481b60448201526064016103ff565b6001600160a01b0383166000908152600080516020611d378339815191526020908152604080832085845290915281208054839290610a74908490611b70565b90915550600080516020611d3783398151915290506001600160a01b0384166000908152602091825260408082208583529092522054610af1576001600160a01b03831660009081527f747d407d1d7f7c17ec532d202f3588c3ef20935de503a75a59a836e49167b5ff60205260409020610aef9083611355565b505b60408051838152602081018390526001600160a01b038516917fb4c40c9409d6c2c7dfd2fb0d7e0f26582b9dd0dee72dc0ff6ff09af501ba7a7691015b60405180910390a2505050565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa5b546001600160a01b0316919050565b600061047882611361565b610b82336112db565b610bc85760405162461bcd60e51b81526020600482015260176024820152764f6e6c7920416363657074656420436f6e74726163747360481b60448201526064016103ff565b6001600160a01b03831660009081527f747d407d1d7f7c17ec532d202f3588c3ef20935de503a75a59a836e49167b5ff60205260409020610c0990836113f9565b50610c158383836110ba565b610c595760405162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da0818dbdb1b185d195c985b605a1b60448201526064016103ff565b6001600160a01b0383166000908152600080516020611d378339815191526020908152604080832085845290915281208054839290610c99908490611b58565b909155505060408051838152602081018390526001600160a01b038516917f430a1193f254f9e15dc397d101a1ecf0a3383c95007062135900cc7c2a6b80439101610b2e565b33610ce8610b3b565b6001600160a01b031614610d0e5760405162461bcd60e51b81526004016103ff90611c3b565b610d1a84848484611272565b50505050565b600061047882600080610eb1565b600061047882600080611405565b60408051600180825281830190925260609160208083019080368337019050509050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b816000815181106107e6576107e6611b87565b33610d95610b3b565b6001600160a01b031614610dbb5760405162461bcd60e51b81526004016103ff90611c3b565b6001600160a01b038116610e205760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103ff565b610e298161115e565b50565b6000610e3661145b565b604051639491170960e01b81526001600160a01b038481166004830152919091169063949117099060240160206040518083038186803b158015610e7957600080fd5b505afa158015610e8d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104789190611c70565b6001600160a01b03831660009081527f747d407d1d7f7c17ec532d202f3588c3ef20935de503a75a59a836e49167b5ff6020526040812081805b610ef48361147d565b811015611008576000610f078483611487565b9050600080516020611d378339815191526001600160a01b0389166000908152602091825260408082208483529092522054925086811415610f5057610f4d8684611b58565b92505b60008311610f5f576000610fe8565b610f67611493565b6040516344a6ecdd60e01b815260048101839052602481018590526001600160a01b0391909116906344a6ecdd9060440160206040518083038186803b158015610fb057600080fd5b505afa158015610fc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe89190611c70565b610ff29086611b58565b945050808061100090611c20565b915050610eeb565b5050509392505050565b60008061101d6114b3565b60405163fb54a6b360e01b81526001600160a01b038581166004830152919091169063fb54a6b39060240160206040518083038186803b15801561106057600080fd5b505afa158015611074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110989190611c70565b9050600081136110b0576110ab81611c89565b6110b3565b60005b9392505050565b6000806110c685610e2c565b905060006110d5868686610eb1565b6110de87611012565b6110e89190611b58565b905080158061111357506110fa6114d8565b6111049082611ca6565b61111061271084611ca6565b10155b9695505050505050565b60008060008061112b6114eb565b600101546111376114eb565b600201546111436114eb565b5461114c6114eb565b60030154935093509350935090919293565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610b5f565b6000546001600160a01b0316156112505760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c7265616479000000000060448201526064016103ff565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b61127a6114eb565b60010154841461128d5761128d8461150f565b6112956114eb565b6002015483146112a8576112a883611583565b6112b06114eb565b5482146112c0576112c082611662565b6112c86114eb565b600301548114610d1a57610d1a8161172a565b6000806112e6610d3c565b905060005b815181101561134b5761131682828151811061130957611309611b87565b60200260200101516117f8565b6001600160a01b0316846001600160a01b03161415611339575060019392505050565b8061134381611c20565b9150506112eb565b5060009392505050565b60006110b38383611874565b60008061136d83610e2c565b9050600061137d84600080610eb1565b61138685611012565b6113909190611b58565b90508061139e575092915050565b6127106113a96114d8565b6113b39083611ca6565b6113bd9190611cc5565b82111561134b576127106113cf6114d8565b6113d99083611ca6565b6113e561271085611ca6565b6113ef9190611b70565b61038e9190611cc5565b60006110b38383611967565b60008061141185610e2c565b90506000611420868686610eb1565b61142987611012565b6114339190611b58565b90508115611452578161144861271083611ca6565b6111139190611cc5565b50509392505050565b60006114786e10dbdb1b185d195c985b15985d5b1d608a1b6117f8565b905090565b6000610478825490565b60006110b383836119b6565b60006114787121bab93932b731bca1b7b73a3937b63632b960711b6117f8565b6000611478762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b6117f8565b60006114e26114eb565b60010154905090565b7f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d05290565b6000811161152f5760405162461bcd60e51b81526004016103ff90611ce7565b7f31ee2d7ab5f3365672e54f81f75b37a4d8b0f1085872bdb80349a1cb08ddb7116115586114eb565b6001015460408051918252602082018490520160405180910390a18061157c6114eb565b6001015550565b600081116115a35760405162461bcd60e51b81526004016103ff90611ce7565b6115ab6114eb565b60010154811061160e5760405162461bcd60e51b815260206004820152602860248201527f4175746f206c69717569646174696f6e207468726573686f6c642072617465206044820152676f766572666c6f7760c01b60648201526084016103ff565b7fd3353684d64f1c80498433d8407c96e6bbeb1ec88b6200ec97d2c910fdbd0da46116376114eb565b6002015460408051918252602082018490520160405180910390a18061165b6114eb565b6002015550565b600081116116825760405162461bcd60e51b81526004016103ff90611ce7565b61168a6114eb565b6002015481106116dc5760405162461bcd60e51b815260206004820152601f60248201527f4c69717569646174696f6e2070726963652072617465206f766572666c6f770060448201526064016103ff565b7f86aa422ec6af9520cb2f744924b12937e3db1aa5ce22050d0d519621e84090706117056114eb565b5460408051918252602082018490520160405180910390a1806117266114eb565b5550565b6000811161174a5760405162461bcd60e51b81526004016103ff90611ce7565b6117526114eb565b6002015481106117a45760405162461bcd60e51b815260206004820152601c60248201527f4d696e20636f6c6c61746572616c2072617465206f766572666c6f770000000060448201526064016103ff565b7f8367b1759e8fdce5712002e7aa025339b99cf3c850b194ebdf37219f86b01ee66117cd6114eb565b6003015460408051918252602082018490520160405180910390a1806117f16114eb565b6003015550565b600081815260016020908152604080832054905170026b4b9b9b4b7339030b2323932b9b99d1607d1b92810192909252603182018490526001600160a01b031690811515906051016040516020818303038152906040529061186d5760405162461bcd60e51b81526004016103ff9190611d0d565b5092915050565b6000818152600183016020526040812054801561195d576000611898600183611b70565b85549091506000906118ac90600190611b70565b90508181146119115760008660000182815481106118cc576118cc611b87565b90600052602060002001549050808760000184815481106118ef576118ef611b87565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061192257611922611d20565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610478565b6000915050610478565b60008181526001830160205260408120546119ae57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610478565b506000610478565b60008260000182815481106119cd576119cd611b87565b9060005260206000200154905092915050565b6001600160a01b0381168114610e2957600080fd5b600060208284031215611a0757600080fd5b81356110b3816119e0565b6020808252825182820181905260009190848201906040850190845b81811015611a4a57835183529284019291840191600101611a2e565b50909695505050505050565b60008060408385031215611a6957600080fd5b8235611a74816119e0565b946020939093013593505050565b60008060008060008060c08789031215611a9b57600080fd5b8635611aa6816119e0565b95506020870135611ab6816119e0565b95989597505050506040840135936060810135936080820135935060a0909101359150565b600080600060608486031215611af057600080fd5b8335611afb816119e0565b95602085013595506040909401359392505050565b60008060008060808587031215611b2657600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611b6b57611b6b611b42565b500190565b600082821015611b8257611b82611b42565b500390565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b81811015611bc357602081850181015186830182015201611ba7565b81811115611bd5576000602083870101525b50601f01601f19169290920160200192915050565b82815260406020820152600061038e6040830184611b9d565b600060208284031215611c1557600080fd5b81516110b3816119e0565b6000600019821415611c3457611c34611b42565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215611c8257600080fd5b5051919050565b6000600160ff1b821415611c9f57611c9f611b42565b5060000390565b6000816000190483118215151615611cc057611cc0611b42565b500290565b600082611ce257634e487b7160e01b600052601260045260246000fd5b500490565b6020808252600c908201526b52617465206973207a65726f60a01b604082015260600190565b6020815260006110b36020830184611b9d565b634e487b7160e01b600052603160045260246000fdfe747d407d1d7f7c17ec532d202f3588c3ef20935de503a75a59a836e49167b5fea26469706673582212205f290cefc1c10919ec9b5b87767297275c66ea983c88f79d2af1595679001e2c64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80637ea24133116100b85780639fcaebfa1161007c5780639fcaebfa146102de578063ae812841146102f1578063c91a99f914610304578063ca42303114610317578063e09976591461032a578063f2fde38b1461033257600080fd5b80637ea241331461025a57806386489ba91461029d5780638cbf5e78146102b05780638da5cb5b146102c3578063948060dd146102cb57600080fd5b806329985e5a116100ff57806329985e5a146102055780632af64bd31461020d5780633d03b9da146102155780635d8615051461022a578063715018a61461025257600080fd5b806304f3bcec1461013c5780630cfe33fa1461016c5780631aa3a0081461018d5780631f5bdf5d1461019757806325e1f09f146101f2575b600080fd5b60005461014f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61017f61017a3660046119f5565b610345565b604051908152602001610163565b610195610396565b005b6101e26101a53660046119f5565b6001600160a01b031660009081527f747d407d1d7f7c17ec532d202f3588c3ef20935de503a75a59a836e49167b600602052604090205460ff1690565b6040519015158152602001610163565b6101e26102003660046119f5565b61046a565b61019561047e565b6101e2610611565b61021d61072f565b6040516101639190611a12565b6102326107f5565b604080519485526020850193909352918301526060820152608001610163565b610195610811565b61017f610268366004611a56565b6001600160a01b03919091166000908152600080516020611d3783398151915260209081526040808320938352929052205490565b6101956102ab366004611a82565b61084c565b6101956102be366004611adb565b6109e5565b61014f610b3b565b61017f6102d93660046119f5565b610b6e565b6101956102ec366004611adb565b610b79565b6101956102ff366004611b10565b610cdf565b61017f6103123660046119f5565b610d20565b61017f6103253660046119f5565b610d2e565b61021d610d3c565b6101956103403660046119f5565b610d8c565b60008061035183610e2c565b9050600061036184600080610eb1565b61036a85611012565b6103749190611b58565b905080821161038457600061038e565b61038e8183611b70565b949350505050565b3360008181527f747d407d1d7f7c17ec532d202f3588c3ef20935de503a75a59a836e49167b600602052604090205460ff16156104085760405162461bcd60e51b815260206004820152600b60248201526a557365722065786973747360a81b60448201526064015b60405180910390fd5b3360008181527f747d407d1d7f7c17ec532d202f3588c3ef20935de503a75a59a836e49167b6006020526040808220805460ff19166001179055517feeda149c76076b34d4b9d8896c2f7efc0d33d1c7b53ea3c5db490d64613f603a9190a250565b6000610478826000806110ba565b92915050565b600061048861072f565b905060005b815181101561060d5760008282815181106104aa576104aa611b87565b6020026020010151905060008060009054906101000a90046001600160a01b03166001600160a01b0316636795dbcd838460405160200161051791907f5265736f6c766572206d697373696e67207461726765743a20000000000000008152601981019190915260390190565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401610543929190611bea565b60206040518083038186803b15801561055b57600080fd5b505afa15801561056f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105939190611c03565b60008381526001602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251868152918201529192507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68910160405180910390a15050808061060590611c20565b91505061048d565b5050565b60008061061c61072f565b905060005b815181101561072657600082828151811061063e5761063e611b87565b60209081029190910181015160008181526001909252604080832054925490516321f8a72160e01b8152600481018390529193506001600160a01b039283169216906321f8a7219060240160206040518083038186803b1580156106a157600080fd5b505afa1580156106b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d99190611c03565b6001600160a01b031614158061070457506000818152600160205260409020546001600160a01b0316155b15610713576000935050505090565b508061071e81611c20565b915050610621565b50600191505090565b604080516003808252608082019092526060916020820183803683370190505090506e10dbdb1b185d195c985b15985d5b1d608a1b8160008151811061077757610777611b87565b6020026020010181815250507121bab93932b731bca1b7b73a3937b63632b960711b816001815181106107ac576107ac611b87565b602002602001018181525050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b816002815181106107e6576107e6611b87565b60200260200101818152505090565b60008060008061080361111d565b935093509350935090919293565b3361081a610b3b565b6001600160a01b0316146108405760405162461bcd60e51b81526004016103ff90611c3b565b61084a600061115e565b565b600254610100900460ff161580801561086c5750600254600160ff909116105b806108865750303b158015610886575060025460ff166001145b6108e95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103ff565b6002805460ff19166001179055801561090c576002805461ff0019166101001790555b60006109166111cf565b6001600160a01b031614156109785760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b60648201526084016103ff565b6109818761115e565b61098a866111f7565b61099685858585611272565b80156109dc576002805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b6109ee336112db565b610a345760405162461bcd60e51b81526020600482015260176024820152764f6e6c7920416363657074656420436f6e74726163747360481b60448201526064016103ff565b6001600160a01b0383166000908152600080516020611d378339815191526020908152604080832085845290915281208054839290610a74908490611b70565b90915550600080516020611d3783398151915290506001600160a01b0384166000908152602091825260408082208583529092522054610af1576001600160a01b03831660009081527f747d407d1d7f7c17ec532d202f3588c3ef20935de503a75a59a836e49167b5ff60205260409020610aef9083611355565b505b60408051838152602081018390526001600160a01b038516917fb4c40c9409d6c2c7dfd2fb0d7e0f26582b9dd0dee72dc0ff6ff09af501ba7a7691015b60405180910390a2505050565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa5b546001600160a01b0316919050565b600061047882611361565b610b82336112db565b610bc85760405162461bcd60e51b81526020600482015260176024820152764f6e6c7920416363657074656420436f6e74726163747360481b60448201526064016103ff565b6001600160a01b03831660009081527f747d407d1d7f7c17ec532d202f3588c3ef20935de503a75a59a836e49167b5ff60205260409020610c0990836113f9565b50610c158383836110ba565b610c595760405162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da0818dbdb1b185d195c985b605a1b60448201526064016103ff565b6001600160a01b0383166000908152600080516020611d378339815191526020908152604080832085845290915281208054839290610c99908490611b58565b909155505060408051838152602081018390526001600160a01b038516917f430a1193f254f9e15dc397d101a1ecf0a3383c95007062135900cc7c2a6b80439101610b2e565b33610ce8610b3b565b6001600160a01b031614610d0e5760405162461bcd60e51b81526004016103ff90611c3b565b610d1a84848484611272565b50505050565b600061047882600080610eb1565b600061047882600080611405565b60408051600180825281830190925260609160208083019080368337019050509050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b816000815181106107e6576107e6611b87565b33610d95610b3b565b6001600160a01b031614610dbb5760405162461bcd60e51b81526004016103ff90611c3b565b6001600160a01b038116610e205760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103ff565b610e298161115e565b50565b6000610e3661145b565b604051639491170960e01b81526001600160a01b038481166004830152919091169063949117099060240160206040518083038186803b158015610e7957600080fd5b505afa158015610e8d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104789190611c70565b6001600160a01b03831660009081527f747d407d1d7f7c17ec532d202f3588c3ef20935de503a75a59a836e49167b5ff6020526040812081805b610ef48361147d565b811015611008576000610f078483611487565b9050600080516020611d378339815191526001600160a01b0389166000908152602091825260408082208483529092522054925086811415610f5057610f4d8684611b58565b92505b60008311610f5f576000610fe8565b610f67611493565b6040516344a6ecdd60e01b815260048101839052602481018590526001600160a01b0391909116906344a6ecdd9060440160206040518083038186803b158015610fb057600080fd5b505afa158015610fc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe89190611c70565b610ff29086611b58565b945050808061100090611c20565b915050610eeb565b5050509392505050565b60008061101d6114b3565b60405163fb54a6b360e01b81526001600160a01b038581166004830152919091169063fb54a6b39060240160206040518083038186803b15801561106057600080fd5b505afa158015611074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110989190611c70565b9050600081136110b0576110ab81611c89565b6110b3565b60005b9392505050565b6000806110c685610e2c565b905060006110d5868686610eb1565b6110de87611012565b6110e89190611b58565b905080158061111357506110fa6114d8565b6111049082611ca6565b61111061271084611ca6565b10155b9695505050505050565b60008060008061112b6114eb565b600101546111376114eb565b600201546111436114eb565b5461114c6114eb565b60030154935093509350935090919293565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610b5f565b6000546001600160a01b0316156112505760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c7265616479000000000060448201526064016103ff565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b61127a6114eb565b60010154841461128d5761128d8461150f565b6112956114eb565b6002015483146112a8576112a883611583565b6112b06114eb565b5482146112c0576112c082611662565b6112c86114eb565b600301548114610d1a57610d1a8161172a565b6000806112e6610d3c565b905060005b815181101561134b5761131682828151811061130957611309611b87565b60200260200101516117f8565b6001600160a01b0316846001600160a01b03161415611339575060019392505050565b8061134381611c20565b9150506112eb565b5060009392505050565b60006110b38383611874565b60008061136d83610e2c565b9050600061137d84600080610eb1565b61138685611012565b6113909190611b58565b90508061139e575092915050565b6127106113a96114d8565b6113b39083611ca6565b6113bd9190611cc5565b82111561134b576127106113cf6114d8565b6113d99083611ca6565b6113e561271085611ca6565b6113ef9190611b70565b61038e9190611cc5565b60006110b38383611967565b60008061141185610e2c565b90506000611420868686610eb1565b61142987611012565b6114339190611b58565b90508115611452578161144861271083611ca6565b6111139190611cc5565b50509392505050565b60006114786e10dbdb1b185d195c985b15985d5b1d608a1b6117f8565b905090565b6000610478825490565b60006110b383836119b6565b60006114787121bab93932b731bca1b7b73a3937b63632b960711b6117f8565b6000611478762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b6117f8565b60006114e26114eb565b60010154905090565b7f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d05290565b6000811161152f5760405162461bcd60e51b81526004016103ff90611ce7565b7f31ee2d7ab5f3365672e54f81f75b37a4d8b0f1085872bdb80349a1cb08ddb7116115586114eb565b6001015460408051918252602082018490520160405180910390a18061157c6114eb565b6001015550565b600081116115a35760405162461bcd60e51b81526004016103ff90611ce7565b6115ab6114eb565b60010154811061160e5760405162461bcd60e51b815260206004820152602860248201527f4175746f206c69717569646174696f6e207468726573686f6c642072617465206044820152676f766572666c6f7760c01b60648201526084016103ff565b7fd3353684d64f1c80498433d8407c96e6bbeb1ec88b6200ec97d2c910fdbd0da46116376114eb565b6002015460408051918252602082018490520160405180910390a18061165b6114eb565b6002015550565b600081116116825760405162461bcd60e51b81526004016103ff90611ce7565b61168a6114eb565b6002015481106116dc5760405162461bcd60e51b815260206004820152601f60248201527f4c69717569646174696f6e2070726963652072617465206f766572666c6f770060448201526064016103ff565b7f86aa422ec6af9520cb2f744924b12937e3db1aa5ce22050d0d519621e84090706117056114eb565b5460408051918252602082018490520160405180910390a1806117266114eb565b5550565b6000811161174a5760405162461bcd60e51b81526004016103ff90611ce7565b6117526114eb565b6002015481106117a45760405162461bcd60e51b815260206004820152601c60248201527f4d696e20636f6c6c61746572616c2072617465206f766572666c6f770000000060448201526064016103ff565b7f8367b1759e8fdce5712002e7aa025339b99cf3c850b194ebdf37219f86b01ee66117cd6114eb565b6003015460408051918252602082018490520160405180910390a1806117f16114eb565b6003015550565b600081815260016020908152604080832054905170026b4b9b9b4b7339030b2323932b9b99d1607d1b92810192909252603182018490526001600160a01b031690811515906051016040516020818303038152906040529061186d5760405162461bcd60e51b81526004016103ff9190611d0d565b5092915050565b6000818152600183016020526040812054801561195d576000611898600183611b70565b85549091506000906118ac90600190611b70565b90508181146119115760008660000182815481106118cc576118cc611b87565b90600052602060002001549050808760000184815481106118ef576118ef611b87565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061192257611922611d20565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610478565b6000915050610478565b60008181526001830160205260408120546119ae57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610478565b506000610478565b60008260000182815481106119cd576119cd611b87565b9060005260206000200154905092915050565b6001600160a01b0381168114610e2957600080fd5b600060208284031215611a0757600080fd5b81356110b3816119e0565b6020808252825182820181905260009190848201906040850190845b81811015611a4a57835183529284019291840191600101611a2e565b50909695505050505050565b60008060408385031215611a6957600080fd5b8235611a74816119e0565b946020939093013593505050565b60008060008060008060c08789031215611a9b57600080fd5b8635611aa6816119e0565b95506020870135611ab6816119e0565b95989597505050506040840135936060810135936080820135935060a0909101359150565b600080600060608486031215611af057600080fd5b8335611afb816119e0565b95602085013595506040909401359392505050565b60008060008060808587031215611b2657600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611b6b57611b6b611b42565b500190565b600082821015611b8257611b82611b42565b500390565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b81811015611bc357602081850181015186830182015201611ba7565b81811115611bd5576000602083870101525b50601f01601f19169290920160200192915050565b82815260406020820152600061038e6040830184611b9d565b600060208284031215611c1557600080fd5b81516110b3816119e0565b6000600019821415611c3457611c34611b42565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215611c8257600080fd5b5051919050565b6000600160ff1b821415611c9f57611c9f611b42565b5060000390565b6000816000190483118215151615611cc057611cc0611b42565b500290565b600082611ce257634e487b7160e01b600052601260045260246000fd5b500490565b6020808252600c908201526b52617465206973207a65726f60a01b604082015260600190565b6020815260006110b36020830184611b9d565b634e487b7160e01b600052603160045260246000fdfe747d407d1d7f7c17ec532d202f3588c3ef20935de503a75a59a836e49167b5fea26469706673582212205f290cefc1c10919ec9b5b87767297275c66ea983c88f79d2af1595679001e2c64736f6c63430008090033",
  "implementation": "0x3972e15e8FAF2414D74e650dC01c7251987f3402",
  "devdoc": {
    "details": "The deposited amount is managed in the CollateralVault contract now. It will be merged to this contract in the future.",
    "kind": "dev",
    "methods": {
      "acceptedContracts()": {
        "details": "The contact name listed in this method is also needed to be listed `requiredContracts` method."
      },
      "getCollateralParameters()": {
        "returns": {
          "autoLiquidationThresholdRate": " The rate used as the auto liquidation threshold",
          "liquidationPriceRate": "The rate used as the liquidation price",
          "marginCallThresholdRate": "The rate used as the margin call threshold",
          "minCollateralRate": "The rate used minima collateral"
        }
      },
      "getCoverage(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The rate of collateral used"
        }
      },
      "getTotalUnsettledExposure(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "Total unsettled exposure"
        }
      },
      "getUnsettledCollateral(address,bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "_0": "Unsettled exposure"
        }
      },
      "getUnusedCollateral(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The total amount of unused collateral"
        }
      },
      "getWithdrawableCollateral(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "Maximum amount of ETH that can be withdrawn"
        }
      },
      "initialize(address,address,uint256,uint256,uint256,uint256)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController.",
        "params": {
          "_autoLiquidationThresholdRate": "The rate used as the auto liquidation threshold",
          "_liquidationPriceRate": "The rate used as the liquidation price",
          "_marginCallThresholdRate": "The rate used as the margin call threshold",
          "_minCollateralRate": "The rate used minima collateral",
          "_owner": "The address of the contract owner",
          "_resolver": "The address of the Address Resolver contract"
        }
      },
      "isCovered(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The boolean if the collateral has sufficient coverage or not"
        }
      },
      "isRegisteredUser(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The boolean if the user is registered or not"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "releaseUnsettledCollateral(address,bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to be unlocked from unsettled exposure in a specified currency",
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requiredContracts()": {
        "details": "The contract name list is in `./libraries/Contracts.sol`."
      },
      "setCollateralParameters(uint256,uint256,uint256,uint256)": {
        "params": {
          "_autoLiquidationThresholdRate": "Auto liquidation threshold rate",
          "_liquidationPriceRate": "Liquidation price rate",
          "_marginCallThresholdRate": "Margin call threshold ratio",
          "_minCollateralRate": "Minimal collateral rate"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "useUnsettledCollateral(address,bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to be locked in a specified currency",
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptedContracts()": {
        "notice": "Returns contract names that can call this contract."
      },
      "getCollateralParameters()": {
        "notice": "Gets parameters related to collateral."
      },
      "getCoverage(address)": {
        "notice": "Gets the rate of collateral used."
      },
      "getTotalUnsettledExposure(address)": {
        "notice": "Gets total unsettled exposure in all currencies."
      },
      "getUnsettledCollateral(address,bytes32)": {
        "notice": "Gets unsettled exposure for the selected currency"
      },
      "getUnusedCollateral(address)": {
        "notice": "Gets the total amount of unused collateral"
      },
      "getWithdrawableCollateral(address)": {
        "notice": "Gets the maximum amount of ETH that can be withdrawn from user collateral."
      },
      "initialize(address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Initializes the contract."
      },
      "isCovered(address)": {
        "notice": "Gets if the collateral has enough coverage."
      },
      "isRegisteredUser(address)": {
        "notice": "Gets if the user is registered."
      },
      "register()": {
        "notice": "Register user."
      },
      "releaseUnsettledCollateral(address,bytes32,uint256)": {
        "notice": "Releases the amount of unsettled exposure for the selected currency."
      },
      "requiredContracts()": {
        "notice": "Returns the contract names used in this contract."
      },
      "setCollateralParameters(uint256,uint256,uint256,uint256)": {
        "notice": "Sets main collateral parameters this function solves the issue of frontrunning during parameters tuning.Triggers only be contract owner"
      },
      "useUnsettledCollateral(address,bytes32,uint256)": {
        "notice": "Locks unsettled collateral for the selected currency."
      }
    },
    "notice": "Implements the management of the collateral in each currency for users. This contract manages the following data related to the collateral. - Deposited amount as the collateral - Unsettled collateral amount used by order - Parameters related to the collateral   - Margin Call Threshold Rate   - Auto Liquidation Threshold Rate   - Liquidation Price Rate   - Min Collateral Rate",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15191,
        "contract": "contracts/CollateralAggregator.sol:CollateralAggregator",
        "label": "resolver",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAddressResolver)8543"
      },
      {
        "astId": 15195,
        "contract": "contracts/CollateralAggregator.sol:CollateralAggregator",
        "label": "addressCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 790,
        "contract": "contracts/CollateralAggregator.sol:CollateralAggregator",
        "label": "_initialized",
        "offset": 0,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 793,
        "contract": "contracts/CollateralAggregator.sol:CollateralAggregator",
        "label": "_initializing",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAddressResolver)8543": {
        "encoding": "inplace",
        "label": "contract IAddressResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}