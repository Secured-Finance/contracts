{
  "address": "0x4000CfBf5fbfCABE032FBF1A9366f80af6Ad9340",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "AutoLiquidationThresholdRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "CollateralUserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "CollateralUserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "crosschainAddressResolver",
          "type": "address"
        }
      ],
      "name": "CrosschainAddressResolverUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "CurrencyControllerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidations",
          "type": "address"
        }
      ],
      "name": "LiquidationEngineUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "LiquidationPriceRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "MarginCallThresholdRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "MinCollateralRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "Register",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "partyA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "partyB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isSettled",
          "type": "bool"
        }
      ],
      "name": "Release",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReleaseUnsettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "partyA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "partyB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "SettleCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "partyA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "partyB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevPV0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevPV1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentPV0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentPV1",
          "type": "uint256"
        }
      ],
      "name": "UpdatePV",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "partyA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "partyB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isSettled",
          "type": "bool"
        }
      ],
      "name": "UseCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UseUnsettledCollateral",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "addCollateralUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "checkRegisteredUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAutoLiquidationThresholdRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "partyA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "partyB",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        }
      ],
      "name": "getCcyExposures",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_party1",
          "type": "address"
        }
      ],
      "name": "getCoverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "partyA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "partyB",
          "type": "address"
        }
      ],
      "name": "getExposedCurrencies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidationPriceRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarginCallThresholdRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getMaxCollateralBookWidthdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxWithdraw",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_party1",
          "type": "address"
        }
      ],
      "name": "getMaxCollateralWidthdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinCollateralRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_party1",
          "type": "address"
        }
      ],
      "name": "getNetAndTotalPV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_party1",
          "type": "address"
        }
      ],
      "name": "getRebalanceCollateralAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalUnsettledExp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        }
      ],
      "name": "getUnsettledCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUnsettledCoverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "coverage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "marginCallThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "autoLiquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationPriceRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minCollateralRate",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isCollateralUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_party1",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_party0PV",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_party1PV",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isSettled",
          "type": "bool"
        }
      ],
      "name": "isCovered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_unsettledExp",
          "type": "uint256"
        }
      ],
      "name": "isCoveredUnsettled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidationInETH",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "liquidationAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pv",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isSettled",
          "type": "bool"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_addresses",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_chainIds",
          "type": "uint256[]"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "partyA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "partyB",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isSettled",
          "type": "bool"
        }
      ],
      "name": "releaseCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "releaseUnsettledCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "removeCollateralUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "partyA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "partyB",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "settleCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "updateAutoLiquidationThresholdRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "updateLiquidationPriceRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marginCallThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_autoLiquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationPriceRate",
          "type": "uint256"
        }
      ],
      "name": "updateMainParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "updateMarginCallThresholdRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "updateMinCollateralRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "prevPV0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prevPV1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentPV0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentPV1",
          "type": "uint256"
        }
      ],
      "name": "updatePV",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "partyA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "partyB",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isSettled",
          "type": "bool"
        }
      ],
      "name": "useCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "useUnsettledCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x21b5df31a0fd903e257936d9582383c40c6bb94e95b6fa7ec317a3635fe16a7f",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x4000CfBf5fbfCABE032FBF1A9366f80af6Ad9340",
    "transactionIndex": 21,
    "gasUsed": "4019458",
    "logsBloom": "0x
    "blockHash": "0x86a8138deb29afde894b860d0e0764b62b90d2e715b5a003173db35bef3bf923",
    "transactionHash": "0x21b5df31a0fd903e257936d9582383c40c6bb94e95b6fa7ec317a3635fe16a7f",
    "logs": [],
    "blockNumber": 10986732,
    "cumulativeGasUsed": "23259794",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "59521d43dda390ded85a5f23871f6cb8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"AutoLiquidationThresholdRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"CollateralUserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"CollateralUserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"crosschainAddressResolver\",\"type\":\"address\"}],\"name\":\"CrosschainAddressResolverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"CurrencyControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidations\",\"type\":\"address\"}],\"name\":\"LiquidationEngineUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"LiquidationPriceRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"MarginCallThresholdRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"MinCollateralRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"}],\"name\":\"Release\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReleaseUnsettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"SettleCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevPV0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevPV1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPV0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPV1\",\"type\":\"uint256\"}],\"name\":\"UpdatePV\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"}],\"name\":\"UseCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UseUnsettledCollateral\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addCollateralUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkRegisteredUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAutoLiquidationThresholdRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"}],\"name\":\"getCcyExposures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_party1\",\"type\":\"address\"}],\"name\":\"getCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\"}],\"name\":\"getExposedCurrencies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidationPriceRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarginCallThresholdRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getMaxCollateralBookWidthdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_party1\",\"type\":\"address\"}],\"name\":\"getMaxCollateralWidthdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinCollateralRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_party1\",\"type\":\"address\"}],\"name\":\"getNetAndTotalPV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_party1\",\"type\":\"address\"}],\"name\":\"getRebalanceCollateralAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalUnsettledExp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"}],\"name\":\"getUnsettledCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUnsettledCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coverage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marginCallThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoLiquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationPriceRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralRate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isCollateralUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_party1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_party0PV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_party1PV\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isSettled\",\"type\":\"bool\"}],\"name\":\"isCovered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_unsettledExp\",\"type\":\"uint256\"}],\"name\":\"isCoveredUnsettled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidationInETH\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"liquidationAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pv\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_addresses\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_chainIds\",\"type\":\"uint256[]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"}],\"name\":\"releaseCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseUnsettledCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeCollateralUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"settleCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"updateAutoLiquidationThresholdRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"updateLiquidationPriceRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marginCallThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autoLiquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationPriceRate\",\"type\":\"uint256\"}],\"name\":\"updateMainParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"updateMarginCallThresholdRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"updateMinCollateralRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prevPV0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevPV1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPV0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPV1\",\"type\":\"uint256\"}],\"name\":\"updatePV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"}],\"name\":\"useCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"useUnsettledCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptedContracts()\":{\"details\":\"Returns contract names that can call this contract.\"},\"addCollateralUser(address)\":{\"details\":\"Triggers to add contract address to collateral users address set\",\"params\":{\"_user\":\"Collateral user smart contract address\"}},\"getAutoLiquidationThresholdRate()\":{\"details\":\"Triggers to get auto liquidation threshold rate\"},\"getCoverage(address,address)\":{\"details\":\"Triggers to get bilateral position collateral coverage.\",\"params\":{\"_party0\":\"Counterparty A address\",\"_party1\":\"Counterparty B address\"}},\"getLiquidationPriceRate()\":{\"details\":\"Triggers to get liquidation price rate\"},\"getMarginCallThresholdRate()\":{\"details\":\"Triggers to get margin call threshold rate\"},\"getMaxCollateralBookWidthdraw(address)\":{\"details\":\"Triggers to get maximum amount of ETH available to widthdraw from `_user` collateral book.\",\"params\":{\"_user\":\"User's address\"}},\"getMaxCollateralWidthdraw(address,address)\":{\"details\":\"Triggers to get maximum amount of ETH available to widthdraw from bilateral position between `party0` and `_party1`.\",\"params\":{\"_party0\":\"Counterparty A address\",\"_party1\":\"Counterparty B address\"}},\"getMinCollateralRate()\":{\"details\":\"Triggers to get min collateral rate\"},\"getNetAndTotalPV(address,address)\":{\"details\":\"Triggers to calculate netted exposures across all currencies with applied haircuts\",\"params\":{\"_party0\":\"Counterparty A address\",\"_party1\":\"Counterparty B address\"}},\"getRebalanceCollateralAmounts(address,address)\":{\"details\":\"Triggers to get coverage of the global collateral book against all unsettled exposure.\",\"params\":{\"_party0\":\"Counterparty A address\",\"_party1\":\"Counterparty B address\"}},\"getTotalUnsettledExp(address)\":{\"details\":\"Triggers to calculate total unsettled exposure across all currencies\",\"params\":{\"_user\":\"User's address\"}},\"getUnsettledCoverage(address)\":{\"details\":\"Triggers to get coverage of the global collateral book against all unsettled exposure.\",\"params\":{\"_user\":\"User's address\"}},\"initialize(address,address,uint256,uint256,uint256,uint256)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController\"},\"isCollateralUser(address)\":{\"details\":\"Triggers to check if provided `addr` is a CollateralUser from address set\",\"params\":{\"_user\":\"Contract address to check if it's a CollateralUser\"}},\"isCovered(address,address,bytes32,uint256,uint256,bool)\":{\"details\":\"Triggers to check if collateral covered more that 150%.\",\"params\":{\"_ccy\":\"Currency to calculate additional PV for\",\"_party0\":\"Counterparty A address\",\"_party0PV\":\"Counterparty A additional present value\",\"_party1\":\"Counterparty B address\",\"_party1PV\":\"Counterparty B additional present value\"}},\"isCoveredUnsettled(address,bytes32,uint256)\":{\"details\":\"Triggers to check if unsettled collateral exposure covered more that 150% from a global collateral book of `_user`.\",\"params\":{\"_ccy\":\"Currency to calculate additional PV for\",\"_unsettledExp\":\"Additional exposure to lock into unsettled exposure\",\"_user\":\"User's ethereum address\"}},\"liquidate(address,address,bytes32,uint256,uint256,bool)\":{\"details\":\"Triggers to liquidate collateral between `from` and `to` parties works liquidation amount in native `ccy`\",\"params\":{\"ccy\":\"Short identifier of currency used to liquidate\",\"from\":\"Address for liquidating collateral from\",\"isSettled\":\"Identifier wether collateral obligations for release is settled\",\"liquidationAmount\":\"Liquidation amount in Ccy\",\"to\":\"Address for sending collateral to\"}},\"liquidate(address,address,uint256)\":{\"details\":\"Triggers to liquidate collateral between `from` and `to` parties works with aggregated liquidation amount in ETH\",\"params\":{\"from\":\"Address for liquidating collateral from\",\"liquidationInETH\":\"Liquidation amount in Ccy\",\"to\":\"Address for sending collateral to\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"register()\":{\"details\":\"Register user and store collateral book\"},\"register(string[],uint256[])\":{\"details\":\"Register user and store collateral book\",\"params\":{\"_addresses\":\"Array of other blockchain addresses\",\"_chainIds\":\"Array of chain ids for other blockchains\"}},\"releaseCollateral(address,address,bytes32,uint256,uint256,bool)\":{\"details\":\"Triggers to reduce PV for specific `ccy` in bilateral position between `partyA` and `partyB`\",\"params\":{\"amount0\":\"Amount of funds to be removed in CcyNetting for counterparty A\",\"amount1\":\"Amount of funds to be removed in CcyNetting for counterparty B\",\"ccy\":\"Specified currency of the deal\",\"partyA\":\"Counterparty A address\",\"partyB\":\"Counterparty B address\"}},\"releaseUnsettledCollateral(address,bytes32,uint256)\":{\"details\":\"Triggers to reduce the amount of unsettled exposure in specific `ccy` from a global collateral book of `user`\",\"params\":{\"amount\":\"Amount of funds to be unlocked from unsettled exposure in specified ccy\",\"ccy\":\"Specified currency of the deal\",\"user\":\"User's ETH address\"}},\"removeCollateralUser(address)\":{\"details\":\"Triggers to remove collateral user from address set\",\"params\":{\"_user\":\"Collateral user smart contract address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requiredContracts()\":{\"details\":\"Returns required contract names in this contract\"},\"settleCollateral(address,address,bytes32,uint256,uint256)\":{\"details\":\"Triggers to lock collateral using ETH rate for selected currency.\",\"params\":{\"amount0\":\"Amount of funds to be locked in Ccy for counterparty A\",\"amount1\":\"Amount of funds to be locked in Ccy for counterparty B\",\"ccy\":\"Specified currency of the deal\",\"partyA\":\"Counterparty A address\",\"partyB\":\"Counterparty B address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAutoLiquidationThresholdRate(uint256)\":{\"details\":\"Triggers to update liquidation level rate\",\"params\":{\"_rate\":\"Auto Liquidation level rate\"}},\"updateLiquidationPriceRate(uint256)\":{\"details\":\"Triggers to update liquidation price rate\",\"params\":{\"_rate\":\"Liquidation price rate in basis point\"}},\"updateMainParameters(uint256,uint256,uint256)\":{\"details\":\"Triggers to safely update main collateral parameters this function solves the issue of frontrunning during parameters tuning\",\"params\":{\"_autoLiquidationThresholdRate\":\"Auto liquidation threshold rate\",\"_liquidationPriceRate\":\"Liquidation price rate\",\"_marginCallThresholdRate\":\"Margin call threshold ratio\"}},\"updateMarginCallThresholdRate(uint256)\":{\"details\":\"Triggers to update margin call level\",\"params\":{\"_rate\":\"Margin call rate\"}},\"updateMinCollateralRate(uint256)\":{\"details\":\"Triggers to update minimal collateral rate\",\"params\":{\"_rate\":\"Minimal collateral rate in basis points\"}},\"updatePV(address,address,bytes32,uint256,uint256,uint256,uint256)\":{\"details\":\"Triggers to update PV value in currency for bilateral position changes present value in native currency, without exchange rate conversion\",\"params\":{\"ccy\":\"Specified currency of the deal\",\"currentPV0\":\"Current present value to be added to total exposure for counterparty A\",\"currentPV1\":\"Current present value to be added to total exposure for counterparty B\",\"party0\":\"Counterparty A address\",\"party1\":\"Counterparty B address\",\"prevPV0\":\"Previous present value to be substracted from total exposure for counterparty A\",\"prevPV1\":\"Previous present value to be substracted from total exposure for counterparty B\"}},\"useCollateral(address,address,bytes32,uint256,uint256,bool)\":{\"details\":\"Triggers to lock collateral using ETH rate for selected currency.\",\"params\":{\"amount0\":\"Amount of funds to be locked in Ccy for counterparty A\",\"amount1\":\"Amount of funds to be locked in Ccy for counterparty B\",\"ccy\":\"Specified currency of the deal\",\"partyA\":\"Counterparty A address\",\"partyB\":\"Counterparty B address\"}},\"useUnsettledCollateral(address,bytes32,uint256)\":{\"details\":\"Triggers to lock unsettled collateral on a global book for selected currency.\",\"params\":{\"amount\":\"Amount of funds to be locked in Ccy for user\",\"ccy\":\"Specified currency of the deal\",\"user\":\"User's address\"}}},\"title\":\"Collateral Aggregator contract is used to manage Secured Finance protocol collateral obligations and movements of collateral across collateral vaults. This contract handle the calculations of aggregated collateral obligations between users in a bilateral relations, calculations of required rebalancing to stabilize the bilateral position, liquidations using FX rates for all protocol currency pairs to ETH Liquidations and rebalancing operations are handled across all collateral vaults where users have deposited their funds in FIFO order. Contract linked to Product based contracts (like Loan, Swap, etc), LendingMarkets, CurrencyController contracts and Liquidation Engine.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addCollateralUser(address)\":{\"notice\":\"Trifgers only be contract ownerReverts on saving 0x0 address\"},\"initialize(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Initializes the contract.\"},\"removeCollateralUser(address)\":{\"notice\":\"Triggers only be contract ownerReverts on removing non-existing collateral user\"},\"updateAutoLiquidationThresholdRate(uint256)\":{\"notice\":\"Triggers only be contract owner\"},\"updateLiquidationPriceRate(uint256)\":{\"notice\":\"Triggers only be contract owner\"},\"updateMainParameters(uint256,uint256,uint256)\":{\"notice\":\"Triggers only be contract owner\"},\"updateMarginCallThresholdRate(uint256)\":{\"notice\":\"Triggers only be contract owner\"},\"updateMinCollateralRate(uint256)\":{\"notice\":\"Triggers only be contract owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CollateralAggregatorV2.sol\":\"CollateralAggregatorV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"},\"contracts/CollateralAggregatorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./libraries/AddressPacking.sol\\\";\\nimport \\\"./libraries/NetPV.sol\\\";\\nimport \\\"./interfaces/ICollateralAggregatorV2.sol\\\";\\nimport \\\"./mixins/MixinCollateralManagement.sol\\\";\\nimport \\\"./types/ProtocolTypes.sol\\\";\\n\\n/**\\n * @title Collateral Aggregator contract is used to manage Secured Finance\\n * protocol collateral obligations and movements of collateral across collateral vaults.\\n *\\n * This contract handle the calculations of aggregated collateral obligations between users\\n * in a bilateral relations, calculations of required rebalancing to stabilize\\n * the bilateral position, liquidations using FX rates for all protocol currency pairs to ETH\\n *\\n * Liquidations and rebalancing operations are handled across all collateral vaults where\\n * users have deposited their funds in FIFO order.\\n *\\n * Contract linked to Product based contracts (like Loan, Swap, etc),\\n * LendingMarkets, CurrencyController contracts and Liquidation Engine.\\n */\\ncontract CollateralAggregatorV2 is ICollateralAggregator, MixinCollateralManagement {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using NetPV for NetPV.CcyNetting;\\n\\n    /**\\n     * @dev Modifier to check if user registered already\\n     */\\n    modifier registeredUser(address _user) {\\n        require(Storage.slot().isRegistered[_user], \\\"NOT_REGISTERED\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check if user hasn't been registered yet\\n     */\\n    modifier nonRegisteredUser(address _user) {\\n        require(!Storage.slot().isRegistered[_user], \\\"REGISTERED_ALREADY\\\");\\n        _;\\n    }\\n\\n    // =========== COLLATERAL BOOK SECTION ===========\\n\\n    /**\\n     * @dev Register user and store collateral book\\n     */\\n    function register() public override nonRegisteredUser(msg.sender) {\\n        string[] memory _addresses = new string[](0);\\n        uint256[] memory _chainIds = new uint256[](0);\\n\\n        _register(_addresses, _chainIds);\\n    }\\n\\n    /**\\n     * @dev Register user and store collateral book\\n     * @param _addresses Array of other blockchain addresses\\n     * @param _chainIds Array of chain ids for other blockchains\\n     */\\n    function register(string[] memory _addresses, uint256[] memory _chainIds)\\n        public\\n        override\\n        nonRegisteredUser(msg.sender)\\n    {\\n        _register(_addresses, _chainIds);\\n    }\\n\\n    // TODO: Rebalance from position to book once position coverage more than 150%\\n\\n    /**\\n     * @dev Triggers to lock unsettled collateral on a global book for selected currency.\\n     * @param user User's address\\n     * @param ccy Specified currency of the deal\\n     * @param amount Amount of funds to be locked in Ccy for user\\n     */\\n    function useUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external override onlyAcceptedContracts {\\n        Storage.slot().exposedUnsettledCurrencies[user].add(ccy);\\n        require(isCoveredUnsettled(user, ccy, amount), \\\"Not enough collateral\\\");\\n\\n        Storage.slot().unsettledCollateral[user][ccy] += amount;\\n\\n        emit UseUnsettledCollateral(user, ccy, amount);\\n    }\\n\\n    /**\\n     * @dev Triggers to lock collateral using ETH rate for selected currency.\\n     * @param partyA Counterparty A address\\n     * @param partyB Counterparty B address\\n     * @param ccy Specified currency of the deal\\n     * @param amount0 Amount of funds to be locked in Ccy for counterparty A\\n     * @param amount1 Amount of funds to be locked in Ccy for counterparty B\\n     */\\n    function useCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external override onlyAcceptedContracts {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(partyA, partyB);\\n        Storage.slot().exposedCurrencies[packedAddrs].add(ccy);\\n\\n        NetPV.use(Storage.slot().ccyNettings, partyA, partyB, ccy, amount0, amount1, isSettled);\\n        _rebalanceIfRequired(partyA, partyB, true);\\n\\n        emit UseCollateral(partyA, partyB, ccy, amount0, amount1, isSettled);\\n    }\\n\\n    /**\\n     * @dev Triggers to lock collateral using ETH rate for selected currency.\\n     * @param partyA Counterparty A address\\n     * @param partyB Counterparty B address\\n     * @param ccy Specified currency of the deal\\n     * @param amount0 Amount of funds to be locked in Ccy for counterparty A\\n     * @param amount1 Amount of funds to be locked in Ccy for counterparty B\\n     */\\n    function settleCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external override onlyAcceptedContracts {\\n        NetPV.settle(Storage.slot().ccyNettings, partyA, partyB, ccy, amount0, amount1);\\n        _rebalanceIfRequired(partyA, partyB, true);\\n\\n        emit SettleCollateral(partyA, partyB, ccy, amount0, amount1);\\n    }\\n\\n    /**\\n     * @dev Triggers to calculate total unsettled exposure across all currencies\\n     * @param _user User's address\\n     */\\n    function getTotalUnsettledExp(address _user) public view override returns (uint256) {\\n        return _netTotalUnsettledAndHypotheticalPV(_user, \\\"\\\", 0);\\n    }\\n\\n    /**\\n     * @dev Triggers to calculate netted exposures across all currencies with applied haircuts\\n     * @param _party0 Counterparty A address\\n     * @param _party1 Counterparty B address\\n     */\\n    function getNetAndTotalPV(address _party0, address _party1)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return _netTotalAndHypotheticalPV(_party0, _party1, \\\"\\\", 0, 0, false);\\n    }\\n\\n    /**\\n     * @dev Triggers to check if unsettled collateral exposure covered more that 150% from a global collateral book of `_user`.\\n     * @param _user User's ethereum address\\n     * @param _ccy Currency to calculate additional PV for\\n     * @param _unsettledExp Additional exposure to lock into unsettled exposure\\n     */\\n    function isCoveredUnsettled(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) public view override returns (bool) {\\n        (uint256 coverage, ) = _calculateUnsettledCoverageAndTotalExposure(\\n            _user,\\n            _ccy,\\n            _unsettledExp\\n        );\\n        return coverage >= Storage.slot().marginCallThresholdRate;\\n    }\\n\\n    /**\\n     * @dev Triggers to check if collateral covered more that 150%.\\n     * @param _party0 Counterparty A address\\n     * @param _party1 Counterparty B address\\n     * @param _ccy Currency to calculate additional PV for\\n     * @param _party0PV Counterparty A additional present value\\n     * @param _party1PV Counterparty B additional present value\\n     */\\n    function isCovered(\\n        address _party0,\\n        address _party1,\\n        bytes32 _ccy,\\n        uint256 _party0PV,\\n        uint256 _party1PV,\\n        bool _isSettled\\n    ) public view override returns (bool, bool) {\\n        (uint256 cover0, uint256 cover1) = _calculateCoverage(\\n            _party0,\\n            _party1,\\n            _ccy,\\n            _party0PV,\\n            _party1PV,\\n            _isSettled\\n        );\\n\\n        return (cover0 >= getMarginCallThresholdRate(), cover1 >= getMarginCallThresholdRate());\\n    }\\n\\n    /**\\n     * @dev Triggers to get maximum amount of ETH available to widthdraw from `_user` collateral book.\\n     * @param _user User's address\\n     */\\n    function getMaxCollateralBookWidthdraw(address _user)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256 maxWithdraw)\\n    {\\n        (maxWithdraw, ) = _calcMaxCollateralWidthdrawFromBook(_user);\\n    }\\n\\n    /**\\n     * @dev Triggers to get maximum amount of ETH available to\\n     * widthdraw from bilateral position between `party0` and `_party1`.\\n     * @param _party0 Counterparty A address\\n     * @param _party1 Counterparty B address\\n     */\\n    function getMaxCollateralWidthdraw(address _party0, address _party1)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256, uint256)\\n    {\\n        uint256 colAdjustment0;\\n        bool isWithdraw0;\\n        uint256 colAdjustment1;\\n        bool isWithdraw1;\\n\\n        (colAdjustment0, isWithdraw0, colAdjustment1, isWithdraw1) = _calcCollateralAdjustment(\\n            _party0,\\n            _party1,\\n            \\\"\\\",\\n            0,\\n            0,\\n            false,\\n            true\\n        );\\n\\n        return (isWithdraw0 ? colAdjustment0 : 0, isWithdraw1 ? colAdjustment1 : 0);\\n    }\\n\\n    /**\\n     * @dev Triggers to get coverage of the global collateral book against all unsettled exposure.\\n     * @param _user User's address\\n     */\\n    function getUnsettledCoverage(address _user) public view override returns (uint256 coverage) {\\n        (coverage, ) = _calculateUnsettledCoverageAndTotalExposure(_user, \\\"\\\", 0);\\n    }\\n\\n    /**\\n     * @dev Triggers to get coverage of the global collateral book against all unsettled exposure.\\n     * @param _party0 Counterparty A address\\n     * @param _party1 Counterparty B address\\n     */\\n    function getRebalanceCollateralAmounts(address _party0, address _party1)\\n        public\\n        view\\n        override\\n        returns (uint256, uint256)\\n    {\\n        uint256 colAdjustment0;\\n        bool isWithdraw0;\\n        uint256 colAdjustment1;\\n        bool isWithdraw1;\\n\\n        (colAdjustment0, isWithdraw0, colAdjustment1, isWithdraw1) = _calcCollateralAdjustment(\\n            _party0,\\n            _party1,\\n            \\\"\\\",\\n            0,\\n            0,\\n            false,\\n            true\\n        );\\n\\n        return (isWithdraw0 ? 0 : colAdjustment0, isWithdraw1 ? 0 : colAdjustment1);\\n    }\\n\\n    /**\\n     * @dev Triggers to get bilateral position collateral coverage.\\n     * @param _party0 Counterparty A address\\n     * @param _party1 Counterparty B address\\n     */\\n    function getCoverage(address _party0, address _party1)\\n        public\\n        view\\n        override\\n        returns (uint256, uint256)\\n    {\\n        return _calculateCoverage(_party0, _party1, \\\"\\\", 0, 0, false);\\n    }\\n\\n    /**\\n     * @dev Triggers to reduce the amount of unsettled exposure in specific `ccy` from a global collateral book of `user`\\n     * @param user User's ETH address\\n     * @param ccy Specified currency of the deal\\n     * @param amount Amount of funds to be unlocked from unsettled exposure in specified ccy\\n     */\\n    function releaseUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external override onlyAcceptedContracts {\\n        Storage.slot().unsettledCollateral[user][ccy] -= amount;\\n\\n        if (Storage.slot().unsettledCollateral[user][ccy] == 0) {\\n            Storage.slot().exposedUnsettledCurrencies[user].remove(ccy);\\n        }\\n\\n        emit ReleaseUnsettled(user, ccy, amount);\\n    }\\n\\n    /**\\n     * @dev Triggers to reduce PV for specific `ccy` in bilateral position between `partyA` and `partyB`\\n     * @param partyA Counterparty A address\\n     * @param partyB Counterparty B address\\n     * @param ccy Specified currency of the deal\\n     * @param amount0 Amount of funds to be removed in CcyNetting for counterparty A\\n     * @param amount1 Amount of funds to be removed in CcyNetting for counterparty B\\n     */\\n    function releaseCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external override onlyAcceptedContracts {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(partyA, partyB);\\n        require(Storage.slot().exposedCurrencies[packedAddrs].contains(ccy), \\\"non-used ccy\\\");\\n\\n        NetPV.release(Storage.slot().ccyNettings, partyA, partyB, ccy, amount0, amount1, isSettled);\\n        _rebalanceIfRequired(partyA, partyB, true);\\n\\n        emit Release(partyA, partyB, ccy, amount0, amount1, isSettled);\\n    }\\n\\n    /**\\n     * @dev Triggers to update PV value in currency for bilateral position\\n     * changes present value in native currency, without exchange rate conversion\\n     * @param party0 Counterparty A address\\n     * @param party1 Counterparty B address\\n     * @param ccy Specified currency of the deal\\n     * @param prevPV0 Previous present value to be substracted from total exposure for counterparty A\\n     * @param prevPV1 Previous present value to be substracted from total exposure for counterparty B\\n     * @param currentPV0 Current present value to be added to total exposure for counterparty A\\n     * @param currentPV1 Current present value to be added to total exposure for counterparty B\\n     */\\n    function updatePV(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    ) external override onlyAcceptedContracts {\\n        NetPV.update(\\n            Storage.slot().ccyNettings,\\n            party0,\\n            party1,\\n            ccy,\\n            prevPV0,\\n            prevPV1,\\n            currentPV0,\\n            currentPV1\\n        );\\n\\n        _rebalanceIfRequired(party0, party1, true);\\n\\n        emit UpdatePV(party0, party1, ccy, prevPV0, prevPV1, currentPV0, currentPV1);\\n    }\\n\\n    /**\\n     * @dev Triggers to liquidate collateral between `from` and `to` parties\\n     * works with aggregated liquidation amount in ETH\\n     *\\n     * @param from Address for liquidating collateral from\\n     * @param to Address for sending collateral to\\n     * @param liquidationInETH Liquidation amount in Ccy\\n     */\\n    function liquidate(\\n        address from,\\n        address to,\\n        uint256 liquidationInETH\\n    ) external override onlyLiquidations {\\n        require(\\n            collateralVault().liquidate(from, to, liquidationInETH),\\n            \\\"INCORRECT_LIQUIDATION_ACROSS_VAULTS\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Triggers to liquidate collateral between `from` and `to` parties\\n     * works liquidation amount in native `ccy`\\n     *\\n     * @param from Address for liquidating collateral from\\n     * @param to Address for sending collateral to\\n     * @param ccy Short identifier of currency used to liquidate\\n     * @param liquidationAmount Liquidation amount in Ccy\\n     * @param isSettled Identifier wether collateral obligations for release is settled\\n     */\\n    function liquidate(\\n        address from,\\n        address to,\\n        bytes32 ccy,\\n        uint256 liquidationAmount,\\n        uint256 pv,\\n        bool isSettled\\n    ) external override onlyAcceptedContracts {\\n        uint256 liquidationTarget = (liquidationAmount * getAutoLiquidationThresholdRate()) /\\n            ProtocolTypes.BP;\\n        uint256 liqudationInETH = currencyController().convertToETH(ccy, liquidationTarget);\\n\\n        require(\\n            collateralVault().liquidate(from, to, liqudationInETH),\\n            \\\"INCORRECT_LIQUIDATION_ACROSS_VAULTS\\\"\\n        );\\n\\n        emit Liquidate(from, to, ccy, liquidationAmount);\\n\\n        NetPV.release(Storage.slot().ccyNettings, from, to, ccy, pv, 0, isSettled);\\n\\n        emit Release(from, to, ccy, pv, 0, isSettled);\\n\\n        _rebalanceIfRequired(from, to, true);\\n    }\\n\\n    function checkRegisteredUser(address addr) public view override returns (bool) {\\n        return Storage.slot().isRegistered[addr];\\n    }\\n\\n    function getCcyExposures(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(partyA, partyB);\\n        require(Storage.slot().exposedCurrencies[packedAddrs].contains(ccy), \\\"non-used ccy\\\");\\n        NetPV.CcyNetting memory netting = NetPV.get(\\n            Storage.slot().ccyNettings,\\n            partyA,\\n            partyB,\\n            ccy\\n        );\\n\\n        return (netting.unsettled0PV, netting.unsettled1PV, netting.party0PV, netting.party1PV);\\n    }\\n\\n    function getExposedCurrencies(address partyA, address partyB)\\n        public\\n        view\\n        override\\n        returns (bytes32[] memory)\\n    {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(partyA, partyB);\\n        EnumerableSet.Bytes32Set storage expCcy = Storage.slot().exposedCurrencies[packedAddrs];\\n\\n        uint256 numCcy = expCcy.length();\\n        bytes32[] memory currencies = new bytes32[](numCcy);\\n\\n        for (uint256 i = 0; i < numCcy; i++) {\\n            bytes32 ccy = expCcy.at(i);\\n            currencies[i] = ccy;\\n        }\\n\\n        return currencies;\\n    }\\n\\n    function getUnsettledCollateral(address user, bytes32 ccy) external view returns (uint256) {\\n        return Storage.slot().unsettledCollateral[user][ccy];\\n    }\\n\\n    // =========== INTERNAL FUNCTIONS ===========\\n\\n    /**\\n     * @dev Triggers internaly to store new collateral book\\n     */\\n    function _register(string[] memory _addresses, uint256[] memory _chainIds) internal {\\n        Storage.slot().isRegistered[msg.sender] = true;\\n        // perform onboarding steps here\\n\\n        crosschainAddressResolver().updateAddresses(msg.sender, _chainIds, _addresses);\\n\\n        emit Register(msg.sender);\\n    }\\n\\n    struct NetAndTotalPVLocalVars {\\n        bytes32 packedAddrs;\\n        bytes32 ccy;\\n        NetPV.CcyNetting netting;\\n        uint256 exchangeRate;\\n        uint256 totalUnsettledPV0inETH;\\n        uint256 totalUnsettledPV1inETH;\\n        uint256 totalPV0inETH;\\n        uint256 totalPV1inETH;\\n        uint256 totalCombinedPV0inETH;\\n        uint256 totalCombinedPV1inETH;\\n        uint256 totalHaircutPV0;\\n        uint256 totalHaircutPV1;\\n        uint256 haircutRatio;\\n        uint256 pvDiff0;\\n        uint256 pvDiff1;\\n        uint256 netPV0;\\n        uint256 netPV1;\\n        uint256 maxCcy;\\n    }\\n\\n    /**\\n     * @dev Triggers to calculate netted exposures across all currencies with applied haircuts.\\n     * Also used to calculate hypothetical Net PV with additional exposure in specific `_ccy`\\n     * @param _party0 Counterparty A address\\n     * @param _party1 Counterparty B address\\n     * @param _ccy Currency to calculate additional PV for\\n     * @param _party0PV Counterparty A additional present value\\n     * @param _party1PV Counterparty B additional present value\\n     */\\n    function _netTotalAndHypotheticalPV(\\n        address _party0,\\n        address _party1,\\n        bytes32 _ccy,\\n        uint256 _party0PV,\\n        uint256 _party1PV,\\n        bool isSettled\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        NetAndTotalPVLocalVars memory vars;\\n        (vars.packedAddrs, ) = AddressPacking.pack(_party0, _party1);\\n        EnumerableSet.Bytes32Set storage expCcy = Storage.slot().exposedCurrencies[\\n            vars.packedAddrs\\n        ];\\n\\n        vars.maxCcy = expCcy.length();\\n\\n        for (uint256 i = 0; i < vars.maxCcy; i++) {\\n            vars.ccy = expCcy.at(i);\\n\\n            if (_ccy == vars.ccy) {\\n                vars.netting = NetPV.get(\\n                    Storage.slot().ccyNettings,\\n                    _party0,\\n                    _party1,\\n                    vars.ccy,\\n                    _party0PV,\\n                    _party1PV,\\n                    isSettled\\n                );\\n            } else {\\n                vars.netting = NetPV.get(Storage.slot().ccyNettings, _party0, _party1, vars.ccy);\\n            }\\n\\n            vars.exchangeRate = uint256(currencyController().getLastETHPrice(vars.ccy));\\n            vars.netting = _convertPositionToETH(vars.netting, vars.exchangeRate);\\n\\n            vars.totalUnsettledPV0inETH = vars.totalUnsettledPV0inETH + vars.netting.unsettled0PV;\\n            vars.totalUnsettledPV1inETH = vars.totalUnsettledPV1inETH + vars.netting.unsettled1PV;\\n\\n            vars.haircutRatio = currencyController().getHaircut(vars.ccy);\\n\\n            vars.totalPV0inETH = vars.totalPV0inETH + vars.netting.party0PV;\\n            vars.totalPV1inETH = vars.totalPV1inETH + vars.netting.party1PV;\\n            vars.totalHaircutPV0 =\\n                vars.totalHaircutPV0 +\\n                (vars.netting.party0PV * vars.haircutRatio) /\\n                ProtocolTypes.BP;\\n            vars.totalHaircutPV1 =\\n                vars.totalHaircutPV1 +\\n                (vars.netting.party1PV * vars.haircutRatio) /\\n                ProtocolTypes.BP;\\n        }\\n\\n        vars.pvDiff0 = vars.totalPV0inETH >= vars.totalHaircutPV1\\n            ? vars.totalPV0inETH - vars.totalHaircutPV1\\n            : 0;\\n        vars.pvDiff1 = vars.totalPV1inETH >= vars.totalHaircutPV0\\n            ? vars.totalPV1inETH - vars.totalHaircutPV0\\n            : 0;\\n\\n        (vars.netPV0, vars.netPV1) = vars.pvDiff0 > vars.pvDiff1\\n            ? (\\n                vars.pvDiff0 - vars.pvDiff1 + vars.totalUnsettledPV0inETH,\\n                vars.totalUnsettledPV1inETH\\n            )\\n            : (\\n                vars.totalUnsettledPV0inETH,\\n                vars.pvDiff1 - vars.pvDiff0 + vars.totalUnsettledPV1inETH\\n            );\\n\\n        vars.totalCombinedPV0inETH = vars.totalUnsettledPV0inETH + vars.totalPV0inETH;\\n        vars.totalCombinedPV1inETH = vars.totalUnsettledPV1inETH + vars.totalPV1inETH;\\n\\n        return (vars.netPV0, vars.netPV1, vars.totalCombinedPV0inETH, vars.totalCombinedPV1inETH);\\n    }\\n\\n    function _convertPositionToETH(NetPV.CcyNetting memory netting, uint256 exchangeRate)\\n        internal\\n        pure\\n        returns (NetPV.CcyNetting memory)\\n    {\\n        if (netting.unsettled0PV > 0) {\\n            netting.unsettled0PV = (netting.unsettled0PV * exchangeRate) / 1e18;\\n        }\\n\\n        if (netting.unsettled1PV > 0) {\\n            netting.unsettled1PV = (netting.unsettled1PV * exchangeRate) / 1e18;\\n        }\\n\\n        if (netting.party0PV > 0) {\\n            netting.party0PV = (netting.party0PV * exchangeRate) / 1e18;\\n        }\\n\\n        if (netting.party1PV > 0) {\\n            netting.party1PV = (netting.party1PV * exchangeRate) / 1e18;\\n        }\\n\\n        return netting;\\n    }\\n\\n    struct CollateralReqLocalVars {\\n        uint256 net0;\\n        uint256 net1;\\n        uint256 total0;\\n        uint256 total1;\\n        uint256 minMarginReq0;\\n        uint256 minMarginReq1;\\n        uint256 req0;\\n        uint256 req1;\\n    }\\n\\n    /**\\n     * @dev Triggers to calculate collateral coverage for bilateral position with/without additional PV\\n     * @param _party0 Counterparty A address\\n     * @param _party0 Counterparty B address\\n     *\\n     * @return `cover0`, `cover1` uint256 coverage percentages in basis point per counterparty\\n     */\\n    // TODO: NOW\\n    function _calculateCollateralRequirements(\\n        address _party0,\\n        address _party1,\\n        bytes32 _ccy,\\n        uint256 _party0PV,\\n        uint256 _party1PV,\\n        bool _isSettled\\n    ) internal view returns (uint256, uint256) {\\n        CollateralReqLocalVars memory vars;\\n\\n        (vars.net0, vars.net1, vars.total0, vars.total1) = _netTotalAndHypotheticalPV(\\n            _party0,\\n            _party1,\\n            _ccy,\\n            _party0PV,\\n            _party1PV,\\n            _isSettled\\n        );\\n\\n        vars.minMarginReq0 = (vars.total0 * getMinCollateralRate()) / ProtocolTypes.BP;\\n        vars.minMarginReq1 = (vars.total1 * getMinCollateralRate()) / ProtocolTypes.BP;\\n\\n        if (vars.net0 > 0) {\\n            vars.req0 = vars.minMarginReq0 >\\n                (vars.net0 * getMarginCallThresholdRate()) / ProtocolTypes.BP\\n                ? vars.minMarginReq0\\n                : vars.net0;\\n        } else {\\n            vars.req0 = vars.minMarginReq0;\\n        }\\n\\n        if (vars.net1 > 0) {\\n            vars.req1 = vars.minMarginReq1 >\\n                (vars.net1 * getMarginCallThresholdRate()) / ProtocolTypes.BP\\n                ? vars.minMarginReq1\\n                : vars.net1;\\n        } else {\\n            vars.req1 = vars.minMarginReq1;\\n        }\\n\\n        return (vars.req0, vars.req1);\\n    }\\n\\n    struct CoverageCalcLocalVars {\\n        uint256 req0;\\n        uint256 req1;\\n        uint256 cover0;\\n        uint256 cover1;\\n        uint256 lockedCollateral0;\\n        uint256 lockedCollateral1;\\n    }\\n\\n    /**\\n     * @dev Triggers to calculate collateral coverage for bilateral position with/without additional PV\\n     * @param _party0 Counterparty A address\\n     * @param _party0 Counterparty B address\\n     *\\n     * @return `cover0`, `cover1` uint256 coverage percentages in basis point per counterparty\\n     */\\n    // TODO: NOW\\n    function _calculateCoverage(\\n        address _party0,\\n        address _party1,\\n        bytes32 _ccy,\\n        uint256 _party0PV,\\n        uint256 _party1PV,\\n        bool _isSettled\\n    ) internal view returns (uint256, uint256) {\\n        CoverageCalcLocalVars memory vars;\\n\\n        (vars.req0, vars.req1) = _calculateCollateralRequirements(\\n            _party0,\\n            _party1,\\n            _ccy,\\n            _party0PV,\\n            _party1PV,\\n            _isSettled\\n        );\\n\\n        (vars.lockedCollateral0, vars.lockedCollateral1) = collateralVault()\\n            .getTotalLockedCollateralInETH(_party0, _party1);\\n\\n        if (vars.req0 > 0) {\\n            vars.cover0 = (ProtocolTypes.PCT * vars.lockedCollateral0) / vars.req0;\\n        }\\n\\n        if (vars.req1 > 0) {\\n            vars.cover1 = (ProtocolTypes.PCT * vars.lockedCollateral1) / vars.req1;\\n        }\\n\\n        return (vars.cover0, vars.cover1);\\n    }\\n\\n    struct RequiredCollateralAdjustmentLocalVars {\\n        uint256 targetReq0;\\n        uint256 targetReq1;\\n        uint256 colAdjustment0;\\n        bool isWithdraw0;\\n        uint256 colAdjustment1;\\n        bool isWithdraw1;\\n        uint256 lockedCollateral0;\\n        uint256 lockedCollateral1;\\n    }\\n\\n    function _calcCollateralAdjustment(\\n        address _party0,\\n        address _party1,\\n        bytes32 _ccy,\\n        uint256 _amount0,\\n        uint256 _amount1,\\n        bool _isSettled,\\n        bool _safeRebalance\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            bool,\\n            uint256,\\n            bool\\n        )\\n    {\\n        RequiredCollateralAdjustmentLocalVars memory vars;\\n\\n        (vars.targetReq0, vars.targetReq1) = _calculateCollateralRequirements(\\n            _party0,\\n            _party1,\\n            _ccy,\\n            _amount0,\\n            _amount1,\\n            _isSettled\\n        );\\n\\n        if (_safeRebalance) {\\n            vars.targetReq0 = (vars.targetReq0 * getMarginCallThresholdRate()) / ProtocolTypes.BP;\\n            vars.targetReq1 = (vars.targetReq1 * getMarginCallThresholdRate()) / ProtocolTypes.BP;\\n        }\\n\\n        (vars.lockedCollateral0, vars.lockedCollateral1) = collateralVault()\\n            .getTotalLockedCollateralInETH(_party0, _party1);\\n\\n        (vars.colAdjustment0, vars.isWithdraw0) = _determineCollateralAdjustment(\\n            vars.lockedCollateral0,\\n            vars.targetReq0\\n        );\\n        (vars.colAdjustment1, vars.isWithdraw1) = _determineCollateralAdjustment(\\n            vars.lockedCollateral1,\\n            vars.targetReq1\\n        );\\n\\n        return (vars.colAdjustment0, vars.isWithdraw0, vars.colAdjustment1, vars.isWithdraw1);\\n    }\\n\\n    function _determineCollateralAdjustment(uint256 _lockedCollateral, uint256 _targetReq)\\n        internal\\n        pure\\n        returns (uint256 amount, bool isWithdraw)\\n    {\\n        if (_lockedCollateral > 0 && _targetReq > 0) {\\n            if (_lockedCollateral > _targetReq) {\\n                amount = _lockedCollateral - _targetReq;\\n                isWithdraw = true;\\n            } else {\\n                amount = _targetReq - _lockedCollateral;\\n                isWithdraw = false;\\n            }\\n        } else if (_lockedCollateral > 0 && _targetReq == 0) {\\n            amount = _lockedCollateral;\\n            isWithdraw = true;\\n        } else if (_lockedCollateral == 0 && _targetReq > 0) {\\n            amount = _targetReq;\\n            isWithdraw = false;\\n        }\\n\\n        return (amount, isWithdraw);\\n    }\\n\\n    struct NetUnsettledExpLocalVars {\\n        uint256 totalExp;\\n        uint256 ccyExp;\\n        uint256 ccyExpInETH;\\n        uint256 maxCcy;\\n    }\\n\\n    /**\\n     * @dev Triggers to calculate total unsettled exposure across all currencies against all global collateral books.\\n     * Also used to calculate hypothetical Net PV with additional exposure in specific `_ccy`\\n     * @param _user User's ethereum address\\n     * @param _ccy Currency to calculate additional PV for\\n     * @param _unsettledExp Additional exposure to lock into unsettled exposure\\n     */\\n    function _netTotalUnsettledAndHypotheticalPV(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) internal view returns (uint256) {\\n        EnumerableSet.Bytes32Set storage expCcy = Storage.slot().exposedUnsettledCurrencies[_user];\\n\\n        NetUnsettledExpLocalVars memory vars;\\n\\n        vars.maxCcy = expCcy.length();\\n\\n        for (uint256 i = 0; i < vars.maxCcy; i++) {\\n            bytes32 ccy = expCcy.at(i);\\n            vars.ccyExp = Storage.slot().unsettledCollateral[_user][ccy];\\n\\n            if (_ccy == ccy) {\\n                vars.ccyExp = vars.ccyExp + _unsettledExp;\\n            }\\n\\n            vars.ccyExpInETH = currencyController().convertToETH(ccy, vars.ccyExp);\\n            vars.totalExp = vars.totalExp + vars.ccyExpInETH;\\n        }\\n\\n        return vars.totalExp;\\n    }\\n\\n    struct UnsettledCoverageLocalVars {\\n        uint256 totalExpInETH;\\n        uint256 coverage;\\n        uint256 independentAmount;\\n    }\\n\\n    function _calculateUnsettledCoverageAndTotalExposure(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) internal view returns (uint256, uint256) {\\n        UnsettledCoverageLocalVars memory vars;\\n\\n        vars.totalExpInETH = _netTotalUnsettledAndHypotheticalPV(_user, _ccy, _unsettledExp);\\n        vars.independentAmount = collateralVault().getTotalIndependentCollateralInETH(_user);\\n\\n        if (vars.totalExpInETH > 0) {\\n            vars.coverage = (ProtocolTypes.PCT * vars.independentAmount) / vars.totalExpInETH;\\n        } else {\\n            return (0, vars.totalExpInETH);\\n        }\\n\\n        return (vars.coverage, vars.totalExpInETH);\\n    }\\n\\n    struct MaxCollateralBookWidthdrawLocalVars {\\n        uint256 totalExpInETH;\\n        uint256 coverage;\\n        uint256 delta;\\n        uint256 maxWidthdraw;\\n        uint256 independentAmount;\\n    }\\n\\n    /**\\n     * @dev Triggers to calculate maximum amount of ETH available to widthdraw from `_user` collateral book\\n     * @param _user User's ethereum address\\n     *\\n     * @return `maxWidthdraw` max widthdrawable amount of ETH\\n     */\\n    function _calcMaxCollateralWidthdrawFromBook(address _user)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        MaxCollateralBookWidthdrawLocalVars memory vars;\\n\\n        (vars.coverage, vars.totalExpInETH) = _calculateUnsettledCoverageAndTotalExposure(\\n            _user,\\n            \\\"\\\",\\n            0\\n        );\\n        vars.independentAmount = collateralVault().getTotalIndependentCollateralInETH(_user);\\n\\n        if (vars.coverage > getMarginCallThresholdRate()) {\\n            // TODO: discuss if it makes sense to decrease to 100%\\n            vars.delta = vars.coverage - getMarginCallThresholdRate();\\n\\n            vars.maxWidthdraw = (vars.independentAmount * vars.delta) / vars.coverage;\\n        } else if (vars.totalExpInETH == 0) {\\n            return (vars.independentAmount, vars.totalExpInETH);\\n        } else {\\n            return (0, vars.totalExpInETH);\\n        }\\n\\n        return (vars.maxWidthdraw, vars.totalExpInETH);\\n    }\\n\\n    function _rebalanceIfRequired(\\n        address _party0,\\n        address _party1,\\n        bool _safeRebalance\\n    ) internal {\\n        (\\n            uint256 rebalance0,\\n            bool isRebalanceFrom0,\\n            uint256 rebalance1,\\n            bool isRebalanceFrom1\\n        ) = _calcCollateralAdjustment(_party0, _party1, \\\"\\\", 0, 0, false, _safeRebalance);\\n\\n        if (rebalance0 > 0) {\\n            require(\\n                collateralVault().rebalanceCollateral(\\n                    _party0,\\n                    _party1,\\n                    rebalance0,\\n                    isRebalanceFrom0\\n                ),\\n                \\\"NON_ENOUGH_FUNDS_FOR_REBALANCE\\\"\\n            );\\n        }\\n\\n        if (rebalance1 > 0) {\\n            require(\\n                collateralVault().rebalanceCollateral(\\n                    _party1,\\n                    _party0,\\n                    rebalance1,\\n                    isRebalanceFrom1\\n                ),\\n                \\\"NON_ENOUGH_FUNDS_FOR_REBALANCE\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7b12b29f32f88ff3522d8aec0eadbb026529b54c764c0b01859652b37922ae02\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/interfaces/ICloseOutNetting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICloseOutNetting {\\n    event AddCloseOutPayments(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event RemoveCloseOutPayments(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event SettleCloseOut(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 netPayment,\\n        bytes32 txHash\\n    );\\n    event VerifyCloseOut(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 netPayment,\\n        bytes32 txHash\\n    );\\n\\n    function addPayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) external;\\n\\n    function checkDefault(address _party) external view returns (bool);\\n\\n    function removePayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6bbe6c9de500443c72cde8832c0ff9c921c6f38ace09523d3a1769f6e855830e\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralAggregatorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICollateralAggregator {\\n    event Register(address indexed addr);\\n    event Release(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    );\\n    event Liquidate(address indexed from, address indexed to, bytes32 ccy, uint256 amount);\\n    event ReleaseUnsettled(address indexed party, bytes32 ccy, uint256 amount);\\n    event SettleCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event UpdatePV(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    );\\n    event UseCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    );\\n    event UseUnsettledCollateral(address indexed party, bytes32 ccy, uint256 amount);\\n\\n    function checkRegisteredUser(address addr) external view returns (bool);\\n\\n    function getCcyExposures(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getCoverage(address _party0, address _party1) external view returns (uint256, uint256);\\n\\n    function getExposedCurrencies(address partyA, address partyB)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getMaxCollateralBookWidthdraw(address _user)\\n        external\\n        view\\n        returns (uint256 maxWithdraw);\\n\\n    function getMaxCollateralWidthdraw(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getNetAndTotalPV(address _party0, address _party1)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getRebalanceCollateralAmounts(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getTotalUnsettledExp(address _user) external view returns (uint256);\\n\\n    function getUnsettledCoverage(address _user) external view returns (uint256 coverage);\\n\\n    function isCovered(\\n        address _party0,\\n        address _party1,\\n        bytes32 _ccy,\\n        uint256 _party0PV,\\n        uint256 _party1PV,\\n        bool _isSettled\\n    ) external view returns (bool, bool);\\n\\n    function isCoveredUnsettled(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) external view returns (bool);\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        uint256 liquidationInETH\\n    ) external;\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        bytes32 ccy,\\n        uint256 liquidationAmount,\\n        uint256 pv,\\n        bool isSettled\\n    ) external;\\n\\n    function register() external;\\n\\n    function register(string[] memory _addresses, uint256[] memory _chainIds) external;\\n\\n    function releaseCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function releaseUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function settleCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external;\\n\\n    function updatePV(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    ) external;\\n\\n    function useCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function useUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function getUnsettledCollateral(address user, bytes32 ccy) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6ce0f77af603bba3166a03eebf4b1679a78491c64cce912331765889583a4369\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICollateralVault {\\n    event Deposit(address user, bytes32 ccy, uint256 amount);\\n    event PositionDeposit(address user, address counterparty, bytes32 ccy, uint256 amount);\\n    event RebalanceBetween(\\n        address user,\\n        address fromCounterparty,\\n        address toCounterparty,\\n        bytes32 ccy,\\n        uint256 amount\\n    );\\n    event RebalanceFrom(address user, address counterparty, bytes32 ccy, uint256 amount);\\n    event RebalanceTo(address user, address counterparty, bytes32 ccy, uint256 amount);\\n    event Withdraw(address from, bytes32 ccy, uint256 amount);\\n    event PositionWithdraw(address from, address counterparty, bytes32 ccy, uint256 amount);\\n    event Liquidate(address from, address to, bytes32 ccy, uint256 amount);\\n    event LiquidateIndependent(address from, address to, bytes32 ccy, uint256 amount);\\n\\n    function deposit(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external;\\n\\n    function deposit(bytes32 _ccy, uint256 _amount) external payable;\\n\\n    function getIndependentCollateral(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getIndependentCollateralInETH(address _user, bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLockedCollateral(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getLockedCollateralInETH(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getLockedCollateral(\\n        address _partyA,\\n        address _partyB,\\n        bytes32 _ccy\\n    ) external view returns (uint256, uint256);\\n\\n    function getLockedCollateralInETH(\\n        address _partyA,\\n        address _partyB,\\n        bytes32 _ccy\\n    ) external view returns (uint256, uint256);\\n\\n    function liquidate(\\n        address _from,\\n        address _to,\\n        uint256 _liquidationTarget\\n    ) external returns (bool);\\n\\n    function rebalanceCollateral(\\n        address _party0,\\n        address _party1,\\n        uint256 _rebalanceTarget,\\n        bool isRebalanceFrom\\n    ) external returns (bool);\\n\\n    function rebalanceBetween(\\n        address _user,\\n        address _fromParty,\\n        address _toParty,\\n        bytes32 _ccy,\\n        uint256 _amountETH\\n    ) external returns (uint256);\\n\\n    function withdraw(bytes32 _ccy, uint256 _amount) external;\\n\\n    function withdrawFrom(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external;\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getUsedCurrencies(address party0, address party1)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getTotalIndependentCollateralInETH(address _party) external view returns (uint256);\\n\\n    function getTotalLockedCollateralInETH(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x05a973a84165750802bf97f2c889467191ae0a99fb50221149f46b9df35bdd6e\",\"license\":\"MIT\"},\"contracts/interfaces/ICrosschainAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICrosschainAddressResolver {\\n    event UpdateAddress(address _user, uint256 _chainId, string _address);\\n\\n    /**\\n     * @dev Trigers to register multiple cross-chain addresses per chainId for user\\n     * @param _user Secured Finance user ETH address\\n     * @param _chainIds Array of chain ID number\\n     * @param _addresses Array of the target blockchain addresses\\n     *\\n     * @notice This function triggers by the Collateral Aggregator while user is registered in a system\\n     *\\n     */\\n    function updateAddresses(\\n        address _user,\\n        uint256[] memory _chainIds,\\n        string[] memory _addresses\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to register cross-chain address per chainId by user\\n     * @param _chainId Chain ID number\\n     * @param _address Target blockchain address\\n     *\\n     */\\n    function updateAddress(uint256 _chainId, string memory _address) external;\\n\\n    /**\\n     * @dev Trigers to register cross-chain address per chainId by user\\n     * @param _user Secured Finance user ETH address\\n     * @param _chainId Chain ID number\\n     * @param _address Target blockchain address\\n     *\\n     */\\n    function updateAddress(\\n        address _user,\\n        uint256 _chainId,\\n        string memory _address\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to get target blockchain address for a specific user.\\n     * @param _user Ethereum address of the Secured Finance user\\n     * @param _user Chain ID number\\n     */\\n    function getUserAddress(address _user, uint256 _chainId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ef89efa2bd508258da18e2ca2699cb07847d75d6df996cde56b8f6d524d7db8\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CcyAdded(bytes32 indexed ccy, string name, uint16 chainId, uint256 haircut);\\n    event CcyCollateralUpdate(bytes32 indexed ccy, bool isCollateral);\\n    event CcySupportUpdate(bytes32 indexed ccy, bool isSupported);\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n    event MinMarginUpdated(bytes32 indexed ccy, uint256 minMargin);\\n    event PriceFeedAdded(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n    event PriceFeedRemoved(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n\\n    function convertBulkToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH) external view returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256);\\n\\n    function getCurrencies(bytes32) external view returns (ProtocolTypes.Currency memory);\\n\\n    function getEthDecimals(bytes32) external view returns (uint8);\\n\\n    function getUsdDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getMinMargin(bytes32 _ccy) external view returns (uint256);\\n\\n    function getChainId(bytes32 _ccy) external view returns (uint16);\\n\\n    function isCollateral(bytes32) external view returns (bool);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        uint16 _chainId,\\n        address _ethPriceFeed,\\n        uint256 _haircut,\\n        address _tokenAddress\\n    ) external;\\n\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function updateCollateralSupport(bytes32 _ccy, bool _isSupported) external;\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported) external;\\n\\n    function updateMinMargin(bytes32 _ccy, uint256 _minMargin) external;\\n\\n    function getTokenAddresses(bytes32) external view returns (address);\\n}\\n\",\"keccak256\":\"0x0bad90929934b6a43200ae276697a9e428d47b119120ea81208778ced9abbe76\",\"license\":\"MIT\"},\"contracts/interfaces/IExternalAdapterTxResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IExternalAdapterTxResponse {\\n    struct FulfillData {\\n        string from;\\n        string to;\\n        uint256 value;\\n        uint256 timestamp;\\n        string txHash;\\n    }\\n}\\n\",\"keccak256\":\"0x2fde36d406ead00758aeccdf58fd8be1b32cf2fd3fd2061824d538bd06d4ab4c\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\nstruct Order {\\n    bytes32 ccy;\\n    uint256 term;\\n    ProtocolTypes.Side side;\\n    uint256 amount;\\n    uint256 rate;\\n}\\n\\ninterface ILendingMarketController {\\n    event LendingMarketCreated(bytes32 ccy, uint256 term, address indexed marketAddr);\\n    event LendingMarketsPaused(bytes32 ccy);\\n    event LendingMarketsUnpaused(bytes32 ccy);\\n\\n    function deployLendingMarket(bytes32 _ccy, uint256 _term) external returns (address market);\\n\\n    function getBorrowRatesForCcy(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getDiscountFactorsForCcy(bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256[] memory, uint256[] memory);\\n\\n    function getLendRatesForCcy(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getMidRatesForCcy(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getLendingMarket(bytes32, uint256) external view returns (address);\\n\\n    function pauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function placeBulkOrders(Order[] memory orders) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function getSupportedTerms(bytes32 _ccy) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x8c2a321d93fb14a1878ffb332e03d8201c4998ecca88b8862347855787ebf49c\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ILiquidations {\\n    event DealAddedToLiquidationQueue(address party0, address party1, bytes32 dealId);\\n    event DealRemovedFromLiquidationQueue(address party0, address party1, bytes32 dealId);\\n    event LiquidationAgentAdded(address indexed liquidationAgent);\\n    event LiquidationAgentRemoved(address indexed liquidationAgent);\\n    event OffsetUpdated(uint256 oldOffset, uint256 newOffset);\\n\\n    function addDealToLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external;\\n\\n    function addLiquidationAgent(address _liquidationAgent) external;\\n\\n    function liquidateDeals(\\n        address party0,\\n        address party1,\\n        bytes32[] memory dealIds\\n    ) external;\\n\\n    function liquidateDeals(address party0, address party1) external;\\n\\n    function getOffset() external view returns (uint256);\\n\\n    function removeDealFromLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external;\\n\\n    function removeLiquidationAgent(address _liquidationAgent) external;\\n\\n    function updateLiquidationOffset(uint256 _offset) external;\\n}\\n\",\"keccak256\":\"0x4e2784b0014ff688a60c4628cc1ebab63ca0aa40aa9949dbde6d53c69dbe3746\",\"license\":\"MIT\"},\"contracts/interfaces/IMarkToMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IMarkToMarket {\\n    function updatePV(bytes32 dealId) external;\\n\\n    function updatePVs(bytes32[] memory dealIds) external;\\n}\\n\",\"keccak256\":\"0xb100f8c173fda11136c5579306d99065752bb797bff6ffe91c64eee228ae2df9\",\"license\":\"MIT\"},\"contracts/interfaces/IMixinCollateralManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IMixinCollateralManagement {\\n    event CollateralUserAdded(address indexed user);\\n    event CollateralUserRemoved(address indexed user);\\n\\n    event CurrencyControllerUpdated(address indexed controller);\\n    event LiquidationEngineUpdated(address indexed liquidations);\\n    event CrosschainAddressResolverUpdated(address indexed crosschainAddressResolver);\\n\\n    event LiquidationPriceRateUpdated(uint256 previousPrice, uint256 price);\\n    event AutoLiquidationThresholdRateUpdated(uint256 previousRatio, uint256 ratio);\\n    event MarginCallThresholdRateUpdated(uint256 previousRatio, uint256 ratio);\\n    event MinCollateralRateUpdated(uint256 previousRatio, uint256 price);\\n\\n    function getAutoLiquidationThresholdRate() external view returns (uint256);\\n\\n    function getLiquidationPriceRate() external view returns (uint256);\\n\\n    function getMarginCallThresholdRate() external view returns (uint256);\\n\\n    function getMinCollateralRate() external view returns (uint256);\\n\\n    function addCollateralUser(address _user) external returns (bool);\\n\\n    function removeCollateralUser(address _user) external returns (bool);\\n\\n    function isCollateralUser(address _user) external view returns (bool);\\n\\n    function updateMainParameters(\\n        uint256 _marginCallThresholdRate,\\n        uint256 _autoLiquidationThresholdRate,\\n        uint256 _liquidationPriceRate\\n    ) external;\\n\\n    function updateLiquidationPriceRate(uint256 _price) external;\\n\\n    function updateAutoLiquidationThresholdRate(uint256 _ratio) external;\\n\\n    function updateMarginCallThresholdRate(uint256 _ratio) external;\\n\\n    function updateMinCollateralRate(uint256 _ratio) external;\\n}\\n\",\"keccak256\":\"0xebc674c5c1ff3787f56349e8cf95d7b4723d07a5ca4e61e1ce70ebd3cb5889cf\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct Slot {\\n    uint256 totalPayment0;\\n    uint256 totalPayment1;\\n    uint256 netPayment;\\n    bool flipped;\\n    bytes32 paymentProof;\\n    address verificationParty;\\n    bool isSettled;\\n}\\n\\ninterface IPaymentAggregator {\\n    event RegisterPayment(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event VerifyPayment(\\n        address indexed verifier,\\n        address indexed counterparty,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment,\\n        bytes32 settlementId\\n    );\\n    event SettlePayment(\\n        address indexed verifier,\\n        address indexed counterparty,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        bytes32 settlementId\\n    );\\n    event RemovePayment(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n\\n    function registerPayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 dealId,\\n        uint256[] memory timestamps,\\n        uint256[] memory payments0,\\n        uint256[] memory payments1\\n    ) external;\\n\\n    function removePayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 dealId,\\n        uint256[] calldata timestamps,\\n        uint256[] calldata payments0,\\n        uint256[] calldata payments1\\n    ) external;\\n\\n    function verifyPayment(\\n        address verifier,\\n        address counterparty,\\n        bytes32 ccy,\\n        uint256 timestamp,\\n        uint256 payment,\\n        bytes32 settlementId\\n    ) external;\\n\\n    function isSettled(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 timestamp\\n    ) external view returns (bool status);\\n\\n    function getDealsFromSlot(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 slotPosition\\n    ) external view returns (bytes32[] memory);\\n\\n    // function getTimeSlotByDate(\\n    //     address party0,\\n    //     address party1,\\n    //     bytes32 ccy,\\n    //     uint256 year,\\n    //     uint256 month,\\n    //     uint256 day\\n    // ) external view returns (Slot memory timeSlot);\\n\\n    // function getTimeSlotBySlotId(\\n    //     address party0,\\n    //     address party1,\\n    //     bytes32 ccy,\\n    //     bytes32 slot\\n    // ) external view returns (Slot memory timeSlot);\\n\\n    function checkSettlementWindow(uint256 targetTime) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x626f4bb7d28a476b21c2bc18278a091f134fbd98a6e06e586cd63180184518f4\",\"license\":\"MIT\"},\"contracts/interfaces/IProductAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IProductAddressResolver {\\n    event RegisterProduct(bytes4 prefix, address indexed product, address indexed controller);\\n\\n    /**\\n     * @dev Triggers to register new product type in a address resolver\\n     * @param _prefix Bytes4 prefix for product type\\n     * @param _contract Product contract address\\n     * @param _controller Market controller address\\n     *\\n     * @notice Triggers only be contract owner\\n     * @notice Reverts on saving contract which is not supporting a common interface\\n     */\\n    function registerProduct(\\n        bytes4 _prefix,\\n        address _contract,\\n        address _controller\\n    ) external;\\n\\n    /**\\n     * @dev Triggers to register several product types in a address resolver\\n     * @param _prefixes Array of Bytes4 prefixes for each product type\\n     * @param _contracts Array of smart contract addresses for each product\\n     * @param _controllers Array of market controller addresses\\n     *\\n     * @notice Triggers only be contract owner\\n     * @notice Reverts on saving contract which is not supporting common interface\\n     */\\n    function registerProducts(\\n        bytes4[] calldata _prefixes,\\n        address[] calldata _contracts,\\n        address[] calldata _controllers\\n    ) external;\\n\\n    /**\\n     * @dev Triggers to get product address by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContract(bytes4 _prefix) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to get product addresses\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContracts() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Triggers to get product address by deal id\\n     * @param _dealId Product deal idenfitier\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContractByDealId(bytes32 _dealId) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to get market controller address by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     * @notice To work with the contract this address should be wrapped around IYieldCurve interface\\n     */\\n    function getControllerContract(bytes4 _prefix) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to get market controller address by deal id\\n     * @param _dealId Product deal idenfitier\\n     * @notice To work with the contract this address should be wrapped around IYieldCurve interface\\n     */\\n    function getControllerContractByDealId(bytes32 _dealId) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product is supported by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     */\\n    function isSupportedProduct(bytes4 _prefix) external view returns (bool);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product is supported by deal id.\\n     * @param _dealId Product deal idenfitier\\n     */\\n    function isSupportedProductByDealId(bytes32 _dealId) external view returns (bool);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product contract is registered.\\n     * @param _product Product contract address\\n     */\\n    function isRegisteredProductContract(address _product) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x44855f57913172a86e203a89d7713efe1ec39351a0830b0f35fac9ffa24ec770\",\"license\":\"MIT\"},\"contracts/interfaces/ISettlementEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.3. SEE SOURCE BELOW. !!\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IExternalAdapterTxResponse.sol\\\";\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ISettlementEngine {\\n    event CrosschainSettlementRequested(\\n        address payer,\\n        address receiver,\\n        uint16 chainId,\\n        uint256 timestamp,\\n        string txHash,\\n        bytes32 requestId\\n    );\\n    event CrosschainSettlementRequestFulfilled(\\n        string payer,\\n        string receiver,\\n        uint16 chainId,\\n        uint256 amount,\\n        uint256 timestamp,\\n        string txHash,\\n        bytes32 settlementId\\n    );\\n    event ExternalAdapterAdded(address indexed adapter, bytes32 ccy);\\n\\n    function addExternalAdapter(address _adapter, bytes32 _ccy) external;\\n\\n    function getExternalAdapters(bytes32) external view returns (address);\\n\\n    function fulfillSettlementRequest(\\n        bytes32 _requestId,\\n        IExternalAdapterTxResponse.FulfillData calldata _txData,\\n        bytes32 _ccy\\n    ) external;\\n\\n    function getVersion() external view returns (uint16);\\n\\n    function getSettlementRequests(bytes32)\\n        external\\n        view\\n        returns (ProtocolTypes.SettlementRequest memory);\\n\\n    function verifyPayment(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _payment,\\n        uint256 _timestamp,\\n        string calldata _txHash\\n    ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3888a41e40b8eb2cebf8557436b0f09286dfaeb08a3762a33c0a6ae0521f67a3\",\"license\":\"MIT\"},\"contracts/interfaces/ITermStructure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ITermStructure {\\n    event TermAdded(uint256 numDays);\\n    event ProductTermSupportUpdated(\\n        uint256 numDays,\\n        bytes4 product,\\n        bytes32 _ccy,\\n        bool isSupported\\n    );\\n    event TermSupportUpdated(uint256 numDays, bool isSupported);\\n\\n    function getDfFrac(uint256 _numDays) external view returns (uint256);\\n\\n    function getNumDays(uint256 _numDays) external view returns (uint256);\\n\\n    function getNumPayments(uint256 _numDays, uint8 frequency) external view returns (uint256);\\n\\n    function getTerm(uint256 _numDays, uint8 frequency)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getTermSchedule(uint256 _numDays, uint8 frequency)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isSupportedTerm(\\n        uint256 _numDays,\\n        bytes4 _product,\\n        bytes32 _ccy\\n    ) external view returns (bool);\\n\\n    function supportTerm(\\n        uint256 _numDays,\\n        bytes4[] memory _products,\\n        bytes32[] memory _currencies\\n    ) external;\\n\\n    function updateTermSupport(\\n        uint256 _numDays,\\n        bytes4 _product,\\n        bytes32 _ccy,\\n        bool _isSupported\\n    ) external;\\n\\n    function getTermsForProductAndCcy(\\n        bytes4 _product,\\n        bytes32 _ccy,\\n        bool sort\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x8509c4f927878626ee8cb73d0fb2daa0cf0a7c9869bb6241ccc180d0854544f4\",\"license\":\"MIT\"},\"contracts/libraries/AddressPacking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary AddressPacking {\\n    /**\\n     * @dev Packs two addresses into one hash to reduce the number of arguments\\n     * @param addr0 First address\\n     * @param addr1 Second address\\n     * @return Boolean to identify if addresses were flipped\\n     */\\n    function pack(address addr0, address addr1) internal pure returns (bytes32, bool) {\\n        require(addr0 != addr1, \\\"Identical addresses\\\");\\n        (address _addr0, address _addr1) = addr0 < addr1 ? (addr0, addr1) : (addr1, addr0);\\n        require(_addr0 != address(0), \\\"Invalid address\\\");\\n\\n        if (_addr0 != addr0) {\\n            return (keccak256(abi.encode(_addr0, _addr1)), true);\\n        } else {\\n            return (keccak256(abi.encode(_addr0, _addr1)), false);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x545d44428f420fcace95eecc5a7483a055154741753a4a4ff4c50b77c2a230fa\",\"license\":\"MIT\"},\"contracts/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant CLOSE_OUT_NETTING = \\\"CloseOutNetting\\\";\\n    bytes32 internal constant COLLATERAL_AGGREGATOR = \\\"CollateralAggregator\\\";\\n    bytes32 internal constant COLLATERAL_VAULT = \\\"CollateralVault\\\";\\n    bytes32 internal constant CROSSCHAIN_ADDRESS_RESOLVER = \\\"CrosschainAddressResolver\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant LIQUIDATIONS = \\\"Liquidations\\\";\\n    bytes32 internal constant MARK_TO_MARKET = \\\"MarkToMarket\\\";\\n    bytes32 internal constant PAYMENT_AGGREGATOR = \\\"PaymentAggregator\\\";\\n    bytes32 internal constant PRODUCT_ADDRESS_RESOLVER = \\\"ProductAddressResolver\\\";\\n    bytes32 internal constant SETTLEMENT_ENGINE = \\\"SettlementEngine\\\";\\n    bytes32 internal constant TERM_STRUCTURE = \\\"TermStructure\\\";\\n}\\n\",\"keccak256\":\"0x939f50a87aa51db235c78c3c224edc9123271a5b44974e13557e4590958e83df\",\"license\":\"MIT\"},\"contracts/libraries/NetPV.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./AddressPacking.sol\\\";\\n\\nlibrary NetPV {\\n    /**\\n     * @dev CcyNetting keeps track of total amount of obligations owed\\n     * by two counterparties per currency, used to calculate the\\n     * total amount of collateral coverage in bilateral position\\n     */\\n    struct CcyNetting {\\n        uint256 unsettled0PV;\\n        uint256 unsettled1PV;\\n        uint256 party0PV;\\n        uint256 party1PV;\\n    }\\n\\n    /**\\n     * @dev Helper to return CcyNetting structure in correct order acccording\\n     * to in which order counterparty addresses are passed\\n     */\\n    function _handleFlippedCase(NetPV.CcyNetting memory netting, bool flipped)\\n        internal\\n        pure\\n        returns (NetPV.CcyNetting memory)\\n    {\\n        if (flipped) {\\n            uint256 unsettledPV = netting.unsettled0PV;\\n            uint256 partyPV = netting.party0PV;\\n\\n            netting.unsettled0PV = netting.unsettled1PV;\\n            netting.unsettled1PV = unsettledPV;\\n            netting.party0PV = netting.party1PV;\\n            netting.party1PV = partyPV;\\n        }\\n\\n        return netting;\\n    }\\n\\n    /**\\n     * @dev Returns the present value netting between 2 counterparties\\n     * @param self The mapping with all present value nettings per currency\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Present value currency\\n     */\\n    function get(\\n        mapping(bytes32 => mapping(bytes32 => NetPV.CcyNetting)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy\\n    ) internal view returns (NetPV.CcyNetting memory netting) {\\n        (bytes32 packedAddrs, bool flipped) = AddressPacking.pack(party0, party1);\\n        netting = self[packedAddrs][ccy];\\n        netting = _handleFlippedCase(netting, flipped);\\n    }\\n\\n    /**\\n     * @dev Returns the present value netting between 2 counterparties\\n     * including hypothetical present value\\n     *\\n     * @param self The mapping with all present value nettings per currency\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Present value currency\\n     * @param additionalPV0 Hypothetical PV for first party\\n     * @param additionalPV1 Hypothetical PV for second party\\n     * @param isSettled Boolean wether hypothetical PV settled or not\\n     */\\n    function get(\\n        mapping(bytes32 => mapping(bytes32 => NetPV.CcyNetting)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 additionalPV0,\\n        uint256 additionalPV1,\\n        bool isSettled\\n    ) internal view returns (NetPV.CcyNetting memory netting) {\\n        (bytes32 packedAddrs, bool flipped) = AddressPacking.pack(party0, party1);\\n        netting = self[packedAddrs][ccy];\\n        netting = _handleFlippedCase(netting, flipped);\\n\\n        if (isSettled) {\\n            netting.party0PV = netting.party0PV + additionalPV0;\\n            netting.party1PV = netting.party1PV + additionalPV1;\\n        } else {\\n            netting.unsettled0PV = netting.unsettled0PV + additionalPV0;\\n            netting.unsettled1PV = netting.unsettled1PV + additionalPV1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers to increase the amount of obligations in PV netting\\n     * @param self The mapping with all present value nettings per currency\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Present value currency\\n     * @param amount0 Amount of funds to be added for first counterparty\\n     * @param amount1 Amount of funds to be added for second counterparty\\n     * @param isSettled Boolean statement if obligations are settled already\\n     */\\n    function use(\\n        mapping(bytes32 => mapping(bytes32 => NetPV.CcyNetting)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) internal {\\n        (bytes32 packedAddrs, bool flipped) = AddressPacking.pack(party0, party1);\\n        NetPV.CcyNetting storage netting = self[packedAddrs][ccy];\\n\\n        if (!flipped) {\\n            if (amount0 > 0) {\\n                if (isSettled) {\\n                    netting.party0PV = netting.party0PV + amount0;\\n                } else {\\n                    netting.unsettled0PV = netting.unsettled0PV + amount0;\\n                }\\n            }\\n            if (amount1 > 0) {\\n                if (isSettled) {\\n                    netting.party1PV = netting.party1PV + amount1;\\n                } else {\\n                    netting.unsettled1PV = netting.unsettled1PV + amount1;\\n                }\\n            }\\n        } else {\\n            if (amount0 > 0) {\\n                if (isSettled) {\\n                    netting.party1PV = netting.party1PV + amount0;\\n                } else {\\n                    netting.unsettled1PV = netting.unsettled1PV + amount0;\\n                }\\n            }\\n            if (amount1 > 0) {\\n                if (isSettled) {\\n                    netting.party0PV = netting.party0PV + amount1;\\n                } else {\\n                    netting.unsettled0PV = netting.unsettled0PV + amount1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers to settle previously added obligations in PV netting\\n     * @param self The mapping with all present value nettings per currency\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Present value currency\\n     * @param amount0 Amount of funds to be settled for first counterparty\\n     * @param amount1 Amount of funds to be settled for second counterparty\\n     */\\n    function settle(\\n        mapping(bytes32 => mapping(bytes32 => NetPV.CcyNetting)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal {\\n        (bytes32 packedAddrs, bool flipped) = AddressPacking.pack(party0, party1);\\n        NetPV.CcyNetting storage netting = self[packedAddrs][ccy];\\n\\n        if (!flipped) {\\n            if (amount0 > 0) {\\n                netting.unsettled0PV = netting.unsettled0PV - amount0;\\n                netting.party0PV = netting.party0PV + amount0;\\n            }\\n            if (amount1 > 0) {\\n                netting.unsettled1PV = netting.unsettled1PV - amount1;\\n                netting.party1PV = netting.party1PV + amount1;\\n            }\\n        } else {\\n            if (amount0 > 0) {\\n                netting.unsettled1PV = netting.unsettled1PV - amount0;\\n                netting.party1PV = netting.party1PV + amount0;\\n            }\\n            if (amount1 > 0) {\\n                netting.unsettled0PV = netting.unsettled0PV - amount1;\\n                netting.party0PV = netting.party0PV + amount1;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers to release PV obligations from netting\\n     * @param self The mapping with all present value nettings per currency\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Present value currency\\n     * @param amount0 Amount of funds to be removed for first counterparty\\n     * @param amount1 Amount of funds to be removed for second counterparty\\n     */\\n    function release(\\n        mapping(bytes32 => mapping(bytes32 => NetPV.CcyNetting)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) internal {\\n        (bytes32 packedAddrs, bool flipped) = AddressPacking.pack(party0, party1);\\n        NetPV.CcyNetting storage netting = self[packedAddrs][ccy];\\n\\n        if (!flipped) {\\n            if (amount0 > 0) {\\n                if (isSettled) {\\n                    netting.party0PV = netting.party0PV - amount0;\\n                } else {\\n                    netting.unsettled0PV = netting.unsettled0PV - amount0;\\n                }\\n            }\\n            if (amount1 > 0) {\\n                if (isSettled) {\\n                    netting.party1PV = netting.party1PV - amount1;\\n                } else {\\n                    netting.unsettled1PV = netting.unsettled1PV - amount1;\\n                }\\n            }\\n        } else {\\n            if (amount0 > 0) {\\n                if (isSettled) {\\n                    netting.party1PV = netting.party1PV - amount0;\\n                } else {\\n                    netting.unsettled1PV = netting.unsettled1PV - amount0;\\n                }\\n            }\\n            if (amount1 > 0) {\\n                if (isSettled) {\\n                    netting.party0PV = netting.party0PV - amount1;\\n                } else {\\n                    netting.unsettled0PV = netting.unsettled0PV - amount1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers to update PV in bilateral netting during mark-to-market\\n     * @param self The mapping with all present value nettings per currency\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Present value currency\\n     * @param prevPV0 Previous present value to be substracted from total exposure for counterparty A\\n     * @param prevPV1 Previous present value to be substracted from total exposure for counterparty B\\n     * @param currentPV0 Current present value to be added to total exposure for counterparty A\\n     * @param currentPV1 Current present value to be added to total exposure for counterparty B\\n     */\\n    function update(\\n        mapping(bytes32 => mapping(bytes32 => NetPV.CcyNetting)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    ) internal {\\n        (bytes32 packedAddrs, bool flipped) = AddressPacking.pack(party0, party1);\\n        NetPV.CcyNetting storage netting = self[packedAddrs][ccy];\\n\\n        if (!flipped) {\\n            if (currentPV0 > 0) {\\n                netting.party0PV = netting.party0PV - prevPV0 + currentPV0;\\n            }\\n            if (currentPV1 > 0) {\\n                netting.party1PV = netting.party1PV - prevPV1 + currentPV1;\\n            }\\n        } else {\\n            if (currentPV0 > 0) {\\n                netting.party1PV = netting.party1PV - prevPV0 + currentPV0;\\n            }\\n            if (currentPV1 > 0) {\\n                netting.party0PV = netting.party0PV - prevPV1 + currentPV1;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Clears the state of PV netting\\n     * @param self The mapping with all present value nettings per currency\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Present value currency\\n     */\\n    function clear(\\n        mapping(bytes32 => mapping(bytes32 => NetPV.CcyNetting)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy\\n    ) internal {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(party0, party1);\\n        delete self[packedAddrs][ccy];\\n    }\\n}\\n\",\"keccak256\":\"0x774daec1022fa9cf44b2242526d6ecbddfaa473f6eb004802c4a59a62b4b9d4f\",\"license\":\"MIT\"},\"contracts/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../libraries/Contracts.sol\\\";\\nimport \\\"../interfaces/IAddressResolver.sol\\\";\\nimport \\\"../interfaces/ICloseOutNetting.sol\\\";\\nimport \\\"../interfaces/ICollateralAggregatorV2.sol\\\";\\nimport \\\"../interfaces/ICollateralVault.sol\\\";\\nimport \\\"../interfaces/ICrosschainAddressResolver.sol\\\";\\nimport \\\"../interfaces/ICurrencyController.sol\\\";\\nimport \\\"../interfaces/IMarkToMarket.sol\\\";\\nimport \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport \\\"../interfaces/ILiquidations.sol\\\";\\nimport \\\"../interfaces/IPaymentAggregator.sol\\\";\\nimport \\\"../interfaces/IProductAddressResolver.sol\\\";\\nimport \\\"../interfaces/ISettlementEngine.sol\\\";\\nimport \\\"../interfaces/ITermStructure.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    IAddressResolver public resolver;\\n\\n    mapping(bytes32 => address) private addressCache;\\n\\n    modifier onlyAcceptedContracts() {\\n        require(isAcceptedContract(msg.sender), \\\"Only Accepted Contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns required contract names in this contract\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @dev Returns contract names that can call this contract.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        require(address(resolver) == address(0), \\\"resolver registered already\\\");\\n        resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function closeOutNetting() internal view returns (ICloseOutNetting) {\\n        return ICloseOutNetting(getAddress(Contracts.CLOSE_OUT_NETTING));\\n    }\\n\\n    function collateralAggregator() internal view returns (ICollateralAggregator) {\\n        return ICollateralAggregator(getAddress(Contracts.COLLATERAL_AGGREGATOR));\\n    }\\n\\n    function collateralVault() internal view returns (ICollateralVault) {\\n        return ICollateralVault(getAddress(Contracts.COLLATERAL_VAULT));\\n    }\\n\\n    function crosschainAddressResolver() internal view returns (ICrosschainAddressResolver) {\\n        return ICrosschainAddressResolver(getAddress(Contracts.CROSSCHAIN_ADDRESS_RESOLVER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function markToMarket() internal view returns (IMarkToMarket) {\\n        return IMarkToMarket(getAddress(Contracts.MARK_TO_MARKET));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function liquidations() internal view returns (ILiquidations) {\\n        return ILiquidations(getAddress(Contracts.LIQUIDATIONS));\\n    }\\n\\n    function paymentAggregator() internal view returns (IPaymentAggregator) {\\n        return IPaymentAggregator(getAddress(Contracts.PAYMENT_AGGREGATOR));\\n    }\\n\\n    function productAddressResolver() internal view returns (IProductAddressResolver) {\\n        return IProductAddressResolver(getAddress(Contracts.PRODUCT_ADDRESS_RESOLVER));\\n    }\\n\\n    function settlementEngine() internal view returns (ISettlementEngine) {\\n        return ISettlementEngine(getAddress(Contracts.SETTLEMENT_ENGINE));\\n    }\\n\\n    function termStructure() internal view returns (ITermStructure) {\\n        return ITermStructure(getAddress(Contracts.TERM_STRUCTURE));\\n    }\\n}\\n\",\"keccak256\":\"0xa11e12f5ac8a1710ad3f16fb7d867e615ed13dd98324eea2f7eb36c00b21c2fb\",\"license\":\"MIT\"},\"contracts/mixins/MixinCollateralManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/IMixinCollateralManagement.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"../utils/Proxyable.sol\\\";\\nimport {CollateralAggregatorStorage as Storage} from \\\"../storages/CollateralAggregatorStorage.sol\\\";\\nimport \\\"./MixinAddressResolver.sol\\\";\\n\\n/**\\n * @title MixinCollateralManagement is an internal component of CollateralAggregator contract\\n *\\n * This contract allows Secured Finance manage the collateral system such as:\\n *\\n * 1. Update CurrencyController and LiquidationEngine addresses\\n * 2. Add different products implementation contracts as collateral users\\n * 3. Link deployed collateral vaults\\n * 4. Update main collateral parameters like Margin Call ratio,\\n *    Auto-Liquidation level, Liquidation price, and Minimal collateral ratio\\n *\\n */\\ncontract MixinCollateralManagement is\\n    IMixinCollateralManagement,\\n    MixinAddressResolver,\\n    Ownable,\\n    Proxyable\\n{\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @dev Modifier to check if msg.sender is the Liquidations\\n     */\\n    modifier onlyLiquidations() {\\n        require(msg.sender == address(liquidations()), \\\"Caller is not the liquidations\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController\\n     */\\n    function initialize(\\n        address owner,\\n        address resolver,\\n        uint256 marginCallThresholdRate,\\n        uint256 autoLiquidationThresholdRate,\\n        uint256 liquidationPriceRate,\\n        uint256 minCollateralRate\\n    ) public initializer onlyProxy {\\n        _transferOwnership(owner);\\n        registerAddressResolver(resolver);\\n        _updateMarginCallThresholdRate(marginCallThresholdRate);\\n        _updateAutoLiquidationThresholdRate(autoLiquidationThresholdRate);\\n        _updateLiquidationPriceRate(liquidationPriceRate);\\n        _updateMinCollateralRate(minCollateralRate);\\n    }\\n\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](5);\\n        contracts[0] = Contracts.COLLATERAL_VAULT;\\n        contracts[1] = Contracts.CROSSCHAIN_ADDRESS_RESOLVER;\\n        contracts[2] = Contracts.CURRENCY_CONTROLLER;\\n        contracts[3] = Contracts.LIQUIDATIONS;\\n        contracts[4] = Contracts.PRODUCT_ADDRESS_RESOLVER;\\n    }\\n\\n    function isAcceptedContract(address account) internal view override returns (bool) {\\n        return\\n            isCollateralUser(account) ||\\n            productAddressResolver().isRegisteredProductContract(account) ||\\n            super.isAcceptedContract(account);\\n    }\\n\\n    /**\\n     * @dev Triggers to add contract address to collateral users address set\\n     * @param _user Collateral user smart contract address\\n     *\\n     * @notice Trifgers only be contract owner\\n     * @notice Reverts on saving 0x0 address\\n     */\\n    function addCollateralUser(address _user) public override onlyOwner returns (bool) {\\n        require(_user != address(0), \\\"Zero address\\\");\\n        require(_user.isContract(), \\\"Can't add non-contract address\\\");\\n        require(!Storage.slot().collateralUsers.contains(_user), \\\"Can't add existing address\\\");\\n\\n        emit CollateralUserAdded(_user);\\n\\n        return Storage.slot().collateralUsers.add(_user);\\n    }\\n\\n    /**\\n     * @dev Triggers to remove collateral user from address set\\n     * @param _user Collateral user smart contract address\\n     *\\n     * @notice Triggers only be contract owner\\n     * @notice Reverts on removing non-existing collateral user\\n     */\\n    function removeCollateralUser(address _user) public override onlyOwner returns (bool) {\\n        require(Storage.slot().collateralUsers.contains(_user), \\\"Can't remove non-existing user\\\");\\n\\n        emit CollateralUserRemoved(_user);\\n        return Storage.slot().collateralUsers.remove(_user);\\n    }\\n\\n    /**\\n     * @dev Triggers to check if provided `addr` is a CollateralUser from address set\\n     * @param _user Contract address to check if it's a CollateralUser\\n     */\\n    function isCollateralUser(address _user) public view override returns (bool) {\\n        return Storage.slot().collateralUsers.contains(_user);\\n    }\\n\\n    /**\\n     * @dev Triggers to safely update main collateral parameters this function\\n     * solves the issue of frontrunning during parameters tuning\\n     *\\n     * @param _marginCallThresholdRate Margin call threshold ratio\\n     * @param _autoLiquidationThresholdRate Auto liquidation threshold rate\\n     * @param _liquidationPriceRate Liquidation price rate\\n     * @notice Triggers only be contract owner\\n     */\\n    function updateMainParameters(\\n        uint256 _marginCallThresholdRate,\\n        uint256 _autoLiquidationThresholdRate,\\n        uint256 _liquidationPriceRate\\n    ) public override onlyOwner {\\n        if (_marginCallThresholdRate != Storage.slot().marginCallThresholdRate) {\\n            _updateMarginCallThresholdRate(_marginCallThresholdRate);\\n        }\\n\\n        if (_autoLiquidationThresholdRate != Storage.slot().autoLiquidationThresholdRate) {\\n            _updateAutoLiquidationThresholdRate(_autoLiquidationThresholdRate);\\n        }\\n\\n        if (_liquidationPriceRate != Storage.slot().liquidationPriceRate) {\\n            _updateLiquidationPriceRate(_liquidationPriceRate);\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers to update liquidation level rate\\n     * @param _rate Auto Liquidation level rate\\n     * @notice Triggers only be contract owner\\n     */\\n    function updateAutoLiquidationThresholdRate(uint256 _rate) public override onlyOwner {\\n        _updateAutoLiquidationThresholdRate(_rate);\\n    }\\n\\n    /**\\n     * @dev Triggers to update margin call level\\n     * @param _rate Margin call rate\\n     * @notice Triggers only be contract owner\\n     */\\n    function updateMarginCallThresholdRate(uint256 _rate) public override onlyOwner {\\n        _updateMarginCallThresholdRate(_rate);\\n    }\\n\\n    /**\\n     * @dev Triggers to update liquidation price rate\\n     * @param _rate Liquidation price rate in basis point\\n     * @notice Triggers only be contract owner\\n     */\\n    function updateLiquidationPriceRate(uint256 _rate) public override onlyOwner {\\n        _updateLiquidationPriceRate(_rate);\\n    }\\n\\n    /**\\n     * @dev Triggers to update minimal collateral rate\\n     * @param _rate Minimal collateral rate in basis points\\n     * @notice Triggers only be contract owner\\n     */\\n    function updateMinCollateralRate(uint256 _rate) public override onlyOwner {\\n        _updateMinCollateralRate(_rate);\\n    }\\n\\n    /**\\n     * @dev Triggers to get auto liquidation threshold rate\\n     */\\n    function getAutoLiquidationThresholdRate() public view override returns (uint256) {\\n        return Storage.slot().autoLiquidationThresholdRate;\\n    }\\n\\n    /**\\n     * @dev Triggers to get liquidation price rate\\n     */\\n    function getLiquidationPriceRate() public view override returns (uint256) {\\n        return Storage.slot().liquidationPriceRate;\\n    }\\n\\n    /**\\n     * @dev Triggers to get margin call threshold rate\\n     */\\n    function getMarginCallThresholdRate() public view override returns (uint256) {\\n        return Storage.slot().marginCallThresholdRate;\\n    }\\n\\n    /**\\n     * @dev Triggers to get min collateral rate\\n     */\\n    function getMinCollateralRate() public view override returns (uint256) {\\n        return Storage.slot().minCollateralRate;\\n    }\\n\\n    function _updateAutoLiquidationThresholdRate(uint256 _rate) private {\\n        require(_rate > 0, \\\"INCORRECT_RATIO\\\");\\n        require(_rate < Storage.slot().marginCallThresholdRate, \\\"AUTO_LIQUIDATION_RATIO_OVERFLOW\\\");\\n\\n        emit AutoLiquidationThresholdRateUpdated(\\n            Storage.slot().autoLiquidationThresholdRate,\\n            _rate\\n        );\\n        Storage.slot().autoLiquidationThresholdRate = _rate;\\n    }\\n\\n    function _updateMarginCallThresholdRate(uint256 _rate) private {\\n        require(_rate > 0, \\\"INCORRECT_RATIO\\\");\\n\\n        emit MarginCallThresholdRateUpdated(Storage.slot().marginCallThresholdRate, _rate);\\n        Storage.slot().marginCallThresholdRate = _rate;\\n    }\\n\\n    function _updateLiquidationPriceRate(uint256 _rate) private {\\n        require(_rate > 0, \\\"INCORRECT_RATIO\\\");\\n        require(_rate < Storage.slot().autoLiquidationThresholdRate, \\\"LIQUIDATION_PRICE_OVERFLOW\\\");\\n\\n        emit LiquidationPriceRateUpdated(Storage.slot().liquidationPriceRate, _rate);\\n        Storage.slot().liquidationPriceRate = _rate;\\n    }\\n\\n    function _updateMinCollateralRate(uint256 _rate) private {\\n        require(_rate > 0, \\\"INCORRECT_RATIO\\\");\\n        require(\\n            _rate < Storage.slot().autoLiquidationThresholdRate,\\n            \\\"MIN_COLLATERAL_RATIO_OVERFLOW\\\"\\n        );\\n\\n        emit MinCollateralRateUpdated(Storage.slot().minCollateralRate, _rate);\\n        Storage.slot().minCollateralRate = _rate;\\n    }\\n}\\n\",\"keccak256\":\"0x1cce463ca77c685a27ede5695ccf1519c5a22ae8e381d016cd6e0676512c9258\",\"license\":\"MIT\"},\"contracts/storages/CollateralAggregatorStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../libraries/NetPV.sol\\\";\\n\\nlibrary CollateralAggregatorStorage {\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using NetPV for NetPV.CcyNetting;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.collateralAggregator\\\");\\n\\n    struct Storage {\\n        // Mapping for total amount of collateral locked against independent collateral from all books.\\n        mapping(address => mapping(bytes32 => uint256)) unsettledCollateral;\\n        // Mapping for used currencies in unsettled exposures.\\n        mapping(address => EnumerableSet.Bytes32Set) exposedUnsettledCurrencies;\\n        // Mapping for all registered users.\\n        mapping(address => bool) isRegistered;\\n        // Mapping for used currencies set in bilateral position.\\n        mapping(bytes32 => EnumerableSet.Bytes32Set) exposedCurrencies;\\n        // Mapping for exposures per currency in bilateral position.\\n        mapping(bytes32 => mapping(bytes32 => NetPV.CcyNetting)) ccyNettings;\\n        // storages for MixinCollateralManagement\\n        EnumerableSet.AddressSet collateralUsers;\\n        // liquidation price rate in basis point\\n        uint256 liquidationPriceRate;\\n        // margin call threshold rate in basis point\\n        uint256 marginCallThresholdRate;\\n        // auto liquidation threshold rate in basis point\\n        uint256 autoLiquidationThresholdRate;\\n        //  minimal collateral rate in basis point\\n        uint256 minCollateralRate;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e1c9c0d3ec4e66950bcb4347262a0eef872f13e0c3f4be099901556ac8deb8a\",\"license\":\"MIT\"},\"contracts/storages/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary OwnableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.ownable\\\");\\n\\n    struct Storage {\\n        address owner;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ef8bfa06947cdb63d47248ad074ac42a1b1ba828a2c97e42486a5dbb2c03e1d\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant BP = 10000; // basis point\\n    uint256 public constant PCT = 10000; // percentage point in basis\\n    uint256 public constant PENALTYLEVEL = 1000; // 10% settlement failure penalty\\n    uint256 public constant MKTMAKELEVEL = 2000; // 20% for market making\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Loan common types\\n    enum LoanState {\\n        REGISTERED,\\n        WORKING,\\n        DUE,\\n        PAST_DUE,\\n        CLOSED,\\n        TERMINATED\\n    }\\n    enum DFTERM {\\n        _3m,\\n        _6m,\\n        _1y,\\n        _2y,\\n        _3y,\\n        _4y,\\n        _5y\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n\\n    // FXMarket common types\\n    enum CcyPair {\\n        FILETH,\\n        FILUSDC,\\n        ETHUSDC,\\n        BTCUSDC,\\n        BTCETH,\\n        BTCFIL\\n    }\\n    enum FXSide {\\n        BID,\\n        OFFER\\n    }\\n\\n    enum PaymentFrequency {\\n        ANNUAL,\\n        SEMI_ANNUAL,\\n        QUARTERLY,\\n        MONTHLY,\\n        FORWARD\\n    }\\n\\n    struct Currency {\\n        bool isSupported;\\n        string name;\\n        uint16 chainId; // chain id for address conversion\\n    }\\n\\n    struct SettlementRequest {\\n        address payer;\\n        address receiver;\\n        uint16 chainId;\\n        uint256 timestamp;\\n        string txHash;\\n    }\\n}\\n\",\"keccak256\":\"0x6419e0bcd07b8ff86e0ffce1e7f16e9a38a470f0ab2f697af0f5234cb943303f\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../storages/OwnableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return OwnableStorage.slot().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = OwnableStorage.slot().owner;\\n        OwnableStorage.slot().owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1c782b9deaf1f94d2af99826e6e8207f5e71f3fbb6ce18805913a3ca7dda9579\",\"license\":\"MIT\"},\"contracts/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9f02e4ae76f34a28299e4b6a10490ebf99b9c9a8454765bff7977cc4f3d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506147c1806100206000396000f3fe608060405234801561001057600080fd5b50600436106102735760003560e01c80638cbf5e7811610151578063d1f896ba116100c3578063d9b3bbd711610087578063d9b3bbd71461055f578063dc766b8714610572578063e099765914610585578063ef75abb61461058c578063f2fde38b146105b6578063f30ce771146105c957600080fd5b8063d1f896ba14610521578063d3a3d94c14610529578063d4c3818b14610531578063d60df57a14610539578063d810703b1461054c57600080fd5b8063a64bb9b811610115578063a64bb9b8146104af578063adad5fd1146104c2578063b0779eb9146104d5578063b418ea7a146104e8578063b922ef00146104fb578063cdd942341461050e57600080fd5b80638cbf5e781461045b5780638da5cb5b1461046e578063908b619214610476578063921f523a146104895780639fcaebfa1461049c57600080fd5b80633c4cf9c2116101ea5780637aa49084116101ae5780637aa49084146103e95780637d1f2ded146103fc5780637ea241331461040f578063857dd45d1461042257806386489ba91461043557806388dc6a041461044857600080fd5b80633c4cf9c2146103a05780633d03b9da146103b357806343ca6e80146103bb578063715018a6146103ce57806376a40246146103d657600080fd5b8063232340581161023c578063232340581461032157806326c013031461035457806329985e5a146103675780632af64bd31461036f5780632f02f6fa14610377578063376c633b1461038a57600080fd5b8062fdf3901461027857806304f3bcec146102a157806312a86ffb146102cc5780631aa3a008146102f4578063221c053f146102fe575b600080fd5b61028b610286366004613f00565b6105dc565b6040516102989190613f39565b60405180910390f35b6000546102b4906001600160a01b031681565b6040516001600160a01b039091168152602001610298565b6102df6102da366004613f00565b6106b4565b60408051928352602083019190915201610298565b6102fc6106d3565b005b61031161030c366004613f7d565b610790565b6040519015158152602001610298565b61033461032f366004613f00565b6107bf565b604080519485526020850193909352918301526060820152608001610298565b6102fc610362366004613f9a565b6107e5565b6102fc6108fd565b610311610a90565b6102fc610385366004613fdb565b610bae565b610392610be9565b604051908152602001610298565b6103926103ae366004613f7d565b610bfc565b61028b610c11565b6103116103c9366004613f7d565b610d42565b6102fc610d59565b6102fc6103e4366004613ff4565b610d94565b6102fc6103f736600461402e565b610e14565b6102fc61040a366004614095565b610f2f565b61039261041d3660046140e6565b610fd0565b6102fc610430366004613fdb565b611003565b6102fc610443366004614112565b61103b565b610311610456366004613f7d565b611150565b6102fc61046936600461416b565b611222565b6102b461132f565b6102fc610484366004613fdb565b611362565b610392610497366004613f7d565b61139a565b6102fc6104aa36600461416b565b6113a8565b6103346104bd366004613f9a565b6114cc565b6102fc6104d03660046141a0565b611565565b6103116104e3366004613f7d565b61160c565b6102df6104f6366004613f00565b61177b565b6102df610509366004613f00565b6117cb565b61031161051c36600461416b565b611818565b61039261183f565b610392611852565b610392611865565b610392610547366004613f7d565b611878565b6102fc61055a36600461402e565b611883565b6102fc61056d366004613fdb565b611957565b6102fc61058036600461402e565b61198f565b606061028b565b61059f61059a36600461402e565b611bf2565b604080519215158352901515602083015201610298565b6102fc6105c4366004613f7d565b611c2f565b6102fc6105d73660046142cd565b611ccc565b606060006105ea8484611d41565b50905060006105f7611eae565b600083815260039190910160205260408120915061061482611ed2565b905060008167ffffffffffffffff81111561063157610631614202565b60405190808252806020026020018201604052801561065a578160200160208202803683370190505b50905060005b828110156106a75760006106748583611edc565b905080838381518110610689576106896143f6565b6020908102919091010152508061069f81614422565b915050610660565b5093505050505b92915050565b6000806106c78484600080600080611eef565b915091505b9250929050565b336106dc611eae565b6001600160a01b0382166000908152600291909101602052604090205460ff16156107435760405162461bcd60e51b8152602060048201526012602482015271524547495354455245445f414c524541445960701b60448201526064015b60405180910390fd5b604080516000808252602082019092528161076e565b60608152602001906001900390816107595790505b5060408051600081526020810190915290915061078b8282612048565b505050565b600061079a611eae565b6001600160a01b03909216600090815260029290920160205250604090205460ff1690565b6000806000806107d5868660008060008061210c565b9299919850965090945092505050565b6107ed612525565b6001600160a01b0316336001600160a01b03161461084d5760405162461bcd60e51b815260206004820152601e60248201527f43616c6c6572206973206e6f7420746865206c69717569646174696f6e730000604482015260640161073a565b610855612544565b6040516326c0130360e01b81526001600160a01b03858116600483015284811660248301526044820184905291909116906326c0130390606401602060405180830381600087803b1580156108a957600080fd5b505af11580156108bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e1919061443d565b61078b5760405162461bcd60e51b815260040161073a9061445a565b6000610907610c11565b905060005b8151811015610a8c576000828281518110610929576109296143f6565b6020026020010151905060008060009054906101000a90046001600160a01b03166001600160a01b0316636795dbcd838460405160200161099691907f5265736f6c766572206d697373696e67207461726765743a20000000000000008152601981019190915260390190565b6040516020818303038152906040526040518363ffffffff1660e01b81526004016109c29291906144ea565b60206040518083038186803b1580156109da57600080fd5b505afa1580156109ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a12919061450b565b60008381526001602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251868152918201529192507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68910160405180910390a150508080610a8490614422565b91505061090c565b5050565b600080610a9b610c11565b905060005b8151811015610ba5576000828281518110610abd57610abd6143f6565b60209081029190910181015160008181526001909252604080832054925490516321f8a72160e01b8152600481018390529193506001600160a01b039283169216906321f8a7219060240160206040518083038186803b158015610b2057600080fd5b505afa158015610b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b58919061450b565b6001600160a01b0316141580610b8357506000818152600160205260409020546001600160a01b0316155b15610b92576000935050505090565b5080610b9d81614422565b915050610aa0565b50600191505090565b33610bb761132f565b6001600160a01b031614610bdd5760405162461bcd60e51b815260040161073a90614528565b610be681612561565b50565b6000610bf3611eae565b60070154905090565b6000610c0a8260008061262f565b5092915050565b60408051600580825260c082019092526060916020820160a0803683370190505090506e10dbdb1b185d195c985b15985d5b1d608a1b81600081518110610c5a57610c5a6143f6565b6020026020010181815250507821b937b9b9b1b430b4b720b2323932b9b9a932b9b7b63b32b960391b81600181518110610c9657610c966143f6565b6020026020010181815250507121bab93932b731bca1b7b73a3937b63632b960711b81600281518110610ccb57610ccb6143f6565b6020026020010181815250506b4c69717569646174696f6e7360a01b81600381518110610cfa57610cfa6143f6565b60200260200101818152505075283937b23ab1ba20b2323932b9b9a932b9b7b63b32b960511b81600481518110610d3357610d336143f6565b60200260200101818152505090565b60006106ae82610d50611eae565b6005019061273a565b33610d6261132f565b6001600160a01b031614610d885760405162461bcd60e51b815260040161073a90614528565b610d92600061275c565b565b33610d9d61132f565b6001600160a01b031614610dc35760405162461bcd60e51b815260040161073a90614528565b610dcb611eae565b600801548314610dde57610dde836127cd565b610de6611eae565b600901548214610df957610df982612841565b610e01611eae565b60070154811461078b5761078b8161290f565b610e1d336129dd565b610e395760405162461bcd60e51b815260040161073a9061455d565b6000610e458787611d41565b509050610e6c85610e54611eae565b60008481526003919091016020526040902090612a80565b610ea75760405162461bcd60e51b815260206004820152600c60248201526b6e6f6e2d757365642063637960a01b604482015260640161073a565b610ec0610eb2611eae565b600401888888888888612a98565b610ecc87876001612bbb565b604080518681526020810186905290810184905282151560608201526001600160a01b0380881691908916907f68138c591862f56cecd08a2037bc5b644ec9511c6e90845a64e12fd295a99f26906080015b60405180910390a350505050505050565b610f38336129dd565b610f545760405162461bcd60e51b815260040161073a9061455d565b610f6c610f5f611eae565b6004018686868686612db9565b610f7885856001612bbb565b60408051848152602081018490529081018290526001600160a01b0380861691908716907fff9f0c6cfb29ffc1a20f3a25b0cb947e89cb363e39e3db0df827dcec79f126b69060600160405180910390a35050505050565b6000610fda611eae565b6001600160a01b0384166000908152602091825260408082208583529092522054905092915050565b3361100c61132f565b6001600160a01b0316146110325760405162461bcd60e51b815260040161073a90614528565b610be6816127cd565b60006110476001612eaf565b9050801561105f576002805461ff0019166101001790555b6000611069612f39565b6001600160a01b031614156110cb5760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b606482015260840161073a565b6110d48761275c565b6110dd86612f61565b6110e6856127cd565b6110ef84612841565b6110f88361290f565b61110182612561565b8015611147576002805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b60003361115b61132f565b6001600160a01b0316146111815760405162461bcd60e51b815260040161073a90614528565b61118d82610d50611eae565b6111d95760405162461bcd60e51b815260206004820152601e60248201527f43616e27742072656d6f7665206e6f6e2d6578697374696e6720757365720000604482015260640161073a565b6040516001600160a01b038316907f484fb579b9a8ea6000e970f2490ecb56612c86295b1467a5063ec9a2220b2e4b90600090a26106ae82611219611eae565b60050190612fdc565b61122b336129dd565b6112475760405162461bcd60e51b815260040161073a9061455d565b80611250611eae565b6001600160a01b0385166000908152602091825260408082208683529092529081208054909190611282908490614594565b909155506112909050611eae565b6001600160a01b03841660009081526020918252604080822085835290925220546112e5576112e3826112c1611eae565b6001600160a01b03861660009081526001919091016020526040902090612ff1565b505b60408051838152602081018390526001600160a01b038516917fb4c40c9409d6c2c7dfd2fb0d7e0f26582b9dd0dee72dc0ff6ff09af501ba7a7691015b60405180910390a2505050565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa5b546001600160a01b0316919050565b3361136b61132f565b6001600160a01b0316146113915760405162461bcd60e51b815260040161073a90614528565b610be68161290f565b60006106ae82600080612ffd565b6113b1336129dd565b6113cd5760405162461bcd60e51b815260040161073a9061455d565b6113fb826113d9611eae565b6001600160a01b03861660009081526001919091016020526040902090613196565b50611407838383611818565b61144b5760405162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da0818dbdb1b185d195c985b605a1b604482015260640161073a565b80611454611eae565b6001600160a01b03851660009081526020918252604080822086835290925290812080549091906114869084906145ab565b909155505060408051838152602081018390526001600160a01b038516917f430a1193f254f9e15dc397d101a1ecf0a3383c95007062135900cc7c2a6b80439101611322565b60008060008060006114de8888611d41565b5090506114ed86610e54611eae565b6115285760405162461bcd60e51b815260206004820152600c60248201526b6e6f6e2d757365642063637960a01b604482015260640161073a565b6000611540611535611eae565b6004018a8a8a6131a2565b805160208201516040830151606090930151919c909b50919950975095505050505050565b61156e336129dd565b61158a5760405162461bcd60e51b815260040161073a9061455d565b6115a4611595611eae565b6004018888888888888861323d565b6115b087876001612bbb565b604080518681526020810186905290810184905260608101839052608081018290526001600160a01b0380881691908916907f93e5ba92322cd89358ce3fbbe2b25b694ef010aee4a1e46ac849c392887bd5089060a001610f1e565b60003361161761132f565b6001600160a01b03161461163d5760405162461bcd60e51b815260040161073a90614528565b6001600160a01b0382166116825760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b604482015260640161073a565b6001600160a01b0382163b6116d95760405162461bcd60e51b815260206004820152601e60248201527f43616e277420616464206e6f6e2d636f6e747261637420616464726573730000604482015260640161073a565b6116e582610d50611eae565b156117325760405162461bcd60e51b815260206004820152601a60248201527f43616e277420616464206578697374696e672061646472657373000000000000604482015260640161073a565b6040516001600160a01b038316907f6426e73541c82494e19ac1646c231acf4b36f248c5146ed03a248e35dde1fac090600090a26106ae82611772611eae565b60050190613319565b6000806000806000806117968888600080600080600161332e565b92965090945092509050826117ac5760006117ae565b835b816117ba5760006117bc565b825b95509550505050509250929050565b6000806000806000806117e68888600080600080600161332e565b92965090945092509050826117fb57836117fe565b60005b8161180957826117bc565b98600098509650505050505050565b60008061182685858561262f565b509050611831611eae565b600801541115949350505050565b6000611849611eae565b60090154905090565b600061185c611eae565b60080154905090565b600061186f611eae565b600a0154905090565b6000610c0a826134da565b61188c336129dd565b6118a85760405162461bcd60e51b815260040161073a9061455d565b60006118b48787611d41565b5090506118db856118c3611eae565b60008481526003919091016020526040902090613196565b506118f56118e7611eae565b600401888888888888613638565b61190187876001612bbb565b604080518681526020810186905290810184905282151560608201526001600160a01b0380881691908916907fb98a18b045c69b240b38573658669b475c5431a85b85c92eb84473a2c3ff09a590608001610f1e565b3361196061132f565b6001600160a01b0316146119865760405162461bcd60e51b815260040161073a90614528565b610be681612841565b611998336129dd565b6119b45760405162461bcd60e51b815260040161073a9061455d565b60006127106119c161183f565b6119cb90866145c3565b6119d591906145e2565b905060006119e161372d565b6040516344a6ecdd60e01b815260048101889052602481018490526001600160a01b0391909116906344a6ecdd9060440160206040518083038186803b158015611a2a57600080fd5b505afa158015611a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a629190614604565b9050611a6c612544565b6040516326c0130360e01b81526001600160a01b038a8116600483015289811660248301526044820184905291909116906326c0130390606401602060405180830381600087803b158015611ac057600080fd5b505af1158015611ad4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af8919061443d565b611b145760405162461bcd60e51b815260040161073a9061445a565b866001600160a01b0316886001600160a01b03167fed433eb165bd381b6fa417686c541023235ba1cc52f6075a29f79d4d28d328bc8888604051611b62929190918252602082015260400190565b60405180910390a3611b84611b75611eae565b60040189898988600089612a98565b6040805187815260208101869052600081830152841515606082015290516001600160a01b0389811692908b16917f68138c591862f56cecd08a2037bc5b644ec9511c6e90845a64e12fd295a99f269181900360800190a3611be888886001612bbb565b5050505050505050565b600080600080611c068a8a8a8a8a8a611eef565b91509150611c12611852565b821015611c1d611852565b909b9110159950975050505050505050565b33611c3861132f565b6001600160a01b031614611c5e5760405162461bcd60e51b815260040161073a90614528565b6001600160a01b038116611cc35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161073a565b610be68161275c565b33611cd5611eae565b6001600160a01b0382166000908152600291909101602052604090205460ff1615611d375760405162461bcd60e51b8152602060048201526012602482015271524547495354455245445f414c524541445960701b604482015260640161073a565b61078b8383612048565b600080826001600160a01b0316846001600160a01b03161415611d9c5760405162461bcd60e51b81526020600482015260136024820152724964656e746963616c2061646472657373657360681b604482015260640161073a565b600080846001600160a01b0316866001600160a01b031610611dbf578486611dc2565b85855b90925090506001600160a01b038216611e0f5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640161073a565b856001600160a01b0316826001600160a01b031614611e6b57604080516001600160a01b0380851660208301528316918101919091526060016040516020818303038152906040528051906020012060019350935050506106cc565b604080516001600160a01b0380851660208301528316918101919091526060016040516020818303038152906040528051906020012060009350935050506106cc565b7f747d407d1d7f7c17ec532d202f3588c3ef20935de503a75a59a836e49167b5fe90565b60006106ae825490565b6000611ee8838361374d565b9392505050565b600080611f2b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b611f39898989898989613777565b60208301528152611f48612544565b6040516373f18dbf60e01b81526001600160a01b038b811660048301528a8116602483015291909116906373f18dbf90604401604080518083038186803b158015611f9257600080fd5b505afa158015611fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fca919061461d565b60a08301526080820152805115611ffe5780516080820151611fee906127106145c3565b611ff891906145e2565b60408201525b60208101511561202e57602081015160a082015161201e906127106145c3565b61202891906145e2565b60608201525b806040015181606001519250925050965096945050505050565b6001612052611eae565b33600090815260029190910160205260409020805460ff191691151591909117905561207c6138fe565b6001600160a01b031663e9ac42cb3383856040518463ffffffff1660e01b81526004016120ab93929190614641565b600060405180830381600087803b1580156120c557600080fd5b505af11580156120d9573d6000803e3d6000fd5b50506040513392507feeda149c76076b34d4b9d8896c2f7efc0d33d1c7b53ea3c5db490d64613f603a9150600090a25050565b60008060008061211a613e39565b6121248b8b611d41565b5081526000612131611eae565b8251600090815260039190910160205260409020905061215081611ed2565b61022083015260005b8261022001518110156123ed576121708282611edc565b602084018190528b14156121a55761219b612189611eae565b6004018e8e86602001518e8e8e613925565b60408401526121c5565b6121bf6121b0611eae565b6004018e8e86602001516131a2565b60408401525b6121cd61372d565b6001600160a01b0316631743ffce84602001516040518263ffffffff1660e01b81526004016121fe91815260200190565b60206040518083038186803b15801561221657600080fd5b505afa15801561222a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224e9190614604565b60608401819052604084015161226391613a1e565b6040840181905251608084015161227a91906145ab565b608084015260408301516020015160a084015161229791906145ab565b60a08401526122a461372d565b6001600160a01b0316639abdb38a84602001516040518263ffffffff1660e01b81526004016122d591815260200190565b60206040518083038186803b1580156122ed57600080fd5b505afa158015612301573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123259190614604565b610180840152604080840151015160c084015161234291906145ab565b60c084015260408301516060015160e084015161235f91906145ab565b60e084015261018083015160408085015101516127109161237f916145c3565b61238991906145e2565b83610140015161239991906145ab565b610140840152610180830151604084015160600151612710916123bb916145c3565b6123c591906145e2565b8361016001516123d591906145ab565b610160840152806123e581614422565b915050612159565b508161016001518260c00151101561240657600061241b565b8161016001518260c0015161241b9190614594565b6101a083015261014082015160e0830151101561243957600061244e565b8161014001518260e0015161244e9190614594565b6101c083018190526101a0830151116124905781608001518260a00151836101a00151846101c001516124819190614594565b61248b91906145ab565b6124bb565b8160800151826101c00151836101a001516124ab9190614594565b6124b591906145ab565b8260a001515b6102008401526101e083015260c082015160808301516124db91906145ab565b61010083015260e082015160a08301516124f591906145ab565b61012083018190526101e083015161020084015161010090940151909e939d509b50995090975050505050505050565b600061253f6b4c69717569646174696f6e7360a01b613b14565b905090565b600061253f6e10dbdb1b185d195c985b15985d5b1d608a1b613b14565b600081116125815760405162461bcd60e51b815260040161073a906146eb565b612589611eae565b6009015481106125db5760405162461bcd60e51b815260206004820152601d60248201527f4d494e5f434f4c4c41544552414c5f524154494f5f4f564552464c4f57000000604482015260640161073a565b7f8367b1759e8fdce5712002e7aa025339b99cf3c850b194ebdf37219f86b01ee6612604611eae565b600a015460408051918252602082018490520160405180910390a180612628611eae565b600a015550565b60008061265660405180606001604052806000815260200160008152602001600081525090565b612661868686612ffd565b815261266b612544565b604051639491170960e01b81526001600160a01b038881166004830152919091169063949117099060240160206040518083038186803b1580156126ae57600080fd5b505afa1580156126c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e69190614604565b60408201528051156127195780516040820151612705906127106145c3565b61270f91906145e2565b6020820152612725565b51600092509050612732565b6020810151905190925090505b935093915050565b6001600160a01b03811660009081526001830160205260408120541515611ee8565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081116127ed5760405162461bcd60e51b815260040161073a906146eb565b7f31ee2d7ab5f3365672e54f81f75b37a4d8b0f1085872bdb80349a1cb08ddb711612816611eae565b6008015460408051918252602082018490520160405180910390a18061283a611eae565b6008015550565b600081116128615760405162461bcd60e51b815260040161073a906146eb565b612869611eae565b6008015481106128bb5760405162461bcd60e51b815260206004820152601f60248201527f4155544f5f4c49515549444154494f4e5f524154494f5f4f564552464c4f5700604482015260640161073a565b7fd3353684d64f1c80498433d8407c96e6bbeb1ec88b6200ec97d2c910fdbd0da46128e4611eae565b6009015460408051918252602082018490520160405180910390a180612908611eae565b6009015550565b6000811161292f5760405162461bcd60e51b815260040161073a906146eb565b612937611eae565b6009015481106129895760405162461bcd60e51b815260206004820152601a60248201527f4c49515549444154494f4e5f50524943455f4f564552464c4f57000000000000604482015260640161073a565b7f86aa422ec6af9520cb2f744924b12937e3db1aa5ce22050d0d519621e84090706129b2611eae565b6007015460408051918252602082018490520160405180910390a1806129d6611eae565b6007015550565b60006129e882610d42565b80612a7157506129f6613b89565b60405163a3d52aad60e01b81526001600160a01b038481166004830152919091169063a3d52aad9060240160206040518083038186803b158015612a3957600080fd5b505afa158015612a4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a71919061443d565b806106ae57506106ae82613bad565b60008181526001830160205260408120541515611ee8565b600080612aa58888611d41565b600082815260208c815260408083208b84529091529020919350915081612b3d578515612afc578315612aec57858160020154612ae29190614594565b6002820155612afc565b8054612af9908790614594565b81555b8415612b38578315612b2257848160030154612b189190614594565b6003820155612baf565b848160010154612b329190614594565b60018201555b612baf565b8515612b79578315612b6357858160030154612b599190614594565b6003820155612b79565b858160010154612b739190614594565b60018201555b8415612baf578315612b9f57848160020154612b959190614594565b6002820155612baf565b8054612bac908690614594565b81555b50505050505050505050565b600080600080612bd287876000806000808b61332e565b93509350935093506000841115612ccb57612beb612544565b6040516321b3b8d760e21b81526001600160a01b038981166004830152888116602483015260448201879052851515606483015291909116906386cee35c90608401602060405180830381600087803b158015612c4757600080fd5b505af1158015612c5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7f919061443d565b612ccb5760405162461bcd60e51b815260206004820152601e60248201527f4e4f4e5f454e4f5547485f46554e44535f464f525f524542414c414e43450000604482015260640161073a565b811561114757612cd9612544565b6040516321b3b8d760e21b81526001600160a01b038881166004830152898116602483015260448201859052831515606483015291909116906386cee35c90608401602060405180830381600087803b158015612d3557600080fd5b505af1158015612d49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6d919061443d565b6111475760405162461bcd60e51b815260206004820152601e60248201527f4e4f4e5f454e4f5547485f46554e44535f464f525f524542414c414e43450000604482015260640161073a565b600080612dc68787611d41565b600082815260208b815260408083208a84529091529020919350915081612e48578415612e12578054612dfa908690614594565b81556002810154612e0c9086906145ab565b60028201555b8315612e4357838160010154612e289190614594565b60018201556003810154612e3d9085906145ab565b60038201555b612ea4565b8415612e7957848160010154612e5e9190614594565b60018201556003810154612e739086906145ab565b60038201555b8315612ea4578054612e8c908590614594565b81556002810154612e9e9085906145ab565b60028201555b505050505050505050565b600254600090610100900460ff1615612ef8578160ff166001148015612ed45750303b155b612ef05760405162461bcd60e51b815260040161073a90614714565b506000919050565b60025460ff808416911610612f1f5760405162461bcd60e51b815260040161073a90614714565b506002805460ff191660ff92909216919091179055600190565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc611353565b6000546001600160a01b031615612fba5760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c72656164790000000000604482015260640161073a565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000611ee8836001600160a01b038416613c1d565b6000611ee88383613c1d565b600080613008611eae565b6001016000866001600160a01b03166001600160a01b03168152602001908152602001600020905061305b6040518060800160405280600081526020016000815260200160008152602001600081525090565b61306482611ed2565b606082015260005b816060015181101561318b5760006130848483611edc565b905061308e611eae565b6001600160a01b038916600090815260209182526040808220848352835290205490840152868114156130d1578583602001516130cb91906145ab565b60208401525b6130d961372d565b6001600160a01b03166344a6ecdd8285602001516040518363ffffffff1660e01b8152600401613113929190918252602082015260400190565b60206040518083038186803b15801561312b57600080fd5b505afa15801561313f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131639190614604565b60408401819052835161317691906145ab565b8352508061318381614422565b91505061306c565b505195945050505050565b6000611ee88383613d10565b6131cd6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000806131da8686611d41565b600082815260208a815260408083208984528252918290208251608081018452815481526001820154928101929092526002810154928201929092526003909101546060820152945090925090506132328382613d5f565b979650505050505050565b60008061324a8989611d41565b600082815260208d815260408083208c845290915290209193509150816132be57841561329257848782600201546132829190614594565b61328c91906145ab565b60028201555b83156132b957838682600301546132a99190614594565b6132b391906145ab565b60038201555b61330c565b84156132e557848782600301546132d59190614594565b6132df91906145ab565b60038201555b831561330c57838682600201546132fc9190614594565b61330691906145ab565b60028201555b5050505050505050505050565b6000611ee8836001600160a01b038416613d10565b6000806000806133806040518061010001604052806000815260200160008152602001600081526020016000151581526020016000815260200160001515815260200160008152602001600081525090565b61338e8c8c8c8c8c8c613777565b6020830152815285156133e8576127106133a6611852565b82516133b291906145c3565b6133bc91906145e2565b81526127106133c9611852565b82602001516133d891906145c3565b6133e291906145e2565b60208201525b6133f0612544565b6040516373f18dbf60e01b81526001600160a01b038e811660048301528d8116602483015291909116906373f18dbf90604401604080518083038186803b15801561343a57600080fd5b505afa15801561344e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613472919061461d565b60e083015260c08201819052815161348a9190613db3565b15156060830152604082015260e081015160208201516134aa9190613db3565b151560a08301819052608083018290526040830151606090930151929e929d50909b509950975050505050505050565b60008061350f6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b61351b8460008061262f565b8252602082015261352a612544565b604051639491170960e01b81526001600160a01b038681166004830152919091169063949117099060240160206040518083038186803b15801561356d57600080fd5b505afa158015613581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a59190614604565b60808201526135b2611852565b81602001511115613604576135c5611852565b81602001516135d49190614594565b604082018190526020820151608083015190916135f0916145c3565b6135fa91906145e2565b6060820152613627565b805161361b57608081015190519094909350915050565b51600094909350915050565b606081015190519094909350915050565b6000806136458888611d41565b600082815260208c815260408083208b845290915290209193509150816136c857851561369c57831561368c5785816002015461368291906145ab565b600282015561369c565b80546136999087906145ab565b81555b8415612b385783156136b857848160030154612b1891906145ab565b848160010154612b3291906145ab565b85156137045783156136ee578581600301546136e491906145ab565b6003820155613704565b8581600101546136fe91906145ab565b60018201555b8415612baf57831561372057848160020154612b9591906145ab565b8054612bac9086906145ab565b600061253f7121bab93932b731bca1b7b73a3937b63632b960711b613b14565b6000826000018281548110613764576137646143f6565b9060005260206000200154905092915050565b6000806137c260405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6137d089898989898961210c565b60608501526040840152602083015281526127106137ec611865565b82604001516137fb91906145c3565b61380591906145e2565b6080820152612710613815611865565b826060015161382491906145c3565b61382e91906145e2565b60a082015280511561387c57612710613845611852565b825161385191906145c3565b61385b91906145e2565b81608001511161386c578051613872565b80608001515b60c0820152613887565b608081015160c08201525b6020810151156138d95761271061389c611852565b82602001516138ab91906145c3565b6138b591906145e2565b8160a00151116138c95780602001516138cf565b8060a001515b60e08201526138e4565b60a081015160e08201525b8060c001518160e001519250925050965096945050505050565b600061253f7821b937b9b9b1b430b4b720b2323932b9b9a932b9b7b63b32b960391b613b14565b6139506040518060800160405280600081526020016000815260200160008152602001600081525090565b60008061395d8989611d41565b600082815260208d815260408083208c84528252918290208251608081018452815481526001820154928101929092526002810154928201929092526003909101546060820152945090925090506139b58382613d5f565b925083156139ec578583604001516139cd91906145ab565b604084015260608301516139e29086906145ab565b6060840152613a11565b82516139f99087906145ab565b83526020830151613a0b9086906145ab565b60208401525b5050979650505050505050565b613a496040518060800160405280600081526020016000815260200160008152602001600081525090565b825115613a74578251670de0b6b3a764000090613a679084906145c3565b613a7191906145e2565b83525b602083015115613aa757670de0b6b3a7640000828460200151613a9791906145c3565b613aa191906145e2565b60208401525b604083015115613ada57670de0b6b3a7640000828460400151613aca91906145c3565b613ad491906145e2565b60408401525b606083015115613b0d57670de0b6b3a7640000828460600151613afd91906145c3565b613b0791906145e2565b60608401525b5090919050565b600081815260016020908152604080832054905170026b4b9b9b4b7339030b2323932b9b99d1607d1b92810192909252603182018490526001600160a01b0316908115159060510160405160208183030381529060405290610c0a5760405162461bcd60e51b815260040161073a9190614762565b600061253f75283937b23ab1ba20b2323932b9b9a932b9b7b63b32b960511b613b14565b60006060815b8151811015613c1357613bde828281518110613bd157613bd16143f6565b6020026020010151613b14565b6001600160a01b0316846001600160a01b03161415613c01575060019392505050565b80613c0b81614422565b915050613bb3565b5060009392505050565b60008181526001830160205260408120548015613d06576000613c41600183614594565b8554909150600090613c5590600190614594565b9050818114613cba576000866000018281548110613c7557613c756143f6565b9060005260206000200154905080876000018481548110613c9857613c986143f6565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613ccb57613ccb614775565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106ae565b60009150506106ae565b6000818152600183016020526040812054613d57575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106ae565b5060006106ae565b613d8a6040518060800160405280600081526020016000815260200160008152602001600081525090565b8115613b0d57505080516040820180516020840180518552929092526060830180519091525290565b600080600084118015613dc65750600083115b15613dfd5782841115613de857613ddd8385614594565b9150600190506106cc565b613df28484614594565b9150600090506106cc565b600084118015613e0b575082155b15613e1b575082905060016106cc565b83158015613e295750600083115b156106cc57509092600092509050565b604080516102408101825260008082526020820152908101613e7c6040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b0381168114610be657600080fd5b60008060408385031215613f1357600080fd5b8235613f1e81613eeb565b91506020830135613f2e81613eeb565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015613f7157835183529284019291840191600101613f55565b50909695505050505050565b600060208284031215613f8f57600080fd5b8135611ee881613eeb565b600080600060608486031215613faf57600080fd5b8335613fba81613eeb565b92506020840135613fca81613eeb565b929592945050506040919091013590565b600060208284031215613fed57600080fd5b5035919050565b60008060006060848603121561400957600080fd5b505081359360208301359350604090920135919050565b8015158114610be657600080fd5b60008060008060008060c0878903121561404757600080fd5b863561405281613eeb565b9550602087013561406281613eeb565b945060408701359350606087013592506080870135915060a087013561408781614020565b809150509295509295509295565b600080600080600060a086880312156140ad57600080fd5b85356140b881613eeb565b945060208601356140c881613eeb565b94979496505050506040830135926060810135926080909101359150565b600080604083850312156140f957600080fd5b823561410481613eeb565b946020939093013593505050565b60008060008060008060c0878903121561412b57600080fd5b863561413681613eeb565b9550602087013561414681613eeb565b95989597505050506040840135936060810135936080820135935060a0909101359150565b60008060006060848603121561418057600080fd5b833561418b81613eeb565b95602085013595506040909401359392505050565b600080600080600080600060e0888a0312156141bb57600080fd5b87356141c681613eeb565b965060208801356141d681613eeb565b96999698505050506040850135946060810135946080820135945060a0820135935060c0909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561424157614241614202565b604052919050565b600067ffffffffffffffff82111561426357614263614202565b5060051b60200190565b600082601f83011261427e57600080fd5b8135602061429361428e83614249565b614218565b82815260059290921b840181019181810190868411156142b257600080fd5b8286015b848110156106a757803583529183019183016142b6565b60008060408084860312156142e157600080fd5b833567ffffffffffffffff808211156142f957600080fd5b8186019150601f878184011261430e57600080fd5b8235602061431e61428e83614249565b82815260059290921b8501810191818101908b84111561433d57600080fd5b8287015b848110156143c6578035878111156143595760008081fd5b8801603f81018e1361436b5760008081fd5b848101358881111561437f5761437f614202565b614390818901601f19168701614218565b8181528f8c8385010111156143a55760008081fd5b818c8401888301376000918101870191909152845250918301918301614341565b5098505088013594505050808311156143de57600080fd5b50506143ec8582860161426d565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156144365761443661440c565b5060010190565b60006020828403121561444f57600080fd5b8151611ee881614020565b60208082526023908201527f494e434f52524543545f4c49515549444154494f4e5f4143524f53535f5641556040820152624c545360e81b606082015260800190565b6000815180845260005b818110156144c3576020818501810151868301820152016144a7565b818111156144d5576000602083870101525b50601f01601f19169290920160200192915050565b828152604060208201526000614503604083018461449d565b949350505050565b60006020828403121561451d57600080fd5b8151611ee881613eeb565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526017908201527f4f6e6c7920416363657074656420436f6e747261637473000000000000000000604082015260600190565b6000828210156145a6576145a661440c565b500390565b600082198211156145be576145be61440c565b500190565b60008160001904831182151516156145dd576145dd61440c565b500290565b6000826145ff57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561461657600080fd5b5051919050565b6000806040838503121561463057600080fd5b505080516020909101519092909150565b6001600160a01b038416815260606020808301829052845191830182905260009185820191906080850190845b8181101561468a5784518352938301939183019160010161466e565b5050848103604086015285518082528282019350600581901b8201830183880160005b838110156146db57601f198584030187526146c983835161449d565b968601969250908501906001016146ad565b50909a9950505050505050505050565b6020808252600f908201526e494e434f52524543545f524154494f60881b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b602081526000611ee8602083018461449d565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220f06980d3c3a98077a35f5fbca5f452bfd4b2de4a6d24ea8e9971320e497624a064736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102735760003560e01c80638cbf5e7811610151578063d1f896ba116100c3578063d9b3bbd711610087578063d9b3bbd71461055f578063dc766b8714610572578063e099765914610585578063ef75abb61461058c578063f2fde38b146105b6578063f30ce771146105c957600080fd5b8063d1f896ba14610521578063d3a3d94c14610529578063d4c3818b14610531578063d60df57a14610539578063d810703b1461054c57600080fd5b8063a64bb9b811610115578063a64bb9b8146104af578063adad5fd1146104c2578063b0779eb9146104d5578063b418ea7a146104e8578063b922ef00146104fb578063cdd942341461050e57600080fd5b80638cbf5e781461045b5780638da5cb5b1461046e578063908b619214610476578063921f523a146104895780639fcaebfa1461049c57600080fd5b80633c4cf9c2116101ea5780637aa49084116101ae5780637aa49084146103e95780637d1f2ded146103fc5780637ea241331461040f578063857dd45d1461042257806386489ba91461043557806388dc6a041461044857600080fd5b80633c4cf9c2146103a05780633d03b9da146103b357806343ca6e80146103bb578063715018a6146103ce57806376a40246146103d657600080fd5b8063232340581161023c578063232340581461032157806326c013031461035457806329985e5a146103675780632af64bd31461036f5780632f02f6fa14610377578063376c633b1461038a57600080fd5b8062fdf3901461027857806304f3bcec146102a157806312a86ffb146102cc5780631aa3a008146102f4578063221c053f146102fe575b600080fd5b61028b610286366004613f00565b6105dc565b6040516102989190613f39565b60405180910390f35b6000546102b4906001600160a01b031681565b6040516001600160a01b039091168152602001610298565b6102df6102da366004613f00565b6106b4565b60408051928352602083019190915201610298565b6102fc6106d3565b005b61031161030c366004613f7d565b610790565b6040519015158152602001610298565b61033461032f366004613f00565b6107bf565b604080519485526020850193909352918301526060820152608001610298565b6102fc610362366004613f9a565b6107e5565b6102fc6108fd565b610311610a90565b6102fc610385366004613fdb565b610bae565b610392610be9565b604051908152602001610298565b6103926103ae366004613f7d565b610bfc565b61028b610c11565b6103116103c9366004613f7d565b610d42565b6102fc610d59565b6102fc6103e4366004613ff4565b610d94565b6102fc6103f736600461402e565b610e14565b6102fc61040a366004614095565b610f2f565b61039261041d3660046140e6565b610fd0565b6102fc610430366004613fdb565b611003565b6102fc610443366004614112565b61103b565b610311610456366004613f7d565b611150565b6102fc61046936600461416b565b611222565b6102b461132f565b6102fc610484366004613fdb565b611362565b610392610497366004613f7d565b61139a565b6102fc6104aa36600461416b565b6113a8565b6103346104bd366004613f9a565b6114cc565b6102fc6104d03660046141a0565b611565565b6103116104e3366004613f7d565b61160c565b6102df6104f6366004613f00565b61177b565b6102df610509366004613f00565b6117cb565b61031161051c36600461416b565b611818565b61039261183f565b610392611852565b610392611865565b610392610547366004613f7d565b611878565b6102fc61055a36600461402e565b611883565b6102fc61056d366004613fdb565b611957565b6102fc61058036600461402e565b61198f565b606061028b565b61059f61059a36600461402e565b611bf2565b604080519215158352901515602083015201610298565b6102fc6105c4366004613f7d565b611c2f565b6102fc6105d73660046142cd565b611ccc565b606060006105ea8484611d41565b50905060006105f7611eae565b600083815260039190910160205260408120915061061482611ed2565b905060008167ffffffffffffffff81111561063157610631614202565b60405190808252806020026020018201604052801561065a578160200160208202803683370190505b50905060005b828110156106a75760006106748583611edc565b905080838381518110610689576106896143f6565b6020908102919091010152508061069f81614422565b915050610660565b5093505050505b92915050565b6000806106c78484600080600080611eef565b915091505b9250929050565b336106dc611eae565b6001600160a01b0382166000908152600291909101602052604090205460ff16156107435760405162461bcd60e51b8152602060048201526012602482015271524547495354455245445f414c524541445960701b60448201526064015b60405180910390fd5b604080516000808252602082019092528161076e565b60608152602001906001900390816107595790505b5060408051600081526020810190915290915061078b8282612048565b505050565b600061079a611eae565b6001600160a01b03909216600090815260029290920160205250604090205460ff1690565b6000806000806107d5868660008060008061210c565b9299919850965090945092505050565b6107ed612525565b6001600160a01b0316336001600160a01b03161461084d5760405162461bcd60e51b815260206004820152601e60248201527f43616c6c6572206973206e6f7420746865206c69717569646174696f6e730000604482015260640161073a565b610855612544565b6040516326c0130360e01b81526001600160a01b03858116600483015284811660248301526044820184905291909116906326c0130390606401602060405180830381600087803b1580156108a957600080fd5b505af11580156108bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e1919061443d565b61078b5760405162461bcd60e51b815260040161073a9061445a565b6000610907610c11565b905060005b8151811015610a8c576000828281518110610929576109296143f6565b6020026020010151905060008060009054906101000a90046001600160a01b03166001600160a01b0316636795dbcd838460405160200161099691907f5265736f6c766572206d697373696e67207461726765743a20000000000000008152601981019190915260390190565b6040516020818303038152906040526040518363ffffffff1660e01b81526004016109c29291906144ea565b60206040518083038186803b1580156109da57600080fd5b505afa1580156109ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a12919061450b565b60008381526001602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251868152918201529192507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68910160405180910390a150508080610a8490614422565b91505061090c565b5050565b600080610a9b610c11565b905060005b8151811015610ba5576000828281518110610abd57610abd6143f6565b60209081029190910181015160008181526001909252604080832054925490516321f8a72160e01b8152600481018390529193506001600160a01b039283169216906321f8a7219060240160206040518083038186803b158015610b2057600080fd5b505afa158015610b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b58919061450b565b6001600160a01b0316141580610b8357506000818152600160205260409020546001600160a01b0316155b15610b92576000935050505090565b5080610b9d81614422565b915050610aa0565b50600191505090565b33610bb761132f565b6001600160a01b031614610bdd5760405162461bcd60e51b815260040161073a90614528565b610be681612561565b50565b6000610bf3611eae565b60070154905090565b6000610c0a8260008061262f565b5092915050565b60408051600580825260c082019092526060916020820160a0803683370190505090506e10dbdb1b185d195c985b15985d5b1d608a1b81600081518110610c5a57610c5a6143f6565b6020026020010181815250507821b937b9b9b1b430b4b720b2323932b9b9a932b9b7b63b32b960391b81600181518110610c9657610c966143f6565b6020026020010181815250507121bab93932b731bca1b7b73a3937b63632b960711b81600281518110610ccb57610ccb6143f6565b6020026020010181815250506b4c69717569646174696f6e7360a01b81600381518110610cfa57610cfa6143f6565b60200260200101818152505075283937b23ab1ba20b2323932b9b9a932b9b7b63b32b960511b81600481518110610d3357610d336143f6565b60200260200101818152505090565b60006106ae82610d50611eae565b6005019061273a565b33610d6261132f565b6001600160a01b031614610d885760405162461bcd60e51b815260040161073a90614528565b610d92600061275c565b565b33610d9d61132f565b6001600160a01b031614610dc35760405162461bcd60e51b815260040161073a90614528565b610dcb611eae565b600801548314610dde57610dde836127cd565b610de6611eae565b600901548214610df957610df982612841565b610e01611eae565b60070154811461078b5761078b8161290f565b610e1d336129dd565b610e395760405162461bcd60e51b815260040161073a9061455d565b6000610e458787611d41565b509050610e6c85610e54611eae565b60008481526003919091016020526040902090612a80565b610ea75760405162461bcd60e51b815260206004820152600c60248201526b6e6f6e2d757365642063637960a01b604482015260640161073a565b610ec0610eb2611eae565b600401888888888888612a98565b610ecc87876001612bbb565b604080518681526020810186905290810184905282151560608201526001600160a01b0380881691908916907f68138c591862f56cecd08a2037bc5b644ec9511c6e90845a64e12fd295a99f26906080015b60405180910390a350505050505050565b610f38336129dd565b610f545760405162461bcd60e51b815260040161073a9061455d565b610f6c610f5f611eae565b6004018686868686612db9565b610f7885856001612bbb565b60408051848152602081018490529081018290526001600160a01b0380861691908716907fff9f0c6cfb29ffc1a20f3a25b0cb947e89cb363e39e3db0df827dcec79f126b69060600160405180910390a35050505050565b6000610fda611eae565b6001600160a01b0384166000908152602091825260408082208583529092522054905092915050565b3361100c61132f565b6001600160a01b0316146110325760405162461bcd60e51b815260040161073a90614528565b610be6816127cd565b60006110476001612eaf565b9050801561105f576002805461ff0019166101001790555b6000611069612f39565b6001600160a01b031614156110cb5760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b606482015260840161073a565b6110d48761275c565b6110dd86612f61565b6110e6856127cd565b6110ef84612841565b6110f88361290f565b61110182612561565b8015611147576002805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b60003361115b61132f565b6001600160a01b0316146111815760405162461bcd60e51b815260040161073a90614528565b61118d82610d50611eae565b6111d95760405162461bcd60e51b815260206004820152601e60248201527f43616e27742072656d6f7665206e6f6e2d6578697374696e6720757365720000604482015260640161073a565b6040516001600160a01b038316907f484fb579b9a8ea6000e970f2490ecb56612c86295b1467a5063ec9a2220b2e4b90600090a26106ae82611219611eae565b60050190612fdc565b61122b336129dd565b6112475760405162461bcd60e51b815260040161073a9061455d565b80611250611eae565b6001600160a01b0385166000908152602091825260408082208683529092529081208054909190611282908490614594565b909155506112909050611eae565b6001600160a01b03841660009081526020918252604080822085835290925220546112e5576112e3826112c1611eae565b6001600160a01b03861660009081526001919091016020526040902090612ff1565b505b60408051838152602081018390526001600160a01b038516917fb4c40c9409d6c2c7dfd2fb0d7e0f26582b9dd0dee72dc0ff6ff09af501ba7a7691015b60405180910390a2505050565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa5b546001600160a01b0316919050565b3361136b61132f565b6001600160a01b0316146113915760405162461bcd60e51b815260040161073a90614528565b610be68161290f565b60006106ae82600080612ffd565b6113b1336129dd565b6113cd5760405162461bcd60e51b815260040161073a9061455d565b6113fb826113d9611eae565b6001600160a01b03861660009081526001919091016020526040902090613196565b50611407838383611818565b61144b5760405162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da0818dbdb1b185d195c985b605a1b604482015260640161073a565b80611454611eae565b6001600160a01b03851660009081526020918252604080822086835290925290812080549091906114869084906145ab565b909155505060408051838152602081018390526001600160a01b038516917f430a1193f254f9e15dc397d101a1ecf0a3383c95007062135900cc7c2a6b80439101611322565b60008060008060006114de8888611d41565b5090506114ed86610e54611eae565b6115285760405162461bcd60e51b815260206004820152600c60248201526b6e6f6e2d757365642063637960a01b604482015260640161073a565b6000611540611535611eae565b6004018a8a8a6131a2565b805160208201516040830151606090930151919c909b50919950975095505050505050565b61156e336129dd565b61158a5760405162461bcd60e51b815260040161073a9061455d565b6115a4611595611eae565b6004018888888888888861323d565b6115b087876001612bbb565b604080518681526020810186905290810184905260608101839052608081018290526001600160a01b0380881691908916907f93e5ba92322cd89358ce3fbbe2b25b694ef010aee4a1e46ac849c392887bd5089060a001610f1e565b60003361161761132f565b6001600160a01b03161461163d5760405162461bcd60e51b815260040161073a90614528565b6001600160a01b0382166116825760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b604482015260640161073a565b6001600160a01b0382163b6116d95760405162461bcd60e51b815260206004820152601e60248201527f43616e277420616464206e6f6e2d636f6e747261637420616464726573730000604482015260640161073a565b6116e582610d50611eae565b156117325760405162461bcd60e51b815260206004820152601a60248201527f43616e277420616464206578697374696e672061646472657373000000000000604482015260640161073a565b6040516001600160a01b038316907f6426e73541c82494e19ac1646c231acf4b36f248c5146ed03a248e35dde1fac090600090a26106ae82611772611eae565b60050190613319565b6000806000806000806117968888600080600080600161332e565b92965090945092509050826117ac5760006117ae565b835b816117ba5760006117bc565b825b95509550505050509250929050565b6000806000806000806117e68888600080600080600161332e565b92965090945092509050826117fb57836117fe565b60005b8161180957826117bc565b98600098509650505050505050565b60008061182685858561262f565b509050611831611eae565b600801541115949350505050565b6000611849611eae565b60090154905090565b600061185c611eae565b60080154905090565b600061186f611eae565b600a0154905090565b6000610c0a826134da565b61188c336129dd565b6118a85760405162461bcd60e51b815260040161073a9061455d565b60006118b48787611d41565b5090506118db856118c3611eae565b60008481526003919091016020526040902090613196565b506118f56118e7611eae565b600401888888888888613638565b61190187876001612bbb565b604080518681526020810186905290810184905282151560608201526001600160a01b0380881691908916907fb98a18b045c69b240b38573658669b475c5431a85b85c92eb84473a2c3ff09a590608001610f1e565b3361196061132f565b6001600160a01b0316146119865760405162461bcd60e51b815260040161073a90614528565b610be681612841565b611998336129dd565b6119b45760405162461bcd60e51b815260040161073a9061455d565b60006127106119c161183f565b6119cb90866145c3565b6119d591906145e2565b905060006119e161372d565b6040516344a6ecdd60e01b815260048101889052602481018490526001600160a01b0391909116906344a6ecdd9060440160206040518083038186803b158015611a2a57600080fd5b505afa158015611a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a629190614604565b9050611a6c612544565b6040516326c0130360e01b81526001600160a01b038a8116600483015289811660248301526044820184905291909116906326c0130390606401602060405180830381600087803b158015611ac057600080fd5b505af1158015611ad4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af8919061443d565b611b145760405162461bcd60e51b815260040161073a9061445a565b866001600160a01b0316886001600160a01b03167fed433eb165bd381b6fa417686c541023235ba1cc52f6075a29f79d4d28d328bc8888604051611b62929190918252602082015260400190565b60405180910390a3611b84611b75611eae565b60040189898988600089612a98565b6040805187815260208101869052600081830152841515606082015290516001600160a01b0389811692908b16917f68138c591862f56cecd08a2037bc5b644ec9511c6e90845a64e12fd295a99f269181900360800190a3611be888886001612bbb565b5050505050505050565b600080600080611c068a8a8a8a8a8a611eef565b91509150611c12611852565b821015611c1d611852565b909b9110159950975050505050505050565b33611c3861132f565b6001600160a01b031614611c5e5760405162461bcd60e51b815260040161073a90614528565b6001600160a01b038116611cc35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161073a565b610be68161275c565b33611cd5611eae565b6001600160a01b0382166000908152600291909101602052604090205460ff1615611d375760405162461bcd60e51b8152602060048201526012602482015271524547495354455245445f414c524541445960701b604482015260640161073a565b61078b8383612048565b600080826001600160a01b0316846001600160a01b03161415611d9c5760405162461bcd60e51b81526020600482015260136024820152724964656e746963616c2061646472657373657360681b604482015260640161073a565b600080846001600160a01b0316866001600160a01b031610611dbf578486611dc2565b85855b90925090506001600160a01b038216611e0f5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640161073a565b856001600160a01b0316826001600160a01b031614611e6b57604080516001600160a01b0380851660208301528316918101919091526060016040516020818303038152906040528051906020012060019350935050506106cc565b604080516001600160a01b0380851660208301528316918101919091526060016040516020818303038152906040528051906020012060009350935050506106cc565b7f747d407d1d7f7c17ec532d202f3588c3ef20935de503a75a59a836e49167b5fe90565b60006106ae825490565b6000611ee8838361374d565b9392505050565b600080611f2b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b611f39898989898989613777565b60208301528152611f48612544565b6040516373f18dbf60e01b81526001600160a01b038b811660048301528a8116602483015291909116906373f18dbf90604401604080518083038186803b158015611f9257600080fd5b505afa158015611fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fca919061461d565b60a08301526080820152805115611ffe5780516080820151611fee906127106145c3565b611ff891906145e2565b60408201525b60208101511561202e57602081015160a082015161201e906127106145c3565b61202891906145e2565b60608201525b806040015181606001519250925050965096945050505050565b6001612052611eae565b33600090815260029190910160205260409020805460ff191691151591909117905561207c6138fe565b6001600160a01b031663e9ac42cb3383856040518463ffffffff1660e01b81526004016120ab93929190614641565b600060405180830381600087803b1580156120c557600080fd5b505af11580156120d9573d6000803e3d6000fd5b50506040513392507feeda149c76076b34d4b9d8896c2f7efc0d33d1c7b53ea3c5db490d64613f603a9150600090a25050565b60008060008061211a613e39565b6121248b8b611d41565b5081526000612131611eae565b8251600090815260039190910160205260409020905061215081611ed2565b61022083015260005b8261022001518110156123ed576121708282611edc565b602084018190528b14156121a55761219b612189611eae565b6004018e8e86602001518e8e8e613925565b60408401526121c5565b6121bf6121b0611eae565b6004018e8e86602001516131a2565b60408401525b6121cd61372d565b6001600160a01b0316631743ffce84602001516040518263ffffffff1660e01b81526004016121fe91815260200190565b60206040518083038186803b15801561221657600080fd5b505afa15801561222a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224e9190614604565b60608401819052604084015161226391613a1e565b6040840181905251608084015161227a91906145ab565b608084015260408301516020015160a084015161229791906145ab565b60a08401526122a461372d565b6001600160a01b0316639abdb38a84602001516040518263ffffffff1660e01b81526004016122d591815260200190565b60206040518083038186803b1580156122ed57600080fd5b505afa158015612301573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123259190614604565b610180840152604080840151015160c084015161234291906145ab565b60c084015260408301516060015160e084015161235f91906145ab565b60e084015261018083015160408085015101516127109161237f916145c3565b61238991906145e2565b83610140015161239991906145ab565b610140840152610180830151604084015160600151612710916123bb916145c3565b6123c591906145e2565b8361016001516123d591906145ab565b610160840152806123e581614422565b915050612159565b508161016001518260c00151101561240657600061241b565b8161016001518260c0015161241b9190614594565b6101a083015261014082015160e0830151101561243957600061244e565b8161014001518260e0015161244e9190614594565b6101c083018190526101a0830151116124905781608001518260a00151836101a00151846101c001516124819190614594565b61248b91906145ab565b6124bb565b8160800151826101c00151836101a001516124ab9190614594565b6124b591906145ab565b8260a001515b6102008401526101e083015260c082015160808301516124db91906145ab565b61010083015260e082015160a08301516124f591906145ab565b61012083018190526101e083015161020084015161010090940151909e939d509b50995090975050505050505050565b600061253f6b4c69717569646174696f6e7360a01b613b14565b905090565b600061253f6e10dbdb1b185d195c985b15985d5b1d608a1b613b14565b600081116125815760405162461bcd60e51b815260040161073a906146eb565b612589611eae565b6009015481106125db5760405162461bcd60e51b815260206004820152601d60248201527f4d494e5f434f4c4c41544552414c5f524154494f5f4f564552464c4f57000000604482015260640161073a565b7f8367b1759e8fdce5712002e7aa025339b99cf3c850b194ebdf37219f86b01ee6612604611eae565b600a015460408051918252602082018490520160405180910390a180612628611eae565b600a015550565b60008061265660405180606001604052806000815260200160008152602001600081525090565b612661868686612ffd565b815261266b612544565b604051639491170960e01b81526001600160a01b038881166004830152919091169063949117099060240160206040518083038186803b1580156126ae57600080fd5b505afa1580156126c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e69190614604565b60408201528051156127195780516040820151612705906127106145c3565b61270f91906145e2565b6020820152612725565b51600092509050612732565b6020810151905190925090505b935093915050565b6001600160a01b03811660009081526001830160205260408120541515611ee8565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081116127ed5760405162461bcd60e51b815260040161073a906146eb565b7f31ee2d7ab5f3365672e54f81f75b37a4d8b0f1085872bdb80349a1cb08ddb711612816611eae565b6008015460408051918252602082018490520160405180910390a18061283a611eae565b6008015550565b600081116128615760405162461bcd60e51b815260040161073a906146eb565b612869611eae565b6008015481106128bb5760405162461bcd60e51b815260206004820152601f60248201527f4155544f5f4c49515549444154494f4e5f524154494f5f4f564552464c4f5700604482015260640161073a565b7fd3353684d64f1c80498433d8407c96e6bbeb1ec88b6200ec97d2c910fdbd0da46128e4611eae565b6009015460408051918252602082018490520160405180910390a180612908611eae565b6009015550565b6000811161292f5760405162461bcd60e51b815260040161073a906146eb565b612937611eae565b6009015481106129895760405162461bcd60e51b815260206004820152601a60248201527f4c49515549444154494f4e5f50524943455f4f564552464c4f57000000000000604482015260640161073a565b7f86aa422ec6af9520cb2f744924b12937e3db1aa5ce22050d0d519621e84090706129b2611eae565b6007015460408051918252602082018490520160405180910390a1806129d6611eae565b6007015550565b60006129e882610d42565b80612a7157506129f6613b89565b60405163a3d52aad60e01b81526001600160a01b038481166004830152919091169063a3d52aad9060240160206040518083038186803b158015612a3957600080fd5b505afa158015612a4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a71919061443d565b806106ae57506106ae82613bad565b60008181526001830160205260408120541515611ee8565b600080612aa58888611d41565b600082815260208c815260408083208b84529091529020919350915081612b3d578515612afc578315612aec57858160020154612ae29190614594565b6002820155612afc565b8054612af9908790614594565b81555b8415612b38578315612b2257848160030154612b189190614594565b6003820155612baf565b848160010154612b329190614594565b60018201555b612baf565b8515612b79578315612b6357858160030154612b599190614594565b6003820155612b79565b858160010154612b739190614594565b60018201555b8415612baf578315612b9f57848160020154612b959190614594565b6002820155612baf565b8054612bac908690614594565b81555b50505050505050505050565b600080600080612bd287876000806000808b61332e565b93509350935093506000841115612ccb57612beb612544565b6040516321b3b8d760e21b81526001600160a01b038981166004830152888116602483015260448201879052851515606483015291909116906386cee35c90608401602060405180830381600087803b158015612c4757600080fd5b505af1158015612c5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7f919061443d565b612ccb5760405162461bcd60e51b815260206004820152601e60248201527f4e4f4e5f454e4f5547485f46554e44535f464f525f524542414c414e43450000604482015260640161073a565b811561114757612cd9612544565b6040516321b3b8d760e21b81526001600160a01b038881166004830152898116602483015260448201859052831515606483015291909116906386cee35c90608401602060405180830381600087803b158015612d3557600080fd5b505af1158015612d49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6d919061443d565b6111475760405162461bcd60e51b815260206004820152601e60248201527f4e4f4e5f454e4f5547485f46554e44535f464f525f524542414c414e43450000604482015260640161073a565b600080612dc68787611d41565b600082815260208b815260408083208a84529091529020919350915081612e48578415612e12578054612dfa908690614594565b81556002810154612e0c9086906145ab565b60028201555b8315612e4357838160010154612e289190614594565b60018201556003810154612e3d9085906145ab565b60038201555b612ea4565b8415612e7957848160010154612e5e9190614594565b60018201556003810154612e739086906145ab565b60038201555b8315612ea4578054612e8c908590614594565b81556002810154612e9e9085906145ab565b60028201555b505050505050505050565b600254600090610100900460ff1615612ef8578160ff166001148015612ed45750303b155b612ef05760405162461bcd60e51b815260040161073a90614714565b506000919050565b60025460ff808416911610612f1f5760405162461bcd60e51b815260040161073a90614714565b506002805460ff191660ff92909216919091179055600190565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc611353565b6000546001600160a01b031615612fba5760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c72656164790000000000604482015260640161073a565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000611ee8836001600160a01b038416613c1d565b6000611ee88383613c1d565b600080613008611eae565b6001016000866001600160a01b03166001600160a01b03168152602001908152602001600020905061305b6040518060800160405280600081526020016000815260200160008152602001600081525090565b61306482611ed2565b606082015260005b816060015181101561318b5760006130848483611edc565b905061308e611eae565b6001600160a01b038916600090815260209182526040808220848352835290205490840152868114156130d1578583602001516130cb91906145ab565b60208401525b6130d961372d565b6001600160a01b03166344a6ecdd8285602001516040518363ffffffff1660e01b8152600401613113929190918252602082015260400190565b60206040518083038186803b15801561312b57600080fd5b505afa15801561313f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131639190614604565b60408401819052835161317691906145ab565b8352508061318381614422565b91505061306c565b505195945050505050565b6000611ee88383613d10565b6131cd6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000806131da8686611d41565b600082815260208a815260408083208984528252918290208251608081018452815481526001820154928101929092526002810154928201929092526003909101546060820152945090925090506132328382613d5f565b979650505050505050565b60008061324a8989611d41565b600082815260208d815260408083208c845290915290209193509150816132be57841561329257848782600201546132829190614594565b61328c91906145ab565b60028201555b83156132b957838682600301546132a99190614594565b6132b391906145ab565b60038201555b61330c565b84156132e557848782600301546132d59190614594565b6132df91906145ab565b60038201555b831561330c57838682600201546132fc9190614594565b61330691906145ab565b60028201555b5050505050505050505050565b6000611ee8836001600160a01b038416613d10565b6000806000806133806040518061010001604052806000815260200160008152602001600081526020016000151581526020016000815260200160001515815260200160008152602001600081525090565b61338e8c8c8c8c8c8c613777565b6020830152815285156133e8576127106133a6611852565b82516133b291906145c3565b6133bc91906145e2565b81526127106133c9611852565b82602001516133d891906145c3565b6133e291906145e2565b60208201525b6133f0612544565b6040516373f18dbf60e01b81526001600160a01b038e811660048301528d8116602483015291909116906373f18dbf90604401604080518083038186803b15801561343a57600080fd5b505afa15801561344e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613472919061461d565b60e083015260c08201819052815161348a9190613db3565b15156060830152604082015260e081015160208201516134aa9190613db3565b151560a08301819052608083018290526040830151606090930151929e929d50909b509950975050505050505050565b60008061350f6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b61351b8460008061262f565b8252602082015261352a612544565b604051639491170960e01b81526001600160a01b038681166004830152919091169063949117099060240160206040518083038186803b15801561356d57600080fd5b505afa158015613581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a59190614604565b60808201526135b2611852565b81602001511115613604576135c5611852565b81602001516135d49190614594565b604082018190526020820151608083015190916135f0916145c3565b6135fa91906145e2565b6060820152613627565b805161361b57608081015190519094909350915050565b51600094909350915050565b606081015190519094909350915050565b6000806136458888611d41565b600082815260208c815260408083208b845290915290209193509150816136c857851561369c57831561368c5785816002015461368291906145ab565b600282015561369c565b80546136999087906145ab565b81555b8415612b385783156136b857848160030154612b1891906145ab565b848160010154612b3291906145ab565b85156137045783156136ee578581600301546136e491906145ab565b6003820155613704565b8581600101546136fe91906145ab565b60018201555b8415612baf57831561372057848160020154612b9591906145ab565b8054612bac9086906145ab565b600061253f7121bab93932b731bca1b7b73a3937b63632b960711b613b14565b6000826000018281548110613764576137646143f6565b9060005260206000200154905092915050565b6000806137c260405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6137d089898989898961210c565b60608501526040840152602083015281526127106137ec611865565b82604001516137fb91906145c3565b61380591906145e2565b6080820152612710613815611865565b826060015161382491906145c3565b61382e91906145e2565b60a082015280511561387c57612710613845611852565b825161385191906145c3565b61385b91906145e2565b81608001511161386c578051613872565b80608001515b60c0820152613887565b608081015160c08201525b6020810151156138d95761271061389c611852565b82602001516138ab91906145c3565b6138b591906145e2565b8160a00151116138c95780602001516138cf565b8060a001515b60e08201526138e4565b60a081015160e08201525b8060c001518160e001519250925050965096945050505050565b600061253f7821b937b9b9b1b430b4b720b2323932b9b9a932b9b7b63b32b960391b613b14565b6139506040518060800160405280600081526020016000815260200160008152602001600081525090565b60008061395d8989611d41565b600082815260208d815260408083208c84528252918290208251608081018452815481526001820154928101929092526002810154928201929092526003909101546060820152945090925090506139b58382613d5f565b925083156139ec578583604001516139cd91906145ab565b604084015260608301516139e29086906145ab565b6060840152613a11565b82516139f99087906145ab565b83526020830151613a0b9086906145ab565b60208401525b5050979650505050505050565b613a496040518060800160405280600081526020016000815260200160008152602001600081525090565b825115613a74578251670de0b6b3a764000090613a679084906145c3565b613a7191906145e2565b83525b602083015115613aa757670de0b6b3a7640000828460200151613a9791906145c3565b613aa191906145e2565b60208401525b604083015115613ada57670de0b6b3a7640000828460400151613aca91906145c3565b613ad491906145e2565b60408401525b606083015115613b0d57670de0b6b3a7640000828460600151613afd91906145c3565b613b0791906145e2565b60608401525b5090919050565b600081815260016020908152604080832054905170026b4b9b9b4b7339030b2323932b9b99d1607d1b92810192909252603182018490526001600160a01b0316908115159060510160405160208183030381529060405290610c0a5760405162461bcd60e51b815260040161073a9190614762565b600061253f75283937b23ab1ba20b2323932b9b9a932b9b7b63b32b960511b613b14565b60006060815b8151811015613c1357613bde828281518110613bd157613bd16143f6565b6020026020010151613b14565b6001600160a01b0316846001600160a01b03161415613c01575060019392505050565b80613c0b81614422565b915050613bb3565b5060009392505050565b60008181526001830160205260408120548015613d06576000613c41600183614594565b8554909150600090613c5590600190614594565b9050818114613cba576000866000018281548110613c7557613c756143f6565b9060005260206000200154905080876000018481548110613c9857613c986143f6565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613ccb57613ccb614775565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106ae565b60009150506106ae565b6000818152600183016020526040812054613d57575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106ae565b5060006106ae565b613d8a6040518060800160405280600081526020016000815260200160008152602001600081525090565b8115613b0d57505080516040820180516020840180518552929092526060830180519091525290565b600080600084118015613dc65750600083115b15613dfd5782841115613de857613ddd8385614594565b9150600190506106cc565b613df28484614594565b9150600090506106cc565b600084118015613e0b575082155b15613e1b575082905060016106cc565b83158015613e295750600083115b156106cc57509092600092509050565b604080516102408101825260008082526020820152908101613e7c6040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b0381168114610be657600080fd5b60008060408385031215613f1357600080fd5b8235613f1e81613eeb565b91506020830135613f2e81613eeb565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015613f7157835183529284019291840191600101613f55565b50909695505050505050565b600060208284031215613f8f57600080fd5b8135611ee881613eeb565b600080600060608486031215613faf57600080fd5b8335613fba81613eeb565b92506020840135613fca81613eeb565b929592945050506040919091013590565b600060208284031215613fed57600080fd5b5035919050565b60008060006060848603121561400957600080fd5b505081359360208301359350604090920135919050565b8015158114610be657600080fd5b60008060008060008060c0878903121561404757600080fd5b863561405281613eeb565b9550602087013561406281613eeb565b945060408701359350606087013592506080870135915060a087013561408781614020565b809150509295509295509295565b600080600080600060a086880312156140ad57600080fd5b85356140b881613eeb565b945060208601356140c881613eeb565b94979496505050506040830135926060810135926080909101359150565b600080604083850312156140f957600080fd5b823561410481613eeb565b946020939093013593505050565b60008060008060008060c0878903121561412b57600080fd5b863561413681613eeb565b9550602087013561414681613eeb565b95989597505050506040840135936060810135936080820135935060a0909101359150565b60008060006060848603121561418057600080fd5b833561418b81613eeb565b95602085013595506040909401359392505050565b600080600080600080600060e0888a0312156141bb57600080fd5b87356141c681613eeb565b965060208801356141d681613eeb565b96999698505050506040850135946060810135946080820135945060a0820135935060c0909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561424157614241614202565b604052919050565b600067ffffffffffffffff82111561426357614263614202565b5060051b60200190565b600082601f83011261427e57600080fd5b8135602061429361428e83614249565b614218565b82815260059290921b840181019181810190868411156142b257600080fd5b8286015b848110156106a757803583529183019183016142b6565b60008060408084860312156142e157600080fd5b833567ffffffffffffffff808211156142f957600080fd5b8186019150601f878184011261430e57600080fd5b8235602061431e61428e83614249565b82815260059290921b8501810191818101908b84111561433d57600080fd5b8287015b848110156143c6578035878111156143595760008081fd5b8801603f81018e1361436b5760008081fd5b848101358881111561437f5761437f614202565b614390818901601f19168701614218565b8181528f8c8385010111156143a55760008081fd5b818c8401888301376000918101870191909152845250918301918301614341565b5098505088013594505050808311156143de57600080fd5b50506143ec8582860161426d565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156144365761443661440c565b5060010190565b60006020828403121561444f57600080fd5b8151611ee881614020565b60208082526023908201527f494e434f52524543545f4c49515549444154494f4e5f4143524f53535f5641556040820152624c545360e81b606082015260800190565b6000815180845260005b818110156144c3576020818501810151868301820152016144a7565b818111156144d5576000602083870101525b50601f01601f19169290920160200192915050565b828152604060208201526000614503604083018461449d565b949350505050565b60006020828403121561451d57600080fd5b8151611ee881613eeb565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526017908201527f4f6e6c7920416363657074656420436f6e747261637473000000000000000000604082015260600190565b6000828210156145a6576145a661440c565b500390565b600082198211156145be576145be61440c565b500190565b60008160001904831182151516156145dd576145dd61440c565b500290565b6000826145ff57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561461657600080fd5b5051919050565b6000806040838503121561463057600080fd5b505080516020909101519092909150565b6001600160a01b038416815260606020808301829052845191830182905260009185820191906080850190845b8181101561468a5784518352938301939183019160010161466e565b5050848103604086015285518082528282019350600581901b8201830183880160005b838110156146db57601f198584030187526146c983835161449d565b968601969250908501906001016146ad565b50909a9950505050505050505050565b6020808252600f908201526e494e434f52524543545f524154494f60881b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b602081526000611ee8602083018461449d565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220f06980d3c3a98077a35f5fbca5f452bfd4b2de4a6d24ea8e9971320e497624a064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptedContracts()": {
        "details": "Returns contract names that can call this contract."
      },
      "addCollateralUser(address)": {
        "details": "Triggers to add contract address to collateral users address set",
        "params": {
          "_user": "Collateral user smart contract address"
        }
      },
      "getAutoLiquidationThresholdRate()": {
        "details": "Triggers to get auto liquidation threshold rate"
      },
      "getCoverage(address,address)": {
        "details": "Triggers to get bilateral position collateral coverage.",
        "params": {
          "_party0": "Counterparty A address",
          "_party1": "Counterparty B address"
        }
      },
      "getLiquidationPriceRate()": {
        "details": "Triggers to get liquidation price rate"
      },
      "getMarginCallThresholdRate()": {
        "details": "Triggers to get margin call threshold rate"
      },
      "getMaxCollateralBookWidthdraw(address)": {
        "details": "Triggers to get maximum amount of ETH available to widthdraw from `_user` collateral book.",
        "params": {
          "_user": "User's address"
        }
      },
      "getMaxCollateralWidthdraw(address,address)": {
        "details": "Triggers to get maximum amount of ETH available to widthdraw from bilateral position between `party0` and `_party1`.",
        "params": {
          "_party0": "Counterparty A address",
          "_party1": "Counterparty B address"
        }
      },
      "getMinCollateralRate()": {
        "details": "Triggers to get min collateral rate"
      },
      "getNetAndTotalPV(address,address)": {
        "details": "Triggers to calculate netted exposures across all currencies with applied haircuts",
        "params": {
          "_party0": "Counterparty A address",
          "_party1": "Counterparty B address"
        }
      },
      "getRebalanceCollateralAmounts(address,address)": {
        "details": "Triggers to get coverage of the global collateral book against all unsettled exposure.",
        "params": {
          "_party0": "Counterparty A address",
          "_party1": "Counterparty B address"
        }
      },
      "getTotalUnsettledExp(address)": {
        "details": "Triggers to calculate total unsettled exposure across all currencies",
        "params": {
          "_user": "User's address"
        }
      },
      "getUnsettledCoverage(address)": {
        "details": "Triggers to get coverage of the global collateral book against all unsettled exposure.",
        "params": {
          "_user": "User's address"
        }
      },
      "initialize(address,address,uint256,uint256,uint256,uint256)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController"
      },
      "isCollateralUser(address)": {
        "details": "Triggers to check if provided `addr` is a CollateralUser from address set",
        "params": {
          "_user": "Contract address to check if it's a CollateralUser"
        }
      },
      "isCovered(address,address,bytes32,uint256,uint256,bool)": {
        "details": "Triggers to check if collateral covered more that 150%.",
        "params": {
          "_ccy": "Currency to calculate additional PV for",
          "_party0": "Counterparty A address",
          "_party0PV": "Counterparty A additional present value",
          "_party1": "Counterparty B address",
          "_party1PV": "Counterparty B additional present value"
        }
      },
      "isCoveredUnsettled(address,bytes32,uint256)": {
        "details": "Triggers to check if unsettled collateral exposure covered more that 150% from a global collateral book of `_user`.",
        "params": {
          "_ccy": "Currency to calculate additional PV for",
          "_unsettledExp": "Additional exposure to lock into unsettled exposure",
          "_user": "User's ethereum address"
        }
      },
      "liquidate(address,address,bytes32,uint256,uint256,bool)": {
        "details": "Triggers to liquidate collateral between `from` and `to` parties works liquidation amount in native `ccy`",
        "params": {
          "ccy": "Short identifier of currency used to liquidate",
          "from": "Address for liquidating collateral from",
          "isSettled": "Identifier wether collateral obligations for release is settled",
          "liquidationAmount": "Liquidation amount in Ccy",
          "to": "Address for sending collateral to"
        }
      },
      "liquidate(address,address,uint256)": {
        "details": "Triggers to liquidate collateral between `from` and `to` parties works with aggregated liquidation amount in ETH",
        "params": {
          "from": "Address for liquidating collateral from",
          "liquidationInETH": "Liquidation amount in Ccy",
          "to": "Address for sending collateral to"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "register()": {
        "details": "Register user and store collateral book"
      },
      "register(string[],uint256[])": {
        "details": "Register user and store collateral book",
        "params": {
          "_addresses": "Array of other blockchain addresses",
          "_chainIds": "Array of chain ids for other blockchains"
        }
      },
      "releaseCollateral(address,address,bytes32,uint256,uint256,bool)": {
        "details": "Triggers to reduce PV for specific `ccy` in bilateral position between `partyA` and `partyB`",
        "params": {
          "amount0": "Amount of funds to be removed in CcyNetting for counterparty A",
          "amount1": "Amount of funds to be removed in CcyNetting for counterparty B",
          "ccy": "Specified currency of the deal",
          "partyA": "Counterparty A address",
          "partyB": "Counterparty B address"
        }
      },
      "releaseUnsettledCollateral(address,bytes32,uint256)": {
        "details": "Triggers to reduce the amount of unsettled exposure in specific `ccy` from a global collateral book of `user`",
        "params": {
          "amount": "Amount of funds to be unlocked from unsettled exposure in specified ccy",
          "ccy": "Specified currency of the deal",
          "user": "User's ETH address"
        }
      },
      "removeCollateralUser(address)": {
        "details": "Triggers to remove collateral user from address set",
        "params": {
          "_user": "Collateral user smart contract address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requiredContracts()": {
        "details": "Returns required contract names in this contract"
      },
      "settleCollateral(address,address,bytes32,uint256,uint256)": {
        "details": "Triggers to lock collateral using ETH rate for selected currency.",
        "params": {
          "amount0": "Amount of funds to be locked in Ccy for counterparty A",
          "amount1": "Amount of funds to be locked in Ccy for counterparty B",
          "ccy": "Specified currency of the deal",
          "partyA": "Counterparty A address",
          "partyB": "Counterparty B address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAutoLiquidationThresholdRate(uint256)": {
        "details": "Triggers to update liquidation level rate",
        "params": {
          "_rate": "Auto Liquidation level rate"
        }
      },
      "updateLiquidationPriceRate(uint256)": {
        "details": "Triggers to update liquidation price rate",
        "params": {
          "_rate": "Liquidation price rate in basis point"
        }
      },
      "updateMainParameters(uint256,uint256,uint256)": {
        "details": "Triggers to safely update main collateral parameters this function solves the issue of frontrunning during parameters tuning",
        "params": {
          "_autoLiquidationThresholdRate": "Auto liquidation threshold rate",
          "_liquidationPriceRate": "Liquidation price rate",
          "_marginCallThresholdRate": "Margin call threshold ratio"
        }
      },
      "updateMarginCallThresholdRate(uint256)": {
        "details": "Triggers to update margin call level",
        "params": {
          "_rate": "Margin call rate"
        }
      },
      "updateMinCollateralRate(uint256)": {
        "details": "Triggers to update minimal collateral rate",
        "params": {
          "_rate": "Minimal collateral rate in basis points"
        }
      },
      "updatePV(address,address,bytes32,uint256,uint256,uint256,uint256)": {
        "details": "Triggers to update PV value in currency for bilateral position changes present value in native currency, without exchange rate conversion",
        "params": {
          "ccy": "Specified currency of the deal",
          "currentPV0": "Current present value to be added to total exposure for counterparty A",
          "currentPV1": "Current present value to be added to total exposure for counterparty B",
          "party0": "Counterparty A address",
          "party1": "Counterparty B address",
          "prevPV0": "Previous present value to be substracted from total exposure for counterparty A",
          "prevPV1": "Previous present value to be substracted from total exposure for counterparty B"
        }
      },
      "useCollateral(address,address,bytes32,uint256,uint256,bool)": {
        "details": "Triggers to lock collateral using ETH rate for selected currency.",
        "params": {
          "amount0": "Amount of funds to be locked in Ccy for counterparty A",
          "amount1": "Amount of funds to be locked in Ccy for counterparty B",
          "ccy": "Specified currency of the deal",
          "partyA": "Counterparty A address",
          "partyB": "Counterparty B address"
        }
      },
      "useUnsettledCollateral(address,bytes32,uint256)": {
        "details": "Triggers to lock unsettled collateral on a global book for selected currency.",
        "params": {
          "amount": "Amount of funds to be locked in Ccy for user",
          "ccy": "Specified currency of the deal",
          "user": "User's address"
        }
      }
    },
    "title": "Collateral Aggregator contract is used to manage Secured Finance protocol collateral obligations and movements of collateral across collateral vaults. This contract handle the calculations of aggregated collateral obligations between users in a bilateral relations, calculations of required rebalancing to stabilize the bilateral position, liquidations using FX rates for all protocol currency pairs to ETH Liquidations and rebalancing operations are handled across all collateral vaults where users have deposited their funds in FIFO order. Contract linked to Product based contracts (like Loan, Swap, etc), LendingMarkets, CurrencyController contracts and Liquidation Engine.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addCollateralUser(address)": {
        "notice": "Trifgers only be contract ownerReverts on saving 0x0 address"
      },
      "initialize(address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Initializes the contract."
      },
      "removeCollateralUser(address)": {
        "notice": "Triggers only be contract ownerReverts on removing non-existing collateral user"
      },
      "updateAutoLiquidationThresholdRate(uint256)": {
        "notice": "Triggers only be contract owner"
      },
      "updateLiquidationPriceRate(uint256)": {
        "notice": "Triggers only be contract owner"
      },
      "updateMainParameters(uint256,uint256,uint256)": {
        "notice": "Triggers only be contract owner"
      },
      "updateMarginCallThresholdRate(uint256)": {
        "notice": "Triggers only be contract owner"
      },
      "updateMinCollateralRate(uint256)": {
        "notice": "Triggers only be contract owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 35871,
        "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
        "label": "resolver",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAddressResolver)23433"
      },
      {
        "astId": 35875,
        "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
        "label": "addressCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2990,
        "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 2993,
        "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAddressResolver)23433": {
        "encoding": "inplace",
        "label": "contract IAddressResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}