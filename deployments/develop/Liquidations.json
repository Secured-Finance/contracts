{
  "address": "0xf5Db7CD58818A3862D63857269A3413844722bd1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        }
      ],
      "name": "DealAddedToLiquidationQueue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        }
      ],
      "name": "DealRemovedFromLiquidationQueue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidationAgent",
          "type": "address"
        }
      ],
      "name": "LiquidationAgentAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidationAgent",
          "type": "address"
        }
      ],
      "name": "LiquidationAgentRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldOffset",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newOffset",
          "type": "uint256"
        }
      ],
      "name": "OffsetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        }
      ],
      "name": "addDealToLiquidationQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidationAgent",
          "type": "address"
        }
      ],
      "name": "addLiquidationAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "dealIds",
          "type": "bytes32[]"
        }
      ],
      "name": "liquidateDeals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        }
      ],
      "name": "liquidateDeals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        }
      ],
      "name": "removeDealFromLiquidationQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidationAgent",
          "type": "address"
        }
      ],
      "name": "removeLiquidationAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "updateLiquidationOffset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4203c980bc67f20ab1cb6f9ecd9297d4ccc241f638b450c03d2a0b10a09cbace",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0xf5Db7CD58818A3862D63857269A3413844722bd1",
    "transactionIndex": 9,
    "gasUsed": "1849171",
    "logsBloom": "0x
    "blockHash": "0x477cc8cda3b01a3e83f64f145263a0528c57bc24c0c7fe3fa74da3b97e435f94",
    "transactionHash": "0x4203c980bc67f20ab1cb6f9ecd9297d4ccc241f638b450c03d2a0b10a09cbace",
    "logs": [],
    "blockNumber": 10928103,
    "cumulativeGasUsed": "3241943",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0fd5a5d025de86963d36bd38be3b6dce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"}],\"name\":\"DealAddedToLiquidationQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"}],\"name\":\"DealRemovedFromLiquidationQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidationAgent\",\"type\":\"address\"}],\"name\":\"LiquidationAgentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidationAgent\",\"type\":\"address\"}],\"name\":\"LiquidationAgentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldOffset\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOffset\",\"type\":\"uint256\"}],\"name\":\"OffsetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"}],\"name\":\"addDealToLiquidationQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidationAgent\",\"type\":\"address\"}],\"name\":\"addLiquidationAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"dealIds\",\"type\":\"bytes32[]\"}],\"name\":\"liquidateDeals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"}],\"name\":\"liquidateDeals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"}],\"name\":\"removeDealFromLiquidationQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidationAgent\",\"type\":\"address\"}],\"name\":\"removeLiquidationAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"updateLiquidationOffset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptedContracts()\":{\"details\":\"Returns contract names that can call this contract.\"},\"addLiquidationAgent(address)\":{\"details\":\"Adds liquidation agent address into the set.\",\"params\":{\"_liquidationAgent\":\"Liquidation agent address\"}},\"getOffset()\":{\"details\":\"Triggers to get liquidation offset.\"},\"initialize(address,address,uint256)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController\"},\"liquidateDeals(address,address)\":{\"details\":\"Triggers to liquidate multiple deals according to the liquidation queue\",\"params\":{\"party0\":\"First counterparty address\",\"party1\":\"Second counterparty address\"}},\"liquidateDeals(address,address,bytes32[])\":{\"details\":\"Triggers to liquidate multiple deals with specific `_dealIds`.\",\"params\":{\"dealIds\":\"Array of Deal ID to liquidate\",\"party0\":\"First counterparty address\",\"party1\":\"Second counterparty address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeLiquidationAgent(address)\":{\"details\":\"Removes liquidation agent address from the set.\",\"params\":{\"_liquidationAgent\":\"Liquidation agent address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requiredContracts()\":{\"details\":\"Returns required contract names in this contract\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateLiquidationOffset(uint256)\":{\"details\":\"Updates offset for maximum number of deals liquidated per one execution.\",\"params\":{\"_offset\":\"New liquidation offset\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,address,uint256)\":{\"notice\":\"Initializes the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Liquidations.sol\":\"Liquidations\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"},\"contracts/Liquidations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./libraries/AddressPacking.sol\\\";\\nimport \\\"./interfaces/IProduct.sol\\\";\\nimport \\\"./interfaces/ILiquidations.sol\\\";\\nimport \\\"./mixins/MixinAddressResolver.sol\\\";\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"./utils/Proxyable.sol\\\";\\nimport {LiquidationsStorage as Storage} from \\\"./storages/LiquidationsStorage.sol\\\";\\n\\ncontract Liquidations is ILiquidations, MixinAddressResolver, Ownable, Proxyable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    /**\\n     * @dev Modifier to make a function callable only by liquidation agent.\\n     */\\n    modifier onlyLiquidationAgent() {\\n        require(Storage.slot().liquidationAgents.contains(msg.sender), \\\"INVALID ACCESS\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController\\n     */\\n    function initialize(\\n        address owner,\\n        address resolver,\\n        uint256 offset\\n    ) public initializer onlyProxy {\\n        _transferOwnership(owner);\\n        registerAddressResolver(resolver);\\n        Storage.slot().liquidationAgents.add(owner);\\n        Storage.slot().offset = offset;\\n    }\\n\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](3);\\n        contracts[0] = Contracts.COLLATERAL_AGGREGATOR;\\n        contracts[1] = Contracts.CURRENCY_CONTROLLER;\\n        contracts[2] = Contracts.PRODUCT_ADDRESS_RESOLVER;\\n    }\\n\\n    function isAcceptedContract(address account) internal view override returns (bool) {\\n        return\\n            productAddressResolver().isRegisteredProductContract(account) ||\\n            super.isAcceptedContract(account);\\n    }\\n\\n    /**\\n     * @dev Updates offset for maximum number of deals liquidated per one execution.\\n     * @param _offset New liquidation offset\\n     */\\n    function updateLiquidationOffset(uint256 _offset) public override onlyOwner {\\n        require(_offset > 0, \\\"INCORRECT_OFFSET\\\");\\n        emit OffsetUpdated(Storage.slot().offset, _offset);\\n        Storage.slot().offset = _offset;\\n    }\\n\\n    /**\\n     * @dev Adds liquidation agent address into the set.\\n     * @param _liquidationAgent Liquidation agent address\\n     */\\n    function addLiquidationAgent(address _liquidationAgent) public override onlyOwner {\\n        Storage.slot().liquidationAgents.add(_liquidationAgent);\\n        emit LiquidationAgentAdded(_liquidationAgent);\\n    }\\n\\n    /**\\n     * @dev Removes liquidation agent address from the set.\\n     * @param _liquidationAgent Liquidation agent address\\n     */\\n    function removeLiquidationAgent(address _liquidationAgent) public override onlyOwner {\\n        Storage.slot().liquidationAgents.remove(_liquidationAgent);\\n        emit LiquidationAgentRemoved(_liquidationAgent);\\n    }\\n\\n    function addDealToLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) public override onlyAcceptedContracts {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(party0, party1);\\n        EnumerableSet.Bytes32Set storage set = Storage.slot().liquidationQueue[packedAddrs];\\n\\n        require(!set.contains(dealId), \\\"ALREADY EXISTING DEAL\\\");\\n        set.add(dealId);\\n\\n        emit DealAddedToLiquidationQueue(party0, party1, dealId);\\n    }\\n\\n    function removeDealFromLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) public override onlyAcceptedContracts {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(party0, party1);\\n        EnumerableSet.Bytes32Set storage set = Storage.slot().liquidationQueue[packedAddrs];\\n\\n        require(set.contains(dealId), \\\"NON EXISTING DEAL\\\");\\n        set.remove(dealId);\\n\\n        emit DealRemovedFromLiquidationQueue(party0, party1, dealId);\\n    }\\n\\n    /**\\n     * @dev Triggers to liquidate multiple deals according to the liquidation queue\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     */\\n    function liquidateDeals(address party0, address party1) public override onlyLiquidationAgent {\\n        (bool coverage0, bool coverage1) = collateralAggregator().isCovered(\\n            party0,\\n            party1,\\n            \\\"\\\",\\n            0,\\n            0,\\n            false\\n        );\\n        if (coverage0 && coverage1) return;\\n\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(party0, party1);\\n        EnumerableSet.Bytes32Set storage set = Storage.slot().liquidationQueue[packedAddrs];\\n\\n        uint256 numDeals = set.length();\\n        uint256 numLiquidations;\\n        numDeals > Storage.slot().offset\\n            ? numLiquidations = Storage.slot().offset\\n            : numLiquidations = numDeals;\\n        bytes32[] memory dealIds = new bytes32[](numLiquidations);\\n\\n        for (uint256 i = 0; i < numLiquidations; i++) {\\n            bytes32 dealId = set.at(i);\\n            dealIds[i] = dealId;\\n        }\\n\\n        _liquidateDeals(party0, party1, dealIds);\\n    }\\n\\n    /**\\n     * @dev Triggers to liquidate multiple deals with specific `_dealIds`.\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param dealIds Array of Deal ID to liquidate\\n     */\\n    function liquidateDeals(\\n        address party0,\\n        address party1,\\n        bytes32[] memory dealIds\\n    ) public override onlyLiquidationAgent {\\n        require(dealIds.length < Storage.slot().offset, \\\"TOO MUCH DEALS\\\");\\n        (bool coverage0, bool coverage1) = collateralAggregator().isCovered(\\n            party0,\\n            party1,\\n            \\\"\\\",\\n            0,\\n            0,\\n            false\\n        );\\n        if (coverage0 && coverage1) return;\\n\\n        _liquidateDeals(party0, party1, dealIds);\\n    }\\n\\n    /**\\n     * @dev Triggers to get liquidation offset.\\n     */\\n    function getOffset() external view returns (uint256) {\\n        return Storage.slot().offset;\\n    }\\n\\n    struct LiquidationLocalVars {\\n        bytes32 dealId;\\n        uint256 dealPV0;\\n        uint256 dealPV1;\\n        uint256 totalLiquidationPVInETH0;\\n        uint256 totalLiquidationPVInETH1;\\n        uint256 exchangeRate;\\n        bytes32 currency;\\n        address product;\\n    }\\n\\n    function _liquidateDeals(\\n        address party0,\\n        address party1,\\n        bytes32[] memory dealIds\\n    ) internal {\\n        LiquidationLocalVars memory vars;\\n\\n        for (uint256 i = 0; i < dealIds.length; i++) {\\n            vars.dealId = dealIds[i];\\n            vars.product = productAddressResolver().getProductContractByDealId(vars.dealId);\\n\\n            vars.currency = IProduct(vars.product).getDealCurrency(vars.dealId);\\n\\n            (vars.dealPV0, vars.dealPV1) = IProduct(vars.product).getDealLastPV(\\n                party0,\\n                party1,\\n                vars.dealId\\n            );\\n            vars.exchangeRate = uint256(currencyController().getLastETHPrice(vars.currency));\\n\\n            vars.dealPV0 = (vars.dealPV0 * vars.exchangeRate) / 1e18;\\n            vars.dealPV1 = (vars.dealPV1 * vars.exchangeRate) / 1e18;\\n\\n            vars.totalLiquidationPVInETH0 = vars.totalLiquidationPVInETH0 + vars.dealPV0;\\n            vars.totalLiquidationPVInETH1 = vars.totalLiquidationPVInETH1 + vars.dealPV1;\\n\\n            IProduct(vars.product).liquidate(vars.dealId);\\n        }\\n\\n        if (vars.totalLiquidationPVInETH0 > 0) {\\n            collateralAggregator().liquidate(party0, party1, vars.totalLiquidationPVInETH0);\\n        }\\n\\n        if (vars.totalLiquidationPVInETH1 > 0) {\\n            collateralAggregator().liquidate(party1, party0, vars.totalLiquidationPVInETH1);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x22f13d1e2786206f6c2da3e3f1077c0564c4b4c43baa2a493af3148b683d1621\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/interfaces/ICloseOutNetting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICloseOutNetting {\\n    event AddCloseOutPayments(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event RemoveCloseOutPayments(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event SettleCloseOut(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 netPayment,\\n        bytes32 txHash\\n    );\\n    event VerifyCloseOut(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 netPayment,\\n        bytes32 txHash\\n    );\\n\\n    function addPayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) external;\\n\\n    function checkDefault(address _party) external view returns (bool);\\n\\n    function removePayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6bbe6c9de500443c72cde8832c0ff9c921c6f38ace09523d3a1769f6e855830e\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralAggregatorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICollateralAggregator {\\n    event Register(address indexed addr);\\n    event Release(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    );\\n    event Liquidate(address indexed from, address indexed to, bytes32 ccy, uint256 amount);\\n    event ReleaseUnsettled(address indexed party, bytes32 ccy, uint256 amount);\\n    event SettleCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event UpdatePV(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    );\\n    event UseCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    );\\n    event UseUnsettledCollateral(address indexed party, bytes32 ccy, uint256 amount);\\n\\n    function checkRegisteredUser(address addr) external view returns (bool);\\n\\n    function getCcyExposures(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getCoverage(address _party0, address _party1) external view returns (uint256, uint256);\\n\\n    function getExposedCurrencies(address partyA, address partyB)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getMaxCollateralBookWidthdraw(address _user)\\n        external\\n        view\\n        returns (uint256 maxWithdraw);\\n\\n    function getMaxCollateralWidthdraw(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getNetAndTotalPV(address _party0, address _party1)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getRebalanceCollateralAmounts(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getTotalUnsettledExp(address _user) external view returns (uint256);\\n\\n    function getUnsettledCoverage(address _user) external view returns (uint256 coverage);\\n\\n    function isCovered(\\n        address _party0,\\n        address _party1,\\n        bytes32 _ccy,\\n        uint256 _party0PV,\\n        uint256 _party1PV,\\n        bool _isSettled\\n    ) external view returns (bool, bool);\\n\\n    function isCoveredUnsettled(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) external view returns (bool);\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        uint256 liquidationInETH\\n    ) external;\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        bytes32 ccy,\\n        uint256 liquidationAmount,\\n        uint256 pv,\\n        bool isSettled\\n    ) external;\\n\\n    function register() external;\\n\\n    function register(string[] memory _addresses, uint256[] memory _chainIds) external;\\n\\n    function releaseCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function releaseUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function settleCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external;\\n\\n    function updatePV(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    ) external;\\n\\n    function useCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function useUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function getUnsettledCollateral(address user, bytes32 ccy) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6ce0f77af603bba3166a03eebf4b1679a78491c64cce912331765889583a4369\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICollateralVault {\\n    event Deposit(address user, bytes32 ccy, uint256 amount);\\n    event PositionDeposit(address user, address counterparty, bytes32 ccy, uint256 amount);\\n    event RebalanceBetween(\\n        address user,\\n        address fromCounterparty,\\n        address toCounterparty,\\n        bytes32 ccy,\\n        uint256 amount\\n    );\\n    event RebalanceFrom(address user, address counterparty, bytes32 ccy, uint256 amount);\\n    event RebalanceTo(address user, address counterparty, bytes32 ccy, uint256 amount);\\n    event Withdraw(address from, bytes32 ccy, uint256 amount);\\n    event PositionWithdraw(address from, address counterparty, bytes32 ccy, uint256 amount);\\n    event Liquidate(address from, address to, bytes32 ccy, uint256 amount);\\n    event LiquidateIndependent(address from, address to, bytes32 ccy, uint256 amount);\\n\\n    function deposit(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external;\\n\\n    function deposit(bytes32 _ccy, uint256 _amount) external payable;\\n\\n    function getIndependentCollateral(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getIndependentCollateralInETH(address _user, bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLockedCollateral(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getLockedCollateralInETH(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getLockedCollateral(\\n        address _partyA,\\n        address _partyB,\\n        bytes32 _ccy\\n    ) external view returns (uint256, uint256);\\n\\n    function getLockedCollateralInETH(\\n        address _partyA,\\n        address _partyB,\\n        bytes32 _ccy\\n    ) external view returns (uint256, uint256);\\n\\n    function liquidate(\\n        address _from,\\n        address _to,\\n        uint256 _liquidationTarget\\n    ) external returns (bool);\\n\\n    function rebalanceCollateral(\\n        address _party0,\\n        address _party1,\\n        uint256 _rebalanceTarget,\\n        bool isRebalanceFrom\\n    ) external returns (bool);\\n\\n    function rebalanceBetween(\\n        address _user,\\n        address _fromParty,\\n        address _toParty,\\n        bytes32 _ccy,\\n        uint256 _amountETH\\n    ) external returns (uint256);\\n\\n    function withdraw(bytes32 _ccy, uint256 _amount) external;\\n\\n    function withdrawFrom(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external;\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getUsedCurrencies(address party0, address party1)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getTotalIndependentCollateralInETH(address _party) external view returns (uint256);\\n\\n    function getTotalLockedCollateralInETH(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x05a973a84165750802bf97f2c889467191ae0a99fb50221149f46b9df35bdd6e\",\"license\":\"MIT\"},\"contracts/interfaces/ICrosschainAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICrosschainAddressResolver {\\n    event UpdateAddress(address _user, uint256 _chainId, string _address);\\n\\n    /**\\n     * @dev Trigers to register multiple cross-chain addresses per chainId for user\\n     * @param _user Secured Finance user ETH address\\n     * @param _chainIds Array of chain ID number\\n     * @param _addresses Array of the target blockchain addresses\\n     *\\n     * @notice This function triggers by the Collateral Aggregator while user is registered in a system\\n     *\\n     */\\n    function updateAddresses(\\n        address _user,\\n        uint256[] memory _chainIds,\\n        string[] memory _addresses\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to register cross-chain address per chainId by user\\n     * @param _chainId Chain ID number\\n     * @param _address Target blockchain address\\n     *\\n     */\\n    function updateAddress(uint256 _chainId, string memory _address) external;\\n\\n    /**\\n     * @dev Trigers to register cross-chain address per chainId by user\\n     * @param _user Secured Finance user ETH address\\n     * @param _chainId Chain ID number\\n     * @param _address Target blockchain address\\n     *\\n     */\\n    function updateAddress(\\n        address _user,\\n        uint256 _chainId,\\n        string memory _address\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to get target blockchain address for a specific user.\\n     * @param _user Ethereum address of the Secured Finance user\\n     * @param _user Chain ID number\\n     */\\n    function getUserAddress(address _user, uint256 _chainId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ef89efa2bd508258da18e2ca2699cb07847d75d6df996cde56b8f6d524d7db8\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CcyAdded(bytes32 indexed ccy, string name, uint16 chainId, uint256 haircut);\\n    event CcyCollateralUpdate(bytes32 indexed ccy, bool isCollateral);\\n    event CcySupportUpdate(bytes32 indexed ccy, bool isSupported);\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n    event MinMarginUpdated(bytes32 indexed ccy, uint256 minMargin);\\n    event PriceFeedAdded(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n    event PriceFeedRemoved(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n\\n    function convertBulkToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH) external view returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256);\\n\\n    function getCurrencies(bytes32) external view returns (ProtocolTypes.Currency memory);\\n\\n    function getEthDecimals(bytes32) external view returns (uint8);\\n\\n    function getUsdDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getMinMargin(bytes32 _ccy) external view returns (uint256);\\n\\n    function getChainId(bytes32 _ccy) external view returns (uint16);\\n\\n    function isCollateral(bytes32) external view returns (bool);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        uint16 _chainId,\\n        address _ethPriceFeed,\\n        uint256 _haircut,\\n        address _tokenAddress\\n    ) external;\\n\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function updateCollateralSupport(bytes32 _ccy, bool _isSupported) external;\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported) external;\\n\\n    function updateMinMargin(bytes32 _ccy, uint256 _minMargin) external;\\n\\n    function getTokenAddresses(bytes32) external view returns (address);\\n}\\n\",\"keccak256\":\"0x0bad90929934b6a43200ae276697a9e428d47b119120ea81208778ced9abbe76\",\"license\":\"MIT\"},\"contracts/interfaces/IExternalAdapterTxResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IExternalAdapterTxResponse {\\n    struct FulfillData {\\n        string from;\\n        string to;\\n        uint256 value;\\n        uint256 timestamp;\\n        string txHash;\\n    }\\n}\\n\",\"keccak256\":\"0x2fde36d406ead00758aeccdf58fd8be1b32cf2fd3fd2061824d538bd06d4ab4c\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\nstruct Order {\\n    bytes32 ccy;\\n    uint256 term;\\n    ProtocolTypes.Side side;\\n    uint256 amount;\\n    uint256 rate;\\n}\\n\\ninterface ILendingMarketController {\\n    event LendingMarketCreated(bytes32 ccy, uint256 term, address indexed marketAddr);\\n    event LendingMarketsPaused(bytes32 ccy);\\n    event LendingMarketsUnpaused(bytes32 ccy);\\n\\n    function deployLendingMarket(bytes32 _ccy, uint256 _term) external returns (address market);\\n\\n    function getBorrowRatesForCcy(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getDiscountFactorsForCcy(bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256[] memory, uint256[] memory);\\n\\n    function getLendRatesForCcy(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getMidRatesForCcy(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getLendingMarket(bytes32, uint256) external view returns (address);\\n\\n    function pauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function placeBulkOrders(Order[] memory orders) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function getSupportedTerms(bytes32 _ccy) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x8c2a321d93fb14a1878ffb332e03d8201c4998ecca88b8862347855787ebf49c\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ILiquidations {\\n    event DealAddedToLiquidationQueue(address party0, address party1, bytes32 dealId);\\n    event DealRemovedFromLiquidationQueue(address party0, address party1, bytes32 dealId);\\n    event LiquidationAgentAdded(address indexed liquidationAgent);\\n    event LiquidationAgentRemoved(address indexed liquidationAgent);\\n    event OffsetUpdated(uint256 oldOffset, uint256 newOffset);\\n\\n    function addDealToLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external;\\n\\n    function addLiquidationAgent(address _liquidationAgent) external;\\n\\n    function liquidateDeals(\\n        address party0,\\n        address party1,\\n        bytes32[] memory dealIds\\n    ) external;\\n\\n    function liquidateDeals(address party0, address party1) external;\\n\\n    function getOffset() external view returns (uint256);\\n\\n    function removeDealFromLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external;\\n\\n    function removeLiquidationAgent(address _liquidationAgent) external;\\n\\n    function updateLiquidationOffset(uint256 _offset) external;\\n}\\n\",\"keccak256\":\"0x4e2784b0014ff688a60c4628cc1ebab63ca0aa40aa9949dbde6d53c69dbe3746\",\"license\":\"MIT\"},\"contracts/interfaces/IMarkToMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IMarkToMarket {\\n    function updatePV(bytes32 dealId) external;\\n\\n    function updatePVs(bytes32[] memory dealIds) external;\\n}\\n\",\"keccak256\":\"0xb100f8c173fda11136c5579306d99065752bb797bff6ffe91c64eee228ae2df9\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct Slot {\\n    uint256 totalPayment0;\\n    uint256 totalPayment1;\\n    uint256 netPayment;\\n    bool flipped;\\n    bytes32 paymentProof;\\n    address verificationParty;\\n    bool isSettled;\\n}\\n\\ninterface IPaymentAggregator {\\n    event RegisterPayment(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event VerifyPayment(\\n        address indexed verifier,\\n        address indexed counterparty,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment,\\n        bytes32 settlementId\\n    );\\n    event SettlePayment(\\n        address indexed verifier,\\n        address indexed counterparty,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        bytes32 settlementId\\n    );\\n    event RemovePayment(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n\\n    function registerPayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 dealId,\\n        uint256[] memory timestamps,\\n        uint256[] memory payments0,\\n        uint256[] memory payments1\\n    ) external;\\n\\n    function removePayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 dealId,\\n        uint256[] calldata timestamps,\\n        uint256[] calldata payments0,\\n        uint256[] calldata payments1\\n    ) external;\\n\\n    function verifyPayment(\\n        address verifier,\\n        address counterparty,\\n        bytes32 ccy,\\n        uint256 timestamp,\\n        uint256 payment,\\n        bytes32 settlementId\\n    ) external;\\n\\n    function isSettled(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 timestamp\\n    ) external view returns (bool status);\\n\\n    function getDealsFromSlot(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 slotPosition\\n    ) external view returns (bytes32[] memory);\\n\\n    // function getTimeSlotByDate(\\n    //     address party0,\\n    //     address party1,\\n    //     bytes32 ccy,\\n    //     uint256 year,\\n    //     uint256 month,\\n    //     uint256 day\\n    // ) external view returns (Slot memory timeSlot);\\n\\n    // function getTimeSlotBySlotId(\\n    //     address party0,\\n    //     address party1,\\n    //     bytes32 ccy,\\n    //     bytes32 slot\\n    // ) external view returns (Slot memory timeSlot);\\n\\n    function checkSettlementWindow(uint256 targetTime) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x626f4bb7d28a476b21c2bc18278a091f134fbd98a6e06e586cd63180184518f4\",\"license\":\"MIT\"},\"contracts/interfaces/IProduct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title IProduct is a common interface for various products on secured finance protocol\\n */\\ninterface IProduct {\\n    event Liquidate(bytes32 dealId);\\n    event RequestTermination(bytes32 dealId, address indexed requestedBy);\\n    event RejectTermination(bytes32 dealId, address indexed rejectedBy);\\n    event EarlyTermination(bytes32 dealId, address indexed acceptedBy, uint256 payment);\\n    event MarkToMarket(bytes32 dealId, uint256 prevPV, uint256 currPV);\\n\\n    /**\\n     * Triggered to liquidate existing deal of this product type\\n     * @param dealId Deal unique id in bytes32 word.\\n     */\\n    function liquidate(bytes32 dealId) external;\\n\\n    /**\\n     * Triggered to request early termination of this specific deal\\n     * @param dealId Deal unique id in bytes32 word.\\n     */\\n    function requestTermination(bytes32 dealId) external;\\n\\n    /**\\n     * Triggered to reject previously requested early termination of this deal\\n     * @param dealId Deal unique id in bytes32 word.\\n     */\\n    function rejectTermination(bytes32 dealId) external;\\n\\n    /**\\n     * Triggered to accept previously requested early termination of this deal\\n     * @param dealId Deal unique id in bytes32 word.\\n     */\\n    function acceptTermination(bytes32 dealId) external;\\n\\n    /**\\n     * Triggered to update present value of the deal\\n     * @param dealId Deal unique id in bytes32 word.\\n     */\\n    function markToMarket(bytes32 dealId) external returns (bool);\\n\\n    // /**\\n    //  * Returns the state of the deal by `dealId`\\n    //  * @param dealId Deal unique id in bytes32 word.\\n    //  *\\n    //  * @return State identifier\\n    //  */\\n    // function getDealState(bytes32 dealId) external view returns (uint8);\\n\\n    /**\\n     * Returns the main currency of the deal.\\n     * @param dealId Deal unique id in bytes32 word.\\n     *\\n     * @return Currency short identifier.\\n     */\\n    function getDealCurrency(bytes32 dealId) external view returns (bytes32);\\n\\n    /**\\n     * Returns previously saved present value of the deal.\\n     * @param dealId Deal unique id in bytes32 word.\\n     *\\n     * @return Present value previously saved during mark-to-market.\\n     */\\n    function getDealLastPV(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external view returns (uint256, uint256);\\n\\n    /**\\n     * Triggers to recalculate and return current present value of the deal.\\n     * @param dealId Deal unique id in bytes32 word.\\n     *\\n     * @return Present value at the time of execution.\\n     */\\n    function getDealPV(bytes32 dealId) external view returns (uint256);\\n\\n    /**\\n     * Returns settlement status of the deal by `dealId`\\n     * @param dealId Deal unique id in bytes32 word.\\n     *\\n     * @return Settlement bool identifier\\n     */\\n    function getDealSettlementStatus(bytes32 dealId) external view returns (bool);\\n\\n    /**\\n     * Get the version of the underlying contract.\\n     *\\n     * @return Version number.\\n     */\\n    function getVersion() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xe3e1e96bd23b91285ed54c4630d6caf5190ab7df2b3db2eedd3feb1c436a0726\",\"license\":\"MIT\"},\"contracts/interfaces/IProductAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IProductAddressResolver {\\n    event RegisterProduct(bytes4 prefix, address indexed product, address indexed controller);\\n\\n    /**\\n     * @dev Triggers to register new product type in a address resolver\\n     * @param _prefix Bytes4 prefix for product type\\n     * @param _contract Product contract address\\n     * @param _controller Market controller address\\n     *\\n     * @notice Triggers only be contract owner\\n     * @notice Reverts on saving contract which is not supporting a common interface\\n     */\\n    function registerProduct(\\n        bytes4 _prefix,\\n        address _contract,\\n        address _controller\\n    ) external;\\n\\n    /**\\n     * @dev Triggers to register several product types in a address resolver\\n     * @param _prefixes Array of Bytes4 prefixes for each product type\\n     * @param _contracts Array of smart contract addresses for each product\\n     * @param _controllers Array of market controller addresses\\n     *\\n     * @notice Triggers only be contract owner\\n     * @notice Reverts on saving contract which is not supporting common interface\\n     */\\n    function registerProducts(\\n        bytes4[] calldata _prefixes,\\n        address[] calldata _contracts,\\n        address[] calldata _controllers\\n    ) external;\\n\\n    /**\\n     * @dev Triggers to get product address by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContract(bytes4 _prefix) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to get product addresses\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContracts() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Triggers to get product address by deal id\\n     * @param _dealId Product deal idenfitier\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContractByDealId(bytes32 _dealId) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to get market controller address by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     * @notice To work with the contract this address should be wrapped around IYieldCurve interface\\n     */\\n    function getControllerContract(bytes4 _prefix) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to get market controller address by deal id\\n     * @param _dealId Product deal idenfitier\\n     * @notice To work with the contract this address should be wrapped around IYieldCurve interface\\n     */\\n    function getControllerContractByDealId(bytes32 _dealId) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product is supported by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     */\\n    function isSupportedProduct(bytes4 _prefix) external view returns (bool);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product is supported by deal id.\\n     * @param _dealId Product deal idenfitier\\n     */\\n    function isSupportedProductByDealId(bytes32 _dealId) external view returns (bool);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product contract is registered.\\n     * @param _product Product contract address\\n     */\\n    function isRegisteredProductContract(address _product) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x44855f57913172a86e203a89d7713efe1ec39351a0830b0f35fac9ffa24ec770\",\"license\":\"MIT\"},\"contracts/interfaces/ISettlementEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.3. SEE SOURCE BELOW. !!\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IExternalAdapterTxResponse.sol\\\";\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ISettlementEngine {\\n    event CrosschainSettlementRequested(\\n        address payer,\\n        address receiver,\\n        uint16 chainId,\\n        uint256 timestamp,\\n        string txHash,\\n        bytes32 requestId\\n    );\\n    event CrosschainSettlementRequestFulfilled(\\n        string payer,\\n        string receiver,\\n        uint16 chainId,\\n        uint256 amount,\\n        uint256 timestamp,\\n        string txHash,\\n        bytes32 settlementId\\n    );\\n    event ExternalAdapterAdded(address indexed adapter, bytes32 ccy);\\n\\n    function addExternalAdapter(address _adapter, bytes32 _ccy) external;\\n\\n    function getExternalAdapters(bytes32) external view returns (address);\\n\\n    function fulfillSettlementRequest(\\n        bytes32 _requestId,\\n        IExternalAdapterTxResponse.FulfillData calldata _txData,\\n        bytes32 _ccy\\n    ) external;\\n\\n    function getVersion() external view returns (uint16);\\n\\n    function getSettlementRequests(bytes32)\\n        external\\n        view\\n        returns (ProtocolTypes.SettlementRequest memory);\\n\\n    function verifyPayment(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _payment,\\n        uint256 _timestamp,\\n        string calldata _txHash\\n    ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3888a41e40b8eb2cebf8557436b0f09286dfaeb08a3762a33c0a6ae0521f67a3\",\"license\":\"MIT\"},\"contracts/interfaces/ITermStructure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ITermStructure {\\n    event TermAdded(uint256 numDays);\\n    event ProductTermSupportUpdated(\\n        uint256 numDays,\\n        bytes4 product,\\n        bytes32 _ccy,\\n        bool isSupported\\n    );\\n    event TermSupportUpdated(uint256 numDays, bool isSupported);\\n\\n    function getDfFrac(uint256 _numDays) external view returns (uint256);\\n\\n    function getNumDays(uint256 _numDays) external view returns (uint256);\\n\\n    function getNumPayments(uint256 _numDays, uint8 frequency) external view returns (uint256);\\n\\n    function getTerm(uint256 _numDays, uint8 frequency)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getTermSchedule(uint256 _numDays, uint8 frequency)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isSupportedTerm(\\n        uint256 _numDays,\\n        bytes4 _product,\\n        bytes32 _ccy\\n    ) external view returns (bool);\\n\\n    function supportTerm(\\n        uint256 _numDays,\\n        bytes4[] memory _products,\\n        bytes32[] memory _currencies\\n    ) external;\\n\\n    function updateTermSupport(\\n        uint256 _numDays,\\n        bytes4 _product,\\n        bytes32 _ccy,\\n        bool _isSupported\\n    ) external;\\n\\n    function getTermsForProductAndCcy(\\n        bytes4 _product,\\n        bytes32 _ccy,\\n        bool sort\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x8509c4f927878626ee8cb73d0fb2daa0cf0a7c9869bb6241ccc180d0854544f4\",\"license\":\"MIT\"},\"contracts/libraries/AddressPacking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary AddressPacking {\\n    /**\\n     * @dev Packs two addresses into one hash to reduce the number of arguments\\n     * @param addr0 First address\\n     * @param addr1 Second address\\n     * @return Boolean to identify if addresses were flipped\\n     */\\n    function pack(address addr0, address addr1) internal pure returns (bytes32, bool) {\\n        require(addr0 != addr1, \\\"Identical addresses\\\");\\n        (address _addr0, address _addr1) = addr0 < addr1 ? (addr0, addr1) : (addr1, addr0);\\n        require(_addr0 != address(0), \\\"Invalid address\\\");\\n\\n        if (_addr0 != addr0) {\\n            return (keccak256(abi.encode(_addr0, _addr1)), true);\\n        } else {\\n            return (keccak256(abi.encode(_addr0, _addr1)), false);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x545d44428f420fcace95eecc5a7483a055154741753a4a4ff4c50b77c2a230fa\",\"license\":\"MIT\"},\"contracts/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant CLOSE_OUT_NETTING = \\\"CloseOutNetting\\\";\\n    bytes32 internal constant COLLATERAL_AGGREGATOR = \\\"CollateralAggregator\\\";\\n    bytes32 internal constant COLLATERAL_VAULT = \\\"CollateralVault\\\";\\n    bytes32 internal constant CROSSCHAIN_ADDRESS_RESOLVER = \\\"CrosschainAddressResolver\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant LIQUIDATIONS = \\\"Liquidations\\\";\\n    bytes32 internal constant MARK_TO_MARKET = \\\"MarkToMarket\\\";\\n    bytes32 internal constant PAYMENT_AGGREGATOR = \\\"PaymentAggregator\\\";\\n    bytes32 internal constant PRODUCT_ADDRESS_RESOLVER = \\\"ProductAddressResolver\\\";\\n    bytes32 internal constant SETTLEMENT_ENGINE = \\\"SettlementEngine\\\";\\n    bytes32 internal constant TERM_STRUCTURE = \\\"TermStructure\\\";\\n}\\n\",\"keccak256\":\"0x939f50a87aa51db235c78c3c224edc9123271a5b44974e13557e4590958e83df\",\"license\":\"MIT\"},\"contracts/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../libraries/Contracts.sol\\\";\\nimport \\\"../interfaces/IAddressResolver.sol\\\";\\nimport \\\"../interfaces/ICloseOutNetting.sol\\\";\\nimport \\\"../interfaces/ICollateralAggregatorV2.sol\\\";\\nimport \\\"../interfaces/ICollateralVault.sol\\\";\\nimport \\\"../interfaces/ICrosschainAddressResolver.sol\\\";\\nimport \\\"../interfaces/ICurrencyController.sol\\\";\\nimport \\\"../interfaces/IMarkToMarket.sol\\\";\\nimport \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport \\\"../interfaces/ILiquidations.sol\\\";\\nimport \\\"../interfaces/IPaymentAggregator.sol\\\";\\nimport \\\"../interfaces/IProductAddressResolver.sol\\\";\\nimport \\\"../interfaces/ISettlementEngine.sol\\\";\\nimport \\\"../interfaces/ITermStructure.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    IAddressResolver public resolver;\\n\\n    mapping(bytes32 => address) private addressCache;\\n\\n    modifier onlyAcceptedContracts() {\\n        require(isAcceptedContract(msg.sender), \\\"Only Accepted Contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns required contract names in this contract\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @dev Returns contract names that can call this contract.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        require(address(resolver) == address(0), \\\"resolver registered already\\\");\\n        resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function closeOutNetting() internal view returns (ICloseOutNetting) {\\n        return ICloseOutNetting(getAddress(Contracts.CLOSE_OUT_NETTING));\\n    }\\n\\n    function collateralAggregator() internal view returns (ICollateralAggregator) {\\n        return ICollateralAggregator(getAddress(Contracts.COLLATERAL_AGGREGATOR));\\n    }\\n\\n    function collateralVault() internal view returns (ICollateralVault) {\\n        return ICollateralVault(getAddress(Contracts.COLLATERAL_VAULT));\\n    }\\n\\n    function crosschainAddressResolver() internal view returns (ICrosschainAddressResolver) {\\n        return ICrosschainAddressResolver(getAddress(Contracts.CROSSCHAIN_ADDRESS_RESOLVER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function markToMarket() internal view returns (IMarkToMarket) {\\n        return IMarkToMarket(getAddress(Contracts.MARK_TO_MARKET));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function liquidations() internal view returns (ILiquidations) {\\n        return ILiquidations(getAddress(Contracts.LIQUIDATIONS));\\n    }\\n\\n    function paymentAggregator() internal view returns (IPaymentAggregator) {\\n        return IPaymentAggregator(getAddress(Contracts.PAYMENT_AGGREGATOR));\\n    }\\n\\n    function productAddressResolver() internal view returns (IProductAddressResolver) {\\n        return IProductAddressResolver(getAddress(Contracts.PRODUCT_ADDRESS_RESOLVER));\\n    }\\n\\n    function settlementEngine() internal view returns (ISettlementEngine) {\\n        return ISettlementEngine(getAddress(Contracts.SETTLEMENT_ENGINE));\\n    }\\n\\n    function termStructure() internal view returns (ITermStructure) {\\n        return ITermStructure(getAddress(Contracts.TERM_STRUCTURE));\\n    }\\n}\\n\",\"keccak256\":\"0xa11e12f5ac8a1710ad3f16fb7d867e615ed13dd98324eea2f7eb36c00b21c2fb\",\"license\":\"MIT\"},\"contracts/storages/LiquidationsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary LiquidationsStorage {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.liquidations\\\");\\n\\n    struct Storage {\\n        uint256 offset;\\n        EnumerableSet.AddressSet liquidationAgents;\\n        EnumerableSet.AddressSet linkedContracts;\\n        // Mapping structure for storing liquidation queue to bilateral position\\n        mapping(bytes32 => EnumerableSet.Bytes32Set) liquidationQueue;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf09ecaa7e37c5475cb02566d4bc567cbb018a1b0883da8b8fdc757847d296d3\",\"license\":\"MIT\"},\"contracts/storages/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary OwnableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.ownable\\\");\\n\\n    struct Storage {\\n        address owner;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ef8bfa06947cdb63d47248ad074ac42a1b1ba828a2c97e42486a5dbb2c03e1d\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant BP = 10000; // basis point\\n    uint256 public constant PCT = 10000; // percentage point in basis\\n    uint256 public constant PENALTYLEVEL = 1000; // 10% settlement failure penalty\\n    uint256 public constant MKTMAKELEVEL = 2000; // 20% for market making\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Loan common types\\n    enum LoanState {\\n        REGISTERED,\\n        WORKING,\\n        DUE,\\n        PAST_DUE,\\n        CLOSED,\\n        TERMINATED\\n    }\\n    enum DFTERM {\\n        _3m,\\n        _6m,\\n        _1y,\\n        _2y,\\n        _3y,\\n        _4y,\\n        _5y\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n\\n    // FXMarket common types\\n    enum CcyPair {\\n        FILETH,\\n        FILUSDC,\\n        ETHUSDC,\\n        BTCUSDC,\\n        BTCETH,\\n        BTCFIL\\n    }\\n    enum FXSide {\\n        BID,\\n        OFFER\\n    }\\n\\n    enum PaymentFrequency {\\n        ANNUAL,\\n        SEMI_ANNUAL,\\n        QUARTERLY,\\n        MONTHLY,\\n        FORWARD\\n    }\\n\\n    struct Currency {\\n        bool isSupported;\\n        string name;\\n        uint16 chainId; // chain id for address conversion\\n    }\\n\\n    struct SettlementRequest {\\n        address payer;\\n        address receiver;\\n        uint16 chainId;\\n        uint256 timestamp;\\n        string txHash;\\n    }\\n}\\n\",\"keccak256\":\"0x6419e0bcd07b8ff86e0ffce1e7f16e9a38a470f0ab2f697af0f5234cb943303f\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../storages/OwnableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return OwnableStorage.slot().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = OwnableStorage.slot().owner;\\n        OwnableStorage.slot().owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1c782b9deaf1f94d2af99826e6e8207f5e71f3fbb6ce18805913a3ca7dda9579\",\"license\":\"MIT\"},\"contracts/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9f02e4ae76f34a28299e4b6a10490ebf99b9c9a8454765bff7977cc4f3d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061207e806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806378b2479a116100a2578063beedefc911610071578063beedefc9146101f9578063c2f3bd4a1461020c578063e09976591461021f578063eb6ad24e14610226578063f2fde38b1461024457600080fd5b806378b2479a146101b85780638da5cb5b146101cb5780639810923f146101d3578063b884582c146101e657600080fd5b8063399f8563116100de578063399f8563146101755780633d03b9da1461018857806365f0847a1461019d578063715018a6146101b057600080fd5b806304f3bcec146101105780631794bb3c1461014057806329985e5a146101555780632af64bd31461015d575b600080fd5b600054610123906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61015361014e366004611b4d565b610257565b005b610153610379565b61016561050c565b6040519015158152602001610137565b610153610183366004611b8e565b61062a565b6101906106a9565b6040516101379190611bb2565b6101536101ab366004611c0c565b610773565b6101536108d8565b6101536101c6366004611cf1565b610913565b6101236109df565b6101536101e1366004611b8e565b610a12565b6101536101f4366004611b4d565b610aa3565b610153610207366004611b4d565b610bc6565b61015361021a366004611d0a565b610cdf565b6060610190565b60008051602061202983398151915254604051908152602001610137565b610153610252366004611b8e565b610f00565b60006102636001610fa0565b9050801561027b576002805461ff0019166101001790555b600061028561102f565b6001600160a01b031614156102ec5760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b60648201526084015b60405180910390fd5b6102f584611057565b6102fe836110c8565b61031b846000805160206120298339815191525b60010190611143565b5081600080516020612029833981519152558015610373576002805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b60006103836106a9565b905060005b81518110156105085760008282815181106103a5576103a5611d43565b6020026020010151905060008060009054906101000a90046001600160a01b03166001600160a01b0316636795dbcd838460405160200161041291907f5265736f6c766572206d697373696e67207461726765743a20000000000000008152601981019190915260390190565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161043e929190611da6565b60206040518083038186803b15801561045657600080fd5b505afa15801561046a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048e9190611dc7565b60008381526001602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251868152918201529192507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68910160405180910390a15050808061050090611dfa565b915050610388565b5050565b6000806105176106a9565b905060005b815181101561062157600082828151811061053957610539611d43565b60209081029190910181015160008181526001909252604080832054925490516321f8a72160e01b8152600481018390529193506001600160a01b039283169216906321f8a7219060240160206040518083038186803b15801561059c57600080fd5b505afa1580156105b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d49190611dc7565b6001600160a01b03161415806105ff57506000818152600160205260409020546001600160a01b0316155b1561060e576000935050505090565b508061061981611dfa565b91505061051c565b50600191505090565b336106336109df565b6001600160a01b0316146106595760405162461bcd60e51b81526004016102e390611e15565b61067181600080516020612029833981519152610312565b506040516001600160a01b038216907fca54a159f8acb315394931246b8790a2785d67772bd1314afd4a67a9d26b39d390600090a250565b604080516003808252608082019092526060916020820183803683370190505090507321b7b63630ba32b930b620b3b3b932b3b0ba37b960611b816000815181106106f6576106f6611d43565b6020026020010181815250507121bab93932b731bca1b7b73a3937b63632b960711b8160018151811061072b5761072b611d43565b60200260200101818152505075283937b23ab1ba20b2323932b9b9a932b9b7b63b32b960511b8160028151811061076457610764611d43565b60200260200101818152505090565b610790336000805160206120298339815191525b60010190611161565b6107cd5760405162461bcd60e51b815260206004820152600e60248201526d494e56414c49442041434345535360901b60448201526064016102e3565b6000805160206120298339815191525481511061081d5760405162461bcd60e51b815260206004820152600e60248201526d544f4f204d554348204445414c5360901b60448201526064016102e3565b600080610828611183565b6001600160a01b031663ef75abb6868660008060006040518663ffffffff1660e01b815260040161085d959493929190611e4a565b604080518083038186803b15801561087457600080fd5b505afa158015610888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ac9190611e92565b915091508180156108ba5750805b156108c6575050505050565b6108d18585856111aa565b5050505050565b336108e16109df565b6001600160a01b0316146109075760405162461bcd60e51b81526004016102e390611e15565b6109116000611057565b565b3361091c6109df565b6001600160a01b0316146109425760405162461bcd60e51b81526004016102e390611e15565b600081116109855760405162461bcd60e51b815260206004820152601060248201526f125390d3d4949150d517d3d19194d15560821b60448201526064016102e3565b7f8ad4d4498263127d0966701929acd0fd4ef45595df9d67db529a43b46972689d6000805160206120298339815191525460408051918252602082018490520160405180910390a160008051602061202983398151915255565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa5b546001600160a01b0316919050565b33610a1b6109df565b6001600160a01b031614610a415760405162461bcd60e51b81526004016102e390611e15565b610a6b7f9c7027782242f494db9a6258f94a84c3972e611dd1ab76516c3aaa23debf8c7c8261163d565b506040516001600160a01b038216907f7e6c9f428aa5d9a1fdd152042fce5dd28d8ea524649e8a9b3066dd75ebe1a02490600090a250565b610aac33611652565b610af25760405162461bcd60e51b81526020600482015260176024820152764f6e6c7920416363657074656420436f6e74726163747360481b60448201526064016102e3565b6000610afe84846116e6565b5060008181527f9c7027782242f494db9a6258f94a84c3972e611dd1ab76516c3aaa23debf8c8060205260409020909150610b398184611856565b610b795760405162461bcd60e51b81526020600482015260116024820152701393d38811561254d5125391c811115053607a1b60448201526064016102e3565b610b83818461186e565b507fb60fc83c73a71a738ac8cef1dbf0b5768fac994a68026b338b027f1bd233db87858585604051610bb793929190611ec5565b60405180910390a15050505050565b610bcf33611652565b610c155760405162461bcd60e51b81526020600482015260176024820152764f6e6c7920416363657074656420436f6e74726163747360481b60448201526064016102e3565b6000610c2184846116e6565b5060008181527f9c7027782242f494db9a6258f94a84c3972e611dd1ab76516c3aaa23debf8c8060205260409020909150610c5c8184611856565b15610ca15760405162461bcd60e51b8152602060048201526015602482015274105314915051164811561254d5125391c811115053605a1b60448201526064016102e3565b610cab818461187a565b507fb3f8c6466290eeb06c660ababdfebef06a9061c94f7a0aa42bcad0d91887aa60858585604051610bb793929190611ec5565b610cf733600080516020612029833981519152610787565b610d345760405162461bcd60e51b815260206004820152600e60248201526d494e56414c49442041434345535360901b60448201526064016102e3565b600080610d3f611183565b6001600160a01b031663ef75abb6858560008060006040518663ffffffff1660e01b8152600401610d74959493929190611e4a565b604080518083038186803b158015610d8b57600080fd5b505afa158015610d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc39190611e92565b91509150818015610dd15750805b15610ddc5750505050565b6000610de885856116e6565b5060008181527f9c7027782242f494db9a6258f94a84c3972e611dd1ab76516c3aaa23debf8c8060205260408120919250610e2282611886565b90506000600080516020612029833981519152548211610e4457508080610e57565b5060008051602061202983398151915254805b5060008167ffffffffffffffff811115610e7357610e73611bf6565b604051908082528060200260200182016040528015610e9c578160200160208202803683370190505b50905060005b82811015610ee9576000610eb68683611890565b905080838381518110610ecb57610ecb611d43565b60209081029190910101525080610ee181611dfa565b915050610ea2565b50610ef58989836111aa565b505050505050505050565b33610f096109df565b6001600160a01b031614610f2f5760405162461bcd60e51b81526004016102e390611e15565b6001600160a01b038116610f945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102e3565b610f9d81611057565b50565b600254600090610100900460ff1615610fe9578160ff166001148015610fc55750303b155b610fe15760405162461bcd60e51b81526004016102e390611ee9565b506000919050565b60025460ff8084169116106110105760405162461bcd60e51b81526004016102e390611ee9565b506002805460ff191660ff92909216919091179055600190565b919050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610a03565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000546001600160a01b0316156111215760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c7265616479000000000060448201526064016102e3565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000611158836001600160a01b03841661189c565b90505b92915050565b6001600160a01b03811660009081526001830160205260408120541515611158565b60006111a57321b7b63630ba32b930b620b3b3b932b3b0ba37b960611b6118eb565b905090565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052905b82518110156115475782818151811061120757611207611d43565b6020908102919091010151825261121c611967565b8251604051634d86283f60e01b81526001600160a01b039290921691634d86283f9161124e9160040190815260200190565b60206040518083038186803b15801561126657600080fd5b505afa15801561127a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129e9190611dc7565b6001600160a01b031660e08301819052825160405163b0c1865160e01b815263b0c18651916112d39160040190815260200190565b60206040518083038186803b1580156112eb57600080fd5b505afa1580156112ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113239190611f37565b60c083015260e082015182516040516332757d4160e01b81526001600160a01b03909216916332757d419161135e9189918991600401611ec5565b604080518083038186803b15801561137557600080fd5b505afa158015611389573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ad9190611f50565b604084015260208301526113bf61198b565b6001600160a01b0316631743ffce8360c001516040518263ffffffff1660e01b81526004016113f091815260200190565b60206040518083038186803b15801561140857600080fd5b505afa15801561141c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114409190611f37565b60a083018190526020830151670de0b6b3a76400009161145f91611f74565b6114699190611f93565b602083015260a08201516040830151670de0b6b3a76400009161148b91611f74565b6114959190611f93565b6040830152602082015160608301516114ae9190611fb5565b6060830152604082015160808301516114c79190611fb5565b608083015260e0820151825160405163053884b760e11b81526001600160a01b0390921691630a71096e916115029160040190815260200190565b600060405180830381600087803b15801561151c57600080fd5b505af1158015611530573d6000803e3d6000fd5b50505050808061153f90611dfa565b9150506111ec565b506060810151156115c05761155a611183565b6001600160a01b03166326c01303858584606001516040518463ffffffff1660e01b815260040161158d93929190611ec5565b600060405180830381600087803b1580156115a757600080fd5b505af11580156115bb573d6000803e3d6000fd5b505050505b608081015115610373576115d2611183565b6001600160a01b03166326c01303848684608001516040518463ffffffff1660e01b815260040161160593929190611ec5565b600060405180830381600087803b15801561161f57600080fd5b505af1158015611633573d6000803e3d6000fd5b5050505050505050565b6000611158836001600160a01b0384166119ab565b600061165c611967565b60405163a3d52aad60e01b81526001600160a01b038481166004830152919091169063a3d52aad9060240160206040518083038186803b15801561169f57600080fd5b505afa1580156116b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d79190611fcd565b8061115b575061115b82611a9e565b600080826001600160a01b0316846001600160a01b031614156117415760405162461bcd60e51b81526020600482015260136024820152724964656e746963616c2061646472657373657360681b60448201526064016102e3565b600080846001600160a01b0316866001600160a01b031610611764578486611767565b85855b90925090506001600160a01b0382166117b45760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b60448201526064016102e3565b856001600160a01b0316826001600160a01b03161461181057604080516001600160a01b03808516602083015283169181019190915260600160405160208183030381529060405280519060200120600193509350505061184f565b604080516001600160a01b0380851660208301528316918101919091526060016040516020818303038152906040528051906020012060009350935050505b9250929050565b60008181526001830160205260408120541515611158565b600061115883836119ab565b6000611158838361189c565b600061115b825490565b60006111588383611b0e565b60008181526001830160205260408120546118e35750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561115b565b50600061115b565b600081815260016020908152604080832054905170026b4b9b9b4b7339030b2323932b9b99d1607d1b92810192909252603182018490526001600160a01b03169081151590605101604051602081830303815290604052906119605760405162461bcd60e51b81526004016102e39190611fe8565b5092915050565b60006111a575283937b23ab1ba20b2323932b9b9a932b9b7b63b32b960511b6118eb565b60006111a57121bab93932b731bca1b7b73a3937b63632b960711b6118eb565b60008181526001830160205260408120548015611a945760006119cf600183611ffb565b85549091506000906119e390600190611ffb565b9050818114611a48576000866000018281548110611a0357611a03611d43565b9060005260206000200154905080876000018481548110611a2657611a26611d43565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611a5957611a59612012565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061115b565b600091505061115b565b60006060815b8151811015611b0457611acf828281518110611ac257611ac2611d43565b60200260200101516118eb565b6001600160a01b0316846001600160a01b03161415611af2575060019392505050565b80611afc81611dfa565b915050611aa4565b5060009392505050565b6000826000018281548110611b2557611b25611d43565b9060005260206000200154905092915050565b6001600160a01b0381168114610f9d57600080fd5b600080600060608486031215611b6257600080fd5b8335611b6d81611b38565b92506020840135611b7d81611b38565b929592945050506040919091013590565b600060208284031215611ba057600080fd5b8135611bab81611b38565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015611bea57835183529284019291840191600101611bce565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215611c2157600080fd5b8335611c2c81611b38565b9250602084810135611c3d81611b38565b9250604085013567ffffffffffffffff80821115611c5a57600080fd5b818701915087601f830112611c6e57600080fd5b813581811115611c8057611c80611bf6565b8060051b604051601f19603f83011681018181108582111715611ca557611ca5611bf6565b60405291825284820192508381018501918a831115611cc357600080fd5b938501935b82851015611ce157843584529385019392850192611cc8565b8096505050505050509250925092565b600060208284031215611d0357600080fd5b5035919050565b60008060408385031215611d1d57600080fd5b8235611d2881611b38565b91506020830135611d3881611b38565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b81811015611d7f57602081850181015186830182015201611d63565b81811115611d91576000602083870101525b50601f01601f19169290920160200192915050565b828152604060208201526000611dbf6040830184611d59565b949350505050565b600060208284031215611dd957600080fd5b8151611bab81611b38565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611e0e57611e0e611de4565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6001600160a01b039586168152939094166020840152600060408401526060830191909152608082015290151560a082015260c00190565b8051801515811461102a57600080fd5b60008060408385031215611ea557600080fd5b611eae83611e82565b9150611ebc60208401611e82565b90509250929050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600060208284031215611f4957600080fd5b5051919050565b60008060408385031215611f6357600080fd5b505080516020909101519092909150565b6000816000190483118215151615611f8e57611f8e611de4565b500290565b600082611fb057634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611fc857611fc8611de4565b500190565b600060208284031215611fdf57600080fd5b61115882611e82565b6020815260006111586020830184611d59565b60008282101561200d5761200d611de4565b500390565b634e487b7160e01b600052603160045260246000fdfe9c7027782242f494db9a6258f94a84c3972e611dd1ab76516c3aaa23debf8c7ba264697066735822122010f9258097703cf9f37f3e346496ac2e07eea7169174892acb3dd7532d38d68964736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c806378b2479a116100a2578063beedefc911610071578063beedefc9146101f9578063c2f3bd4a1461020c578063e09976591461021f578063eb6ad24e14610226578063f2fde38b1461024457600080fd5b806378b2479a146101b85780638da5cb5b146101cb5780639810923f146101d3578063b884582c146101e657600080fd5b8063399f8563116100de578063399f8563146101755780633d03b9da1461018857806365f0847a1461019d578063715018a6146101b057600080fd5b806304f3bcec146101105780631794bb3c1461014057806329985e5a146101555780632af64bd31461015d575b600080fd5b600054610123906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61015361014e366004611b4d565b610257565b005b610153610379565b61016561050c565b6040519015158152602001610137565b610153610183366004611b8e565b61062a565b6101906106a9565b6040516101379190611bb2565b6101536101ab366004611c0c565b610773565b6101536108d8565b6101536101c6366004611cf1565b610913565b6101236109df565b6101536101e1366004611b8e565b610a12565b6101536101f4366004611b4d565b610aa3565b610153610207366004611b4d565b610bc6565b61015361021a366004611d0a565b610cdf565b6060610190565b60008051602061202983398151915254604051908152602001610137565b610153610252366004611b8e565b610f00565b60006102636001610fa0565b9050801561027b576002805461ff0019166101001790555b600061028561102f565b6001600160a01b031614156102ec5760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b60648201526084015b60405180910390fd5b6102f584611057565b6102fe836110c8565b61031b846000805160206120298339815191525b60010190611143565b5081600080516020612029833981519152558015610373576002805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b60006103836106a9565b905060005b81518110156105085760008282815181106103a5576103a5611d43565b6020026020010151905060008060009054906101000a90046001600160a01b03166001600160a01b0316636795dbcd838460405160200161041291907f5265736f6c766572206d697373696e67207461726765743a20000000000000008152601981019190915260390190565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161043e929190611da6565b60206040518083038186803b15801561045657600080fd5b505afa15801561046a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048e9190611dc7565b60008381526001602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251868152918201529192507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68910160405180910390a15050808061050090611dfa565b915050610388565b5050565b6000806105176106a9565b905060005b815181101561062157600082828151811061053957610539611d43565b60209081029190910181015160008181526001909252604080832054925490516321f8a72160e01b8152600481018390529193506001600160a01b039283169216906321f8a7219060240160206040518083038186803b15801561059c57600080fd5b505afa1580156105b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d49190611dc7565b6001600160a01b03161415806105ff57506000818152600160205260409020546001600160a01b0316155b1561060e576000935050505090565b508061061981611dfa565b91505061051c565b50600191505090565b336106336109df565b6001600160a01b0316146106595760405162461bcd60e51b81526004016102e390611e15565b61067181600080516020612029833981519152610312565b506040516001600160a01b038216907fca54a159f8acb315394931246b8790a2785d67772bd1314afd4a67a9d26b39d390600090a250565b604080516003808252608082019092526060916020820183803683370190505090507321b7b63630ba32b930b620b3b3b932b3b0ba37b960611b816000815181106106f6576106f6611d43565b6020026020010181815250507121bab93932b731bca1b7b73a3937b63632b960711b8160018151811061072b5761072b611d43565b60200260200101818152505075283937b23ab1ba20b2323932b9b9a932b9b7b63b32b960511b8160028151811061076457610764611d43565b60200260200101818152505090565b610790336000805160206120298339815191525b60010190611161565b6107cd5760405162461bcd60e51b815260206004820152600e60248201526d494e56414c49442041434345535360901b60448201526064016102e3565b6000805160206120298339815191525481511061081d5760405162461bcd60e51b815260206004820152600e60248201526d544f4f204d554348204445414c5360901b60448201526064016102e3565b600080610828611183565b6001600160a01b031663ef75abb6868660008060006040518663ffffffff1660e01b815260040161085d959493929190611e4a565b604080518083038186803b15801561087457600080fd5b505afa158015610888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ac9190611e92565b915091508180156108ba5750805b156108c6575050505050565b6108d18585856111aa565b5050505050565b336108e16109df565b6001600160a01b0316146109075760405162461bcd60e51b81526004016102e390611e15565b6109116000611057565b565b3361091c6109df565b6001600160a01b0316146109425760405162461bcd60e51b81526004016102e390611e15565b600081116109855760405162461bcd60e51b815260206004820152601060248201526f125390d3d4949150d517d3d19194d15560821b60448201526064016102e3565b7f8ad4d4498263127d0966701929acd0fd4ef45595df9d67db529a43b46972689d6000805160206120298339815191525460408051918252602082018490520160405180910390a160008051602061202983398151915255565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa5b546001600160a01b0316919050565b33610a1b6109df565b6001600160a01b031614610a415760405162461bcd60e51b81526004016102e390611e15565b610a6b7f9c7027782242f494db9a6258f94a84c3972e611dd1ab76516c3aaa23debf8c7c8261163d565b506040516001600160a01b038216907f7e6c9f428aa5d9a1fdd152042fce5dd28d8ea524649e8a9b3066dd75ebe1a02490600090a250565b610aac33611652565b610af25760405162461bcd60e51b81526020600482015260176024820152764f6e6c7920416363657074656420436f6e74726163747360481b60448201526064016102e3565b6000610afe84846116e6565b5060008181527f9c7027782242f494db9a6258f94a84c3972e611dd1ab76516c3aaa23debf8c8060205260409020909150610b398184611856565b610b795760405162461bcd60e51b81526020600482015260116024820152701393d38811561254d5125391c811115053607a1b60448201526064016102e3565b610b83818461186e565b507fb60fc83c73a71a738ac8cef1dbf0b5768fac994a68026b338b027f1bd233db87858585604051610bb793929190611ec5565b60405180910390a15050505050565b610bcf33611652565b610c155760405162461bcd60e51b81526020600482015260176024820152764f6e6c7920416363657074656420436f6e74726163747360481b60448201526064016102e3565b6000610c2184846116e6565b5060008181527f9c7027782242f494db9a6258f94a84c3972e611dd1ab76516c3aaa23debf8c8060205260409020909150610c5c8184611856565b15610ca15760405162461bcd60e51b8152602060048201526015602482015274105314915051164811561254d5125391c811115053605a1b60448201526064016102e3565b610cab818461187a565b507fb3f8c6466290eeb06c660ababdfebef06a9061c94f7a0aa42bcad0d91887aa60858585604051610bb793929190611ec5565b610cf733600080516020612029833981519152610787565b610d345760405162461bcd60e51b815260206004820152600e60248201526d494e56414c49442041434345535360901b60448201526064016102e3565b600080610d3f611183565b6001600160a01b031663ef75abb6858560008060006040518663ffffffff1660e01b8152600401610d74959493929190611e4a565b604080518083038186803b158015610d8b57600080fd5b505afa158015610d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc39190611e92565b91509150818015610dd15750805b15610ddc5750505050565b6000610de885856116e6565b5060008181527f9c7027782242f494db9a6258f94a84c3972e611dd1ab76516c3aaa23debf8c8060205260408120919250610e2282611886565b90506000600080516020612029833981519152548211610e4457508080610e57565b5060008051602061202983398151915254805b5060008167ffffffffffffffff811115610e7357610e73611bf6565b604051908082528060200260200182016040528015610e9c578160200160208202803683370190505b50905060005b82811015610ee9576000610eb68683611890565b905080838381518110610ecb57610ecb611d43565b60209081029190910101525080610ee181611dfa565b915050610ea2565b50610ef58989836111aa565b505050505050505050565b33610f096109df565b6001600160a01b031614610f2f5760405162461bcd60e51b81526004016102e390611e15565b6001600160a01b038116610f945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102e3565b610f9d81611057565b50565b600254600090610100900460ff1615610fe9578160ff166001148015610fc55750303b155b610fe15760405162461bcd60e51b81526004016102e390611ee9565b506000919050565b60025460ff8084169116106110105760405162461bcd60e51b81526004016102e390611ee9565b506002805460ff191660ff92909216919091179055600190565b919050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610a03565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000546001600160a01b0316156111215760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c7265616479000000000060448201526064016102e3565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000611158836001600160a01b03841661189c565b90505b92915050565b6001600160a01b03811660009081526001830160205260408120541515611158565b60006111a57321b7b63630ba32b930b620b3b3b932b3b0ba37b960611b6118eb565b905090565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052905b82518110156115475782818151811061120757611207611d43565b6020908102919091010151825261121c611967565b8251604051634d86283f60e01b81526001600160a01b039290921691634d86283f9161124e9160040190815260200190565b60206040518083038186803b15801561126657600080fd5b505afa15801561127a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129e9190611dc7565b6001600160a01b031660e08301819052825160405163b0c1865160e01b815263b0c18651916112d39160040190815260200190565b60206040518083038186803b1580156112eb57600080fd5b505afa1580156112ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113239190611f37565b60c083015260e082015182516040516332757d4160e01b81526001600160a01b03909216916332757d419161135e9189918991600401611ec5565b604080518083038186803b15801561137557600080fd5b505afa158015611389573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ad9190611f50565b604084015260208301526113bf61198b565b6001600160a01b0316631743ffce8360c001516040518263ffffffff1660e01b81526004016113f091815260200190565b60206040518083038186803b15801561140857600080fd5b505afa15801561141c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114409190611f37565b60a083018190526020830151670de0b6b3a76400009161145f91611f74565b6114699190611f93565b602083015260a08201516040830151670de0b6b3a76400009161148b91611f74565b6114959190611f93565b6040830152602082015160608301516114ae9190611fb5565b6060830152604082015160808301516114c79190611fb5565b608083015260e0820151825160405163053884b760e11b81526001600160a01b0390921691630a71096e916115029160040190815260200190565b600060405180830381600087803b15801561151c57600080fd5b505af1158015611530573d6000803e3d6000fd5b50505050808061153f90611dfa565b9150506111ec565b506060810151156115c05761155a611183565b6001600160a01b03166326c01303858584606001516040518463ffffffff1660e01b815260040161158d93929190611ec5565b600060405180830381600087803b1580156115a757600080fd5b505af11580156115bb573d6000803e3d6000fd5b505050505b608081015115610373576115d2611183565b6001600160a01b03166326c01303848684608001516040518463ffffffff1660e01b815260040161160593929190611ec5565b600060405180830381600087803b15801561161f57600080fd5b505af1158015611633573d6000803e3d6000fd5b5050505050505050565b6000611158836001600160a01b0384166119ab565b600061165c611967565b60405163a3d52aad60e01b81526001600160a01b038481166004830152919091169063a3d52aad9060240160206040518083038186803b15801561169f57600080fd5b505afa1580156116b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d79190611fcd565b8061115b575061115b82611a9e565b600080826001600160a01b0316846001600160a01b031614156117415760405162461bcd60e51b81526020600482015260136024820152724964656e746963616c2061646472657373657360681b60448201526064016102e3565b600080846001600160a01b0316866001600160a01b031610611764578486611767565b85855b90925090506001600160a01b0382166117b45760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b60448201526064016102e3565b856001600160a01b0316826001600160a01b03161461181057604080516001600160a01b03808516602083015283169181019190915260600160405160208183030381529060405280519060200120600193509350505061184f565b604080516001600160a01b0380851660208301528316918101919091526060016040516020818303038152906040528051906020012060009350935050505b9250929050565b60008181526001830160205260408120541515611158565b600061115883836119ab565b6000611158838361189c565b600061115b825490565b60006111588383611b0e565b60008181526001830160205260408120546118e35750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561115b565b50600061115b565b600081815260016020908152604080832054905170026b4b9b9b4b7339030b2323932b9b99d1607d1b92810192909252603182018490526001600160a01b03169081151590605101604051602081830303815290604052906119605760405162461bcd60e51b81526004016102e39190611fe8565b5092915050565b60006111a575283937b23ab1ba20b2323932b9b9a932b9b7b63b32b960511b6118eb565b60006111a57121bab93932b731bca1b7b73a3937b63632b960711b6118eb565b60008181526001830160205260408120548015611a945760006119cf600183611ffb565b85549091506000906119e390600190611ffb565b9050818114611a48576000866000018281548110611a0357611a03611d43565b9060005260206000200154905080876000018481548110611a2657611a26611d43565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611a5957611a59612012565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061115b565b600091505061115b565b60006060815b8151811015611b0457611acf828281518110611ac257611ac2611d43565b60200260200101516118eb565b6001600160a01b0316846001600160a01b03161415611af2575060019392505050565b80611afc81611dfa565b915050611aa4565b5060009392505050565b6000826000018281548110611b2557611b25611d43565b9060005260206000200154905092915050565b6001600160a01b0381168114610f9d57600080fd5b600080600060608486031215611b6257600080fd5b8335611b6d81611b38565b92506020840135611b7d81611b38565b929592945050506040919091013590565b600060208284031215611ba057600080fd5b8135611bab81611b38565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015611bea57835183529284019291840191600101611bce565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215611c2157600080fd5b8335611c2c81611b38565b9250602084810135611c3d81611b38565b9250604085013567ffffffffffffffff80821115611c5a57600080fd5b818701915087601f830112611c6e57600080fd5b813581811115611c8057611c80611bf6565b8060051b604051601f19603f83011681018181108582111715611ca557611ca5611bf6565b60405291825284820192508381018501918a831115611cc357600080fd5b938501935b82851015611ce157843584529385019392850192611cc8565b8096505050505050509250925092565b600060208284031215611d0357600080fd5b5035919050565b60008060408385031215611d1d57600080fd5b8235611d2881611b38565b91506020830135611d3881611b38565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b81811015611d7f57602081850181015186830182015201611d63565b81811115611d91576000602083870101525b50601f01601f19169290920160200192915050565b828152604060208201526000611dbf6040830184611d59565b949350505050565b600060208284031215611dd957600080fd5b8151611bab81611b38565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611e0e57611e0e611de4565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6001600160a01b039586168152939094166020840152600060408401526060830191909152608082015290151560a082015260c00190565b8051801515811461102a57600080fd5b60008060408385031215611ea557600080fd5b611eae83611e82565b9150611ebc60208401611e82565b90509250929050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600060208284031215611f4957600080fd5b5051919050565b60008060408385031215611f6357600080fd5b505080516020909101519092909150565b6000816000190483118215151615611f8e57611f8e611de4565b500290565b600082611fb057634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611fc857611fc8611de4565b500190565b600060208284031215611fdf57600080fd5b61115882611e82565b6020815260006111586020830184611d59565b60008282101561200d5761200d611de4565b500390565b634e487b7160e01b600052603160045260246000fdfe9c7027782242f494db9a6258f94a84c3972e611dd1ab76516c3aaa23debf8c7ba264697066735822122010f9258097703cf9f37f3e346496ac2e07eea7169174892acb3dd7532d38d68964736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptedContracts()": {
        "details": "Returns contract names that can call this contract."
      },
      "addLiquidationAgent(address)": {
        "details": "Adds liquidation agent address into the set.",
        "params": {
          "_liquidationAgent": "Liquidation agent address"
        }
      },
      "getOffset()": {
        "details": "Triggers to get liquidation offset."
      },
      "initialize(address,address,uint256)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController"
      },
      "liquidateDeals(address,address)": {
        "details": "Triggers to liquidate multiple deals according to the liquidation queue",
        "params": {
          "party0": "First counterparty address",
          "party1": "Second counterparty address"
        }
      },
      "liquidateDeals(address,address,bytes32[])": {
        "details": "Triggers to liquidate multiple deals with specific `_dealIds`.",
        "params": {
          "dealIds": "Array of Deal ID to liquidate",
          "party0": "First counterparty address",
          "party1": "Second counterparty address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeLiquidationAgent(address)": {
        "details": "Removes liquidation agent address from the set.",
        "params": {
          "_liquidationAgent": "Liquidation agent address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requiredContracts()": {
        "details": "Returns required contract names in this contract"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateLiquidationOffset(uint256)": {
        "details": "Updates offset for maximum number of deals liquidated per one execution.",
        "params": {
          "_offset": "New liquidation offset"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address,address,uint256)": {
        "notice": "Initializes the contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 35566,
        "contract": "contracts/Liquidations.sol:Liquidations",
        "label": "resolver",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAddressResolver)23128"
      },
      {
        "astId": 35570,
        "contract": "contracts/Liquidations.sol:Liquidations",
        "label": "addressCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2833,
        "contract": "contracts/Liquidations.sol:Liquidations",
        "label": "_initialized",
        "offset": 0,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 2836,
        "contract": "contracts/Liquidations.sol:Liquidations",
        "label": "_initializing",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAddressResolver)23128": {
        "encoding": "inplace",
        "label": "contract IAddressResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}