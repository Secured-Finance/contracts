{
  "address": "0x2b3C6cA54AfaA13732dd524E03f37fD217db81C0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "acceptedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        }
      ],
      "name": "EarlyTermination",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevPV",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currPV",
          "type": "uint256"
        }
      ],
      "name": "MarkToMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currLender",
          "type": "address"
        }
      ],
      "name": "Novation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "term",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "notional",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        }
      ],
      "name": "Register",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rejectedBy",
          "type": "address"
        }
      ],
      "name": "RejectTermination",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "dealId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requestedBy",
          "type": "address"
        }
      ],
      "name": "RequestTermination",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "acceptTermination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_term",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "addLendingMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "getDealCurrency",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "getDealLastPV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "getDealPV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pv",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "getDealSettlementStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "getLastSettledPayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "settlementTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "getLoanDeal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "ccy",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "term",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "notional",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pv",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "startTxHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct LoanV2Storage.LoanDeal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "getPaymentSchedule",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "getTerminationState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "terminationAsker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            }
          ],
          "internalType": "struct LoanV2Storage.Termination",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTransferable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastLoanId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_term",
          "type": "uint256"
        }
      ],
      "name": "lendingMarkets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "markToMarket",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "novation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "side",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "term",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "notional",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "register",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "rejectTermination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        }
      ],
      "name": "requestTermination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isAccepted",
          "type": "bool"
        }
      ],
      "name": "setIsTransferable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x77ea842f131ee22402fb141fd4d0b6cf7ab635b8933295d3506c011063ef8f1e",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x2b3C6cA54AfaA13732dd524E03f37fD217db81C0",
    "transactionIndex": 18,
    "gasUsed": "3415604",
    "logsBloom": "0x
    "blockHash": "0x618671eb4ac5418c908065c47c422caca026b8abbd9674705b619cefd0e68574",
    "transactionHash": "0x77ea842f131ee22402fb141fd4d0b6cf7ab635b8933295d3506c011063ef8f1e",
    "logs": [],
    "blockNumber": 10986759,
    "cumulativeGasUsed": "15522919",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "59521d43dda390ded85a5f23871f6cb8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acceptedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"EarlyTermination\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevPV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currPV\",\"type\":\"uint256\"}],\"name\":\"MarkToMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currLender\",\"type\":\"address\"}],\"name\":\"Novation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"notional\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rejectedBy\",\"type\":\"address\"}],\"name\":\"RejectTermination\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requestedBy\",\"type\":\"address\"}],\"name\":\"RequestTermination\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"acceptTermination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_term\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addLendingMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"getDealCurrency\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"getDealLastPV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"getDealPV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pv\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"getDealSettlementStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"getLastSettledPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"settlementTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"getLoanDeal\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"notional\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pv\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"startTxHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct LoanV2Storage.LoanDeal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"getPaymentSchedule\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"getTerminationState\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"terminationAsker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"}],\"internalType\":\"struct LoanV2Storage.Termination\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTransferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLoanId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_term\",\"type\":\"uint256\"}],\"name\":\"lendingMarkets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"markToMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"novation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"notional\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"rejectTermination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"requestTermination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isAccepted\",\"type\":\"bool\"}],\"name\":\"setIsTransferable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptTermination(bytes32)\":{\"details\":\"Triggers to accept early termination of the loan.\",\"params\":{\"loanId\":\"Loan deal ID\"}},\"acceptedContracts()\":{\"details\":\"Returns contract names that can call this contract.\"},\"addLendingMarket(bytes32,uint256,address)\":{\"details\":\"Triggers to link with existing LendingMarket.\",\"params\":{\"_ccy\":\"LendingMarket main currency\",\"_term\":\"LendingMarket term\",\"addr\":\"LendingMarket contract address\"}},\"getDealCurrency(bytes32)\":{\"details\":\"Triggers to get main currency the deal by `dealId`.\",\"params\":{\"loanId\":\"Loan deal ID\"}},\"getDealLastPV(address,address,bytes32)\":{\"details\":\"Triggers to get stored present value of loan deal.\",\"params\":{\"loanId\":\"Loan ID to update PV for\"}},\"getDealPV(bytes32)\":{\"details\":\"Triggers to recalculate present value of loan deal.\",\"params\":{\"loanId\":\"Loan ID to update PV for\"}},\"getDealSettlementStatus(bytes32)\":{\"details\":\"Triggers to get settlement status of loan deal.\",\"params\":{\"loanId\":\"Loan deal ID\"}},\"getLastSettledPayment(bytes32)\":{\"details\":\"Returns the timestamp of the last settled payment in payment schedule\",\"params\":{\"loanId\":\"Loan deal ID\"}},\"getLoanDeal(bytes32)\":{\"details\":\"Triggers to get current information about Loan deal.\",\"params\":{\"loanId\":\"Loan deal ID\"}},\"getPaymentSchedule(bytes32)\":{\"details\":\"Returns the payment schedule for a deal by `loanId`\",\"params\":{\"loanId\":\"Loan deal ID\"}},\"getTerminationState(bytes32)\":{\"details\":\"Triggers to get termination state for loan with `loanId`.\",\"params\":{\"loanId\":\"Loan deal ID\"}},\"getVersion()\":{\"details\":\"Triggers to return loan product implementation version\",\"returns\":{\"_0\":\"implementation version\"}},\"initialize(address,address)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController\"},\"isTransferable()\":{\"details\":\"Get if loan ownership can be transferred.\"},\"lastLoanId()\":{\"details\":\"Get the last loan ID.\"},\"lendingMarkets(bytes32,uint256)\":{\"details\":\"Get the lending market address for specific currency and term.\"},\"markToMarket(bytes32)\":{\"details\":\"Main function for mark-to-market: updates present value, loan state and liquidates loan deal if collateral coverage <125% for every liquidation msg.sender get rewarded ~5% of loan deal PV.\",\"params\":{\"loanId\":\"Loan ID to update PV for\"}},\"novation(bytes32,address)\":{\"details\":\"Triggers to transfer loan ownership.\",\"params\":{\"loanId\":\"Loan deal ID\",\"newOwner\":\"Address of new owner (lender)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"register(address,address,uint8,bytes32,uint256,uint256,uint256)\":{\"details\":\"Triggered to register new loan deal, also locks borrowers collateral.\",\"params\":{\"ccy\":\"Loan deal main currency\",\"maker\":\"LendingMarket order market maker\",\"notional\":\"Notional amount of funds to lend/borrow\",\"rate\":\"Loan deal annual interest rate\",\"side\":\"MarketOrder side\",\"taker\":\"LendingMarket order market taker\",\"term\":\"Loan deal term\"}},\"rejectTermination(bytes32)\":{\"details\":\"Triggers to reject early termination of the loan.\",\"params\":{\"loanId\":\"Loan deal ID\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requestTermination(bytes32)\":{\"details\":\"Triggers to request early termination of the loan.\",\"params\":{\"loanId\":\"Loan deal ID\"}},\"requiredContracts()\":{\"details\":\"Returns required contract names in this contract\"},\"setIsTransferable(bool)\":{\"details\":\"Triggers to change ability to transfer loan ownership by lenders.\",\"params\":{\"isAccepted\":\"Boolean to\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"LoanV2 contract is used to store Lending deals in Secured Finance protocol. This contract handle the PV updates on lending market rate changes also allowing parties to mutually terminate their lending deals Contract linked to Lending Market contracts, LendingMarketController and Collateral contract.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptTermination(bytes32)\":{\"notice\":\"Executed only for working loan deal\"},\"addLendingMarket(bytes32,uint256,address)\":{\"notice\":\"Executed only by contract owner\"},\"initialize(address,address)\":{\"notice\":\"Initializes the contract.\"},\"novation(bytes32,address)\":{\"notice\":\"Executed only by original lender\"},\"register(address,address,uint8,bytes32,uint256,uint256,uint256)\":{\"notice\":\"Callable only by LendingMarket after matching orders\"},\"rejectTermination(bytes32)\":{\"notice\":\"Executed only for working loan deal\"},\"requestTermination(bytes32)\":{\"notice\":\"Executed only for working loan deal\"},\"setIsTransferable(bool)\":{\"notice\":\"Executed only by contract owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LoanV2.sol\":\"LoanV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"contracts/LoanV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./interfaces/IProductWithOneLeg.sol\\\";\\nimport \\\"./libraries/DealId.sol\\\";\\nimport \\\"./libraries/DiscountFactor.sol\\\";\\nimport \\\"./libraries/BokkyPooBahsDateTimeLibrary.sol\\\";\\nimport \\\"./libraries/ProductPrefixes.sol\\\";\\nimport \\\"./mixins/MixinAddressResolver.sol\\\";\\nimport \\\"./types/ProtocolTypes.sol\\\";\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"./utils/Proxyable.sol\\\";\\nimport {LoanV2Storage as Storage} from \\\"./storages/LoanV2Storage.sol\\\";\\n\\n/**\\n * @title LoanV2 contract is used to store Lending deals in Secured Finance\\n * protocol. This contract handle the PV updates on lending market rate changes\\n * also allowing parties to mutually terminate their lending deals\\n *\\n * Contract linked to Lending Market contracts, LendingMarketController and Collateral contract.\\n */\\ncontract LoanV2 is IProductWithOneLeg, MixinAddressResolver, Ownable, Proxyable {\\n    uint256 constant NOTICE = 2 weeks;\\n    uint256 constant SETTLE = 2 days;\\n    uint256 constant MAXPAYNUM = 6;\\n    uint16 private constant VERSION = 1;\\n\\n    /**\\n     * @dev Modifier to check if LendingMarket contract linked with this contract\\n     * @param _ccy LendingMarket currency\\n     * @param _term LendingMarket term\\n     */\\n    modifier lendingMarketExists(bytes32 _ccy, uint256 _term) {\\n        require(Storage.slot().lendingMarkets[_ccy][_term] == msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the loan deal is active.\\n     * @param loanId Loan deal ID\\n     */\\n    modifier workingLoan(bytes32 loanId) {\\n        require(Storage.slot().isSettled[loanId], \\\"loan is not working\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController\\n     */\\n    function initialize(address owner, address resolver) public initializer onlyProxy {\\n        Storage.slot().paymentFrequency = uint8(ProtocolTypes.PaymentFrequency.ANNUAL);\\n        _transferOwnership(owner);\\n        registerAddressResolver(resolver);\\n    }\\n\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](4);\\n        contracts[0] = Contracts.COLLATERAL_AGGREGATOR;\\n        contracts[1] = Contracts.LENDING_MARKET_CONTROLLER;\\n        contracts[2] = Contracts.PAYMENT_AGGREGATOR;\\n        contracts[3] = Contracts.TERM_STRUCTURE;\\n    }\\n\\n    /**\\n     * @dev Get if loan ownership can be transferred.\\n     */\\n    function isTransferable() public view returns (bool) {\\n        return Storage.slot().isTransferable;\\n    }\\n\\n    /**\\n     * @dev Get the last loan ID.\\n     */\\n    function lastLoanId() public view returns (uint256) {\\n        return Storage.slot().lastLoanId;\\n    }\\n\\n    /**\\n     * @dev Get the lending market address for specific currency and term.\\n     */\\n    function lendingMarkets(bytes32 _ccy, uint256 _term) public view returns (address) {\\n        return Storage.slot().lendingMarkets[_ccy][_term];\\n    }\\n\\n    /**\\n     * @dev Triggers to change ability to transfer loan ownership by lenders.\\n     * @param isAccepted Boolean to\\n     *\\n     * @notice Executed only by contract owner\\n     */\\n    function setIsTransferable(bool isAccepted) public onlyOwner {\\n        Storage.slot().isTransferable = isAccepted;\\n    }\\n\\n    /**\\n     * @dev Triggers to link with existing LendingMarket.\\n     * @param _ccy LendingMarket main currency\\n     * @param _term LendingMarket term\\n     * @param addr LendingMarket contract address\\n     *\\n     * @notice Executed only by contract owner\\n     */\\n    function addLendingMarket(\\n        bytes32 _ccy,\\n        uint256 _term,\\n        address addr\\n    ) public onlyOwner {\\n        require(\\n            Storage.slot().lendingMarkets[_ccy][_term] == address(0),\\n            \\\"Couldn't rewrite existing market\\\"\\n        );\\n        Storage.slot().lendingMarkets[_ccy][_term] = addr;\\n    }\\n\\n    /**\\n     * @dev Internal function to generate deal id based on product prefix and deals counter\\n     */\\n    function _generateDealId() internal returns (bytes32 id) {\\n        Storage.slot().lastLoanId += 1;\\n        id = DealId.generate(ProductPrefixes.LOAN, Storage.slot().lastLoanId);\\n    }\\n\\n    /**\\n     * @dev Triggered to register new loan deal, also locks borrowers collateral.\\n     * @param maker LendingMarket order market maker\\n     * @param taker LendingMarket order market taker\\n     * @param side MarketOrder side\\n     * @param ccy Loan deal main currency\\n     * @param term Loan deal term\\n     * @param notional Notional amount of funds to lend/borrow\\n     * @param rate Loan deal annual interest rate\\n     *\\n     * @notice Callable only by LendingMarket after matching orders\\n     */\\n    function register(\\n        address maker,\\n        address taker,\\n        uint8 side,\\n        bytes32 ccy,\\n        uint256 term,\\n        uint256 notional,\\n        uint256 rate\\n    ) public override lendingMarketExists(ccy, term) returns (bytes32 loanId) {\\n        require(maker != taker, \\\"Same person deal is not allowed\\\");\\n        address lender;\\n        address borrower;\\n\\n        if (ProtocolTypes.Side(side) == ProtocolTypes.Side.LEND) {\\n            lender = maker;\\n            borrower = taker;\\n        } else if (ProtocolTypes.Side(side) == ProtocolTypes.Side.BORROW) {\\n            lender = taker;\\n            borrower = maker;\\n        }\\n\\n        collateralAggregator().releaseUnsettledCollateral(\\n            lender,\\n            ccy,\\n            (notional * ProtocolTypes.MKTMAKELEVEL) / ProtocolTypes.PCT\\n        );\\n        collateralAggregator().useCollateral(\\n            lender,\\n            borrower,\\n            ccy,\\n            (notional * ProtocolTypes.MKTMAKELEVEL) / ProtocolTypes.PCT,\\n            notional,\\n            false\\n        );\\n\\n        Storage.LoanDeal memory deal;\\n        deal.lender = lender;\\n        deal.borrower = borrower;\\n        deal.ccy = ccy;\\n        deal.term = term;\\n        deal.notional = notional;\\n        deal.rate = rate;\\n        deal.start = block.timestamp;\\n        deal.end = block.timestamp + deal.term * 86400;\\n\\n        loanId = _generateDealId();\\n        Storage.slot().loans[loanId] = deal;\\n\\n        _registerPaymentSchedule(loanId, deal);\\n        // liquidations.addDealToLiquidationQueue(lender, borrower, loanId);\\n\\n        emit Register(lender, borrower, ccy, term, notional, rate, loanId);\\n    }\\n\\n    /**\\n     * @dev Triggers to get settlement status of loan deal.\\n     * @param loanId Loan deal ID\\n     */\\n    function getDealSettlementStatus(bytes32 loanId) public view override returns (bool) {\\n        return Storage.slot().isSettled[loanId];\\n    }\\n\\n    /**\\n     * @dev Triggers to get main currency the deal by `dealId`.\\n     * @param loanId Loan deal ID\\n     */\\n    function getDealCurrency(bytes32 loanId) public view override returns (bytes32) {\\n        return Storage.slot().loans[loanId].ccy;\\n    }\\n\\n    /**\\n     * @dev Triggers to get current information about Loan deal.\\n     * @param loanId Loan deal ID\\n     */\\n    function getLoanDeal(bytes32 loanId) public view returns (Storage.LoanDeal memory) {\\n        return Storage.slot().loans[loanId];\\n    }\\n\\n    /**\\n     * @dev Triggers to get termination state for loan with `loanId`.\\n     * @param loanId Loan deal ID\\n     */\\n    function getTerminationState(bytes32 loanId) public view returns (Storage.Termination memory) {\\n        return Storage.slot().terminations[loanId];\\n    }\\n\\n    /**\\n     * @dev Returns the payment schedule for a deal by `loanId`\\n     * @param loanId Loan deal ID\\n     */\\n    function getPaymentSchedule(bytes32 loanId)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256[] memory,\\n            uint256[] memory,\\n            bool[] memory\\n        )\\n    {\\n        Storage.LoanDeal memory deal = Storage.slot().loans[loanId];\\n\\n        return _constructSchedule(deal, true);\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp of the last settled payment in payment schedule\\n     * @param loanId Loan deal ID\\n     */\\n    function getLastSettledPayment(bytes32 loanId) external view returns (uint256 settlementTime) {\\n        Storage.LoanDeal memory deal = Storage.slot().loans[loanId];\\n\\n        uint256 payNums = termStructure().getNumPayments(\\n            deal.term,\\n            Storage.slot().paymentFrequency\\n        );\\n        uint256[] memory daysArr = termStructure().getTermSchedule(\\n            deal.term,\\n            Storage.slot().paymentFrequency\\n        );\\n\\n        for (uint256 i = payNums; i > 0; i--) {\\n            uint256 time = _timeShift(deal.start, daysArr[i - 1]);\\n            bool status = paymentAggregator().isSettled(deal.lender, deal.borrower, deal.ccy, time);\\n\\n            if (status) {\\n                settlementTime = time;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers to get stored present value of loan deal.\\n     * @param loanId Loan ID to update PV for\\n     */\\n    function getDealLastPV(\\n        address party0,\\n        address party1,\\n        bytes32 loanId\\n    ) public view override returns (uint256, uint256) {\\n        Storage.LoanDeal memory deal = Storage.slot().loans[loanId];\\n\\n        if (deal.pv == 0) {\\n            deal.pv = getDealPV(loanId);\\n        }\\n\\n        if (party0 == deal.lender && party1 == deal.borrower) {\\n            return (0, deal.pv);\\n        } else if (party0 == deal.borrower && party1 == deal.lender) {\\n            return (deal.pv, 0);\\n        }\\n\\n        return (0, 0);\\n    }\\n\\n    // =========== EARLY TERMINATION SECTION ===========\\n\\n    /**\\n     * @dev Triggers to request early termination of the loan.\\n     * @param loanId Loan deal ID\\n     *\\n     * @notice Executed only for working loan deal\\n     */\\n    function requestTermination(bytes32 loanId) public override {\\n        Storage.Termination storage termination = Storage.slot().terminations[loanId];\\n        Storage.LoanDeal memory deal = Storage.slot().loans[loanId];\\n        require(msg.sender == deal.lender || msg.sender == deal.borrower, \\\"parties must request\\\");\\n        require(updateLoanPV(loanId), \\\"failed MtM\\\");\\n\\n        termination.terminationAsker = msg.sender;\\n\\n        emit RequestTermination(loanId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Triggers to accept early termination of the loan.\\n     * @param loanId Loan deal ID\\n     *\\n     * @notice Executed only for working loan deal\\n     */\\n    function acceptTermination(bytes32 loanId) public override {\\n        Storage.Termination storage termination = Storage.slot().terminations[loanId];\\n        require(termination.terminationAsker != address(0), \\\"no termination request\\\");\\n\\n        Storage.LoanDeal memory deal = Storage.slot().loans[loanId];\\n\\n        if (termination.terminationAsker == deal.lender) {\\n            require(msg.sender == deal.borrower, \\\"borrower must accept\\\");\\n        } else {\\n            require(msg.sender == deal.lender, \\\"lender must accept\\\");\\n        }\\n\\n        require(updateLoanPV(loanId), \\\"failed MtM\\\");\\n\\n        if (Storage.slot().isSettled[loanId]) {\\n            (uint256[] memory payments, , bool[] memory settlements) = _constructSchedule(\\n                deal,\\n                true\\n            );\\n\\n            uint256 i;\\n            for (i = 0; i < settlements.length; i++) {\\n                if (settlements[i] == false) break;\\n            }\\n\\n            uint256 deltaDays;\\n\\n            if (i == 0) {\\n                deltaDays = BokkyPooBahsDateTimeLibrary.diffDays(deal.start, block.timestamp);\\n            } else {\\n                deltaDays = BokkyPooBahsDateTimeLibrary.diffDays(payments[i - 1], block.timestamp);\\n            }\\n\\n            uint256 interestRatePerDay = (deal.rate * 1e18) / 36500;\\n            uint256 accuredInterestRate = interestRatePerDay * deltaDays;\\n            uint256 accuredInterest = (deal.notional * accuredInterestRate) / 1e20;\\n            uint256 totalPayment = accuredInterest + deal.pv;\\n            collateralAggregator().liquidate(\\n                deal.borrower,\\n                deal.lender,\\n                deal.ccy,\\n                totalPayment,\\n                deal.pv,\\n                true\\n            );\\n\\n            emit EarlyTermination(loanId, msg.sender, totalPayment);\\n        } else {\\n            emit EarlyTermination(loanId, msg.sender, 0);\\n        }\\n\\n        _liquidateLoan(loanId);\\n    }\\n\\n    /**\\n     * @dev Triggers to reject early termination of the loan.\\n     * @param loanId Loan deal ID\\n     *\\n     * @notice Executed only for working loan deal\\n     */\\n    function rejectTermination(bytes32 loanId) public override {\\n        Storage.Termination memory termination = Storage.slot().terminations[loanId];\\n        require(termination.terminationAsker != address(0), \\\"no termination request\\\");\\n\\n        Storage.LoanDeal memory deal = Storage.slot().loans[loanId];\\n        require(msg.sender == deal.lender || msg.sender == deal.borrower, \\\"parties must reject\\\");\\n        require(updateLoanPV(loanId), \\\"failed MtM\\\");\\n\\n        delete Storage.slot().terminations[loanId];\\n\\n        emit RejectTermination(loanId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Triggers to transfer loan ownership.\\n     * @param loanId Loan deal ID\\n     * @param newOwner Address of new owner (lender)\\n     *\\n     * @notice Executed only by original lender\\n     */\\n    function novation(bytes32 loanId, address newOwner) public override workingLoan(loanId) {\\n        Storage.LoanDeal storage deal = Storage.slot().loans[loanId];\\n        require(Storage.slot().isTransferable, \\\"transfers not allowed\\\");\\n\\n        address prevLender = deal.lender;\\n        require(msg.sender == prevLender, \\\"lender must trasfer\\\");\\n\\n        _removePaymentSchedule(loanId, deal);\\n        collateralAggregator().releaseCollateral(\\n            prevLender,\\n            deal.borrower,\\n            deal.ccy,\\n            0,\\n            deal.pv,\\n            true\\n        );\\n\\n        deal.lender = newOwner;\\n\\n        _registerPaymentSchedule(loanId, deal);\\n        collateralAggregator().useCollateral(newOwner, deal.borrower, deal.ccy, 0, deal.pv, true);\\n\\n        emit Novation(loanId, newOwner);\\n    }\\n\\n    function liquidate(bytes32 loanId) external override {\\n        _liquidateLoan(loanId);\\n    }\\n\\n    // =========== MARK-TO-MARKET SECTION ===========\\n\\n    /**\\n     * @dev Main function for mark-to-market: updates present value,\\n     * loan state and liquidates loan deal if collateral coverage <125%\\n     * for every liquidation msg.sender get rewarded ~5% of loan deal PV.\\n     * @param loanId Loan ID to update PV for\\n     */\\n    function markToMarket(bytes32 loanId) external override returns (bool) {\\n        _verifyNotionalExchange(loanId);\\n        require(updateLoanPV(loanId), \\\"failed update PV\\\");\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Triggers to update present value of loan.\\n     * @param loanId Loan ID to update PV for\\n     *\\n     * @notice Calculates discount factors based on lending markets rates,\\n     * and updates the state of the loan. Can be triggered to liquidate loan deal\\n     * if borrower's collateral not enough.\\n     */\\n    function updateLoanPV(bytes32 loanId) internal returns (bool) {\\n        uint256 pv = getDealPV(loanId);\\n\\n        if (pv != 0) {\\n            Storage.LoanDeal storage deal = Storage.slot().loans[loanId];\\n            if (!Storage.slot().isSettled[loanId]) return true;\\n\\n            uint256 oldPV = deal.pv == 0 ? deal.notional : deal.pv;\\n            deal.pv = pv;\\n\\n            collateralAggregator().updatePV(\\n                deal.lender,\\n                deal.borrower,\\n                deal.ccy,\\n                0,\\n                oldPV,\\n                0,\\n                deal.pv\\n            );\\n\\n            emit MarkToMarket(loanId, oldPV, pv);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Triggers to recalculate present value of loan deal.\\n     * @param loanId Loan ID to update PV for\\n     */\\n    function getDealPV(bytes32 loanId) public view override returns (uint256 pv) {\\n        Storage.LoanDeal memory deal = Storage.slot().loans[loanId];\\n        if (!Storage.slot().isSettled[loanId]) return deal.notional;\\n\\n        (uint256[] memory dfs, uint256[] memory terms) = lendingMarketController()\\n            .getDiscountFactorsForCcy(deal.ccy);\\n\\n        (uint256[] memory payments, uint256[] memory amounts, ) = _constructSchedule(deal, false);\\n\\n        for (uint256 i = 0; i < payments.length; i++) {\\n            if (payments[i] < block.timestamp) continue;\\n            uint256 d = DiscountFactor.interpolateDF(dfs, terms, payments[i]);\\n\\n            pv = pv + amounts[i] * d;\\n        }\\n\\n        return pv / ProtocolTypes.BP;\\n    }\\n\\n    /**\\n     * @dev Internal function to liquidate loan deal and remove all payments in timeslots\\n     * @param loanId Loan deal ID\\n     */\\n    function _liquidateLoan(bytes32 loanId) internal {\\n        Storage.LoanDeal memory deal = Storage.slot().loans[loanId];\\n        _removePaymentSchedule(loanId, deal);\\n\\n        emit Liquidate(loanId);\\n        delete Storage.slot().loans[loanId];\\n    }\\n\\n    /**\\n     * @dev Internal function to get TimeSlot position after adding days\\n     * @param timestamp Timestamp to add days\\n     * @param numDays number of days to add\\n     * @return Updated timestamp and TimeSlot position\\n     */\\n    function _timeShift(uint256 timestamp, uint256 numDays) internal pure returns (uint256) {\\n        timestamp = BokkyPooBahsDateTimeLibrary.addDays(timestamp, numDays);\\n\\n        return timestamp;\\n    }\\n\\n    /**\\n     * @dev Internal function for registering payment schedule while registering new loan\\n     * @param loanId Loan deal ID\\n     * @param deal LoanDeal structure\\n     */\\n    function _registerPaymentSchedule(bytes32 loanId, Storage.LoanDeal memory deal) internal {\\n        (uint256[] memory payments, uint256[] memory amounts, ) = _constructSchedule(deal, false);\\n\\n        uint256[] memory lenderLeg = new uint256[](payments.length);\\n        lenderLeg[0] = deal.notional;\\n\\n        paymentAggregator().registerPayments(\\n            deal.lender,\\n            deal.borrower,\\n            deal.ccy,\\n            loanId,\\n            payments,\\n            lenderLeg,\\n            amounts\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function for registering payment schedule while registering new loan\\n     * @param loanId Loan deal ID\\n     * @param deal LoanDeal structure\\n     */\\n    function _removePaymentSchedule(bytes32 loanId, Storage.LoanDeal memory deal) internal {\\n        (uint256[] memory payments, uint256[] memory amounts, ) = _constructSchedule(deal, false);\\n\\n        uint256[] memory lenderLeg = new uint256[](payments.length);\\n        if (!Storage.slot().isSettled[loanId]) {\\n            lenderLeg[0] = deal.notional;\\n        }\\n\\n        paymentAggregator().removePayments(\\n            deal.lender,\\n            deal.borrower,\\n            deal.ccy,\\n            loanId,\\n            payments,\\n            lenderLeg,\\n            amounts\\n        );\\n    }\\n\\n    struct ScheduleConstructionLocalVars {\\n        uint256 payNums;\\n        uint256[] daysArr;\\n        uint256 dfFrac;\\n        uint256 coupon;\\n        uint256 time;\\n        bool status;\\n    }\\n\\n    /**\\n     * @dev Internal function to construct payment schedule using deal parameters\\n     * @param deal Loan deal structure\\n     * @param settlementStatus Boolean wether settlement status should be returned\\n     * @return Payment schedule structure\\n     */\\n    function _constructSchedule(Storage.LoanDeal memory deal, bool settlementStatus)\\n        internal\\n        view\\n        returns (\\n            uint256[] memory,\\n            uint256[] memory,\\n            bool[] memory\\n        )\\n    {\\n        ScheduleConstructionLocalVars memory vars;\\n\\n        vars.payNums = termStructure().getNumPayments(deal.term, Storage.slot().paymentFrequency);\\n        vars.daysArr = termStructure().getTermSchedule(deal.term, Storage.slot().paymentFrequency);\\n        vars.dfFrac = termStructure().getDfFrac(deal.term);\\n\\n        vars.coupon =\\n            (deal.notional * deal.rate * vars.dfFrac) /\\n            ProtocolTypes.BP /\\n            ProtocolTypes.BP;\\n\\n        uint256 len = vars.payNums + 1;\\n        uint256[] memory payments = new uint256[](len);\\n        uint256[] memory amounts = new uint256[](len);\\n        bool[] memory settlements = new bool[](len);\\n\\n        for (uint256 i = 1; i <= vars.payNums; i++) {\\n            uint256 time = _timeShift(deal.start, vars.daysArr[i - 1]);\\n\\n            payments[i] = time;\\n            if (i == vars.payNums) {\\n                amounts[i] = deal.notional + vars.coupon;\\n            } else {\\n                amounts[i] = vars.coupon;\\n            }\\n\\n            if (settlementStatus) {\\n                vars.status = paymentAggregator().isSettled(\\n                    deal.lender,\\n                    deal.borrower,\\n                    deal.ccy,\\n                    vars.time\\n                );\\n                settlements[i] = vars.status;\\n            }\\n        }\\n\\n        uint256 settlement = _timeShift(deal.start, 2);\\n        payments[0] = settlement;\\n\\n        return (payments, amounts, settlements);\\n    }\\n\\n    /**\\n     * @dev Internal function to verify the settlement of notional exchange\\n     * @param loanId Loan deal id\\n     */\\n    function _verifyNotionalExchange(bytes32 loanId) internal {\\n        if (!Storage.slot().isSettled[loanId]) {\\n            Storage.LoanDeal memory deal = Storage.slot().loans[loanId];\\n            uint256 time = _timeShift(deal.start, 2);\\n            bool status = paymentAggregator().isSettled(deal.lender, deal.borrower, deal.ccy, time);\\n\\n            if (status) {\\n                Storage.slot().isSettled[loanId] = true;\\n                collateralAggregator().releaseCollateral(\\n                    deal.lender,\\n                    deal.borrower,\\n                    deal.ccy,\\n                    (deal.notional * ProtocolTypes.MKTMAKELEVEL) / ProtocolTypes.PCT,\\n                    0,\\n                    false\\n                );\\n                collateralAggregator().settleCollateral(\\n                    deal.lender,\\n                    deal.borrower,\\n                    deal.ccy,\\n                    0,\\n                    deal.notional\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers to return loan product implementation version\\n     * @return implementation version\\n     */\\n    function getVersion() public pure override returns (uint16) {\\n        return VERSION;\\n    }\\n}\\n\",\"keccak256\":\"0x7b23d751411b350d019ed1fdf8bb585b2a6072e04f424c0666b3f6ed20cc0ae2\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/interfaces/ICloseOutNetting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICloseOutNetting {\\n    event AddCloseOutPayments(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event RemoveCloseOutPayments(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event SettleCloseOut(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 netPayment,\\n        bytes32 txHash\\n    );\\n    event VerifyCloseOut(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 netPayment,\\n        bytes32 txHash\\n    );\\n\\n    function addPayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) external;\\n\\n    function checkDefault(address _party) external view returns (bool);\\n\\n    function removePayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6bbe6c9de500443c72cde8832c0ff9c921c6f38ace09523d3a1769f6e855830e\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralAggregatorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICollateralAggregator {\\n    event Register(address indexed addr);\\n    event Release(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    );\\n    event Liquidate(address indexed from, address indexed to, bytes32 ccy, uint256 amount);\\n    event ReleaseUnsettled(address indexed party, bytes32 ccy, uint256 amount);\\n    event SettleCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event UpdatePV(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    );\\n    event UseCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    );\\n    event UseUnsettledCollateral(address indexed party, bytes32 ccy, uint256 amount);\\n\\n    function checkRegisteredUser(address addr) external view returns (bool);\\n\\n    function getCcyExposures(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getCoverage(address _party0, address _party1) external view returns (uint256, uint256);\\n\\n    function getExposedCurrencies(address partyA, address partyB)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getMaxCollateralBookWidthdraw(address _user)\\n        external\\n        view\\n        returns (uint256 maxWithdraw);\\n\\n    function getMaxCollateralWidthdraw(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getNetAndTotalPV(address _party0, address _party1)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getRebalanceCollateralAmounts(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getTotalUnsettledExp(address _user) external view returns (uint256);\\n\\n    function getUnsettledCoverage(address _user) external view returns (uint256 coverage);\\n\\n    function isCovered(\\n        address _party0,\\n        address _party1,\\n        bytes32 _ccy,\\n        uint256 _party0PV,\\n        uint256 _party1PV,\\n        bool _isSettled\\n    ) external view returns (bool, bool);\\n\\n    function isCoveredUnsettled(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) external view returns (bool);\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        uint256 liquidationInETH\\n    ) external;\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        bytes32 ccy,\\n        uint256 liquidationAmount,\\n        uint256 pv,\\n        bool isSettled\\n    ) external;\\n\\n    function register() external;\\n\\n    function register(string[] memory _addresses, uint256[] memory _chainIds) external;\\n\\n    function releaseCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function releaseUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function settleCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external;\\n\\n    function updatePV(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    ) external;\\n\\n    function useCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function useUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function getUnsettledCollateral(address user, bytes32 ccy) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6ce0f77af603bba3166a03eebf4b1679a78491c64cce912331765889583a4369\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICollateralVault {\\n    event Deposit(address user, bytes32 ccy, uint256 amount);\\n    event PositionDeposit(address user, address counterparty, bytes32 ccy, uint256 amount);\\n    event RebalanceBetween(\\n        address user,\\n        address fromCounterparty,\\n        address toCounterparty,\\n        bytes32 ccy,\\n        uint256 amount\\n    );\\n    event RebalanceFrom(address user, address counterparty, bytes32 ccy, uint256 amount);\\n    event RebalanceTo(address user, address counterparty, bytes32 ccy, uint256 amount);\\n    event Withdraw(address from, bytes32 ccy, uint256 amount);\\n    event PositionWithdraw(address from, address counterparty, bytes32 ccy, uint256 amount);\\n    event Liquidate(address from, address to, bytes32 ccy, uint256 amount);\\n    event LiquidateIndependent(address from, address to, bytes32 ccy, uint256 amount);\\n\\n    function deposit(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external;\\n\\n    function deposit(bytes32 _ccy, uint256 _amount) external payable;\\n\\n    function getIndependentCollateral(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getIndependentCollateralInETH(address _user, bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLockedCollateral(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getLockedCollateralInETH(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getLockedCollateral(\\n        address _partyA,\\n        address _partyB,\\n        bytes32 _ccy\\n    ) external view returns (uint256, uint256);\\n\\n    function getLockedCollateralInETH(\\n        address _partyA,\\n        address _partyB,\\n        bytes32 _ccy\\n    ) external view returns (uint256, uint256);\\n\\n    function liquidate(\\n        address _from,\\n        address _to,\\n        uint256 _liquidationTarget\\n    ) external returns (bool);\\n\\n    function rebalanceCollateral(\\n        address _party0,\\n        address _party1,\\n        uint256 _rebalanceTarget,\\n        bool isRebalanceFrom\\n    ) external returns (bool);\\n\\n    function rebalanceBetween(\\n        address _user,\\n        address _fromParty,\\n        address _toParty,\\n        bytes32 _ccy,\\n        uint256 _amountETH\\n    ) external returns (uint256);\\n\\n    function withdraw(bytes32 _ccy, uint256 _amount) external;\\n\\n    function withdrawFrom(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external;\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getUsedCurrencies(address party0, address party1)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getTotalIndependentCollateralInETH(address _party) external view returns (uint256);\\n\\n    function getTotalLockedCollateralInETH(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x05a973a84165750802bf97f2c889467191ae0a99fb50221149f46b9df35bdd6e\",\"license\":\"MIT\"},\"contracts/interfaces/ICrosschainAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICrosschainAddressResolver {\\n    event UpdateAddress(address _user, uint256 _chainId, string _address);\\n\\n    /**\\n     * @dev Trigers to register multiple cross-chain addresses per chainId for user\\n     * @param _user Secured Finance user ETH address\\n     * @param _chainIds Array of chain ID number\\n     * @param _addresses Array of the target blockchain addresses\\n     *\\n     * @notice This function triggers by the Collateral Aggregator while user is registered in a system\\n     *\\n     */\\n    function updateAddresses(\\n        address _user,\\n        uint256[] memory _chainIds,\\n        string[] memory _addresses\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to register cross-chain address per chainId by user\\n     * @param _chainId Chain ID number\\n     * @param _address Target blockchain address\\n     *\\n     */\\n    function updateAddress(uint256 _chainId, string memory _address) external;\\n\\n    /**\\n     * @dev Trigers to register cross-chain address per chainId by user\\n     * @param _user Secured Finance user ETH address\\n     * @param _chainId Chain ID number\\n     * @param _address Target blockchain address\\n     *\\n     */\\n    function updateAddress(\\n        address _user,\\n        uint256 _chainId,\\n        string memory _address\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to get target blockchain address for a specific user.\\n     * @param _user Ethereum address of the Secured Finance user\\n     * @param _user Chain ID number\\n     */\\n    function getUserAddress(address _user, uint256 _chainId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ef89efa2bd508258da18e2ca2699cb07847d75d6df996cde56b8f6d524d7db8\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CcyAdded(bytes32 indexed ccy, string name, uint16 chainId, uint256 haircut);\\n    event CcyCollateralUpdate(bytes32 indexed ccy, bool isCollateral);\\n    event CcySupportUpdate(bytes32 indexed ccy, bool isSupported);\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n    event MinMarginUpdated(bytes32 indexed ccy, uint256 minMargin);\\n    event PriceFeedAdded(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n    event PriceFeedRemoved(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n\\n    function convertBulkToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH) external view returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256);\\n\\n    function getCurrencies(bytes32) external view returns (ProtocolTypes.Currency memory);\\n\\n    function getEthDecimals(bytes32) external view returns (uint8);\\n\\n    function getUsdDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getMinMargin(bytes32 _ccy) external view returns (uint256);\\n\\n    function getChainId(bytes32 _ccy) external view returns (uint16);\\n\\n    function isCollateral(bytes32) external view returns (bool);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        uint16 _chainId,\\n        address _ethPriceFeed,\\n        uint256 _haircut,\\n        address _tokenAddress\\n    ) external;\\n\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function updateCollateralSupport(bytes32 _ccy, bool _isSupported) external;\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported) external;\\n\\n    function updateMinMargin(bytes32 _ccy, uint256 _minMargin) external;\\n\\n    function getTokenAddresses(bytes32) external view returns (address);\\n}\\n\",\"keccak256\":\"0x0bad90929934b6a43200ae276697a9e428d47b119120ea81208778ced9abbe76\",\"license\":\"MIT\"},\"contracts/interfaces/IExternalAdapterTxResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IExternalAdapterTxResponse {\\n    struct FulfillData {\\n        string from;\\n        string to;\\n        uint256 value;\\n        uint256 timestamp;\\n        string txHash;\\n    }\\n}\\n\",\"keccak256\":\"0x2fde36d406ead00758aeccdf58fd8be1b32cf2fd3fd2061824d538bd06d4ab4c\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\nstruct Order {\\n    bytes32 ccy;\\n    uint256 term;\\n    ProtocolTypes.Side side;\\n    uint256 amount;\\n    uint256 rate;\\n}\\n\\ninterface ILendingMarketController {\\n    event LendingMarketCreated(bytes32 ccy, uint256 term, address indexed marketAddr);\\n    event LendingMarketsPaused(bytes32 ccy);\\n    event LendingMarketsUnpaused(bytes32 ccy);\\n\\n    function deployLendingMarket(bytes32 _ccy, uint256 _term) external returns (address market);\\n\\n    function getBorrowRatesForCcy(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getDiscountFactorsForCcy(bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256[] memory, uint256[] memory);\\n\\n    function getLendRatesForCcy(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getMidRatesForCcy(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getLendingMarket(bytes32, uint256) external view returns (address);\\n\\n    function pauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function placeBulkOrders(Order[] memory orders) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function getSupportedTerms(bytes32 _ccy) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x8c2a321d93fb14a1878ffb332e03d8201c4998ecca88b8862347855787ebf49c\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ILiquidations {\\n    event DealAddedToLiquidationQueue(address party0, address party1, bytes32 dealId);\\n    event DealRemovedFromLiquidationQueue(address party0, address party1, bytes32 dealId);\\n    event LiquidationAgentAdded(address indexed liquidationAgent);\\n    event LiquidationAgentRemoved(address indexed liquidationAgent);\\n    event OffsetUpdated(uint256 oldOffset, uint256 newOffset);\\n\\n    function addDealToLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external;\\n\\n    function addLiquidationAgent(address _liquidationAgent) external;\\n\\n    function liquidateDeals(\\n        address party0,\\n        address party1,\\n        bytes32[] memory dealIds\\n    ) external;\\n\\n    function liquidateDeals(address party0, address party1) external;\\n\\n    function getOffset() external view returns (uint256);\\n\\n    function removeDealFromLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external;\\n\\n    function removeLiquidationAgent(address _liquidationAgent) external;\\n\\n    function updateLiquidationOffset(uint256 _offset) external;\\n}\\n\",\"keccak256\":\"0x4e2784b0014ff688a60c4628cc1ebab63ca0aa40aa9949dbde6d53c69dbe3746\",\"license\":\"MIT\"},\"contracts/interfaces/IMarkToMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IMarkToMarket {\\n    function updatePV(bytes32 dealId) external;\\n\\n    function updatePVs(bytes32[] memory dealIds) external;\\n}\\n\",\"keccak256\":\"0xb100f8c173fda11136c5579306d99065752bb797bff6ffe91c64eee228ae2df9\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct Slot {\\n    uint256 totalPayment0;\\n    uint256 totalPayment1;\\n    uint256 netPayment;\\n    bool flipped;\\n    bytes32 paymentProof;\\n    address verificationParty;\\n    bool isSettled;\\n}\\n\\ninterface IPaymentAggregator {\\n    event RegisterPayment(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event VerifyPayment(\\n        address indexed verifier,\\n        address indexed counterparty,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment,\\n        bytes32 settlementId\\n    );\\n    event SettlePayment(\\n        address indexed verifier,\\n        address indexed counterparty,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        bytes32 settlementId\\n    );\\n    event RemovePayment(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n\\n    function registerPayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 dealId,\\n        uint256[] memory timestamps,\\n        uint256[] memory payments0,\\n        uint256[] memory payments1\\n    ) external;\\n\\n    function removePayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 dealId,\\n        uint256[] calldata timestamps,\\n        uint256[] calldata payments0,\\n        uint256[] calldata payments1\\n    ) external;\\n\\n    function verifyPayment(\\n        address verifier,\\n        address counterparty,\\n        bytes32 ccy,\\n        uint256 timestamp,\\n        uint256 payment,\\n        bytes32 settlementId\\n    ) external;\\n\\n    function isSettled(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 timestamp\\n    ) external view returns (bool status);\\n\\n    function getDealsFromSlot(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 slotPosition\\n    ) external view returns (bytes32[] memory);\\n\\n    // function getTimeSlotByDate(\\n    //     address party0,\\n    //     address party1,\\n    //     bytes32 ccy,\\n    //     uint256 year,\\n    //     uint256 month,\\n    //     uint256 day\\n    // ) external view returns (Slot memory timeSlot);\\n\\n    // function getTimeSlotBySlotId(\\n    //     address party0,\\n    //     address party1,\\n    //     bytes32 ccy,\\n    //     bytes32 slot\\n    // ) external view returns (Slot memory timeSlot);\\n\\n    function checkSettlementWindow(uint256 targetTime) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x626f4bb7d28a476b21c2bc18278a091f134fbd98a6e06e586cd63180184518f4\",\"license\":\"MIT\"},\"contracts/interfaces/IProduct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title IProduct is a common interface for various products on secured finance protocol\\n */\\ninterface IProduct {\\n    event Liquidate(bytes32 dealId);\\n    event RequestTermination(bytes32 dealId, address indexed requestedBy);\\n    event RejectTermination(bytes32 dealId, address indexed rejectedBy);\\n    event EarlyTermination(bytes32 dealId, address indexed acceptedBy, uint256 payment);\\n    event MarkToMarket(bytes32 dealId, uint256 prevPV, uint256 currPV);\\n\\n    /**\\n     * Triggered to liquidate existing deal of this product type\\n     * @param dealId Deal unique id in bytes32 word.\\n     */\\n    function liquidate(bytes32 dealId) external;\\n\\n    /**\\n     * Triggered to request early termination of this specific deal\\n     * @param dealId Deal unique id in bytes32 word.\\n     */\\n    function requestTermination(bytes32 dealId) external;\\n\\n    /**\\n     * Triggered to reject previously requested early termination of this deal\\n     * @param dealId Deal unique id in bytes32 word.\\n     */\\n    function rejectTermination(bytes32 dealId) external;\\n\\n    /**\\n     * Triggered to accept previously requested early termination of this deal\\n     * @param dealId Deal unique id in bytes32 word.\\n     */\\n    function acceptTermination(bytes32 dealId) external;\\n\\n    /**\\n     * Triggered to update present value of the deal\\n     * @param dealId Deal unique id in bytes32 word.\\n     */\\n    function markToMarket(bytes32 dealId) external returns (bool);\\n\\n    // /**\\n    //  * Returns the state of the deal by `dealId`\\n    //  * @param dealId Deal unique id in bytes32 word.\\n    //  *\\n    //  * @return State identifier\\n    //  */\\n    // function getDealState(bytes32 dealId) external view returns (uint8);\\n\\n    /**\\n     * Returns the main currency of the deal.\\n     * @param dealId Deal unique id in bytes32 word.\\n     *\\n     * @return Currency short identifier.\\n     */\\n    function getDealCurrency(bytes32 dealId) external view returns (bytes32);\\n\\n    /**\\n     * Returns previously saved present value of the deal.\\n     * @param dealId Deal unique id in bytes32 word.\\n     *\\n     * @return Present value previously saved during mark-to-market.\\n     */\\n    function getDealLastPV(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external view returns (uint256, uint256);\\n\\n    /**\\n     * Triggers to recalculate and return current present value of the deal.\\n     * @param dealId Deal unique id in bytes32 word.\\n     *\\n     * @return Present value at the time of execution.\\n     */\\n    function getDealPV(bytes32 dealId) external view returns (uint256);\\n\\n    /**\\n     * Returns settlement status of the deal by `dealId`\\n     * @param dealId Deal unique id in bytes32 word.\\n     *\\n     * @return Settlement bool identifier\\n     */\\n    function getDealSettlementStatus(bytes32 dealId) external view returns (bool);\\n\\n    /**\\n     * Get the version of the underlying contract.\\n     *\\n     * @return Version number.\\n     */\\n    function getVersion() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xe3e1e96bd23b91285ed54c4630d6caf5190ab7df2b3db2eedd3feb1c436a0726\",\"license\":\"MIT\"},\"contracts/interfaces/IProductAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IProductAddressResolver {\\n    event RegisterProduct(bytes4 prefix, address indexed product, address indexed controller);\\n\\n    /**\\n     * @dev Triggers to register new product type in a address resolver\\n     * @param _prefix Bytes4 prefix for product type\\n     * @param _contract Product contract address\\n     * @param _controller Market controller address\\n     *\\n     * @notice Triggers only be contract owner\\n     * @notice Reverts on saving contract which is not supporting a common interface\\n     */\\n    function registerProduct(\\n        bytes4 _prefix,\\n        address _contract,\\n        address _controller\\n    ) external;\\n\\n    /**\\n     * @dev Triggers to register several product types in a address resolver\\n     * @param _prefixes Array of Bytes4 prefixes for each product type\\n     * @param _contracts Array of smart contract addresses for each product\\n     * @param _controllers Array of market controller addresses\\n     *\\n     * @notice Triggers only be contract owner\\n     * @notice Reverts on saving contract which is not supporting common interface\\n     */\\n    function registerProducts(\\n        bytes4[] calldata _prefixes,\\n        address[] calldata _contracts,\\n        address[] calldata _controllers\\n    ) external;\\n\\n    /**\\n     * @dev Triggers to get product address by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContract(bytes4 _prefix) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to get product addresses\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContracts() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Triggers to get product address by deal id\\n     * @param _dealId Product deal idenfitier\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContractByDealId(bytes32 _dealId) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to get market controller address by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     * @notice To work with the contract this address should be wrapped around IYieldCurve interface\\n     */\\n    function getControllerContract(bytes4 _prefix) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to get market controller address by deal id\\n     * @param _dealId Product deal idenfitier\\n     * @notice To work with the contract this address should be wrapped around IYieldCurve interface\\n     */\\n    function getControllerContractByDealId(bytes32 _dealId) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product is supported by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     */\\n    function isSupportedProduct(bytes4 _prefix) external view returns (bool);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product is supported by deal id.\\n     * @param _dealId Product deal idenfitier\\n     */\\n    function isSupportedProductByDealId(bytes32 _dealId) external view returns (bool);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product contract is registered.\\n     * @param _product Product contract address\\n     */\\n    function isRegisteredProductContract(address _product) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x44855f57913172a86e203a89d7713efe1ec39351a0830b0f35fac9ffa24ec770\",\"license\":\"MIT\"},\"contracts/interfaces/IProductWithOneLeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IProduct.sol\\\";\\n\\n/**\\n * @title IProductWithOneLeg is an extention over IProduct interface for\\n * products with one leg of cashflows\\n */\\ninterface IProductWithOneLeg is IProduct {\\n    struct Schedule {\\n        uint256[] payments;\\n        uint256[] amounts;\\n        bool[] isSettled;\\n    }\\n\\n    event Register(\\n        address indexed lender,\\n        address indexed borrower,\\n        bytes32 ccy,\\n        uint256 term,\\n        uint256 notional,\\n        uint256 rate,\\n        bytes32 indexed dealId\\n    );\\n\\n    event Novation(bytes32 indexed dealId, address currLender);\\n\\n    /**\\n     * Triggered to register new deal for this product type\\n     *\\n     * @param maker Order maker\\n     * @param taker orderTaker\\n     * @param side Order side\\n     * @param ccy Settlement currency\\n     * @param term Deal term\\n     * @param notional Notional amount of funds\\n     * @param rate Annual interest rate\\n     * @return dealId bytes32 string.\\n     */\\n    function register(\\n        address maker,\\n        address taker,\\n        uint8 side,\\n        bytes32 ccy,\\n        uint256 term,\\n        uint256 notional,\\n        uint256 rate\\n    ) external returns (bytes32 dealId);\\n\\n    /**\\n     * Triggered to transfer lending obligations from msg.sender ot newOwner\\n     * @param dealId Deal unique id in bytes32 word.\\n     * @param newOwner ETH address of new product lender\\n     */\\n    function novation(bytes32 dealId, address newOwner) external;\\n\\n    /**\\n     * Returns the payment schedule of the deal\\n     * @param dealId Deal unique id in bytes32 word.\\n     *\\n     * @return Payment schedule payment timestamps, payment amounts and settlement statuses\\n     */\\n    function getPaymentSchedule(bytes32 dealId)\\n        external\\n        view\\n        returns (\\n            uint256[] memory,\\n            uint256[] memory,\\n            bool[] memory\\n        );\\n}\\n\",\"keccak256\":\"0x5c1ec1200991db5720efa0018e158e8b5fac0cee0db59dbe7716b82d1d191548\",\"license\":\"MIT\"},\"contracts/interfaces/ISettlementEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.3. SEE SOURCE BELOW. !!\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IExternalAdapterTxResponse.sol\\\";\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ISettlementEngine {\\n    event CrosschainSettlementRequested(\\n        address payer,\\n        address receiver,\\n        uint16 chainId,\\n        uint256 timestamp,\\n        string txHash,\\n        bytes32 requestId\\n    );\\n    event CrosschainSettlementRequestFulfilled(\\n        string payer,\\n        string receiver,\\n        uint16 chainId,\\n        uint256 amount,\\n        uint256 timestamp,\\n        string txHash,\\n        bytes32 settlementId\\n    );\\n    event ExternalAdapterAdded(address indexed adapter, bytes32 ccy);\\n\\n    function addExternalAdapter(address _adapter, bytes32 _ccy) external;\\n\\n    function getExternalAdapters(bytes32) external view returns (address);\\n\\n    function fulfillSettlementRequest(\\n        bytes32 _requestId,\\n        IExternalAdapterTxResponse.FulfillData calldata _txData,\\n        bytes32 _ccy\\n    ) external;\\n\\n    function getVersion() external view returns (uint16);\\n\\n    function getSettlementRequests(bytes32)\\n        external\\n        view\\n        returns (ProtocolTypes.SettlementRequest memory);\\n\\n    function verifyPayment(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _payment,\\n        uint256 _timestamp,\\n        string calldata _txHash\\n    ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3888a41e40b8eb2cebf8557436b0f09286dfaeb08a3762a33c0a6ae0521f67a3\",\"license\":\"MIT\"},\"contracts/interfaces/ITermStructure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ITermStructure {\\n    event TermAdded(uint256 numDays);\\n    event ProductTermSupportUpdated(\\n        uint256 numDays,\\n        bytes4 product,\\n        bytes32 _ccy,\\n        bool isSupported\\n    );\\n    event TermSupportUpdated(uint256 numDays, bool isSupported);\\n\\n    function getDfFrac(uint256 _numDays) external view returns (uint256);\\n\\n    function getNumDays(uint256 _numDays) external view returns (uint256);\\n\\n    function getNumPayments(uint256 _numDays, uint8 frequency) external view returns (uint256);\\n\\n    function getTerm(uint256 _numDays, uint8 frequency)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getTermSchedule(uint256 _numDays, uint8 frequency)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isSupportedTerm(\\n        uint256 _numDays,\\n        bytes4 _product,\\n        bytes32 _ccy\\n    ) external view returns (bool);\\n\\n    function supportTerm(\\n        uint256 _numDays,\\n        bytes4[] memory _products,\\n        bytes32[] memory _currencies\\n    ) external;\\n\\n    function updateTermSupport(\\n        uint256 _numDays,\\n        bytes4 _product,\\n        bytes32 _ccy,\\n        bool _isSupported\\n    ) external;\\n\\n    function getTermsForProductAndCcy(\\n        bytes4 _product,\\n        bytes32 _ccy,\\n        bool sort\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x8509c4f927878626ee8cb73d0fb2daa0cf0a7c9869bb6241ccc180d0854544f4\",\"license\":\"MIT\"},\"contracts/libraries/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n\\n    function timestampFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            hour *\\n            SECONDS_PER_HOUR +\\n            minute *\\n            SECONDS_PER_MINUTE +\\n            second;\\n    }\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint256 daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isValidDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isLeapYear(uint256 timestamp) internal pure returns (bool leapYear) {\\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n\\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n\\n    function getDaysInMonth(uint256 timestamp) internal pure returns (uint256 daysInMonth) {\\n        (uint256 year, uint256 month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n\\n    function _getDaysInMonth(uint256 year, uint256 month)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        if (\\n            month == 1 ||\\n            month == 3 ||\\n            month == 5 ||\\n            month == 7 ||\\n            month == 8 ||\\n            month == 10 ||\\n            month == 12\\n        ) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint256 timestamp) internal pure returns (uint256 dayOfWeek) {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n\\n    function getMinute(uint256 timestamp) internal pure returns (uint256 minute) {\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    function getSecond(uint256 timestamp) internal pure returns (uint256 second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = ((month - 1) % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = (yearMonth % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _years)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint256 fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint256 toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n\\n    function diffMonths(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _months)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint256 fromYear, uint256 fromMonth, ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint256 toYear, uint256 toMonth, ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n\\n    function diffDays(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _days)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n\\n    function diffHours(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _hours)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n\\n    function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _minutes)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n\\n    function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _seconds)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xe63d0d21b9b0bcdda93e169220d4ea9e5d1817a286f7ff0608f310defce26609\",\"license\":\"MIT\"},\"contracts/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant CLOSE_OUT_NETTING = \\\"CloseOutNetting\\\";\\n    bytes32 internal constant COLLATERAL_AGGREGATOR = \\\"CollateralAggregator\\\";\\n    bytes32 internal constant COLLATERAL_VAULT = \\\"CollateralVault\\\";\\n    bytes32 internal constant CROSSCHAIN_ADDRESS_RESOLVER = \\\"CrosschainAddressResolver\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant LIQUIDATIONS = \\\"Liquidations\\\";\\n    bytes32 internal constant MARK_TO_MARKET = \\\"MarkToMarket\\\";\\n    bytes32 internal constant PAYMENT_AGGREGATOR = \\\"PaymentAggregator\\\";\\n    bytes32 internal constant PRODUCT_ADDRESS_RESOLVER = \\\"ProductAddressResolver\\\";\\n    bytes32 internal constant SETTLEMENT_ENGINE = \\\"SettlementEngine\\\";\\n    bytes32 internal constant TERM_STRUCTURE = \\\"TermStructure\\\";\\n}\\n\",\"keccak256\":\"0x939f50a87aa51db235c78c3c224edc9123271a5b44974e13557e4590958e83df\",\"license\":\"MIT\"},\"contracts/libraries/DealId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary DealId {\\n    /**\\n     * @dev Generates a deal id using a product prefix and deal number\\n     * @param prefix Product type prefix in bytes4\\n     * @param counter Number of deal to be generated\\n     * @return id in bytes32 with prefix on the left and counter on the right side\\n     */\\n    function generate(bytes32 prefix, uint256 counter) public pure returns (bytes32 id) {\\n        uint224 num = toUint224(counter);\\n        bytes4 r;\\n        bytes32 zero = 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000;\\n        assembly {\\n            r := and(prefix, zero)\\n            id := add(r, num)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns product based prefix from deal id\\n     * @param id Deal unique identification string\\n     * @return prefix in bytes4\\n     */\\n    function getPrefix(bytes32 id) public pure returns (bytes4 prefix) {\\n        assembly {\\n            prefix := shl(0, id)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns converted number from uint256 to uint224\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"NUMBER_OVERFLOW\\\");\\n        return uint224(value);\\n    }\\n}\\n\",\"keccak256\":\"0x7efb7c15d7de5dc1876b0b220bcdace27ae26bbd5bd4a39b24d71d3fdfeee9b0\",\"license\":\"MIT\"},\"contracts/libraries/DiscountFactor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary DiscountFactor {\\n    uint256 internal constant BP = 10000; // basis point\\n    uint256 internal constant NON_ANNUAL_TERMS = 3;\\n\\n    function determineDF(\\n        uint256 rate,\\n        uint256 term,\\n        uint256[] memory cache,\\n        uint256 dfSum,\\n        uint256 index\\n    ) internal pure returns (uint256 df) {\\n        if (term < 365) {\\n            df = (BP * BP) / (BP + ((rate * term) / 360));\\n        } else if (term == 365) {\\n            df = (BP * BP) / ((BP + rate));\\n            dfSum = dfSum + df;\\n        } else {\\n            uint256 rateSum = (rate * dfSum) / BP;\\n            if (rateSum > BP) {\\n                df = 0;\\n            } else {\\n                df = (BP * (BP - ((rate * dfSum) / BP))) / (BP + rate);\\n            }\\n            dfSum = dfSum + df;\\n        }\\n\\n        cache[index] = df;\\n\\n        return dfSum;\\n    }\\n\\n    function calculateDFs(uint256[] memory rates, uint256[] memory terms)\\n        public\\n        pure\\n        returns (uint256[] memory, uint256[] memory)\\n    {\\n        require(rates.length == terms.length, \\\"INVALID_PARAMS\\\");\\n\\n        (uint256[] memory bootstrapedRates, uint256[] memory bootstrapedTerms) = bootstrapTerms(\\n            rates,\\n            terms\\n        );\\n\\n        uint256 len = bootstrapedTerms.length;\\n        uint256[] memory dfs = new uint256[](len);\\n        uint256 dfSum;\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            dfSum = determineDF(bootstrapedRates[i], bootstrapedTerms[i], dfs, dfSum, i);\\n        }\\n\\n        return (dfs, bootstrapedTerms);\\n    }\\n\\n    function maxDFs(uint256 maxTerm) internal pure returns (uint256) {\\n        return maxTerm / 365 + NON_ANNUAL_TERMS;\\n    }\\n\\n    struct TermBootstrapingLocalVars {\\n        uint256 extendedTerms;\\n        uint256 delta;\\n        uint256 numItems;\\n        uint256 lastKnownRate;\\n        uint256 nextKnownRate;\\n        uint256 nextKnownTerm;\\n        bool upwards;\\n        uint256 deltaRate;\\n        uint256 step;\\n    }\\n\\n    function bootstrapTerms(uint256[] memory rates, uint256[] memory terms)\\n        public\\n        pure\\n        returns (uint256[] memory, uint256[] memory)\\n    {\\n        uint256 len = maxDFs(terms[terms.length - 1]);\\n\\n        uint256[] memory filledRates = new uint256[](len);\\n        uint256[] memory filledTerms = new uint256[](len);\\n        TermBootstrapingLocalVars memory vars;\\n\\n        for (uint256 i = 0; i < terms.length - 1; i++) {\\n            if (terms[i] < 365) {\\n                filledRates[i] = rates[i];\\n                filledTerms[i] = terms[i];\\n                continue;\\n            }\\n            vars.delta = terms[i + 1] - terms[i];\\n\\n            if (vars.delta <= 365) {\\n                filledRates[i] = rates[i];\\n                filledTerms[i] = terms[i];\\n                continue;\\n            }\\n\\n            vars.numItems = vars.delta / 365;\\n            vars.lastKnownRate = rates[i];\\n\\n            if (vars.extendedTerms == 0) {\\n                filledRates[i] = vars.lastKnownRate;\\n                filledTerms[i] = terms[i];\\n            }\\n            vars.nextKnownRate = rates[i + 1];\\n            vars.nextKnownTerm = terms[i + 1];\\n            vars.upwards = vars.nextKnownRate > vars.lastKnownRate ? true : false;\\n            vars.deltaRate = vars.upwards\\n                ? vars.nextKnownRate - vars.lastKnownRate\\n                : vars.lastKnownRate - vars.nextKnownRate;\\n            vars.step = vars.deltaRate / vars.numItems;\\n\\n            for (uint256 j = 1; j < vars.numItems; j++) {\\n                vars.extendedTerms = vars.extendedTerms + 1;\\n\\n                uint256 newIndex = i + vars.extendedTerms;\\n                uint256 missedRate = vars.upwards\\n                    ? filledRates[newIndex - 1] + vars.step\\n                    : filledRates[newIndex - 1] - vars.step;\\n                uint256 missedTerm = terms[i] + uint256(365) * j;\\n\\n                filledRates[newIndex] = missedRate;\\n                filledTerms[newIndex] = missedTerm;\\n\\n                if (j == vars.numItems - 1) {\\n                    uint256 shifterIndex = newIndex + 1;\\n\\n                    filledRates[shifterIndex] = vars.nextKnownRate;\\n                    filledTerms[shifterIndex] = vars.nextKnownTerm;\\n                }\\n            }\\n        }\\n\\n        return (filledRates, filledTerms);\\n    }\\n\\n    struct DFInterpolationLocalVars {\\n        uint256 timeDelta;\\n        uint256 termSeconds;\\n        uint256 prevTermSeconds;\\n        uint256 left;\\n        uint256 right;\\n        uint256 total;\\n    }\\n\\n    /**\\n     * @dev Triggers to adjust discount factors by interpolating to current loan maturity\\n     * @param discountFactors Discount factors array\\n     * @param terms Array of terms\\n     * @param date Date to calculate discount factors for\\n     *\\n     */\\n    function interpolateDF(\\n        uint256[] memory discountFactors,\\n        uint256[] memory terms,\\n        uint256 date\\n    ) public view returns (uint256) {\\n        DFInterpolationLocalVars memory vars;\\n        vars.timeDelta = date - block.timestamp;\\n\\n        if (vars.timeDelta <= terms[0] * 86400) {\\n            vars.termSeconds = terms[0] * 86400;\\n            vars.left = vars.termSeconds - vars.timeDelta;\\n\\n            return (BP * vars.left + (discountFactors[0] * vars.timeDelta)) / (vars.termSeconds);\\n        } else {\\n            for (uint256 i = 1; i < terms.length; i++) {\\n                vars.termSeconds = terms[i] * 86400;\\n                vars.prevTermSeconds = terms[i - 1] * 86400;\\n\\n                if (vars.prevTermSeconds < vars.timeDelta && vars.timeDelta <= vars.termSeconds) {\\n                    vars.left = vars.timeDelta - vars.prevTermSeconds;\\n\\n                    if (vars.left == 0) {\\n                        return discountFactors[i]; // gas savings only\\n                    }\\n\\n                    vars.right = vars.termSeconds - vars.timeDelta;\\n                    if (vars.right == 0) {\\n                        return discountFactors[i];\\n                    }\\n\\n                    vars.total = vars.termSeconds - vars.prevTermSeconds;\\n\\n                    return\\n                        (discountFactors[i - 1] * vars.right + discountFactors[i] * vars.left) /\\n                        vars.total;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd7bf2f695544b673126107e9374251de4a229008113f1ca4cc72b565390106c1\",\"license\":\"MIT\"},\"contracts/libraries/ProductPrefixes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary ProductPrefixes {\\n    bytes4 internal constant LOAN = 0x21aaa47b;\\n}\\n\",\"keccak256\":\"0x722ed8b3c9faac0507f273043f6f1f3219aa4b374f8a00321ee381bf7b27528b\",\"license\":\"MIT\"},\"contracts/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../libraries/Contracts.sol\\\";\\nimport \\\"../interfaces/IAddressResolver.sol\\\";\\nimport \\\"../interfaces/ICloseOutNetting.sol\\\";\\nimport \\\"../interfaces/ICollateralAggregatorV2.sol\\\";\\nimport \\\"../interfaces/ICollateralVault.sol\\\";\\nimport \\\"../interfaces/ICrosschainAddressResolver.sol\\\";\\nimport \\\"../interfaces/ICurrencyController.sol\\\";\\nimport \\\"../interfaces/IMarkToMarket.sol\\\";\\nimport \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport \\\"../interfaces/ILiquidations.sol\\\";\\nimport \\\"../interfaces/IPaymentAggregator.sol\\\";\\nimport \\\"../interfaces/IProductAddressResolver.sol\\\";\\nimport \\\"../interfaces/ISettlementEngine.sol\\\";\\nimport \\\"../interfaces/ITermStructure.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    IAddressResolver public resolver;\\n\\n    mapping(bytes32 => address) private addressCache;\\n\\n    modifier onlyAcceptedContracts() {\\n        require(isAcceptedContract(msg.sender), \\\"Only Accepted Contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns required contract names in this contract\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @dev Returns contract names that can call this contract.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        require(address(resolver) == address(0), \\\"resolver registered already\\\");\\n        resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function closeOutNetting() internal view returns (ICloseOutNetting) {\\n        return ICloseOutNetting(getAddress(Contracts.CLOSE_OUT_NETTING));\\n    }\\n\\n    function collateralAggregator() internal view returns (ICollateralAggregator) {\\n        return ICollateralAggregator(getAddress(Contracts.COLLATERAL_AGGREGATOR));\\n    }\\n\\n    function collateralVault() internal view returns (ICollateralVault) {\\n        return ICollateralVault(getAddress(Contracts.COLLATERAL_VAULT));\\n    }\\n\\n    function crosschainAddressResolver() internal view returns (ICrosschainAddressResolver) {\\n        return ICrosschainAddressResolver(getAddress(Contracts.CROSSCHAIN_ADDRESS_RESOLVER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function markToMarket() internal view returns (IMarkToMarket) {\\n        return IMarkToMarket(getAddress(Contracts.MARK_TO_MARKET));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function liquidations() internal view returns (ILiquidations) {\\n        return ILiquidations(getAddress(Contracts.LIQUIDATIONS));\\n    }\\n\\n    function paymentAggregator() internal view returns (IPaymentAggregator) {\\n        return IPaymentAggregator(getAddress(Contracts.PAYMENT_AGGREGATOR));\\n    }\\n\\n    function productAddressResolver() internal view returns (IProductAddressResolver) {\\n        return IProductAddressResolver(getAddress(Contracts.PRODUCT_ADDRESS_RESOLVER));\\n    }\\n\\n    function settlementEngine() internal view returns (ISettlementEngine) {\\n        return ISettlementEngine(getAddress(Contracts.SETTLEMENT_ENGINE));\\n    }\\n\\n    function termStructure() internal view returns (ITermStructure) {\\n        return ITermStructure(getAddress(Contracts.TERM_STRUCTURE));\\n    }\\n}\\n\",\"keccak256\":\"0xa11e12f5ac8a1710ad3f16fb7d867e615ed13dd98324eea2f7eb36c00b21c2fb\",\"license\":\"MIT\"},\"contracts/storages/LoanV2Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary LoanV2Storage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.loanV2\\\");\\n\\n    struct LoanDeal {\\n        address lender;\\n        address borrower;\\n        bytes32 ccy;\\n        uint256 term;\\n        uint256 notional;\\n        uint256 rate;\\n        uint256 start;\\n        uint256 end;\\n        uint256 pv;\\n        bytes32 startTxHash;\\n    }\\n\\n    struct Termination {\\n        address terminationAsker;\\n        uint256 terminationDate;\\n    }\\n    struct Storage {\\n        uint8 paymentFrequency;\\n        // Mapping for all storing LoanDeals per loanIDs.\\n        mapping(bytes32 => LoanDeal) loans;\\n        mapping(bytes32 => Termination) terminations;\\n        mapping(bytes32 => bool) isSettled;\\n        bool isTransferable;\\n        uint256 lastLoanId;\\n        mapping(bytes32 => mapping(uint256 => address)) lendingMarkets;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x43e3d16cd9f31d171e5417dc6ec002f54a68412db01804afe7208b17d016099f\",\"license\":\"MIT\"},\"contracts/storages/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary OwnableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.ownable\\\");\\n\\n    struct Storage {\\n        address owner;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ef8bfa06947cdb63d47248ad074ac42a1b1ba828a2c97e42486a5dbb2c03e1d\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant BP = 10000; // basis point\\n    uint256 public constant PCT = 10000; // percentage point in basis\\n    uint256 public constant PENALTYLEVEL = 1000; // 10% settlement failure penalty\\n    uint256 public constant MKTMAKELEVEL = 2000; // 20% for market making\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Loan common types\\n    enum LoanState {\\n        REGISTERED,\\n        WORKING,\\n        DUE,\\n        PAST_DUE,\\n        CLOSED,\\n        TERMINATED\\n    }\\n    enum DFTERM {\\n        _3m,\\n        _6m,\\n        _1y,\\n        _2y,\\n        _3y,\\n        _4y,\\n        _5y\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n\\n    // FXMarket common types\\n    enum CcyPair {\\n        FILETH,\\n        FILUSDC,\\n        ETHUSDC,\\n        BTCUSDC,\\n        BTCETH,\\n        BTCFIL\\n    }\\n    enum FXSide {\\n        BID,\\n        OFFER\\n    }\\n\\n    enum PaymentFrequency {\\n        ANNUAL,\\n        SEMI_ANNUAL,\\n        QUARTERLY,\\n        MONTHLY,\\n        FORWARD\\n    }\\n\\n    struct Currency {\\n        bool isSupported;\\n        string name;\\n        uint16 chainId; // chain id for address conversion\\n    }\\n\\n    struct SettlementRequest {\\n        address payer;\\n        address receiver;\\n        uint16 chainId;\\n        uint256 timestamp;\\n        string txHash;\\n    }\\n}\\n\",\"keccak256\":\"0x6419e0bcd07b8ff86e0ffce1e7f16e9a38a470f0ab2f697af0f5234cb943303f\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../storages/OwnableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return OwnableStorage.slot().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = OwnableStorage.slot().owner;\\n        OwnableStorage.slot().owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1c782b9deaf1f94d2af99826e6e8207f5e71f3fbb6ce18805913a3ca7dda9579\",\"license\":\"MIT\"},\"contracts/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9f02e4ae76f34a28299e4b6a10490ebf99b9c9a8454765bff7977cc4f3d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "$f506ca7a99b3e1b46d3b28bedafd5dc4fc$__63954eab798787878681518110611afb57611afb6138b7565b60200260200101516040518463ffffffff1660e01b8152600401611b2193929190613b98565b60206040518083038186803b158015611b3957600080fd5b505af4158015611b4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7191906139f9565b905080838381518110611b8657611b866138b7565b6020026020010151611b989190613828565b611ba2908961389f565b9750505b80611bb081613958565b915050611a9c565b50611bc561271087613847565b979650505050505050565b6040805180820190915260008082526020820152611bec6123da565b60009283526002016020908152604092839020835180850190945280546001600160a01b0316845260010154908301525090565b6000611c2a6123da565b6000838152600291909101602052604081209150611c466123da565b60008481526001918201602090815260409182902082516101408101845281546001600160a01b039081168083529583015416928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e082015260088201546101008201526009909101546101208201529150331480611cf9575080602001516001600160a01b0316336001600160a01b0316145b611d3c5760405162461bcd60e51b81526020600482015260146024820152731c185c9d1a595cc81b5d5cdd081c995c5d595cdd60621b604482015260640161055e565b611d4583612dda565b611d615760405162461bcd60e51b815260040161055e906139be565b81546001600160a01b0319163390811783556040518481527f959b4fa9d58e01ba2b3065a3ef760cf151bac99ea42a52616573aa6a659cb58f906020015b60405180910390a2505050565b81611db56123da565b6000828152600391909101602052604090205460ff16611e0d5760405162461bcd60e51b81526020600482015260136024820152726c6f616e206973206e6f7420776f726b696e6760681b604482015260640161055e565b6000611e176123da565b6000858152600191909101602052604090209050611e336123da565b6004015460ff16611e7e5760405162461bcd60e51b81526020600482015260156024820152741d1c985b9cd9995c9cc81b9bdd08185b1b1bddd959605a1b604482015260640161055e565b80546001600160a01b0316338114611ece5760405162461bcd60e51b81526020600482015260136024820152723632b73232b91036bab9ba103a3930b9b332b960691b604482015260640161055e565b604080516101408101825283546001600160a01b03908116825260018501541660208201526002840154918101919091526003830154606082015260048301546080820152600583015460a0820152600683015460c0820152600783015460e082015260088301546101008201526009830154610120820152611f529086906132ab565b611f5a612544565b60018084015460028501546008860154604051631ea9242160e21b81526001600160a01b0395861695637aa4908495611fa195899592169391926000929190600401613869565b600060405180830381600087803b158015611fbb57600080fd5b505af1158015611fcf573d6000803e3d6000fd5b505083546001600160a01b0319166001600160a01b0387811691821786556040805161014081018252928352600187015490911660208301526002860154908201526003850154606082015260048501546080820152600585015460a0820152600685015460c0820152600785015460e0820152600885015461010082015260098501546101208201526120669250879150612633565b61206e612544565b6001808401546002850154600886015460405163d810703b60e01b81526001600160a01b039586169563d810703b956120b5958c9592169391926000929190600401613869565b600060405180830381600087803b1580156120cf57600080fd5b505af11580156120e3573d6000803e3d6000fd5b50506040516001600160a01b03871681528792507fa4e3c75bb889b8b7fa7d6d22ecf714eff69c61c6b0dd03b9e0348829031944fa915060200160405180910390a25050505050565b3361213561140e565b6001600160a01b03161461215b5760405162461bcd60e51b815260040161055e90613989565b6001600160a01b0381166121c05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161055e565b6104bf81612cee565b60006121d36123da565b60008381526002919091016020908152604091829020825180840190935280546001600160a01b0316808452600190910154918301919091529091506122545760405162461bcd60e51b81526020600482015260166024820152751b9bc81d195c9b5a5b985d1a5bdb881c995c5d595cdd60521b604482015260640161055e565b600061225e6123da565b60008481526001918201602090815260409182902082516101408101845281546001600160a01b039081168083529583015416928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e082015260088201546101008201526009909101546101208201529150331480612311575080602001516001600160a01b0316336001600160a01b0316145b6123535760405162461bcd60e51b81526020600482015260136024820152721c185c9d1a595cc81b5d5cdd081c995a9958dd606a1b604482015260640161055e565b61235c83612dda565b6123785760405162461bcd60e51b815260040161055e906139be565b6123806123da565b6000848152600291909101602052604080822080546001600160a01b0319168155600101919091555133907fe17a17f350d93a0687a4ce370644e804f5b5c1286121fab38b504b4428e90f2090611d9f9086815260200190565b7f26fc3ea2f2dcc2f8e3e16c399e103e3bca02cc462955645bf1e12e4f5908771590565b60006124086123da565b60008381526001918201602090815260409182902082516101408101845281546001600160a01b03908116825294820154909416918401919091526002810154918301919091526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e083015260088101546101008301526009015461012082015290506124a282826132ab565b6040518281527f49402ac80e80185fec1d9f8b8360275213386717f39afd886549219d1f0c17d39060200160405180910390a16124dd6123da565b600092835260019081016020526040832080546001600160a01b031990811682559181018054909216909155600281018390556003810183905560048101839055600581018390556006810183905560078101839055600881018390556009019190915550565b60006125667321b7b63630ba32b930b620b3b3b932b3b0ba37b960611b613398565b905090565b600060016125776123da565b6005016000828254612589919061389f565b9091555073__$840828ea7a247221c7100f4d3622b584a5$__90506334b362b66321aaa47b60e01b6125b96123da565b600501546040516001600160e01b031960e085901b81168252929092166004830152602482015260440160206040518083038186803b1580156125fb57600080fd5b505af415801561260f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256691906139f9565b600080612641836000612736565b50915091506000825167ffffffffffffffff81111561266257612662613973565b60405190808252806020026020018201604052801561268b578160200160208202803683370190505b5090508360800151816000815181106126a6576126a66138b7565b6020026020010181815250506126ba613267565b6001600160a01b031663393b6e17856000015186602001518760400151898887896040518863ffffffff1660e01b81526004016126fd9796959493929190613bce565b600060405180830381600087803b15801561271757600080fd5b505af115801561272b573d6000803e3d6000fd5b505050505050505050565b60608060606127766040518060c0016040528060008152602001606081526020016000815260200160008152602001600081526020016000151581525090565b61277e613240565b6001600160a01b031663849d7a5087606001516127996123da565b5460405160e084901b6001600160e01b0319168152600481019290925260ff16602482015260440160206040518083038186803b1580156127d957600080fd5b505afa1580156127ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061281191906139f9565b815261281b613240565b6001600160a01b031663b1547add87606001516128366123da565b5460405160e084901b6001600160e01b0319168152600481019290925260ff16602482015260440160006040518083038186803b15801561287657600080fd5b505afa15801561288a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128b29190810190613aa2565b60208201526128bf613240565b6001600160a01b03166302ccf01587606001516040518263ffffffff1660e01b81526004016128f091815260200190565b60206040518083038186803b15801561290857600080fd5b505afa15801561291c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294091906139f9565b6040820181905260a0870151608088015161271092839290916129639190613828565b61296d9190613828565b6129779190613847565b6129819190613847565b6060820152805160009061299690600161389f565b905060008167ffffffffffffffff8111156129b3576129b3613973565b6040519080825280602002602001820160405280156129dc578160200160208202803683370190505b50905060008267ffffffffffffffff8111156129fa576129fa613973565b604051908082528060200260200182016040528015612a23578160200160208202803683370190505b50905060008367ffffffffffffffff811115612a4157612a41613973565b604051908082528060200260200182016040528015612a6a578160200160208202803683370190505b50905060015b85518111612bf8576000612a948c60c00151886020015160018561184b91906139e2565b905080858381518110612aa957612aa96138b7565b60209081029190910101528651821415612af45786606001518c60800151612ad1919061389f565b848381518110612ae357612ae36138b7565b602002602001018181525050612b18565b8660600151848381518110612b0b57612b0b6138b7565b6020026020010181815250505b8a15612be557612b26613267565b6001600160a01b03166375dc0d218d600001518e602001518f604001518b608001516040518563ffffffff1660e01b8152600401612b679493929190613ad7565b60206040518083038186803b158015612b7f57600080fd5b505afa158015612b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb79190613b00565b151560a088018190528351849084908110612bd457612bd46138b7565b911515602092830291909101909101525b5080612bf081613958565b915050612a70565b506000612c0a8b60c00151600261325b565b90508084600081518110612c2057612c206138b7565b6020908102919091010152509196509450925050509250925092565b600254600090610100900460ff1615612c85578160ff166001148015612c615750303b155b612c7d5760405162461bcd60e51b815260040161055e90613c3c565b506000919050565b60025460ff808416911610612cac5760405162461bcd60e51b815260040161055e90613c3c565b506002805460ff191660ff92909216919091179055600190565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc611432565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000546001600160a01b031615612db85760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c72656164790000000000604482015260640161055e565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600080612de68361192b565b90508015612f42576000612df86123da565b6000858152600191909101602052604090209050612e146123da565b6000858152600391909101602052604090205460ff16612e38575060019392505050565b60008160080154600014612e50578160080154612e56565b81600401545b600883018490559050612e67612544565b825460018401546002850154600886015460405163adad5fd160e01b81526001600160a01b039485166004820152928416602484015260448301919091526000606483018190526084830186905260a483015260c482015291169063adad5fd19060e401600060405180830381600087803b158015612ee557600080fd5b505af1158015612ef9573d6000803e3d6000fd5b505060408051888152602081018590529081018690527f7f1e4193cb11b4ae9cf4ae386d650483d5d04df3671d0823ce1612f2bb8f97629250606001905060405180910390a150505b50600192915050565b600081831115612f5a57600080fd5b62015180612f6884846139e2565b612f729190613847565b9392505050565b612f816123da565b6000828152600391909101602052604090205460ff166104bf576000612fa56123da565b600083815260019182016020908152604080832081516101408101835281546001600160a01b0390811682529582015490951692850192909252600280830154918501919091526003820154606085015260048201546080850152600582015460a0850152600682015460c08501819052600783015460e086015260088301546101008601526009909201546101208501529293509091613046919061325b565b90506000613052613267565b6001600160a01b03166375dc0d21846000015185602001518660400151866040518563ffffffff1660e01b815260040161308f9493929190613ad7565b60206040518083038186803b1580156130a757600080fd5b505afa1580156130bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130df9190613b00565b9050801561323a5760016130f16123da565b600086815260039190910160205260409020805460ff191691151591909117905561311a612544565b6001600160a01b0316637aa490848460000151856020015186604001516127106107d0896080015161314c9190613828565b6131569190613847565b6000806040518763ffffffff1660e01b815260040161317a96959493929190613869565b600060405180830381600087803b15801561319457600080fd5b505af11580156131a8573d6000803e3d6000fd5b505050506131b4612544565b8351602085015160408087015160808801519151637d1f2ded60e01b81526001600160a01b03948516600482015292841660248401526044830152600060648301526084820152911690637d1f2ded9060a401600060405180830381600087803b15801561322157600080fd5b505af1158015613235573d6000803e3d6000fd5b505050505b50505050565b60006125666c5465726d53747275637475726560981b613398565b6000612f728383613414565b6000612566702830bcb6b2b73a20b3b3b932b3b0ba37b960791b613398565b6000612566762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b613398565b6000806132b9836000612736565b50915091506000825167ffffffffffffffff8111156132da576132da613973565b604051908082528060200260200182016040528015613303578160200160208202803683370190505b50905061330e6123da565b6000868152600391909101602052604090205460ff1661334d57836080015181600081518110613340576133406138b7565b6020026020010181815250505b613355613267565b6001600160a01b031663b73cdacd856000015186602001518760400151898887896040518863ffffffff1660e01b81526004016126fd9796959493929190613bce565b600081815260016020908152604080832054905170026b4b9b9b4b7339030b2323932b9b99d1607d1b92810192909252603182018490526001600160a01b031690811515906051016040516020818303038152906040529061340d5760405162461bcd60e51b815260040161055e9190613c8a565b5092915050565b60006134236201518083613828565b61342d908461389f565b9050828110156104b057600080fd5b60405180610140016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160008019168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600080191681525090565b6000602082840312156134b957600080fd5b5035919050565b600080604083850312156134d357600080fd5b50508035926020909101359150565b6001600160a01b03811681146104bf57600080fd5b600080600080600080600060e0888a03121561351257600080fd5b873561351d816134e2565b9650602088013561352d816134e2565b9550604088013560ff8116811461354357600080fd5b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b60008060006060848603121561358057600080fd5b833561358b816134e2565b9250602084013561359b816134e2565b929592945050506040919091013590565b6020808252825182820181905260009190848201906040850190845b818110156135e4578351835292840192918401916001016135c8565b50909695505050505050565b600081518084526020808501945080840160005b8381101561362057815187529582019590820190600101613604565b509495945050505050565b60608152600061363e60608301866135f0565b60208382038185015261365182876135f0565b8481036040860152855180825282870193509082019060005b8181101561368857845115158352938301939183019160010161366a565b509098975050505050505050565b600080604083850312156136a957600080fd5b82356136b4816134e2565b915060208301356136c4816134e2565b809150509250929050565b80151581146104bf57600080fd5b6000602082840312156136ef57600080fd5b8135612f72816136cf565b81516001600160a01b031681526101408101602083015161372660208401826001600160a01b03169052565b5060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b60008060006060848603121561379657600080fd5b833592506020840135915060408401356137af816134e2565b809150509250925092565b600080604083850312156137cd57600080fd5b8235915060208301356136c4816134e2565b6000602082840312156137f157600080fd5b8135612f72816134e2565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561384257613842613812565b500290565b60008261386457634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b03968716815294909516602085015260408401929092526060830152608082015290151560a082015260c00190565b600082198211156138b2576138b2613812565b500190565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b818110156138f3576020818501810151868301820152016138d7565b81811115613905576000602083870101525b50601f01601f19169290920160200192915050565b82815260406020820152600061393360408301846138cd565b949350505050565b60006020828403121561394d57600080fd5b8151612f72816134e2565b600060001982141561396c5761396c613812565b5060010190565b634e487b7160e01b600052604160045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600a90820152696661696c6564204d744d60b01b604082015260600190565b6000828210156139f4576139f4613812565b500390565b600060208284031215613a0b57600080fd5b5051919050565b600082601f830112613a2357600080fd5b8151602067ffffffffffffffff80831115613a4057613a40613973565b8260051b604051601f19603f83011681018181108482111715613a6557613a65613973565b604052938452858101830193838101925087851115613a8357600080fd5b83870191505b84821015611bc557815183529183019190830190613a89565b600060208284031215613ab457600080fd5b815167ffffffffffffffff811115613acb57600080fd5b61393384828501613a12565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b600060208284031215613b1257600080fd5b8151612f72816136cf565b600081613b2c57613b2c613812565b506000190190565b60008060408385031215613b4757600080fd5b825167ffffffffffffffff80821115613b5f57600080fd5b613b6b86838701613a12565b93506020850151915080821115613b8157600080fd5b50613b8e85828601613a12565b9150509250929050565b606081526000613bab60608301866135f0565b8281036020840152613bbd81866135f0565b915050826040830152949350505050565b6001600160a01b03888116825287166020820152604081018690526060810185905260e060808201819052600090613c08908301866135f0565b82810360a0840152613c1a81866135f0565b905082810360c0840152613c2e81856135f0565b9a9950505050505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b602081526000612f7260208301846138cd56fea264697066735822122013d3724642881d4e7572816794c15bdd16981c94a892fe538af67c74372c720264736f6c63430008090033",
  "libraries": {
    "DiscountFactor": "0x4Ec63E688480eb91f62D2284B34Ca81cffEF3fF3",
    "DealId": "0xcB999fa6D427dfF9ce21bd43D11942134A95BE13"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptTermination(bytes32)": {
        "details": "Triggers to accept early termination of the loan.",
        "params": {
          "loanId": "Loan deal ID"
        }
      },
      "acceptedContracts()": {
        "details": "Returns contract names that can call this contract."
      },
      "addLendingMarket(bytes32,uint256,address)": {
        "details": "Triggers to link with existing LendingMarket.",
        "params": {
          "_ccy": "LendingMarket main currency",
          "_term": "LendingMarket term",
          "addr": "LendingMarket contract address"
        }
      },
      "getDealCurrency(bytes32)": {
        "details": "Triggers to get main currency the deal by `dealId`.",
        "params": {
          "loanId": "Loan deal ID"
        }
      },
      "getDealLastPV(address,address,bytes32)": {
        "details": "Triggers to get stored present value of loan deal.",
        "params": {
          "loanId": "Loan ID to update PV for"
        }
      },
      "getDealPV(bytes32)": {
        "details": "Triggers to recalculate present value of loan deal.",
        "params": {
          "loanId": "Loan ID to update PV for"
        }
      },
      "getDealSettlementStatus(bytes32)": {
        "details": "Triggers to get settlement status of loan deal.",
        "params": {
          "loanId": "Loan deal ID"
        }
      },
      "getLastSettledPayment(bytes32)": {
        "details": "Returns the timestamp of the last settled payment in payment schedule",
        "params": {
          "loanId": "Loan deal ID"
        }
      },
      "getLoanDeal(bytes32)": {
        "details": "Triggers to get current information about Loan deal.",
        "params": {
          "loanId": "Loan deal ID"
        }
      },
      "getPaymentSchedule(bytes32)": {
        "details": "Returns the payment schedule for a deal by `loanId`",
        "params": {
          "loanId": "Loan deal ID"
        }
      },
      "getTerminationState(bytes32)": {
        "details": "Triggers to get termination state for loan with `loanId`.",
        "params": {
          "loanId": "Loan deal ID"
        }
      },
      "getVersion()": {
        "details": "Triggers to return loan product implementation version",
        "returns": {
          "_0": "implementation version"
        }
      },
      "initialize(address,address)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController"
      },
      "isTransferable()": {
        "details": "Get if loan ownership can be transferred."
      },
      "lastLoanId()": {
        "details": "Get the last loan ID."
      },
      "lendingMarkets(bytes32,uint256)": {
        "details": "Get the lending market address for specific currency and term."
      },
      "markToMarket(bytes32)": {
        "details": "Main function for mark-to-market: updates present value, loan state and liquidates loan deal if collateral coverage <125% for every liquidation msg.sender get rewarded ~5% of loan deal PV.",
        "params": {
          "loanId": "Loan ID to update PV for"
        }
      },
      "novation(bytes32,address)": {
        "details": "Triggers to transfer loan ownership.",
        "params": {
          "loanId": "Loan deal ID",
          "newOwner": "Address of new owner (lender)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "register(address,address,uint8,bytes32,uint256,uint256,uint256)": {
        "details": "Triggered to register new loan deal, also locks borrowers collateral.",
        "params": {
          "ccy": "Loan deal main currency",
          "maker": "LendingMarket order market maker",
          "notional": "Notional amount of funds to lend/borrow",
          "rate": "Loan deal annual interest rate",
          "side": "MarketOrder side",
          "taker": "LendingMarket order market taker",
          "term": "Loan deal term"
        }
      },
      "rejectTermination(bytes32)": {
        "details": "Triggers to reject early termination of the loan.",
        "params": {
          "loanId": "Loan deal ID"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requestTermination(bytes32)": {
        "details": "Triggers to request early termination of the loan.",
        "params": {
          "loanId": "Loan deal ID"
        }
      },
      "requiredContracts()": {
        "details": "Returns required contract names in this contract"
      },
      "setIsTransferable(bool)": {
        "details": "Triggers to change ability to transfer loan ownership by lenders.",
        "params": {
          "isAccepted": "Boolean to"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "LoanV2 contract is used to store Lending deals in Secured Finance protocol. This contract handle the PV updates on lending market rate changes also allowing parties to mutually terminate their lending deals Contract linked to Lending Market contracts, LendingMarketController and Collateral contract.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptTermination(bytes32)": {
        "notice": "Executed only for working loan deal"
      },
      "addLendingMarket(bytes32,uint256,address)": {
        "notice": "Executed only by contract owner"
      },
      "initialize(address,address)": {
        "notice": "Initializes the contract."
      },
      "novation(bytes32,address)": {
        "notice": "Executed only by original lender"
      },
      "register(address,address,uint8,bytes32,uint256,uint256,uint256)": {
        "notice": "Callable only by LendingMarket after matching orders"
      },
      "rejectTermination(bytes32)": {
        "notice": "Executed only for working loan deal"
      },
      "requestTermination(bytes32)": {
        "notice": "Executed only for working loan deal"
      },
      "setIsTransferable(bool)": {
        "notice": "Executed only by contract owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 35871,
        "contract": "contracts/LoanV2.sol:LoanV2",
        "label": "resolver",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAddressResolver)23433"
      },
      {
        "astId": 35875,
        "contract": "contracts/LoanV2.sol:LoanV2",
        "label": "addressCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2990,
        "contract": "contracts/LoanV2.sol:LoanV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 2993,
        "contract": "contracts/LoanV2.sol:LoanV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAddressResolver)23433": {
        "encoding": "inplace",
        "label": "contract IAddressResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}