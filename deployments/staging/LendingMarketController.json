{
  "address": "0xf651467aecD1A7905efb4Cd35502F16880eE0C23",
  "abi": [
    {
      "inputs": [],
      "name": "ContractLocked",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "workingLendOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "workingBorrowOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_depositCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_depositAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateTotalFundsInBaseCurrency",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalWorkingLendOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCollateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalWorkingBorrowOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDebtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrowedAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isEnoughDeposit",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "_orderId",
          "type": "uint48"
        }
      ],
      "name": "cancelOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "cleanUpAllFunds",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "cleanUpFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalActiveOrderCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_openingDate",
          "type": "uint256"
        }
      ],
      "name": "createLendingMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        }
      ],
      "name": "createOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        }
      ],
      "name": "createPreOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        }
      ],
      "name": "depositAndCreateOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        }
      ],
      "name": "depositAndCreatePreOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executeEmergencyTermination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_currencies",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "executeItayoseCalls",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_collateralCcy",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_debtCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_debtMaturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "executeLiquidationCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_redemptionCcy",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_collateralCcy",
          "type": "bytes32"
        }
      ],
      "name": "executeRedemption",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getAutoRollFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getBorrowOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getBorrowUnitPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getCircuitBreakerLimitRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getFutureValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "futureValue",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getFutureValueVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getGenesisDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getGenesisValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "genesisValue",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getLendOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getLendUnitPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getLendingMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getLendingMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getMaturities",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getMidUnitPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getObservationPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getOrderFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_ccys",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getOrders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint48",
              "name": "orderId",
              "type": "uint48"
            },
            {
              "internalType": "bytes32",
              "name": "ccy",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "maturity",
              "type": "uint256"
            },
            {
              "internalType": "enum ProtocolTypes.Side",
              "name": "side",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "unitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILendingMarketController.Order[]",
          "name": "activeOrders",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint48",
              "name": "orderId",
              "type": "uint48"
            },
            {
              "internalType": "bytes32",
              "name": "ccy",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "maturity",
              "type": "uint256"
            },
            {
              "internalType": "enum ProtocolTypes.Side",
              "name": "side",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "unitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILendingMarketController.Order[]",
          "name": "inactiveOrders",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getPresentValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "presentValue",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalPresentValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "totalPresentValue",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalPresentValueInBaseCurrency",
      "outputs": [
        {
          "internalType": "int256",
          "name": "totalPresentValue",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUsedCurrencies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketBasePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_observationPeriod",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_genesisDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_compoundFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_orderFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_autoRollFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_circuitBreakerLimitRange",
          "type": "uint256"
        }
      ],
      "name": "initializeLendingMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "isInitializedLendingMarket",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTerminated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "pauseLendingMarkets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "rotateLendingMarkets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "unpauseLendingMarkets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "unwindPosition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_autoRollFeeRate",
          "type": "uint256"
        }
      ],
      "name": "updateAutoRollFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_limitRange",
          "type": "uint256"
        }
      ],
      "name": "updateCircuitBreakerLimitRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_observationPeriod",
          "type": "uint256"
        }
      ],
      "name": "updateObservationPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_orderFeeRate",
          "type": "uint256"
        }
      ],
      "name": "updateOrderFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe2fadd58c57a0c491178e49737a5f252844e5732aa161853ddb3f9364a9451c3",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x3F7c76aEddBB587dB7A0382023A9494f48F44449",
    "transactionIndex": 49,
    "gasUsed": "4102890",
    "logsBloom": "0x
    "blockHash": "0x615e324fc59ace3b4030ce0fb10464ccac9060b3fb259415886e82da2e0273ee",
    "transactionHash": "0xe2fadd58c57a0c491178e49737a5f252844e5732aa161853ddb3f9364a9451c3",
    "logs": [],
    "blockNumber": 3629334,
    "cumulativeGasUsed": "9367977",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "6f01400ba717e365335694f7dd4a1baf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ContractLocked\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"workingLendOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"workingBorrowOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_depositCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTotalFundsInBaseCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalWorkingLendOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWorkingBorrowOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnoughDeposit\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"_orderId\",\"type\":\"uint48\"}],\"name\":\"cancelOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"cleanUpAllFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"cleanUpFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalActiveOrderCount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_openingDate\",\"type\":\"uint256\"}],\"name\":\"createLendingMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"createPreOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"depositAndCreateOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"depositAndCreatePreOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeEmergencyTermination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_currencies\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"executeItayoseCalls\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_collateralCcy\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_debtCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_debtMaturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"executeLiquidationCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_redemptionCcy\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_collateralCcy\",\"type\":\"bytes32\"}],\"name\":\"executeRedemption\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getAutoRollFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getBorrowOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getBorrowUnitPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getCircuitBreakerLimitRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getFutureValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"futureValue\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getFutureValueVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getGenesisDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getGenesisValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"genesisValue\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getLendOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getLendUnitPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getLendingMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getLendingMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getMaturities\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getMidUnitPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getObservationPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getOrderFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_ccys\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"orderId\",\"type\":\"uint48\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendingMarketController.Order[]\",\"name\":\"activeOrders\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"orderId\",\"type\":\"uint48\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendingMarketController.Order[]\",\"name\":\"inactiveOrders\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPresentValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"presentValue\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalPresentValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"totalPresentValue\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalPresentValueInBaseCurrency\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"totalPresentValue\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUsedCurrencies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketBasePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_observationPeriod\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_genesisDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_compoundFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autoRollFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_circuitBreakerLimitRange\",\"type\":\"uint256\"}],\"name\":\"initializeLendingMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"isInitializedLendingMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTerminated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"pauseLendingMarkets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"rotateLendingMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"unpauseLendingMarkets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"unwindPosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_autoRollFeeRate\",\"type\":\"uint256\"}],\"name\":\"updateAutoRollFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_limitRange\",\"type\":\"uint256\"}],\"name\":\"updateCircuitBreakerLimitRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_observationPeriod\",\"type\":\"uint256\"}],\"name\":\"updateObservationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_orderFeeRate\",\"type\":\"uint256\"}],\"name\":\"updateOrderFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptedContracts()\":{\"details\":\"The contact name listed in this method is also needed to be listed `requiredContracts` method.\"},\"calculateFunds(bytes32,address)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"borrowedAmount\":\"The borrowed amount due to the borrow orders being filled on the order book\",\"claimableAmount\":\"The claimable amount due to the lending orders being filled on the order book\",\"collateralAmount\":\"The actual collateral amount that is calculated by netting using the haircut.\",\"debtAmount\":\"The debt amount due to the borrow orders being filled on the order book\",\"lentAmount\":\"The lent amount due to the lend orders being filled on the order book\",\"workingBorrowOrdersAmount\":\"The working orders amount on the borrow order book\",\"workingLendOrdersAmount\":\"The working orders amount on the lend order book\"}},\"calculateTotalFundsInBaseCurrency(address,bytes32,uint256)\":{\"params\":{\"_depositAmount\":\"Amount to deposit\",\"_depositCcy\":\"Currency name to be used as deposit\",\"_user\":\"User's address\"}},\"cancelOrder(bytes32,uint256,uint48)\":{\"params\":{\"_ccy\":\"Currency name in bytes32 of the selected market\",\"_maturity\":\"The maturity of the selected market\",\"_orderId\":\"Market order id\"}},\"cleanUpAllFunds(address)\":{\"params\":{\"_user\":\"User's address\"}},\"cleanUpFunds(bytes32,address)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"createLendingMarket(bytes32,uint256)\":{\"params\":{\"_ccy\":\"Main currency for new lending market\",\"_openingDate\":\"Timestamp when the lending market opens\"}},\"createOrder(bytes32,uint256,uint8,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of funds the maker wants to borrow/lend\",\"_ccy\":\"Currency name in bytes32 of the selected market\",\"_maturity\":\"The maturity of the selected market\",\"_side\":\"Order position type, Borrow or Lend\",\"_unitPrice\":\"Amount of unit price taker wish to borrow/lend\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}},\"createPreOrder(bytes32,uint256,uint8,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of funds the maker wants to borrow/lend\",\"_ccy\":\"Currency name in bytes32 of the selected market\",\"_maturity\":\"The maturity of the selected market\",\"_side\":\"Order position type, Borrow or Lend\",\"_unitPrice\":\"Amount of unit price taker wish to borrow/lend\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}},\"depositAndCreateOrder(bytes32,uint256,uint8,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of funds the maker wants to borrow/lend\",\"_ccy\":\"Currency name in bytes32 of the selected market\",\"_maturity\":\"The maturity of the selected market\",\"_side\":\"Order position type, Borrow or Lend\",\"_unitPrice\":\"Amount of unit price taker wish to borrow/lend\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}},\"depositAndCreatePreOrder(bytes32,uint256,uint8,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of funds the maker wants to borrow/lend\",\"_ccy\":\"Currency name in bytes32 of the selected market\",\"_maturity\":\"The maturity of the selected market\",\"_side\":\"Order position type, Borrow or Lend\",\"_unitPrice\":\"Amount of unit price taker wish to borrow/lend\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}},\"executeItayoseCalls(bytes32[],uint256)\":{\"params\":{\"_currencies\":\"Currency name list in bytes32\",\"_maturity\":\"The maturity of the selected market\"}},\"executeLiquidationCall(bytes32,bytes32,uint256,address)\":{\"params\":{\"_collateralCcy\":\"Currency name to be used as collateral\",\"_debtCcy\":\"Currency name to be used as debt\",\"_debtMaturity\":\"The market maturity of the debt\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}},\"executeRedemption(bytes32,bytes32)\":{\"params\":{\"_collateralCcy\":\"Currency name of collateral\",\"_redemptionCcy\":\"Currency name of positions to be redeemed\"}},\"getAutoRollFeeRate(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The auto-roll fee rate received by protocol\"}},\"getBorrowOrderBook(bytes32,uint256,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_limit\":\"The limit number to get\",\"_maturity\":\"The maturity of the market\"},\"returns\":{\"amounts\":\"The array of borrow order amounts\",\"quantities\":\"The array of borrow order quantities\",\"unitPrices\":\"The array of borrow unit prices\"}},\"getBorrowUnitPrices(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"Array with the borrowing prices per future value of the lending market\"}},\"getCircuitBreakerLimitRange(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The auto-roll fee rate received by protocol\"}},\"getFutureValue(bytes32,uint256,address)\":{\"params\":{\"_ccy\":\"Currency name in bytes32 for Lending Market\",\"_maturity\":\"The maturity of the market\",\"_user\":\"User's address\"},\"returns\":{\"futureValue\":\"The future value\"}},\"getFutureValueVault(bytes32,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_maturity\":\"The maturity of the market\"},\"returns\":{\"_0\":\"The lending market address\"}},\"getGenesisDate(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The genesis date\"}},\"getGenesisValue(bytes32,address)\":{\"params\":{\"_ccy\":\"Currency name in bytes32 for Lending Market\",\"_user\":\"User's address\"},\"returns\":{\"genesisValue\":\"The genesis value\"}},\"getLendOrderBook(bytes32,uint256,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_limit\":\"The limit number to get\",\"_maturity\":\"The maturity of the market\"},\"returns\":{\"amounts\":\"The array of lend order amounts\",\"quantities\":\"The array of lend order quantities\",\"unitPrices\":\"The array of borrow unit prices\"}},\"getLendUnitPrices(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"Array with the lending prices per future value of the lending market\"}},\"getLendingMarket(bytes32,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_maturity\":\"The maturity of the market\"},\"returns\":{\"_0\":\"The lending market address\"}},\"getLendingMarkets(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"Array with the lending market address\"}},\"getMaturities(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"Array with the lending market maturity\"}},\"getMidUnitPrices(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"Array with the mid prices per future value of the lending market\"}},\"getObservationPeriod()\":{\"returns\":{\"_0\":\"The observation period to calculate the volume-weighted average price of transactions\"}},\"getOrderFeeRate(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The order fee rate received by protocol\"}},\"getOrders(bytes32[],address)\":{\"params\":{\"_ccys\":\"Currency name list in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"activeOrders\":\"The array of active orders in the order book\",\"inactiveOrders\":\"The array of inactive orders\"}},\"getPresentValue(bytes32,uint256,address)\":{\"params\":{\"_ccy\":\"Currency name in bytes32 for Lending Market\",\"_maturity\":\"The maturity of the market\",\"_user\":\"User's address\"},\"returns\":{\"presentValue\":\"The present value\"}},\"getTotalPresentValue(bytes32,address)\":{\"params\":{\"_ccy\":\"Currency name in bytes32 for Lending Market\",\"_user\":\"User's address\"},\"returns\":{\"totalPresentValue\":\"The total present value\"}},\"getTotalPresentValueInBaseCurrency(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"totalPresentValue\":\"The total present value in base currency\"}},\"getUsedCurrencies(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The array of the currency\"}},\"initialize(address,address,uint256,uint256)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController.\",\"params\":{\"_marketBasePeriod\":\"The base period for market maturity\",\"_observationPeriod\":\"The observation period to calculate the volume-weighted average price of transactions\",\"_owner\":\"The address of the contract owner\",\"_resolver\":\"The address of the Address Resolver contract\"}},\"initializeLendingMarket(bytes32,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_autoRollFeeRate\":\"The auto roll fee rate received by protocol\",\"_ccy\":\"Currency name in bytes32\",\"_circuitBreakerLimitRange\":\"The circuit breaker limit range\",\"_compoundFactor\":\"The initial compound factor when the initial market is opened\",\"_genesisDate\":\"The genesis date when the initial market is opened\",\"_orderFeeRate\":\"The order fee rate received by protocol\"}},\"isInitializedLendingMarket(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The boolean if the lending market is initialized or not\"}},\"isTerminated()\":{\"returns\":{\"_0\":\"The boolean if the protocol has not been terminated\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseLendingMarkets(bytes32)\":{\"params\":{\"_ccy\":\"Currency for pausing all lending markets\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requiredContracts()\":{\"details\":\"The contract name list is in `./libraries/Contracts.sol`.\"},\"rotateLendingMarkets(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32 of the selected market\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpauseLendingMarkets(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}},\"unwindPosition(bytes32,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32 of the selected market\",\"_maturity\":\"The maturity of the selected market\"}},\"updateAutoRollFeeRate(bytes32,uint256)\":{\"params\":{\"_autoRollFeeRate\":\"The order fee rate received by protocol\",\"_ccy\":\"Currency name in bytes32\"}},\"updateCircuitBreakerLimitRange(bytes32,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_limitRange\":\"The circuit breaker limit range\"}},\"updateObservationPeriod(uint256)\":{\"params\":{\"_observationPeriod\":\"The observation period to calculate the volume-weighted average price of transactions\"}},\"updateOrderFeeRate(bytes32,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_orderFeeRate\":\"The order fee rate received by protocol\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptedContracts()\":{\"notice\":\"Returns contract names that can call this contract.\"},\"calculateFunds(bytes32,address)\":{\"notice\":\"Gets the funds that are calculated from the user's lending and borrowing order list for the selected currency.\"},\"calculateTotalFundsInBaseCurrency(address,bytes32,uint256)\":{\"notice\":\"Gets the funds that are calculated from the user's lending and borrowing order list for all currencies in base currency.\"},\"cancelOrder(bytes32,uint256,uint48)\":{\"notice\":\"Cancels the own order.\"},\"cleanUpAllFunds(address)\":{\"notice\":\"Clean up all funds of the user\"},\"cleanUpFunds(bytes32,address)\":{\"notice\":\"Clean up user funds used for lazy evaluation by the following actions: - Removes order IDs that is already filled on the order book. - Convert Future values that have already been auto-rolled to Genesis values.\"},\"createLendingMarket(bytes32,uint256)\":{\"notice\":\"Deploys new Lending Market and save address at lendingMarkets mapping.Reverts on deployment market with existing currency and term\"},\"createOrder(bytes32,uint256,uint8,uint256,uint256)\":{\"notice\":\"Creates an order. Takes orders if the orders are matched, and places new order if not match it. In addition, converts the future value to the genesis value if there is future value in past maturity before the execution of order creation.\"},\"createPreOrder(bytes32,uint256,uint8,uint256,uint256)\":{\"notice\":\"Creates a pre-order. A pre-order will only be accepted from 168 hours (7 days) to 1 hour before the market opens (Pre-order period). At the end of this period, Itayose will be executed.\"},\"depositAndCreateOrder(bytes32,uint256,uint8,uint256,uint256)\":{\"notice\":\"Deposits funds and creates an order at the same time.\"},\"depositAndCreatePreOrder(bytes32,uint256,uint8,uint256,uint256)\":{\"notice\":\"Deposits funds and creates a pre-order at the same time.\"},\"executeEmergencyTermination()\":{\"notice\":\"Executes an emergency termination to stop the protocol. Once this function is executed, the protocol cannot be run again. Also, users will only be able to redeem and withdraw.\"},\"executeItayoseCalls(bytes32[],uint256)\":{\"notice\":\"Executes Itayose calls per selected currencies.\"},\"executeLiquidationCall(bytes32,bytes32,uint256,address)\":{\"notice\":\"Liquidates a lending or borrowing position if the user's coverage is hight.\"},\"executeRedemption(bytes32,bytes32)\":{\"notice\":\"Redeems all lending and borrowing positions. This function uses the present value as of the termination date.\"},\"getAutoRollFeeRate(bytes32)\":{\"notice\":\"Gets the auto-roll fee rate\"},\"getBorrowOrderBook(bytes32,uint256,uint256)\":{\"notice\":\"Gets the order book of borrow.\"},\"getBorrowUnitPrices(bytes32)\":{\"notice\":\"Gets borrow prices per future value for the selected currency.\"},\"getCircuitBreakerLimitRange(bytes32)\":{\"notice\":\"Gets the limit range in unit price for the circuit breaker\"},\"getFutureValue(bytes32,uint256,address)\":{\"notice\":\"Gets the future value of the account for selected currency and maturity.\"},\"getFutureValueVault(bytes32,uint256)\":{\"notice\":\"Gets the feture value contract address for the selected currency and maturity.\"},\"getGenesisDate(bytes32)\":{\"notice\":\"Gets the genesis date when the first market opens for the selected currency.\"},\"getGenesisValue(bytes32,address)\":{\"notice\":\"Gets the genesis value of the account.\"},\"getLendOrderBook(bytes32,uint256,uint256)\":{\"notice\":\"Gets the order book of lend.\"},\"getLendUnitPrices(bytes32)\":{\"notice\":\"Gets lend prices per future value for the selected currency.\"},\"getLendingMarket(bytes32,uint256)\":{\"notice\":\"Gets the lending market contract address for the selected currency and maturity.\"},\"getLendingMarkets(bytes32)\":{\"notice\":\"Gets the lending market contract addresses for the selected currency.\"},\"getMaturities(bytes32)\":{\"notice\":\"Gets maturities for the selected currency.\"},\"getMidUnitPrices(bytes32)\":{\"notice\":\"Gets mid prices per future value for the selected currency.\"},\"getObservationPeriod()\":{\"notice\":\"Gets the observation period\"},\"getOrderFeeRate(bytes32)\":{\"notice\":\"Gets the order fee rate\"},\"getOrders(bytes32[],address)\":{\"notice\":\"Gets user's active and inactive orders in the order book\"},\"getPresentValue(bytes32,uint256,address)\":{\"notice\":\"Gets the present value of the account for selected currency and maturity.\"},\"getTotalPresentValue(bytes32,address)\":{\"notice\":\"Gets the total present value of the account for selected currency.\"},\"getTotalPresentValueInBaseCurrency(address)\":{\"notice\":\"Gets the total present value of the account converted to base currency.\"},\"getUsedCurrencies(address)\":{\"notice\":\"Get all the currencies in which the user has lending positions or orders.\"},\"initialize(address,address,uint256,uint256)\":{\"notice\":\"Initializes the contract.\"},\"initializeLendingMarket(bytes32,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Initialize the lending market to set a genesis date and compound factor\"},\"isInitializedLendingMarket(bytes32)\":{\"notice\":\"Gets if the lending market is initialized.\"},\"isTerminated()\":{\"notice\":\"Gets if the protocol has not been terminated.\"},\"pauseLendingMarkets(bytes32)\":{\"notice\":\"Pauses previously deployed lending market by currency\"},\"requiredContracts()\":{\"notice\":\"Returns the contract names used in this contract.\"},\"rotateLendingMarkets(bytes32)\":{\"notice\":\"Rotates the lending markets. In this rotation, the following actions are happened. - Updates the maturity at the beginning of the market array. - Moves the beginning of the market array to the end of it (Market rotation). - Update the compound factor in this contract using the next market unit price. (Auto-rolls) - Convert the future value held by reserve funds into the genesis value\"},\"unpauseLendingMarkets(bytes32)\":{\"notice\":\"Unpauses previously deployed lending market by currency\"},\"unwindPosition(bytes32,uint256)\":{\"notice\":\"Unwinds user's lending or borrowing positions by creating an opposite position order.\"},\"updateAutoRollFeeRate(bytes32,uint256)\":{\"notice\":\"Updates the auto-roll fee rate\"},\"updateCircuitBreakerLimitRange(bytes32,uint256)\":{\"notice\":\"Updates the auto-roll fee rate\"},\"updateObservationPeriod(uint256)\":{\"notice\":\"Updates the observation period\"},\"updateOrderFeeRate(bytes32,uint256)\":{\"notice\":\"Updates the order fee rate\"}},\"notice\":\"Implements the module to manage separated lending order-book markets per maturity. This contract also works as a factory contract that can deploy\\u00a0(start)\\u00a0a new lending market for selected currency and maturity and has the calculation logic for the Genesis value in addition. Deployed Lending Markets are rotated and reused as it reaches the maturity date. At the time of rotation, a new maturity date is set and the compound factor is updated. The users mainly call this contract to create orders to lend or borrow funds.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/LendingMarketController.sol\":\"LendingMarketController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dependencies/chainlink/contracts/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Chainlink Contracts v0.4.0 (v0.8/interfaces/AggregatorV3Interface.sol)\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x81b0c18c07c8c031d5b34e4e41d2451b836355aad1b3c04c26578c92f73585f9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) ||\\n                (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(\\n            !_initializing && _initialized < version,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x47b358037bd02d2d68ae2f5685cf1f30af9d60de496258849b69a751a2ffdcde\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x21dc48f54af2ac9288ae3be6feb098ce4389a9392e52aa7056fab5f8b5a5e232\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(\\n            value >= type(int248).min && value <= type(int248).max,\\n            \\\"SafeCast: value doesn't fit in 248 bits\\\"\\n        );\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(\\n            value >= type(int240).min && value <= type(int240).max,\\n            \\\"SafeCast: value doesn't fit in 240 bits\\\"\\n        );\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(\\n            value >= type(int232).min && value <= type(int232).max,\\n            \\\"SafeCast: value doesn't fit in 232 bits\\\"\\n        );\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(\\n            value >= type(int224).min && value <= type(int224).max,\\n            \\\"SafeCast: value doesn't fit in 224 bits\\\"\\n        );\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(\\n            value >= type(int216).min && value <= type(int216).max,\\n            \\\"SafeCast: value doesn't fit in 216 bits\\\"\\n        );\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(\\n            value >= type(int208).min && value <= type(int208).max,\\n            \\\"SafeCast: value doesn't fit in 208 bits\\\"\\n        );\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(\\n            value >= type(int200).min && value <= type(int200).max,\\n            \\\"SafeCast: value doesn't fit in 200 bits\\\"\\n        );\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(\\n            value >= type(int192).min && value <= type(int192).max,\\n            \\\"SafeCast: value doesn't fit in 192 bits\\\"\\n        );\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(\\n            value >= type(int184).min && value <= type(int184).max,\\n            \\\"SafeCast: value doesn't fit in 184 bits\\\"\\n        );\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(\\n            value >= type(int176).min && value <= type(int176).max,\\n            \\\"SafeCast: value doesn't fit in 176 bits\\\"\\n        );\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(\\n            value >= type(int168).min && value <= type(int168).max,\\n            \\\"SafeCast: value doesn't fit in 168 bits\\\"\\n        );\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(\\n            value >= type(int160).min && value <= type(int160).max,\\n            \\\"SafeCast: value doesn't fit in 160 bits\\\"\\n        );\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(\\n            value >= type(int152).min && value <= type(int152).max,\\n            \\\"SafeCast: value doesn't fit in 152 bits\\\"\\n        );\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(\\n            value >= type(int144).min && value <= type(int144).max,\\n            \\\"SafeCast: value doesn't fit in 144 bits\\\"\\n        );\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(\\n            value >= type(int136).min && value <= type(int136).max,\\n            \\\"SafeCast: value doesn't fit in 136 bits\\\"\\n        );\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(\\n            value >= type(int128).min && value <= type(int128).max,\\n            \\\"SafeCast: value doesn't fit in 128 bits\\\"\\n        );\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(\\n            value >= type(int120).min && value <= type(int120).max,\\n            \\\"SafeCast: value doesn't fit in 120 bits\\\"\\n        );\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(\\n            value >= type(int112).min && value <= type(int112).max,\\n            \\\"SafeCast: value doesn't fit in 112 bits\\\"\\n        );\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(\\n            value >= type(int104).min && value <= type(int104).max,\\n            \\\"SafeCast: value doesn't fit in 104 bits\\\"\\n        );\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(\\n            value >= type(int96).min && value <= type(int96).max,\\n            \\\"SafeCast: value doesn't fit in 96 bits\\\"\\n        );\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(\\n            value >= type(int88).min && value <= type(int88).max,\\n            \\\"SafeCast: value doesn't fit in 88 bits\\\"\\n        );\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(\\n            value >= type(int80).min && value <= type(int80).max,\\n            \\\"SafeCast: value doesn't fit in 80 bits\\\"\\n        );\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(\\n            value >= type(int72).min && value <= type(int72).max,\\n            \\\"SafeCast: value doesn't fit in 72 bits\\\"\\n        );\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(\\n            value >= type(int64).min && value <= type(int64).max,\\n            \\\"SafeCast: value doesn't fit in 64 bits\\\"\\n        );\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(\\n            value >= type(int56).min && value <= type(int56).max,\\n            \\\"SafeCast: value doesn't fit in 56 bits\\\"\\n        );\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(\\n            value >= type(int48).min && value <= type(int48).max,\\n            \\\"SafeCast: value doesn't fit in 48 bits\\\"\\n        );\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(\\n            value >= type(int40).min && value <= type(int40).max,\\n            \\\"SafeCast: value doesn't fit in 40 bits\\\"\\n        );\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(\\n            value >= type(int32).min && value <= type(int32).max,\\n            \\\"SafeCast: value doesn't fit in 32 bits\\\"\\n        );\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(\\n            value >= type(int24).min && value <= type(int24).max,\\n            \\\"SafeCast: value doesn't fit in 24 bits\\\"\\n        );\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(\\n            value >= type(int16).min && value <= type(int16).max,\\n            \\\"SafeCast: value doesn't fit in 16 bits\\\"\\n        );\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(\\n            value >= type(int8).min && value <= type(int8).max,\\n            \\\"SafeCast: value doesn't fit in 8 bits\\\"\\n        );\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xb26db2e7d4c8d73ceda86a482ab8b3302b6a5f222f4a333361ca9b57a209fc0c\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/liquidators/interfaces/ILiquidationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ILiquidationReceiver {\\n    event OperationExecuteForCollateral(\\n        address liquidator,\\n        address user,\\n        bytes32 ccy,\\n        uint256 receivedAmount\\n    );\\n    event OperationExecuteForDebt(\\n        address liquidator,\\n        address user,\\n        bytes32 collateralCcy,\\n        uint256 receivedCollateralAmount,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        uint256 receivedDebtAmount\\n    );\\n\\n    function executeOperationForCollateral(\\n        address liquidator,\\n        address user,\\n        bytes32 ccy,\\n        uint256 receivedAmount\\n    ) external returns (bool);\\n\\n    function executeOperationForDebt(\\n        address liquidator,\\n        address user,\\n        bytes32 collateralCcy,\\n        uint256 receivedCollateralAmount,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        uint256 receivedDebtAmount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x86cc27e719ebaec04154b93efa641ac0423ea0bdac449295132bd4bea9ff2e29\",\"license\":\"MIT\"},\"contracts/protocol/LendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ReentrancyGuard} from \\\"../dependencies/openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {EnumerableSet} from \\\"../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n// interfaces\\nimport {ILendingMarketController} from \\\"./interfaces/ILendingMarketController.sol\\\";\\nimport {ILendingMarket} from \\\"./interfaces/ILendingMarket.sol\\\";\\n// libraries\\nimport {Contracts} from \\\"./libraries/Contracts.sol\\\";\\nimport {FundManagementLogic} from \\\"./libraries/logics/FundManagementLogic.sol\\\";\\nimport {LendingMarketOperationLogic} from \\\"./libraries/logics/LendingMarketOperationLogic.sol\\\";\\nimport {LendingMarketUserLogic} from \\\"./libraries/logics/LendingMarketUserLogic.sol\\\";\\n// mixins\\nimport {MixinAddressResolver} from \\\"./mixins/MixinAddressResolver.sol\\\";\\nimport {MixinLendingMarketConfiguration} from \\\"./mixins/MixinLendingMarketConfiguration.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"./types/ProtocolTypes.sol\\\";\\n// utils\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\nimport {LockAndMsgSender} from \\\"./utils/LockAndMsgSender.sol\\\";\\n// storages\\nimport {LendingMarketControllerStorage as Storage} from \\\"./storages/LendingMarketControllerStorage.sol\\\";\\n\\n/**\\n * @notice Implements the module to manage separated lending order-book markets per maturity.\\n *\\n * This contract also works as a factory contract that can deploy\\u00a0(start)\\u00a0a new lending market\\n * for selected currency and maturity and has the calculation logic for the Genesis value in addition.\\n *\\n * Deployed Lending Markets are rotated and reused as it reaches the maturity date. At the time of rotation,\\n * a new maturity date is set and the compound factor is updated.\\n *\\n * The users mainly call this contract to create orders to lend or borrow funds.\\n */\\ncontract LendingMarketController is\\n    ILendingMarketController,\\n    MixinLendingMarketConfiguration,\\n    MixinAddressResolver,\\n    ReentrancyGuard,\\n    Proxyable,\\n    LockAndMsgSender\\n{\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    /**\\n     * @notice Modifier to check if the currency has a lending market.\\n     * @param _ccy Currency name in bytes32\\n     */\\n    modifier hasLendingMarket(bytes32 _ccy) {\\n        require(\\n            Storage.slot().lendingMarkets[_ccy].length > 0,\\n            \\\"No lending markets exist for a specific currency\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to check if there is a market in the maturity.\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity of the market\\n     */\\n    modifier ifValidMaturity(bytes32 _ccy, uint256 _maturity) {\\n        require(\\n            Storage.slot().maturityLendingMarkets[_ccy][_maturity] != address(0),\\n            \\\"Invalid maturity\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to check if the protocol is active.\\n     */\\n    modifier ifActive() {\\n        require(!isTerminated(), \\\"Already terminated\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to check if the protocol is inactive.\\n     */\\n    modifier ifInactive() {\\n        require(isTerminated(), \\\"Not terminated\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\\n     * @param _owner The address of the contract owner\\n     * @param _resolver The address of the Address Resolver contract\\n     * @param _marketBasePeriod The base period for market maturity\\n     * @param _observationPeriod The observation period to calculate the volume-weighted average price of transactions\\n     */\\n    function initialize(\\n        address _owner,\\n        address _resolver,\\n        uint256 _marketBasePeriod,\\n        uint256 _observationPeriod\\n    ) public initializer onlyProxy {\\n        Storage.slot().marketBasePeriod = _marketBasePeriod;\\n        MixinLendingMarketConfiguration._initialize(_owner, _observationPeriod);\\n        registerAddressResolver(_resolver);\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function afterBuildCache() internal override {\\n        Storage.slot().baseCurrency = currencyController().getBaseCurrency();\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](5);\\n        contracts[0] = Contracts.BEACON_PROXY_CONTROLLER;\\n        contracts[1] = Contracts.CURRENCY_CONTROLLER;\\n        contracts[2] = Contracts.GENESIS_VALUE_VAULT;\\n        contracts[3] = Contracts.RESERVE_FUND;\\n        contracts[4] = Contracts.TOKEN_VAULT;\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](1);\\n        contracts[0] = Contracts.TOKEN_VAULT;\\n    }\\n\\n    /**\\n     * @notice Gets if the protocol has not been terminated.\\n     * @return The boolean if the protocol has not been terminated\\n     */\\n    function isTerminated() public view returns (bool) {\\n        return Storage.slot().marketTerminationDate > 0;\\n    }\\n\\n    /**\\n     * @notice Gets the genesis date when the first market opens for the selected currency.\\n     * @param _ccy Currency name in bytes32\\n     * @return The genesis date\\n     */\\n    function getGenesisDate(bytes32 _ccy) external view override returns (uint256) {\\n        return Storage.slot().genesisDates[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the lending market contract addresses for the selected currency.\\n     * @param _ccy Currency name in bytes32\\n     * @return Array with the lending market address\\n     */\\n    function getLendingMarkets(bytes32 _ccy) external view override returns (address[] memory) {\\n        return Storage.slot().lendingMarkets[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the lending market contract address for the selected currency and maturity.\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity of the market\\n     * @return The lending market address\\n     */\\n    function getLendingMarket(bytes32 _ccy, uint256 _maturity)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return Storage.slot().maturityLendingMarkets[_ccy][_maturity];\\n    }\\n\\n    /**\\n     * @notice Gets the feture value contract address for the selected currency and maturity.\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity of the market\\n     * @return The lending market address\\n     */\\n    function getFutureValueVault(bytes32 _ccy, uint256 _maturity)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        return\\n            Storage.slot().futureValueVaults[_ccy][\\n                Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n            ];\\n    }\\n\\n    /**\\n     * @notice Gets borrow prices per future value for the selected currency.\\n     * @param _ccy Currency name in bytes32\\n     * @return Array with the borrowing prices per future value of the lending market\\n     */\\n    function getBorrowUnitPrices(bytes32 _ccy) external view override returns (uint256[] memory) {\\n        uint256[] memory unitPrices = new uint256[](Storage.slot().lendingMarkets[_ccy].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\\n            ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy][i]);\\n            unitPrices[i] = market.getBorrowUnitPrice();\\n        }\\n\\n        return unitPrices;\\n    }\\n\\n    /**\\n     * @notice Gets lend prices per future value for the selected currency.\\n     * @param _ccy Currency name in bytes32\\n     * @return Array with the lending prices per future value of the lending market\\n     */\\n    function getLendUnitPrices(bytes32 _ccy) external view override returns (uint256[] memory) {\\n        uint256[] memory unitPrices = new uint256[](Storage.slot().lendingMarkets[_ccy].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\\n            ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy][i]);\\n            unitPrices[i] = market.getLendUnitPrice();\\n        }\\n\\n        return unitPrices;\\n    }\\n\\n    /**\\n     * @notice Gets mid prices per future value for the selected currency.\\n     * @param _ccy Currency name in bytes32\\n     * @return Array with the mid prices per future value of the lending market\\n     */\\n    function getMidUnitPrices(bytes32 _ccy) external view override returns (uint256[] memory) {\\n        uint256[] memory unitPrices = new uint256[](Storage.slot().lendingMarkets[_ccy].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\\n            ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy][i]);\\n            unitPrices[i] = market.getMidUnitPrice();\\n        }\\n\\n        return unitPrices;\\n    }\\n\\n    /**\\n     * @notice Gets the order book of borrow.\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity of the market\\n     * @param _limit The limit number to get\\n     * @return unitPrices The array of borrow unit prices\\n     * @return amounts The array of borrow order amounts\\n     * @return quantities The array of borrow order quantities\\n     */\\n    function getBorrowOrderBook(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _limit\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        address market = Storage.slot().maturityLendingMarkets[_ccy][_maturity];\\n        return ILendingMarket(market).getBorrowOrderBook(_limit);\\n    }\\n\\n    /**\\n     * @notice Gets the order book of lend.\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity of the market\\n     * @param _limit The limit number to get\\n     * @return unitPrices The array of borrow unit prices\\n     * @return amounts The array of lend order amounts\\n     * @return quantities The array of lend order quantities\\n     */\\n    function getLendOrderBook(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _limit\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        address market = Storage.slot().maturityLendingMarkets[_ccy][_maturity];\\n        return ILendingMarket(market).getLendOrderBook(_limit);\\n    }\\n\\n    /**\\n     * @notice Gets maturities for the selected currency.\\n     * @param _ccy Currency name in bytes32\\n     * @return Array with the lending market maturity\\n     */\\n    function getMaturities(bytes32 _ccy) public view override returns (uint256[] memory) {\\n        uint256[] memory maturities = new uint256[](Storage.slot().lendingMarkets[_ccy].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\\n            ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy][i]);\\n            maturities[i] = market.getMaturity();\\n        }\\n\\n        return maturities;\\n    }\\n\\n    /**\\n     * @notice Get all the currencies in which the user has lending positions or orders.\\n     * @param _user User's address\\n     * @return The array of the currency\\n     */\\n    function getUsedCurrencies(address _user) external view override returns (bytes32[] memory) {\\n        return Storage.slot().usedCurrencies[_user].values();\\n    }\\n\\n    /**\\n     * @notice Gets the future value of the account for selected currency and maturity.\\n     * @param _ccy Currency name in bytes32 for Lending Market\\n     * @param _maturity The maturity of the market\\n     * @param _user User's address\\n     * @return futureValue The future value\\n     */\\n    function getFutureValue(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) external view override returns (int256 futureValue) {\\n        futureValue = FundManagementLogic.calculateActualFunds(_ccy, _maturity, _user).futureValue;\\n    }\\n\\n    /**\\n     * @notice Gets the present value of the account for selected currency and maturity.\\n     * @param _ccy Currency name in bytes32 for Lending Market\\n     * @param _maturity The maturity of the market\\n     * @param _user User's address\\n     * @return presentValue The present value\\n     */\\n    function getPresentValue(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) external view override returns (int256 presentValue) {\\n        presentValue = FundManagementLogic\\n            .calculateActualFunds(_ccy, _maturity, _user)\\n            .presentValue;\\n    }\\n\\n    /**\\n     * @notice Gets the total present value of the account for selected currency.\\n     * @param _ccy Currency name in bytes32 for Lending Market\\n     * @param _user User's address\\n     * @return totalPresentValue The total present value\\n     */\\n    function getTotalPresentValue(bytes32 _ccy, address _user)\\n        external\\n        view\\n        override\\n        returns (int256 totalPresentValue)\\n    {\\n        totalPresentValue = FundManagementLogic.calculateActualFunds(_ccy, 0, _user).presentValue;\\n    }\\n\\n    /**\\n     * @notice Gets the total present value of the account converted to base currency.\\n     * @param _user User's address\\n     * @return totalPresentValue The total present value in base currency\\n     */\\n    function getTotalPresentValueInBaseCurrency(address _user)\\n        external\\n        view\\n        override\\n        returns (int256 totalPresentValue)\\n    {\\n        EnumerableSet.Bytes32Set storage currencySet = Storage.slot().usedCurrencies[_user];\\n\\n        for (uint256 i = 0; i < currencySet.length(); i++) {\\n            bytes32 ccy = currencySet.at(i);\\n            int256 amount = FundManagementLogic.calculateActualFunds(ccy, 0, _user).presentValue;\\n            totalPresentValue += currencyController().convertToBaseCurrency(ccy, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the genesis value of the account.\\n     * @param _ccy Currency name in bytes32 for Lending Market\\n     * @param _user User's address\\n     * @return genesisValue The genesis value\\n     */\\n    function getGenesisValue(bytes32 _ccy, address _user)\\n        external\\n        view\\n        override\\n        returns (int256 genesisValue)\\n    {\\n        genesisValue = FundManagementLogic.calculateActualFunds(_ccy, 0, _user).genesisValue;\\n    }\\n\\n    /**\\n     * @notice Gets user's active and inactive orders in the order book\\n     * @param _ccys Currency name list in bytes32\\n     * @param _user User's address\\n     * @return activeOrders The array of active orders in the order book\\n     * @return inactiveOrders The array of inactive orders\\n     */\\n    function getOrders(bytes32[] memory _ccys, address _user)\\n        external\\n        view\\n        returns (Order[] memory activeOrders, Order[] memory inactiveOrders)\\n    {\\n        (activeOrders, inactiveOrders) = LendingMarketUserLogic.getOrders(_ccys, _user);\\n    }\\n\\n    /**\\n     * @notice Gets the funds that are calculated from the user's lending and borrowing order list\\n     * for the selected currency.\\n     * @param _ccy Currency name in bytes32\\n     * @param _user User's address\\n     * @return workingLendOrdersAmount The working orders amount on the lend order book\\n     * @return claimableAmount The claimable amount due to the lending orders being filled on the order book\\n     * @return collateralAmount The actual collateral amount that is calculated by netting using the haircut.\\n     * @return lentAmount The lent amount due to the lend orders being filled on the order book\\n     * @return workingBorrowOrdersAmount The working orders amount on the borrow order book\\n     * @return debtAmount The debt amount due to the borrow orders being filled on the order book\\n     * @return borrowedAmount The borrowed amount due to the borrow orders being filled on the order book\\n     */\\n    function calculateFunds(bytes32 _ccy, address _user)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 workingLendOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 collateralAmount,\\n            uint256 lentAmount,\\n            uint256 workingBorrowOrdersAmount,\\n            uint256 debtAmount,\\n            uint256 borrowedAmount\\n        )\\n    {\\n        if (Storage.slot().usedCurrencies[_user].contains(_ccy)) {\\n            return FundManagementLogic.calculateFunds(_ccy, _user);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the funds that are calculated from the user's lending and borrowing order list\\n     * for all currencies in base currency.\\n     * @param _user User's address\\n     * @param _depositCcy Currency name to be used as deposit\\n     * @param _depositAmount Amount to deposit\\n     */\\n    function calculateTotalFundsInBaseCurrency(\\n        address _user,\\n        bytes32 _depositCcy,\\n        uint256 _depositAmount\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 totalWorkingLendOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalCollateralAmount,\\n            uint256 totalLentAmount,\\n            uint256 totalWorkingBorrowOrdersAmount,\\n            uint256 totalDebtAmount,\\n            uint256 totalBorrowedAmount,\\n            bool isEnoughDeposit\\n        )\\n    {\\n        return\\n            FundManagementLogic.calculateTotalFundsInBaseCurrency(\\n                _user,\\n                _depositCcy,\\n                _depositAmount\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets if the lending market is initialized.\\n     * @param _ccy Currency name in bytes32\\n     * @return The boolean if the lending market is initialized or not\\n     */\\n    function isInitializedLendingMarket(bytes32 _ccy) public view override returns (bool) {\\n        return Storage.slot().genesisDates[_ccy] != 0;\\n    }\\n\\n    /**\\n     * @notice Initialize the lending market to set a genesis date and compound factor\\n     * @param _ccy Currency name in bytes32\\n     * @param _genesisDate The genesis date when the initial market is opened\\n     * @param _compoundFactor The initial compound factor when the initial market is opened\\n     * @param _orderFeeRate The order fee rate received by protocol\\n     * @param _autoRollFeeRate The auto roll fee rate received by protocol\\n     * @param _circuitBreakerLimitRange The circuit breaker limit range\\n     */\\n    function initializeLendingMarket(\\n        bytes32 _ccy,\\n        uint256 _genesisDate,\\n        uint256 _compoundFactor,\\n        uint256 _orderFeeRate,\\n        uint256 _autoRollFeeRate,\\n        uint256 _circuitBreakerLimitRange\\n    ) external override onlyOwner {\\n        require(_compoundFactor > 0, \\\"Invalid compound factor\\\");\\n        require(!isInitializedLendingMarket(_ccy), \\\"Already initialized\\\");\\n\\n        LendingMarketOperationLogic.initializeCurrencySetting(_ccy, _genesisDate, _compoundFactor);\\n        updateOrderFeeRate(_ccy, _orderFeeRate);\\n        updateAutoRollFeeRate(_ccy, _autoRollFeeRate);\\n        updateCircuitBreakerLimitRange(_ccy, _circuitBreakerLimitRange);\\n    }\\n\\n    /**\\n     * @notice Deploys new Lending Market and save address at lendingMarkets mapping.\\n     * @param _ccy Main currency for new lending market\\n     * @param _openingDate Timestamp when the lending market opens\\n     * @notice Reverts on deployment market with existing currency and term\\n     */\\n    function createLendingMarket(bytes32 _ccy, uint256 _openingDate)\\n        external\\n        override\\n        ifActive\\n        onlyOwner\\n    {\\n        LendingMarketOperationLogic.createLendingMarket(_ccy, _openingDate);\\n    }\\n\\n    /**\\n     * @notice Creates an order. Takes orders if the orders are matched,\\n     * and places new order if not match it.\\n     *\\n     * In addition, converts the future value to the genesis value if there is future value in past maturity\\n     * before the execution of order creation.\\n     *\\n     * @param _ccy Currency name in bytes32 of the selected market\\n     * @param _maturity The maturity of the selected market\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _unitPrice Amount of unit price taker wish to borrow/lend\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function createOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) external override nonReentrant ifValidMaturity(_ccy, _maturity) ifActive returns (bool) {\\n        LendingMarketUserLogic.createOrder(_ccy, _maturity, msg.sender, _side, _amount, _unitPrice);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Deposits funds and creates an order at the same time.\\n     *\\n     * @param _ccy Currency name in bytes32 of the selected market\\n     * @param _maturity The maturity of the selected market\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _unitPrice Amount of unit price taker wish to borrow/lend\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function depositAndCreateOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    )\\n        external\\n        payable\\n        override\\n        nonReentrant\\n        ifValidMaturity(_ccy, _maturity)\\n        ifActive\\n        returns (bool)\\n    {\\n        tokenVault().depositFrom{value: msg.value}(msg.sender, _ccy, _amount);\\n        LendingMarketUserLogic.createOrder(_ccy, _maturity, msg.sender, _side, _amount, _unitPrice);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Creates a pre-order. A pre-order will only be accepted from 168 hours (7 days) to 1 hour\\n     * before the market opens (Pre-order period). At the end of this period, Itayose will be executed.\\n     *\\n     * @param _ccy Currency name in bytes32 of the selected market\\n     * @param _maturity The maturity of the selected market\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _unitPrice Amount of unit price taker wish to borrow/lend\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function createPreOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) public override nonReentrant ifValidMaturity(_ccy, _maturity) ifActive returns (bool) {\\n        LendingMarketUserLogic.createPreOrder(\\n            _ccy,\\n            _maturity,\\n            msg.sender,\\n            _side,\\n            _amount,\\n            _unitPrice\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Deposits funds and creates a pre-order at the same time.\\n     *\\n     * @param _ccy Currency name in bytes32 of the selected market\\n     * @param _maturity The maturity of the selected market\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _unitPrice Amount of unit price taker wish to borrow/lend\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function depositAndCreatePreOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    )\\n        external\\n        payable\\n        override\\n        nonReentrant\\n        ifValidMaturity(_ccy, _maturity)\\n        ifActive\\n        returns (bool)\\n    {\\n        tokenVault().depositFrom{value: msg.value}(msg.sender, _ccy, _amount);\\n        LendingMarketUserLogic.createPreOrder(\\n            _ccy,\\n            _maturity,\\n            msg.sender,\\n            _side,\\n            _amount,\\n            _unitPrice\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Unwinds user's lending or borrowing positions by creating an opposite position order.\\n     * @param _ccy Currency name in bytes32 of the selected market\\n     * @param _maturity The maturity of the selected market\\n     */\\n    function unwindPosition(bytes32 _ccy, uint256 _maturity)\\n        external\\n        override\\n        nonReentrant\\n        ifValidMaturity(_ccy, _maturity)\\n        ifActive\\n        returns (bool)\\n    {\\n        LendingMarketUserLogic.unwindPosition(_ccy, _maturity, msg.sender);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Redeems all lending and borrowing positions.\\n     * This function uses the present value as of the termination date.\\n     *\\n     * @param _redemptionCcy Currency name of positions to be redeemed\\n     * @param _collateralCcy Currency name of collateral\\n     */\\n    function executeRedemption(bytes32 _redemptionCcy, bytes32 _collateralCcy)\\n        external\\n        override\\n        nonReentrant\\n        ifInactive\\n        returns (bool)\\n    {\\n        FundManagementLogic.executeRedemption(_redemptionCcy, _collateralCcy, msg.sender);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Executes Itayose calls per selected currencies.\\n     * @param _currencies Currency name list in bytes32\\n     * @param _maturity The maturity of the selected market\\n     */\\n    function executeItayoseCalls(bytes32[] memory _currencies, uint256 _maturity)\\n        external\\n        override\\n        nonReentrant\\n        ifActive\\n        returns (bool)\\n    {\\n        for (uint256 i; i < _currencies.length; i++) {\\n            bytes32 ccy = _currencies[i];\\n\\n            (\\n                ILendingMarket.PartiallyFilledOrder memory partiallyFilledLendingOrder,\\n                ILendingMarket.PartiallyFilledOrder memory partiallyFilledBorrowingOrder\\n            ) = LendingMarketOperationLogic.executeItayoseCall(ccy, _maturity);\\n\\n            LendingMarketUserLogic.updateFundsForMaker(\\n                ccy,\\n                _maturity,\\n                ProtocolTypes.Side.LEND,\\n                partiallyFilledLendingOrder\\n            );\\n            LendingMarketUserLogic.updateFundsForMaker(\\n                ccy,\\n                _maturity,\\n                ProtocolTypes.Side.BORROW,\\n                partiallyFilledBorrowingOrder\\n            );\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Cancels the own order.\\n     * @param _ccy Currency name in bytes32 of the selected market\\n     * @param _maturity The maturity of the selected market\\n     * @param _orderId Market order id\\n     */\\n    function cancelOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint48 _orderId\\n    ) external override nonReentrant ifValidMaturity(_ccy, _maturity) ifActive returns (bool) {\\n        address market = Storage.slot().maturityLendingMarkets[_ccy][_maturity];\\n        ILendingMarket(market).cancelOrder(msg.sender, _orderId);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Liquidates a lending or borrowing position if the user's coverage is hight.\\n     * @param _collateralCcy Currency name to be used as collateral\\n     * @param _debtCcy Currency name to be used as debt\\n     * @param _debtMaturity The market maturity of the debt\\n     * @param _user User's address\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function executeLiquidationCall(\\n        bytes32 _collateralCcy,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity,\\n        address _user\\n    )\\n        external\\n        override\\n        isNotLocked\\n        ifValidMaturity(_debtCcy, _debtMaturity)\\n        ifActive\\n        returns (bool)\\n    {\\n        FundManagementLogic.executeLiquidation(\\n            msg.sender,\\n            _user,\\n            _collateralCcy,\\n            _debtCcy,\\n            _debtMaturity\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Rotates the lending markets. In this rotation, the following actions are happened.\\n     * - Updates the maturity at the beginning of the market array.\\n     * - Moves the beginning of the market array to the end of it (Market rotation).\\n     * - Update the compound factor in this contract using the next market unit price. (Auto-rolls)\\n     * - Convert the future value held by reserve funds into the genesis value\\n     *\\n     * @param _ccy Currency name in bytes32 of the selected market\\n     */\\n    function rotateLendingMarkets(bytes32 _ccy)\\n        external\\n        override\\n        nonReentrant\\n        hasLendingMarket(_ccy)\\n        ifActive\\n    {\\n        uint256 newMaturity = LendingMarketOperationLogic.rotateLendingMarkets(\\n            _ccy,\\n            getAutoRollFeeRate(_ccy)\\n        );\\n\\n        FundManagementLogic.convertFutureValueToGenesisValue(\\n            _ccy,\\n            newMaturity,\\n            address(reserveFund())\\n        );\\n    }\\n\\n    /**\\n     * @notice Executes an emergency termination to stop the protocol. Once this function is executed,\\n     * the protocol cannot be run again. Also, users will only be able to redeem and withdraw.\\n     */\\n    function executeEmergencyTermination() external override nonReentrant ifActive onlyOwner {\\n        LendingMarketOperationLogic.executeEmergencyTermination();\\n    }\\n\\n    /**\\n     * @notice Pauses previously deployed lending market by currency\\n     * @param _ccy Currency for pausing all lending markets\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function pauseLendingMarkets(bytes32 _ccy) external override ifActive onlyOwner returns (bool) {\\n        LendingMarketOperationLogic.pauseLendingMarkets(_ccy);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Unpauses previously deployed lending market by currency\\n     * @param _ccy Currency name in bytes32\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function unpauseLendingMarkets(bytes32 _ccy)\\n        external\\n        override\\n        ifActive\\n        onlyOwner\\n        returns (bool)\\n    {\\n        LendingMarketOperationLogic.unpauseLendingMarkets(_ccy);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Clean up all funds of the user\\n     * @param _user User's address\\n     */\\n    function cleanUpAllFunds(address _user) external override returns (bool) {\\n        FundManagementLogic.cleanUpAllFunds(_user);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Clean up user funds used for lazy evaluation by the following actions:\\n     * - Removes order IDs that is already filled on the order book.\\n     * - Convert Future values that have already been auto-rolled to Genesis values.\\n     * @param _ccy Currency name in bytes32\\n     * @param _user User's address\\n     */\\n    function cleanUpFunds(bytes32 _ccy, address _user)\\n        external\\n        override\\n        returns (uint256 totalActiveOrderCount)\\n    {\\n        return FundManagementLogic.cleanUpFunds(_ccy, _user);\\n    }\\n}\\n\",\"keccak256\":\"0xae600095ddd6fe23e501def7233368188fdf36b8469158032a7e3129b666a318\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IBeaconProxyController {\\n    event BeaconProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function deployFutureValueVault() external returns (address futureValueVault);\\n\\n    function deployLendingMarket(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 openingDate\\n    ) external returns (address market);\\n}\\n\",\"keccak256\":\"0xcedc431629fa9537e673fc37ceae4cc645cf1f4ff9071b05396b9e3944ce6dd9\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Currency} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CurrencyAdded(bytes32 indexed ccy, uint256 haircut);\\n    event CurrencyRemoved(bytes32 indexed ccy);\\n\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n\\n    event PriceFeedUpdated(bytes32 ccy, uint256 decimals, address[] indexed priceFeeds);\\n    event PriceFeedRemoved(bytes32 ccy);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256 _amount\\n    ) external view returns (uint256 amount);\\n\\n    function convertFromBaseCurrency(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, uint256 _amount)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, int256 _amount)\\n        external\\n        view\\n        returns (int256 amount);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getBaseCurrency() external view returns (bytes32);\\n\\n    function getDecimals(bytes32) external view returns (uint8);\\n\\n    function getCurrencies() external view returns (bytes32[] memory);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getLastPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function currencyExists(bytes32 _ccy) external view returns (bool);\\n\\n    function updatePriceFeed(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        address[] calldata _priceFeeds\\n    ) external;\\n\\n    function removePriceFeed(bytes32 _ccy) external;\\n\\n    function addCurrency(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        uint256 _haircut,\\n        address[] calldata _priceFeeds\\n    ) external;\\n\\n    function updateHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function removeCurrency(bytes32 _ccy) external;\\n}\\n\",\"keccak256\":\"0xabd4040d990a6af80ce27496a643e167de301ef11dea8f1281755a4936712b39\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IFutureValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IFutureValueVault {\\n    event Transfer(address indexed from, address indexed to, int256 value);\\n\\n    function getTotalSupply(uint256 maturity) external view returns (uint256);\\n\\n    function getFutureValue(address user)\\n        external\\n        view\\n        returns (int256 futureValue, uint256 maturity);\\n\\n    function hasFutureValueInPastMaturity(address user, uint256 maturity)\\n        external\\n        view\\n        returns (bool);\\n\\n    function addLendFutureValue(\\n        address user,\\n        uint256 amount,\\n        uint256 maturity,\\n        bool isTaker\\n    ) external returns (bool);\\n\\n    function addBorrowFutureValue(\\n        address user,\\n        uint256 amount,\\n        uint256 maturity,\\n        bool isTaker\\n    ) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address receiver,\\n        int256 amount,\\n        uint256 maturity\\n    ) external;\\n\\n    function removeFutureValue(address user, uint256 activeMaturity)\\n        external\\n        returns (\\n            int256 removedAmount,\\n            int256 currentAmount,\\n            uint256 maturity,\\n            bool removeFutureValue\\n        );\\n\\n    function addInitialTotalSupply(uint256 maturity, int256 amount) external;\\n\\n    function resetFutureValue(address _user) external;\\n}\\n\",\"keccak256\":\"0x6847c88d892183b81aa0a6381c1e2eb58968cfb0bf5260b585b38d585c9a283a\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AutoRollLog} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\\n    event AutoRollExecuted(\\n        bytes32 indexed ccy,\\n        uint256 lendingCompoundFactor,\\n        uint256 borrowingCompoundFactor,\\n        uint256 unitPrice,\\n        uint256 currentMaturity,\\n        uint256 previousMaturity\\n    );\\n\\n    function isInitialized(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getMaturityGenesisValue(bytes32 _ccy, uint256 _maturity)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getAutoRollLog(bytes32 ccy, uint256 maturity)\\n        external\\n        view\\n        returns (AutoRollLog memory);\\n\\n    function getLatestAutoRollLog(bytes32 _ccy) external view returns (AutoRollLog memory);\\n\\n    function getGenesisValueInFutureValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function calculateFVFromFV(\\n        bytes32 _ccy,\\n        uint256 _basisMaturity,\\n        uint256 _destinationMaturity,\\n        int256 _futureValue\\n    ) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function getBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function calculateBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        int256 balance,\\n        uint256 fromMaturity,\\n        uint256 toMaturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function initializeCurrencySetting(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor,\\n        uint256 maturity\\n    ) external;\\n\\n    function updateInitialCompoundFactor(bytes32 _ccy, uint256 _unitPrice) external;\\n\\n    function executeAutoRoll(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice,\\n        uint256 feeRate\\n    ) external;\\n\\n    function updateGenesisValueWithFutureValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 fvAmount\\n    ) external;\\n\\n    function updateGenesisValueWithResidualAmount(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity\\n    ) external;\\n\\n    function transferFrom(\\n        bytes32 _ccy,\\n        address _sender,\\n        address _receiver,\\n        int256 _amount\\n    ) external;\\n\\n    function cleanUpGenesisValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external;\\n\\n    function resetGenesisValue(bytes32 _ccy, address _user) external;\\n}\\n\",\"keccak256\":\"0xe7f448ce594b9503483dd8071d18c3123022a6add49ca9878bde17a8e71078df\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport {MarketOrder} from \\\"../storages/LendingMarketStorage.sol\\\";\\n\\ninterface ILendingMarket {\\n    struct FilledOrder {\\n        uint256 unitPrice;\\n        uint256 amount;\\n        uint256 futureValue;\\n        uint256 ignoredAmount;\\n    }\\n\\n    struct PartiallyFilledOrder {\\n        address maker;\\n        uint256 amount;\\n        uint256 futureValue;\\n    }\\n\\n    event OrderCanceled(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n\\n    event OrderMade(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n\\n    event OrdersTaken(\\n        address indexed taker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 filledAmount,\\n        uint256 unitPrice,\\n        uint256 filledFutureValue\\n    );\\n\\n    event OrderPartiallyTaken(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 maturity,\\n        uint256 filledAmount,\\n        uint256 filledFutureValue\\n    );\\n\\n    event OrdersCleaned(\\n        uint48[] orderIds,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 maturity\\n    );\\n\\n    event OrderBlockedByCircuitBreaker(\\n        address indexed user,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 thresholdUnitPrice\\n    );\\n\\n    event MarketOpened(uint256 maturity, uint256 prevMaturity);\\n\\n    event ItayoseExecuted(bytes32 ccy, uint256 maturity, uint256 openingPrice);\\n\\n    struct Market {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        uint256 openingDate;\\n        uint256 borrowUnitPrice;\\n        uint256 lendUnitPrice;\\n        uint256 midUnitPrice;\\n        bool isReady;\\n    }\\n\\n    function getMarket() external view returns (Market memory);\\n\\n    function getBorrowUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getLendUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getMidUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getBorrowOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturity() external view returns (uint256);\\n\\n    function getCurrency() external view returns (bytes32);\\n\\n    function getOpeningDate() external view returns (uint256);\\n\\n    function getOpeningUnitPrice() external view returns (uint256);\\n\\n    function isReady() external view returns (bool);\\n\\n    function isMatured() external view returns (bool);\\n\\n    function isOpened() external view returns (bool);\\n\\n    function isItayosePeriod() external view returns (bool);\\n\\n    function isPreOrderPeriod() external returns (bool);\\n\\n    function getOrder(uint48 orderId)\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        );\\n\\n    function getTotalAmountFromLendOrders(address user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getTotalAmountFromBorrowOrders(address user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getLendOrderIds(address user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds);\\n\\n    function getBorrowOrderIds(address user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds);\\n\\n    function estimateFilledAmount(ProtocolTypes.Side side, uint256 futureValue)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function openMarket(uint256 maturity, uint256 openingDate) external returns (uint256);\\n\\n    function cancelOrder(address user, uint48 orderId)\\n        external\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        );\\n\\n    function createOrder(\\n        ProtocolTypes.Side side,\\n        address account,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        uint256 circuitBreakerLimitRange\\n    )\\n        external\\n        returns (FilledOrder memory filledOrder, PartiallyFilledOrder memory partiallyFilledOrder);\\n\\n    function createPreOrder(\\n        ProtocolTypes.Side side,\\n        address user,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external;\\n\\n    function unwind(\\n        ProtocolTypes.Side side,\\n        address user,\\n        uint256 futureValue,\\n        uint256 circuitBreakerLimitRange\\n    )\\n        external\\n        returns (FilledOrder memory filledOrder, PartiallyFilledOrder memory partiallyFilledOrder);\\n\\n    function executeItayoseCall()\\n        external\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 totalOffsetAmount,\\n            uint256 openingDate,\\n            PartiallyFilledOrder memory partiallyFilledLendingOrder,\\n            PartiallyFilledOrder memory partiallyFilledBorrowingOrder\\n        );\\n\\n    function cleanUpOrders(address user)\\n        external\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        );\\n\\n    function pauseMarket() external;\\n\\n    function unpauseMarket() external;\\n}\\n\",\"keccak256\":\"0x5c10f60625a1c9118d56767bc5efe665b0e6f00456e9a3027a4bb0bba2d57b22\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ILendingMarketController {\\n    struct Order {\\n        uint48 orderId;\\n        bytes32 ccy;\\n        uint256 maturity;\\n        ProtocolTypes.Side side;\\n        uint256 unitPrice;\\n        uint256 amount;\\n        uint256 timestamp;\\n    }\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarkets(bytes32 ccy) external view returns (address[] memory);\\n\\n    function getLendingMarket(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getBorrowUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getLendUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getMidUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getBorrowOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getFutureValue(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        address user\\n    ) external view returns (int256 futureValue);\\n\\n    function getPresentValue(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        address user\\n    ) external view returns (int256 presentValue);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInBaseCurrency(address user)\\n        external\\n        view\\n        returns (int256 totalPresentValue);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256 genesisValue);\\n\\n    function calculateFunds(bytes32 ccy, address user)\\n        external\\n        view\\n        returns (\\n            uint256 workingLendOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 collateralAmount,\\n            uint256 lentAmount,\\n            uint256 workingBorrowOrdersAmount,\\n            uint256 debtAmount,\\n            uint256 borrowedAmount\\n        );\\n\\n    function calculateTotalFundsInBaseCurrency(\\n        address user,\\n        bytes32 depositCcy,\\n        uint256 depositAmount\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalWorkingLendOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalCollateralAmount,\\n            uint256 totalLentAmount,\\n            uint256 totalWorkingBorrowOrdersAmount,\\n            uint256 totalDebtAmount,\\n            uint256 totalBorrowedAmount,\\n            bool isEnoughDeposit\\n        );\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor,\\n        uint256 orderFeeRate,\\n        uint256 autoRollFeeRate,\\n        uint256 circuitBreakerLimitRange\\n    ) external;\\n\\n    function createLendingMarket(bytes32 ccy, uint256 marketOpeningDate) external;\\n\\n    function createOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndCreateOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function createPreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndCreatePreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function unwindPosition(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function executeItayoseCalls(bytes32[] memory currencies, uint256 maturity)\\n        external\\n        returns (bool);\\n\\n    function executeRedemption(bytes32 redemptionCcy, bytes32 collateralCcy)\\n        external\\n        returns (bool);\\n\\n    function executeLiquidationCall(\\n        bytes32 collateralCcy,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        address user\\n    ) external returns (bool);\\n\\n    function cancelOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint48 orderId\\n    ) external returns (bool);\\n\\n    function rotateLendingMarkets(bytes32 ccy) external;\\n\\n    function executeEmergencyTermination() external;\\n\\n    function pauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function cleanUpAllFunds(address user) external returns (bool);\\n\\n    function cleanUpFunds(bytes32 ccy, address user) external returns (uint256 activeOrderCount);\\n}\\n\",\"keccak256\":\"0x16ce3845318165953ba5fba623bc35f155f5fc25e1f7e25c6ee4141a7595b12b\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IReserveFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IReserveFund {\\n    event Pause(address account);\\n    event Unpause(address account);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xa2a6df7a095ca8f8874d26672f75fe1f09c45caf041cb27d5e265bcb974a9754\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ITokenVault {\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress, bool isCollateral);\\n    event CurrencyUpdated(bytes32 ccy, bool isCollateral);\\n\\n    function isCovered(\\n        address user,\\n        bytes32 ccy,\\n        uint256 unsettledExp,\\n        ProtocolTypes.Side unsettledOrderSide\\n    ) external view returns (bool);\\n\\n    function isCovered(address user) external view returns (bool);\\n\\n    function isCollateral(bytes32 _ccy) external view returns (bool);\\n\\n    function isCollateral(bytes32[] calldata _ccys)\\n        external\\n        view\\n        returns (bool[] memory isCollateralCurrencies);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getTokenAddress(bytes32 ccy) external view returns (address);\\n\\n    function getCollateralCurrencies() external view returns (bytes32[] memory);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256 maxWithdraw);\\n\\n    function getWithdrawableCollateral(bytes32 _ccy, address _user) external view returns (uint256);\\n\\n    function getCoverage(address user) external view returns (uint256 coverage);\\n\\n    function getUnusedCollateral(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address party) external view returns (uint256);\\n\\n    function getLiquidationAmount(\\n        address user,\\n        bytes32 liquidationCcy,\\n        uint256 liquidationAmountMaximum\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liquidationAmount,\\n            uint256 protocolFee,\\n            uint256 liquidatorFee\\n        );\\n\\n    function getTotalDepositAmount(bytes32 _ccy) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getCollateralParameters()\\n        external\\n        view\\n        returns (\\n            uint256 liquidationThresholdRate,\\n            uint256 liquidationProtocolFeeRate,\\n            uint256 liquidatorFeeRate\\n        );\\n\\n    function setCollateralParameters(\\n        uint256 liquidationThresholdRate,\\n        uint256 liquidationProtocolFeeRate,\\n        uint256 liquidatorFeeRate\\n    ) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositFrom(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function removeDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function transferFrom(\\n        bytes32 _ccy,\\n        address _sender,\\n        address _receiver,\\n        uint256 _amount\\n    ) external returns (uint256 untransferredAmount);\\n}\\n\",\"keccak256\":\"0xa0b9e2447498ff3181f8675bf19efd836805a1feb602a22d395871767e705681\",\"license\":\"MIT\"},\"contracts/protocol/libraries/AddressResolverLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/MixinAddressResolverStorage.sol\\\";\\n\\nlibrary AddressResolverLib {\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return IReserveFund(getAddress(Contracts.RESERVE_FUND));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0x65d55399d6c8b753ddaa36c1370fae1c68dfbfb8b6b2d09b1717ba037b079998\",\"license\":\"MIT\"},\"contracts/protocol/libraries/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n\\n    function timestampFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            hour *\\n            SECONDS_PER_HOUR +\\n            minute *\\n            SECONDS_PER_MINUTE +\\n            second;\\n    }\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint256 daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isValidDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isLeapYear(uint256 timestamp) internal pure returns (bool leapYear) {\\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n\\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n\\n    function getDaysInMonth(uint256 timestamp) internal pure returns (uint256 daysInMonth) {\\n        (uint256 year, uint256 month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n\\n    function _getDaysInMonth(uint256 year, uint256 month)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        if (\\n            month == 1 ||\\n            month == 3 ||\\n            month == 5 ||\\n            month == 7 ||\\n            month == 8 ||\\n            month == 10 ||\\n            month == 12\\n        ) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint256 timestamp) internal pure returns (uint256 dayOfWeek) {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n\\n    function getMinute(uint256 timestamp) internal pure returns (uint256 minute) {\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    function getSecond(uint256 timestamp) internal pure returns (uint256 second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = ((month - 1) % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = (yearMonth % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _years)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint256 fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint256 toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n\\n    function diffMonths(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _months)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint256 fromYear, uint256 fromMonth, ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint256 toYear, uint256 toMonth, ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n\\n    function diffDays(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _days)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n\\n    function diffHours(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _hours)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n\\n    function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _minutes)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n\\n    function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _seconds)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xe63d0d21b9b0bcdda93e169220d4ea9e5d1817a286f7ff0608f310defce26609\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Constants {\\n    /// @dev Used for price digits in the basis (10000 -> 1)\\n    uint256 public constant PRICE_DIGIT = 10000;\\n\\n    /// @dev Used for percentage digits in the basis (10000 -> 100%)\\n    uint256 public constant PCT_DIGIT = 10000;\\n\\n    /// @dev Used for seconds in year (60 * 60 * 24 * 365)\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000;\\n\\n    /// @dev Used for maximum order count per currency\\n    uint256 internal constant MAXIMUM_ORDER_COUNT = 20;\\n}\\n\",\"keccak256\":\"0x89fe39938c9a7dd4133dba6099285937c94718a355bd904f48989b795cee2898\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant RESERVE_FUND = \\\"ReserveFund\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE_VAULT = \\\"FutureValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0x8e73eead72efa03bcc03c1cdf72cdcebed0f7e6f5a58cda1fd74e0fc03f356e6\",\"license\":\"MIT\"},\"contracts/protocol/libraries/OrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// libraries\\nimport {Constants} from \\\"../libraries/Constants.sol\\\";\\n// types\\nimport {RoundingUint256} from \\\"./math/RoundingUint256.sol\\\";\\n\\nstruct RemainingOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 unitPrice;\\n}\\n\\nstruct PartiallyFilledOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 futureValue;\\n}\\n\\nstruct OrderItem {\\n    uint48 orderId;\\n    uint48 next;\\n    uint48 prev;\\n    address maker;\\n    uint256 timestamp;\\n    uint256 amount;\\n}\\n\\n/**\\n * @notice OrderStatisticsTreeLib is a Red-Black Tree binary search library\\n * based on the following library that is extended to manage order data.\\n *\\n * https://github.com/rob-Hitchens/OrderStatisticsTree\\n *\\n */\\nlibrary OrderStatisticsTreeLib {\\n    using RoundingUint256 for uint256;\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint48 head;\\n        uint48 tail;\\n        uint256 orderCounter;\\n        uint256 orderTotalAmount;\\n        mapping(uint256 => OrderItem) orders;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].right != EMPTY) {\\n            _value = self.nodes[_value].right;\\n        }\\n    }\\n\\n    function hasOrders(Tree storage self) internal view returns (bool) {\\n        return self.root != EMPTY;\\n    }\\n\\n    function next(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(401) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].right != EMPTY) {\\n            _cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(402) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].left != EMPTY) {\\n            _cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint256 value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        // if (self.nodes[value].parent != EMPTY) return true;\\n        uint256 cursor = value;\\n        while (self.nodes[cursor].parent != EMPTY) {\\n            uint256 parent = self.nodes[cursor].parent;\\n            if (self.nodes[parent].left != cursor && self.nodes[parent].right != cursor) {\\n                return false;\\n            }\\n            if (parent == self.root) {\\n                return true;\\n            }\\n            cursor = self.nodes[cursor].parent;\\n        }\\n        return false;\\n    }\\n\\n    function isActiveOrderId(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        return orderIdExists(self, value, orderId) && exists(self, value);\\n    }\\n\\n    function getNode(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n        return (\\n            gn.parent,\\n            gn.left,\\n            gn.right,\\n            gn.red,\\n            gn.head,\\n            gn.tail,\\n            gn.orderCounter,\\n            gn.orderTotalAmount\\n        );\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function getNodeTotalAmount(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint256 totalAmount)\\n    {\\n        return self.nodes[value].orderTotalAmount;\\n    }\\n\\n    function getNodeOrderIds(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint48[] memory orderIds)\\n    {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[gn.head];\\n        orderIds = new uint48[](gn.orderCounter);\\n\\n        for (uint256 i = 0; i < gn.orderCounter; i++) {\\n            orderIds[i] = order.orderId;\\n            order = gn.orders[order.next];\\n        }\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256 _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(405) - Value to insert cannot be zero\\\");\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                return;\\n            }\\n        }\\n\\n        Node storage nValue = self.nodes[value];\\n        // Update order info as a new one if there is already an old node\\n        if (\\n            self.root == EMPTY ||\\n            (self.nodes[cursor].left != value && self.nodes[cursor].right != value)\\n        ) {\\n            nValue.orderCounter = 0;\\n            nValue.orderTotalAmount = 0;\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        }\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(407) - Value to delete cannot be zero\\\");\\n        Node storage nValue = self.nodes[value];\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint256 a,\\n        uint256 b\\n    ) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    function estimateDroppedAmountFromLeft(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = first(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV).div(\\n                    cursorNodeAmountInFV\\n                );\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n    }\\n\\n    function estimateDroppedAmountFromRight(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = last(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV).div(\\n                    cursorNodeAmountInFV\\n                );\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n    }\\n\\n    function dropLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue,\\n        uint256 limitFutureValue\\n    )\\n        internal\\n        returns (\\n            uint256 value,\\n            uint256 filledAmount,\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            PartiallyFilledOrder memory partiallyFilledOrder\\n        )\\n    {\\n        uint256 cursor = first(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor <= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        uint256 amountDiff;\\n        uint256 futureValueDiff;\\n        while (\\n            (totalAmount < amount || amount == EMPTY) &&\\n            (filledFutureValue < limitFutureValue || limitFutureValue == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor <= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            filledFutureValue += _calculateFutureValue(cursor, cursorNodeAmount);\\n            filledAmount += cursorNodeAmount;\\n\\n            if (totalAmount > amount && amount != EMPTY) {\\n                amountDiff = totalAmount - amount;\\n                futureValueDiff = _calculateFutureValue(cursor, amountDiff);\\n            } else if (filledFutureValue > limitFutureValue && limitFutureValue != EMPTY) {\\n                futureValueDiff = filledFutureValue - limitFutureValue;\\n                amountDiff = _calculatePresentValue(cursor, futureValueDiff);\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n\\n        if (amountDiff > 0) {\\n            filledAmount -= amountDiff;\\n        }\\n        if (futureValueDiff > 0) {\\n            filledFutureValue -= futureValueDiff;\\n        }\\n\\n        if (totalAmount > 0) {\\n            if (amountDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(self, cursor, cursorNodeAmount - amountDiff);\\n            } else if (futureValueDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, futureValueDiff)\\n                );\\n            }\\n\\n            self.nodes[cursor].left = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent > cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].left = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        uint256 lastNode = last(self);\\n\\n        if (lastNode == value && self.nodes[lastNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value > self.root || (value == self.root && filledAmount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToLeft(self);\\n    }\\n\\n    function dropRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue,\\n        uint256 limitFutureValue\\n    )\\n        internal\\n        returns (\\n            uint256 value,\\n            uint256 filledAmount,\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            PartiallyFilledOrder memory partiallyFilledOrder\\n        )\\n    {\\n        uint256 cursor = last(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor >= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        uint256 amountDiff;\\n        uint256 futureValueDiff;\\n        while (\\n            (totalAmount < amount || amount == EMPTY) &&\\n            (filledFutureValue < limitFutureValue || limitFutureValue == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor >= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            filledFutureValue += _calculateFutureValue(cursor, cursorNodeAmount);\\n            filledAmount += cursorNodeAmount;\\n\\n            if (totalAmount > amount && amount != EMPTY) {\\n                amountDiff = totalAmount - amount;\\n                futureValueDiff = _calculateFutureValue(cursor, amountDiff);\\n            } else if (filledFutureValue > limitFutureValue && limitFutureValue != EMPTY) {\\n                futureValueDiff = filledFutureValue - limitFutureValue;\\n                amountDiff = _calculatePresentValue(cursor, futureValueDiff);\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n\\n        if (amountDiff > 0) {\\n            filledAmount -= amountDiff;\\n        }\\n        if (futureValueDiff > 0) {\\n            filledFutureValue -= futureValueDiff;\\n        }\\n\\n        if (totalAmount > 0) {\\n            if (amountDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(self, cursor, cursorNodeAmount - amountDiff);\\n            } else if (futureValueDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, futureValueDiff)\\n                );\\n            }\\n\\n            self.nodes[cursor].right = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent < cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].right = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        uint256 firstNode = first(self);\\n\\n        if (firstNode == value && self.nodes[firstNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value < self.root || (value == self.root && filledAmount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToRight(self);\\n    }\\n\\n    function rotateTreeToLeft(Tree storage self) internal {\\n        if (self.nodes[self.root].left == 0 && self.nodes[self.root].right != 0) {\\n            if (self.nodes[self.nodes[self.root].right].left != 0) {\\n                rotateRight(self, self.nodes[self.root].right);\\n            }\\n            rotateLeft(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function rotateTreeToRight(Tree storage self) internal {\\n        if (self.nodes[self.root].right == 0 && self.nodes[self.root].left != 0) {\\n            if (self.nodes[self.nodes[self.root].left].right != 0) {\\n                rotateLeft(self, self.nodes[self.root].left);\\n            }\\n            rotateRight(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function getFutureValue(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (uint256) {\\n        return _calculateFutureValue(value, self.nodes[value].orders[orderId].amount);\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (OrderItem memory) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orders[orderId];\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function orderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        uint48 cursor = orderId;\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[cursor];\\n\\n        if (order.orderId != cursor) {\\n            return false;\\n        }\\n\\n        while (order.prev != EMPTY) {\\n            cursor = order.prev;\\n            order = gn.orders[cursor];\\n        }\\n\\n        return cursor == gn.head;\\n    }\\n\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal {\\n        require(amount > 0, \\\"Insufficient amount\\\");\\n        require(value <= Constants.PRICE_DIGIT, \\\"Insufficient value\\\");\\n        insert(self, value);\\n\\n        addTail(self, value, orderId, user, amount);\\n    }\\n\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        amount = _removeOrder(self, value, orderId);\\n        remove(self, value);\\n    }\\n\\n    /**\\n     * @dev Reduces order amount once market order taken.\\n     */\\n    function fillOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount\\n    ) internal returns (PartiallyFilledOrder memory partiallyFilledOrder) {\\n        Node storage gn = self.nodes[value];\\n\\n        require(\\n            gn.orderTotalAmount >= _amount,\\n            \\\"OrderStatisticsTree(410) - Amount to fill is insufficient\\\"\\n        );\\n\\n        uint256 remainingAmount = _amount;\\n        OrderItem memory currentOrder = gn.orders[gn.head];\\n        uint48 orderId = gn.head;\\n\\n        while (orderId != 0 && remainingAmount != 0) {\\n            currentOrder = gn.orders[orderId];\\n\\n            if (currentOrder.amount <= remainingAmount) {\\n                remainingAmount -= currentOrder.amount;\\n                orderId = currentOrder.next;\\n            } else {\\n                partiallyFilledOrder = PartiallyFilledOrder(\\n                    currentOrder.orderId,\\n                    currentOrder.maker,\\n                    remainingAmount,\\n                    _calculateFutureValue(value, remainingAmount)\\n                );\\n                currentOrder = gn.orders[currentOrder.prev];\\n                break;\\n            }\\n        }\\n\\n        if (currentOrder.orderId != 0) {\\n            _dropOrders(self, value, currentOrder.orderId);\\n        }\\n\\n        if (partiallyFilledOrder.amount > 0) {\\n            self.nodes[value].orders[partiallyFilledOrder.orderId].amount -= partiallyFilledOrder\\n                .amount;\\n            self.nodes[value].orderTotalAmount -= partiallyFilledOrder.amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n        uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n        _link(self, _value, orderId, gn.head);\\n        _setHead(self, _value, orderId);\\n        if (gn.tail == 0) _setTail(self, _value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, _value, _orderId, _user, _amount);\\n        } else {\\n            uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n            _link(self, _value, gn.tail, orderId);\\n            _setTail(self, _value, orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint48) {\\n        Node storage gn = self.nodes[value];\\n        require(\\n            gn.orders[orderId].timestamp == 0,\\n            \\\"OrderStatisticsTree(409) - Order id already exist.\\\"\\n        );\\n\\n        gn.orderCounter += 1;\\n        gn.orderTotalAmount += amount;\\n        OrderItem memory order = OrderItem(orderId, 0, 0, user, block.timestamp, amount);\\n        gn.orders[orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the list.\\n     */\\n    function _removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n        gn.orderTotalAmount -= order.amount;\\n    }\\n\\n    /**\\n     * @dev Drop the OrderItems older than or equal `orderId` from the list\\n     */\\n    function _dropOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n        uint256 cursor = gn.head;\\n        uint256 removedCount = 1;\\n        uint256 removedAmount = gn.orders[cursor].amount;\\n\\n        while (cursor != orderId) {\\n            cursor = gn.orders[cursor].next;\\n            removedCount++;\\n            removedAmount += gn.orders[cursor].amount;\\n        }\\n\\n        if (gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        }\\n\\n        gn.orderCounter -= removedCount;\\n        gn.orderTotalAmount -= removedAmount;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 _prevId,\\n        uint48 _nextId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[_prevId].next = _nextId;\\n        gn.orders[_nextId].prev = _prevId;\\n    }\\n\\n    function _calculateFutureValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * Constants.PRICE_DIGIT).div(unitPrice);\\n    }\\n\\n    function _calculatePresentValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * unitPrice).div(Constants.PRICE_DIGIT);\\n    }\\n}\\n\",\"keccak256\":\"0x82f693fffbd1f1657b73d69598c7856b403fcccd41ac1c3143e8082e5dc9344d\",\"license\":\"MIT\"},\"contracts/protocol/libraries/QuickSort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary QuickSort {\\n    function sort(uint256[] memory data) public pure returns (uint256[] memory) {\\n        quickSort(data, int256(0), int256(data.length - 1));\\n        return data;\\n    }\\n\\n    function quickSort(\\n        uint256[] memory arr,\\n        int256 left,\\n        int256 right\\n    ) internal pure {\\n        int256 i = left;\\n        int256 j = right;\\n        if (i == j) return;\\n        uint256 pivot = arr[uint256(left + (right - left) / 2)];\\n        while (i <= j) {\\n            while (arr[uint256(i)] < pivot) i++;\\n            while (pivot < arr[uint256(j)]) j--;\\n            if (i <= j) {\\n                (arr[uint256(i)], arr[uint256(j)]) = (arr[uint256(j)], arr[uint256(i)]);\\n                i++;\\n                j--;\\n            }\\n        }\\n        if (left < j) quickSort(arr, left, j);\\n        if (i < right) quickSort(arr, i, right);\\n    }\\n}\\n\",\"keccak256\":\"0x2cce94db4f423d70543c79888f77ed57fad6e6638e6a1d1399daabb99676643a\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/FundManagementLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"../../../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {SafeCast} from \\\"../../../dependencies/openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n// interfaces\\nimport {ILendingMarket} from \\\"../../interfaces/ILendingMarket.sol\\\";\\nimport {ILendingMarketController} from \\\"../../interfaces/ILendingMarketController.sol\\\";\\nimport {IFutureValueVault} from \\\"../../interfaces/IFutureValueVault.sol\\\";\\n// libraries\\nimport {AddressResolverLib} from \\\"../AddressResolverLib.sol\\\";\\nimport {QuickSort} from \\\"../QuickSort.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\nimport {RoundingInt256} from \\\"../math/RoundingInt256.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"../../types/ProtocolTypes.sol\\\";\\n// storages\\nimport {LendingMarketControllerStorage as Storage} from \\\"../../storages/LendingMarketControllerStorage.sol\\\";\\n// liquidation\\nimport {ILiquidationReceiver} from \\\"../../../liquidators/interfaces/ILiquidationReceiver.sol\\\";\\n\\nlibrary FundManagementLogic {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using RoundingUint256 for uint256;\\n    using RoundingInt256 for int256;\\n\\n    struct ExecuteLiquidationVars {\\n        address reserveFund;\\n        uint256 liquidationAmountInCollateralCcy;\\n        uint256 protocolFeeInCollateralCcy;\\n        uint256 liquidatorFeeInCollateralCcy;\\n        bool isDefaultMarket;\\n        bool isReserveFundPaused;\\n        uint256 receivedCollateralAmount;\\n        uint256 receivedDebtAmount;\\n    }\\n\\n    struct CalculatedTotalFundInBaseCurrencyVars {\\n        bool[] isCollateral;\\n        bytes32 ccy;\\n        uint256[] amounts;\\n        uint256[] amountsInBaseCurrency;\\n        uint256 plusDepositAmount;\\n        uint256 minusDepositAmount;\\n    }\\n\\n    struct ActualFunds {\\n        int256 presentValue;\\n        uint256 claimableAmount;\\n        uint256 debtAmount;\\n        int256 futureValue;\\n        uint256 workingLendOrdersAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 borrowedAmount;\\n        int256 genesisValue;\\n    }\\n\\n    struct CalculateActualFundsVars {\\n        bool isTotal;\\n        address market;\\n        bool isDefaultMarket;\\n        uint256[] maturities;\\n        int256 presentValueOfDefaultMarket;\\n    }\\n\\n    struct FutureValueVaultFunds {\\n        int256 genesisValue;\\n        int256 presentValue;\\n        int256 futureValue;\\n    }\\n\\n    struct InactiveBorrowOrdersFunds {\\n        int256 genesisValue;\\n        int256 presentValue;\\n        int256 futureValue;\\n        uint256 workingOrdersAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct InactiveLendOrdersFunds {\\n        int256 genesisValue;\\n        int256 presentValue;\\n        int256 futureValue;\\n        uint256 workingOrdersAmount;\\n        uint256 lentAmount;\\n    }\\n\\n    event OrderFilled(\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 amount,\\n        uint256 futureValue\\n    );\\n\\n    event OrdersFilledInAsync(\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 amount,\\n        uint256 futureValue\\n    );\\n\\n    event RedemptionExecuted(bytes32 ccy, address indexed user, int256 amount);\\n\\n    event LiquidationExecuted(\\n        address indexed user,\\n        bytes32 collateralCcy,\\n        bytes32 indexed debtCcy,\\n        uint256 indexed debtMaturity,\\n        uint256 debtAmount\\n    );\\n\\n    /**\\n     * @notice Converts the future value to the genesis value if there is balance in the past maturity.\\n     * @param _ccy Currency for pausing all lending markets\\n     * @param _user User's address\\n     * @return Current future value amount after update\\n     */\\n    function convertFutureValueToGenesisValue(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) public returns (int256) {\\n        address futureValueVault = Storage.slot().futureValueVaults[_ccy][\\n            Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n        ];\\n        (\\n            int256 removedAmount,\\n            int256 currentAmount,\\n            uint256 basisMaturity,\\n            bool isAllRemoved\\n        ) = IFutureValueVault(futureValueVault).removeFutureValue(_user, _maturity);\\n\\n        if (removedAmount != 0) {\\n            // Overwrite the `removedAmount` with the unsettled amount left of the Genesis Value\\n            // to handle the fractional amount generated by the lazy evaluation.\\n            if (isAllRemoved) {\\n                AddressResolverLib.genesisValueVault().updateGenesisValueWithResidualAmount(\\n                    _ccy,\\n                    _user,\\n                    basisMaturity\\n                );\\n            } else {\\n                AddressResolverLib.genesisValueVault().updateGenesisValueWithFutureValue(\\n                    _ccy,\\n                    _user,\\n                    basisMaturity,\\n                    removedAmount\\n                );\\n            }\\n        }\\n\\n        return currentAmount;\\n    }\\n\\n    function executeLiquidation(\\n        address _liquidator,\\n        address _user,\\n        bytes32 _collateralCcy,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity\\n    ) external {\\n        ExecuteLiquidationVars memory vars;\\n\\n        // In order to liquidate using user collateral, inactive order IDs must be cleaned\\n        // and converted to actual funds first.\\n        cleanUpFunds(_collateralCcy, _user);\\n        cleanUpFunds(_debtCcy, _user);\\n\\n        uint256 debtAmount = calculateActualFunds(_debtCcy, _debtMaturity, _user).debtAmount;\\n\\n        require(debtAmount != 0, \\\"No debt in the selected maturity\\\");\\n\\n        (\\n            vars.liquidationAmountInCollateralCcy,\\n            vars.protocolFeeInCollateralCcy,\\n            vars.liquidatorFeeInCollateralCcy\\n        ) = AddressResolverLib.tokenVault().getLiquidationAmount(\\n            _user,\\n            _collateralCcy,\\n            AddressResolverLib.currencyController().convert(_debtCcy, _collateralCcy, debtAmount)\\n        );\\n\\n        require(vars.liquidationAmountInCollateralCcy != 0, \\\"User has enough collateral\\\");\\n\\n        uint256 totalLiquidatedDebtAmount = AddressResolverLib.currencyController().convert(\\n            _collateralCcy,\\n            _debtCcy,\\n            vars.liquidationAmountInCollateralCcy\\n        );\\n\\n        vars.isDefaultMarket =\\n            Storage.slot().maturityLendingMarkets[_debtCcy][_debtMaturity] ==\\n            Storage.slot().lendingMarkets[_debtCcy][0];\\n        vars.isReserveFundPaused = AddressResolverLib.reserveFund().isPaused();\\n        vars.reserveFund = address(AddressResolverLib.reserveFund());\\n\\n        // Transfer collateral from users to liquidators and reserve funds.\\n        vars.receivedCollateralAmount =\\n            vars.liquidationAmountInCollateralCcy +\\n            vars.liquidatorFeeInCollateralCcy;\\n\\n        uint256 untransferredAmount = AddressResolverLib.tokenVault().transferFrom(\\n            _collateralCcy,\\n            _user,\\n            vars.reserveFund,\\n            vars.protocolFeeInCollateralCcy\\n        );\\n\\n        // If `untransferredAmount` is not 0, the user has not enough deposit in the collateral currency.\\n        // Therefore, the liquidators and the reserve fund obtain zero-coupon bonds instead of the user's collateral.\\n        if (untransferredAmount > 0) {\\n            _transferFunds(_user, vars.reserveFund, _collateralCcy, untransferredAmount.toInt256());\\n            untransferredAmount = vars.receivedCollateralAmount;\\n        } else {\\n            untransferredAmount = AddressResolverLib.tokenVault().transferFrom(\\n                _collateralCcy,\\n                _user,\\n                _liquidator,\\n                vars.receivedCollateralAmount\\n            );\\n        }\\n\\n        if (untransferredAmount > 0) {\\n            untransferredAmount = _transferFunds(\\n                _user,\\n                _liquidator,\\n                _collateralCcy,\\n                untransferredAmount.toInt256()\\n            ).toUint256();\\n        }\\n\\n        // Cover insolvent amounts using reserve funds.\\n        if (untransferredAmount > 0 && !vars.isReserveFundPaused) {\\n            uint256 insolventAmountInDebtCcy = AddressResolverLib.currencyController().convert(\\n                _collateralCcy,\\n                _debtCcy,\\n                untransferredAmount\\n            );\\n\\n            if (AddressResolverLib.tokenVault().getTotalCollateralAmount(_user) == 0) {\\n                insolventAmountInDebtCcy = _transferFunds(\\n                    vars.reserveFund,\\n                    _liquidator,\\n                    _debtCcy,\\n                    _debtMaturity,\\n                    insolventAmountInDebtCcy.toInt256(),\\n                    vars.isDefaultMarket\\n                ).toUint256();\\n            }\\n\\n            totalLiquidatedDebtAmount -= insolventAmountInDebtCcy;\\n        }\\n\\n        if (_liquidator.code.length > 0) {\\n            require(\\n                ILiquidationReceiver(_liquidator).executeOperationForCollateral(\\n                    _liquidator,\\n                    _user,\\n                    _collateralCcy,\\n                    vars.receivedCollateralAmount\\n                ),\\n                \\\"Invalid operation execution\\\"\\n            );\\n        }\\n\\n        // Transfer the debt from users to liquidators\\n        if (totalLiquidatedDebtAmount > 0) {\\n            vars.receivedDebtAmount = totalLiquidatedDebtAmount;\\n\\n            _transferFunds(\\n                _user,\\n                _liquidator,\\n                _debtCcy,\\n                _debtMaturity,\\n                -vars.receivedDebtAmount.toInt256(),\\n                vars.isDefaultMarket\\n            );\\n\\n            if (_liquidator.code.length > 0) {\\n                require(\\n                    ILiquidationReceiver(_liquidator).executeOperationForDebt(\\n                        _liquidator,\\n                        _user,\\n                        _collateralCcy,\\n                        vars.receivedCollateralAmount,\\n                        _debtCcy,\\n                        _debtMaturity,\\n                        vars.receivedDebtAmount\\n                    ),\\n                    \\\"Invalid operation execution\\\"\\n                );\\n            }\\n        }\\n\\n        require(AddressResolverLib.tokenVault().isCovered(msg.sender), \\\"Invalid liquidation\\\");\\n\\n        emit LiquidationExecuted(\\n            _user,\\n            _collateralCcy,\\n            _debtCcy,\\n            _debtMaturity,\\n            totalLiquidatedDebtAmount\\n        );\\n    }\\n\\n    function updateFunds(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        ProtocolTypes.Side _side,\\n        uint256 _filledAmount,\\n        uint256 _filledAmountInFV,\\n        uint256 _orderFeeRate,\\n        bool _isTaker\\n    ) external {\\n        address futureValueVault = Storage.slot().futureValueVaults[_ccy][\\n            Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n        ];\\n\\n        uint256 feeInFV = _isTaker\\n            ? _calculateOrderFeeAmount(_maturity, _filledAmountInFV, _orderFeeRate)\\n            : 0;\\n\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            AddressResolverLib.tokenVault().addDepositAmount(_user, _ccy, _filledAmount);\\n            IFutureValueVault(futureValueVault).addBorrowFutureValue(\\n                _user,\\n                _filledAmountInFV + feeInFV,\\n                _maturity,\\n                _isTaker\\n            );\\n        } else {\\n            AddressResolverLib.tokenVault().removeDepositAmount(_user, _ccy, _filledAmount);\\n            IFutureValueVault(futureValueVault).addLendFutureValue(\\n                _user,\\n                _filledAmountInFV - feeInFV,\\n                _maturity,\\n                _isTaker\\n            );\\n        }\\n\\n        if (feeInFV > 0) {\\n            address reserveFundAddr = address(AddressResolverLib.reserveFund());\\n            IFutureValueVault(futureValueVault).addLendFutureValue(\\n                reserveFundAddr,\\n                feeInFV,\\n                _maturity,\\n                _side == ProtocolTypes.Side.LEND\\n            );\\n\\n            registerCurrencyAndMaturity(_ccy, _maturity, reserveFundAddr);\\n        }\\n\\n        emit OrderFilled(_user, _ccy, _side, _maturity, _filledAmount, _filledAmountInFV);\\n    }\\n\\n    function registerCurrencyAndMaturity(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) public {\\n        if (!Storage.slot().usedMaturities[_ccy][_user].contains(_maturity)) {\\n            Storage.slot().usedMaturities[_ccy][_user].add(_maturity);\\n\\n            if (!Storage.slot().usedCurrencies[_user].contains(_ccy)) {\\n                Storage.slot().usedCurrencies[_user].add(_ccy);\\n            }\\n        }\\n    }\\n\\n    function executeRedemption(\\n        bytes32 _redemptionCcy,\\n        bytes32 _collateralCcy,\\n        address _user\\n    ) external {\\n        int256 redemptionAmount = _resetFunds(_redemptionCcy, _user);\\n\\n        if (redemptionAmount > 0) {\\n            _addDepositAtMarketTerminationPrice(\\n                _redemptionCcy,\\n                _user,\\n                redemptionAmount.toUint256()\\n            );\\n\\n            emit RedemptionExecuted(_redemptionCcy, _user, redemptionAmount);\\n        } else if (redemptionAmount < 0) {\\n            _removeDepositAtMarketTerminationPrice(\\n                _redemptionCcy,\\n                _user,\\n                (-redemptionAmount).toUint256(),\\n                _collateralCcy\\n            );\\n            emit RedemptionExecuted(_redemptionCcy, _user, redemptionAmount);\\n        }\\n    }\\n\\n    function calculateActualFunds(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) public view returns (ActualFunds memory actualFunds) {\\n        CalculateActualFundsVars memory vars;\\n\\n        if (_maturity == 0) {\\n            vars.isTotal = true;\\n            vars.market = Storage.slot().lendingMarkets[_ccy][0];\\n            vars.isDefaultMarket = true;\\n        } else {\\n            vars.isTotal = false;\\n            vars.market = Storage.slot().maturityLendingMarkets[_ccy][_maturity];\\n            vars.isDefaultMarket = vars.market == Storage.slot().lendingMarkets[_ccy][0];\\n        }\\n        actualFunds.genesisValue = AddressResolverLib.genesisValueVault().getGenesisValue(\\n            _ccy,\\n            _user\\n        );\\n\\n        vars.maturities = getUsedMaturities(_ccy, _user);\\n\\n        for (uint256 i = 0; i < vars.maturities.length; i++) {\\n            address currentMarket = Storage.slot().maturityLendingMarkets[_ccy][vars.maturities[i]];\\n            uint256 currentMaturity = ILendingMarket(currentMarket).getMaturity();\\n            bool isDefaultMarket = currentMarket == Storage.slot().lendingMarkets[_ccy][0];\\n\\n            if (vars.isDefaultMarket || currentMarket == vars.market) {\\n                // Get current funds from Future Value Vault by lazy evaluations.\\n                FutureValueVaultFunds memory futureValueVaultFunds = _getFundsFromFutureValueVault(\\n                    _ccy,\\n                    _user,\\n                    vars,\\n                    currentMaturity,\\n                    currentMarket,\\n                    isDefaultMarket\\n                );\\n                // Get current funds from borrowing orders by lazy evaluations.\\n                InactiveBorrowOrdersFunds\\n                    memory borrowOrdersFunds = _getFundsFromInactiveBorrowOrders(\\n                        _ccy,\\n                        _user,\\n                        vars,\\n                        currentMaturity,\\n                        currentMarket,\\n                        isDefaultMarket\\n                    );\\n                // Get current funds from lending orders by lazy evaluations.\\n                InactiveLendOrdersFunds memory lendOrdersFunds = _getFundsFromInactiveLendOrders(\\n                    _ccy,\\n                    _user,\\n                    vars,\\n                    currentMaturity,\\n                    currentMarket,\\n                    isDefaultMarket\\n                );\\n\\n                // Set genesis value.\\n                actualFunds.genesisValue +=\\n                    futureValueVaultFunds.genesisValue -\\n                    borrowOrdersFunds.genesisValue +\\n                    lendOrdersFunds.genesisValue;\\n\\n                // Set present value.\\n                int256 presentValue = futureValueVaultFunds.presentValue -\\n                    borrowOrdersFunds.presentValue +\\n                    lendOrdersFunds.presentValue;\\n\\n                actualFunds.presentValue += presentValue;\\n\\n                if (isDefaultMarket) {\\n                    vars.presentValueOfDefaultMarket = presentValue;\\n                }\\n\\n                if (presentValue > 0) {\\n                    actualFunds.claimableAmount += presentValue.toUint256();\\n                } else if (presentValue < 0) {\\n                    actualFunds.debtAmount += (-presentValue).toUint256();\\n                }\\n\\n                // Set future value.\\n                // Note: When calculating total funds, total future value will be 0 because different maturities can not be added.\\n                if (!vars.isTotal) {\\n                    actualFunds.futureValue +=\\n                        futureValueVaultFunds.futureValue -\\n                        borrowOrdersFunds.futureValue +\\n                        lendOrdersFunds.futureValue;\\n                }\\n\\n                actualFunds.workingBorrowOrdersAmount += borrowOrdersFunds.workingOrdersAmount;\\n                actualFunds.workingLendOrdersAmount += lendOrdersFunds.workingOrdersAmount;\\n                actualFunds.borrowedAmount += borrowOrdersFunds.borrowedAmount;\\n                actualFunds.lentAmount += lendOrdersFunds.lentAmount;\\n\\n                // Get balance fluctuation amount by auto-rolls\\n                if (actualFunds.genesisValue < 0) {\\n                    int256 fluctuation = AddressResolverLib\\n                        .genesisValueVault()\\n                        .calculateBalanceFluctuationByAutoRolls(\\n                            _ccy,\\n                            actualFunds.genesisValue,\\n                            vars.maturities[i],\\n                            i == vars.maturities.length - 1 ? 0 : vars.maturities[i + 1]\\n                        );\\n\\n                    actualFunds.genesisValue += fluctuation;\\n                }\\n            }\\n        }\\n\\n        // Add GV to PV & FV if the market is that the lending position is rolled to.\\n        if (vars.isDefaultMarket && actualFunds.genesisValue != 0) {\\n            int256 futureValue = AddressResolverLib.genesisValueVault().calculateFVFromGV(\\n                _ccy,\\n                0,\\n                actualFunds.genesisValue\\n            );\\n\\n            int256 presentValue = _calculatePVFromFV(\\n                futureValue,\\n                ILendingMarket(Storage.slot().lendingMarkets[_ccy][0]).getMidUnitPrice()\\n            );\\n\\n            actualFunds.presentValue += presentValue;\\n\\n            // Add GV to the claimable amount or debt amount.\\n            // Before that, offset the present value of the default market and the genesis value in addition.\\n            if (presentValue > 0) {\\n                if (vars.presentValueOfDefaultMarket < 0) {\\n                    int256 offsetAmount = presentValue > -vars.presentValueOfDefaultMarket\\n                        ? -vars.presentValueOfDefaultMarket\\n                        : presentValue;\\n                    actualFunds.debtAmount -= (offsetAmount).toUint256();\\n                    presentValue -= offsetAmount;\\n                }\\n\\n                actualFunds.claimableAmount += presentValue.toUint256();\\n            } else if (presentValue < 0) {\\n                if (vars.presentValueOfDefaultMarket > 0) {\\n                    int256 offsetAmount = -presentValue > vars.presentValueOfDefaultMarket\\n                        ? vars.presentValueOfDefaultMarket\\n                        : -presentValue;\\n\\n                    actualFunds.claimableAmount -= (offsetAmount).toUint256();\\n                    presentValue += offsetAmount;\\n                }\\n\\n                actualFunds.debtAmount += (-presentValue).toUint256();\\n            }\\n\\n            if (!vars.isTotal) {\\n                actualFunds.futureValue += futureValue;\\n            }\\n        }\\n    }\\n\\n    function calculateFunds(bytes32 _ccy, address _user)\\n        public\\n        view\\n        returns (\\n            uint256 workingLendOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 collateralAmount,\\n            uint256 lentAmount,\\n            uint256 workingBorrowOrdersAmount,\\n            uint256 debtAmount,\\n            uint256 borrowedAmount\\n        )\\n    {\\n        ActualFunds memory funds = calculateActualFunds(_ccy, 0, _user);\\n\\n        workingLendOrdersAmount = funds.workingLendOrdersAmount;\\n        lentAmount = funds.lentAmount;\\n        workingBorrowOrdersAmount = funds.workingBorrowOrdersAmount;\\n        borrowedAmount = funds.borrowedAmount;\\n        claimableAmount = funds.claimableAmount;\\n        debtAmount = funds.debtAmount;\\n\\n        if (claimableAmount > 0) {\\n            uint256 haircut = AddressResolverLib.currencyController().getHaircut(_ccy);\\n            collateralAmount = (claimableAmount * haircut).div(Constants.PCT_DIGIT);\\n        }\\n    }\\n\\n    function calculateTotalFundsInBaseCurrency(\\n        address _user,\\n        bytes32 _depositCcy,\\n        uint256 _depositAmount\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalWorkingLendOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalCollateralAmount,\\n            uint256 totalLentAmount,\\n            uint256 totalWorkingBorrowOrdersAmount,\\n            uint256 totalDebtAmount,\\n            uint256 totalBorrowedAmount,\\n            bool isEnoughDeposit\\n        )\\n    {\\n        EnumerableSet.Bytes32Set storage currencySet = Storage.slot().usedCurrencies[_user];\\n        CalculatedTotalFundInBaseCurrencyVars memory vars;\\n\\n        vars.isCollateral = AddressResolverLib.tokenVault().isCollateral(currencySet.values());\\n        vars.plusDepositAmount = _depositAmount;\\n\\n        // Calculate total funds from the user's order list\\n        for (uint256 i = 0; i < currencySet.length(); i++) {\\n            vars.ccy = currencySet.at(i);\\n            vars.amounts = new uint256[](7);\\n\\n            // 0: workingLendOrdersAmount\\n            // 1: claimableAmount\\n            // 2: collateralAmount\\n            // 3: lentAmount\\n            // 4: workingBorrowOrdersAmount\\n            // 5: debtAmount\\n            // 6: borrowedAmount\\n            (\\n                vars.amounts[0],\\n                vars.amounts[1],\\n                vars.amounts[2],\\n                vars.amounts[3],\\n                vars.amounts[4],\\n                vars.amounts[5],\\n                vars.amounts[6]\\n            ) = calculateFunds(vars.ccy, _user);\\n\\n            if (vars.ccy == _depositCcy) {\\n                // plusDepositAmount: depositAmount + borrowedAmount\\n                // minusDepositAmount: workingLendOrdersAmount + lentAmount\\n                vars.plusDepositAmount += vars.amounts[6];\\n                vars.minusDepositAmount += vars.amounts[0] + vars.amounts[3];\\n            }\\n\\n            vars.amountsInBaseCurrency = AddressResolverLib\\n                .currencyController()\\n                .convertToBaseCurrency(vars.ccy, vars.amounts);\\n\\n            totalClaimableAmount += vars.amountsInBaseCurrency[1];\\n            totalCollateralAmount += vars.amountsInBaseCurrency[2];\\n            totalWorkingBorrowOrdersAmount += vars.amountsInBaseCurrency[4];\\n            totalDebtAmount += vars.amountsInBaseCurrency[5];\\n\\n            // NOTE: Lent amount and working lend orders amount are excluded here as they are not used\\n            // for the collateral calculation.\\n            // Those amounts need only to check whether there is enough deposit amount in the selected currency.\\n            if (vars.isCollateral[i]) {\\n                totalWorkingLendOrdersAmount += vars.amountsInBaseCurrency[0];\\n                totalLentAmount += vars.amountsInBaseCurrency[3];\\n                totalBorrowedAmount += vars.amountsInBaseCurrency[6];\\n            }\\n        }\\n\\n        // Check if the user has enough collateral in the selected currency.\\n        isEnoughDeposit = vars.plusDepositAmount >= vars.minusDepositAmount;\\n    }\\n\\n    function getUsedMaturities(bytes32 _ccy, address _user)\\n        public\\n        view\\n        returns (uint256[] memory maturities)\\n    {\\n        maturities = Storage.slot().usedMaturities[_ccy][_user].values();\\n        if (maturities.length > 0) {\\n            maturities = QuickSort.sort(maturities);\\n        }\\n    }\\n\\n    function cleanUpAllFunds(address _user) external {\\n        EnumerableSet.Bytes32Set storage ccySet = Storage.slot().usedCurrencies[_user];\\n        for (uint256 i = 0; i < ccySet.length(); i++) {\\n            cleanUpFunds(ccySet.at(i), _user);\\n        }\\n    }\\n\\n    function cleanUpFunds(bytes32 _ccy, address _user)\\n        public\\n        returns (uint256 totalActiveOrderCount)\\n    {\\n        bool futureValueExists = false;\\n        uint256[] memory maturities = getUsedMaturities(_ccy, _user);\\n\\n        for (uint256 j = 0; j < maturities.length; j++) {\\n            ILendingMarket market = ILendingMarket(\\n                Storage.slot().maturityLendingMarkets[_ccy][maturities[j]]\\n            );\\n            uint256 activeMaturity = market.getMaturity();\\n            int256 currentFutureValue = convertFutureValueToGenesisValue(\\n                _ccy,\\n                activeMaturity,\\n                _user\\n            );\\n            (uint256 activeOrderCount, bool isCleaned) = _cleanUpOrders(\\n                _ccy,\\n                activeMaturity,\\n                _user\\n            );\\n\\n            totalActiveOrderCount += activeOrderCount;\\n\\n            if (isCleaned) {\\n                currentFutureValue = convertFutureValueToGenesisValue(_ccy, activeMaturity, _user);\\n            }\\n\\n            if (currentFutureValue != 0) {\\n                futureValueExists = true;\\n            }\\n\\n            if (currentFutureValue == 0 && activeOrderCount == 0) {\\n                Storage.slot().usedMaturities[_ccy][_user].remove(maturities[j]);\\n            }\\n\\n            AddressResolverLib.genesisValueVault().cleanUpGenesisValue(\\n                _ccy,\\n                _user,\\n                j == maturities.length - 1 ? 0 : maturities[j + 1]\\n            );\\n        }\\n\\n        if (\\n            totalActiveOrderCount == 0 &&\\n            !futureValueExists &&\\n            AddressResolverLib.genesisValueVault().getGenesisValue(_ccy, _user) == 0\\n        ) {\\n            Storage.slot().usedCurrencies[_user].remove(_ccy);\\n        }\\n    }\\n\\n    function _cleanUpOrders(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) internal returns (uint256 activeOrderCount, bool isCleaned) {\\n        address futureValueVault = Storage.slot().futureValueVaults[_ccy][\\n            Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n        ];\\n\\n        (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 userCurrentMaturity\\n        ) = ILendingMarket(Storage.slot().maturityLendingMarkets[_ccy][_maturity]).cleanUpOrders(\\n                _user\\n            );\\n\\n        if (removedLendOrderAmount > removedBorrowOrderAmount) {\\n            AddressResolverLib.tokenVault().removeDepositAmount(\\n                _user,\\n                _ccy,\\n                removedLendOrderAmount - removedBorrowOrderAmount\\n            );\\n        } else if (removedLendOrderAmount < removedBorrowOrderAmount) {\\n            AddressResolverLib.tokenVault().addDepositAmount(\\n                _user,\\n                _ccy,\\n                removedBorrowOrderAmount - removedLendOrderAmount\\n            );\\n        }\\n\\n        if (removedLendOrderFutureValue > 0) {\\n            IFutureValueVault(futureValueVault).addLendFutureValue(\\n                _user,\\n                removedLendOrderFutureValue,\\n                userCurrentMaturity,\\n                false\\n            );\\n            emit OrdersFilledInAsync(\\n                _user,\\n                _ccy,\\n                ProtocolTypes.Side.LEND,\\n                userCurrentMaturity,\\n                removedLendOrderAmount,\\n                removedLendOrderFutureValue\\n            );\\n        }\\n\\n        if (removedBorrowOrderFutureValue > 0) {\\n            IFutureValueVault(futureValueVault).addBorrowFutureValue(\\n                _user,\\n                removedBorrowOrderFutureValue,\\n                userCurrentMaturity,\\n                false\\n            );\\n            emit OrdersFilledInAsync(\\n                _user,\\n                _ccy,\\n                ProtocolTypes.Side.BORROW,\\n                userCurrentMaturity,\\n                removedBorrowOrderAmount,\\n                removedBorrowOrderFutureValue\\n            );\\n        }\\n\\n        isCleaned = (removedLendOrderFutureValue + removedBorrowOrderFutureValue) > 0;\\n        activeOrderCount = activeLendOrderCount + activeBorrowOrderCount;\\n    }\\n\\n    function _getFundsFromFutureValueVault(\\n        bytes32 _ccy,\\n        address _user,\\n        CalculateActualFundsVars memory vars,\\n        uint256 currentMaturity,\\n        address currentMarket,\\n        bool isDefaultMarket\\n    ) internal view returns (FutureValueVaultFunds memory funds) {\\n        (int256 futureValueInMaturity, uint256 fvMaturity) = IFutureValueVault(\\n            Storage.slot().futureValueVaults[_ccy][currentMarket]\\n        ).getFutureValue(_user);\\n\\n        if (futureValueInMaturity != 0) {\\n            if (currentMaturity != fvMaturity) {\\n                if (vars.isDefaultMarket) {\\n                    funds.genesisValue = AddressResolverLib.genesisValueVault().calculateGVFromFV(\\n                        _ccy,\\n                        fvMaturity,\\n                        futureValueInMaturity\\n                    );\\n                }\\n            } else if (currentMaturity == fvMaturity) {\\n                if (vars.isTotal && !isDefaultMarket) {\\n                    (funds.presentValue, funds.futureValue) = _calculatePVandFVInDefaultMarket(\\n                        _ccy,\\n                        fvMaturity,\\n                        futureValueInMaturity\\n                    );\\n                } else if (vars.isTotal || !vars.isDefaultMarket || isDefaultMarket) {\\n                    funds.futureValue = futureValueInMaturity;\\n                    funds.presentValue = _calculatePVFromFV(\\n                        _ccy,\\n                        fvMaturity,\\n                        futureValueInMaturity\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getFundsFromInactiveBorrowOrders(\\n        bytes32 _ccy,\\n        address _user,\\n        CalculateActualFundsVars memory vars,\\n        uint256 currentMaturity,\\n        address currentMarket,\\n        bool isDefaultMarket\\n    ) internal view returns (InactiveBorrowOrdersFunds memory funds) {\\n        uint256 filledFutureValue;\\n        uint256 orderMaturity;\\n        (\\n            funds.workingOrdersAmount,\\n            funds.borrowedAmount,\\n            filledFutureValue,\\n            orderMaturity\\n        ) = ILendingMarket(currentMarket).getTotalAmountFromBorrowOrders(_user);\\n\\n        if (filledFutureValue != 0) {\\n            if (currentMaturity != orderMaturity) {\\n                if (vars.isDefaultMarket) {\\n                    funds.genesisValue = AddressResolverLib.genesisValueVault().calculateGVFromFV(\\n                        _ccy,\\n                        orderMaturity,\\n                        filledFutureValue.toInt256()\\n                    );\\n                }\\n            } else if (currentMaturity == orderMaturity) {\\n                if (vars.isTotal && !isDefaultMarket) {\\n                    (funds.presentValue, funds.futureValue) = _calculatePVandFVInDefaultMarket(\\n                        _ccy,\\n                        orderMaturity,\\n                        filledFutureValue.toInt256()\\n                    );\\n                } else if (vars.isTotal || !vars.isDefaultMarket || isDefaultMarket) {\\n                    funds.futureValue = filledFutureValue.toInt256();\\n                    funds.presentValue = _calculatePVFromFV(_ccy, orderMaturity, funds.futureValue);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getFundsFromInactiveLendOrders(\\n        bytes32 _ccy,\\n        address _user,\\n        CalculateActualFundsVars memory vars,\\n        uint256 currentMaturity,\\n        address currentMarket,\\n        bool isDefaultMarket\\n    ) internal view returns (InactiveLendOrdersFunds memory funds) {\\n        uint256 filledFutureValue;\\n        uint256 orderMaturity;\\n        (\\n            funds.workingOrdersAmount,\\n            funds.lentAmount,\\n            filledFutureValue,\\n            orderMaturity\\n        ) = ILendingMarket(currentMarket).getTotalAmountFromLendOrders(_user);\\n\\n        if (filledFutureValue != 0) {\\n            if (currentMaturity != orderMaturity) {\\n                if (vars.isDefaultMarket) {\\n                    funds.genesisValue += AddressResolverLib.genesisValueVault().calculateGVFromFV(\\n                        _ccy,\\n                        orderMaturity,\\n                        filledFutureValue.toInt256()\\n                    );\\n                }\\n            } else if (currentMaturity == orderMaturity) {\\n                if (vars.isTotal && !isDefaultMarket) {\\n                    (funds.presentValue, funds.futureValue) = _calculatePVandFVInDefaultMarket(\\n                        _ccy,\\n                        orderMaturity,\\n                        filledFutureValue.toInt256()\\n                    );\\n                } else if (vars.isTotal || !vars.isDefaultMarket || isDefaultMarket) {\\n                    funds.futureValue = filledFutureValue.toInt256();\\n                    funds.presentValue = _calculatePVFromFV(_ccy, orderMaturity, funds.futureValue);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _calculatePVandFVInDefaultMarket(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        int256 _futureValueInMaturity\\n    ) internal view returns (int256 presentValue, int256 futureValue) {\\n        address destinationMarket = Storage.slot().lendingMarkets[_ccy][0];\\n        uint256 unitPriceInDestinationMaturity = ILendingMarket(destinationMarket)\\n            .getMidUnitPrice();\\n\\n        if (AddressResolverLib.genesisValueVault().getAutoRollLog(_ccy, _maturity).unitPrice == 0) {\\n            presentValue = _calculatePVFromFV(_ccy, _maturity, _futureValueInMaturity);\\n            futureValue = (presentValue * Constants.PRICE_DIGIT.toInt256()).div(\\n                unitPriceInDestinationMaturity.toInt256()\\n            );\\n        } else {\\n            futureValue = AddressResolverLib.genesisValueVault().calculateFVFromFV(\\n                _ccy,\\n                _maturity,\\n                0,\\n                _futureValueInMaturity\\n            );\\n            presentValue = _calculatePVFromFV(futureValue, unitPriceInDestinationMaturity);\\n        }\\n    }\\n\\n    function _calculatePVFromFV(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        int256 _futureValue\\n    ) internal view returns (int256 presentValue) {\\n        uint256 unitPriceInBasisMaturity = ILendingMarket(\\n            Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n        ).getMidUnitPrice();\\n        presentValue = _calculatePVFromFV(_futureValue, unitPriceInBasisMaturity);\\n    }\\n\\n    function _calculateFVFromPV(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        int256 _presentValue\\n    ) internal view returns (int256) {\\n        int256 unitPrice = ILendingMarket(Storage.slot().maturityLendingMarkets[_ccy][_maturity])\\n            .getMidUnitPrice()\\n            .toInt256();\\n\\n        // NOTE: The formula is: futureValue = presentValue / unitPrice.\\n        return (_presentValue * Constants.PRICE_DIGIT.toInt256()).div(unitPrice);\\n    }\\n\\n    function _calculatePVFromFV(int256 _futureValue, uint256 _unitPrice)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        // NOTE: The formula is: presentValue = futureValue * unitPrice.\\n        return (_futureValue * _unitPrice.toInt256()).div(Constants.PRICE_DIGIT.toInt256());\\n    }\\n\\n    function _convertToBaseCurrencyAtMarketTerminationPrice(bytes32 _ccy, uint256 _amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_ccy == Storage.slot().baseCurrency) {\\n            return _amount;\\n        } else {\\n            uint8 decimals = AddressResolverLib.currencyController().getDecimals(_ccy);\\n\\n            return\\n                (_amount * Storage.slot().marketTerminationPrices[_ccy].toUint256()).div(\\n                    (10**decimals)\\n                );\\n        }\\n    }\\n\\n    function _convertFromBaseCurrencyAtMarketTerminationPrice(bytes32 _ccy, uint256 _amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_ccy == Storage.slot().baseCurrency) {\\n            return _amount;\\n        } else {\\n            uint8 decimals = AddressResolverLib.currencyController().getDecimals(_ccy);\\n            return\\n                (_amount * 10**decimals).div(\\n                    Storage.slot().marketTerminationPrices[_ccy].toUint256()\\n                );\\n        }\\n    }\\n\\n    function _transferFunds(\\n        address _from,\\n        address _to,\\n        bytes32 _ccy,\\n        int256 _amount\\n    ) internal returns (int256 untransferredAmount) {\\n        uint256[] memory maturities = getUsedMaturities(_ccy, _from);\\n        address defaultMarketAddress = Storage.slot().lendingMarkets[_ccy][0];\\n        untransferredAmount = _amount;\\n\\n        for (uint256 i; i < maturities.length; i++) {\\n            if (untransferredAmount == 0) {\\n                break;\\n            }\\n\\n            untransferredAmount = _transferFunds(\\n                _from,\\n                _to,\\n                _ccy,\\n                maturities[i],\\n                untransferredAmount,\\n                Storage.slot().maturityLendingMarkets[_ccy][maturities[i]] == defaultMarketAddress\\n            );\\n        }\\n    }\\n\\n    function _transferFunds(\\n        address _from,\\n        address _to,\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        int256 _amount,\\n        bool _isDefaultMarket\\n    ) internal returns (int256 untransferredAmount) {\\n        untransferredAmount = _amount;\\n        bool isDebt = _amount < 0;\\n\\n        if (_isDefaultMarket) {\\n            int256 userGVAmount = AddressResolverLib.genesisValueVault().getGenesisValue(\\n                _ccy,\\n                _from\\n            );\\n\\n            if ((isDebt && userGVAmount < 0) || (!isDebt && userGVAmount > 0)) {\\n                uint256 currentMaturity = AddressResolverLib.genesisValueVault().getCurrentMaturity(\\n                    _ccy\\n                );\\n\\n                int256 gvAmount = AddressResolverLib.genesisValueVault().calculateGVFromFV(\\n                    _ccy,\\n                    0,\\n                    _calculateFVFromPV(_ccy, currentMaturity, untransferredAmount)\\n                );\\n\\n                if ((isDebt && userGVAmount > gvAmount) || (!isDebt && userGVAmount < gvAmount)) {\\n                    gvAmount = userGVAmount;\\n                }\\n\\n                // Due to the negative genesis value, the liquidator's genesis value is decreased.\\n                AddressResolverLib.genesisValueVault().transferFrom(_ccy, _from, _to, gvAmount);\\n\\n                untransferredAmount -= _calculatePVFromFV(\\n                    _ccy,\\n                    currentMaturity,\\n                    AddressResolverLib.genesisValueVault().calculateFVFromGV(_ccy, 0, gvAmount)\\n                );\\n            }\\n        }\\n\\n        IFutureValueVault futureValueVault = IFutureValueVault(\\n            Storage.slot().futureValueVaults[_ccy][\\n                Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n            ]\\n        );\\n\\n        (int256 userFVAmount, ) = futureValueVault.getFutureValue(_from);\\n\\n        if ((isDebt && userFVAmount < 0) || (!isDebt && userFVAmount > 0)) {\\n            int256 fvAmount = _calculateFVFromPV(_ccy, _maturity, untransferredAmount);\\n\\n            if ((isDebt && userFVAmount > fvAmount) || (!isDebt && userFVAmount < fvAmount)) {\\n                fvAmount = userFVAmount;\\n            }\\n\\n            futureValueVault.transferFrom(_from, _to, fvAmount, _maturity);\\n            untransferredAmount -= _calculatePVFromFV(_ccy, _maturity, fvAmount);\\n        }\\n\\n        if (_amount != untransferredAmount) {\\n            registerCurrencyAndMaturity(_ccy, _maturity, _to);\\n        }\\n    }\\n\\n    function _calculateOrderFeeAmount(\\n        uint256 _maturity,\\n        uint256 _amount,\\n        uint256 _orderFeeRate\\n    ) internal view returns (uint256 orderFeeAmount) {\\n        require(block.timestamp < _maturity, \\\"Invalid maturity\\\");\\n        uint256 currentMaturity = _maturity - block.timestamp;\\n\\n        // NOTE: The formula is:\\n        // actualRate = feeRate * (currentMaturity / SECONDS_IN_YEAR)\\n        // orderFeeAmount = amount * actualRate\\n        orderFeeAmount = (_orderFeeRate * currentMaturity * _amount).div(\\n            Constants.SECONDS_IN_YEAR * Constants.PCT_DIGIT\\n        );\\n    }\\n\\n    function _resetFunds(bytes32 _ccy, address _user) internal returns (int256 amount) {\\n        // First, clean up future values and genesis values to redeem those amounts.\\n        cleanUpFunds(_ccy, _user);\\n\\n        amount = calculateActualFunds(_ccy, 0, _user).presentValue;\\n\\n        uint256[] memory maturities = Storage.slot().usedMaturities[_ccy][_user].values();\\n        for (uint256 j; j < maturities.length; j++) {\\n            IFutureValueVault(\\n                Storage.slot().futureValueVaults[_ccy][\\n                    Storage.slot().maturityLendingMarkets[_ccy][maturities[j]]\\n                ]\\n            ).resetFutureValue(_user);\\n        }\\n\\n        AddressResolverLib.genesisValueVault().resetGenesisValue(_ccy, _user);\\n    }\\n\\n    function _addDepositAtMarketTerminationPrice(\\n        bytes32 _ccy,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        bytes32[] memory collateralCurrencies = AddressResolverLib\\n            .tokenVault()\\n            .getCollateralCurrencies();\\n\\n        uint256[] memory marketTerminationRatios = new uint256[](collateralCurrencies.length);\\n        uint256 marketTerminationRatioTotal;\\n\\n        for (uint256 i; i < collateralCurrencies.length; i++) {\\n            bytes32 ccy = collateralCurrencies[i];\\n            marketTerminationRatios[i] = Storage.slot().marketTerminationRatios[ccy];\\n            marketTerminationRatioTotal += marketTerminationRatios[i];\\n        }\\n\\n        uint256 amountInBaseCurrency = _convertToBaseCurrencyAtMarketTerminationPrice(\\n            _ccy,\\n            _amount\\n        );\\n\\n        for (uint256 i; i < collateralCurrencies.length; i++) {\\n            bytes32 ccy = collateralCurrencies[i];\\n            uint256 addedAmount = _convertFromBaseCurrencyAtMarketTerminationPrice(\\n                ccy,\\n                (amountInBaseCurrency * marketTerminationRatios[i]).div(marketTerminationRatioTotal)\\n            );\\n\\n            AddressResolverLib.tokenVault().addDepositAmount(_user, ccy, addedAmount);\\n        }\\n    }\\n\\n    function _removeDepositAtMarketTerminationPrice(\\n        bytes32 _ccy,\\n        address _user,\\n        uint256 _amount,\\n        bytes32 _collateralCcy\\n    ) internal {\\n        require(\\n            AddressResolverLib.tokenVault().isCollateral(_collateralCcy),\\n            \\\"Not registered as collateral\\\"\\n        );\\n\\n        uint256 depositAmount = AddressResolverLib.tokenVault().getDepositAmount(\\n            _user,\\n            _collateralCcy\\n        );\\n\\n        uint256 removedAmount = _convertFromBaseCurrencyAtMarketTerminationPrice(\\n            _collateralCcy,\\n            _convertToBaseCurrencyAtMarketTerminationPrice(_ccy, _amount)\\n        );\\n\\n        require(depositAmount >= removedAmount, \\\"Not enough collateral\\\");\\n\\n        AddressResolverLib.tokenVault().removeDepositAmount(_user, _collateralCcy, removedAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xd3ee64e3589b7e1170c3a754f04386cbb9c06cb6b67834eb0bb5713df89de639\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/LendingMarketConfigurationLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// libraries\\nimport {Constants} from \\\"../../libraries/Constants.sol\\\";\\nimport {RoundingUint256} from \\\"../../libraries/math/RoundingUint256.sol\\\";\\n// storages\\nimport {LendingMarketConfigurationStorage as Storage} from \\\"../../storages/LendingMarketConfigurationStorage.sol\\\";\\n\\nlibrary LendingMarketConfigurationLogic {\\n    using RoundingUint256 for uint256;\\n\\n    event OrderFeeRateUpdated(bytes32 ccy, uint256 previousRate, uint256 rate);\\n    event AutoRollFeeRateUpdated(bytes32 ccy, uint256 previousRate, uint256 rate);\\n    event CircuitBreakerLimitRangeUpdated(bytes32 ccy, uint256 previousRate, uint256 rate);\\n    event ObservationPeriodUpdated(uint256 previousPeriod, uint256 period);\\n\\n    function getCircuitBreakerLimitRange(bytes32 _ccy) public view returns (uint256) {\\n        return Storage.slot().circuitBreakerLimitRanges[_ccy];\\n    }\\n\\n    function getOrderFeeRate(bytes32 _ccy) public view returns (uint256) {\\n        return Storage.slot().orderFeeRates[_ccy];\\n    }\\n\\n    function getObservationPeriod() public view returns (uint256) {\\n        return Storage.slot().observationPeriod;\\n    }\\n\\n    function calculateOrderFeeAmount(\\n        bytes32 _ccy,\\n        uint256 _amount,\\n        uint256 _maturity\\n    ) external view returns (uint256 orderFeeAmount) {\\n        require(block.timestamp < _maturity, \\\"Invalid maturity\\\");\\n        uint256 currentMaturity = _maturity - block.timestamp;\\n\\n        // NOTE: The formula is:\\n        // actualRate = feeRate * (currentMaturity / SECONDS_IN_YEAR)\\n        // orderFeeAmount = amount * actualRate\\n        orderFeeAmount = (Storage.slot().orderFeeRates[_ccy] * currentMaturity * _amount).div(\\n            Constants.SECONDS_IN_YEAR * Constants.PCT_DIGIT\\n        );\\n    }\\n\\n    function updateOrderFeeRate(bytes32 _ccy, uint256 _orderFeeRate) external {\\n        require(_orderFeeRate <= Constants.PCT_DIGIT, \\\"Invalid order fee rate\\\");\\n        uint256 previousRate = Storage.slot().orderFeeRates[_ccy];\\n\\n        if (_orderFeeRate != previousRate) {\\n            Storage.slot().orderFeeRates[_ccy] = _orderFeeRate;\\n\\n            emit OrderFeeRateUpdated(_ccy, previousRate, _orderFeeRate);\\n        }\\n    }\\n\\n    function updateAutoRollFeeRate(bytes32 _ccy, uint256 _autoRollFeeRate) external {\\n        require(_autoRollFeeRate <= Constants.PCT_DIGIT, \\\"Invalid auto-roll fee rate\\\");\\n        uint256 previousRate = Storage.slot().autoRollFeeRates[_ccy];\\n\\n        if (_autoRollFeeRate != previousRate) {\\n            Storage.slot().autoRollFeeRates[_ccy] = _autoRollFeeRate;\\n\\n            emit AutoRollFeeRateUpdated(_ccy, previousRate, _autoRollFeeRate);\\n        }\\n    }\\n\\n    function updateCircuitBreakerLimitRange(bytes32 _ccy, uint256 _limitRange) external {\\n        require(_limitRange <= Constants.PCT_DIGIT, \\\"Invalid circuit breaker limit range\\\");\\n        uint256 previousRange = Storage.slot().circuitBreakerLimitRanges[_ccy];\\n\\n        if (_limitRange != previousRange) {\\n            Storage.slot().circuitBreakerLimitRanges[_ccy] = _limitRange;\\n\\n            emit CircuitBreakerLimitRangeUpdated(_ccy, previousRange, _limitRange);\\n        }\\n    }\\n\\n    function updateObservationPeriod(uint256 _observationPeriod) external {\\n        uint256 previousPeriod = Storage.slot().observationPeriod;\\n\\n        if (_observationPeriod != previousPeriod) {\\n            Storage.slot().observationPeriod = _observationPeriod;\\n\\n            emit ObservationPeriodUpdated(previousPeriod, _observationPeriod);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x56ddfc5bb04cf43fc3e6e601bdcf100df6c425edb63182a5b9d6ec023c27d3a6\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/LendingMarketOperationLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"../../../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeCast} from \\\"../../../dependencies/openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n// interfaces\\nimport {ILendingMarket} from \\\"../../interfaces/ILendingMarket.sol\\\";\\nimport {IFutureValueVault} from \\\"../../interfaces/IFutureValueVault.sol\\\";\\n// libraries\\nimport {AddressResolverLib} from \\\"../AddressResolverLib.sol\\\";\\nimport {BokkyPooBahsDateTimeLibrary as TimeLibrary} from \\\"../BokkyPooBahsDateTimeLibrary.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\nimport {RoundingInt256} from \\\"../math/RoundingInt256.sol\\\";\\n// storages\\nimport {LendingMarketControllerStorage as Storage, ObservationPeriodLog} from \\\"../../storages/LendingMarketControllerStorage.sol\\\";\\n\\nlibrary LendingMarketOperationLogic {\\n    using SafeCast for uint256;\\n    using RoundingUint256 for uint256;\\n    using SafeCast for uint256;\\n    using RoundingInt256 for int256;\\n\\n    event LendingMarketCreated(\\n        bytes32 indexed ccy,\\n        address indexed marketAddr,\\n        address futureValueVault,\\n        uint256 index,\\n        uint256 openingDate,\\n        uint256 maturity\\n    );\\n\\n    event LendingMarketsRotated(bytes32 ccy, uint256 oldMaturity, uint256 newMaturity);\\n    event EmergencyTerminationExecuted(uint256 timestamp);\\n\\n    function initializeCurrencySetting(\\n        bytes32 _ccy,\\n        uint256 _genesisDate,\\n        uint256 _compoundFactor\\n    ) external {\\n        AddressResolverLib.genesisValueVault().initializeCurrencySetting(\\n            _ccy,\\n            36,\\n            _compoundFactor,\\n            calculateNextMaturity(_genesisDate, Storage.slot().marketBasePeriod)\\n        );\\n\\n        Storage.slot().genesisDates[_ccy] = _genesisDate;\\n    }\\n\\n    function createLendingMarket(bytes32 _ccy, uint256 _openingDate) external {\\n        require(\\n            AddressResolverLib.genesisValueVault().isInitialized(_ccy),\\n            \\\"Lending market hasn't been initialized in the currency\\\"\\n        );\\n        require(\\n            AddressResolverLib.currencyController().currencyExists(_ccy),\\n            \\\"Non supported currency\\\"\\n        );\\n\\n        uint256 maturity;\\n        if (Storage.slot().lendingMarkets[_ccy].length == 0) {\\n            maturity = AddressResolverLib.genesisValueVault().getCurrentMaturity(_ccy);\\n        } else {\\n            uint256 lastMaturity = ILendingMarket(\\n                Storage.slot().lendingMarkets[_ccy][Storage.slot().lendingMarkets[_ccy].length - 1]\\n            ).getMaturity();\\n            maturity = calculateNextMaturity(lastMaturity, Storage.slot().marketBasePeriod);\\n        }\\n\\n        require(_openingDate < maturity, \\\"Market opening date must be before maturity date\\\");\\n\\n        address market = AddressResolverLib.beaconProxyController().deployLendingMarket(\\n            _ccy,\\n            maturity,\\n            _openingDate\\n        );\\n        address futureValueVault = AddressResolverLib\\n            .beaconProxyController()\\n            .deployFutureValueVault();\\n\\n        Storage.slot().lendingMarkets[_ccy].push(market);\\n        Storage.slot().maturityLendingMarkets[_ccy][maturity] = market;\\n        Storage.slot().futureValueVaults[_ccy][market] = futureValueVault;\\n\\n        emit LendingMarketCreated(\\n            _ccy,\\n            market,\\n            futureValueVault,\\n            Storage.slot().lendingMarkets[_ccy].length,\\n            _openingDate,\\n            maturity\\n        );\\n    }\\n\\n    function executeItayoseCall(bytes32 _ccy, uint256 _maturity)\\n        external\\n        returns (\\n            ILendingMarket.PartiallyFilledOrder memory partiallyFilledLendingOrder,\\n            ILendingMarket.PartiallyFilledOrder memory partiallyFilledBorrowingOrder\\n        )\\n    {\\n        address marketAddr = Storage.slot().maturityLendingMarkets[_ccy][_maturity];\\n        ILendingMarket market = ILendingMarket(marketAddr);\\n\\n        if (market.isItayosePeriod()) {\\n            uint256 openingUnitPrice;\\n            uint256 openingDate;\\n            uint256 totalOffsetAmount;\\n\\n            (\\n                openingUnitPrice,\\n                totalOffsetAmount,\\n                openingDate,\\n                partiallyFilledLendingOrder,\\n                partiallyFilledBorrowingOrder\\n            ) = market.executeItayoseCall();\\n\\n            if (totalOffsetAmount > 0) {\\n                address futureValueVault = Storage.slot().futureValueVaults[_ccy][marketAddr];\\n                IFutureValueVault(futureValueVault).addInitialTotalSupply(\\n                    _maturity,\\n                    (totalOffsetAmount * Constants.PRICE_DIGIT).div(openingUnitPrice).toInt256()\\n                );\\n            }\\n\\n            // Save the openingUnitPrice as first compound factor\\n            // if it is a first Itayose call at the nearest market.\\n            if (openingUnitPrice > 0 && Storage.slot().lendingMarkets[_ccy][0] == address(market)) {\\n                // Convert the openingUnitPrice determined by Itayose to the unit price on the Genesis Date.\\n                uint256 convertedUnitPrice = _convertUnitPrice(\\n                    openingUnitPrice,\\n                    _maturity,\\n                    openingDate,\\n                    Storage.slot().genesisDates[_ccy]\\n                );\\n\\n                AddressResolverLib.genesisValueVault().updateInitialCompoundFactor(\\n                    _ccy,\\n                    convertedUnitPrice\\n                );\\n            }\\n        }\\n    }\\n\\n    function rotateLendingMarkets(bytes32 _ccy, uint256 _autoRollFeeRate)\\n        external\\n        returns (uint256 toMaturity)\\n    {\\n        address[] storage markets = Storage.slot().lendingMarkets[_ccy];\\n        address currentMarketAddr = markets[0];\\n        address nextMarketAddr = markets[1];\\n        uint256 nextMaturity = ILendingMarket(nextMarketAddr).getMaturity();\\n\\n        // Reopen the market matured with new maturity\\n        toMaturity = calculateNextMaturity(\\n            ILendingMarket(markets[markets.length - 1]).getMaturity(),\\n            Storage.slot().marketBasePeriod\\n        );\\n\\n        // The market that is moved to the last of the list opens again when the next market is matured.\\n        // Just before the opening, the moved market needs the Itayose execution.\\n        uint256 fromMaturity = ILendingMarket(currentMarketAddr).openMarket(\\n            toMaturity,\\n            nextMaturity\\n        );\\n\\n        // Rotate the order of the market\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            address marketAddr = (markets.length - 1) == i ? currentMarketAddr : markets[i + 1];\\n            markets[i] = marketAddr;\\n        }\\n\\n        AddressResolverLib.genesisValueVault().executeAutoRoll(\\n            _ccy,\\n            fromMaturity,\\n            nextMaturity,\\n            _calculateAutoRollUnitPrice(_ccy, nextMaturity),\\n            _autoRollFeeRate\\n        );\\n\\n        Storage.slot().maturityLendingMarkets[_ccy][toMaturity] = currentMarketAddr;\\n\\n        emit LendingMarketsRotated(_ccy, fromMaturity, toMaturity);\\n    }\\n\\n    function executeEmergencyTermination() external {\\n        Storage.slot().marketTerminationDate = block.timestamp;\\n\\n        bytes32[] memory currencies = AddressResolverLib.currencyController().getCurrencies();\\n        bytes32[] memory collateralCurrencies = AddressResolverLib\\n            .tokenVault()\\n            .getCollateralCurrencies();\\n\\n        for (uint256 i = 0; i < currencies.length; i++) {\\n            bytes32 ccy = currencies[i];\\n\\n            pauseLendingMarkets(ccy);\\n            Storage.slot().marketTerminationPrices[ccy] = AddressResolverLib\\n                .currencyController()\\n                .getLastPrice(ccy);\\n        }\\n\\n        for (uint256 i = 0; i < collateralCurrencies.length; i++) {\\n            bytes32 ccy = collateralCurrencies[i];\\n            address tokenAddress = AddressResolverLib.tokenVault().getTokenAddress(ccy);\\n            uint256 balance = IERC20(tokenAddress).balanceOf(\\n                address(AddressResolverLib.tokenVault())\\n            );\\n\\n            Storage.slot().marketTerminationRatios[ccy] = ccy == Storage.slot().baseCurrency\\n                ? balance\\n                : AddressResolverLib.currencyController().convertToBaseCurrency(ccy, balance);\\n        }\\n\\n        emit EmergencyTerminationExecuted(block.timestamp);\\n    }\\n\\n    function pauseLendingMarkets(bytes32 _ccy) public {\\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\\n            ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy][i]);\\n            market.pauseMarket();\\n        }\\n    }\\n\\n    function unpauseLendingMarkets(bytes32 _ccy) public {\\n        for (uint256 i = 0; i < Storage.slot().lendingMarkets[_ccy].length; i++) {\\n            ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy][i]);\\n            market.unpauseMarket();\\n        }\\n    }\\n\\n    function updateOrderLogs(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _observationPeriod,\\n        uint256 _filledUnitPrice,\\n        uint256 _filledAmount,\\n        uint256 _filledFutureValue\\n    ) external {\\n        if (\\n            Storage.slot().lendingMarkets[_ccy][1] ==\\n            Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n        ) {\\n            uint256 nearestMaturity = ILendingMarket(Storage.slot().lendingMarkets[_ccy][0])\\n                .getMaturity();\\n\\n            if (Storage.slot().observationPeriodLogs[_ccy][_maturity].totalAmount == 0) {\\n                Storage.slot().estimatedAutoRollUnitPrice[_ccy][_maturity] = _convertUnitPrice(\\n                    _filledUnitPrice,\\n                    _maturity,\\n                    block.timestamp,\\n                    nearestMaturity\\n                );\\n            }\\n\\n            if (\\n                (block.timestamp < nearestMaturity) &&\\n                (block.timestamp >= (nearestMaturity - _observationPeriod))\\n            ) {\\n                Storage.slot().observationPeriodLogs[_ccy][_maturity].totalAmount += _filledAmount;\\n                Storage\\n                .slot()\\n                .observationPeriodLogs[_ccy][_maturity].totalFutureValue += _filledFutureValue;\\n            }\\n        }\\n    }\\n\\n    function calculateNextMaturity(uint256 _timestamp, uint256 _period)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        if (_period == 0) {\\n            return TimeLibrary.addDays(_timestamp, 7);\\n        } else {\\n            return _getLastFridayAfterMonths(_timestamp, _period);\\n        }\\n    }\\n\\n    function _getLastFridayAfterMonths(uint256 _timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 lastFridayTimestamp)\\n    {\\n        (uint256 year, uint256 month, ) = TimeLibrary.timestampToDate(\\n            TimeLibrary.addMonths(_timestamp, _months + 1)\\n        );\\n        uint256 thirdMonthEndTimestamp = TimeLibrary.timestampFromDate(year, month, 0);\\n        uint256 dayOfWeek = TimeLibrary.getDayOfWeek(thirdMonthEndTimestamp);\\n        uint256 diff = (dayOfWeek < TimeLibrary.DOW_FRI ? 7 : 0) + dayOfWeek - TimeLibrary.DOW_FRI;\\n        lastFridayTimestamp = TimeLibrary.subDays(thirdMonthEndTimestamp, diff);\\n\\n        require(lastFridayTimestamp > 0, \\\"Invalid Timestamp\\\");\\n\\n        return lastFridayTimestamp;\\n    }\\n\\n    function _calculateAutoRollUnitPrice(bytes32 _ccy, uint256 _maturity)\\n        internal\\n        view\\n        returns (uint256 autoRollUnitPrice)\\n    {\\n        ObservationPeriodLog memory log = Storage.slot().observationPeriodLogs[_ccy][_maturity];\\n\\n        if (log.totalFutureValue != 0) {\\n            autoRollUnitPrice = (log.totalAmount * Constants.PRICE_DIGIT).div(log.totalFutureValue);\\n        } else if (Storage.slot().estimatedAutoRollUnitPrice[_ccy][_maturity] != 0) {\\n            autoRollUnitPrice = Storage.slot().estimatedAutoRollUnitPrice[_ccy][_maturity];\\n        } else {\\n            autoRollUnitPrice = AddressResolverLib\\n                .genesisValueVault()\\n                .getLatestAutoRollLog(_ccy)\\n                .unitPrice;\\n        }\\n    }\\n\\n    function _convertUnitPrice(\\n        uint256 _unitPrice,\\n        uint256 _maturity,\\n        uint256 _currentTimestamp,\\n        uint256 _destinationTimestamp\\n    ) internal pure returns (uint256) {\\n        // NOTE:The formula is:\\n        // 1) currentDuration = maturity - currentTimestamp\\n        // 2) destinationDuration = maturity - destinationTimestamp\\n        // 3) unitPrice = (currentUnitPrice * currentDuration)\\n        //      / ((1 - currentUnitPrice) * destinationDuration + currentUnitPrice * currentDuration)\\n\\n        uint256 currentDuration = _maturity - _currentTimestamp;\\n        uint256 destinationDuration = _maturity - _destinationTimestamp;\\n        return\\n            (Constants.PRICE_DIGIT * _unitPrice * currentDuration) /\\n            (((Constants.PRICE_DIGIT - _unitPrice) * destinationDuration) +\\n                (_unitPrice * currentDuration));\\n    }\\n}\\n\",\"keccak256\":\"0xb89c2d969a8f5880dc5d84eaee70896fa767663757347262377b344c9c1582c9\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/LendingMarketUserLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"../../../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {SafeCast} from \\\"../../../dependencies/openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n// interfaces\\nimport {ILendingMarket} from \\\"../../interfaces/ILendingMarket.sol\\\";\\nimport {ILendingMarketController} from \\\"../../interfaces/ILendingMarketController.sol\\\";\\nimport {IFutureValueVault} from \\\"../../interfaces/IFutureValueVault.sol\\\";\\n// libraries\\nimport {AddressResolverLib} from \\\"../AddressResolverLib.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\nimport {LendingMarketConfigurationLogic} from \\\"./LendingMarketConfigurationLogic.sol\\\";\\nimport {LendingMarketOperationLogic} from \\\"./LendingMarketOperationLogic.sol\\\";\\nimport {FundManagementLogic} from \\\"./FundManagementLogic.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"../../types/ProtocolTypes.sol\\\";\\n// storages\\nimport {LendingMarketControllerStorage as Storage} from \\\"../../storages/LendingMarketControllerStorage.sol\\\";\\n\\nlibrary LendingMarketUserLogic {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using SafeCast for int256;\\n    using RoundingUint256 for uint256;\\n\\n    function createOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) external returns (uint256 filledAmount) {\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n        uint256 activeOrderCount = FundManagementLogic.cleanUpFunds(_ccy, _user);\\n        FundManagementLogic.registerCurrencyAndMaturity(_ccy, _maturity, _user);\\n\\n        require(\\n            AddressResolverLib.tokenVault().isCovered(_user, _ccy, _amount, _side),\\n            \\\"Not enough collateral\\\"\\n        );\\n\\n        uint256 circuitBreakerLimitRange = LendingMarketConfigurationLogic\\n            .getCircuitBreakerLimitRange(_ccy);\\n\\n        (\\n            ILendingMarket.FilledOrder memory filledOrder,\\n            ILendingMarket.PartiallyFilledOrder memory partiallyFilledOrder\\n        ) = ILendingMarket(Storage.slot().maturityLendingMarkets[_ccy][_maturity]).createOrder(\\n                _side,\\n                _user,\\n                _amount,\\n                _unitPrice,\\n                circuitBreakerLimitRange\\n            );\\n\\n        filledAmount = filledOrder.amount;\\n\\n        // The case that an order is placed in the order book\\n        if ((filledAmount + filledOrder.ignoredAmount) != _amount) {\\n            activeOrderCount += 1;\\n        }\\n\\n        require(activeOrderCount <= Constants.MAXIMUM_ORDER_COUNT, \\\"Too many active orders\\\");\\n\\n        updateFundsForTaker(\\n            _ccy,\\n            _maturity,\\n            _user,\\n            _side,\\n            filledAmount,\\n            filledOrder.futureValue,\\n            filledOrder.unitPrice\\n        );\\n\\n        updateFundsForMaker(\\n            _ccy,\\n            _maturity,\\n            _side == ProtocolTypes.Side.LEND ? ProtocolTypes.Side.BORROW : ProtocolTypes.Side.LEND,\\n            partiallyFilledOrder\\n        );\\n\\n        Storage.slot().usedCurrencies[_user].add(_ccy);\\n    }\\n\\n    function createPreOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) external {\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n        uint256 activeOrderCount = FundManagementLogic.cleanUpFunds(_ccy, _user);\\n\\n        require(activeOrderCount + 1 <= Constants.MAXIMUM_ORDER_COUNT, \\\"Too many active orders\\\");\\n\\n        FundManagementLogic.registerCurrencyAndMaturity(_ccy, _maturity, _user);\\n\\n        require(\\n            AddressResolverLib.tokenVault().isCovered(_user, _ccy, _amount, _side),\\n            \\\"Not enough collateral\\\"\\n        );\\n\\n        ILendingMarket(Storage.slot().maturityLendingMarkets[_ccy][_maturity]).createPreOrder(\\n            _side,\\n            _user,\\n            _amount,\\n            _unitPrice\\n        );\\n    }\\n\\n    function unwindPosition(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) external {\\n        int256 futureValue = FundManagementLogic\\n            .calculateActualFunds(_ccy, _maturity, _user)\\n            .futureValue;\\n\\n        (\\n            ILendingMarket.FilledOrder memory filledOrder,\\n            ILendingMarket.PartiallyFilledOrder memory partiallyFilledOrder,\\n            ProtocolTypes.Side side\\n        ) = _unwindPosition(_ccy, _maturity, _user, futureValue);\\n\\n        updateFundsForTaker(\\n            _ccy,\\n            _maturity,\\n            _user,\\n            side,\\n            filledOrder.amount,\\n            filledOrder.futureValue,\\n            filledOrder.unitPrice\\n        );\\n\\n        updateFundsForMaker(\\n            _ccy,\\n            _maturity,\\n            side == ProtocolTypes.Side.LEND ? ProtocolTypes.Side.BORROW : ProtocolTypes.Side.LEND,\\n            partiallyFilledOrder\\n        );\\n\\n        // When the market is the nearest market and the user has only GV, a user still has future value after unwinding.\\n        // For that case, the `registerCurrencyAndMaturity` function needs to be called again.\\n        (int256 currentFutureValue, ) = IFutureValueVault(\\n            Storage.slot().futureValueVaults[_ccy][\\n                Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n            ]\\n        ).getFutureValue(_user);\\n\\n        if (currentFutureValue != 0) {\\n            FundManagementLogic.registerCurrencyAndMaturity(_ccy, _maturity, _user);\\n        }\\n    }\\n\\n    function updateFundsForTaker(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        ProtocolTypes.Side _side,\\n        uint256 _filledAmount,\\n        uint256 _filledAmountInFV,\\n        uint256 _filledUnitPrice\\n    ) public {\\n        if (_filledAmountInFV != 0) {\\n            uint256 orderFeeRate = LendingMarketConfigurationLogic.getOrderFeeRate(_ccy);\\n\\n            FundManagementLogic.updateFunds(\\n                _ccy,\\n                _maturity,\\n                _user,\\n                _side,\\n                _filledAmount,\\n                _filledAmountInFV,\\n                orderFeeRate,\\n                true\\n            );\\n\\n            LendingMarketOperationLogic.updateOrderLogs(\\n                _ccy,\\n                _maturity,\\n                LendingMarketConfigurationLogic.getObservationPeriod(),\\n                _filledUnitPrice,\\n                _filledAmount,\\n                _filledAmountInFV\\n            );\\n        }\\n    }\\n\\n    function updateFundsForMaker(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        ILendingMarket.PartiallyFilledOrder memory partiallyFilledOrder\\n    ) public {\\n        if (partiallyFilledOrder.futureValue != 0) {\\n            FundManagementLogic.updateFunds(\\n                _ccy,\\n                _maturity,\\n                partiallyFilledOrder.maker,\\n                _side,\\n                partiallyFilledOrder.amount,\\n                partiallyFilledOrder.futureValue,\\n                0,\\n                false\\n            );\\n        }\\n    }\\n\\n    function getOrders(bytes32[] memory _ccys, address _user)\\n        external\\n        view\\n        returns (\\n            ILendingMarketController.Order[] memory activeOrders,\\n            ILendingMarketController.Order[] memory inactiveOrders\\n        )\\n    {\\n        uint256 totalActiveOrderCount;\\n        uint256 totalInactiveOrderCount;\\n\\n        ILendingMarketController.Order[][]\\n            memory activeOrdersList = new ILendingMarketController.Order[][](_ccys.length);\\n        ILendingMarketController.Order[][]\\n            memory inactiveOrdersList = new ILendingMarketController.Order[][](_ccys.length);\\n\\n        for (uint256 i; i < _ccys.length; i++) {\\n            (activeOrdersList[i], inactiveOrdersList[i]) = _getOrdersPerCurrency(_ccys[i], _user);\\n            totalActiveOrderCount += activeOrdersList[i].length;\\n            totalInactiveOrderCount += inactiveOrdersList[i].length;\\n        }\\n\\n        activeOrders = _flattenOrders(activeOrdersList, totalActiveOrderCount);\\n        inactiveOrders = _flattenOrders(inactiveOrdersList, totalInactiveOrderCount);\\n    }\\n\\n    function _getOrdersPerCurrency(bytes32 _ccy, address _user)\\n        internal\\n        view\\n        returns (\\n            ILendingMarketController.Order[] memory activeOrders,\\n            ILendingMarketController.Order[] memory inactiveOrders\\n        )\\n    {\\n        uint256 totalActiveOrderCount;\\n        uint256 totalInactiveOrderCount;\\n\\n        uint256[] memory maturities = Storage.slot().usedMaturities[_ccy][_user].values();\\n        ILendingMarketController.Order[][]\\n            memory activeOrdersList = new ILendingMarketController.Order[][](maturities.length);\\n        ILendingMarketController.Order[][]\\n            memory inactiveOrdersList = new ILendingMarketController.Order[][](maturities.length);\\n\\n        for (uint256 i; i < maturities.length; i++) {\\n            (activeOrdersList[i], inactiveOrdersList[i]) = _getOrdersPerMarket(\\n                _ccy,\\n                maturities[i],\\n                _user\\n            );\\n            totalActiveOrderCount += activeOrdersList[i].length;\\n            totalInactiveOrderCount += inactiveOrdersList[i].length;\\n        }\\n\\n        activeOrders = _flattenOrders(activeOrdersList, totalActiveOrderCount);\\n        inactiveOrders = _flattenOrders(inactiveOrdersList, totalInactiveOrderCount);\\n    }\\n\\n    function _getOrdersPerMarket(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    )\\n        internal\\n        view\\n        returns (\\n            ILendingMarketController.Order[] memory activeOrders,\\n            ILendingMarketController.Order[] memory inactiveOrders\\n        )\\n    {\\n        ILendingMarket market = ILendingMarket(\\n            Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n        );\\n\\n        (uint48[] memory activeLendOrderIds, uint48[] memory inActiveLendOrderIds) = market\\n            .getLendOrderIds(_user);\\n        (uint48[] memory activeBorrowOrderIds, uint48[] memory inActiveBorrowOrderIds) = market\\n            .getBorrowOrderIds(_user);\\n\\n        activeOrders = new ILendingMarketController.Order[](\\n            activeLendOrderIds.length + activeBorrowOrderIds.length\\n        );\\n        inactiveOrders = new ILendingMarketController.Order[](\\n            inActiveLendOrderIds.length + inActiveBorrowOrderIds.length\\n        );\\n\\n        for (uint256 i; i < activeLendOrderIds.length; i++) {\\n            activeOrders[i] = _getOrder(_ccy, market, activeLendOrderIds[i]);\\n        }\\n\\n        for (uint256 i; i < activeBorrowOrderIds.length; i++) {\\n            activeOrders[activeLendOrderIds.length + i] = _getOrder(\\n                _ccy,\\n                market,\\n                activeBorrowOrderIds[i]\\n            );\\n        }\\n\\n        for (uint256 i; i < inActiveLendOrderIds.length; i++) {\\n            inactiveOrders[i] = _getOrder(_ccy, market, inActiveLendOrderIds[i]);\\n        }\\n\\n        for (uint256 i; i < inActiveBorrowOrderIds.length; i++) {\\n            inactiveOrders[inActiveLendOrderIds.length + i] = _getOrder(\\n                _ccy,\\n                market,\\n                inActiveBorrowOrderIds[i]\\n            );\\n        }\\n    }\\n\\n    function _getOrder(\\n        bytes32 _ccy,\\n        ILendingMarket _market,\\n        uint48 _orderId\\n    ) internal view returns (ILendingMarketController.Order memory order) {\\n        (\\n            ProtocolTypes.Side side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            ,\\n            uint256 amount,\\n            uint256 timestamp\\n        ) = _market.getOrder(_orderId);\\n\\n        order = ILendingMarketController.Order(\\n            _orderId,\\n            _ccy,\\n            maturity,\\n            side,\\n            unitPrice,\\n            amount,\\n            timestamp\\n        );\\n    }\\n\\n    function _flattenOrders(ILendingMarketController.Order[][] memory orders, uint256 totalLength)\\n        internal\\n        pure\\n        returns (ILendingMarketController.Order[] memory flattened)\\n    {\\n        flattened = new ILendingMarketController.Order[](totalLength);\\n        uint256 index;\\n        for (uint256 i; i < orders.length; i++) {\\n            for (uint256 j; j < orders[i].length; j++) {\\n                flattened[index] = orders[i][j];\\n                index++;\\n            }\\n        }\\n    }\\n\\n    function _unwindPosition(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        int256 _futureValue\\n    )\\n        internal\\n        returns (\\n            ILendingMarket.FilledOrder memory filledOrder,\\n            ILendingMarket.PartiallyFilledOrder memory partiallyFilledOrder,\\n            ProtocolTypes.Side side\\n        )\\n    {\\n        require(_futureValue != 0, \\\"Future Value is zero\\\");\\n\\n        uint256 cbLimitRange = LendingMarketConfigurationLogic.getCircuitBreakerLimitRange(_ccy);\\n        uint256 orderFeeRate = LendingMarketConfigurationLogic.getOrderFeeRate(_ccy);\\n\\n        if (_futureValue > 0) {\\n            side = ProtocolTypes.Side.BORROW;\\n            // To unwind all positions, calculate the future value taking into account\\n            // the added portion of the fee.\\n            // NOTE: The formula is:\\n            // actualRate = feeRate * (currentMaturity / SECONDS_IN_YEAR)\\n            // amount = totalAmountInFV / (1 + actualRate)\\n            uint256 currentMaturity = _maturity - block.timestamp;\\n            uint256 amountInFV = (_futureValue.toUint256() *\\n                Constants.SECONDS_IN_YEAR *\\n                Constants.PCT_DIGIT).div(\\n                    Constants.SECONDS_IN_YEAR *\\n                        Constants.PCT_DIGIT +\\n                        (orderFeeRate * currentMaturity)\\n                );\\n\\n            (filledOrder, partiallyFilledOrder) = ILendingMarket(\\n                Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n            ).unwind(side, _user, amountInFV, cbLimitRange);\\n        } else if (_futureValue < 0) {\\n            side = ProtocolTypes.Side.LEND;\\n            // To unwind all positions, calculate the future value taking into account\\n            // the subtracted portion of the fee.\\n            // NOTE: The formula is:\\n            // actualRate = feeRate * (currentMaturity / SECONDS_IN_YEAR)\\n            // amount = totalAmountInFV / (1 - actualRate)\\n            uint256 currentMaturity = _maturity - block.timestamp;\\n            uint256 amountInFV = ((-_futureValue).toUint256() *\\n                Constants.SECONDS_IN_YEAR *\\n                Constants.PCT_DIGIT).div(\\n                    Constants.SECONDS_IN_YEAR *\\n                        Constants.PCT_DIGIT -\\n                        (orderFeeRate * currentMaturity)\\n                );\\n\\n            (filledOrder, partiallyFilledOrder) = ILendingMarket(\\n                Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n            ).unwind(side, _user, amountInFV, cbLimitRange);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x81a344aefd7b8dc7e95dff04da33338f87e46d6a33dd886c048a7432745a6abb\",\"license\":\"MIT\"},\"contracts/protocol/libraries/math/RoundingInt256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoundingInt256 {\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0);\\n\\n        int256 diff = (a * 10) / b - (a / b) * 10;\\n        if (diff >= 5) {\\n            return (a / b) + 1;\\n        } else if (diff <= -5) {\\n            return (a / b) - 1;\\n        } else {\\n            return a / b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7ab7168f709ecb8d28c017b8c074fe83ae88de347d3aed6ce13f2188d854cb9\",\"license\":\"MIT\"},\"contracts/protocol/libraries/math/RoundingUint256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoundingUint256 {\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0);\\n\\n        if ((a * 10) / b - (a / b) * 10 < 5) {\\n            return a / b;\\n        } else {\\n            return (a / b) + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc360f39a82f1a9a7454726e3db802407d305b5e525aa8c3236fe49ca6ca534d\",\"license\":\"MIT\"},\"contracts/protocol/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AddressResolverLib} from \\\"../libraries/AddressResolverLib.sol\\\";\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/MixinAddressResolverStorage.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    modifier onlyAcceptedContracts() {\\n        require(isAcceptedContract(msg.sender), \\\"Only Accepted Contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the contract names used in this contract.\\n     * @dev The contract name list is in `./libraries/Contracts.sol`.\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @notice Returns contract names that can call this contract.\\n     * @dev The contact name listed in this method is also needed to be listed `requiredContracts` method.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = Storage.slot().resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            Storage.slot().addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n\\n        afterBuildCache();\\n    }\\n\\n    /**\\n     * @notice Executes after the cache is built.\\n     */\\n    function afterBuildCache() internal virtual {}\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                Storage.slot().resolver.getAddress(name) != Storage.slot().addressCache[name] ||\\n                Storage.slot().addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        require(address(Storage.slot().resolver) == address(0), \\\"Resolver registered already\\\");\\n        Storage.slot().resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        return AddressResolverLib.getAddress(name);\\n    }\\n\\n    function resolver() public view returns (IAddressResolver) {\\n        return Storage.slot().resolver;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return AddressResolverLib.beaconProxyController();\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return AddressResolverLib.currencyController();\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return AddressResolverLib.genesisValueVault();\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return AddressResolverLib.reserveFund();\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return AddressResolverLib.lendingMarketController();\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return AddressResolverLib.tokenVault();\\n    }\\n}\\n\",\"keccak256\":\"0x8e7734c2c048f8b8d1383f39c531316a78cf1c8736cab5b1fb7992261ec052ba\",\"license\":\"MIT\"},\"contracts/protocol/mixins/MixinLendingMarketConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// libraries\\nimport {LendingMarketConfigurationLogic} from \\\"../libraries/logics/LendingMarketConfigurationLogic.sol\\\";\\n// utils\\nimport {Ownable} from \\\"../utils/Ownable.sol\\\";\\n// storages\\nimport {LendingMarketConfigurationStorage as Storage} from \\\"../storages/LendingMarketConfigurationStorage.sol\\\";\\n\\ncontract MixinLendingMarketConfiguration is Ownable {\\n    function _initialize(address _owner, uint256 _observationPeriod) internal {\\n        _transferOwnership(_owner);\\n        LendingMarketConfigurationLogic.updateObservationPeriod(_observationPeriod);\\n    }\\n\\n    /**\\n     * @notice Gets the order fee rate\\n     * @param _ccy Currency name in bytes32\\n     * @return The order fee rate received by protocol\\n     */\\n    function getOrderFeeRate(bytes32 _ccy) public view returns (uint256) {\\n        return Storage.slot().orderFeeRates[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the auto-roll fee rate\\n     * @param _ccy Currency name in bytes32\\n     * @return The auto-roll fee rate received by protocol\\n     */\\n    function getAutoRollFeeRate(bytes32 _ccy) public view returns (uint256) {\\n        return Storage.slot().autoRollFeeRates[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the limit range in unit price for the circuit breaker\\n     * @param _ccy Currency name in bytes32\\n     * @return The auto-roll fee rate received by protocol\\n     */\\n    function getCircuitBreakerLimitRange(bytes32 _ccy) public view returns (uint256) {\\n        return Storage.slot().circuitBreakerLimitRanges[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the observation period\\n     * @return The observation period to calculate the volume-weighted average price of transactions\\n     */\\n    function getObservationPeriod() public view returns (uint256) {\\n        return Storage.slot().observationPeriod;\\n    }\\n\\n    /**\\n     * @notice Updates the order fee rate\\n     * @param _ccy Currency name in bytes32\\n     * @param _orderFeeRate The order fee rate received by protocol\\n     */\\n    function updateOrderFeeRate(bytes32 _ccy, uint256 _orderFeeRate) public onlyOwner {\\n        LendingMarketConfigurationLogic.updateOrderFeeRate(_ccy, _orderFeeRate);\\n    }\\n\\n    /**\\n     * @notice Updates the auto-roll fee rate\\n     * @param _ccy Currency name in bytes32\\n     * @param _autoRollFeeRate The order fee rate received by protocol\\n     */\\n    function updateAutoRollFeeRate(bytes32 _ccy, uint256 _autoRollFeeRate) public onlyOwner {\\n        LendingMarketConfigurationLogic.updateAutoRollFeeRate(_ccy, _autoRollFeeRate);\\n    }\\n\\n    /**\\n     * @notice Updates the auto-roll fee rate\\n     * @param _ccy Currency name in bytes32\\n     * @param _limitRange The circuit breaker limit range\\n     */\\n    function updateCircuitBreakerLimitRange(bytes32 _ccy, uint256 _limitRange) public onlyOwner {\\n        LendingMarketConfigurationLogic.updateCircuitBreakerLimitRange(_ccy, _limitRange);\\n    }\\n\\n    /**\\n     * @notice Updates the observation period\\n     * @param _observationPeriod The observation period to calculate the volume-weighted average price of transactions\\n     */\\n    function updateObservationPeriod(uint256 _observationPeriod) public onlyOwner {\\n        LendingMarketConfigurationLogic.updateObservationPeriod(_observationPeriod);\\n    }\\n}\\n\",\"keccak256\":\"0x1831eb778d2955e1654890e2df8da9ffc47562efe2144055b300da0a7d7511e0\",\"license\":\"MIT\"},\"contracts/protocol/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../dependencies/chainlink/contracts/AggregatorV3Interface.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct Currency {\\n    bool isSupported;\\n    string name;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.currencyController\\\");\\n\\n    struct Storage {\\n        bytes32 baseCurrency;\\n        // Protocol currencies\\n        EnumerableSet.Bytes32Set currencies;\\n        mapping(bytes32 => uint256) haircuts;\\n        // Array of the price feeds\\n        mapping(bytes32 => AggregatorV3Interface[]) priceFeeds;\\n        // Total cached decimals of the price feeds\\n        mapping(bytes32 => uint8) decimalsCaches;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8bf03b6346d11a110e916796a9cc09c8a331b61dcf119d3fe929b393c0a701b6\",\"license\":\"MIT\"},\"contracts/protocol/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nstruct AutoRollLog {\\n    uint256 unitPrice;\\n    uint256 lendingCompoundFactor;\\n    uint256 borrowingCompoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.genesisValueVault\\\");\\n\\n    struct Storage {\\n        mapping(bytes32 => bool) isInitialized;\\n        mapping(bytes32 => uint256) initialCompoundFactors;\\n        mapping(bytes32 => uint256) lendingCompoundFactors;\\n        mapping(bytes32 => uint256) borrowingCompoundFactors;\\n        mapping(bytes32 => uint256) currentMaturity;\\n        mapping(bytes32 => uint8) decimals;\\n        // Mapping from user to balance per currency\\n        mapping(bytes32 => mapping(address => int256)) balances;\\n        mapping(bytes32 => uint256) totalLendingSupplies;\\n        mapping(bytes32 => uint256) totalBorrowingSupplies;\\n        // Mapping from maturity balance per currency\\n        mapping(bytes32 => mapping(uint256 => int256)) maturityBalances;\\n        // Mapping from maturity to auto-roll log per currency\\n        mapping(bytes32 => mapping(uint256 => AutoRollLog)) autoRollLogs;\\n        // Mapping from user to maturity per currency\\n        mapping(bytes32 => mapping(address => uint256)) userMaturities;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x887ce7f8c0dbbd8c7f6310e109fa6bf14b5520068d299fcf224faae13bd8de46\",\"license\":\"MIT\"},\"contracts/protocol/storages/LendingMarketConfigurationStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary LendingMarketConfigurationStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarketConfiguration\\\");\\n\\n    struct Storage {\\n        // Mapping from currency to order fee rate received by protocol (in basis point)\\n        mapping(bytes32 => uint256) orderFeeRates;\\n        // Mapping from currency to auto-roll fee rate received by protocol (in basis point)\\n        mapping(bytes32 => uint256) autoRollFeeRates;\\n        // Mapping from currency to limit range in unit price for the circuit breaker\\n        mapping(bytes32 => uint256) circuitBreakerLimitRanges;\\n        // The period to calculate the volume-weighted average price of transactions to use as auto-roll fee rate.\\n        uint256 observationPeriod;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x49c1c698af0daffea1da1dcfa3db009e66ed085f1f25244012fe8b9738088e17\",\"license\":\"MIT\"},\"contracts/protocol/storages/LendingMarketControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct ObservationPeriodLog {\\n    uint256 totalAmount;\\n    uint256 totalFutureValue;\\n}\\n\\nlibrary LendingMarketControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarketController\\\");\\n\\n    struct Storage {\\n        bytes32 baseCurrency;\\n        uint256 marketBasePeriod;\\n        uint256 marketTerminationDate;\\n        mapping(bytes32 => int256) marketTerminationPrices;\\n        mapping(bytes32 => uint256) marketTerminationRatios;\\n        // Mapping from currency to lending market contract addresses\\n        mapping(bytes32 => address[]) lendingMarkets;\\n        // Mapping from lending market contract address to future value vault contract address per currency\\n        mapping(bytes32 => mapping(address => address)) futureValueVaults;\\n        // Mapping from maturity to lending market contract address per currency\\n        mapping(bytes32 => mapping(uint256 => address)) maturityLendingMarkets;\\n        // Mapping from currency to genesis date in the lending market\\n        mapping(bytes32 => uint256) genesisDates;\\n        // Mapping from user to used currency\\n        mapping(address => EnumerableSet.Bytes32Set) usedCurrencies;\\n        // Mapping from user to used market maturity per currency\\n        mapping(bytes32 => mapping(address => EnumerableSet.UintSet)) usedMaturities;\\n        // Mapping from maturity to observation period log per currency\\n        mapping(bytes32 => mapping(uint256 => ObservationPeriodLog)) observationPeriodLogs;\\n        // Mapping from maturity to latest estimated auto roll unit price per currency\\n        mapping(bytes32 => mapping(uint256 => uint256)) estimatedAutoRollUnitPrice;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd1b06b393618d8be766fefa889bde3939c60b0fcc933b5819955687f32c2a62d\",\"license\":\"MIT\"},\"contracts/protocol/storages/LendingMarketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {OrderStatisticsTreeLib} from \\\"../libraries/OrderStatisticsTreeLib.sol\\\";\\n\\nstruct MarketOrder {\\n    ProtocolTypes.Side side;\\n    uint256 unitPrice; // in basis points\\n    uint256 maturity;\\n    uint256 timestamp;\\n}\\n\\nlibrary LendingMarketStorage {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarket\\\");\\n\\n    struct Storage {\\n        bytes32 ccy;\\n        uint48 lastOrderId;\\n        uint256 openingDate;\\n        uint256 maturity;\\n        // Mapping from maturity to opening unit price\\n        mapping(uint256 => uint256) openingUnitPrices;\\n        // Mapping from maturity to boolean if the market is ready or not\\n        mapping(uint256 => bool) isReady;\\n        // Mapping from user to active lend order ids\\n        mapping(address => uint48[]) activeLendOrderIds;\\n        // Mapping from user to active borrow order ids\\n        mapping(address => uint48[]) activeBorrowOrderIds;\\n        // Mapping from user to current maturity\\n        mapping(address => uint256) userCurrentMaturities;\\n        // Mapping from orderId to order\\n        mapping(uint256 => MarketOrder) orders;\\n        // Mapping from orderId to boolean for pre-order or not\\n        mapping(uint256 => bool) isPreOrder;\\n        // Mapping from maturity to lending orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) lendOrders;\\n        // Mapping from maturity to borrowing orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) borrowOrders;\\n        // Mapping from order side to threshold unit price of circuit breaker per block\\n        mapping(uint256 => mapping(ProtocolTypes.Side => uint256)) circuitBreakerThresholdUnitPrices;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b248489383f35251b60bf1d02c644912ae0271699f652343c9afe2f86cd031\",\"license\":\"MIT\"},\"contracts/protocol/storages/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.mixinAddressResolver\\\");\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 => address) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x852b885b6264a58930a0945c68842717e19f954eaefc0137235e6f263e17fa9d\",\"license\":\"MIT\"},\"contracts/protocol/storages/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary OwnableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.ownable\\\");\\n\\n    struct Storage {\\n        address owner;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ef8bfa06947cdb63d47248ad074ac42a1b1ba828a2c97e42486a5dbb2c03e1d\",\"license\":\"MIT\"},\"contracts/protocol/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0x7b05f97661e6dfe1142eec9be3dcf86d1eec55ed4fb1dea4a5859f75a0c84c13\",\"license\":\"MIT\"},\"contracts/protocol/utils/LockAndMsgSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ncontract LockAndMsgSender {\\n    error ContractLocked();\\n\\n    address internal constant NOT_LOCKED_FLAG = address(0);\\n    address internal lockedBy;\\n\\n    modifier isNotLocked() {\\n        if (msg.sender != address(this)) {\\n            if (lockedBy != NOT_LOCKED_FLAG) revert ContractLocked();\\n            lockedBy = msg.sender;\\n            _;\\n            lockedBy = NOT_LOCKED_FLAG;\\n        } else {\\n            _;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc96dac01a7e288fc7f1ef6a85c1cf521cacc70e0befd0501fe38dad11970682f\",\"license\":\"MIT\"},\"contracts/protocol/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../storages/OwnableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return OwnableStorage.slot().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = OwnableStorage.slot().owner;\\n        OwnableStorage.slot().owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6c149a76f9655abe4739f7ce74a38eb6e7d01732264e0effc4b9a73c16b5a0a9\",\"license\":\"MIT\"},\"contracts/protocol/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0xd3bbab5e43ade94e4791855dd4952527c5bfffcee4a088c7ecd69f97533b46f1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060016000556148da806100256000396000f3fe6080604052600436106103505760003560e01c8063891d5965116101c6578063cb9d7401116100f7578063eb990c5911610095578063f2fde38b1161006f578063f2fde38b14610a86578063faca409b14610aa6578063fc70081014610ac6578063fd4584e614610ae657600080fd5b8063eb990c5914610a12578063ebb9141614610a32578063f1eaebae14610a5257600080fd5b8063e906c100116100d1578063e906c10014610992578063e99d0538146109b2578063ea574817146109d2578063eb092a26146109f257600080fd5b8063cb9d74011461091c578063d1cc997614610968578063e09976591461097d57600080fd5b8063a02be3dc11610164578063b8f117cd1161013e578063b8f117cd146108b4578063bfd10cf6146108c9578063bfe61a28146108e9578063c11333b1146108fc57600080fd5b8063a02be3dc14610854578063a4c66bde14610874578063b3cb84501461089457600080fd5b80638c197d8d116101a05780638c197d8d146107df5780638da5cb5b146107ff5780639519832b14610814578063953dbcaa1461083457600080fd5b8063891d59651461077f5780638a9817451461079f5780638b36d833146107bf57600080fd5b8063482f267a116102a057806370c641a61161023e5780637b588aaa116102185780637b588aaa146106ff5780637c63039d1461071f578063826b47e81461073f57806385323e1a1461075f57600080fd5b806370c641a6146106aa578063715018a6146106ca57806372d563ef146106df57600080fd5b806355aceb4e1161027a57806355aceb4e146105e85780635c347765146106155780635ca65d571461066a578063677faaad1461068a57600080fd5b8063482f267a1461054e57806349f2ccbf1461057c5780634e78fecc1461059c57600080fd5b80632af64bd31161030d5780632f749574116102e75780632f749574146104cc578063381ada1f146104ec5780633d03b9da14610519578063448255c71461053b57600080fd5b80632af64bd3146104775780632e6c5e671461048c5780632e77aea7146104ac57600080fd5b806301cf22351461035557806303e5fb591461038a57806304f3bcec146103e45780630594de6e1461041157806317b72ff41461044057806329985e5a14610460575b600080fd5b34801561036157600080fd5b50610375610370366004613b47565b610b43565b60405190151581526020015b60405180910390f35b34801561039657600080fd5b506103d66103a5366004613b69565b60009081527ffd57fda692f2d6ebd63634bcff565f4a5bd9da5175c220bd0ae0da0b8f69d317602052604090205490565b604051908152602001610381565b3480156103f057600080fd5b506103f9610c6a565b6040516001600160a01b039091168152602001610381565b34801561041d57600080fd5b5061043161042c366004613b82565b610c8b565b60405161038193929190613be9565b34801561044c57600080fd5b506103d661045b366004613c41565b610d4a565b34801561046c57600080fd5b50610475610de0565b005b34801561048357600080fd5b50610375610f95565b34801561049857600080fd5b506103756104a7366004613b69565b6110fb565b3480156104b857600080fd5b506103d66104c7366004613c71565b61111b565b3480156104d857600080fd5b506104756104e7366004613b47565b6111b2565b3480156104f857600080fd5b5061050c610507366004613b69565b611250565b6040516103819190613caa565b34801561052557600080fd5b5061052e6112ce565b6040516103819190613cf7565b610375610549366004613d3c565b6113f0565b34801561055a57600080fd5b5061056e610569366004613ea4565b6115ab565b604051610381929190613f8c565b34801561058857600080fd5b50610375610597366004613fce565b611646565b3480156105a857600080fd5b506103d66105b7366004613b69565b60009081527ffd57fda692f2d6ebd63634bcff565f4a5bd9da5175c220bd0ae0da0b8f69d319602052604090205490565b3480156105f457600080fd5b50610608610603366004613b69565b6117b2565b6040516103819190613ffc565b34801561062157600080fd5b50610635610630366004613c41565b611923565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610381565b34801561067657600080fd5b50610475610685366004613b47565b611a0e565b34801561069657600080fd5b506103756106a5366004613b47565b611a7c565b3480156106b657600080fd5b506103d66106c5366004613c41565b611b65565b3480156106d657600080fd5b50610475611bff565b3480156106eb57600080fd5b506104756106fa366004613b47565b611c3a565b34801561070b57600080fd5b5061047561071a366004613b47565b611ccd565b34801561072b57600080fd5b5061037561073a36600461400f565b611d3b565b34801561074b57600080fd5b5061037561075a366004614053565b611f50565b34801561076b57600080fd5b506103f961077a366004613b47565b611fc7565b34801561078b57600080fd5b506103d661079a366004613b69565b612029565b3480156107ab57600080fd5b506103f96107ba366004613b47565b612047565b3480156107cb57600080fd5b506104756107da366004613b69565b612079565b3480156107eb57600080fd5b506104756107fa366004613b69565b6122b0565b34801561080b57600080fd5b506103f9612345565b34801561082057600080fd5b506103d661082f366004613c41565b61236d565b34801561084057600080fd5b5061043161084f366004613b82565b612409565b34801561086057600080fd5b5061060861086f366004613b69565b612468565b34801561088057600080fd5b506103d661088f366004614053565b6125d2565b3480156108a057600080fd5b506103756108af366004613b69565b61275d565b3480156108c057600080fd5b506104756127eb565b3480156108d557600080fd5b506106086108e4366004613b69565b6128bf565b6103756108f7366004613d3c565b612a29565b34801561090857600080fd5b50610375610917366004614070565b612bc3565b34801561092857600080fd5b506103d6610937366004613b69565b60009081527ffd57fda692f2d6ebd63634bcff565f4a5bd9da5175c220bd0ae0da0b8f69d318602052604090205490565b34801561097457600080fd5b50610375612e39565b34801561098957600080fd5b5061052e612e4e565b34801561099e57600080fd5b506103d66109ad366004613c71565b612e91565b3480156109be57600080fd5b506103756109cd366004613b69565b612f2b565b3480156109de57600080fd5b506104756109ed3660046140b1565b612fb9565b3480156109fe57600080fd5b50610608610a0d366004613b69565b613113565b348015610a1e57600080fd5b50610475610a2d3660046140f4565b61327d565b348015610a3e57600080fd5b50610375610a4d366004613d3c565b61340f565b348015610a5e57600080fd5b507ffd57fda692f2d6ebd63634bcff565f4a5bd9da5175c220bd0ae0da0b8f69d31a546103d6565b348015610a9257600080fd5b50610475610aa1366004614053565b6134f2565b348015610ab257600080fd5b50610375610ac1366004613d3c565b61358f565b348015610ad257600080fd5b5061052e610ae1366004614053565b613672565b348015610af257600080fd5b50610b06610b0136600461413a565b6136a6565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c0830152151560e082015261010001610381565b600060026000541415610b715760405162461bcd60e51b8152600401610b689061416f565b60405180910390fd5b6002600090815583908390610b8461376e565b6000848152600791909101602090815260408083208584529091529020546001600160a01b03161415610bc95760405162461bcd60e51b8152600401610b68906141a6565b610bd1612e39565b15610bee5760405162461bcd60e51b8152600401610b68906141d0565b604051632097fb8960e01b8152732f39a624580Dc46171c2dA1C0E00b0013583948c90632097fb8990610c29908890889033906004016141fc565b60006040518083038186803b158015610c4157600080fd5b505af4158015610c55573d6000803e3d6000fd5b50505050600192505050600160005592915050565b60006000805160206148858339815191525b546001600160a01b0316919050565b60608060606000610c9a61376e565b600088815260079190910160209081526040808320898452909152908190205490516325fb168b60e11b8152600481018790526001600160a01b0390911691508190634bf62d16906024015b60006040518083038186803b158015610cfe57600080fd5b505afa158015610d12573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d3a9190810190614276565b9350935093505093509350939050565b6040516295a47160e71b8152600090738dd7E5Ca3C14543408aD715C770d86B961cad79a90634ad2388090610d87908690859087906004016141fc565b6101206040518083038186803b158015610da057600080fd5b505af4158015610db4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd891906142fd565b519392505050565b6000610dea6112ce565b905060005b8151811015610f89576000828281518110610e0c57610e0c614378565b602002602001015190506000610e2d60008051602061488583398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd91610e9e91869190605d016143db565b60206040518083038186803b158015610eb657600080fd5b505afa158015610eca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eee91906143f4565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a150508080610f8190614427565b915050610def565b50610f92613792565b50565b600080610fa06112ce565b905060005b81518110156110f2576000828281518110610fc257610fc2614378565b60200260200101519050610fe160008051602061488583398151915290565b600082815260019190910160205260409020546001600160a01b0316600080516020614885833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b15801561104e57600080fd5b505afa158015611062573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108691906143f4565b6001600160a01b03161415806110d0575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b156110df576000935050505090565b50806110ea81614427565b915050610fa5565b50600191505090565b600061110561376e565b6000928352600801602052506040902054151590565b6040516295a47160e71b8152600090738dd7E5Ca3C14543408aD715C770d86B961cad79a90634ad2388090611158908790879087906004016141fc565b6101206040518083038186803b15801561117157600080fd5b505af4158015611185573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a991906142fd565b51949350505050565b336111bb612345565b6001600160a01b0316146111e15760405162461bcd60e51b8152600401610b6890614442565b604051630bdd255d60e21b81526004810183905260248101829052735963a13fc8b4755Ddc619663e1250257702c733490632f749574906044015b60006040518083038186803b15801561123457600080fd5b505af4158015611248573d6000803e3d6000fd5b505050505050565b606061125a61376e565b60050160008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156112c257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116112a4575b50505050509050919050565b60408051600580825260c082019092526060916020820160a080368337019050509050742132b0b1b7b7283937bc3ca1b7b73a3937b63632b960591b8160008151811061131d5761131d614378565b6020026020010181815250507121bab93932b731bca1b7b73a3937b63632b960711b8160018151811061135257611352614378565b6020026020010181815250507011d95b995cda5cd5985b1d5955985d5b1d607a1b8160028151811061138657611386614378565b6020026020010181815250506a14995cd95c9d99519d5b9960aa1b816003815181106113b4576113b4614378565b60200260200101818152505069151bdad95b95985d5b1d60b21b816004815181106113e1576113e1614378565b60200260200101818152505090565b6000600260005414156114155760405162461bcd60e51b8152600401610b689061416f565b600260009081558690869061142861376e565b6000848152600791909101602090815260408083208584529091529020546001600160a01b0316141561146d5760405162461bcd60e51b8152600401610b68906141a6565b611475612e39565b156114925760405162461bcd60e51b8152600401610b68906141d0565b61149a613815565b6040516396994e3760e01b8152336004820152602481018a9052604481018790526001600160a01b0391909116906396994e379034906064016000604051808303818588803b1580156114ec57600080fd5b505af1158015611500573d6000803e3d6000fd5b505060405163102cdc6b60e11b8152732f39a624580Dc46171c2dA1C0E00b0013583948c9350632059b8d6925061154691508b908b9033908c908c908c90600401614477565b60206040518083038186803b15801561155e57600080fd5b505af4158015611572573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159691906144b5565b50600192505050600160005595945050505050565b606080732f39a624580Dc46171c2dA1C0E00b0013583948c63482f267a85856040518363ffffffff1660e01b81526004016115e79291906144ce565b60006040518083038186803b1580156115ff57600080fd5b505af4158015611613573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261163b91908101906145f0565b909590945092505050565b60006002600054141561166b5760405162461bcd60e51b8152600401610b689061416f565b600260009081558490849061167e61376e565b6000848152600791909101602090815260408083208584529091529020546001600160a01b031614156116c35760405162461bcd60e51b8152600401610b68906141a6565b6116cb612e39565b156116e85760405162461bcd60e51b8152600401610b68906141d0565b60006116f261376e565b6000888152600791909101602090815260408083208984529091529081902054905163504b89bd60e01b815233600482015265ffffffffffff871660248201526001600160a01b039091169150819063504b89bd90604401606060405180830381600087803b15801561176457600080fd5b505af1158015611778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179c9190614653565b5050506001935050505060016000559392505050565b606060006117be61376e565b600084815260059190910160205260409020546001600160401b038111156117e8576117e8613d85565b604051908082528060200260200182016040528015611811578160200160208202803683370190505b50905060005b61181f61376e565b6000858152600591909101602052604090205481101561191c57600061184361376e565b6005016000868152602001908152602001600020828154811061186857611868614378565b6000918252602091829020015460408051631b3508b760e01b815290516001600160a01b0390921693508392631b3508b792600480840193829003018186803b1580156118b457600080fd5b505afa1580156118c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ec91906144b5565b8383815181106118fe576118fe614378565b6020908102919091010152508061191481614427565b915050611817565b5092915050565b600080600080600080600061195c8961193a61376e565b6001600160a01b038b1660009081526009919091016020526040902090613824565b15611a0257604051635c34776560e01b8152600481018a90526001600160a01b0389166024820152738dd7E5Ca3C14543408aD715C770d86B961cad79a90635c3477659060440160e06040518083038186803b1580156119bb57600080fd5b505af41580156119cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f3919061468a565b96509650965096509650965096505b92959891949750929550565b33611a17612345565b6001600160a01b031614611a3d5760405162461bcd60e51b8152600401610b6890614442565b604051635ca65d5760e01b81526004810183905260248101829052735963a13fc8b4755Ddc619663e1250257702c733490635ca65d579060440161121c565b600060026000541415611aa15760405162461bcd60e51b8152600401610b689061416f565b6002600055611aae612e39565b611aeb5760405162461bcd60e51b815260206004820152600e60248201526d139bdd081d195c9b5a5b985d195960921b6044820152606401610b68565b60405163321bdb6960e21b8152738dd7E5Ca3C14543408aD715C770d86B961cad79a9063c86f6da490611b26908690869033906004016141fc565b60006040518083038186803b158015611b3e57600080fd5b505af4158015611b52573d6000803e3d6000fd5b5050505060019050600160005592915050565b6040516295a47160e71b8152600090738dd7E5Ca3C14543408aD715C770d86B961cad79a90634ad2388090611ba2908690859087906004016141fc565b6101206040518083038186803b158015611bbb57600080fd5b505af4158015611bcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf391906142fd565b61010001519392505050565b33611c08612345565b6001600160a01b031614611c2e5760405162461bcd60e51b8152600401610b6890614442565b611c38600061383c565b565b611c42612e39565b15611c5f5760405162461bcd60e51b8152600401610b68906141d0565b33611c68612345565b6001600160a01b031614611c8e5760405162461bcd60e51b8152600401610b6890614442565b6040516372d563ef60e01b81526004810183905260248101829052731bEF597df25D43d46dFDf6551EA481E0a6ac847A906372d563ef9060440161121c565b33611cd6612345565b6001600160a01b031614611cfc5760405162461bcd60e51b8152600401610b6890614442565b604051633dac455560e11b81526004810183905260248101829052735963a13fc8b4755Ddc619663e1250257702c733490637b588aaa9060440161121c565b600060026000541415611d605760405162461bcd60e51b8152600401610b689061416f565b6002600055611d6d612e39565b15611d8a5760405162461bcd60e51b8152600401610b68906141d0565b60005b8351811015611f40576000848281518110611daa57611daa614378565b60200260200101519050600080731bEF597df25D43d46dFDf6551EA481E0a6ac847A636a23a95c84886040518363ffffffff1660e01b8152600401611df9929190918252602082015260400190565b60c06040518083038186803b158015611e1157600080fd5b505af4158015611e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e499190614744565b6040516397fe451560e01b81529193509150732f39a624580Dc46171c2dA1C0E00b0013583948c906397fe451590611e8c9086908a906000908890600401614779565b60006040518083038186803b158015611ea457600080fd5b505af4158015611eb8573d6000803e3d6000fd5b50506040516397fe451560e01b8152732f39a624580Dc46171c2dA1C0E00b0013583948c92506397fe45159150611efa9086908a906001908790600401614779565b60006040518083038186803b158015611f1257600080fd5b505af4158015611f26573d6000803e3d6000fd5b505050505050508080611f3890614427565b915050611d8d565b5060019050600160005592915050565b60405163104d68fd60e31b81526001600160a01b0382166004820152600090738dd7E5Ca3C14543408aD715C770d86B961cad79a9063826b47e8906024015b60006040518083038186803b158015611fa757600080fd5b505af4158015611fbb573d6000803e3d6000fd5b50600195945050505050565b6000611fd161376e565b60008481526006919091016020526040812090611fec61376e565b600095865260070160209081526040808720958752948152848620546001600160a01b039081168352908201929092529092019092205416919050565b600061203361376e565b600092835260080160205250604090205490565b600061205161376e565b600093845260070160209081526040808520938552929052509020546001600160a01b031690565b6002600054141561209c5760405162461bcd60e51b8152600401610b689061416f565b6002600090815581906120ad61376e565b60008381526005919091016020526040902054116121265760405162461bcd60e51b815260206004820152603060248201527f4e6f206c656e64696e67206d61726b65747320657869737420666f722061207360448201526f706563696669632063757272656e637960801b6064820152608401610b68565b61212e612e39565b1561214b5760405162461bcd60e51b8152600401610b68906141d0565b6000731bEF597df25D43d46dFDf6551EA481E0a6ac847A63a3d54d8c8461219d8660009081527ffd57fda692f2d6ebd63634bcff565f4a5bd9da5175c220bd0ae0da0b8f69d318602052604090205490565b6040516001600160e01b031960e085901b1681526004810192909252602482015260440160206040518083038186803b1580156121d957600080fd5b505af41580156121ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221191906144b5565b9050738dd7E5Ca3C14543408aD715C770d86B961cad79a63300074c984836122376138ad565b6040518463ffffffff1660e01b8152600401612255939291906141fc565b60206040518083038186803b15801561226d57600080fd5b505af4158015612281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a591906144b5565b505060016000555050565b336122b9612345565b6001600160a01b0316146122df5760405162461bcd60e51b8152600401610b6890614442565b604051638c197d8d60e01b815260048101829052735963a13fc8b4755Ddc619663e1250257702c733490638c197d8d9060240160006040518083038186803b15801561232a57600080fd5b505af415801561233e573d6000803e3d6000fd5b5050505050565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa610c7c565b604051639519832b60e01b8152600481018390526001600160a01b0382166024820152600090738dd7E5Ca3C14543408aD715C770d86B961cad79a90639519832b9060440160206040518083038186803b1580156123ca57600080fd5b505af41580156123de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240291906144b5565b9392505050565b6060806060600061241861376e565b6000888152600791909101602090815260408083208984529091529081902054905163d866d35560e01b8152600481018790526001600160a01b039091169150819063d866d35590602401610ce6565b6060600061247461376e565b600084815260059190910160205260409020546001600160401b0381111561249e5761249e613d85565b6040519080825280602002602001820160405280156124c7578160200160208202803683370190505b50905060005b6124d561376e565b6000858152600591909101602052604090205481101561191c5760006124f961376e565b6005016000868152602001908152602001600020828154811061251e5761251e614378565b600091825260209182902001546040805163e16695b560e01b815290516001600160a01b039092169350839263e16695b592600480840193829003018186803b15801561256a57600080fd5b505afa15801561257e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a291906144b5565b8383815181106125b4576125b4614378565b602090810291909101015250806125ca81614427565b9150506124cd565b6000806125dd61376e565b6001600160a01b03841660009081526009919091016020526040812091505b612605826138b7565b81101561275657600061261883836138c1565b90506000738dd7E5Ca3C14543408aD715C770d86B961cad79a634ad23880836000896040518463ffffffff1660e01b8152600401612658939291906141fc565b6101206040518083038186803b15801561267157600080fd5b505af4158015612685573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a991906142fd565b5190506126b46138cd565b604051633c7f634960e11b815260048101849052602481018390526001600160a01b0391909116906378fec6929060440160206040518083038186803b1580156126fd57600080fd5b505afa158015612711573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273591906144b5565b61273f90866147c1565b94505050808061274e90614427565b9150506125fc565b5050919050565b6000612767612e39565b156127845760405162461bcd60e51b8152600401610b68906141d0565b3361278d612345565b6001600160a01b0316146127b35760405162461bcd60e51b8152600401610b6890614442565b604051630b3cb84560e41b815260048101839052731bEF597df25D43d46dFDf6551EA481E0a6ac847A9063b3cb845090602401611f8f565b6002600054141561280e5760405162461bcd60e51b8152600401610b689061416f565b600260005561281b612e39565b156128385760405162461bcd60e51b8152600401610b68906141d0565b33612841612345565b6001600160a01b0316146128675760405162461bcd60e51b8152600401610b6890614442565b731bEF597df25D43d46dFDf6551EA481E0a6ac847A63b8f117cd6040518163ffffffff1660e01b815260040160006040518083038186803b1580156128ab57600080fd5b505af41580156122a5573d6000803e3d6000fd5b606060006128cb61376e565b600084815260059190910160205260409020546001600160401b038111156128f5576128f5613d85565b60405190808252806020026020018201604052801561291e578160200160208202803683370190505b50905060005b61292c61376e565b6000858152600591909101602052604090205481101561191c57600061295061376e565b6005016000868152602001908152602001600020828154811061297557612975614378565b60009182526020918290200154604080516371613c2d60e01b815290516001600160a01b03909216935083926371613c2d92600480840193829003018186803b1580156129c157600080fd5b505afa1580156129d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f991906144b5565b838381518110612a0b57612a0b614378565b60209081029190910101525080612a2181614427565b915050612924565b600060026000541415612a4e5760405162461bcd60e51b8152600401610b689061416f565b6002600090815586908690612a6161376e565b6000848152600791909101602090815260408083208584529091529020546001600160a01b03161415612aa65760405162461bcd60e51b8152600401610b68906141a6565b612aae612e39565b15612acb5760405162461bcd60e51b8152600401610b68906141d0565b612ad3613815565b6040516396994e3760e01b8152336004820152602481018a9052604481018790526001600160a01b0391909116906396994e379034906064016000604051808303818588803b158015612b2557600080fd5b505af1158015612b39573d6000803e3d6000fd5b50506040516317992e1960e01b8152732f39a624580Dc46171c2dA1C0E00b0013583948c93506317992e199250612b7f91508b908b9033908c908c908c90600401614477565b60006040518083038186803b158015612b9757600080fd5b505af4158015612bab573d6000803e3d6000fd5b50505050600192505050600160005595945050505050565b6000333014612d2e576001546201000090046001600160a01b031615612bfc576040516337affdbf60e11b815260040160405180910390fd5b6001805462010000600160b01b03191633620100000217905583836000612c2161376e565b6000848152600791909101602090815260408083208584529091529020546001600160a01b03161415612c665760405162461bcd60e51b8152600401610b68906141a6565b612c6e612e39565b15612c8b5760405162461bcd60e51b8152600401610b68906141d0565b604051635436151f60e11b81523360048201526001600160a01b0385166024820152604481018890526064810187905260848101869052738dd7E5Ca3C14543408aD715C770d86B961cad79a9063a86c2a3e9060a40160006040518083038186803b158015612cf957600080fd5b505af4158015612d0d573d6000803e3d6000fd5b505050506001925050506001805462010000600160b01b0319169055612e31565b83836000612d3a61376e565b6000848152600791909101602090815260408083208584529091529020546001600160a01b03161415612d7f5760405162461bcd60e51b8152600401610b68906141a6565b612d87612e39565b15612da45760405162461bcd60e51b8152600401610b68906141d0565b604051635436151f60e11b81523360048201526001600160a01b0385166024820152604481018890526064810187905260848101869052738dd7E5Ca3C14543408aD715C770d86B961cad79a9063a86c2a3e9060a40160006040518083038186803b158015612e1257600080fd5b505af4158015612e26573d6000803e3d6000fd5b505050506001925050505b949350505050565b600080612e4461376e565b6002015411905090565b6040805160018082528183019092526060916020808301908036833701905050905069151bdad95b95985d5b1d60b21b816000815181106113e1576113e1614378565b6040516295a47160e71b8152600090738dd7E5Ca3C14543408aD715C770d86B961cad79a90634ad2388090612ece908790879087906004016141fc565b6101206040518083038186803b158015612ee757600080fd5b505af4158015612efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f1f91906142fd565b60600151949350505050565b6000612f35612e39565b15612f525760405162461bcd60e51b8152600401610b68906141d0565b33612f5b612345565b6001600160a01b031614612f815760405162461bcd60e51b8152600401610b6890614442565b604051631d33a0a760e31b815260048101839052731bEF597df25D43d46dFDf6551EA481E0a6ac847A9063e99d053890602401611f8f565b33612fc2612345565b6001600160a01b031614612fe85760405162461bcd60e51b8152600401610b6890614442565b600084116130385760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420636f6d706f756e6420666163746f720000000000000000006044820152606401610b68565b613041866110fb565b156130845760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610b68565b60405163d3f43b7960e01b8152600481018790526024810186905260448101859052731bEF597df25D43d46dFDf6551EA481E0a6ac847A9063d3f43b799060640160006040518083038186803b1580156130dd57600080fd5b505af41580156130f1573d6000803e3d6000fd5b505050506130ff8684611a0e565b61310986836111b2565b6112488682611ccd565b6060600061311f61376e565b600084815260059190910160205260409020546001600160401b0381111561314957613149613d85565b604051908082528060200260200182016040528015613172578160200160208202803683370190505b50905060005b61318061376e565b6000858152600591909101602052604090205481101561191c5760006131a461376e565b600501600086815260200190815260200160002082815481106131c9576131c9614378565b6000918252602091829020015460408051632f05aa6d60e11b815290516001600160a01b0390921693508392635e0b54da92600480840193829003018186803b15801561321557600080fd5b505afa158015613229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061324d91906144b5565b83838151811061325f5761325f614378565b6020908102919091010152508061327581614427565b915050613178565b600154610100900460ff161580801561329a57506001805460ff16105b806132b35750303b1580156132b357506001805460ff16145b6133165760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b68565b6001805460ff1916811790558015613338576001805461ff0019166101001790555b60006133426138d7565b6001600160a01b031614156133a45760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b6064820152608401610b68565b826133ad61376e565b600101556133bb85836138ff565b6133c484613940565b801561233e576001805461ff00191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6000600260005414156134345760405162461bcd60e51b8152600401610b689061416f565b600260009081558690869061344761376e565b6000848152600791909101602090815260408083208584529091529020546001600160a01b0316141561348c5760405162461bcd60e51b8152600401610b68906141a6565b613494612e39565b156134b15760405162461bcd60e51b8152600401610b68906141d0565b6040516317992e1960e01b8152732f39a624580Dc46171c2dA1C0E00b0013583948c906317992e1990612b7f908b908b9033908c908c908c90600401614477565b336134fb612345565b6001600160a01b0316146135215760405162461bcd60e51b8152600401610b6890614442565b6001600160a01b0381166135865760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b68565b610f928161383c565b6000600260005414156135b45760405162461bcd60e51b8152600401610b689061416f565b60026000908155869086906135c761376e565b6000848152600791909101602090815260408083208584529091529020546001600160a01b0316141561360c5760405162461bcd60e51b8152600401610b68906141a6565b613614612e39565b156136315760405162461bcd60e51b8152600401610b68906141d0565b60405163102cdc6b60e11b8152732f39a624580Dc46171c2dA1C0E00b0013583948c90632059b8d690611546908b908b9033908c908c908c90600401614477565b60606136a061367f61376e565b6001600160a01b0384166000908152600991909101602052604090206139d5565b92915050565b604051637ea2c27360e11b81526001600160a01b038416600482015260248101839052604481018290526000908190819081908190819081908190738dd7E5Ca3C14543408aD715C770d86B961cad79a9063fd4584e6906064016101006040518083038186803b15801561371957600080fd5b505af415801561372d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137519190614802565b975097509750975097509750975097509397509397509397509397565b7f8041b8421ebd495cc61f38c788c9eb100daccf9bd36aa0bb920b7a15b2e0496590565b61379a6138cd565b6001600160a01b031663ecd8d2fb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156137d257600080fd5b505afa1580156137e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061380a91906144b5565b61381261376e565b55565b600061381f6139e0565b905090565b60008181526001830160205260408120541515612402565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061381f6139f8565b60006136a0825490565b60006124028383613a11565b600061381f613a3b565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610c7c565b6139088261383c565b604051638c197d8d60e01b815260048101829052735963a13fc8b4755Ddc619663e1250257702c733490638c197d8d9060240161121c565b600080516020614885833981519152546001600160a01b0316156139a65760405162461bcd60e51b815260206004820152601b60248201527f5265736f6c766572207265676973746572656420616c726561647900000000006044820152606401610b68565b60008051602061488583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60606136a082613a5b565b600061381f69151bdad95b95985d5b1d60b21b613ab6565b600061381f6a14995cd95c9d99519d5b9960aa1b613ab6565b6000826000018281548110613a2857613a28614378565b9060005260206000200154905092915050565b600061381f7121bab93932b731bca1b7b73a3937b63632b960711b613ab6565b6060816000018054806020026020016040519081016040528092919081815260200182805480156112c257602002820191906000526020600020905b815481526020019060010190808311613a975750505050509050919050565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b0316908161191c5760405162461bcd60e51b8152600401610b689190614871565b60008060408385031215613b5a57600080fd5b50508035926020909101359150565b600060208284031215613b7b57600080fd5b5035919050565b600080600060608486031215613b9757600080fd5b505081359360208301359350604090920135919050565b600081518084526020808501945080840160005b83811015613bde57815187529582019590820190600101613bc2565b509495945050505050565b606081526000613bfc6060830186613bae565b8281036020840152613c0e8186613bae565b90508281036040840152613c228185613bae565b9695505050505050565b6001600160a01b0381168114610f9257600080fd5b60008060408385031215613c5457600080fd5b823591506020830135613c6681613c2c565b809150509250929050565b600080600060608486031215613c8657600080fd5b83359250602084013591506040840135613c9f81613c2c565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b81811015613ceb5783516001600160a01b031683529284019291840191600101613cc6565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613ceb57835183529284019291840191600101613d13565b60028110610f9257600080fd5b600080600080600060a08688031215613d5457600080fd5b85359450602086013593506040860135613d6d81613d2f565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b0381118282101715613dbe57613dbe613d85565b60405290565b60405160e081016001600160401b0381118282101715613dbe57613dbe613d85565b604051601f8201601f191681016001600160401b0381118282101715613e0e57613e0e613d85565b604052919050565b60006001600160401b03821115613e2f57613e2f613d85565b5060051b60200190565b600082601f830112613e4a57600080fd5b81356020613e5f613e5a83613e16565b613de6565b82815260059290921b84018101918181019086841115613e7e57600080fd5b8286015b84811015613e995780358352918301918301613e82565b509695505050505050565b60008060408385031215613eb757600080fd5b82356001600160401b03811115613ecd57600080fd5b613ed985828601613e39565b9250506020830135613c6681613c2c565b60028110613f0857634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526020808501945080840160005b83811015613bde578151805165ffffffffffff168852838101518489015260408082015190890152606080820151613f5a828b0182613eea565b50506080818101519089015260a0808201519089015260c0908101519088015260e09096019590820190600101613f20565b604081526000613f9f6040830185613f0c565b8281036020840152613fb18185613f0c565b95945050505050565b65ffffffffffff81168114610f9257600080fd5b600080600060608486031215613fe357600080fd5b83359250602084013591506040840135613c9f81613fba565b6020815260006124026020830184613bae565b6000806040838503121561402257600080fd5b82356001600160401b0381111561403857600080fd5b61404485828601613e39565b95602094909401359450505050565b60006020828403121561406557600080fd5b813561240281613c2c565b6000806000806080858703121561408657600080fd5b84359350602085013592506040850135915060608501356140a681613c2c565b939692955090935050565b60008060008060008060c087890312156140ca57600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6000806000806080858703121561410a57600080fd5b843561411581613c2c565b9350602085013561412581613c2c565b93969395505050506040820135916060013590565b60008060006060848603121561414f57600080fd5b833561415a81613c2c565b95602085013595506040909401359392505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526010908201526f496e76616c6964206d6174757269747960801b604082015260600190565b602080825260129082015271105b1c9958591e481d195c9b5a5b985d195960721b604082015260600190565b92835260208301919091526001600160a01b0316604082015260600190565b600082601f83011261422c57600080fd5b8151602061423c613e5a83613e16565b82815260059290921b8401810191818101908684111561425b57600080fd5b8286015b84811015613e99578051835291830191830161425f565b60008060006060848603121561428b57600080fd5b83516001600160401b03808211156142a257600080fd5b6142ae8783880161421b565b945060208601519150808211156142c457600080fd5b6142d08783880161421b565b935060408601519150808211156142e657600080fd5b506142f38682870161421b565b9150509250925092565b6000610120828403121561431057600080fd5b614318613d9b565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152508091505092915050565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b818110156143b457602081850181015186830182015201614398565b818111156143c6576000602083870101525b50601f01601f19169290920160200192915050565b828152604060208201526000612e31604083018461438e565b60006020828403121561440657600080fd5b815161240281613c2c565b634e487b7160e01b600052601160045260246000fd5b600060001982141561443b5761443b614411565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b868152602081018690526001600160a01b038516604082015260c081016144a16060830186613eea565b608082019390935260a00152949350505050565b6000602082840312156144c757600080fd5b5051919050565b604080825283519082018190526000906020906060840190828701845b82811015614507578151845292840192908401906001016144eb565b5050506001600160a01b039490941692019190915250919050565b600082601f83011261453357600080fd5b81516020614543613e5a83613e16565b82815260e0928302850182019282820191908785111561456257600080fd5b8387015b858110156145e35781818a03121561457e5760008081fd5b614586613dc4565b815161459181613fba565b81528186015186820152604080830151908201526060808301516145b481613d2f565b908201526080828101519082015260a0808301519082015260c080830151908201528452928401928101614566565b5090979650505050505050565b6000806040838503121561460357600080fd5b82516001600160401b038082111561461a57600080fd5b61462686838701614522565b9350602085015191508082111561463c57600080fd5b5061464985828601614522565b9150509250929050565b60008060006060848603121561466857600080fd5b835161467381613d2f565b602085015160409095015190969495509392505050565b600080600080600080600060e0888a0312156146a557600080fd5b5050855160208701516040880151606089015160808a015160a08b015160c0909b0151949c939b50919990985090965094509092509050565b6000606082840312156146f057600080fd5b604051606081018181106001600160401b038211171561471257614712613d85565b8060405250809150825161472581613c2c565b8082525060208301516020820152604083015160408201525092915050565b60008060c0838503121561475757600080fd5b61476184846146de565b915061477084606085016146de565b90509250929050565b8481526020810184905260c081016147946040830185613eea565b82516001600160a01b031660608301526020830151608083015260409092015160a0909101529392505050565b600080821280156001600160ff1b03849003851316156147e3576147e3614411565b600160ff1b83900384128116156147fc576147fc614411565b50500190565b600080600080600080600080610100898b03121561481f57600080fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151915060e0890151801515811461486057600080fd5b809150509295985092959890939650565b602081526000612402602083018461438e56fe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124018a2646970667358221220a9a27d93dabb1b22aa75864b60f45b4ce49b5d8bd8f808d69f34e0440098f47e64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106103505760003560e01c8063891d5965116101c6578063cb9d7401116100f7578063eb990c5911610095578063f2fde38b1161006f578063f2fde38b14610a86578063faca409b14610aa6578063fc70081014610ac6578063fd4584e614610ae657600080fd5b8063eb990c5914610a12578063ebb9141614610a32578063f1eaebae14610a5257600080fd5b8063e906c100116100d1578063e906c10014610992578063e99d0538146109b2578063ea574817146109d2578063eb092a26146109f257600080fd5b8063cb9d74011461091c578063d1cc997614610968578063e09976591461097d57600080fd5b8063a02be3dc11610164578063b8f117cd1161013e578063b8f117cd146108b4578063bfd10cf6146108c9578063bfe61a28146108e9578063c11333b1146108fc57600080fd5b8063a02be3dc14610854578063a4c66bde14610874578063b3cb84501461089457600080fd5b80638c197d8d116101a05780638c197d8d146107df5780638da5cb5b146107ff5780639519832b14610814578063953dbcaa1461083457600080fd5b8063891d59651461077f5780638a9817451461079f5780638b36d833146107bf57600080fd5b8063482f267a116102a057806370c641a61161023e5780637b588aaa116102185780637b588aaa146106ff5780637c63039d1461071f578063826b47e81461073f57806385323e1a1461075f57600080fd5b806370c641a6146106aa578063715018a6146106ca57806372d563ef146106df57600080fd5b806355aceb4e1161027a57806355aceb4e146105e85780635c347765146106155780635ca65d571461066a578063677faaad1461068a57600080fd5b8063482f267a1461054e57806349f2ccbf1461057c5780634e78fecc1461059c57600080fd5b80632af64bd31161030d5780632f749574116102e75780632f749574146104cc578063381ada1f146104ec5780633d03b9da14610519578063448255c71461053b57600080fd5b80632af64bd3146104775780632e6c5e671461048c5780632e77aea7146104ac57600080fd5b806301cf22351461035557806303e5fb591461038a57806304f3bcec146103e45780630594de6e1461041157806317b72ff41461044057806329985e5a14610460575b600080fd5b34801561036157600080fd5b50610375610370366004613b47565b610b43565b60405190151581526020015b60405180910390f35b34801561039657600080fd5b506103d66103a5366004613b69565b60009081527ffd57fda692f2d6ebd63634bcff565f4a5bd9da5175c220bd0ae0da0b8f69d317602052604090205490565b604051908152602001610381565b3480156103f057600080fd5b506103f9610c6a565b6040516001600160a01b039091168152602001610381565b34801561041d57600080fd5b5061043161042c366004613b82565b610c8b565b60405161038193929190613be9565b34801561044c57600080fd5b506103d661045b366004613c41565b610d4a565b34801561046c57600080fd5b50610475610de0565b005b34801561048357600080fd5b50610375610f95565b34801561049857600080fd5b506103756104a7366004613b69565b6110fb565b3480156104b857600080fd5b506103d66104c7366004613c71565b61111b565b3480156104d857600080fd5b506104756104e7366004613b47565b6111b2565b3480156104f857600080fd5b5061050c610507366004613b69565b611250565b6040516103819190613caa565b34801561052557600080fd5b5061052e6112ce565b6040516103819190613cf7565b610375610549366004613d3c565b6113f0565b34801561055a57600080fd5b5061056e610569366004613ea4565b6115ab565b604051610381929190613f8c565b34801561058857600080fd5b50610375610597366004613fce565b611646565b3480156105a857600080fd5b506103d66105b7366004613b69565b60009081527ffd57fda692f2d6ebd63634bcff565f4a5bd9da5175c220bd0ae0da0b8f69d319602052604090205490565b3480156105f457600080fd5b50610608610603366004613b69565b6117b2565b6040516103819190613ffc565b34801561062157600080fd5b50610635610630366004613c41565b611923565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610381565b34801561067657600080fd5b50610475610685366004613b47565b611a0e565b34801561069657600080fd5b506103756106a5366004613b47565b611a7c565b3480156106b657600080fd5b506103d66106c5366004613c41565b611b65565b3480156106d657600080fd5b50610475611bff565b3480156106eb57600080fd5b506104756106fa366004613b47565b611c3a565b34801561070b57600080fd5b5061047561071a366004613b47565b611ccd565b34801561072b57600080fd5b5061037561073a36600461400f565b611d3b565b34801561074b57600080fd5b5061037561075a366004614053565b611f50565b34801561076b57600080fd5b506103f961077a366004613b47565b611fc7565b34801561078b57600080fd5b506103d661079a366004613b69565b612029565b3480156107ab57600080fd5b506103f96107ba366004613b47565b612047565b3480156107cb57600080fd5b506104756107da366004613b69565b612079565b3480156107eb57600080fd5b506104756107fa366004613b69565b6122b0565b34801561080b57600080fd5b506103f9612345565b34801561082057600080fd5b506103d661082f366004613c41565b61236d565b34801561084057600080fd5b5061043161084f366004613b82565b612409565b34801561086057600080fd5b5061060861086f366004613b69565b612468565b34801561088057600080fd5b506103d661088f366004614053565b6125d2565b3480156108a057600080fd5b506103756108af366004613b69565b61275d565b3480156108c057600080fd5b506104756127eb565b3480156108d557600080fd5b506106086108e4366004613b69565b6128bf565b6103756108f7366004613d3c565b612a29565b34801561090857600080fd5b50610375610917366004614070565b612bc3565b34801561092857600080fd5b506103d6610937366004613b69565b60009081527ffd57fda692f2d6ebd63634bcff565f4a5bd9da5175c220bd0ae0da0b8f69d318602052604090205490565b34801561097457600080fd5b50610375612e39565b34801561098957600080fd5b5061052e612e4e565b34801561099e57600080fd5b506103d66109ad366004613c71565b612e91565b3480156109be57600080fd5b506103756109cd366004613b69565b612f2b565b3480156109de57600080fd5b506104756109ed3660046140b1565b612fb9565b3480156109fe57600080fd5b50610608610a0d366004613b69565b613113565b348015610a1e57600080fd5b50610475610a2d3660046140f4565b61327d565b348015610a3e57600080fd5b50610375610a4d366004613d3c565b61340f565b348015610a5e57600080fd5b507ffd57fda692f2d6ebd63634bcff565f4a5bd9da5175c220bd0ae0da0b8f69d31a546103d6565b348015610a9257600080fd5b50610475610aa1366004614053565b6134f2565b348015610ab257600080fd5b50610375610ac1366004613d3c565b61358f565b348015610ad257600080fd5b5061052e610ae1366004614053565b613672565b348015610af257600080fd5b50610b06610b0136600461413a565b6136a6565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c0830152151560e082015261010001610381565b600060026000541415610b715760405162461bcd60e51b8152600401610b689061416f565b60405180910390fd5b6002600090815583908390610b8461376e565b6000848152600791909101602090815260408083208584529091529020546001600160a01b03161415610bc95760405162461bcd60e51b8152600401610b68906141a6565b610bd1612e39565b15610bee5760405162461bcd60e51b8152600401610b68906141d0565b604051632097fb8960e01b815273__$bfa1fc126f9f960b1bd3bae8c14d9c594e$__90632097fb8990610c29908890889033906004016141fc565b60006040518083038186803b158015610c4157600080fd5b505af4158015610c55573d6000803e3d6000fd5b50505050600192505050600160005592915050565b60006000805160206148858339815191525b546001600160a01b0316919050565b60608060606000610c9a61376e565b600088815260079190910160209081526040808320898452909152908190205490516325fb168b60e11b8152600481018790526001600160a01b0390911691508190634bf62d16906024015b60006040518083038186803b158015610cfe57600080fd5b505afa158015610d12573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d3a9190810190614276565b9350935093505093509350939050565b6040516295a47160e71b815260009073__$e7d72ce98f1dce1f33c815a57604cff5ab$__90634ad2388090610d87908690859087906004016141fc565b6101206040518083038186803b158015610da057600080fd5b505af4158015610db4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd891906142fd565b519392505050565b6000610dea6112ce565b905060005b8151811015610f89576000828281518110610e0c57610e0c614378565b602002602001015190506000610e2d60008051602061488583398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd91610e9e91869190605d016143db565b60206040518083038186803b158015610eb657600080fd5b505afa158015610eca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eee91906143f4565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a150508080610f8190614427565b915050610def565b50610f92613792565b50565b600080610fa06112ce565b905060005b81518110156110f2576000828281518110610fc257610fc2614378565b60200260200101519050610fe160008051602061488583398151915290565b600082815260019190910160205260409020546001600160a01b0316600080516020614885833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b15801561104e57600080fd5b505afa158015611062573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108691906143f4565b6001600160a01b03161415806110d0575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b156110df576000935050505090565b50806110ea81614427565b915050610fa5565b50600191505090565b600061110561376e565b6000928352600801602052506040902054151590565b6040516295a47160e71b815260009073__$e7d72ce98f1dce1f33c815a57604cff5ab$__90634ad2388090611158908790879087906004016141fc565b6101206040518083038186803b15801561117157600080fd5b505af4158015611185573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a991906142fd565b51949350505050565b336111bb612345565b6001600160a01b0316146111e15760405162461bcd60e51b8152600401610b6890614442565b604051630bdd255d60e21b8152600481018390526024810182905273__$e049441b2d898ade92927f540debd09cf4$__90632f749574906044015b60006040518083038186803b15801561123457600080fd5b505af4158015611248573d6000803e3d6000fd5b505050505050565b606061125a61376e565b60050160008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156112c257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116112a4575b50505050509050919050565b60408051600580825260c082019092526060916020820160a080368337019050509050742132b0b1b7b7283937bc3ca1b7b73a3937b63632b960591b8160008151811061131d5761131d614378565b6020026020010181815250507121bab93932b731bca1b7b73a3937b63632b960711b8160018151811061135257611352614378565b6020026020010181815250507011d95b995cda5cd5985b1d5955985d5b1d607a1b8160028151811061138657611386614378565b6020026020010181815250506a14995cd95c9d99519d5b9960aa1b816003815181106113b4576113b4614378565b60200260200101818152505069151bdad95b95985d5b1d60b21b816004815181106113e1576113e1614378565b60200260200101818152505090565b6000600260005414156114155760405162461bcd60e51b8152600401610b689061416f565b600260009081558690869061142861376e565b6000848152600791909101602090815260408083208584529091529020546001600160a01b0316141561146d5760405162461bcd60e51b8152600401610b68906141a6565b611475612e39565b156114925760405162461bcd60e51b8152600401610b68906141d0565b61149a613815565b6040516396994e3760e01b8152336004820152602481018a9052604481018790526001600160a01b0391909116906396994e379034906064016000604051808303818588803b1580156114ec57600080fd5b505af1158015611500573d6000803e3d6000fd5b505060405163102cdc6b60e11b815273__$bfa1fc126f9f960b1bd3bae8c14d9c594e$__9350632059b8d6925061154691508b908b9033908c908c908c90600401614477565b60206040518083038186803b15801561155e57600080fd5b505af4158015611572573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159691906144b5565b50600192505050600160005595945050505050565b60608073__$bfa1fc126f9f960b1bd3bae8c14d9c594e$__63482f267a85856040518363ffffffff1660e01b81526004016115e79291906144ce565b60006040518083038186803b1580156115ff57600080fd5b505af4158015611613573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261163b91908101906145f0565b909590945092505050565b60006002600054141561166b5760405162461bcd60e51b8152600401610b689061416f565b600260009081558490849061167e61376e565b6000848152600791909101602090815260408083208584529091529020546001600160a01b031614156116c35760405162461bcd60e51b8152600401610b68906141a6565b6116cb612e39565b156116e85760405162461bcd60e51b8152600401610b68906141d0565b60006116f261376e565b6000888152600791909101602090815260408083208984529091529081902054905163504b89bd60e01b815233600482015265ffffffffffff871660248201526001600160a01b039091169150819063504b89bd90604401606060405180830381600087803b15801561176457600080fd5b505af1158015611778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179c9190614653565b5050506001935050505060016000559392505050565b606060006117be61376e565b600084815260059190910160205260409020546001600160401b038111156117e8576117e8613d85565b604051908082528060200260200182016040528015611811578160200160208202803683370190505b50905060005b61181f61376e565b6000858152600591909101602052604090205481101561191c57600061184361376e565b6005016000868152602001908152602001600020828154811061186857611868614378565b6000918252602091829020015460408051631b3508b760e01b815290516001600160a01b0390921693508392631b3508b792600480840193829003018186803b1580156118b457600080fd5b505afa1580156118c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ec91906144b5565b8383815181106118fe576118fe614378565b6020908102919091010152508061191481614427565b915050611817565b5092915050565b600080600080600080600061195c8961193a61376e565b6001600160a01b038b1660009081526009919091016020526040902090613824565b15611a0257604051635c34776560e01b8152600481018a90526001600160a01b038916602482015273__$e7d72ce98f1dce1f33c815a57604cff5ab$__90635c3477659060440160e06040518083038186803b1580156119bb57600080fd5b505af41580156119cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f3919061468a565b96509650965096509650965096505b92959891949750929550565b33611a17612345565b6001600160a01b031614611a3d5760405162461bcd60e51b8152600401610b6890614442565b604051635ca65d5760e01b8152600481018390526024810182905273__$e049441b2d898ade92927f540debd09cf4$__90635ca65d579060440161121c565b600060026000541415611aa15760405162461bcd60e51b8152600401610b689061416f565b6002600055611aae612e39565b611aeb5760405162461bcd60e51b815260206004820152600e60248201526d139bdd081d195c9b5a5b985d195960921b6044820152606401610b68565b60405163321bdb6960e21b815273__$e7d72ce98f1dce1f33c815a57604cff5ab$__9063c86f6da490611b26908690869033906004016141fc565b60006040518083038186803b158015611b3e57600080fd5b505af4158015611b52573d6000803e3d6000fd5b5050505060019050600160005592915050565b6040516295a47160e71b815260009073__$e7d72ce98f1dce1f33c815a57604cff5ab$__90634ad2388090611ba2908690859087906004016141fc565b6101206040518083038186803b158015611bbb57600080fd5b505af4158015611bcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf391906142fd565b61010001519392505050565b33611c08612345565b6001600160a01b031614611c2e5760405162461bcd60e51b8152600401610b6890614442565b611c38600061383c565b565b611c42612e39565b15611c5f5760405162461bcd60e51b8152600401610b68906141d0565b33611c68612345565b6001600160a01b031614611c8e5760405162461bcd60e51b8152600401610b6890614442565b6040516372d563ef60e01b8152600481018390526024810182905273__$53b43b4bdeb2460d1113627ef627de0cf6$__906372d563ef9060440161121c565b33611cd6612345565b6001600160a01b031614611cfc5760405162461bcd60e51b8152600401610b6890614442565b604051633dac455560e11b8152600481018390526024810182905273__$e049441b2d898ade92927f540debd09cf4$__90637b588aaa9060440161121c565b600060026000541415611d605760405162461bcd60e51b8152600401610b689061416f565b6002600055611d6d612e39565b15611d8a5760405162461bcd60e51b8152600401610b68906141d0565b60005b8351811015611f40576000848281518110611daa57611daa614378565b6020026020010151905060008073__$53b43b4bdeb2460d1113627ef627de0cf6$__636a23a95c84886040518363ffffffff1660e01b8152600401611df9929190918252602082015260400190565b60c06040518083038186803b158015611e1157600080fd5b505af4158015611e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e499190614744565b6040516397fe451560e01b8152919350915073__$bfa1fc126f9f960b1bd3bae8c14d9c594e$__906397fe451590611e8c9086908a906000908890600401614779565b60006040518083038186803b158015611ea457600080fd5b505af4158015611eb8573d6000803e3d6000fd5b50506040516397fe451560e01b815273__$bfa1fc126f9f960b1bd3bae8c14d9c594e$__92506397fe45159150611efa9086908a906001908790600401614779565b60006040518083038186803b158015611f1257600080fd5b505af4158015611f26573d6000803e3d6000fd5b505050505050508080611f3890614427565b915050611d8d565b5060019050600160005592915050565b60405163104d68fd60e31b81526001600160a01b038216600482015260009073__$e7d72ce98f1dce1f33c815a57604cff5ab$__9063826b47e8906024015b60006040518083038186803b158015611fa757600080fd5b505af4158015611fbb573d6000803e3d6000fd5b50600195945050505050565b6000611fd161376e565b60008481526006919091016020526040812090611fec61376e565b600095865260070160209081526040808720958752948152848620546001600160a01b039081168352908201929092529092019092205416919050565b600061203361376e565b600092835260080160205250604090205490565b600061205161376e565b600093845260070160209081526040808520938552929052509020546001600160a01b031690565b6002600054141561209c5760405162461bcd60e51b8152600401610b689061416f565b6002600090815581906120ad61376e565b60008381526005919091016020526040902054116121265760405162461bcd60e51b815260206004820152603060248201527f4e6f206c656e64696e67206d61726b65747320657869737420666f722061207360448201526f706563696669632063757272656e637960801b6064820152608401610b68565b61212e612e39565b1561214b5760405162461bcd60e51b8152600401610b68906141d0565b600073__$53b43b4bdeb2460d1113627ef627de0cf6$__63a3d54d8c8461219d8660009081527ffd57fda692f2d6ebd63634bcff565f4a5bd9da5175c220bd0ae0da0b8f69d318602052604090205490565b6040516001600160e01b031960e085901b1681526004810192909252602482015260440160206040518083038186803b1580156121d957600080fd5b505af41580156121ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221191906144b5565b905073__$e7d72ce98f1dce1f33c815a57604cff5ab$__63300074c984836122376138ad565b6040518463ffffffff1660e01b8152600401612255939291906141fc565b60206040518083038186803b15801561226d57600080fd5b505af4158015612281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a591906144b5565b505060016000555050565b336122b9612345565b6001600160a01b0316146122df5760405162461bcd60e51b8152600401610b6890614442565b604051638c197d8d60e01b81526004810182905273__$e049441b2d898ade92927f540debd09cf4$__90638c197d8d9060240160006040518083038186803b15801561232a57600080fd5b505af415801561233e573d6000803e3d6000fd5b5050505050565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa610c7c565b604051639519832b60e01b8152600481018390526001600160a01b038216602482015260009073__$e7d72ce98f1dce1f33c815a57604cff5ab$__90639519832b9060440160206040518083038186803b1580156123ca57600080fd5b505af41580156123de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240291906144b5565b9392505050565b6060806060600061241861376e565b6000888152600791909101602090815260408083208984529091529081902054905163d866d35560e01b8152600481018790526001600160a01b039091169150819063d866d35590602401610ce6565b6060600061247461376e565b600084815260059190910160205260409020546001600160401b0381111561249e5761249e613d85565b6040519080825280602002602001820160405280156124c7578160200160208202803683370190505b50905060005b6124d561376e565b6000858152600591909101602052604090205481101561191c5760006124f961376e565b6005016000868152602001908152602001600020828154811061251e5761251e614378565b600091825260209182902001546040805163e16695b560e01b815290516001600160a01b039092169350839263e16695b592600480840193829003018186803b15801561256a57600080fd5b505afa15801561257e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a291906144b5565b8383815181106125b4576125b4614378565b602090810291909101015250806125ca81614427565b9150506124cd565b6000806125dd61376e565b6001600160a01b03841660009081526009919091016020526040812091505b612605826138b7565b81101561275657600061261883836138c1565b9050600073__$e7d72ce98f1dce1f33c815a57604cff5ab$__634ad23880836000896040518463ffffffff1660e01b8152600401612658939291906141fc565b6101206040518083038186803b15801561267157600080fd5b505af4158015612685573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a991906142fd565b5190506126b46138cd565b604051633c7f634960e11b815260048101849052602481018390526001600160a01b0391909116906378fec6929060440160206040518083038186803b1580156126fd57600080fd5b505afa158015612711573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273591906144b5565b61273f90866147c1565b94505050808061274e90614427565b9150506125fc565b5050919050565b6000612767612e39565b156127845760405162461bcd60e51b8152600401610b68906141d0565b3361278d612345565b6001600160a01b0316146127b35760405162461bcd60e51b8152600401610b6890614442565b604051630b3cb84560e41b81526004810183905273__$53b43b4bdeb2460d1113627ef627de0cf6$__9063b3cb845090602401611f8f565b6002600054141561280e5760405162461bcd60e51b8152600401610b689061416f565b600260005561281b612e39565b156128385760405162461bcd60e51b8152600401610b68906141d0565b33612841612345565b6001600160a01b0316146128675760405162461bcd60e51b8152600401610b6890614442565b73__$53b43b4bdeb2460d1113627ef627de0cf6$__63b8f117cd6040518163ffffffff1660e01b815260040160006040518083038186803b1580156128ab57600080fd5b505af41580156122a5573d6000803e3d6000fd5b606060006128cb61376e565b600084815260059190910160205260409020546001600160401b038111156128f5576128f5613d85565b60405190808252806020026020018201604052801561291e578160200160208202803683370190505b50905060005b61292c61376e565b6000858152600591909101602052604090205481101561191c57600061295061376e565b6005016000868152602001908152602001600020828154811061297557612975614378565b60009182526020918290200154604080516371613c2d60e01b815290516001600160a01b03909216935083926371613c2d92600480840193829003018186803b1580156129c157600080fd5b505afa1580156129d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f991906144b5565b838381518110612a0b57612a0b614378565b60209081029190910101525080612a2181614427565b915050612924565b600060026000541415612a4e5760405162461bcd60e51b8152600401610b689061416f565b6002600090815586908690612a6161376e565b6000848152600791909101602090815260408083208584529091529020546001600160a01b03161415612aa65760405162461bcd60e51b8152600401610b68906141a6565b612aae612e39565b15612acb5760405162461bcd60e51b8152600401610b68906141d0565b612ad3613815565b6040516396994e3760e01b8152336004820152602481018a9052604481018790526001600160a01b0391909116906396994e379034906064016000604051808303818588803b158015612b2557600080fd5b505af1158015612b39573d6000803e3d6000fd5b50506040516317992e1960e01b815273__$bfa1fc126f9f960b1bd3bae8c14d9c594e$__93506317992e199250612b7f91508b908b9033908c908c908c90600401614477565b60006040518083038186803b158015612b9757600080fd5b505af4158015612bab573d6000803e3d6000fd5b50505050600192505050600160005595945050505050565b6000333014612d2e576001546201000090046001600160a01b031615612bfc576040516337affdbf60e11b815260040160405180910390fd5b6001805462010000600160b01b03191633620100000217905583836000612c2161376e565b6000848152600791909101602090815260408083208584529091529020546001600160a01b03161415612c665760405162461bcd60e51b8152600401610b68906141a6565b612c6e612e39565b15612c8b5760405162461bcd60e51b8152600401610b68906141d0565b604051635436151f60e11b81523360048201526001600160a01b038516602482015260448101889052606481018790526084810186905273__$e7d72ce98f1dce1f33c815a57604cff5ab$__9063a86c2a3e9060a40160006040518083038186803b158015612cf957600080fd5b505af4158015612d0d573d6000803e3d6000fd5b505050506001925050506001805462010000600160b01b0319169055612e31565b83836000612d3a61376e565b6000848152600791909101602090815260408083208584529091529020546001600160a01b03161415612d7f5760405162461bcd60e51b8152600401610b68906141a6565b612d87612e39565b15612da45760405162461bcd60e51b8152600401610b68906141d0565b604051635436151f60e11b81523360048201526001600160a01b038516602482015260448101889052606481018790526084810186905273__$e7d72ce98f1dce1f33c815a57604cff5ab$__9063a86c2a3e9060a40160006040518083038186803b158015612e1257600080fd5b505af4158015612e26573d6000803e3d6000fd5b505050506001925050505b949350505050565b600080612e4461376e565b6002015411905090565b6040805160018082528183019092526060916020808301908036833701905050905069151bdad95b95985d5b1d60b21b816000815181106113e1576113e1614378565b6040516295a47160e71b815260009073__$e7d72ce98f1dce1f33c815a57604cff5ab$__90634ad2388090612ece908790879087906004016141fc565b6101206040518083038186803b158015612ee757600080fd5b505af4158015612efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f1f91906142fd565b60600151949350505050565b6000612f35612e39565b15612f525760405162461bcd60e51b8152600401610b68906141d0565b33612f5b612345565b6001600160a01b031614612f815760405162461bcd60e51b8152600401610b6890614442565b604051631d33a0a760e31b81526004810183905273__$53b43b4bdeb2460d1113627ef627de0cf6$__9063e99d053890602401611f8f565b33612fc2612345565b6001600160a01b031614612fe85760405162461bcd60e51b8152600401610b6890614442565b600084116130385760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420636f6d706f756e6420666163746f720000000000000000006044820152606401610b68565b613041866110fb565b156130845760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610b68565b60405163d3f43b7960e01b815260048101879052602481018690526044810185905273__$53b43b4bdeb2460d1113627ef627de0cf6$__9063d3f43b799060640160006040518083038186803b1580156130dd57600080fd5b505af41580156130f1573d6000803e3d6000fd5b505050506130ff8684611a0e565b61310986836111b2565b6112488682611ccd565b6060600061311f61376e565b600084815260059190910160205260409020546001600160401b0381111561314957613149613d85565b604051908082528060200260200182016040528015613172578160200160208202803683370190505b50905060005b61318061376e565b6000858152600591909101602052604090205481101561191c5760006131a461376e565b600501600086815260200190815260200160002082815481106131c9576131c9614378565b6000918252602091829020015460408051632f05aa6d60e11b815290516001600160a01b0390921693508392635e0b54da92600480840193829003018186803b15801561321557600080fd5b505afa158015613229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061324d91906144b5565b83838151811061325f5761325f614378565b6020908102919091010152508061327581614427565b915050613178565b600154610100900460ff161580801561329a57506001805460ff16105b806132b35750303b1580156132b357506001805460ff16145b6133165760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b68565b6001805460ff1916811790558015613338576001805461ff0019166101001790555b60006133426138d7565b6001600160a01b031614156133a45760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b6064820152608401610b68565b826133ad61376e565b600101556133bb85836138ff565b6133c484613940565b801561233e576001805461ff00191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6000600260005414156134345760405162461bcd60e51b8152600401610b689061416f565b600260009081558690869061344761376e565b6000848152600791909101602090815260408083208584529091529020546001600160a01b0316141561348c5760405162461bcd60e51b8152600401610b68906141a6565b613494612e39565b156134b15760405162461bcd60e51b8152600401610b68906141d0565b6040516317992e1960e01b815273__$bfa1fc126f9f960b1bd3bae8c14d9c594e$__906317992e1990612b7f908b908b9033908c908c908c90600401614477565b336134fb612345565b6001600160a01b0316146135215760405162461bcd60e51b8152600401610b6890614442565b6001600160a01b0381166135865760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b68565b610f928161383c565b6000600260005414156135b45760405162461bcd60e51b8152600401610b689061416f565b60026000908155869086906135c761376e565b6000848152600791909101602090815260408083208584529091529020546001600160a01b0316141561360c5760405162461bcd60e51b8152600401610b68906141a6565b613614612e39565b156136315760405162461bcd60e51b8152600401610b68906141d0565b60405163102cdc6b60e11b815273__$bfa1fc126f9f960b1bd3bae8c14d9c594e$__90632059b8d690611546908b908b9033908c908c908c90600401614477565b60606136a061367f61376e565b6001600160a01b0384166000908152600991909101602052604090206139d5565b92915050565b604051637ea2c27360e11b81526001600160a01b03841660048201526024810183905260448101829052600090819081908190819081908190819073__$e7d72ce98f1dce1f33c815a57604cff5ab$__9063fd4584e6906064016101006040518083038186803b15801561371957600080fd5b505af415801561372d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137519190614802565b975097509750975097509750975097509397509397509397509397565b7f8041b8421ebd495cc61f38c788c9eb100daccf9bd36aa0bb920b7a15b2e0496590565b61379a6138cd565b6001600160a01b031663ecd8d2fb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156137d257600080fd5b505afa1580156137e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061380a91906144b5565b61381261376e565b55565b600061381f6139e0565b905090565b60008181526001830160205260408120541515612402565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061381f6139f8565b60006136a0825490565b60006124028383613a11565b600061381f613a3b565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610c7c565b6139088261383c565b604051638c197d8d60e01b81526004810182905273__$e049441b2d898ade92927f540debd09cf4$__90638c197d8d9060240161121c565b600080516020614885833981519152546001600160a01b0316156139a65760405162461bcd60e51b815260206004820152601b60248201527f5265736f6c766572207265676973746572656420616c726561647900000000006044820152606401610b68565b60008051602061488583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60606136a082613a5b565b600061381f69151bdad95b95985d5b1d60b21b613ab6565b600061381f6a14995cd95c9d99519d5b9960aa1b613ab6565b6000826000018281548110613a2857613a28614378565b9060005260206000200154905092915050565b600061381f7121bab93932b731bca1b7b73a3937b63632b960711b613ab6565b6060816000018054806020026020016040519081016040528092919081815260200182805480156112c257602002820191906000526020600020905b815481526020019060010190808311613a975750505050509050919050565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b0316908161191c5760405162461bcd60e51b8152600401610b689190614871565b60008060408385031215613b5a57600080fd5b50508035926020909101359150565b600060208284031215613b7b57600080fd5b5035919050565b600080600060608486031215613b9757600080fd5b505081359360208301359350604090920135919050565b600081518084526020808501945080840160005b83811015613bde57815187529582019590820190600101613bc2565b509495945050505050565b606081526000613bfc6060830186613bae565b8281036020840152613c0e8186613bae565b90508281036040840152613c228185613bae565b9695505050505050565b6001600160a01b0381168114610f9257600080fd5b60008060408385031215613c5457600080fd5b823591506020830135613c6681613c2c565b809150509250929050565b600080600060608486031215613c8657600080fd5b83359250602084013591506040840135613c9f81613c2c565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b81811015613ceb5783516001600160a01b031683529284019291840191600101613cc6565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613ceb57835183529284019291840191600101613d13565b60028110610f9257600080fd5b600080600080600060a08688031215613d5457600080fd5b85359450602086013593506040860135613d6d81613d2f565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b0381118282101715613dbe57613dbe613d85565b60405290565b60405160e081016001600160401b0381118282101715613dbe57613dbe613d85565b604051601f8201601f191681016001600160401b0381118282101715613e0e57613e0e613d85565b604052919050565b60006001600160401b03821115613e2f57613e2f613d85565b5060051b60200190565b600082601f830112613e4a57600080fd5b81356020613e5f613e5a83613e16565b613de6565b82815260059290921b84018101918181019086841115613e7e57600080fd5b8286015b84811015613e995780358352918301918301613e82565b509695505050505050565b60008060408385031215613eb757600080fd5b82356001600160401b03811115613ecd57600080fd5b613ed985828601613e39565b9250506020830135613c6681613c2c565b60028110613f0857634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526020808501945080840160005b83811015613bde578151805165ffffffffffff168852838101518489015260408082015190890152606080820151613f5a828b0182613eea565b50506080818101519089015260a0808201519089015260c0908101519088015260e09096019590820190600101613f20565b604081526000613f9f6040830185613f0c565b8281036020840152613fb18185613f0c565b95945050505050565b65ffffffffffff81168114610f9257600080fd5b600080600060608486031215613fe357600080fd5b83359250602084013591506040840135613c9f81613fba565b6020815260006124026020830184613bae565b6000806040838503121561402257600080fd5b82356001600160401b0381111561403857600080fd5b61404485828601613e39565b95602094909401359450505050565b60006020828403121561406557600080fd5b813561240281613c2c565b6000806000806080858703121561408657600080fd5b84359350602085013592506040850135915060608501356140a681613c2c565b939692955090935050565b60008060008060008060c087890312156140ca57600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6000806000806080858703121561410a57600080fd5b843561411581613c2c565b9350602085013561412581613c2c565b93969395505050506040820135916060013590565b60008060006060848603121561414f57600080fd5b833561415a81613c2c565b95602085013595506040909401359392505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526010908201526f496e76616c6964206d6174757269747960801b604082015260600190565b602080825260129082015271105b1c9958591e481d195c9b5a5b985d195960721b604082015260600190565b92835260208301919091526001600160a01b0316604082015260600190565b600082601f83011261422c57600080fd5b8151602061423c613e5a83613e16565b82815260059290921b8401810191818101908684111561425b57600080fd5b8286015b84811015613e99578051835291830191830161425f565b60008060006060848603121561428b57600080fd5b83516001600160401b03808211156142a257600080fd5b6142ae8783880161421b565b945060208601519150808211156142c457600080fd5b6142d08783880161421b565b935060408601519150808211156142e657600080fd5b506142f38682870161421b565b9150509250925092565b6000610120828403121561431057600080fd5b614318613d9b565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152508091505092915050565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b818110156143b457602081850181015186830182015201614398565b818111156143c6576000602083870101525b50601f01601f19169290920160200192915050565b828152604060208201526000612e31604083018461438e565b60006020828403121561440657600080fd5b815161240281613c2c565b634e487b7160e01b600052601160045260246000fd5b600060001982141561443b5761443b614411565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b868152602081018690526001600160a01b038516604082015260c081016144a16060830186613eea565b608082019390935260a00152949350505050565b6000602082840312156144c757600080fd5b5051919050565b604080825283519082018190526000906020906060840190828701845b82811015614507578151845292840192908401906001016144eb565b5050506001600160a01b039490941692019190915250919050565b600082601f83011261453357600080fd5b81516020614543613e5a83613e16565b82815260e0928302850182019282820191908785111561456257600080fd5b8387015b858110156145e35781818a03121561457e5760008081fd5b614586613dc4565b815161459181613fba565b81528186015186820152604080830151908201526060808301516145b481613d2f565b908201526080828101519082015260a0808301519082015260c080830151908201528452928401928101614566565b5090979650505050505050565b6000806040838503121561460357600080fd5b82516001600160401b038082111561461a57600080fd5b61462686838701614522565b9350602085015191508082111561463c57600080fd5b5061464985828601614522565b9150509250929050565b60008060006060848603121561466857600080fd5b835161467381613d2f565b602085015160409095015190969495509392505050565b600080600080600080600060e0888a0312156146a557600080fd5b5050855160208701516040880151606089015160808a015160a08b015160c0909b0151949c939b50919990985090965094509092509050565b6000606082840312156146f057600080fd5b604051606081018181106001600160401b038211171561471257614712613d85565b8060405250809150825161472581613c2c565b8082525060208301516020820152604083015160408201525092915050565b60008060c0838503121561475757600080fd5b61476184846146de565b915061477084606085016146de565b90509250929050565b8481526020810184905260c081016147946040830185613eea565b82516001600160a01b031660608301526020830151608083015260409092015160a0909101529392505050565b600080821280156001600160ff1b03849003851316156147e3576147e3614411565b600160ff1b83900384128116156147fc576147fc614411565b50500190565b600080600080600080600080610100898b03121561481f57600080fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151915060e0890151801515811461486057600080fd5b809150509295985092959890939650565b602081526000612402602083018461438e56fe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124018a2646970667358221220a9a27d93dabb1b22aa75864b60f45b4ce49b5d8bd8f808d69f34e0440098f47e64736f6c63430008090033",
  "libraries": {
    "FundManagementLogic": "0x8dd7E5Ca3C14543408aD715C770d86B961cad79a",
    "LendingMarketOperationLogic": "0x1bEF597df25D43d46dFDf6551EA481E0a6ac847A",
    "LendingMarketUserLogic": "0x2f39a624580Dc46171c2dA1C0E00b0013583948c",
    "LendingMarketConfigurationLogic": "0x5963a13fc8b4755Ddc619663e1250257702c7334"
  },
  "implementation": "0x3F7c76aEddBB587dB7A0382023A9494f48F44449",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptedContracts()": {
        "details": "The contact name listed in this method is also needed to be listed `requiredContracts` method."
      },
      "calculateFunds(bytes32,address)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "borrowedAmount": "The borrowed amount due to the borrow orders being filled on the order book",
          "claimableAmount": "The claimable amount due to the lending orders being filled on the order book",
          "collateralAmount": "The actual collateral amount that is calculated by netting using the haircut.",
          "debtAmount": "The debt amount due to the borrow orders being filled on the order book",
          "lentAmount": "The lent amount due to the lend orders being filled on the order book",
          "workingBorrowOrdersAmount": "The working orders amount on the borrow order book",
          "workingLendOrdersAmount": "The working orders amount on the lend order book"
        }
      },
      "calculateTotalFundsInBaseCurrency(address,bytes32,uint256)": {
        "params": {
          "_depositAmount": "Amount to deposit",
          "_depositCcy": "Currency name to be used as deposit",
          "_user": "User's address"
        }
      },
      "cancelOrder(bytes32,uint256,uint48)": {
        "params": {
          "_ccy": "Currency name in bytes32 of the selected market",
          "_maturity": "The maturity of the selected market",
          "_orderId": "Market order id"
        }
      },
      "cleanUpAllFunds(address)": {
        "params": {
          "_user": "User's address"
        }
      },
      "cleanUpFunds(bytes32,address)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "createLendingMarket(bytes32,uint256)": {
        "params": {
          "_ccy": "Main currency for new lending market",
          "_openingDate": "Timestamp when the lending market opens"
        }
      },
      "createOrder(bytes32,uint256,uint8,uint256,uint256)": {
        "params": {
          "_amount": "Amount of funds the maker wants to borrow/lend",
          "_ccy": "Currency name in bytes32 of the selected market",
          "_maturity": "The maturity of the selected market",
          "_side": "Order position type, Borrow or Lend",
          "_unitPrice": "Amount of unit price taker wish to borrow/lend"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      },
      "createPreOrder(bytes32,uint256,uint8,uint256,uint256)": {
        "params": {
          "_amount": "Amount of funds the maker wants to borrow/lend",
          "_ccy": "Currency name in bytes32 of the selected market",
          "_maturity": "The maturity of the selected market",
          "_side": "Order position type, Borrow or Lend",
          "_unitPrice": "Amount of unit price taker wish to borrow/lend"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      },
      "depositAndCreateOrder(bytes32,uint256,uint8,uint256,uint256)": {
        "params": {
          "_amount": "Amount of funds the maker wants to borrow/lend",
          "_ccy": "Currency name in bytes32 of the selected market",
          "_maturity": "The maturity of the selected market",
          "_side": "Order position type, Borrow or Lend",
          "_unitPrice": "Amount of unit price taker wish to borrow/lend"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      },
      "depositAndCreatePreOrder(bytes32,uint256,uint8,uint256,uint256)": {
        "params": {
          "_amount": "Amount of funds the maker wants to borrow/lend",
          "_ccy": "Currency name in bytes32 of the selected market",
          "_maturity": "The maturity of the selected market",
          "_side": "Order position type, Borrow or Lend",
          "_unitPrice": "Amount of unit price taker wish to borrow/lend"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      },
      "executeItayoseCalls(bytes32[],uint256)": {
        "params": {
          "_currencies": "Currency name list in bytes32",
          "_maturity": "The maturity of the selected market"
        }
      },
      "executeLiquidationCall(bytes32,bytes32,uint256,address)": {
        "params": {
          "_collateralCcy": "Currency name to be used as collateral",
          "_debtCcy": "Currency name to be used as debt",
          "_debtMaturity": "The market maturity of the debt",
          "_user": "User's address"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      },
      "executeRedemption(bytes32,bytes32)": {
        "params": {
          "_collateralCcy": "Currency name of collateral",
          "_redemptionCcy": "Currency name of positions to be redeemed"
        }
      },
      "getAutoRollFeeRate(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The auto-roll fee rate received by protocol"
        }
      },
      "getBorrowOrderBook(bytes32,uint256,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_limit": "The limit number to get",
          "_maturity": "The maturity of the market"
        },
        "returns": {
          "amounts": "The array of borrow order amounts",
          "quantities": "The array of borrow order quantities",
          "unitPrices": "The array of borrow unit prices"
        }
      },
      "getBorrowUnitPrices(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "Array with the borrowing prices per future value of the lending market"
        }
      },
      "getCircuitBreakerLimitRange(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The auto-roll fee rate received by protocol"
        }
      },
      "getFutureValue(bytes32,uint256,address)": {
        "params": {
          "_ccy": "Currency name in bytes32 for Lending Market",
          "_maturity": "The maturity of the market",
          "_user": "User's address"
        },
        "returns": {
          "futureValue": "The future value"
        }
      },
      "getFutureValueVault(bytes32,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_maturity": "The maturity of the market"
        },
        "returns": {
          "_0": "The lending market address"
        }
      },
      "getGenesisDate(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The genesis date"
        }
      },
      "getGenesisValue(bytes32,address)": {
        "params": {
          "_ccy": "Currency name in bytes32 for Lending Market",
          "_user": "User's address"
        },
        "returns": {
          "genesisValue": "The genesis value"
        }
      },
      "getLendOrderBook(bytes32,uint256,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_limit": "The limit number to get",
          "_maturity": "The maturity of the market"
        },
        "returns": {
          "amounts": "The array of lend order amounts",
          "quantities": "The array of lend order quantities",
          "unitPrices": "The array of borrow unit prices"
        }
      },
      "getLendUnitPrices(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "Array with the lending prices per future value of the lending market"
        }
      },
      "getLendingMarket(bytes32,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_maturity": "The maturity of the market"
        },
        "returns": {
          "_0": "The lending market address"
        }
      },
      "getLendingMarkets(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "Array with the lending market address"
        }
      },
      "getMaturities(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "Array with the lending market maturity"
        }
      },
      "getMidUnitPrices(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "Array with the mid prices per future value of the lending market"
        }
      },
      "getObservationPeriod()": {
        "returns": {
          "_0": "The observation period to calculate the volume-weighted average price of transactions"
        }
      },
      "getOrderFeeRate(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The order fee rate received by protocol"
        }
      },
      "getOrders(bytes32[],address)": {
        "params": {
          "_ccys": "Currency name list in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "activeOrders": "The array of active orders in the order book",
          "inactiveOrders": "The array of inactive orders"
        }
      },
      "getPresentValue(bytes32,uint256,address)": {
        "params": {
          "_ccy": "Currency name in bytes32 for Lending Market",
          "_maturity": "The maturity of the market",
          "_user": "User's address"
        },
        "returns": {
          "presentValue": "The present value"
        }
      },
      "getTotalPresentValue(bytes32,address)": {
        "params": {
          "_ccy": "Currency name in bytes32 for Lending Market",
          "_user": "User's address"
        },
        "returns": {
          "totalPresentValue": "The total present value"
        }
      },
      "getTotalPresentValueInBaseCurrency(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "totalPresentValue": "The total present value in base currency"
        }
      },
      "getUsedCurrencies(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The array of the currency"
        }
      },
      "initialize(address,address,uint256,uint256)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController.",
        "params": {
          "_marketBasePeriod": "The base period for market maturity",
          "_observationPeriod": "The observation period to calculate the volume-weighted average price of transactions",
          "_owner": "The address of the contract owner",
          "_resolver": "The address of the Address Resolver contract"
        }
      },
      "initializeLendingMarket(bytes32,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_autoRollFeeRate": "The auto roll fee rate received by protocol",
          "_ccy": "Currency name in bytes32",
          "_circuitBreakerLimitRange": "The circuit breaker limit range",
          "_compoundFactor": "The initial compound factor when the initial market is opened",
          "_genesisDate": "The genesis date when the initial market is opened",
          "_orderFeeRate": "The order fee rate received by protocol"
        }
      },
      "isInitializedLendingMarket(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The boolean if the lending market is initialized or not"
        }
      },
      "isTerminated()": {
        "returns": {
          "_0": "The boolean if the protocol has not been terminated"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pauseLendingMarkets(bytes32)": {
        "params": {
          "_ccy": "Currency for pausing all lending markets"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requiredContracts()": {
        "details": "The contract name list is in `./libraries/Contracts.sol`."
      },
      "rotateLendingMarkets(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32 of the selected market"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpauseLendingMarkets(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      },
      "unwindPosition(bytes32,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32 of the selected market",
          "_maturity": "The maturity of the selected market"
        }
      },
      "updateAutoRollFeeRate(bytes32,uint256)": {
        "params": {
          "_autoRollFeeRate": "The order fee rate received by protocol",
          "_ccy": "Currency name in bytes32"
        }
      },
      "updateCircuitBreakerLimitRange(bytes32,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_limitRange": "The circuit breaker limit range"
        }
      },
      "updateObservationPeriod(uint256)": {
        "params": {
          "_observationPeriod": "The observation period to calculate the volume-weighted average price of transactions"
        }
      },
      "updateOrderFeeRate(bytes32,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_orderFeeRate": "The order fee rate received by protocol"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptedContracts()": {
        "notice": "Returns contract names that can call this contract."
      },
      "calculateFunds(bytes32,address)": {
        "notice": "Gets the funds that are calculated from the user's lending and borrowing order list for the selected currency."
      },
      "calculateTotalFundsInBaseCurrency(address,bytes32,uint256)": {
        "notice": "Gets the funds that are calculated from the user's lending and borrowing order list for all currencies in base currency."
      },
      "cancelOrder(bytes32,uint256,uint48)": {
        "notice": "Cancels the own order."
      },
      "cleanUpAllFunds(address)": {
        "notice": "Clean up all funds of the user"
      },
      "cleanUpFunds(bytes32,address)": {
        "notice": "Clean up user funds used for lazy evaluation by the following actions: - Removes order IDs that is already filled on the order book. - Convert Future values that have already been auto-rolled to Genesis values."
      },
      "createLendingMarket(bytes32,uint256)": {
        "notice": "Deploys new Lending Market and save address at lendingMarkets mapping.Reverts on deployment market with existing currency and term"
      },
      "createOrder(bytes32,uint256,uint8,uint256,uint256)": {
        "notice": "Creates an order. Takes orders if the orders are matched, and places new order if not match it. In addition, converts the future value to the genesis value if there is future value in past maturity before the execution of order creation."
      },
      "createPreOrder(bytes32,uint256,uint8,uint256,uint256)": {
        "notice": "Creates a pre-order. A pre-order will only be accepted from 168 hours (7 days) to 1 hour before the market opens (Pre-order period). At the end of this period, Itayose will be executed."
      },
      "depositAndCreateOrder(bytes32,uint256,uint8,uint256,uint256)": {
        "notice": "Deposits funds and creates an order at the same time."
      },
      "depositAndCreatePreOrder(bytes32,uint256,uint8,uint256,uint256)": {
        "notice": "Deposits funds and creates a pre-order at the same time."
      },
      "executeEmergencyTermination()": {
        "notice": "Executes an emergency termination to stop the protocol. Once this function is executed, the protocol cannot be run again. Also, users will only be able to redeem and withdraw."
      },
      "executeItayoseCalls(bytes32[],uint256)": {
        "notice": "Executes Itayose calls per selected currencies."
      },
      "executeLiquidationCall(bytes32,bytes32,uint256,address)": {
        "notice": "Liquidates a lending or borrowing position if the user's coverage is hight."
      },
      "executeRedemption(bytes32,bytes32)": {
        "notice": "Redeems all lending and borrowing positions. This function uses the present value as of the termination date."
      },
      "getAutoRollFeeRate(bytes32)": {
        "notice": "Gets the auto-roll fee rate"
      },
      "getBorrowOrderBook(bytes32,uint256,uint256)": {
        "notice": "Gets the order book of borrow."
      },
      "getBorrowUnitPrices(bytes32)": {
        "notice": "Gets borrow prices per future value for the selected currency."
      },
      "getCircuitBreakerLimitRange(bytes32)": {
        "notice": "Gets the limit range in unit price for the circuit breaker"
      },
      "getFutureValue(bytes32,uint256,address)": {
        "notice": "Gets the future value of the account for selected currency and maturity."
      },
      "getFutureValueVault(bytes32,uint256)": {
        "notice": "Gets the feture value contract address for the selected currency and maturity."
      },
      "getGenesisDate(bytes32)": {
        "notice": "Gets the genesis date when the first market opens for the selected currency."
      },
      "getGenesisValue(bytes32,address)": {
        "notice": "Gets the genesis value of the account."
      },
      "getLendOrderBook(bytes32,uint256,uint256)": {
        "notice": "Gets the order book of lend."
      },
      "getLendUnitPrices(bytes32)": {
        "notice": "Gets lend prices per future value for the selected currency."
      },
      "getLendingMarket(bytes32,uint256)": {
        "notice": "Gets the lending market contract address for the selected currency and maturity."
      },
      "getLendingMarkets(bytes32)": {
        "notice": "Gets the lending market contract addresses for the selected currency."
      },
      "getMaturities(bytes32)": {
        "notice": "Gets maturities for the selected currency."
      },
      "getMidUnitPrices(bytes32)": {
        "notice": "Gets mid prices per future value for the selected currency."
      },
      "getObservationPeriod()": {
        "notice": "Gets the observation period"
      },
      "getOrderFeeRate(bytes32)": {
        "notice": "Gets the order fee rate"
      },
      "getOrders(bytes32[],address)": {
        "notice": "Gets user's active and inactive orders in the order book"
      },
      "getPresentValue(bytes32,uint256,address)": {
        "notice": "Gets the present value of the account for selected currency and maturity."
      },
      "getTotalPresentValue(bytes32,address)": {
        "notice": "Gets the total present value of the account for selected currency."
      },
      "getTotalPresentValueInBaseCurrency(address)": {
        "notice": "Gets the total present value of the account converted to base currency."
      },
      "getUsedCurrencies(address)": {
        "notice": "Get all the currencies in which the user has lending positions or orders."
      },
      "initialize(address,address,uint256,uint256)": {
        "notice": "Initializes the contract."
      },
      "initializeLendingMarket(bytes32,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Initialize the lending market to set a genesis date and compound factor"
      },
      "isInitializedLendingMarket(bytes32)": {
        "notice": "Gets if the lending market is initialized."
      },
      "isTerminated()": {
        "notice": "Gets if the protocol has not been terminated."
      },
      "pauseLendingMarkets(bytes32)": {
        "notice": "Pauses previously deployed lending market by currency"
      },
      "requiredContracts()": {
        "notice": "Returns the contract names used in this contract."
      },
      "rotateLendingMarkets(bytes32)": {
        "notice": "Rotates the lending markets. In this rotation, the following actions are happened. - Updates the maturity at the beginning of the market array. - Moves the beginning of the market array to the end of it (Market rotation). - Update the compound factor in this contract using the next market unit price. (Auto-rolls) - Convert the future value held by reserve funds into the genesis value"
      },
      "unpauseLendingMarkets(bytes32)": {
        "notice": "Unpauses previously deployed lending market by currency"
      },
      "unwindPosition(bytes32,uint256)": {
        "notice": "Unwinds user's lending or borrowing positions by creating an opposite position order."
      },
      "updateAutoRollFeeRate(bytes32,uint256)": {
        "notice": "Updates the auto-roll fee rate"
      },
      "updateCircuitBreakerLimitRange(bytes32,uint256)": {
        "notice": "Updates the auto-roll fee rate"
      },
      "updateObservationPeriod(uint256)": {
        "notice": "Updates the observation period"
      },
      "updateOrderFeeRate(bytes32,uint256)": {
        "notice": "Updates the order fee rate"
      }
    },
    "notice": "Implements the module to manage separated lending order-book markets per maturity. This contract also works as a factory contract that can deploy (start) a new lending market for selected currency and maturity and has the calculation logic for the Genesis value in addition. Deployed Lending Markets are rotated and reused as it reaches the maturity date. At the time of rotation, a new maturity date is set and the compound factor is updated. The users mainly call this contract to create orders to lend or borrow funds.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1258,
        "contract": "contracts/protocol/LendingMarketController.sol:LendingMarketController",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 995,
        "contract": "contracts/protocol/LendingMarketController.sol:LendingMarketController",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 998,
        "contract": "contracts/protocol/LendingMarketController.sol:LendingMarketController",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 36895,
        "contract": "contracts/protocol/LendingMarketController.sol:LendingMarketController",
        "label": "lockedBy",
        "offset": 2,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}