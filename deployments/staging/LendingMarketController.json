{
  "address": "0x4925Bb46b4349033c11196A5B9a3e38BD939a471",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "term",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketAddr",
          "type": "address"
        }
      ],
      "name": "LendingMarketCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        }
      ],
      "name": "LendingMarketsPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        }
      ],
      "name": "LendingMarketsUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_term",
          "type": "uint256"
        }
      ],
      "name": "deployLendingMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getBorrowRatesForCcy",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getDiscountFactorsForCcy",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getLendRatesForCcy",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_term",
          "type": "uint256"
        }
      ],
      "name": "getLendingMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getMidRatesForCcy",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getSupportedTerms",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "pauseLendingMarkets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "ccy",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "term",
              "type": "uint256"
            },
            {
              "internalType": "enum ProtocolTypes.Side",
              "name": "side",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            }
          ],
          "internalType": "struct Order[]",
          "name": "orders",
          "type": "tuple[]"
        }
      ],
      "name": "placeBulkOrders",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "unpauseLendingMarkets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2efc804734b19747feeb3519a43c43bc5e363721412c70c1e464e4c274b04901",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x4C7994eeeD52c1906B9baB73E320DBc9FccB1285",
    "transactionIndex": 24,
    "gasUsed": "5065213",
    "logsBloom": "0x
    "blockHash": "0x8eb559665089ae561e916a2edd884a7242cbe8fcabac2a4f54c027a22fe46d51",
    "transactionHash": "0x2efc804734b19747feeb3519a43c43bc5e363721412c70c1e464e4c274b04901",
    "logs": [],
    "blockNumber": 11010285,
    "cumulativeGasUsed": "10599798",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "59521d43dda390ded85a5f23871f6cb8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketAddr\",\"type\":\"address\"}],\"name\":\"LendingMarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"}],\"name\":\"LendingMarketsPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"}],\"name\":\"LendingMarketsUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_term\",\"type\":\"uint256\"}],\"name\":\"deployLendingMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getBorrowRatesForCcy\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getDiscountFactorsForCcy\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getLendRatesForCcy\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_term\",\"type\":\"uint256\"}],\"name\":\"getLendingMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getMidRatesForCcy\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getSupportedTerms\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"pauseLendingMarkets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"internalType\":\"struct Order[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"name\":\"placeBulkOrders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"unpauseLendingMarkets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Lending Market Controller contract is managing separated lending order-book markets (per term) and responsible to calculate Discount Factors per currency and construct yield curve It will store lending market addresses by ccy and term in lendingMarkets mapping.\",\"kind\":\"dev\",\"methods\":{\"acceptedContracts()\":{\"details\":\"Returns contract names that can call this contract.\"},\"deployLendingMarket(bytes32,uint256)\":{\"details\":\"Deploys new Lending Market and save address at lendingMarkets mapping.\",\"params\":{\"_ccy\":\"Main currency for new lending market\",\"_term\":\"Term for new Lending Market\"}},\"getBorrowRatesForCcy(bytes32)\":{\"details\":\"Triggers to get borrow rates for selected currency.\",\"params\":{\"_ccy\":\"Currency\"}},\"getDiscountFactorsForCcy(bytes32)\":{\"details\":\"Triggers to discount factor for selected currency.\",\"params\":{\"_ccy\":\"Currency\"}},\"getLendRatesForCcy(bytes32)\":{\"details\":\"Triggers to get lend rates for selected currency.\",\"params\":{\"_ccy\":\"Currency\"}},\"getLendingMarket(bytes32,uint256)\":{\"details\":\"Triggers to get lending market.\",\"params\":{\"_ccy\":\"Currency for Lending Market\",\"_term\":\"Term for Lending Market\"}},\"getMidRatesForCcy(bytes32)\":{\"details\":\"Triggers to get mid rates for selected currency.\",\"params\":{\"_ccy\":\"Currency\"}},\"getSupportedTerms(bytes32)\":{\"details\":\"Triggers to supported terms for selected currency.\",\"params\":{\"_ccy\":\"Currency\"}},\"initialize(address,address)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseLendingMarkets(bytes32)\":{\"details\":\"Pauses previously deployed lending market by currency\",\"params\":{\"_ccy\":\"Currency for pausing all lending markets\"}},\"placeBulkOrders((bytes32,uint256,uint8,uint256,uint256)[])\":{\"details\":\"Places orders in multiple Lending Markets.\",\"params\":{\"orders\":\"Lending Market orders array with ccy and terms to identify right market\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requiredContracts()\":{\"details\":\"Returns required contract names in this contract\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpauseLendingMarkets(bytes32)\":{\"details\":\"Unpauses previously deployed lending market by currency\",\"params\":{\"_ccy\":\"Currency for pausing all lending markets\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deployLendingMarket(bytes32,uint256)\":{\"notice\":\"Reverts on deployment market with existing currency and term\"},\"initialize(address,address)\":{\"notice\":\"Initializes the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LendingMarketController.sol\":\"LendingMarketController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"contracts/LendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/ILendingMarket.sol\\\";\\nimport \\\"./interfaces/ILoanV2.sol\\\";\\nimport \\\"./libraries/HitchensOrderStatisticsTreeLib.sol\\\";\\nimport \\\"./libraries/ProductPrefixes.sol\\\";\\nimport \\\"./mixins/MixinAddressResolver.sol\\\";\\nimport \\\"./types/ProtocolTypes.sol\\\";\\n\\n/**\\n * @dev Lending Market contract module which allows lending market participants\\n * to create/take/cancel market orders.\\n *\\n * It will store market orders in structured red-black tree and doubly linked list in each node.\\n */\\ncontract LendingMarket is ILendingMarket, MixinAddressResolver, ReentrancyGuard, Pausable {\\n    using HitchensOrderStatisticsTreeLib for HitchensOrderStatisticsTreeLib.Tree;\\n\\n    uint256 public last_order_id;\\n    bytes32 public MarketCcy;\\n    uint256 public MarketTerm;\\n\\n    /**\\n     * @dev Order Book mapping for all Market Orders.\\n     */\\n    mapping(uint256 => MarketOrder) public orders;\\n    HitchensOrderStatisticsTreeLib.Tree lendOrders;\\n    HitchensOrderStatisticsTreeLib.Tree borrowOrders;\\n\\n    /**\\n     * @dev Constructor.\\n     * @param _ccy The main currency for order book lending deals\\n     * @param _term The main term for order book lending deals\\n     */\\n    constructor(\\n        address _resolver,\\n        bytes32 _ccy,\\n        uint256 _term\\n    ) {\\n        registerAddressResolver(_resolver);\\n        MarketCcy = _ccy;\\n        MarketTerm = _term;\\n        buildCache();\\n    }\\n\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](3);\\n        contracts[0] = Contracts.COLLATERAL_AGGREGATOR;\\n        contracts[1] = Contracts.LENDING_MARKET_CONTROLLER;\\n        contracts[2] = Contracts.PRODUCT_ADDRESS_RESOLVER;\\n    }\\n\\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](1);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by order maker.\\n     * @param orderId Market order id\\n     */\\n    modifier onlyMaker(uint256 orderId) {\\n        require(msg.sender == getMaker(orderId), \\\"No access to cancel order\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers to get order maker address.\\n     * @param orderId Market order id\\n     */\\n    function getMaker(uint256 orderId) public view override returns (address maker) {\\n        return orders[orderId].maker;\\n    }\\n\\n    /**\\n     * @dev Triggers to get highest borrow rate.\\n     */\\n    function getBorrowRate() public view override returns (uint256 rate) {\\n        return borrowOrders.last();\\n    }\\n\\n    /**\\n     * @dev Triggers to get highest lend rate.\\n     */\\n    function getLendRate() public view override returns (uint256 rate) {\\n        return lendOrders.last();\\n    }\\n\\n    /**\\n     * @dev Triggers to get mid rate.\\n     */\\n    function getMidRate() public view override returns (uint256 rate) {\\n        uint256 borrowRate = getBorrowRate();\\n        uint256 lendRate = getLendRate();\\n        uint256 combinedRate = borrowRate + lendRate;\\n\\n        return combinedRate / 2;\\n    }\\n\\n    /**\\n     * @dev Triggers to get market order information.\\n     * @param orderId Market order id\\n     */\\n    function getOrder(uint256 orderId) public view override returns (MarketOrder memory) {\\n        return orders[orderId];\\n    }\\n\\n    function getOrderFromTree(uint256 orderId)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        MarketOrder memory marketOrder = orders[orderId];\\n\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            return lendOrders.getOrderById(marketOrder.rate, orderId);\\n        } else {\\n            return borrowOrders.getOrderById(marketOrder.rate, orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internally triggered to increase and return id of last order in order book.\\n     */\\n    function _next_id() internal returns (uint256) {\\n        last_order_id++;\\n        return last_order_id;\\n    }\\n\\n    /**\\n     * @dev Triggered to cancel market order.\\n     * @param orderId Market order id\\n     *\\n     * Requirements:\\n     * - Order has to be cancelable by market maker\\n     */\\n    function cancelOrder(uint256 orderId)\\n        public\\n        override\\n        onlyMaker(orderId)\\n        returns (bool success)\\n    {\\n        _beforeMarketOrder();\\n\\n        MarketOrder memory marketOrder = orders[orderId];\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            lendOrders.remove(marketOrder.amount, marketOrder.rate, orderId);\\n        } else if (marketOrder.side == ProtocolTypes.Side.BORROW) {\\n            borrowOrders.remove(marketOrder.amount, marketOrder.rate, orderId);\\n        }\\n        delete orders[orderId];\\n\\n        collateralAggregator().releaseUnsettledCollateral(\\n            marketOrder.maker,\\n            MarketCcy,\\n            (marketOrder.amount * ProtocolTypes.MKTMAKELEVEL) / ProtocolTypes.PCT\\n        );\\n        emit CancelOrder(\\n            orderId,\\n            marketOrder.maker,\\n            marketOrder.side,\\n            marketOrder.amount,\\n            marketOrder.rate\\n        );\\n\\n        success = true;\\n    }\\n\\n    /**\\n     * @dev Triggered to make new market order.\\n     * @param _side Borrow or Lend order position\\n     * @param _amount Amount of funds maker wish to borrow/lend\\n     * @param _rate Preferable interest rate\\n     */\\n    function makeOrder(\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _rate\\n    ) internal returns (uint256 orderId) {\\n        MarketOrder memory marketOrder;\\n\\n        require(_amount > 0, \\\"Can't place empty amount\\\");\\n        require(_rate > 0, \\\"Can't place empty rate\\\");\\n        _beforeMarketOrder();\\n\\n        marketOrder.side = _side;\\n        marketOrder.amount = _amount;\\n        marketOrder.rate = _rate;\\n        marketOrder.maker = msg.sender;\\n        orderId = _next_id();\\n\\n        orders[orderId] = marketOrder;\\n        collateralAggregator().useUnsettledCollateral(\\n            msg.sender,\\n            MarketCcy,\\n            (_amount * ProtocolTypes.MKTMAKELEVEL) / ProtocolTypes.PCT\\n        );\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            lendOrders.insert(marketOrder.amount, marketOrder.rate, orderId);\\n        } else if (marketOrder.side == ProtocolTypes.Side.BORROW) {\\n            borrowOrders.insert(marketOrder.amount, marketOrder.rate, orderId);\\n        }\\n\\n        emit MakeOrder(\\n            orderId,\\n            marketOrder.maker,\\n            marketOrder.side,\\n            MarketCcy,\\n            MarketTerm,\\n            marketOrder.amount,\\n            marketOrder.rate\\n        );\\n    }\\n\\n    /**\\n     * @dev Triggered to take market order.\\n     * @param orderId Market Order id in Order Book\\n     * @param _amount Amount of funds taker wish to borrow/lend\\n     *\\n     * Requirements:\\n     * - Market order has to be active\\n     */\\n    function takeOrder(\\n        ProtocolTypes.Side side,\\n        uint256 orderId,\\n        uint256 _amount\\n    ) internal returns (bool) {\\n        MarketOrder memory marketOrder = orders[orderId];\\n        require(_amount <= marketOrder.amount, \\\"Insuficient amount\\\");\\n        require(marketOrder.maker != msg.sender, \\\"Maker couldn't take its order\\\");\\n        _beforeMarketOrder();\\n\\n        orders[orderId].amount = marketOrder.amount - _amount;\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            require(\\n                lendOrders.fillOrder(marketOrder.rate, orderId, _amount),\\n                \\\"Couldn't fill order\\\"\\n            );\\n        } else if (marketOrder.side == ProtocolTypes.Side.BORROW) {\\n            require(\\n                borrowOrders.fillOrder(marketOrder.rate, orderId, _amount),\\n                \\\"Couldn't fill order\\\"\\n            );\\n        }\\n\\n        address productAddress = productAddressResolver().getProductContract(ProductPrefixes.LOAN);\\n\\n        ILoanV2(productAddress).register(\\n            marketOrder.maker,\\n            msg.sender,\\n            uint8(marketOrder.side),\\n            MarketCcy,\\n            MarketTerm,\\n            _amount,\\n            marketOrder.rate\\n        );\\n\\n        emit TakeOrder(orderId, msg.sender, side, _amount, marketOrder.rate);\\n\\n        if (marketOrder.amount == 0) {\\n            delete orders[orderId];\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Triggered to get matching market order.\\n     * @param side Market order side it can be borrow or lend\\n     * @param amount Amount of funds taker wish to borrow/lend\\n     * @param rate Amount of interest rate taker wish to borrow/lend\\n     *\\n     * Returns zero if didn't find a matched order, reverts if no orders for specified interest rate\\n     */\\n    function matchOrders(\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 rate\\n    ) external view override returns (uint256) {\\n        if (side == ProtocolTypes.Side.LEND) {\\n            require(borrowOrders.exists(rate), \\\"No orders exists for selected interest rate\\\");\\n            return borrowOrders.findOrderIdForAmount(rate, amount);\\n        } else {\\n            require(lendOrders.exists(rate), \\\"No orders exists for selected interest rate\\\");\\n            return lendOrders.findOrderIdForAmount(rate, amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggered to execute market order, if order matched it takes order, if not matched places new order.\\n     * @param side Market order side it can be borrow or lend\\n     * @param amount Amount of funds maker/taker wish to borrow/lend\\n     * @param rate Amount of interest rate maker/taker wish to borrow/lend\\n     *\\n     * Returns true after successful execution\\n     */\\n    function order(\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 rate\\n    ) external override nonReentrant returns (bool) {\\n        uint256 orderId;\\n\\n        if (side == ProtocolTypes.Side.LEND) {\\n            orderId = borrowOrders.findOrderIdForAmount(rate, amount);\\n            if (orderId != 0) return takeOrder(ProtocolTypes.Side.BORROW, orderId, amount);\\n        } else {\\n            orderId = lendOrders.findOrderIdForAmount(rate, amount);\\n            if (orderId != 0) return takeOrder(ProtocolTypes.Side.LEND, orderId, amount);\\n        }\\n\\n        makeOrder(side, amount, rate);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Triggered to pause lending market.\\n     */\\n    function pauseMarket() public override onlyAcceptedContracts {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Triggered to pause lending market.\\n     */\\n    function unpauseMarket() public override onlyAcceptedContracts {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Additional checks before making/taking orders.\\n     */\\n    function _beforeMarketOrder() internal view {\\n        require(!paused(), \\\"Market paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xdb588efe957fc81b5cb4c1f33023ce6f4701896111e012b07deb74f0980eb10d\",\"license\":\"MIT\"},\"contracts/LendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./libraries/QuickSort.sol\\\";\\nimport \\\"./libraries/DiscountFactor.sol\\\";\\nimport \\\"./LendingMarket.sol\\\";\\nimport \\\"./interfaces/ILendingMarketController.sol\\\";\\nimport \\\"./interfaces/ILendingMarket.sol\\\";\\nimport \\\"./libraries/ProductPrefixes.sol\\\";\\nimport \\\"./mixins/MixinAddressResolver.sol\\\";\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"./utils/Proxyable.sol\\\";\\nimport {LendingMarketControllerStorage as Storage} from \\\"./storages/LendingMarketControllerStorage.sol\\\";\\n\\n/**\\n * @dev Lending Market Controller contract is managing separated lending\\n * order-book markets (per term) and responsible to calculate Discount Factors per currency\\n * and construct yield curve\\n *\\n * It will store lending market addresses by ccy and term in lendingMarkets mapping.\\n */\\ncontract LendingMarketController is\\n    ILendingMarketController,\\n    MixinAddressResolver,\\n    Ownable,\\n    Proxyable\\n{\\n    using QuickSort for uint256[];\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController\\n     */\\n    function initialize(address owner, address resolver) public initializer onlyProxy {\\n        _transferOwnership(owner);\\n        registerAddressResolver(resolver);\\n    }\\n\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](2);\\n        contracts[0] = Contracts.CURRENCY_CONTROLLER;\\n        contracts[1] = Contracts.TERM_STRUCTURE;\\n    }\\n\\n    // =========== YIELD CURVE FUNCTIONS ===========\\n\\n    /**\\n     * @dev Triggers to get borrow rates for selected currency.\\n     * @param _ccy Currency\\n     */\\n    function getBorrowRatesForCcy(bytes32 _ccy) external view override returns (uint256[] memory) {\\n        uint256[] memory terms = Storage.slot().supportedTerms[_ccy];\\n        uint256[] memory rates = new uint256[](terms.length);\\n\\n        for (uint256 i = 0; i < terms.length; i++) {\\n            uint256 term = terms[i];\\n            ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy][term]);\\n            rates[i] = market.getBorrowRate();\\n        }\\n\\n        return rates;\\n    }\\n\\n    /**\\n     * @dev Triggers to get lend rates for selected currency.\\n     * @param _ccy Currency\\n     */\\n    function getLendRatesForCcy(bytes32 _ccy) external view override returns (uint256[] memory) {\\n        uint256[] memory terms = Storage.slot().supportedTerms[_ccy];\\n        uint256[] memory rates = new uint256[](terms.length);\\n\\n        for (uint256 i = 0; i < terms.length; i++) {\\n            uint256 term = terms[i];\\n            ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy][term]);\\n            rates[i] = market.getLendRate();\\n        }\\n\\n        return rates;\\n    }\\n\\n    /**\\n     * @dev Triggers to get mid rates for selected currency.\\n     * @param _ccy Currency\\n     */\\n    function getMidRatesForCcy(bytes32 _ccy) public view override returns (uint256[] memory) {\\n        uint256[] memory terms = Storage.slot().supportedTerms[_ccy];\\n        uint256[] memory rates = new uint256[](terms.length);\\n\\n        for (uint256 i = 0; i < terms.length; i++) {\\n            uint256 term = terms[i];\\n            ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy][term]);\\n            rates[i] = market.getMidRate();\\n        }\\n\\n        return rates;\\n    }\\n\\n    /**\\n     * @dev Triggers to get lending market.\\n     * @param _ccy Currency for Lending Market\\n     * @param _term Term for Lending Market\\n     */\\n    function getLendingMarket(bytes32 _ccy, uint256 _term)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return Storage.slot().lendingMarkets[_ccy][_term];\\n    }\\n\\n    // =========== DISCOUNT FACTORS CALCULATION ===========\\n\\n    /**\\n     * @dev Triggers to discount factor for selected currency.\\n     * @param _ccy Currency\\n     */\\n    function getDiscountFactorsForCcy(bytes32 _ccy)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory, uint256[] memory)\\n    {\\n        uint256[] memory rates = getMidRatesForCcy(_ccy);\\n        return DiscountFactor.calculateDFs(rates, Storage.slot().supportedTerms[_ccy]);\\n    }\\n\\n    /**\\n     * @dev Triggers to supported terms for selected currency.\\n     * @param _ccy Currency\\n     */\\n    function getSupportedTerms(bytes32 _ccy) external view override returns (uint256[] memory) {\\n        return Storage.slot().supportedTerms[_ccy];\\n    }\\n\\n    // =========== MARKET DEPLOYMENT FUNCTIONS ===========\\n\\n    /**\\n     * @dev Deploys new Lending Market and save address at lendingMarkets mapping.\\n     * @param _ccy Main currency for new lending market\\n     * @param _term Term for new Lending Market\\n     *\\n     * @notice Reverts on deployment market with existing currency and term\\n     */\\n    function deployLendingMarket(bytes32 _ccy, uint256 _term)\\n        external\\n        override\\n        onlyOwner\\n        returns (address market)\\n    {\\n        require(currencyController().isSupportedCcy(_ccy), \\\"NON SUPPORTED CCY\\\");\\n        require(\\n            termStructure().isSupportedTerm(_term, ProductPrefixes.LOAN, _ccy),\\n            \\\"NON SUPPORTED TERM\\\"\\n        );\\n        require(\\n            Storage.slot().lendingMarkets[_ccy][_term] == address(0),\\n            \\\"Couldn't rewrite existing market\\\"\\n        );\\n        market = address(new LendingMarket(address(resolver), _ccy, _term));\\n        Storage.slot().lendingMarkets[_ccy][_term] = market;\\n\\n        Storage.slot().supportedTerms[_ccy].push(_term);\\n        Storage.slot().supportedTerms[_ccy] = Storage.slot().supportedTerms[_ccy].sort();\\n\\n        emit LendingMarketCreated(_ccy, _term, market);\\n        return market;\\n    }\\n\\n    // =========== LENDING MARKETS MANAGEMENT FUNCTIONS ===========\\n\\n    /**\\n     * @dev Pauses previously deployed lending market by currency\\n     * @param _ccy Currency for pausing all lending markets\\n     */\\n    function pauseLendingMarkets(bytes32 _ccy) external override onlyOwner returns (bool) {\\n        uint256[] memory terms = Storage.slot().supportedTerms[_ccy];\\n\\n        for (uint256 i = 0; i < terms.length; i++) {\\n            uint256 term = terms[i];\\n            ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy][term]);\\n            market.pauseMarket();\\n        }\\n\\n        emit LendingMarketsPaused(_ccy);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Unpauses previously deployed lending market by currency\\n     * @param _ccy Currency for pausing all lending markets\\n     */\\n    function unpauseLendingMarkets(bytes32 _ccy) external override onlyOwner returns (bool) {\\n        uint256[] memory terms = Storage.slot().supportedTerms[_ccy];\\n\\n        for (uint256 i = 0; i < terms.length; i++) {\\n            uint256 term = terms[i];\\n            ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy][term]);\\n            market.unpauseMarket();\\n        }\\n\\n        emit LendingMarketsUnpaused(_ccy);\\n        return true;\\n    }\\n\\n    // =========== BULK TRADE FUNCTIONS ===========\\n\\n    /**\\n     * @dev Places orders in multiple Lending Markets.\\n     * @param orders Lending Market orders array with ccy and terms to identify right market\\n     */\\n    function placeBulkOrders(Order[] memory orders) external override returns (bool) {\\n        for (uint8 i = 0; i < orders.length; i++) {\\n            Order memory order = orders[i];\\n\\n            ILendingMarket market = ILendingMarket(\\n                Storage.slot().lendingMarkets[order.ccy][order.term]\\n            );\\n            market.order(order.side, order.amount, order.rate);\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xb3077a8c500b6008a7220e19b71b2eefb3757b716f269c0cb2c683c26f648749\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/interfaces/ICloseOutNetting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICloseOutNetting {\\n    event AddCloseOutPayments(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event RemoveCloseOutPayments(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event SettleCloseOut(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 netPayment,\\n        bytes32 txHash\\n    );\\n    event VerifyCloseOut(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        uint256 netPayment,\\n        bytes32 txHash\\n    );\\n\\n    function addPayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) external;\\n\\n    function checkDefault(address _party) external view returns (bool);\\n\\n    function removePayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 payment0,\\n        uint256 payment1\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6bbe6c9de500443c72cde8832c0ff9c921c6f38ace09523d3a1769f6e855830e\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralAggregatorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICollateralAggregator {\\n    event Register(address indexed addr);\\n    event Release(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    );\\n    event Liquidate(address indexed from, address indexed to, bytes32 ccy, uint256 amount);\\n    event ReleaseUnsettled(address indexed party, bytes32 ccy, uint256 amount);\\n    event SettleCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event UpdatePV(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    );\\n    event UseCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    );\\n    event UseUnsettledCollateral(address indexed party, bytes32 ccy, uint256 amount);\\n\\n    function checkRegisteredUser(address addr) external view returns (bool);\\n\\n    function getCcyExposures(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getCoverage(address _party0, address _party1) external view returns (uint256, uint256);\\n\\n    function getExposedCurrencies(address partyA, address partyB)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getMaxCollateralBookWidthdraw(address _user)\\n        external\\n        view\\n        returns (uint256 maxWithdraw);\\n\\n    function getMaxCollateralWidthdraw(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getNetAndTotalPV(address _party0, address _party1)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getRebalanceCollateralAmounts(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getTotalUnsettledExp(address _user) external view returns (uint256);\\n\\n    function getUnsettledCoverage(address _user) external view returns (uint256 coverage);\\n\\n    function isCovered(\\n        address _party0,\\n        address _party1,\\n        bytes32 _ccy,\\n        uint256 _party0PV,\\n        uint256 _party1PV,\\n        bool _isSettled\\n    ) external view returns (bool, bool);\\n\\n    function isCoveredUnsettled(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) external view returns (bool);\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        uint256 liquidationInETH\\n    ) external;\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        bytes32 ccy,\\n        uint256 liquidationAmount,\\n        uint256 pv,\\n        bool isSettled\\n    ) external;\\n\\n    function register() external;\\n\\n    function register(string[] memory _addresses, uint256[] memory _chainIds) external;\\n\\n    function releaseCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function releaseUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function settleCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external;\\n\\n    function updatePV(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    ) external;\\n\\n    function useCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function useUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function getUnsettledCollateral(address user, bytes32 ccy) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6ce0f77af603bba3166a03eebf4b1679a78491c64cce912331765889583a4369\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICollateralVault {\\n    event Deposit(address user, bytes32 ccy, uint256 amount);\\n    event PositionDeposit(address user, address counterparty, bytes32 ccy, uint256 amount);\\n    event RebalanceBetween(\\n        address user,\\n        address fromCounterparty,\\n        address toCounterparty,\\n        bytes32 ccy,\\n        uint256 amount\\n    );\\n    event RebalanceFrom(address user, address counterparty, bytes32 ccy, uint256 amount);\\n    event RebalanceTo(address user, address counterparty, bytes32 ccy, uint256 amount);\\n    event Withdraw(address from, bytes32 ccy, uint256 amount);\\n    event PositionWithdraw(address from, address counterparty, bytes32 ccy, uint256 amount);\\n    event Liquidate(address from, address to, bytes32 ccy, uint256 amount);\\n    event LiquidateIndependent(address from, address to, bytes32 ccy, uint256 amount);\\n\\n    function deposit(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external;\\n\\n    function deposit(bytes32 _ccy, uint256 _amount) external payable;\\n\\n    function getIndependentCollateral(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getIndependentCollateralInETH(address _user, bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLockedCollateral(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getLockedCollateralInETH(address _user, bytes32 _ccy) external view returns (uint256);\\n\\n    function getLockedCollateral(\\n        address _partyA,\\n        address _partyB,\\n        bytes32 _ccy\\n    ) external view returns (uint256, uint256);\\n\\n    function getLockedCollateralInETH(\\n        address _partyA,\\n        address _partyB,\\n        bytes32 _ccy\\n    ) external view returns (uint256, uint256);\\n\\n    function liquidate(\\n        address _from,\\n        address _to,\\n        uint256 _liquidationTarget\\n    ) external returns (bool);\\n\\n    function rebalanceCollateral(\\n        address _party0,\\n        address _party1,\\n        uint256 _rebalanceTarget,\\n        bool isRebalanceFrom\\n    ) external returns (bool);\\n\\n    function rebalanceBetween(\\n        address _user,\\n        address _fromParty,\\n        address _toParty,\\n        bytes32 _ccy,\\n        uint256 _amountETH\\n    ) external returns (uint256);\\n\\n    function withdraw(bytes32 _ccy, uint256 _amount) external;\\n\\n    function withdrawFrom(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external;\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getUsedCurrencies(address party0, address party1)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getTotalIndependentCollateralInETH(address _party) external view returns (uint256);\\n\\n    function getTotalLockedCollateralInETH(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x05a973a84165750802bf97f2c889467191ae0a99fb50221149f46b9df35bdd6e\",\"license\":\"MIT\"},\"contracts/interfaces/ICrosschainAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICrosschainAddressResolver {\\n    event UpdateAddress(address _user, uint256 _chainId, string _address);\\n\\n    /**\\n     * @dev Trigers to register multiple cross-chain addresses per chainId for user\\n     * @param _user Secured Finance user ETH address\\n     * @param _chainIds Array of chain ID number\\n     * @param _addresses Array of the target blockchain addresses\\n     *\\n     * @notice This function triggers by the Collateral Aggregator while user is registered in a system\\n     *\\n     */\\n    function updateAddresses(\\n        address _user,\\n        uint256[] memory _chainIds,\\n        string[] memory _addresses\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to register cross-chain address per chainId by user\\n     * @param _chainId Chain ID number\\n     * @param _address Target blockchain address\\n     *\\n     */\\n    function updateAddress(uint256 _chainId, string memory _address) external;\\n\\n    /**\\n     * @dev Trigers to register cross-chain address per chainId by user\\n     * @param _user Secured Finance user ETH address\\n     * @param _chainId Chain ID number\\n     * @param _address Target blockchain address\\n     *\\n     */\\n    function updateAddress(\\n        address _user,\\n        uint256 _chainId,\\n        string memory _address\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to get target blockchain address for a specific user.\\n     * @param _user Ethereum address of the Secured Finance user\\n     * @param _user Chain ID number\\n     */\\n    function getUserAddress(address _user, uint256 _chainId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ef89efa2bd508258da18e2ca2699cb07847d75d6df996cde56b8f6d524d7db8\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CcyAdded(bytes32 indexed ccy, string name, uint16 chainId, uint256 haircut);\\n    event CcyCollateralUpdate(bytes32 indexed ccy, bool isCollateral);\\n    event CcySupportUpdate(bytes32 indexed ccy, bool isSupported);\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n    event MinMarginUpdated(bytes32 indexed ccy, uint256 minMargin);\\n    event PriceFeedAdded(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n    event PriceFeedRemoved(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n\\n    function convertBulkToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH) external view returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256);\\n\\n    function getCurrencies(bytes32) external view returns (ProtocolTypes.Currency memory);\\n\\n    function getEthDecimals(bytes32) external view returns (uint8);\\n\\n    function getUsdDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getMinMargin(bytes32 _ccy) external view returns (uint256);\\n\\n    function getChainId(bytes32 _ccy) external view returns (uint16);\\n\\n    function isCollateral(bytes32) external view returns (bool);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        uint16 _chainId,\\n        address _ethPriceFeed,\\n        uint256 _haircut,\\n        address _tokenAddress\\n    ) external;\\n\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function updateCollateralSupport(bytes32 _ccy, bool _isSupported) external;\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported) external;\\n\\n    function updateMinMargin(bytes32 _ccy, uint256 _minMargin) external;\\n\\n    function getTokenAddresses(bytes32) external view returns (address);\\n}\\n\",\"keccak256\":\"0x0bad90929934b6a43200ae276697a9e428d47b119120ea81208778ced9abbe76\",\"license\":\"MIT\"},\"contracts/interfaces/IExternalAdapterTxResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IExternalAdapterTxResponse {\\n    struct FulfillData {\\n        string from;\\n        string to;\\n        uint256 value;\\n        uint256 timestamp;\\n        string txHash;\\n    }\\n}\\n\",\"keccak256\":\"0x2fde36d406ead00758aeccdf58fd8be1b32cf2fd3fd2061824d538bd06d4ab4c\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ILendingMarket {\\n    struct MarketOrder {\\n        ProtocolTypes.Side side;\\n        uint256 amount;\\n        uint256 rate; // in basis points\\n        address maker;\\n    }\\n\\n    event CancelOrder(\\n        uint256 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n    event MakeOrder(\\n        uint256 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 term,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n    event TakeOrder(\\n        uint256 orderId,\\n        address indexed taker,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n\\n    function cancelOrder(uint256 orderId) external returns (bool success);\\n\\n    function getBorrowRate() external view returns (uint256 rate);\\n\\n    function getLendRate() external view returns (uint256 rate);\\n\\n    function getMaker(uint256 orderId) external view returns (address maker);\\n\\n    function getMidRate() external view returns (uint256 rate);\\n\\n    function getOrder(uint256 orderId) external view returns (MarketOrder memory);\\n\\n    function getOrderFromTree(uint256 orderId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function matchOrders(\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 rate\\n    ) external view returns (uint256);\\n\\n    function order(\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 rate\\n    ) external returns (bool);\\n\\n    function pauseMarket() external;\\n\\n    function unpauseMarket() external;\\n}\\n\",\"keccak256\":\"0xc241526b31cbb7ca4b0d3d8b1eeb0da8d42b4fc27ef412060b6a7d247ebf4ef3\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\nstruct Order {\\n    bytes32 ccy;\\n    uint256 term;\\n    ProtocolTypes.Side side;\\n    uint256 amount;\\n    uint256 rate;\\n}\\n\\ninterface ILendingMarketController {\\n    event LendingMarketCreated(bytes32 ccy, uint256 term, address indexed marketAddr);\\n    event LendingMarketsPaused(bytes32 ccy);\\n    event LendingMarketsUnpaused(bytes32 ccy);\\n\\n    function deployLendingMarket(bytes32 _ccy, uint256 _term) external returns (address market);\\n\\n    function getBorrowRatesForCcy(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getDiscountFactorsForCcy(bytes32 _ccy)\\n        external\\n        view\\n        returns (uint256[] memory, uint256[] memory);\\n\\n    function getLendRatesForCcy(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getMidRatesForCcy(bytes32 _ccy) external view returns (uint256[] memory rates);\\n\\n    function getLendingMarket(bytes32, uint256) external view returns (address);\\n\\n    function pauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function placeBulkOrders(Order[] memory orders) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 _ccy) external returns (bool);\\n\\n    function getSupportedTerms(bytes32 _ccy) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x8c2a321d93fb14a1878ffb332e03d8201c4998ecca88b8862347855787ebf49c\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ILiquidations {\\n    event DealAddedToLiquidationQueue(address party0, address party1, bytes32 dealId);\\n    event DealRemovedFromLiquidationQueue(address party0, address party1, bytes32 dealId);\\n    event LiquidationAgentAdded(address indexed liquidationAgent);\\n    event LiquidationAgentRemoved(address indexed liquidationAgent);\\n    event OffsetUpdated(uint256 oldOffset, uint256 newOffset);\\n\\n    function addDealToLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external;\\n\\n    function addLiquidationAgent(address _liquidationAgent) external;\\n\\n    function liquidateDeals(\\n        address party0,\\n        address party1,\\n        bytes32[] memory dealIds\\n    ) external;\\n\\n    function liquidateDeals(address party0, address party1) external;\\n\\n    function getOffset() external view returns (uint256);\\n\\n    function removeDealFromLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external;\\n\\n    function removeLiquidationAgent(address _liquidationAgent) external;\\n\\n    function updateLiquidationOffset(uint256 _offset) external;\\n}\\n\",\"keccak256\":\"0x4e2784b0014ff688a60c4628cc1ebab63ca0aa40aa9949dbde6d53c69dbe3746\",\"license\":\"MIT\"},\"contracts/interfaces/ILoanV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct LoanDeal {\\n    address lender;\\n    address borrower;\\n    bytes32 ccy;\\n    uint256 term;\\n    uint256 notional;\\n    uint256 rate;\\n    uint256 start;\\n    uint256 end;\\n    uint256 pv;\\n    bytes32 startTxHash;\\n    uint8 state;\\n}\\n\\ninterface ILoanV2 {\\n    event EarlyTermination(bytes32 dealId, address indexed acceptedBy, uint256 payment);\\n    event Liquidate(bytes32 dealId);\\n    event MarkToMarket(bytes32 dealId, uint256 prevPV, uint256 currPV);\\n    event Novation(bytes32 indexed dealId, address currLender);\\n    event Register(\\n        address indexed lender,\\n        address indexed borrower,\\n        bytes32 ccy,\\n        uint256 term,\\n        uint256 notional,\\n        uint256 rate,\\n        bytes32 indexed dealId\\n    );\\n    event RejectTermination(bytes32 dealId, address indexed rejectedBy);\\n    event RequestTermination(bytes32 dealId, address indexed requestedBy);\\n\\n    function acceptTermination(bytes32 loanId) external;\\n\\n    function addLendingMarket(\\n        bytes32 _ccy,\\n        uint256 _term,\\n        address addr\\n    ) external;\\n\\n    function getDF(bytes32 loanId, uint256 date) external view returns (uint256);\\n\\n    function getDealPV(bytes32 loanId) external view returns (uint256 pv);\\n\\n    function getDealLastPV(\\n        address party0,\\n        address party1,\\n        bytes32 loanId\\n    ) external view returns (uint256, uint256);\\n\\n    function getDealSettlementStatus(bytes32 loanId) external view returns (bool);\\n\\n    function getLastSettledPayment(bytes32 loanId) external view returns (uint256);\\n\\n    function getLoanDeal(bytes32 loanId) external view returns (LoanDeal memory);\\n\\n    function getPaymentSchedule(bytes32 loanId)\\n        external\\n        view\\n        returns (\\n            uint256[] memory,\\n            uint256[] memory,\\n            bool[] memory\\n        );\\n\\n    function getVersion() external view returns (uint16);\\n\\n    function isTransferable() external view returns (bool);\\n\\n    function last_loan_id() external view returns (uint256);\\n\\n    function lendingMarkets(bytes32, uint256) external view returns (address);\\n\\n    function liquidate(bytes32 loanId) external;\\n\\n    function markToMarket(bytes32 loanId) external returns (bool);\\n\\n    function novation(bytes32 loanId, address newOwner) external;\\n\\n    function owner() external view returns (address);\\n\\n    function register(\\n        address maker,\\n        address taker,\\n        uint8 side,\\n        bytes32 ccy,\\n        uint256 term,\\n        uint256 notional,\\n        uint256 rate\\n    ) external returns (bytes32 loanId);\\n\\n    function rejectTermination(bytes32 loanId) external;\\n\\n    function requestTermination(bytes32 loanId) external;\\n\\n    function setIsTransferable(bool isAccepted) external;\\n}\\n\",\"keccak256\":\"0xd93a3eabc0367448712c97109013d874025f6a72912982856f9e8be47edccb6a\",\"license\":\"MIT\"},\"contracts/interfaces/IMarkToMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IMarkToMarket {\\n    function updatePV(bytes32 dealId) external;\\n\\n    function updatePVs(bytes32[] memory dealIds) external;\\n}\\n\",\"keccak256\":\"0xb100f8c173fda11136c5579306d99065752bb797bff6ffe91c64eee228ae2df9\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct Slot {\\n    uint256 totalPayment0;\\n    uint256 totalPayment1;\\n    uint256 netPayment;\\n    bool flipped;\\n    bytes32 paymentProof;\\n    address verificationParty;\\n    bool isSettled;\\n}\\n\\ninterface IPaymentAggregator {\\n    event RegisterPayment(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event VerifyPayment(\\n        address indexed verifier,\\n        address indexed counterparty,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment,\\n        bytes32 settlementId\\n    );\\n    event SettlePayment(\\n        address indexed verifier,\\n        address indexed counterparty,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        bytes32 settlementId\\n    );\\n    event RemovePayment(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n\\n    function registerPayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 dealId,\\n        uint256[] memory timestamps,\\n        uint256[] memory payments0,\\n        uint256[] memory payments1\\n    ) external;\\n\\n    function removePayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 dealId,\\n        uint256[] calldata timestamps,\\n        uint256[] calldata payments0,\\n        uint256[] calldata payments1\\n    ) external;\\n\\n    function verifyPayment(\\n        address verifier,\\n        address counterparty,\\n        bytes32 ccy,\\n        uint256 timestamp,\\n        uint256 payment,\\n        bytes32 settlementId\\n    ) external;\\n\\n    function isSettled(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 timestamp\\n    ) external view returns (bool status);\\n\\n    function getDealsFromSlot(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 slotPosition\\n    ) external view returns (bytes32[] memory);\\n\\n    // function getTimeSlotByDate(\\n    //     address party0,\\n    //     address party1,\\n    //     bytes32 ccy,\\n    //     uint256 year,\\n    //     uint256 month,\\n    //     uint256 day\\n    // ) external view returns (Slot memory timeSlot);\\n\\n    // function getTimeSlotBySlotId(\\n    //     address party0,\\n    //     address party1,\\n    //     bytes32 ccy,\\n    //     bytes32 slot\\n    // ) external view returns (Slot memory timeSlot);\\n\\n    function checkSettlementWindow(uint256 targetTime) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x626f4bb7d28a476b21c2bc18278a091f134fbd98a6e06e586cd63180184518f4\",\"license\":\"MIT\"},\"contracts/interfaces/IProductAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IProductAddressResolver {\\n    event RegisterProduct(bytes4 prefix, address indexed product, address indexed controller);\\n\\n    /**\\n     * @dev Triggers to register new product type in a address resolver\\n     * @param _prefix Bytes4 prefix for product type\\n     * @param _contract Product contract address\\n     * @param _controller Market controller address\\n     *\\n     * @notice Triggers only be contract owner\\n     * @notice Reverts on saving contract which is not supporting a common interface\\n     */\\n    function registerProduct(\\n        bytes4 _prefix,\\n        address _contract,\\n        address _controller\\n    ) external;\\n\\n    /**\\n     * @dev Triggers to register several product types in a address resolver\\n     * @param _prefixes Array of Bytes4 prefixes for each product type\\n     * @param _contracts Array of smart contract addresses for each product\\n     * @param _controllers Array of market controller addresses\\n     *\\n     * @notice Triggers only be contract owner\\n     * @notice Reverts on saving contract which is not supporting common interface\\n     */\\n    function registerProducts(\\n        bytes4[] calldata _prefixes,\\n        address[] calldata _contracts,\\n        address[] calldata _controllers\\n    ) external;\\n\\n    /**\\n     * @dev Triggers to get product address by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContract(bytes4 _prefix) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to get product addresses\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContracts() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Triggers to get product address by deal id\\n     * @param _dealId Product deal idenfitier\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContractByDealId(bytes32 _dealId) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to get market controller address by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     * @notice To work with the contract this address should be wrapped around IYieldCurve interface\\n     */\\n    function getControllerContract(bytes4 _prefix) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to get market controller address by deal id\\n     * @param _dealId Product deal idenfitier\\n     * @notice To work with the contract this address should be wrapped around IYieldCurve interface\\n     */\\n    function getControllerContractByDealId(bytes32 _dealId) external view returns (address);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product is supported by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     */\\n    function isSupportedProduct(bytes4 _prefix) external view returns (bool);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product is supported by deal id.\\n     * @param _dealId Product deal idenfitier\\n     */\\n    function isSupportedProductByDealId(bytes32 _dealId) external view returns (bool);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product contract is registered.\\n     * @param _product Product contract address\\n     */\\n    function isRegisteredProductContract(address _product) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x44855f57913172a86e203a89d7713efe1ec39351a0830b0f35fac9ffa24ec770\",\"license\":\"MIT\"},\"contracts/interfaces/ISettlementEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.3. SEE SOURCE BELOW. !!\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IExternalAdapterTxResponse.sol\\\";\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ISettlementEngine {\\n    event CrosschainSettlementRequested(\\n        address payer,\\n        address receiver,\\n        uint16 chainId,\\n        uint256 timestamp,\\n        string txHash,\\n        bytes32 requestId\\n    );\\n    event CrosschainSettlementRequestFulfilled(\\n        string payer,\\n        string receiver,\\n        uint16 chainId,\\n        uint256 amount,\\n        uint256 timestamp,\\n        string txHash,\\n        bytes32 settlementId\\n    );\\n    event ExternalAdapterAdded(address indexed adapter, bytes32 ccy);\\n\\n    function addExternalAdapter(address _adapter, bytes32 _ccy) external;\\n\\n    function getExternalAdapters(bytes32) external view returns (address);\\n\\n    function fulfillSettlementRequest(\\n        bytes32 _requestId,\\n        IExternalAdapterTxResponse.FulfillData calldata _txData,\\n        bytes32 _ccy\\n    ) external;\\n\\n    function getVersion() external view returns (uint16);\\n\\n    function getSettlementRequests(bytes32)\\n        external\\n        view\\n        returns (ProtocolTypes.SettlementRequest memory);\\n\\n    function verifyPayment(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _payment,\\n        uint256 _timestamp,\\n        string calldata _txHash\\n    ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3888a41e40b8eb2cebf8557436b0f09286dfaeb08a3762a33c0a6ae0521f67a3\",\"license\":\"MIT\"},\"contracts/interfaces/ITermStructure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ITermStructure {\\n    event TermAdded(uint256 numDays);\\n    event ProductTermSupportUpdated(\\n        uint256 numDays,\\n        bytes4 product,\\n        bytes32 _ccy,\\n        bool isSupported\\n    );\\n    event TermSupportUpdated(uint256 numDays, bool isSupported);\\n\\n    function getDfFrac(uint256 _numDays) external view returns (uint256);\\n\\n    function getNumDays(uint256 _numDays) external view returns (uint256);\\n\\n    function getNumPayments(uint256 _numDays, uint8 frequency) external view returns (uint256);\\n\\n    function getTerm(uint256 _numDays, uint8 frequency)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getTermSchedule(uint256 _numDays, uint8 frequency)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isSupportedTerm(\\n        uint256 _numDays,\\n        bytes4 _product,\\n        bytes32 _ccy\\n    ) external view returns (bool);\\n\\n    function supportTerm(\\n        uint256 _numDays,\\n        bytes4[] memory _products,\\n        bytes32[] memory _currencies\\n    ) external;\\n\\n    function updateTermSupport(\\n        uint256 _numDays,\\n        bytes4 _product,\\n        bytes32 _ccy,\\n        bool _isSupported\\n    ) external;\\n\\n    function getTermsForProductAndCcy(\\n        bytes4 _product,\\n        bytes32 _ccy,\\n        bool sort\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x8509c4f927878626ee8cb73d0fb2daa0cf0a7c9869bb6241ccc180d0854544f4\",\"license\":\"MIT\"},\"contracts/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant CLOSE_OUT_NETTING = \\\"CloseOutNetting\\\";\\n    bytes32 internal constant COLLATERAL_AGGREGATOR = \\\"CollateralAggregator\\\";\\n    bytes32 internal constant COLLATERAL_VAULT = \\\"CollateralVault\\\";\\n    bytes32 internal constant CROSSCHAIN_ADDRESS_RESOLVER = \\\"CrosschainAddressResolver\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant LIQUIDATIONS = \\\"Liquidations\\\";\\n    bytes32 internal constant MARK_TO_MARKET = \\\"MarkToMarket\\\";\\n    bytes32 internal constant PAYMENT_AGGREGATOR = \\\"PaymentAggregator\\\";\\n    bytes32 internal constant PRODUCT_ADDRESS_RESOLVER = \\\"ProductAddressResolver\\\";\\n    bytes32 internal constant SETTLEMENT_ENGINE = \\\"SettlementEngine\\\";\\n    bytes32 internal constant TERM_STRUCTURE = \\\"TermStructure\\\";\\n}\\n\",\"keccak256\":\"0x939f50a87aa51db235c78c3c224edc9123271a5b44974e13557e4590958e83df\",\"license\":\"MIT\"},\"contracts/libraries/DiscountFactor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary DiscountFactor {\\n    uint256 internal constant BP = 10000; // basis point\\n    uint256 internal constant NON_ANNUAL_TERMS = 3;\\n\\n    function determineDF(\\n        uint256 rate,\\n        uint256 term,\\n        uint256[] memory cache,\\n        uint256 dfSum,\\n        uint256 index\\n    ) internal pure returns (uint256 df) {\\n        if (term < 365) {\\n            df = (BP * BP) / (BP + ((rate * term) / 360));\\n        } else if (term == 365) {\\n            df = (BP * BP) / ((BP + rate));\\n            dfSum = dfSum + df;\\n        } else {\\n            uint256 rateSum = (rate * dfSum) / BP;\\n            if (rateSum > BP) {\\n                df = 0;\\n            } else {\\n                df = (BP * (BP - ((rate * dfSum) / BP))) / (BP + rate);\\n            }\\n            dfSum = dfSum + df;\\n        }\\n\\n        cache[index] = df;\\n\\n        return dfSum;\\n    }\\n\\n    function calculateDFs(uint256[] memory rates, uint256[] memory terms)\\n        public\\n        pure\\n        returns (uint256[] memory, uint256[] memory)\\n    {\\n        require(rates.length == terms.length, \\\"INVALID_PARAMS\\\");\\n\\n        (uint256[] memory bootstrapedRates, uint256[] memory bootstrapedTerms) = bootstrapTerms(\\n            rates,\\n            terms\\n        );\\n\\n        uint256 len = bootstrapedTerms.length;\\n        uint256[] memory dfs = new uint256[](len);\\n        uint256 dfSum;\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            dfSum = determineDF(bootstrapedRates[i], bootstrapedTerms[i], dfs, dfSum, i);\\n        }\\n\\n        return (dfs, bootstrapedTerms);\\n    }\\n\\n    function maxDFs(uint256 maxTerm) internal pure returns (uint256) {\\n        return maxTerm / 365 + NON_ANNUAL_TERMS;\\n    }\\n\\n    struct TermBootstrapingLocalVars {\\n        uint256 extendedTerms;\\n        uint256 delta;\\n        uint256 numItems;\\n        uint256 lastKnownRate;\\n        uint256 nextKnownRate;\\n        uint256 nextKnownTerm;\\n        bool upwards;\\n        uint256 deltaRate;\\n        uint256 step;\\n    }\\n\\n    function bootstrapTerms(uint256[] memory rates, uint256[] memory terms)\\n        public\\n        pure\\n        returns (uint256[] memory, uint256[] memory)\\n    {\\n        uint256 len = maxDFs(terms[terms.length - 1]);\\n\\n        uint256[] memory filledRates = new uint256[](len);\\n        uint256[] memory filledTerms = new uint256[](len);\\n        TermBootstrapingLocalVars memory vars;\\n\\n        for (uint256 i = 0; i < terms.length - 1; i++) {\\n            if (terms[i] < 365) {\\n                filledRates[i] = rates[i];\\n                filledTerms[i] = terms[i];\\n                continue;\\n            }\\n            vars.delta = terms[i + 1] - terms[i];\\n\\n            if (vars.delta <= 365) {\\n                filledRates[i] = rates[i];\\n                filledTerms[i] = terms[i];\\n                continue;\\n            }\\n\\n            vars.numItems = vars.delta / 365;\\n            vars.lastKnownRate = rates[i];\\n\\n            if (vars.extendedTerms == 0) {\\n                filledRates[i] = vars.lastKnownRate;\\n                filledTerms[i] = terms[i];\\n            }\\n            vars.nextKnownRate = rates[i + 1];\\n            vars.nextKnownTerm = terms[i + 1];\\n            vars.upwards = vars.nextKnownRate > vars.lastKnownRate ? true : false;\\n            vars.deltaRate = vars.upwards\\n                ? vars.nextKnownRate - vars.lastKnownRate\\n                : vars.lastKnownRate - vars.nextKnownRate;\\n            vars.step = vars.deltaRate / vars.numItems;\\n\\n            for (uint256 j = 1; j < vars.numItems; j++) {\\n                vars.extendedTerms = vars.extendedTerms + 1;\\n\\n                uint256 newIndex = i + vars.extendedTerms;\\n                uint256 missedRate = vars.upwards\\n                    ? filledRates[newIndex - 1] + vars.step\\n                    : filledRates[newIndex - 1] - vars.step;\\n                uint256 missedTerm = terms[i] + uint256(365) * j;\\n\\n                filledRates[newIndex] = missedRate;\\n                filledTerms[newIndex] = missedTerm;\\n\\n                if (j == vars.numItems - 1) {\\n                    uint256 shifterIndex = newIndex + 1;\\n\\n                    filledRates[shifterIndex] = vars.nextKnownRate;\\n                    filledTerms[shifterIndex] = vars.nextKnownTerm;\\n                }\\n            }\\n        }\\n\\n        return (filledRates, filledTerms);\\n    }\\n\\n    struct DFInterpolationLocalVars {\\n        uint256 timeDelta;\\n        uint256 termSeconds;\\n        uint256 prevTermSeconds;\\n        uint256 left;\\n        uint256 right;\\n        uint256 total;\\n    }\\n\\n    /**\\n     * @dev Triggers to adjust discount factors by interpolating to current loan maturity\\n     * @param discountFactors Discount factors array\\n     * @param terms Array of terms\\n     * @param date Date to calculate discount factors for\\n     *\\n     */\\n    function interpolateDF(\\n        uint256[] memory discountFactors,\\n        uint256[] memory terms,\\n        uint256 date\\n    ) public view returns (uint256) {\\n        DFInterpolationLocalVars memory vars;\\n        vars.timeDelta = date - block.timestamp;\\n\\n        if (vars.timeDelta <= terms[0] * 86400) {\\n            vars.termSeconds = terms[0] * 86400;\\n            vars.left = vars.termSeconds - vars.timeDelta;\\n\\n            return (BP * vars.left + (discountFactors[0] * vars.timeDelta)) / (vars.termSeconds);\\n        } else {\\n            for (uint256 i = 1; i < terms.length; i++) {\\n                vars.termSeconds = terms[i] * 86400;\\n                vars.prevTermSeconds = terms[i - 1] * 86400;\\n\\n                if (vars.prevTermSeconds < vars.timeDelta && vars.timeDelta <= vars.termSeconds) {\\n                    vars.left = vars.timeDelta - vars.prevTermSeconds;\\n\\n                    if (vars.left == 0) {\\n                        return discountFactors[i]; // gas savings only\\n                    }\\n\\n                    vars.right = vars.termSeconds - vars.timeDelta;\\n                    if (vars.right == 0) {\\n                        return discountFactors[i];\\n                    }\\n\\n                    vars.total = vars.termSeconds - vars.prevTermSeconds;\\n\\n                    return\\n                        (discountFactors[i - 1] * vars.right + discountFactors[i] * vars.left) /\\n                        vars.total;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd7bf2f695544b673126107e9374251de4a229008113f1ca4cc72b565390106c1\",\"license\":\"MIT\"},\"contracts/libraries/HitchensOrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary HitchensOrderStatisticsTreeLib {\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint256 head;\\n        uint256 tail;\\n        uint256 orderCounter;\\n        mapping(uint256 => OrderItem) orders;\\n    }\\n\\n    struct OrderItem {\\n        uint256 orderId;\\n        uint256 next;\\n        uint256 prev;\\n        uint256 timestamp;\\n        uint256 amount;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].right != EMPTY) {\\n            _value = self.nodes[_value].right;\\n        }\\n    }\\n\\n    function next(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(401) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].right != EMPTY) {\\n            _cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(402) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].left != EMPTY) {\\n            _cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint256 value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        if (self.nodes[value].parent != EMPTY) return true;\\n        return false;\\n    }\\n\\n    function amountExistsInNode(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        if (!exists(self, value)) return false;\\n        return isAmountExistsInList(self, value, amount);\\n    }\\n\\n    function orderExistsInNode(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal view returns (bool) {\\n        if (!exists(self, value)) return false;\\n        return isOrderIdExists(self, value, amount, orderId);\\n    }\\n\\n    function getNode(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n        return (gn.parent, gn.left, gn.right, gn.red, gn.head, gn.tail, gn.orderCounter);\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256 _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(405) - Value to insert cannot be zero\\\");\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                insertOrder(self, probe, amount, orderId);\\n                return;\\n            }\\n        }\\n        Node storage nValue = self.nodes[value];\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n        insertOrder(self, value, amount, orderId);\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(407) - Value to delete cannot be zero\\\");\\n        require(\\n            orderExistsInNode(self, amount, value, orderId),\\n            \\\"OrderStatisticsTree(408) - Value to delete does not exist.\\\"\\n        );\\n        Node storage nValue = self.nodes[value];\\n        removeOrder(self, value, orderId);\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint256 a,\\n        uint256 b\\n    ) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        return (order.orderId, order.next, order.prev, order.timestamp, order.amount);\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function isOrderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 amount,\\n        uint256 orderId\\n    ) internal view returns (bool) {\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        if (order.amount != amount) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Return boolean if value and amount exist in doubly linked list.\\n     */\\n    function isAmountExistsInList(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 amount\\n    ) internal view returns (bool) {\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[gn.head];\\n        while (order.next != 0 && order.amount < amount) {\\n            order = gn.orders[order.next];\\n        }\\n        if (order.amount == 0) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Return the id of the first OrderItem matching `_amount` in the amount field.\\n     */\\n    function findOrderIdForAmount(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 amount\\n    ) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[gn.head];\\n        while (order.orderId != gn.tail && order.amount < amount) {\\n            order = gn.orders[order.next];\\n        }\\n        if (order.amount >= amount) {\\n            return order.orderId;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reduces order amount once market order taken.\\n     */\\n    function fillOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId,\\n        uint256 _amount\\n    ) internal returns (bool) {\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        uint256 newAmount = order.amount - _amount;\\n        gn.orders[orderId].amount = newAmount;\\n\\n        if (gn.orders[orderId].amount == 0) {\\n            remove(self, newAmount, value, orderId);\\n        } else {\\n            if (gn.orders[gn.head].amount < newAmount) {\\n                OrderItem memory rootOrder = gn.orders[gn.head];\\n                while (rootOrder.orderId != gn.tail && rootOrder.amount < newAmount) {\\n                    rootOrder = gn.orders[rootOrder.next];\\n                }\\n                if (order.amount > _amount) {\\n                    OrderItem memory prevOrder = gn.orders[rootOrder.prev];\\n                    _link(self, value, order.orderId, rootOrder.orderId);\\n                    _link(self, value, prevOrder.orderId, order.orderId);\\n                } else {\\n                    OrderItem memory nextOrder = gn.orders[rootOrder.next];\\n                    _link(self, value, order.orderId, nextOrder.orderId);\\n                    _link(self, value, rootOrder.orderId, order.orderId);\\n                }\\n            } else {\\n                _link(self, value, order.orderId, gn.head);\\n                _setHead(self, value, order.orderId);\\n                if (gn.tail == 0) _setTail(self, value, order.orderId);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Up size order by market maker.\\n     */\\n    function upSizeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId,\\n        uint256 _amount\\n    ) internal returns (bool) {\\n        require(_amount > 0, \\\"Couldn't up size order with 0\\\");\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        uint256 newAmount = order.amount + _amount;\\n        gn.orders[orderId].amount = newAmount;\\n\\n        if (gn.orders[gn.head].amount < newAmount) {\\n            OrderItem memory rootOrder = gn.orders[gn.head];\\n            while (rootOrder.orderId != gn.tail && rootOrder.amount < newAmount) {\\n                rootOrder = gn.orders[rootOrder.next];\\n            }\\n            if (order.amount > _amount) {\\n                OrderItem memory prevOrder = gn.orders[rootOrder.prev];\\n                _link(self, value, order.orderId, rootOrder.orderId);\\n                _link(self, value, prevOrder.orderId, order.orderId);\\n            } else {\\n                OrderItem memory nextOrder = gn.orders[rootOrder.next];\\n                _link(self, value, order.orderId, nextOrder.orderId);\\n                _link(self, value, rootOrder.orderId, order.orderId);\\n            }\\n        } else {\\n            _link(self, value, order.orderId, gn.head);\\n            _setHead(self, value, order.orderId);\\n            if (gn.tail == 0) _setTail(self, value, order.orderId);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount,\\n        uint256 _orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n        uint256 orderId = _createOrder(self, value, _amount, _orderId);\\n        _link(self, value, orderId, gn.head);\\n        _setHead(self, value, orderId);\\n        if (gn.tail == 0) _setTail(self, value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount,\\n        uint256 _orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, value, _amount, _orderId);\\n        } else {\\n            uint256 orderId = _createOrder(self, value, _amount, _orderId);\\n            _link(self, value, gn.tail, orderId);\\n            _setTail(self, value, orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the List.\\n     */\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem after the last OrderItem with the same `_amount`.\\n     */\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount,\\n        uint256 _orderId\\n    ) internal {\\n        require(_amount > 0, \\\"Insuficient amount\\\");\\n\\n        Node storage gn = self.nodes[value];\\n        if (gn.head == 0) {\\n            addHead(self, value, _amount, _orderId);\\n        } else {\\n            if (gn.orders[gn.head].amount < _amount) {\\n                OrderItem memory order = gn.orders[gn.head];\\n                while (order.next != 0 && order.amount <= _amount) {\\n                    order = gn.orders[order.next];\\n                }\\n                if (order.amount > _amount) {\\n                    insertOrderBefore(self, value, order.orderId, _amount, _orderId);\\n                } else {\\n                    insertOrderAfter(self, value, order.orderId, _amount, _orderId);\\n                }\\n            } else {\\n                addHead(self, value, _amount, _orderId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderImer after the Order denoted by `_id` with `_amount` and `_orderId` in the amount field.\\n     */\\n    function insertOrderAfter(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _prevId,\\n        uint256 _amount,\\n        uint256 _orderId\\n    ) internal {\\n        require(_amount > 0, \\\"Insuficient amount\\\");\\n\\n        Node storage gn = self.nodes[value];\\n\\n        if (_prevId == gn.tail) {\\n            addTail(self, value, _amount, _orderId);\\n        } else {\\n            OrderItem memory prevOrder = gn.orders[_prevId];\\n            OrderItem memory nextOrder = gn.orders[prevOrder.next];\\n            uint256 newOrderId = _createOrder(self, value, _amount, _orderId);\\n            _link(self, value, newOrderId, nextOrder.orderId);\\n            _link(self, value, prevOrder.orderId, newOrderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new Object before the Object denoted by `_id` with `_amount` and `_orderId` in the data field.\\n     */\\n    function insertOrderBefore(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _nextId,\\n        uint256 _amount,\\n        uint256 _orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        if (_nextId == gn.head) {\\n            addHead(self, value, _amount, _orderId);\\n        } else {\\n            insertOrderAfter(self, value, gn.orders[_nextId].prev, _amount, _orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 amount,\\n        uint256 orderId\\n    ) internal returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        uint256 newId;\\n        if (gn.orderCounter == 0) {\\n            newId = 1;\\n        }\\n        gn.orderCounter += 1;\\n        OrderItem memory order = OrderItem(orderId, 0, 0, block.timestamp, amount);\\n        gn.orders[order.orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _prevId,\\n        uint256 _nextId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[_prevId].next = _nextId;\\n        gn.orders[_nextId].prev = _prevId;\\n    }\\n}\\n\",\"keccak256\":\"0xbc8af297e346d090588b390043fc9d0a1916397a299700c046112945d3a74971\",\"license\":\"MIT\"},\"contracts/libraries/ProductPrefixes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary ProductPrefixes {\\n    bytes4 internal constant LOAN = 0x21aaa47b;\\n}\\n\",\"keccak256\":\"0x722ed8b3c9faac0507f273043f6f1f3219aa4b374f8a00321ee381bf7b27528b\",\"license\":\"MIT\"},\"contracts/libraries/QuickSort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary QuickSort {\\n    function sort(uint256[] memory data) public pure returns (uint256[] memory) {\\n        quickSort(data, int256(0), int256(data.length - 1));\\n        return data;\\n    }\\n\\n    function quickSort(\\n        uint256[] memory arr,\\n        int256 left,\\n        int256 right\\n    ) internal pure {\\n        int256 i = left;\\n        int256 j = right;\\n        if (i == j) return;\\n        uint256 pivot = arr[uint256(left + (right - left) / 2)];\\n        while (i <= j) {\\n            while (arr[uint256(i)] < pivot) i++;\\n            while (pivot < arr[uint256(j)]) j--;\\n            if (i <= j) {\\n                (arr[uint256(i)], arr[uint256(j)]) = (arr[uint256(j)], arr[uint256(i)]);\\n                i++;\\n                j--;\\n            }\\n        }\\n        if (left < j) quickSort(arr, left, j);\\n        if (i < right) quickSort(arr, i, right);\\n    }\\n}\\n\",\"keccak256\":\"0x2cce94db4f423d70543c79888f77ed57fad6e6638e6a1d1399daabb99676643a\",\"license\":\"MIT\"},\"contracts/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../libraries/Contracts.sol\\\";\\nimport \\\"../interfaces/IAddressResolver.sol\\\";\\nimport \\\"../interfaces/ICloseOutNetting.sol\\\";\\nimport \\\"../interfaces/ICollateralAggregatorV2.sol\\\";\\nimport \\\"../interfaces/ICollateralVault.sol\\\";\\nimport \\\"../interfaces/ICrosschainAddressResolver.sol\\\";\\nimport \\\"../interfaces/ICurrencyController.sol\\\";\\nimport \\\"../interfaces/IMarkToMarket.sol\\\";\\nimport \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport \\\"../interfaces/ILiquidations.sol\\\";\\nimport \\\"../interfaces/IPaymentAggregator.sol\\\";\\nimport \\\"../interfaces/IProductAddressResolver.sol\\\";\\nimport \\\"../interfaces/ISettlementEngine.sol\\\";\\nimport \\\"../interfaces/ITermStructure.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    IAddressResolver public resolver;\\n\\n    mapping(bytes32 => address) private addressCache;\\n\\n    modifier onlyAcceptedContracts() {\\n        require(isAcceptedContract(msg.sender), \\\"Only Accepted Contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns required contract names in this contract\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @dev Returns contract names that can call this contract.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        require(address(resolver) == address(0), \\\"resolver registered already\\\");\\n        resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function closeOutNetting() internal view returns (ICloseOutNetting) {\\n        return ICloseOutNetting(getAddress(Contracts.CLOSE_OUT_NETTING));\\n    }\\n\\n    function collateralAggregator() internal view returns (ICollateralAggregator) {\\n        return ICollateralAggregator(getAddress(Contracts.COLLATERAL_AGGREGATOR));\\n    }\\n\\n    function collateralVault() internal view returns (ICollateralVault) {\\n        return ICollateralVault(getAddress(Contracts.COLLATERAL_VAULT));\\n    }\\n\\n    function crosschainAddressResolver() internal view returns (ICrosschainAddressResolver) {\\n        return ICrosschainAddressResolver(getAddress(Contracts.CROSSCHAIN_ADDRESS_RESOLVER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function markToMarket() internal view returns (IMarkToMarket) {\\n        return IMarkToMarket(getAddress(Contracts.MARK_TO_MARKET));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function liquidations() internal view returns (ILiquidations) {\\n        return ILiquidations(getAddress(Contracts.LIQUIDATIONS));\\n    }\\n\\n    function paymentAggregator() internal view returns (IPaymentAggregator) {\\n        return IPaymentAggregator(getAddress(Contracts.PAYMENT_AGGREGATOR));\\n    }\\n\\n    function productAddressResolver() internal view returns (IProductAddressResolver) {\\n        return IProductAddressResolver(getAddress(Contracts.PRODUCT_ADDRESS_RESOLVER));\\n    }\\n\\n    function settlementEngine() internal view returns (ISettlementEngine) {\\n        return ISettlementEngine(getAddress(Contracts.SETTLEMENT_ENGINE));\\n    }\\n\\n    function termStructure() internal view returns (ITermStructure) {\\n        return ITermStructure(getAddress(Contracts.TERM_STRUCTURE));\\n    }\\n}\\n\",\"keccak256\":\"0xa11e12f5ac8a1710ad3f16fb7d867e615ed13dd98324eea2f7eb36c00b21c2fb\",\"license\":\"MIT\"},\"contracts/storages/LendingMarketControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary LendingMarketControllerStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarketController\\\");\\n\\n    struct Storage {\\n        mapping(bytes32 => mapping(uint256 => address)) lendingMarkets;\\n        mapping(bytes32 => uint256[]) supportedTerms;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7b075f79663bb2d9102e382f099fab3eaeb08b12bcb816f007c6568a2e1ff5f4\",\"license\":\"MIT\"},\"contracts/storages/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary OwnableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.ownable\\\");\\n\\n    struct Storage {\\n        address owner;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ef8bfa06947cdb63d47248ad074ac42a1b1ba828a2c97e42486a5dbb2c03e1d\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant BP = 10000; // basis point\\n    uint256 public constant PCT = 10000; // percentage point in basis\\n    uint256 public constant PENALTYLEVEL = 1000; // 10% settlement failure penalty\\n    uint256 public constant MKTMAKELEVEL = 2000; // 20% for market making\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Loan common types\\n    enum LoanState {\\n        REGISTERED,\\n        WORKING,\\n        DUE,\\n        PAST_DUE,\\n        CLOSED,\\n        TERMINATED\\n    }\\n    enum DFTERM {\\n        _3m,\\n        _6m,\\n        _1y,\\n        _2y,\\n        _3y,\\n        _4y,\\n        _5y\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n\\n    // FXMarket common types\\n    enum CcyPair {\\n        FILETH,\\n        FILUSDC,\\n        ETHUSDC,\\n        BTCUSDC,\\n        BTCETH,\\n        BTCFIL\\n    }\\n    enum FXSide {\\n        BID,\\n        OFFER\\n    }\\n\\n    enum PaymentFrequency {\\n        ANNUAL,\\n        SEMI_ANNUAL,\\n        QUARTERLY,\\n        MONTHLY,\\n        FORWARD\\n    }\\n\\n    struct Currency {\\n        bool isSupported;\\n        string name;\\n        uint16 chainId; // chain id for address conversion\\n    }\\n\\n    struct SettlementRequest {\\n        address payer;\\n        address receiver;\\n        uint16 chainId;\\n        uint256 timestamp;\\n        string txHash;\\n    }\\n}\\n\",\"keccak256\":\"0x6419e0bcd07b8ff86e0ffce1e7f16e9a38a470f0ab2f697af0f5234cb943303f\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../storages/OwnableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return OwnableStorage.slot().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = OwnableStorage.slot().owner;\\n        OwnableStorage.slot().owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1c782b9deaf1f94d2af99826e6e8207f5e71f3fbb6ce18805913a3ca7dda9579\",\"license\":\"MIT\"},\"contracts/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9f02e4ae76f34a28299e4b6a10490ebf99b9c9a8454765bff7977cc4f3d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615ac9806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620001395760003560e01c806378f7b51611620000bb578063b3cb8450116200007a578063b3cb8450146200029a578063e099765914620002b1578063e52f2a9214620002b9578063e99d053814620002d0578063f2fde38b14620002e757600080fd5b806378f7b51614620002345780638a981745146200024b5780638da5cb5b146200026257806393e7c107146200026c5780639ccec206146200028357600080fd5b806329985e5a116200010857806329985e5a14620001d35780632af64bd314620001df5780633d03b9da14620001fa578063485cc9551462000213578063715018a6146200022a57600080fd5b806304f3bcec146200013e5780630a2b2008146200016f5780631b30a28814620001965780632717547f14620001bc575b600080fd5b60005462000152906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b620001866200018036600462001b50565b620002fe565b6040516200016692919062001ba7565b620001ad620001a736600462001b50565b620003ca565b60405162000166919062001bd9565b620001ad620001cd36600462001b50565b62000599565b620001dd62000760565b005b620001e962000903565b604051901515815260200162000166565b6200020462000a30565b60405162000166919062001bf5565b620001dd6200022436600462001c51565b62000abe565b620001dd62000bbb565b620001526200024536600462001c8f565b62000bfd565b620001526200025c36600462001c8f565b620010a1565b62000152620010d2565b620001ad6200027d36600462001b50565b62001105565b620001e96200029436600462001d4f565b6200117d565b620001e9620002ab36600462001b50565b62001294565b606062000204565b620001ad620002ca36600462001b50565b62001440565b620001e9620002e136600462001b50565b62001607565b620001dd620002f836600462001e42565b620017a7565b60608060006200030e84620003ca565b90507380C3B044C44a894Ff257E572502F40fE0C28F508635e1a1383826200033562001850565b60010160008881526020019081526020016000206040518363ffffffff1660e01b81526004016200036892919062001e62565b60006040518083038186803b1580156200038157600080fd5b505af415801562000396573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620003c0919081019062001f30565b9250925050915091565b60606000620003d862001850565b60010160008481526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156200043857602002820191906000526020600020905b81548152602001906001019080831162000423575b505050505090506000815167ffffffffffffffff8111156200045e576200045e62001cb2565b60405190808252806020026020018201604052801562000488578160200160208202803683370190505b50905060005b825181101562000591576000838281518110620004af57620004af62001f9b565b602002602001015190506000620004c562001850565b600088815260209182526040808220858352835290819020548151637d37adff60e11b815291516001600160a01b039091169350839263fa6f5bfe9260048082019391829003018186803b1580156200051d57600080fd5b505afa15801562000532573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000558919062001fb1565b8484815181106200056d576200056d62001f9b565b60200260200101818152505050508080620005889062001fe1565b9150506200048e565b509392505050565b60606000620005a762001850565b60010160008481526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156200060757602002820191906000526020600020905b815481526020019060010190808311620005f2575b505050505090506000815167ffffffffffffffff8111156200062d576200062d62001cb2565b60405190808252806020026020018201604052801562000657578160200160208202803683370190505b50905060005b8251811015620005915760008382815181106200067e576200067e62001f9b565b6020026020010151905060006200069462001850565b600088815260209182526040808220858352835290819020548151634474638b60e11b815291516001600160a01b03909116935083926388e8c7169260048082019391829003018186803b158015620006ec57600080fd5b505afa15801562000701573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000727919062001fb1565b8484815181106200073c576200073c62001f9b565b60200260200101818152505050508080620007579062001fe1565b9150506200065d565b60006200076c62000a30565b905060005b8151811015620008ff57600082828151811062000792576200079262001f9b565b6020026020010151905060008060009054906101000a90046001600160a01b03166001600160a01b0316636795dbcd83846040516020016200080091907f5265736f6c766572206d697373696e67207461726765743a20000000000000008152601981019190915260390190565b6040516020818303038152906040526040518363ffffffff1660e01b81526004016200082e9291906200204f565b60206040518083038186803b1580156200084757600080fd5b505afa1580156200085c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000882919062002072565b60008381526001602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251868152918201529192507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68910160405180910390a150508080620008f69062001fe1565b91505062000771565b5050565b6000806200091062000a30565b905060005b815181101562000a2757600082828151811062000936576200093662001f9b565b60209081029190910181015160008181526001909252604080832054925490516321f8a72160e01b8152600481018390529193506001600160a01b039283169216906321f8a7219060240160206040518083038186803b1580156200099a57600080fd5b505afa158015620009af573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009d5919062002072565b6001600160a01b031614158062000a0157506000818152600160205260409020546001600160a01b0316155b1562000a11576000935050505090565b508062000a1e8162001fe1565b91505062000915565b50600191505090565b60408051600280825260608083018452926020830190803683370190505090507121bab93932b731bca1b7b73a3937b63632b960711b8160008151811062000a7c5762000a7c62001f9b565b6020026020010181815250506c5465726d53747275637475726560981b8160018151811062000aaf5762000aaf62001f9b565b60200260200101818152505090565b600062000acc600162001874565b9050801562000ae5576002805461ff0019166101001790555b600062000af162001906565b6001600160a01b0316141562000b595760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b60648201526084015b60405180910390fd5b62000b64836200192f565b62000b6f82620019a0565b801562000bb6576002805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b3362000bc6620010d2565b6001600160a01b03161462000bef5760405162461bcd60e51b815260040162000b509062002092565b62000bfb60006200192f565b565b60003362000c0a620010d2565b6001600160a01b03161462000c335760405162461bcd60e51b815260040162000b509062002092565b62000c3d62001a1d565b6001600160a01b031663d4d4f6ce846040518263ffffffff1660e01b815260040162000c6b91815260200190565b60206040518083038186803b15801562000c8457600080fd5b505afa15801562000c99573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cbf9190620020c7565b62000d015760405162461bcd60e51b81526020600482015260116024820152704e4f4e20535550504f525445442043435960781b604482015260640162000b50565b62000d0b62001a44565b60405163072d3da560e01b8152600481018490526321aaa47b60e01b6024820152604481018590526001600160a01b03919091169063072d3da59060640160206040518083038186803b15801562000d6257600080fd5b505afa15801562000d77573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d9d9190620020c7565b62000de05760405162461bcd60e51b81526020600482015260126024820152714e4f4e20535550504f52544544205445524d60701b604482015260640162000b50565b600062000dec62001850565b60008581526020918252604080822086835290925220546001600160a01b03161462000e5b5760405162461bcd60e51b815260206004820181905260248201527f436f756c646e27742072657772697465206578697374696e67206d61726b6574604482015260640162000b50565b6000546040516001600160a01b03909116908490849062000e7c9062001adb565b6001600160a01b03909316835260208301919091526040820152606001604051809103906000f08015801562000eb6573d6000803e3d6000fd5b5090508062000ec462001850565b6000858152602091825260408082208683529092522080546001600160a01b0319166001600160a01b039290921691909117905562000f0262001850565b6000848152600191820160209081526040822080549384018155825290200182905562000f2e62001850565b600101600084815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801562000f8e57602002820191906000526020600020905b81548152602001906001019080831162000f79575b5050604051634f64581360e11b8152738Eb68e256006e6E73Ea3A8911f7AcF60C9c4A7E394639ec8b026945062000fcb9350915060040162001bd9565b60006040518083038186803b15801562000fe457600080fd5b505af415801562000ff9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620010239190810190620020eb565b6200102d62001850565b600101600085815260200190815260200160002090805190602001906200105692919062001ae9565b5060408051848152602081018490526001600160a01b038316917fc7a36e305c24c29c70a857e8120aadffc2c02608f44c29aac2c49d3a5f4c9812910160405180910390a292915050565b6000620010ad62001850565b600093845260209081526040808520938552929052509020546001600160a01b031690565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa5b546001600160a01b0316919050565b60606200111162001850565b60010160008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156200117157602002820191906000526020600020905b8154815260200190600101908083116200115c575b50505050509050919050565b6000805b82518160ff1610156200128b576000838260ff1681518110620011a857620011a862001f9b565b602002602001015190506000620011be62001850565b8251600090815260209182526040808220838601518352909252819020548184015160608501516080860151935163db77751d60e01b81526001600160a01b039093169450849363db77751d936200121c9392919060040162002124565b602060405180830381600087803b1580156200123757600080fd5b505af11580156200124c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012729190620020c7565b505050808062001282906200215b565b91505062001181565b50600192915050565b600033620012a1620010d2565b6001600160a01b031614620012ca5760405162461bcd60e51b815260040162000b509062002092565b6000620012d662001850565b60010160008481526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156200133657602002820191906000526020600020905b81548152602001906001019080831162001321575b5050505050905060005b81518110156200140257600082828151811062001361576200136162001f9b565b6020026020010151905060006200137762001850565b60008781526020918252604080822085835290925281812054825163280dce3760e21b815292516001600160a01b039091169350839263a03738dc92600480830193919282900301818387803b158015620013d157600080fd5b505af1158015620013e6573d6000803e3d6000fd5b5050505050508080620013f99062001fe1565b91505062001340565b506040518381527f2925c70165043bf69d7a10fd5715a4f22827df42deaa6bf1968dcd8f83866e5a906020015b60405180910390a150600192915050565b606060006200144e62001850565b6001016000848152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015620014ae57602002820191906000526020600020905b81548152602001906001019080831162001499575b505050505090506000815167ffffffffffffffff811115620014d457620014d462001cb2565b604051908082528060200260200182016040528015620014fe578160200160208202803683370190505b50905060005b82518110156200059157600083828151811062001525576200152562001f9b565b6020026020010151905060006200153b62001850565b60008881526020918252604080822085835283529081902054815163017438bd60e71b815291516001600160a01b039091169350839263ba1c5e809260048082019391829003018186803b1580156200159357600080fd5b505afa158015620015a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015ce919062001fb1565b848481518110620015e357620015e362001f9b565b60200260200101818152505050508080620015fe9062001fe1565b91505062001504565b60003362001614620010d2565b6001600160a01b0316146200163d5760405162461bcd60e51b815260040162000b509062002092565b60006200164962001850565b6001016000848152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015620016a957602002820191906000526020600020905b81548152602001906001019080831162001694575b5050505050905060005b815181101562001775576000828281518110620016d457620016d462001f9b565b602002602001015190506000620016ea62001850565b600087815260209182526040808220858352909252818120548251630b0863e760e11b815292516001600160a01b0390911693508392631610c7ce92600480830193919282900301818387803b1580156200174457600080fd5b505af115801562001759573d6000803e3d6000fd5b50505050505080806200176c9062001fe1565b915050620016b3565b506040518381527f13b9f265593f671f36073448e3ef1b7690f184c135f5392b1025e38781a5a1ea906020016200142f565b33620017b2620010d2565b6001600160a01b031614620017db5760405162461bcd60e51b815260040162000b509062002092565b6001600160a01b038116620018425760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000b50565b6200184d816200192f565b50565b7f8041b8421ebd495cc61f38c788c9eb100daccf9bd36aa0bb920b7a15b2e0496590565b600254600090610100900460ff1615620018c2578160ff1660011480156200189b5750303b155b620018ba5760405162461bcd60e51b815260040162000b50906200217e565b506000919050565b60025460ff808416911610620018ec5760405162461bcd60e51b815260040162000b50906200217e565b506002805460ff191660ff92909216919091179055600190565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc620010f6565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000546001600160a01b031615620019fb5760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c72656164790000000000604482015260640162000b50565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600062001a3f7121bab93932b731bca1b7b73a3937b63632b960711b62001a5c565b905090565b600062001a3f6c5465726d53747275637475726560981b5b600081815260016020908152604080832054905170026b4b9b9b4b7339030b2323932b9b99d1607d1b92810192909252603182018490526001600160a01b031690811515906051016040516020818303038152906040529062001ad45760405162461bcd60e51b815260040162000b509190620021cc565b5092915050565b6138b280620021e283390190565b82805482825590600052602060002090810192821562001b27579160200282015b8281111562001b2757825182559160200191906001019062001b0a565b5062001b3592915062001b39565b5090565b5b8082111562001b35576000815560010162001b3a565b60006020828403121562001b6357600080fd5b5035919050565b600081518084526020808501945080840160005b8381101562001b9c5781518752958201959082019060010162001b7e565b509495945050505050565b60408152600062001bbc604083018562001b6a565b828103602084015262001bd0818562001b6a565b95945050505050565b60208152600062001bee602083018462001b6a565b9392505050565b6020808252825182820181905260009190848201906040850190845b8181101562001c2f5783518352928401929184019160010162001c11565b50909695505050505050565b6001600160a01b03811681146200184d57600080fd5b6000806040838503121562001c6557600080fd5b823562001c728162001c3b565b9150602083013562001c848162001c3b565b809150509250929050565b6000806040838503121562001ca357600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171562001cee5762001cee62001cb2565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171562001d205762001d2062001cb2565b604052919050565b600067ffffffffffffffff82111562001d455762001d4562001cb2565b5060051b60200190565b6000602080838503121562001d6357600080fd5b823567ffffffffffffffff81111562001d7b57600080fd5b8301601f8101851362001d8d57600080fd5b803562001da462001d9e8262001d28565b62001cf4565b81815260a0918202830184019184820191908884111562001dc457600080fd5b938501935b8385101562001e365780858a03121562001de35760008081fd5b62001ded62001cc8565b8535815286860135878201526040808701356002811062001e0e5760008081fd5b9082015260608681013590820152608080870135908201528352938401939185019162001dc9565b50979650505050505050565b60006020828403121562001e5557600080fd5b813562001bee8162001c3b565b60408152600062001e77604083018562001b6a565b60208382038185015281855480845282840191508660005282600020935060005b8181101562001eb65784548352600194850194928401920162001e98565b5090979650505050505050565b600082601f83011262001ed557600080fd5b8151602062001ee862001d9e8362001d28565b82815260059290921b8401810191818101908684111562001f0857600080fd5b8286015b8481101562001f25578051835291830191830162001f0c565b509695505050505050565b6000806040838503121562001f4457600080fd5b825167ffffffffffffffff8082111562001f5d57600080fd5b62001f6b8683870162001ec3565b9350602085015191508082111562001f8257600080fd5b5062001f918582860162001ec3565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121562001fc457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600060001982141562001ff85762001ff862001fcb565b5060010190565b6000815180845260005b81811015620020275760208185018101518683018201520162002009565b818111156200203a576000602083870101525b50601f01601f19169290920160200192915050565b8281526040602082015260006200206a604083018462001fff565b949350505050565b6000602082840312156200208557600080fd5b815162001bee8162001c3b565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215620020da57600080fd5b8151801515811462001bee57600080fd5b600060208284031215620020fe57600080fd5b815167ffffffffffffffff8111156200211657600080fd5b6200206a8482850162001ec3565b60608101600285106200214757634e487b7160e01b600052602160045260246000fd5b938152602081019290925260409091015290565b600060ff821660ff81141562002175576200217562001fcb565b60010192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208152600062001bee602083018462001fff56fe60806040523480156200001157600080fd5b50604051620038b2380380620038b2833981016040819052620000349162000399565b60016002556003805460ff191690556200004e836200006b565b6005829055600681905562000062620000eb565b50505062000496565b6000546001600160a01b031615620000c95760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c72656164790000000000604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000620000f76200028e565b905060005b81518110156200028a5760008282815181106200011d576200011d620003d1565b6020026020010151905060008060009054906101000a90046001600160a01b03166001600160a01b0316636795dbcd83846040516020016200018b91907f5265736f6c766572206d697373696e67207461726765743a20000000000000008152601981019190915260390190565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401620001b9929190620003e7565b60206040518083038186803b158015620001d257600080fd5b505afa158015620001e7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200020d919062000447565b60008381526001602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251868152918201529192507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68910160405180910390a15050808062000281906200046c565b915050620000fc565b5050565b604080516003808252608082019092526060916020820183803683370190505090507f436f6c6c61746572616c41676772656761746f7200000000000000000000000081600081518110620002e757620002e7620003d1565b6020026020010181815250507f4c656e64696e674d61726b6574436f6e74726f6c6c6572000000000000000000816001815181106200032a576200032a620003d1565b6020026020010181815250507f50726f64756374416464726573735265736f6c76657200000000000000000000816002815181106200036d576200036d620003d1565b60200260200101818152505090565b80516001600160a01b03811681146200039457600080fd5b919050565b600080600060608486031215620003af57600080fd5b620003ba846200037c565b925060208401519150604084015190509250925092565b634e487b7160e01b600052603260045260246000fd5b82815260006020604081840152835180604085015260005b818110156200041d57858101830151858201606001528201620003ff565b8181111562000430576000606083870101525b50601f01601f191692909201606001949350505050565b6000602082840312156200045a57600080fd5b62000465826200037c565b9392505050565b60006000198214156200048f57634e487b7160e01b600052601160045260246000fd5b5060010190565b61340c80620004a66000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c8063687e3b0b116100b8578063ba1c5e801161007c578063ba1c5e80146102c5578063d09ef241146102cd578063db77751d146102ed578063e099765914610300578063fa52dc0a14610308578063fa6f5bfe1461031157600080fd5b8063687e3b0b1461021f57806388e8c71614610228578063a03738dc14610230578063a85c38ef14610238578063abdddddd1461028a57600080fd5b80633d03b9da116100ff5780633d03b9da146101b7578063514fcac7146101cc57806354141a63146101df57806356861532146101e85780635c975abb1461021457600080fd5b806304f3bcec1461013c5780631610c7ce1461016c57806329985e5a146101765780632af64bd31461017e5780633644ca4514610196575b600080fd5b60005461014f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610174610319565b005b610174610377565b61018661050a565b6040519015158152602001610163565b6101a96101a4366004613001565b610628565b604051908152602001610163565b6101bf6106b7565b604051610163919061303a565b6101866101da36600461307e565b610786565b6101a960045481565b61014f6101f636600461307e565b6000908152600760205260409020600301546001600160a01b031690565b60035460ff16610186565b6101a960055481565b6101a9610a0a565b610174610a1b565b61027a61024636600461307e565b600760205260009081526040902080546001820154600283015460039093015460ff9092169290916001600160a01b031684565b60405161016394939291906130cf565b61029d61029836600461307e565b610a72565b604080519586526020860194909452928401919091526060830152608082015260a001610163565b6101a9610b44565b6102e06102db36600461307e565b610b50565b6040516101639190613101565b6101866102fb366004613001565b610be7565b6101bf610cc5565b6101a960065481565b6101a9610d15565b61032233610d4f565b61036d5760405162461bcd60e51b81526020600482015260176024820152764f6e6c7920416363657074656420436f6e74726163747360481b60448201526064015b60405180910390fd5b610375610dc9565b565b60006103816106b7565b905060005b81518110156105065760008282815181106103a3576103a3613140565b6020026020010151905060008060009054906101000a90046001600160a01b03166001600160a01b0316636795dbcd838460405160200161041091907f5265736f6c766572206d697373696e67207461726765743a20000000000000008152601981019190915260390190565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161043c9291906131a3565b60206040518083038186803b15801561045457600080fd5b505afa158015610468573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048c91906131bc565b60008381526001602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251868152918201529192507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68910160405180910390a1505080806104fe906131fb565b915050610386565b5050565b6000806105156106b7565b905060005b815181101561061f57600082828151811061053757610537613140565b60209081029190910181015160008181526001909252604080832054925490516321f8a72160e01b8152600481018390529193506001600160a01b039283169216906321f8a7219060240160206040518083038186803b15801561059a57600080fd5b505afa1580156105ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d291906131bc565b6001600160a01b03161415806105fd57506000818152600160205260409020546001600160a01b0316155b1561060c576000935050505090565b5080610617816131fb565b91505061051a565b50600191505090565b60008084600181111561063d5761063d613097565b141561067d5761064e600a83610e5c565b61066a5760405162461bcd60e51b815260040161036490613216565b610676600a8385610ea4565b90506106b0565b610688600883610e5c565b6106a45760405162461bcd60e51b815260040161036490613216565b61067660088385610ea4565b9392505050565b604080516003808252608082019092526060916020820183803683370190505090507321b7b63630ba32b930b620b3b3b932b3b0ba37b960611b8160008151811061070457610704613140565b602002602001018181525050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b8160018151811061073e5761073e613140565b60200260200101818152505075283937b23ab1ba20b2323932b9b9a932b9b7b63b32b960511b8160028151811061077757610777613140565b60200260200101818152505090565b60008181526007602052604081206003015482906001600160a01b031633146107f15760405162461bcd60e51b815260206004820152601960248201527f4e6f2061636365737320746f2063616e63656c206f72646572000000000000006044820152606401610364565b6107f9610f90565b6000838152600760205260408082208151608081019092528054829060ff16600181111561082957610829613097565b600181111561083a5761083a613097565b815260018201546020820152600282015460408201526003909101546001600160a01b0316606090910152905060008151600181111561087c5761087c613097565b141561089e57602081015160408201516108999160089187610fd3565b6108d0565b6001815160018111156108b3576108b3613097565b14156108d057602081015160408201516108d091600a9187610fd3565b6000848152600760205260408120805460ff1916815560018101829055600281019190915560030180546001600160a01b031916905561090e611319565b6001600160a01b0316638cbf5e7882606001516005546127106107d086602001516109399190613261565b6109439190613280565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b15801561099157600080fd5b505af11580156109a5573d6000803e3d6000fd5b5050505080606001516001600160a01b03167ff523a00826d700cad9c1a6b2bb68b57937b6f76e89dc6fe5206389e1a97d3f80858360000151846020015185604001516040516109f894939291906132a2565b60405180910390a25060019392505050565b6000610a16600861133b565b905090565b610a2433610d4f565b610a6a5760405162461bcd60e51b81526020600482015260176024820152764f6e6c7920416363657074656420436f6e74726163747360481b6044820152606401610364565b610375611382565b6000818152600760205260408082208151608081019092528054839283928392839283929091829060ff166001811115610aae57610aae613097565b6001811115610abf57610abf613097565b815260018201546020820152600282015460408201526003909101546001600160a01b03166060909101529050600081516001811115610b0157610b01613097565b1415610b29576040810151610b1990600890896113fd565b9550955095509550955050610b3b565b6040810151610b1990600a90896113fd565b91939590929450565b6000610a16600a61133b565b604080516080810182526000808252602082018190529181018290526060810191909152600082815260076020526040908190208151608081019092528054829060ff166001811115610ba557610ba5613097565b6001811115610bb657610bb6613097565b815260018201546020820152600282015460408201526003909101546001600160a01b031660609091015292915050565b6000600280541415610c3b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610364565b60028055600080856001811115610c5457610c54613097565b1415610c8757610c66600a8486610ea4565b90508015610c8257610c7a60018286611499565b915050610cb9565b610ca7565b610c9360088486610ea4565b90508015610ca757610c7a60008286611499565b610cb285858561189b565b5060019150505b60016002559392505050565b60408051600180825281830190925260609160208083019080368337019050509050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b8160008151811061077757610777613140565b600080610d20610b44565b90506000610d2c610a0a565b90506000610d3a82846132c8565b9050610d47600282613280565b935050505090565b600080610d5a610cc5565b905060005b8151811015610dbf57610d8a828281518110610d7d57610d7d613140565b6020026020010151611b87565b6001600160a01b0316846001600160a01b03161415610dad575060019392505050565b80610db7816131fb565b915050610d5f565b5060009392505050565b60035460ff16610e125760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610364565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600081610e6b57506000610e9e565b8254821415610e7c57506001610e9e565b600082815260018401602052604090205415610e9a57506001610e9e565b5060005b92915050565b60008281526001808501602090815260408084206004808201548652600782018452828620835160a081018552815481529581015494860194909452600284015492850192909252600383015460608501529101546080830152905b6005820154815114801590610f185750838160800151105b15610f70576020908101516000908152600783018252604090819020815160a0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600401546080820152610f00565b83816080015110610f85575191506106b09050565b6000925050506106b0565b60035460ff16156103755760405162461bcd60e51b815260206004820152600d60248201526c13585c9ad95d081c185d5cd959609a1b6044820152606401610364565b816110465760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303729202d2056616c756560448201527f20746f2064656c6574652063616e6e6f74206265207a65726f000000000000006064820152608401610364565b61105284848484611c03565b6110c45760405162461bcd60e51b815260206004820152603a60248201527f4f7264657253746174697374696373547265652834303829202d2056616c756560448201527f20746f2064656c65746520646f6573206e6f742065786973742e0000000000006064820152608401610364565b600082815260018501602052604090206110df858484611c32565b600080826006015460001415611310576000858152600180890160205260409091200154158061112057506000858152600188016020526040902060020154155b1561112c575083611174565b5060008481526001870160205260409020600201545b600081815260018089016020526040909120015415611174576000908152600180880160205260409091200154611142565b6000818152600180890160205260409091200154156111a857600081815260018089016020526040909120015491506111bf565b600081815260018801602052604090206002015491505b600081815260018801602052604080822054848352912081905580156112305760008181526001808a01602052604090912001548214156112155760008181526001808a01602052604090912001839055611234565b60008181526001890160205260409020600201839055611234565b8288555b600082815260018901602052604090206003015460ff16158683146112be5761125e898489611ddf565b600087815260018a8101602052604080832080830154878552828520938401819055845281842087905560028082015490840181905584529083208690556003908101549286905201805460ff191660ff90921615159190911790559195915b80156112ce576112ce8985611e59565b505060008181526001808901602052604082208281559081018290556002810182905560038101805460ff191690556004810182905560058101829055600601555b50505050505050565b6000610a167321b7b63630ba32b930b620b3b3b932b3b0ba37b960611b611b87565b80548061134a57506000919050565b5b60008181526001830160205260409020600201541561137d57600090815260018201602052604090206002015461134b565b919050565b60035460ff16156113c85760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610364565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e3f3390565b600080600080600061140f8888610e5c565b61142b5760405162461bcd60e51b8152600401610364906132e0565b505050600093845250506001928301602090815260408084209284526007909201815291819020815160a08101835281548082529482015493810184905260028201549281018390526003820154606082018190526004909201546080909101819052939492939192909190565b600082815260076020526040808220815160808101909252805483929190829060ff1660018111156114cd576114cd613097565b60018111156114de576114de613097565b81526001820154602080830191909152600283015460408301526003909201546001600160a01b03166060909101528101519091508311156115325760405162461bcd60e51b815260040161036490613330565b60608101516001600160a01b031633141561158f5760405162461bcd60e51b815260206004820152601d60248201527f4d616b657220636f756c646e27742074616b6520697473206f726465720000006044820152606401610364565b611597610f90565b8281602001516115a7919061335c565b600085815260076020526040812060010191909155815160018111156115cf576115cf613097565b141561162f5760408101516115e8906008908686612273565b61162a5760405162461bcd60e51b815260206004820152601360248201527221b7bab6323713ba103334b6361037b93232b960691b6044820152606401610364565b61169f565b60018151600181111561164457611644613097565b141561169f57604081015161165d90600a908686612273565b61169f5760405162461bcd60e51b815260206004820152601360248201527221b7bab6323713ba103334b6361037b93232b960691b6044820152606401610364565b60006116a9612549565b604051631009103960e01b81526321aaa47b60e01b60048201526001600160a01b03919091169063100910399060240160206040518083038186803b1580156116f157600080fd5b505afa158015611705573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172991906131bc565b9050806001600160a01b031663114cc2ec8360600151338560000151600181111561175657611756613097565b6005546006546040808a015190516001600160e01b031960e089901b1681526001600160a01b03968716600482015295909416602486015260ff90921660448501526064840152608483015260a4820188905260c482015260e401602060405180830381600087803b1580156117cb57600080fd5b505af11580156117df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118039190613373565b50336001600160a01b03167f966c5ef9d077123e79f6a459e7ced8ef6f2a106683fa26d6ea3a4b0df8a34b5b868887866040015160405161184794939291906132a2565b60405180910390a2602082015161188f576000858152600760205260408120805460ff1916815560018101829055600281019190915560030180546001600160a01b03191690555b50600195945050505050565b60408051608081018252600080825260208201819052918101829052606081018290526000841161190e5760405162461bcd60e51b815260206004820152601860248201527f43616e277420706c61636520656d70747920616d6f756e7400000000000000006044820152606401610364565b600083116119575760405162461bcd60e51b815260206004820152601660248201527543616e277420706c61636520656d707479207261746560501b6044820152606401610364565b61195f610f90565b8085600181111561197257611972613097565b9081600181111561198557611985613097565b90525060208101849052604081018390523360608201526119a461256d565b6000818152600760205260409020825181549294508392829060ff1916600183818111156119d4576119d4613097565b02179055506020820151600182015560408201516002820155606090910151600390910180546001600160a01b0319166001600160a01b03909216919091179055611a1d611319565b6001600160a01b0316639fcaebfa336005546127106107d089611a409190613261565b611a4a9190613280565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b158015611a9857600080fd5b505af1158015611aac573d6000803e3d6000fd5b5060009250611ab9915050565b81516001811115611acc57611acc613097565b1415611aee5760208101516040820151611ae9916008918561258b565b611b20565b600181516001811115611b0357611b03613097565b1415611b205760208101516040820151611b2091600a918561258b565b80606001516001600160a01b03167f9baa679e9516a3acae8c0deb69798eb2824dd6984b54d21dd4942c76511f4d3183836000015160055460065486602001518760400151604051611b779695949392919061338c565b60405180910390a2509392505050565b600081815260016020908152604080832054905170026b4b9b9b4b7339030b2323932b9b99d1607d1b92810192909252603182018490526001600160a01b0316908115159060510160405160208183030381529060405290611bfc5760405162461bcd60e51b815260040161036491906133c3565b5092915050565b6000611c0f8584610e5c565b611c1b57506000611c2a565b611c27858486856126fd565b90505b949350505050565b611c3c8383610e5c565b611c585760405162461bcd60e51b8152600401610364906132e0565b600082815260018085016020908152604080842085855260078101835293819020815160a08101835281548152938101549284019290925260028201549083015260038101546060830152600490810154608083015282015483148015611cc25750828260050154145b15611ce757600084815260018601602052604081206004810182905560050155611d8b565b8282600401541415611d3357611d1485858360200151600091825260019092016020526040902060040155565b6020808201516000908152600784019091526040812060020155611d8b565b8282600501541415611d7757604080820151600086815260018801602052919091206005015560408082015160009081526007840160205290812060010155611d8b565b611d8b858583604001518460200151612778565b80516000908152600783016020526040812081815560018082018390556002820183905560038201839055600490910182905560068401805491929091611dd390849061335c565b90915550505050505050565b600081815260018401602052604080822054848352912081905580611e0657828455611e53565b6000818152600180860160205260409091200154821415611e3c5760008181526001808601602052604090912001839055611e53565b600081815260018501602052604090206002018390555b50505050565b60005b82548214801590611e815750600082815260018401602052604090206003015460ff16155b1561225457600082815260018085016020526040808320548084529220015483141561207d5760008181526001850160205260408082206002015480835291206003015490925060ff1615611f25576000828152600180860160205260408083206003908101805460ff19908116909155858552919093209092018054909216179055611f0e84826127a9565b600081815260018501602052604090206002015491505b60008281526001808601602052604080832090910154825290206003015460ff16158015611f705750600082815260018501602052604080822060020154825290206003015460ff16155b15611f9d57600082815260018581016020526040909120600301805460ff1916909117905591508161224e565b600082815260018501602052604080822060020154825290206003015460ff1661201a576000828152600180860160205260408083208083015484529083206003908101805460ff19908116909155938690520180549092161790556120038483612881565b600081815260018501602052604090206002015491505b600081815260018501602052604080822060039081018054868552838520808401805460ff909316151560ff19938416179055825482169092556002909101548452919092209091018054909116905561207484826127a9565b8354925061224e565b6000818152600180860160205260408083209091015480835291206003015490925060ff16156120fc576000828152600180860160205260408083206003908101805460ff199081169091558585529190932090920180549092161790556120e58482612881565b600081815260018086016020526040909120015491505b600082815260018501602052604080822060020154825290206003015460ff16158015612147575060008281526001808601602052604080832090910154825290206003015460ff16155b1561217457600082815260018581016020526040909120600301805460ff1916909117905591508161224e565b60008281526001808601602052604080832090910154825290206003015460ff166121f357600082815260018086016020526040808320600281015484529083206003908101805460ff19908116909155938690520180549092161790556121dc84836127a9565b600081815260018086016020526040909120015491505b60008181526001808601602052604080832060039081018054878652838620808401805460ff909316151560ff199384161790558254821690925593015484529220909101805490911690556122498482612881565b835492505b50611e5c565b506000908152600190910160205260409020600301805460ff19169055565b6000838152600180860160209081526040808420868552600781018352818520825160a081018452815481529481015493850193909352600283015491840191909152600382015460608401526004909101546080830181905290919083906122dd90869061335c565b6000878152600785016020526040902060040181905590508061230b5761230688828989610fd3565b61253b565b6004808401546000908152600785016020526040902001548111156124f1576004808401546000908152600785016020908152604091829020825160a081018452815481526001820154928101929092526002810154928201929092526003820154606082015291015460808201525b60058401548151148015906123935750818160800151105b156123eb576020908101516000908152600785018252604090819020815160a081018352815481526001820154938101939093526002810154918301919091526003810154606083015260040154608082015261237b565b858360800151111561247457604080820151600090815260078601602090815290829020825160a081018452815481526001820154928101929092526002810154928201929092526003820154606082015260049091015460808201528351825161245a918c918c9190612778565b61246e8a8a83600001518760000151612778565b506124eb565b6020808201516000908152600786018252604090819020815160a081018352815480825260018301549482019490945260028201549281019290925260038101546060830152600401546080820152845190916124d5918c918c9190612778565b6124e98a8a84600001518760000151612778565b505b5061253b565b612505888884600001518660040154612778565b8151600088815260018a016020526040902060040155600583015461253b578151600088815260018a0160205260409020600501555b506001979650505050505050565b6000610a1675283937b23ab1ba20b2323932b9b9a932b9b7b63b32b960511b611b87565b600480546000918261257e836131fb565b9190505550600454905090565b816125fe5760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303529202d2056616c756560448201527f20746f20696e736572742063616e6e6f74206265207a65726f000000000000006064820152608401610364565b83546000905b801561266f578091508084101561262e576000908152600180870160205260409091200154612604565b8084111561264f576000908152600186016020526040902060020154612604565b8084141561266a5761266386828786612956565b5050611e53565b612604565b6000848152600180880160205260408220848155808201839055600281019290925560038201805460ff191690911790556126ac87868887612956565b826126b9578487556126f3565b828510156126dc57600083815260018089016020526040909120018590556126f3565b600083815260018801602052604090206002018590555b6113108786612acb565b6000838152600180860160209081526040808420858552600781018352818520825160a0810184528154815294810154938501939093526002830154918401919091526003820154606084015260049091015460808301819052909190851461276b57600092505050611c2a565b5060019695505050505050565b6000928352600193840160209081526040808520848652600701909152808420909401819055825291902060020155565b6000818152600180840160205260408083206002810180549154828652928520909301549385905291839055909180156127f157600081815260018601602052604090208490555b60008381526001860160205260409020829055816128115782855561285e565b6000828152600180870160205260409091200154841415612847576000828152600180870160205260409091200183905561285e565b600082815260018601602052604090206002018390555b505060008181526001938401602052604080822090940183905591825291902055565b600081815260018084016020526040808320918201805492548385529184206002015493859052839055909180156128c757600081815260018601602052604090208490555b60008381526001860160205260409020829055816128e757828555612934565b600082815260018601602052604090206002015484141561291d5760008281526001860160205260409020600201839055612934565b600082815260018087016020526040909120018390555b5050600081815260019093016020526040808420600201839055918352912055565b600082116129765760405162461bcd60e51b815260040161036490613330565b6000838152600185016020526040902060048101546129a05761299b85858585612d36565b612ac4565b600480820154600090815260078301602052604090200154831115612ab8576004808201546000908152600783016020908152604091829020825160a081018452815481526001820154928101929092526002810154928201929092526003820154606082015291015460808201525b602081015115801590612a27575083816080015111155b15612a7f576020908101516000908152600783018252604090819020815160a0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600401546080820152612a10565b8381608001511115612aa157612a9c868683600001518787612da3565b612ab2565b612ab2868683600001518787612def565b50612ac4565b612ac485858585612d36565b5050505050565b60005b82548214801590612af85750600082815260018401602052604080822054825290206003015460ff165b15612d14576000828152600180850160205260408083205480845281842054845292200154811415612c1b5760008181526001850160205260408082205482528082206002015480835291206003015490925060ff1615612ba1576000818152600180860160205260408083206003808201805460ff19908116909155878652838620820180548216905582548652928520018054909216909217905590829052549250612d0e565b6000818152600185016020526040902060020154831415612bc957809250612bc984846127a9565b50600082815260018085016020526040808320548084528184206003808201805460ff19908116909155825487529386200180549093169093179091559182905254612c16908590612881565b612d0e565b6000818152600180860160205260408083205483528083209091015480835291206003015490925060ff1615612c99576000818152600180860160205260408083206003808201805460ff19908116909155878652838620820180548216905582548652928520018054909216909217905590829052549250612d0e565b6000818152600180860160205260409091200154831415612cc157809250612cc18484612881565b50600082815260018085016020526040808320548084528184206003808201805460ff19908116909155825487529386200180549093169093179091559182905254612d0e9085906127a9565b50612ace565b505080546000908152600190910160205260409020600301805460ff19169055565b6000838152600185016020526040812090612d5386868686612f00565b9050612d658686838560040154612778565b600085815260018701602052604090206004018190556005820154612d9b57600085815260018701602052604090206005018190555b505050505050565b600084815260018601602052604090206004810154841415612dd057612dcb86868585612d36565b612d9b565b6000848152600782016020526040902060020154612d9b908790879086865b60008211612e0f5760405162461bcd60e51b815260040161036490613330565b600084815260018601602052604090206005810154841415612e3757612dcb86868585612fa1565b60008481526007820160208181526040808420815160a080820184528254825260018084015483870181905260028086015485880152600380870154606080880191909152600497880154608080890191909152938c52998952878b20885195860189528054865293840154988501989098528201549583019590955294850154958101959095529201549083015291612ed389898888612f00565b9050612ee58989838560000151612778565b612ef58989856000015184612778565b505050505050505050565b6000838152600185016020526040812060068101548290612f1f575060015b6001826006016000828254612f3491906132c8565b90915550506040805160a081018252858152600060208083018281528385018381524260608601908152608086019b8c5299845260079790970190915292902090518082559151600182015592516002840155935160038301555092516004909301929092559392505050565b600083815260018501602052604090206004810154612fc65761299b85858585612d36565b6000612fd486868686612f00565b9050612fe68686846005015484612778565b60008581526001870160205260409020600501819055612d9b565b60008060006060848603121561301657600080fd5b83356002811061302557600080fd5b95602085013595506040909401359392505050565b6020808252825182820181905260009190848201906040850190845b8181101561307257835183529284019291840191600101613056565b50909695505050505050565b60006020828403121561309057600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600281106130cb57634e487b7160e01b600052602160045260246000fd5b9052565b608081016130dd82876130ad565b602082019490945260408101929092526001600160a01b0316606090910152919050565b60006080820190506131148284516130ad565b602083015160208301526040830151604083015260018060a01b03606084015116606083015292915050565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b8181101561317c57602081850181015186830182015201613160565b8181111561318e576000602083870101525b50601f01601f19169290920160200192915050565b828152604060208201526000611c2a6040830184613156565b6000602082840312156131ce57600080fd5b81516001600160a01b03811681146106b057600080fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561320f5761320f6131e5565b5060010190565b6020808252602b908201527f4e6f206f72646572732065786973747320666f722073656c656374656420696e60408201526a746572657374207261746560a81b606082015260800190565b600081600019048311821515161561327b5761327b6131e5565b500290565b60008261329d57634e487b7160e01b600052601260045260246000fd5b500490565b848152608081016132b660208301866130ad565b60408201939093526060015292915050565b600082198211156132db576132db6131e5565b500190565b60208082526030908201527f4f7264657253746174697374696373547265652834303329202d2056616c756560408201526f103237b2b9903737ba1032bc34b9ba1760811b606082015260800190565b602080825260129082015271125b9cdd599a58da595b9d08185b5bdd5b9d60721b604082015260600190565b60008282101561336e5761336e6131e5565b500390565b60006020828403121561338557600080fd5b5051919050565b86815260c081016133a060208301886130ad565b8560408301528460608301528360808301528260a0830152979650505050505050565b6020815260006106b0602083018461315656fea26469706673582212207e45e5c22e335d9591621dbb33a6b5a5a44e82b64ad0aacd5dcb4de2039f74b164736f6c63430008090033a2646970667358221220078e07cbf311a84f373593793820fd2dd4d662ee05f2d6443779b37cd478b3dd64736f6c63430008090033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001395760003560e01c806378f7b51611620000bb578063b3cb8450116200007a578063b3cb8450146200029a578063e099765914620002b1578063e52f2a9214620002b9578063e99d053814620002d0578063f2fde38b14620002e757600080fd5b806378f7b51614620002345780638a981745146200024b5780638da5cb5b146200026257806393e7c107146200026c5780639ccec206146200028357600080fd5b806329985e5a116200010857806329985e5a14620001d35780632af64bd314620001df5780633d03b9da14620001fa578063485cc9551462000213578063715018a6146200022a57600080fd5b806304f3bcec146200013e5780630a2b2008146200016f5780631b30a28814620001965780632717547f14620001bc575b600080fd5b60005462000152906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b620001866200018036600462001b50565b620002fe565b6040516200016692919062001ba7565b620001ad620001a736600462001b50565b620003ca565b60405162000166919062001bd9565b620001ad620001cd36600462001b50565b62000599565b620001dd62000760565b005b620001e962000903565b604051901515815260200162000166565b6200020462000a30565b60405162000166919062001bf5565b620001dd6200022436600462001c51565b62000abe565b620001dd62000bbb565b620001526200024536600462001c8f565b62000bfd565b620001526200025c36600462001c8f565b620010a1565b62000152620010d2565b620001ad6200027d36600462001b50565b62001105565b620001e96200029436600462001d4f565b6200117d565b620001e9620002ab36600462001b50565b62001294565b606062000204565b620001ad620002ca36600462001b50565b62001440565b620001e9620002e136600462001b50565b62001607565b620001dd620002f836600462001e42565b620017a7565b60608060006200030e84620003ca565b905073__$f506ca7a99b3e1b46d3b28bedafd5dc4fc$__635e1a1383826200033562001850565b60010160008881526020019081526020016000206040518363ffffffff1660e01b81526004016200036892919062001e62565b60006040518083038186803b1580156200038157600080fd5b505af415801562000396573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620003c0919081019062001f30565b9250925050915091565b60606000620003d862001850565b60010160008481526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156200043857602002820191906000526020600020905b81548152602001906001019080831162000423575b505050505090506000815167ffffffffffffffff8111156200045e576200045e62001cb2565b60405190808252806020026020018201604052801562000488578160200160208202803683370190505b50905060005b825181101562000591576000838281518110620004af57620004af62001f9b565b602002602001015190506000620004c562001850565b600088815260209182526040808220858352835290819020548151637d37adff60e11b815291516001600160a01b039091169350839263fa6f5bfe9260048082019391829003018186803b1580156200051d57600080fd5b505afa15801562000532573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000558919062001fb1565b8484815181106200056d576200056d62001f9b565b60200260200101818152505050508080620005889062001fe1565b9150506200048e565b509392505050565b60606000620005a762001850565b60010160008481526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156200060757602002820191906000526020600020905b815481526020019060010190808311620005f2575b505050505090506000815167ffffffffffffffff8111156200062d576200062d62001cb2565b60405190808252806020026020018201604052801562000657578160200160208202803683370190505b50905060005b8251811015620005915760008382815181106200067e576200067e62001f9b565b6020026020010151905060006200069462001850565b600088815260209182526040808220858352835290819020548151634474638b60e11b815291516001600160a01b03909116935083926388e8c7169260048082019391829003018186803b158015620006ec57600080fd5b505afa15801562000701573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000727919062001fb1565b8484815181106200073c576200073c62001f9b565b60200260200101818152505050508080620007579062001fe1565b9150506200065d565b60006200076c62000a30565b905060005b8151811015620008ff57600082828151811062000792576200079262001f9b565b6020026020010151905060008060009054906101000a90046001600160a01b03166001600160a01b0316636795dbcd83846040516020016200080091907f5265736f6c766572206d697373696e67207461726765743a20000000000000008152601981019190915260390190565b6040516020818303038152906040526040518363ffffffff1660e01b81526004016200082e9291906200204f565b60206040518083038186803b1580156200084757600080fd5b505afa1580156200085c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000882919062002072565b60008381526001602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251868152918201529192507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68910160405180910390a150508080620008f69062001fe1565b91505062000771565b5050565b6000806200091062000a30565b905060005b815181101562000a2757600082828151811062000936576200093662001f9b565b60209081029190910181015160008181526001909252604080832054925490516321f8a72160e01b8152600481018390529193506001600160a01b039283169216906321f8a7219060240160206040518083038186803b1580156200099a57600080fd5b505afa158015620009af573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009d5919062002072565b6001600160a01b031614158062000a0157506000818152600160205260409020546001600160a01b0316155b1562000a11576000935050505090565b508062000a1e8162001fe1565b91505062000915565b50600191505090565b60408051600280825260608083018452926020830190803683370190505090507121bab93932b731bca1b7b73a3937b63632b960711b8160008151811062000a7c5762000a7c62001f9b565b6020026020010181815250506c5465726d53747275637475726560981b8160018151811062000aaf5762000aaf62001f9b565b60200260200101818152505090565b600062000acc600162001874565b9050801562000ae5576002805461ff0019166101001790555b600062000af162001906565b6001600160a01b0316141562000b595760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b60648201526084015b60405180910390fd5b62000b64836200192f565b62000b6f82620019a0565b801562000bb6576002805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b3362000bc6620010d2565b6001600160a01b03161462000bef5760405162461bcd60e51b815260040162000b509062002092565b62000bfb60006200192f565b565b60003362000c0a620010d2565b6001600160a01b03161462000c335760405162461bcd60e51b815260040162000b509062002092565b62000c3d62001a1d565b6001600160a01b031663d4d4f6ce846040518263ffffffff1660e01b815260040162000c6b91815260200190565b60206040518083038186803b15801562000c8457600080fd5b505afa15801562000c99573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cbf9190620020c7565b62000d015760405162461bcd60e51b81526020600482015260116024820152704e4f4e20535550504f525445442043435960781b604482015260640162000b50565b62000d0b62001a44565b60405163072d3da560e01b8152600481018490526321aaa47b60e01b6024820152604481018590526001600160a01b03919091169063072d3da59060640160206040518083038186803b15801562000d6257600080fd5b505afa15801562000d77573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d9d9190620020c7565b62000de05760405162461bcd60e51b81526020600482015260126024820152714e4f4e20535550504f52544544205445524d60701b604482015260640162000b50565b600062000dec62001850565b60008581526020918252604080822086835290925220546001600160a01b03161462000e5b5760405162461bcd60e51b815260206004820181905260248201527f436f756c646e27742072657772697465206578697374696e67206d61726b6574604482015260640162000b50565b6000546040516001600160a01b03909116908490849062000e7c9062001adb565b6001600160a01b03909316835260208301919091526040820152606001604051809103906000f08015801562000eb6573d6000803e3d6000fd5b5090508062000ec462001850565b6000858152602091825260408082208683529092522080546001600160a01b0319166001600160a01b039290921691909117905562000f0262001850565b6000848152600191820160209081526040822080549384018155825290200182905562000f2e62001850565b600101600084815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801562000f8e57602002820191906000526020600020905b81548152602001906001019080831162000f79575b5050604051634f64581360e11b815273__$69df8f3ef0941d5dac5ad52c193381be4b$__94639ec8b026945062000fcb9350915060040162001bd9565b60006040518083038186803b15801562000fe457600080fd5b505af415801562000ff9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620010239190810190620020eb565b6200102d62001850565b600101600085815260200190815260200160002090805190602001906200105692919062001ae9565b5060408051848152602081018490526001600160a01b038316917fc7a36e305c24c29c70a857e8120aadffc2c02608f44c29aac2c49d3a5f4c9812910160405180910390a292915050565b6000620010ad62001850565b600093845260209081526040808520938552929052509020546001600160a01b031690565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa5b546001600160a01b0316919050565b60606200111162001850565b60010160008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156200117157602002820191906000526020600020905b8154815260200190600101908083116200115c575b50505050509050919050565b6000805b82518160ff1610156200128b576000838260ff1681518110620011a857620011a862001f9b565b602002602001015190506000620011be62001850565b8251600090815260209182526040808220838601518352909252819020548184015160608501516080860151935163db77751d60e01b81526001600160a01b039093169450849363db77751d936200121c9392919060040162002124565b602060405180830381600087803b1580156200123757600080fd5b505af11580156200124c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012729190620020c7565b505050808062001282906200215b565b91505062001181565b50600192915050565b600033620012a1620010d2565b6001600160a01b031614620012ca5760405162461bcd60e51b815260040162000b509062002092565b6000620012d662001850565b60010160008481526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156200133657602002820191906000526020600020905b81548152602001906001019080831162001321575b5050505050905060005b81518110156200140257600082828151811062001361576200136162001f9b565b6020026020010151905060006200137762001850565b60008781526020918252604080822085835290925281812054825163280dce3760e21b815292516001600160a01b039091169350839263a03738dc92600480830193919282900301818387803b158015620013d157600080fd5b505af1158015620013e6573d6000803e3d6000fd5b5050505050508080620013f99062001fe1565b91505062001340565b506040518381527f2925c70165043bf69d7a10fd5715a4f22827df42deaa6bf1968dcd8f83866e5a906020015b60405180910390a150600192915050565b606060006200144e62001850565b6001016000848152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015620014ae57602002820191906000526020600020905b81548152602001906001019080831162001499575b505050505090506000815167ffffffffffffffff811115620014d457620014d462001cb2565b604051908082528060200260200182016040528015620014fe578160200160208202803683370190505b50905060005b82518110156200059157600083828151811062001525576200152562001f9b565b6020026020010151905060006200153b62001850565b60008881526020918252604080822085835283529081902054815163017438bd60e71b815291516001600160a01b039091169350839263ba1c5e809260048082019391829003018186803b1580156200159357600080fd5b505afa158015620015a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015ce919062001fb1565b848481518110620015e357620015e362001f9b565b60200260200101818152505050508080620015fe9062001fe1565b91505062001504565b60003362001614620010d2565b6001600160a01b0316146200163d5760405162461bcd60e51b815260040162000b509062002092565b60006200164962001850565b6001016000848152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015620016a957602002820191906000526020600020905b81548152602001906001019080831162001694575b5050505050905060005b815181101562001775576000828281518110620016d457620016d462001f9b565b602002602001015190506000620016ea62001850565b600087815260209182526040808220858352909252818120548251630b0863e760e11b815292516001600160a01b0390911693508392631610c7ce92600480830193919282900301818387803b1580156200174457600080fd5b505af115801562001759573d6000803e3d6000fd5b50505050505080806200176c9062001fe1565b915050620016b3565b506040518381527f13b9f265593f671f36073448e3ef1b7690f184c135f5392b1025e38781a5a1ea906020016200142f565b33620017b2620010d2565b6001600160a01b031614620017db5760405162461bcd60e51b815260040162000b509062002092565b6001600160a01b038116620018425760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000b50565b6200184d816200192f565b50565b7f8041b8421ebd495cc61f38c788c9eb100daccf9bd36aa0bb920b7a15b2e0496590565b600254600090610100900460ff1615620018c2578160ff1660011480156200189b5750303b155b620018ba5760405162461bcd60e51b815260040162000b50906200217e565b506000919050565b60025460ff808416911610620018ec5760405162461bcd60e51b815260040162000b50906200217e565b506002805460ff191660ff92909216919091179055600190565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc620010f6565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000546001600160a01b031615620019fb5760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c72656164790000000000604482015260640162000b50565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600062001a3f7121bab93932b731bca1b7b73a3937b63632b960711b62001a5c565b905090565b600062001a3f6c5465726d53747275637475726560981b5b600081815260016020908152604080832054905170026b4b9b9b4b7339030b2323932b9b99d1607d1b92810192909252603182018490526001600160a01b031690811515906051016040516020818303038152906040529062001ad45760405162461bcd60e51b815260040162000b509190620021cc565b5092915050565b6138b280620021e283390190565b82805482825590600052602060002090810192821562001b27579160200282015b8281111562001b2757825182559160200191906001019062001b0a565b5062001b3592915062001b39565b5090565b5b8082111562001b35576000815560010162001b3a565b60006020828403121562001b6357600080fd5b5035919050565b600081518084526020808501945080840160005b8381101562001b9c5781518752958201959082019060010162001b7e565b509495945050505050565b60408152600062001bbc604083018562001b6a565b828103602084015262001bd0818562001b6a565b95945050505050565b60208152600062001bee602083018462001b6a565b9392505050565b6020808252825182820181905260009190848201906040850190845b8181101562001c2f5783518352928401929184019160010162001c11565b50909695505050505050565b6001600160a01b03811681146200184d57600080fd5b6000806040838503121562001c6557600080fd5b823562001c728162001c3b565b9150602083013562001c848162001c3b565b809150509250929050565b6000806040838503121562001ca357600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171562001cee5762001cee62001cb2565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171562001d205762001d2062001cb2565b604052919050565b600067ffffffffffffffff82111562001d455762001d4562001cb2565b5060051b60200190565b6000602080838503121562001d6357600080fd5b823567ffffffffffffffff81111562001d7b57600080fd5b8301601f8101851362001d8d57600080fd5b803562001da462001d9e8262001d28565b62001cf4565b81815260a0918202830184019184820191908884111562001dc457600080fd5b938501935b8385101562001e365780858a03121562001de35760008081fd5b62001ded62001cc8565b8535815286860135878201526040808701356002811062001e0e5760008081fd5b9082015260608681013590820152608080870135908201528352938401939185019162001dc9565b50979650505050505050565b60006020828403121562001e5557600080fd5b813562001bee8162001c3b565b60408152600062001e77604083018562001b6a565b60208382038185015281855480845282840191508660005282600020935060005b8181101562001eb65784548352600194850194928401920162001e98565b5090979650505050505050565b600082601f83011262001ed557600080fd5b8151602062001ee862001d9e8362001d28565b82815260059290921b8401810191818101908684111562001f0857600080fd5b8286015b8481101562001f25578051835291830191830162001f0c565b509695505050505050565b6000806040838503121562001f4457600080fd5b825167ffffffffffffffff8082111562001f5d57600080fd5b62001f6b8683870162001ec3565b9350602085015191508082111562001f8257600080fd5b5062001f918582860162001ec3565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121562001fc457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600060001982141562001ff85762001ff862001fcb565b5060010190565b6000815180845260005b81811015620020275760208185018101518683018201520162002009565b818111156200203a576000602083870101525b50601f01601f19169290920160200192915050565b8281526040602082015260006200206a604083018462001fff565b949350505050565b6000602082840312156200208557600080fd5b815162001bee8162001c3b565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215620020da57600080fd5b8151801515811462001bee57600080fd5b600060208284031215620020fe57600080fd5b815167ffffffffffffffff8111156200211657600080fd5b6200206a8482850162001ec3565b60608101600285106200214757634e487b7160e01b600052602160045260246000fd5b938152602081019290925260409091015290565b600060ff821660ff81141562002175576200217562001fcb565b60010192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208152600062001bee602083018462001fff56fe60806040523480156200001157600080fd5b50604051620038b2380380620038b2833981016040819052620000349162000399565b60016002556003805460ff191690556200004e836200006b565b6005829055600681905562000062620000eb565b50505062000496565b6000546001600160a01b031615620000c95760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c72656164790000000000604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000620000f76200028e565b905060005b81518110156200028a5760008282815181106200011d576200011d620003d1565b6020026020010151905060008060009054906101000a90046001600160a01b03166001600160a01b0316636795dbcd83846040516020016200018b91907f5265736f6c766572206d697373696e67207461726765743a20000000000000008152601981019190915260390190565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401620001b9929190620003e7565b60206040518083038186803b158015620001d257600080fd5b505afa158015620001e7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200020d919062000447565b60008381526001602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251868152918201529192507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68910160405180910390a15050808062000281906200046c565b915050620000fc565b5050565b604080516003808252608082019092526060916020820183803683370190505090507f436f6c6c61746572616c41676772656761746f7200000000000000000000000081600081518110620002e757620002e7620003d1565b6020026020010181815250507f4c656e64696e674d61726b6574436f6e74726f6c6c6572000000000000000000816001815181106200032a576200032a620003d1565b6020026020010181815250507f50726f64756374416464726573735265736f6c76657200000000000000000000816002815181106200036d576200036d620003d1565b60200260200101818152505090565b80516001600160a01b03811681146200039457600080fd5b919050565b600080600060608486031215620003af57600080fd5b620003ba846200037c565b925060208401519150604084015190509250925092565b634e487b7160e01b600052603260045260246000fd5b82815260006020604081840152835180604085015260005b818110156200041d57858101830151858201606001528201620003ff565b8181111562000430576000606083870101525b50601f01601f191692909201606001949350505050565b6000602082840312156200045a57600080fd5b62000465826200037c565b9392505050565b60006000198214156200048f57634e487b7160e01b600052601160045260246000fd5b5060010190565b61340c80620004a66000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c8063687e3b0b116100b8578063ba1c5e801161007c578063ba1c5e80146102c5578063d09ef241146102cd578063db77751d146102ed578063e099765914610300578063fa52dc0a14610308578063fa6f5bfe1461031157600080fd5b8063687e3b0b1461021f57806388e8c71614610228578063a03738dc14610230578063a85c38ef14610238578063abdddddd1461028a57600080fd5b80633d03b9da116100ff5780633d03b9da146101b7578063514fcac7146101cc57806354141a63146101df57806356861532146101e85780635c975abb1461021457600080fd5b806304f3bcec1461013c5780631610c7ce1461016c57806329985e5a146101765780632af64bd31461017e5780633644ca4514610196575b600080fd5b60005461014f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610174610319565b005b610174610377565b61018661050a565b6040519015158152602001610163565b6101a96101a4366004613001565b610628565b604051908152602001610163565b6101bf6106b7565b604051610163919061303a565b6101866101da36600461307e565b610786565b6101a960045481565b61014f6101f636600461307e565b6000908152600760205260409020600301546001600160a01b031690565b60035460ff16610186565b6101a960055481565b6101a9610a0a565b610174610a1b565b61027a61024636600461307e565b600760205260009081526040902080546001820154600283015460039093015460ff9092169290916001600160a01b031684565b60405161016394939291906130cf565b61029d61029836600461307e565b610a72565b604080519586526020860194909452928401919091526060830152608082015260a001610163565b6101a9610b44565b6102e06102db36600461307e565b610b50565b6040516101639190613101565b6101866102fb366004613001565b610be7565b6101bf610cc5565b6101a960065481565b6101a9610d15565b61032233610d4f565b61036d5760405162461bcd60e51b81526020600482015260176024820152764f6e6c7920416363657074656420436f6e74726163747360481b60448201526064015b60405180910390fd5b610375610dc9565b565b60006103816106b7565b905060005b81518110156105065760008282815181106103a3576103a3613140565b6020026020010151905060008060009054906101000a90046001600160a01b03166001600160a01b0316636795dbcd838460405160200161041091907f5265736f6c766572206d697373696e67207461726765743a20000000000000008152601981019190915260390190565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161043c9291906131a3565b60206040518083038186803b15801561045457600080fd5b505afa158015610468573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048c91906131bc565b60008381526001602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251868152918201529192507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68910160405180910390a1505080806104fe906131fb565b915050610386565b5050565b6000806105156106b7565b905060005b815181101561061f57600082828151811061053757610537613140565b60209081029190910181015160008181526001909252604080832054925490516321f8a72160e01b8152600481018390529193506001600160a01b039283169216906321f8a7219060240160206040518083038186803b15801561059a57600080fd5b505afa1580156105ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d291906131bc565b6001600160a01b03161415806105fd57506000818152600160205260409020546001600160a01b0316155b1561060c576000935050505090565b5080610617816131fb565b91505061051a565b50600191505090565b60008084600181111561063d5761063d613097565b141561067d5761064e600a83610e5c565b61066a5760405162461bcd60e51b815260040161036490613216565b610676600a8385610ea4565b90506106b0565b610688600883610e5c565b6106a45760405162461bcd60e51b815260040161036490613216565b61067660088385610ea4565b9392505050565b604080516003808252608082019092526060916020820183803683370190505090507321b7b63630ba32b930b620b3b3b932b3b0ba37b960611b8160008151811061070457610704613140565b602002602001018181525050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b8160018151811061073e5761073e613140565b60200260200101818152505075283937b23ab1ba20b2323932b9b9a932b9b7b63b32b960511b8160028151811061077757610777613140565b60200260200101818152505090565b60008181526007602052604081206003015482906001600160a01b031633146107f15760405162461bcd60e51b815260206004820152601960248201527f4e6f2061636365737320746f2063616e63656c206f72646572000000000000006044820152606401610364565b6107f9610f90565b6000838152600760205260408082208151608081019092528054829060ff16600181111561082957610829613097565b600181111561083a5761083a613097565b815260018201546020820152600282015460408201526003909101546001600160a01b0316606090910152905060008151600181111561087c5761087c613097565b141561089e57602081015160408201516108999160089187610fd3565b6108d0565b6001815160018111156108b3576108b3613097565b14156108d057602081015160408201516108d091600a9187610fd3565b6000848152600760205260408120805460ff1916815560018101829055600281019190915560030180546001600160a01b031916905561090e611319565b6001600160a01b0316638cbf5e7882606001516005546127106107d086602001516109399190613261565b6109439190613280565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b15801561099157600080fd5b505af11580156109a5573d6000803e3d6000fd5b5050505080606001516001600160a01b03167ff523a00826d700cad9c1a6b2bb68b57937b6f76e89dc6fe5206389e1a97d3f80858360000151846020015185604001516040516109f894939291906132a2565b60405180910390a25060019392505050565b6000610a16600861133b565b905090565b610a2433610d4f565b610a6a5760405162461bcd60e51b81526020600482015260176024820152764f6e6c7920416363657074656420436f6e74726163747360481b6044820152606401610364565b610375611382565b6000818152600760205260408082208151608081019092528054839283928392839283929091829060ff166001811115610aae57610aae613097565b6001811115610abf57610abf613097565b815260018201546020820152600282015460408201526003909101546001600160a01b03166060909101529050600081516001811115610b0157610b01613097565b1415610b29576040810151610b1990600890896113fd565b9550955095509550955050610b3b565b6040810151610b1990600a90896113fd565b91939590929450565b6000610a16600a61133b565b604080516080810182526000808252602082018190529181018290526060810191909152600082815260076020526040908190208151608081019092528054829060ff166001811115610ba557610ba5613097565b6001811115610bb657610bb6613097565b815260018201546020820152600282015460408201526003909101546001600160a01b031660609091015292915050565b6000600280541415610c3b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610364565b60028055600080856001811115610c5457610c54613097565b1415610c8757610c66600a8486610ea4565b90508015610c8257610c7a60018286611499565b915050610cb9565b610ca7565b610c9360088486610ea4565b90508015610ca757610c7a60008286611499565b610cb285858561189b565b5060019150505b60016002559392505050565b60408051600180825281830190925260609160208083019080368337019050509050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b8160008151811061077757610777613140565b600080610d20610b44565b90506000610d2c610a0a565b90506000610d3a82846132c8565b9050610d47600282613280565b935050505090565b600080610d5a610cc5565b905060005b8151811015610dbf57610d8a828281518110610d7d57610d7d613140565b6020026020010151611b87565b6001600160a01b0316846001600160a01b03161415610dad575060019392505050565b80610db7816131fb565b915050610d5f565b5060009392505050565b60035460ff16610e125760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610364565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600081610e6b57506000610e9e565b8254821415610e7c57506001610e9e565b600082815260018401602052604090205415610e9a57506001610e9e565b5060005b92915050565b60008281526001808501602090815260408084206004808201548652600782018452828620835160a081018552815481529581015494860194909452600284015492850192909252600383015460608501529101546080830152905b6005820154815114801590610f185750838160800151105b15610f70576020908101516000908152600783018252604090819020815160a0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600401546080820152610f00565b83816080015110610f85575191506106b09050565b6000925050506106b0565b60035460ff16156103755760405162461bcd60e51b815260206004820152600d60248201526c13585c9ad95d081c185d5cd959609a1b6044820152606401610364565b816110465760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303729202d2056616c756560448201527f20746f2064656c6574652063616e6e6f74206265207a65726f000000000000006064820152608401610364565b61105284848484611c03565b6110c45760405162461bcd60e51b815260206004820152603a60248201527f4f7264657253746174697374696373547265652834303829202d2056616c756560448201527f20746f2064656c65746520646f6573206e6f742065786973742e0000000000006064820152608401610364565b600082815260018501602052604090206110df858484611c32565b600080826006015460001415611310576000858152600180890160205260409091200154158061112057506000858152600188016020526040902060020154155b1561112c575083611174565b5060008481526001870160205260409020600201545b600081815260018089016020526040909120015415611174576000908152600180880160205260409091200154611142565b6000818152600180890160205260409091200154156111a857600081815260018089016020526040909120015491506111bf565b600081815260018801602052604090206002015491505b600081815260018801602052604080822054848352912081905580156112305760008181526001808a01602052604090912001548214156112155760008181526001808a01602052604090912001839055611234565b60008181526001890160205260409020600201839055611234565b8288555b600082815260018901602052604090206003015460ff16158683146112be5761125e898489611ddf565b600087815260018a8101602052604080832080830154878552828520938401819055845281842087905560028082015490840181905584529083208690556003908101549286905201805460ff191660ff90921615159190911790559195915b80156112ce576112ce8985611e59565b505060008181526001808901602052604082208281559081018290556002810182905560038101805460ff191690556004810182905560058101829055600601555b50505050505050565b6000610a167321b7b63630ba32b930b620b3b3b932b3b0ba37b960611b611b87565b80548061134a57506000919050565b5b60008181526001830160205260409020600201541561137d57600090815260018201602052604090206002015461134b565b919050565b60035460ff16156113c85760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610364565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e3f3390565b600080600080600061140f8888610e5c565b61142b5760405162461bcd60e51b8152600401610364906132e0565b505050600093845250506001928301602090815260408084209284526007909201815291819020815160a08101835281548082529482015493810184905260028201549281018390526003820154606082018190526004909201546080909101819052939492939192909190565b600082815260076020526040808220815160808101909252805483929190829060ff1660018111156114cd576114cd613097565b60018111156114de576114de613097565b81526001820154602080830191909152600283015460408301526003909201546001600160a01b03166060909101528101519091508311156115325760405162461bcd60e51b815260040161036490613330565b60608101516001600160a01b031633141561158f5760405162461bcd60e51b815260206004820152601d60248201527f4d616b657220636f756c646e27742074616b6520697473206f726465720000006044820152606401610364565b611597610f90565b8281602001516115a7919061335c565b600085815260076020526040812060010191909155815160018111156115cf576115cf613097565b141561162f5760408101516115e8906008908686612273565b61162a5760405162461bcd60e51b815260206004820152601360248201527221b7bab6323713ba103334b6361037b93232b960691b6044820152606401610364565b61169f565b60018151600181111561164457611644613097565b141561169f57604081015161165d90600a908686612273565b61169f5760405162461bcd60e51b815260206004820152601360248201527221b7bab6323713ba103334b6361037b93232b960691b6044820152606401610364565b60006116a9612549565b604051631009103960e01b81526321aaa47b60e01b60048201526001600160a01b03919091169063100910399060240160206040518083038186803b1580156116f157600080fd5b505afa158015611705573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172991906131bc565b9050806001600160a01b031663114cc2ec8360600151338560000151600181111561175657611756613097565b6005546006546040808a015190516001600160e01b031960e089901b1681526001600160a01b03968716600482015295909416602486015260ff90921660448501526064840152608483015260a4820188905260c482015260e401602060405180830381600087803b1580156117cb57600080fd5b505af11580156117df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118039190613373565b50336001600160a01b03167f966c5ef9d077123e79f6a459e7ced8ef6f2a106683fa26d6ea3a4b0df8a34b5b868887866040015160405161184794939291906132a2565b60405180910390a2602082015161188f576000858152600760205260408120805460ff1916815560018101829055600281019190915560030180546001600160a01b03191690555b50600195945050505050565b60408051608081018252600080825260208201819052918101829052606081018290526000841161190e5760405162461bcd60e51b815260206004820152601860248201527f43616e277420706c61636520656d70747920616d6f756e7400000000000000006044820152606401610364565b600083116119575760405162461bcd60e51b815260206004820152601660248201527543616e277420706c61636520656d707479207261746560501b6044820152606401610364565b61195f610f90565b8085600181111561197257611972613097565b9081600181111561198557611985613097565b90525060208101849052604081018390523360608201526119a461256d565b6000818152600760205260409020825181549294508392829060ff1916600183818111156119d4576119d4613097565b02179055506020820151600182015560408201516002820155606090910151600390910180546001600160a01b0319166001600160a01b03909216919091179055611a1d611319565b6001600160a01b0316639fcaebfa336005546127106107d089611a409190613261565b611a4a9190613280565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b158015611a9857600080fd5b505af1158015611aac573d6000803e3d6000fd5b5060009250611ab9915050565b81516001811115611acc57611acc613097565b1415611aee5760208101516040820151611ae9916008918561258b565b611b20565b600181516001811115611b0357611b03613097565b1415611b205760208101516040820151611b2091600a918561258b565b80606001516001600160a01b03167f9baa679e9516a3acae8c0deb69798eb2824dd6984b54d21dd4942c76511f4d3183836000015160055460065486602001518760400151604051611b779695949392919061338c565b60405180910390a2509392505050565b600081815260016020908152604080832054905170026b4b9b9b4b7339030b2323932b9b99d1607d1b92810192909252603182018490526001600160a01b0316908115159060510160405160208183030381529060405290611bfc5760405162461bcd60e51b815260040161036491906133c3565b5092915050565b6000611c0f8584610e5c565b611c1b57506000611c2a565b611c27858486856126fd565b90505b949350505050565b611c3c8383610e5c565b611c585760405162461bcd60e51b8152600401610364906132e0565b600082815260018085016020908152604080842085855260078101835293819020815160a08101835281548152938101549284019290925260028201549083015260038101546060830152600490810154608083015282015483148015611cc25750828260050154145b15611ce757600084815260018601602052604081206004810182905560050155611d8b565b8282600401541415611d3357611d1485858360200151600091825260019092016020526040902060040155565b6020808201516000908152600784019091526040812060020155611d8b565b8282600501541415611d7757604080820151600086815260018801602052919091206005015560408082015160009081526007840160205290812060010155611d8b565b611d8b858583604001518460200151612778565b80516000908152600783016020526040812081815560018082018390556002820183905560038201839055600490910182905560068401805491929091611dd390849061335c565b90915550505050505050565b600081815260018401602052604080822054848352912081905580611e0657828455611e53565b6000818152600180860160205260409091200154821415611e3c5760008181526001808601602052604090912001839055611e53565b600081815260018501602052604090206002018390555b50505050565b60005b82548214801590611e815750600082815260018401602052604090206003015460ff16155b1561225457600082815260018085016020526040808320548084529220015483141561207d5760008181526001850160205260408082206002015480835291206003015490925060ff1615611f25576000828152600180860160205260408083206003908101805460ff19908116909155858552919093209092018054909216179055611f0e84826127a9565b600081815260018501602052604090206002015491505b60008281526001808601602052604080832090910154825290206003015460ff16158015611f705750600082815260018501602052604080822060020154825290206003015460ff16155b15611f9d57600082815260018581016020526040909120600301805460ff1916909117905591508161224e565b600082815260018501602052604080822060020154825290206003015460ff1661201a576000828152600180860160205260408083208083015484529083206003908101805460ff19908116909155938690520180549092161790556120038483612881565b600081815260018501602052604090206002015491505b600081815260018501602052604080822060039081018054868552838520808401805460ff909316151560ff19938416179055825482169092556002909101548452919092209091018054909116905561207484826127a9565b8354925061224e565b6000818152600180860160205260408083209091015480835291206003015490925060ff16156120fc576000828152600180860160205260408083206003908101805460ff199081169091558585529190932090920180549092161790556120e58482612881565b600081815260018086016020526040909120015491505b600082815260018501602052604080822060020154825290206003015460ff16158015612147575060008281526001808601602052604080832090910154825290206003015460ff16155b1561217457600082815260018581016020526040909120600301805460ff1916909117905591508161224e565b60008281526001808601602052604080832090910154825290206003015460ff166121f357600082815260018086016020526040808320600281015484529083206003908101805460ff19908116909155938690520180549092161790556121dc84836127a9565b600081815260018086016020526040909120015491505b60008181526001808601602052604080832060039081018054878652838620808401805460ff909316151560ff199384161790558254821690925593015484529220909101805490911690556122498482612881565b835492505b50611e5c565b506000908152600190910160205260409020600301805460ff19169055565b6000838152600180860160209081526040808420868552600781018352818520825160a081018452815481529481015493850193909352600283015491840191909152600382015460608401526004909101546080830181905290919083906122dd90869061335c565b6000878152600785016020526040902060040181905590508061230b5761230688828989610fd3565b61253b565b6004808401546000908152600785016020526040902001548111156124f1576004808401546000908152600785016020908152604091829020825160a081018452815481526001820154928101929092526002810154928201929092526003820154606082015291015460808201525b60058401548151148015906123935750818160800151105b156123eb576020908101516000908152600785018252604090819020815160a081018352815481526001820154938101939093526002810154918301919091526003810154606083015260040154608082015261237b565b858360800151111561247457604080820151600090815260078601602090815290829020825160a081018452815481526001820154928101929092526002810154928201929092526003820154606082015260049091015460808201528351825161245a918c918c9190612778565b61246e8a8a83600001518760000151612778565b506124eb565b6020808201516000908152600786018252604090819020815160a081018352815480825260018301549482019490945260028201549281019290925260038101546060830152600401546080820152845190916124d5918c918c9190612778565b6124e98a8a84600001518760000151612778565b505b5061253b565b612505888884600001518660040154612778565b8151600088815260018a016020526040902060040155600583015461253b578151600088815260018a0160205260409020600501555b506001979650505050505050565b6000610a1675283937b23ab1ba20b2323932b9b9a932b9b7b63b32b960511b611b87565b600480546000918261257e836131fb565b9190505550600454905090565b816125fe5760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303529202d2056616c756560448201527f20746f20696e736572742063616e6e6f74206265207a65726f000000000000006064820152608401610364565b83546000905b801561266f578091508084101561262e576000908152600180870160205260409091200154612604565b8084111561264f576000908152600186016020526040902060020154612604565b8084141561266a5761266386828786612956565b5050611e53565b612604565b6000848152600180880160205260408220848155808201839055600281019290925560038201805460ff191690911790556126ac87868887612956565b826126b9578487556126f3565b828510156126dc57600083815260018089016020526040909120018590556126f3565b600083815260018801602052604090206002018590555b6113108786612acb565b6000838152600180860160209081526040808420858552600781018352818520825160a0810184528154815294810154938501939093526002830154918401919091526003820154606084015260049091015460808301819052909190851461276b57600092505050611c2a565b5060019695505050505050565b6000928352600193840160209081526040808520848652600701909152808420909401819055825291902060020155565b6000818152600180840160205260408083206002810180549154828652928520909301549385905291839055909180156127f157600081815260018601602052604090208490555b60008381526001860160205260409020829055816128115782855561285e565b6000828152600180870160205260409091200154841415612847576000828152600180870160205260409091200183905561285e565b600082815260018601602052604090206002018390555b505060008181526001938401602052604080822090940183905591825291902055565b600081815260018084016020526040808320918201805492548385529184206002015493859052839055909180156128c757600081815260018601602052604090208490555b60008381526001860160205260409020829055816128e757828555612934565b600082815260018601602052604090206002015484141561291d5760008281526001860160205260409020600201839055612934565b600082815260018087016020526040909120018390555b5050600081815260019093016020526040808420600201839055918352912055565b600082116129765760405162461bcd60e51b815260040161036490613330565b6000838152600185016020526040902060048101546129a05761299b85858585612d36565b612ac4565b600480820154600090815260078301602052604090200154831115612ab8576004808201546000908152600783016020908152604091829020825160a081018452815481526001820154928101929092526002810154928201929092526003820154606082015291015460808201525b602081015115801590612a27575083816080015111155b15612a7f576020908101516000908152600783018252604090819020815160a0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600401546080820152612a10565b8381608001511115612aa157612a9c868683600001518787612da3565b612ab2565b612ab2868683600001518787612def565b50612ac4565b612ac485858585612d36565b5050505050565b60005b82548214801590612af85750600082815260018401602052604080822054825290206003015460ff165b15612d14576000828152600180850160205260408083205480845281842054845292200154811415612c1b5760008181526001850160205260408082205482528082206002015480835291206003015490925060ff1615612ba1576000818152600180860160205260408083206003808201805460ff19908116909155878652838620820180548216905582548652928520018054909216909217905590829052549250612d0e565b6000818152600185016020526040902060020154831415612bc957809250612bc984846127a9565b50600082815260018085016020526040808320548084528184206003808201805460ff19908116909155825487529386200180549093169093179091559182905254612c16908590612881565b612d0e565b6000818152600180860160205260408083205483528083209091015480835291206003015490925060ff1615612c99576000818152600180860160205260408083206003808201805460ff19908116909155878652838620820180548216905582548652928520018054909216909217905590829052549250612d0e565b6000818152600180860160205260409091200154831415612cc157809250612cc18484612881565b50600082815260018085016020526040808320548084528184206003808201805460ff19908116909155825487529386200180549093169093179091559182905254612d0e9085906127a9565b50612ace565b505080546000908152600190910160205260409020600301805460ff19169055565b6000838152600185016020526040812090612d5386868686612f00565b9050612d658686838560040154612778565b600085815260018701602052604090206004018190556005820154612d9b57600085815260018701602052604090206005018190555b505050505050565b600084815260018601602052604090206004810154841415612dd057612dcb86868585612d36565b612d9b565b6000848152600782016020526040902060020154612d9b908790879086865b60008211612e0f5760405162461bcd60e51b815260040161036490613330565b600084815260018601602052604090206005810154841415612e3757612dcb86868585612fa1565b60008481526007820160208181526040808420815160a080820184528254825260018084015483870181905260028086015485880152600380870154606080880191909152600497880154608080890191909152938c52998952878b20885195860189528054865293840154988501989098528201549583019590955294850154958101959095529201549083015291612ed389898888612f00565b9050612ee58989838560000151612778565b612ef58989856000015184612778565b505050505050505050565b6000838152600185016020526040812060068101548290612f1f575060015b6001826006016000828254612f3491906132c8565b90915550506040805160a081018252858152600060208083018281528385018381524260608601908152608086019b8c5299845260079790970190915292902090518082559151600182015592516002840155935160038301555092516004909301929092559392505050565b600083815260018501602052604090206004810154612fc65761299b85858585612d36565b6000612fd486868686612f00565b9050612fe68686846005015484612778565b60008581526001870160205260409020600501819055612d9b565b60008060006060848603121561301657600080fd5b83356002811061302557600080fd5b95602085013595506040909401359392505050565b6020808252825182820181905260009190848201906040850190845b8181101561307257835183529284019291840191600101613056565b50909695505050505050565b60006020828403121561309057600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600281106130cb57634e487b7160e01b600052602160045260246000fd5b9052565b608081016130dd82876130ad565b602082019490945260408101929092526001600160a01b0316606090910152919050565b60006080820190506131148284516130ad565b602083015160208301526040830151604083015260018060a01b03606084015116606083015292915050565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b8181101561317c57602081850181015186830182015201613160565b8181111561318e576000602083870101525b50601f01601f19169290920160200192915050565b828152604060208201526000611c2a6040830184613156565b6000602082840312156131ce57600080fd5b81516001600160a01b03811681146106b057600080fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561320f5761320f6131e5565b5060010190565b6020808252602b908201527f4e6f206f72646572732065786973747320666f722073656c656374656420696e60408201526a746572657374207261746560a81b606082015260800190565b600081600019048311821515161561327b5761327b6131e5565b500290565b60008261329d57634e487b7160e01b600052601260045260246000fd5b500490565b848152608081016132b660208301866130ad565b60408201939093526060015292915050565b600082198211156132db576132db6131e5565b500190565b60208082526030908201527f4f7264657253746174697374696373547265652834303329202d2056616c756560408201526f103237b2b9903737ba1032bc34b9ba1760811b606082015260800190565b602080825260129082015271125b9cdd599a58da595b9d08185b5bdd5b9d60721b604082015260600190565b60008282101561336e5761336e6131e5565b500390565b60006020828403121561338557600080fd5b5051919050565b86815260c081016133a060208301886130ad565b8560408301528460608301528360808301528260a0830152979650505050505050565b6020815260006106b0602083018461315656fea26469706673582212207e45e5c22e335d9591621dbb33a6b5a5a44e82b64ad0aacd5dcb4de2039f74b164736f6c63430008090033a2646970667358221220078e07cbf311a84f373593793820fd2dd4d662ee05f2d6443779b37cd478b3dd64736f6c63430008090033",
  "libraries": {
    "QuickSort": "0x8Eb68e256006e6E73Ea3A8911f7AcF60C9c4A7E3",
    "DiscountFactor": "0x80C3B044C44a894Ff257E572502F40fE0C28F508"
  },
  "implementation": "0x4C7994eeeD52c1906B9baB73E320DBc9FccB1285",
  "devdoc": {
    "details": "Lending Market Controller contract is managing separated lending order-book markets (per term) and responsible to calculate Discount Factors per currency and construct yield curve It will store lending market addresses by ccy and term in lendingMarkets mapping.",
    "kind": "dev",
    "methods": {
      "acceptedContracts()": {
        "details": "Returns contract names that can call this contract."
      },
      "deployLendingMarket(bytes32,uint256)": {
        "details": "Deploys new Lending Market and save address at lendingMarkets mapping.",
        "params": {
          "_ccy": "Main currency for new lending market",
          "_term": "Term for new Lending Market"
        }
      },
      "getBorrowRatesForCcy(bytes32)": {
        "details": "Triggers to get borrow rates for selected currency.",
        "params": {
          "_ccy": "Currency"
        }
      },
      "getDiscountFactorsForCcy(bytes32)": {
        "details": "Triggers to discount factor for selected currency.",
        "params": {
          "_ccy": "Currency"
        }
      },
      "getLendRatesForCcy(bytes32)": {
        "details": "Triggers to get lend rates for selected currency.",
        "params": {
          "_ccy": "Currency"
        }
      },
      "getLendingMarket(bytes32,uint256)": {
        "details": "Triggers to get lending market.",
        "params": {
          "_ccy": "Currency for Lending Market",
          "_term": "Term for Lending Market"
        }
      },
      "getMidRatesForCcy(bytes32)": {
        "details": "Triggers to get mid rates for selected currency.",
        "params": {
          "_ccy": "Currency"
        }
      },
      "getSupportedTerms(bytes32)": {
        "details": "Triggers to supported terms for selected currency.",
        "params": {
          "_ccy": "Currency"
        }
      },
      "initialize(address,address)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pauseLendingMarkets(bytes32)": {
        "details": "Pauses previously deployed lending market by currency",
        "params": {
          "_ccy": "Currency for pausing all lending markets"
        }
      },
      "placeBulkOrders((bytes32,uint256,uint8,uint256,uint256)[])": {
        "details": "Places orders in multiple Lending Markets.",
        "params": {
          "orders": "Lending Market orders array with ccy and terms to identify right market"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requiredContracts()": {
        "details": "Returns required contract names in this contract"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpauseLendingMarkets(bytes32)": {
        "details": "Unpauses previously deployed lending market by currency",
        "params": {
          "_ccy": "Currency for pausing all lending markets"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deployLendingMarket(bytes32,uint256)": {
        "notice": "Reverts on deployment market with existing currency and term"
      },
      "initialize(address,address)": {
        "notice": "Initializes the contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 35871,
        "contract": "contracts/LendingMarketController.sol:LendingMarketController",
        "label": "resolver",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAddressResolver)23433"
      },
      {
        "astId": 35875,
        "contract": "contracts/LendingMarketController.sol:LendingMarketController",
        "label": "addressCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2990,
        "contract": "contracts/LendingMarketController.sol:LendingMarketController",
        "label": "_initialized",
        "offset": 0,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 2993,
        "contract": "contracts/LendingMarketController.sol:LendingMarketController",
        "label": "_initializing",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAddressResolver)23433": {
        "encoding": "inplace",
        "label": "contract IAddressResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}