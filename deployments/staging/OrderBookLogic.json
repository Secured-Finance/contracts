{
  "address": "0x85CC180F768306235994fCdEb255813a213256e5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "ProtocolTypes.Side"
        },
        {
          "internalType": "uint256",
          "name": "_futureValue",
          "type": "uint256"
        }
      ],
      "name": "estimateFilledAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getBorrowOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getBorrowOrderIds",
      "outputs": [
        {
          "internalType": "uint48[]",
          "name": "activeOrderIds",
          "type": "uint48[]"
        },
        {
          "internalType": "uint48[]",
          "name": "inActiveOrderIds",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHighestLendingUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getLendOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLendOrderIds",
      "outputs": [
        {
          "internalType": "uint48[]",
          "name": "activeOrderIds",
          "type": "uint48[]"
        },
        {
          "internalType": "uint48[]",
          "name": "inActiveOrderIds",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLowestBorrowingUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOpeningUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "openingUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalOffsetAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint48",
          "name": "_orderId",
          "type": "uint48"
        }
      ],
      "name": "getOrder",
      "outputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "ProtocolTypes.Side"
        },
        {
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalAmountFromBorrowOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalAmountFromLendOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "hasBorrowOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "hasLendOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbb7ca17d72e7f5f8895fad92074219380870e3ee5624cc5cc0d86bc9df4ca57b",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x85CC180F768306235994fCdEb255813a213256e5",
    "transactionIndex": 11,
    "gasUsed": "4995271",
    "logsBloom": "0x
    "blockHash": "0x2b329f18efe070767bb42b44e420ae725fe2fff28f6320d11e10ca9ef683731b",
    "transactionHash": "0xbb7ca17d72e7f5f8895fad92074219380870e3ee5624cc5cc0d86bc9df4ca57b",
    "logs": [],
    "blockNumber": 3731930,
    "cumulativeGasUsed": "5816505",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "b57600b51ef0b115c52371ee9eb0c58d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"ProtocolTypes.Side\"},{\"internalType\":\"uint256\",\"name\":\"_futureValue\",\"type\":\"uint256\"}],\"name\":\"estimateFilledAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getBorrowOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBorrowOrderIds\",\"outputs\":[{\"internalType\":\"uint48[]\",\"name\":\"activeOrderIds\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48[]\",\"name\":\"inActiveOrderIds\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHighestLendingUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getLendOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLendOrderIds\",\"outputs\":[{\"internalType\":\"uint48[]\",\"name\":\"activeOrderIds\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48[]\",\"name\":\"inActiveOrderIds\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLowestBorrowingUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpeningUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"openingUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOffsetAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_orderId\",\"type\":\"uint48\"}],\"name\":\"getOrder\",\"outputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"ProtocolTypes.Side\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalAmountFromBorrowOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalAmountFromLendOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"hasBorrowOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"hasLendOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/libraries/logics/OrderBookLogic.sol\":\"OrderBookLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/protocol/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport {MarketOrder} from \\\"../storages/LendingMarketStorage.sol\\\";\\n\\ninterface ILendingMarket {\\n    struct FilledOrder {\\n        uint256 unitPrice;\\n        uint256 amount;\\n        uint256 futureValue;\\n        uint256 ignoredAmount;\\n    }\\n\\n    struct PartiallyFilledOrder {\\n        address maker;\\n        uint256 amount;\\n        uint256 futureValue;\\n    }\\n\\n    event OrderCanceled(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n\\n    event OrderMade(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n\\n    event OrdersTaken(\\n        address indexed taker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 filledAmount,\\n        uint256 unitPrice,\\n        uint256 filledFutureValue\\n    );\\n\\n    event OrderPartiallyTaken(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 maturity,\\n        uint256 filledAmount,\\n        uint256 filledFutureValue\\n    );\\n\\n    event OrdersCleaned(\\n        uint48[] orderIds,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 maturity\\n    );\\n\\n    event OrderBlockedByCircuitBreaker(\\n        address indexed user,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 thresholdUnitPrice\\n    );\\n\\n    event MarketOpened(uint256 maturity, uint256 prevMaturity);\\n\\n    event ItayoseExecuted(bytes32 ccy, uint256 maturity, uint256 openingPrice);\\n\\n    struct Market {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        uint256 openingDate;\\n        uint256 borrowUnitPrice;\\n        uint256 lendUnitPrice;\\n        uint256 midUnitPrice;\\n        bool isReady;\\n    }\\n\\n    function getMarket() external view returns (Market memory);\\n\\n    function getBorrowUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getLendUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getMidUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getBorrowOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturity() external view returns (uint256);\\n\\n    function getCurrency() external view returns (bytes32);\\n\\n    function getOpeningDate() external view returns (uint256);\\n\\n    function getOpeningUnitPrice() external view returns (uint256);\\n\\n    function isReady() external view returns (bool);\\n\\n    function isMatured() external view returns (bool);\\n\\n    function isOpened() external view returns (bool);\\n\\n    function isItayosePeriod() external view returns (bool);\\n\\n    function isPreOrderPeriod() external returns (bool);\\n\\n    function getOrder(uint48 orderId)\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        );\\n\\n    function getTotalAmountFromLendOrders(address user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getTotalAmountFromBorrowOrders(address user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getLendOrderIds(address user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds);\\n\\n    function getBorrowOrderIds(address user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds);\\n\\n    function estimateFilledAmount(ProtocolTypes.Side side, uint256 futureValue)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function openMarket(uint256 maturity, uint256 openingDate) external returns (uint256);\\n\\n    function cancelOrder(address user, uint48 orderId)\\n        external\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        );\\n\\n    function createOrder(\\n        ProtocolTypes.Side side,\\n        address account,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        uint256 circuitBreakerLimitRange\\n    )\\n        external\\n        returns (FilledOrder memory filledOrder, PartiallyFilledOrder memory partiallyFilledOrder);\\n\\n    function createPreOrder(\\n        ProtocolTypes.Side side,\\n        address user,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external;\\n\\n    function unwind(\\n        ProtocolTypes.Side side,\\n        address user,\\n        uint256 futureValue,\\n        uint256 circuitBreakerLimitRange\\n    )\\n        external\\n        returns (FilledOrder memory filledOrder, PartiallyFilledOrder memory partiallyFilledOrder);\\n\\n    function executeItayoseCall()\\n        external\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 totalOffsetAmount,\\n            uint256 openingDate,\\n            PartiallyFilledOrder memory partiallyFilledLendingOrder,\\n            PartiallyFilledOrder memory partiallyFilledBorrowingOrder\\n        );\\n\\n    function cleanUpOrders(address user)\\n        external\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        );\\n\\n    function pauseMarket() external;\\n\\n    function unpauseMarket() external;\\n}\\n\",\"keccak256\":\"0x5c10f60625a1c9118d56767bc5efe665b0e6f00456e9a3027a4bb0bba2d57b22\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Constants {\\n    /// @dev Used for price digits in the basis (10000 -> 1)\\n    uint256 public constant PRICE_DIGIT = 10000;\\n\\n    /// @dev Used for percentage digits in the basis (10000 -> 100%)\\n    uint256 public constant PCT_DIGIT = 10000;\\n\\n    /// @dev Used for seconds in year (60 * 60 * 24 * 365)\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000;\\n\\n    /// @dev Used for maximum order count per currency\\n    uint256 internal constant MAXIMUM_ORDER_COUNT = 20;\\n\\n    /// @dev Used for minimum threshold for circuit breaker unitprice threshold\\n    uint256 public constant MINIMUM_CIRCUIT_BREAKER_THRESHOLD = 10;\\n\\n    /// @dev Used for maximum threshold for circuit breaker unitprice threshold\\n    uint256 public constant MAXIMUM_CIRCUIT_BREAKER_THRESHOLD = 200;\\n}\\n\",\"keccak256\":\"0xf788305f2623b66237164c053a4c44ed2b97ea3a60d4500407b2eb56a08f65ba\",\"license\":\"MIT\"},\"contracts/protocol/libraries/OrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// libraries\\nimport {Constants} from \\\"../libraries/Constants.sol\\\";\\n// types\\nimport {RoundingUint256} from \\\"./math/RoundingUint256.sol\\\";\\n\\nstruct RemainingOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 unitPrice;\\n}\\n\\nstruct PartiallyFilledOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 futureValue;\\n}\\n\\nstruct OrderItem {\\n    uint48 orderId;\\n    uint48 next;\\n    uint48 prev;\\n    address maker;\\n    uint256 timestamp;\\n    uint256 amount;\\n}\\n\\n/**\\n * @notice OrderStatisticsTreeLib is a Red-Black Tree binary search library\\n * based on the following library that is extended to manage order data.\\n *\\n * https://github.com/rob-Hitchens/OrderStatisticsTree\\n *\\n */\\nlibrary OrderStatisticsTreeLib {\\n    using RoundingUint256 for uint256;\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint48 head;\\n        uint48 tail;\\n        uint256 orderCounter;\\n        uint256 orderTotalAmount;\\n        mapping(uint256 => OrderItem) orders;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].right != EMPTY) {\\n            _value = self.nodes[_value].right;\\n        }\\n    }\\n\\n    function hasOrders(Tree storage self) internal view returns (bool) {\\n        return self.root != EMPTY;\\n    }\\n\\n    function next(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(401) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].right != EMPTY) {\\n            _cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(402) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].left != EMPTY) {\\n            _cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint256 value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        // if (self.nodes[value].parent != EMPTY) return true;\\n        uint256 cursor = value;\\n        while (self.nodes[cursor].parent != EMPTY) {\\n            uint256 parent = self.nodes[cursor].parent;\\n            if (self.nodes[parent].left != cursor && self.nodes[parent].right != cursor) {\\n                return false;\\n            }\\n            if (parent == self.root) {\\n                return true;\\n            }\\n            cursor = self.nodes[cursor].parent;\\n        }\\n        return false;\\n    }\\n\\n    function isActiveOrderId(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        return orderIdExists(self, value, orderId) && exists(self, value);\\n    }\\n\\n    function getNode(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n        return (\\n            gn.parent,\\n            gn.left,\\n            gn.right,\\n            gn.red,\\n            gn.head,\\n            gn.tail,\\n            gn.orderCounter,\\n            gn.orderTotalAmount\\n        );\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function getNodeTotalAmount(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint256 totalAmount)\\n    {\\n        return self.nodes[value].orderTotalAmount;\\n    }\\n\\n    function getNodeOrderIds(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint48[] memory orderIds)\\n    {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[gn.head];\\n        orderIds = new uint48[](gn.orderCounter);\\n\\n        for (uint256 i = 0; i < gn.orderCounter; i++) {\\n            orderIds[i] = order.orderId;\\n            order = gn.orders[order.next];\\n        }\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256 _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(405) - Value to insert cannot be zero\\\");\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                return;\\n            }\\n        }\\n\\n        Node storage nValue = self.nodes[value];\\n        // Update order info as a new one if there is already an old node\\n        if (\\n            self.root == EMPTY ||\\n            (self.nodes[cursor].left != value && self.nodes[cursor].right != value)\\n        ) {\\n            nValue.orderCounter = 0;\\n            nValue.orderTotalAmount = 0;\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        }\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(407) - Value to delete cannot be zero\\\");\\n        Node storage nValue = self.nodes[value];\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint256 a,\\n        uint256 b\\n    ) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    function estimateDroppedAmountFromLeft(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = first(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV).div(\\n                    cursorNodeAmountInFV\\n                );\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n    }\\n\\n    function estimateDroppedAmountFromRight(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = last(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV).div(\\n                    cursorNodeAmountInFV\\n                );\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n    }\\n\\n    function dropLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue,\\n        uint256 limitFutureValue\\n    )\\n        internal\\n        returns (\\n            uint256 value,\\n            uint256 filledAmount,\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            PartiallyFilledOrder memory partiallyFilledOrder\\n        )\\n    {\\n        uint256 cursor = first(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor <= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        uint256 amountDiff;\\n        uint256 futureValueDiff;\\n        while (\\n            (totalAmount < amount || amount == EMPTY) &&\\n            (filledFutureValue < limitFutureValue || limitFutureValue == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor <= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            filledFutureValue += _calculateFutureValue(cursor, cursorNodeAmount);\\n            filledAmount += cursorNodeAmount;\\n\\n            if (totalAmount > amount && amount != EMPTY) {\\n                amountDiff = totalAmount - amount;\\n                futureValueDiff = _calculateFutureValue(cursor, amountDiff);\\n            } else if (filledFutureValue > limitFutureValue && limitFutureValue != EMPTY) {\\n                futureValueDiff = filledFutureValue - limitFutureValue;\\n                amountDiff = _calculatePresentValue(cursor, futureValueDiff);\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n\\n        if (amountDiff > 0) {\\n            filledAmount -= amountDiff;\\n        }\\n        if (futureValueDiff > 0) {\\n            filledFutureValue -= futureValueDiff;\\n        }\\n\\n        if (totalAmount > 0) {\\n            if (amountDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(self, cursor, cursorNodeAmount - amountDiff);\\n            } else if (futureValueDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, futureValueDiff)\\n                );\\n            }\\n\\n            self.nodes[cursor].left = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent > cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].left = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        uint256 lastNode = last(self);\\n\\n        if (lastNode == value && self.nodes[lastNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value > self.root || (value == self.root && filledAmount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToLeft(self);\\n    }\\n\\n    function dropRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue,\\n        uint256 limitFutureValue\\n    )\\n        internal\\n        returns (\\n            uint256 value,\\n            uint256 filledAmount,\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            PartiallyFilledOrder memory partiallyFilledOrder\\n        )\\n    {\\n        uint256 cursor = last(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor >= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        uint256 amountDiff;\\n        uint256 futureValueDiff;\\n        while (\\n            (totalAmount < amount || amount == EMPTY) &&\\n            (filledFutureValue < limitFutureValue || limitFutureValue == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor >= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            filledFutureValue += _calculateFutureValue(cursor, cursorNodeAmount);\\n            filledAmount += cursorNodeAmount;\\n\\n            if (totalAmount > amount && amount != EMPTY) {\\n                amountDiff = totalAmount - amount;\\n                futureValueDiff = _calculateFutureValue(cursor, amountDiff);\\n            } else if (filledFutureValue > limitFutureValue && limitFutureValue != EMPTY) {\\n                futureValueDiff = filledFutureValue - limitFutureValue;\\n                amountDiff = _calculatePresentValue(cursor, futureValueDiff);\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n\\n        if (amountDiff > 0) {\\n            filledAmount -= amountDiff;\\n        }\\n        if (futureValueDiff > 0) {\\n            filledFutureValue -= futureValueDiff;\\n        }\\n\\n        if (totalAmount > 0) {\\n            if (amountDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(self, cursor, cursorNodeAmount - amountDiff);\\n            } else if (futureValueDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                partiallyFilledOrder = fillOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, futureValueDiff)\\n                );\\n            }\\n\\n            self.nodes[cursor].right = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent < cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].right = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        uint256 firstNode = first(self);\\n\\n        if (firstNode == value && self.nodes[firstNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value < self.root || (value == self.root && filledAmount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToRight(self);\\n    }\\n\\n    function rotateTreeToLeft(Tree storage self) internal {\\n        if (self.nodes[self.root].left == 0 && self.nodes[self.root].right != 0) {\\n            if (self.nodes[self.nodes[self.root].right].left != 0) {\\n                rotateRight(self, self.nodes[self.root].right);\\n            }\\n            rotateLeft(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function rotateTreeToRight(Tree storage self) internal {\\n        if (self.nodes[self.root].right == 0 && self.nodes[self.root].left != 0) {\\n            if (self.nodes[self.nodes[self.root].left].right != 0) {\\n                rotateLeft(self, self.nodes[self.root].left);\\n            }\\n            rotateRight(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function getFutureValue(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (uint256) {\\n        return _calculateFutureValue(value, self.nodes[value].orders[orderId].amount);\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (OrderItem memory) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orders[orderId];\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function orderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        uint48 cursor = orderId;\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[cursor];\\n\\n        if (order.orderId != cursor) {\\n            return false;\\n        }\\n\\n        while (order.prev != EMPTY) {\\n            cursor = order.prev;\\n            order = gn.orders[cursor];\\n        }\\n\\n        return cursor == gn.head;\\n    }\\n\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal {\\n        require(amount > 0, \\\"Insufficient amount\\\");\\n        require(value <= Constants.PRICE_DIGIT, \\\"Insufficient value\\\");\\n        insert(self, value);\\n\\n        addTail(self, value, orderId, user, amount);\\n    }\\n\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        amount = _removeOrder(self, value, orderId);\\n        remove(self, value);\\n    }\\n\\n    /**\\n     * @dev Reduces order amount once market order taken.\\n     */\\n    function fillOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount\\n    ) internal returns (PartiallyFilledOrder memory partiallyFilledOrder) {\\n        Node storage gn = self.nodes[value];\\n\\n        require(\\n            gn.orderTotalAmount >= _amount,\\n            \\\"OrderStatisticsTree(410) - Amount to fill is insufficient\\\"\\n        );\\n\\n        uint256 remainingAmount = _amount;\\n        OrderItem memory currentOrder = gn.orders[gn.head];\\n        uint48 orderId = gn.head;\\n\\n        while (orderId != 0 && remainingAmount != 0) {\\n            currentOrder = gn.orders[orderId];\\n\\n            if (currentOrder.amount <= remainingAmount) {\\n                remainingAmount -= currentOrder.amount;\\n                orderId = currentOrder.next;\\n            } else {\\n                partiallyFilledOrder = PartiallyFilledOrder(\\n                    currentOrder.orderId,\\n                    currentOrder.maker,\\n                    remainingAmount,\\n                    _calculateFutureValue(value, remainingAmount)\\n                );\\n                currentOrder = gn.orders[currentOrder.prev];\\n                break;\\n            }\\n        }\\n\\n        if (currentOrder.orderId != 0) {\\n            _dropOrders(self, value, currentOrder.orderId);\\n        }\\n\\n        if (partiallyFilledOrder.amount > 0) {\\n            self.nodes[value].orders[partiallyFilledOrder.orderId].amount -= partiallyFilledOrder\\n                .amount;\\n            self.nodes[value].orderTotalAmount -= partiallyFilledOrder.amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n        uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n        _link(self, _value, orderId, gn.head);\\n        _setHead(self, _value, orderId);\\n        if (gn.tail == 0) _setTail(self, _value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, _value, _orderId, _user, _amount);\\n        } else {\\n            uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n            _link(self, _value, gn.tail, orderId);\\n            _setTail(self, _value, orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint48) {\\n        Node storage gn = self.nodes[value];\\n        require(\\n            gn.orders[orderId].timestamp == 0,\\n            \\\"OrderStatisticsTree(409) - Order id already exist.\\\"\\n        );\\n\\n        gn.orderCounter += 1;\\n        gn.orderTotalAmount += amount;\\n        OrderItem memory order = OrderItem(orderId, 0, 0, user, block.timestamp, amount);\\n        gn.orders[orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the list.\\n     */\\n    function _removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n        gn.orderTotalAmount -= order.amount;\\n    }\\n\\n    /**\\n     * @dev Drop the OrderItems older than or equal `orderId` from the list\\n     */\\n    function _dropOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n        uint256 cursor = gn.head;\\n        uint256 removedCount = 1;\\n        uint256 removedAmount = gn.orders[cursor].amount;\\n\\n        while (cursor != orderId) {\\n            cursor = gn.orders[cursor].next;\\n            removedCount++;\\n            removedAmount += gn.orders[cursor].amount;\\n        }\\n\\n        if (gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        }\\n\\n        gn.orderCounter -= removedCount;\\n        gn.orderTotalAmount -= removedAmount;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 _prevId,\\n        uint48 _nextId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[_prevId].next = _nextId;\\n        gn.orders[_nextId].prev = _prevId;\\n    }\\n\\n    function _calculateFutureValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * Constants.PRICE_DIGIT).div(unitPrice);\\n    }\\n\\n    function _calculatePresentValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * unitPrice).div(Constants.PRICE_DIGIT);\\n    }\\n}\\n\",\"keccak256\":\"0x82f693fffbd1f1657b73d69598c7856b403fcccd41ac1c3143e8082e5dc9344d\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/OrderBookLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {OrderStatisticsTreeLib, PartiallyFilledOrder, OrderItem} from \\\"../OrderStatisticsTreeLib.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\nimport {ILendingMarket} from \\\"../../interfaces/ILendingMarket.sol\\\";\\nimport {ProtocolTypes} from \\\"../../types/ProtocolTypes.sol\\\";\\nimport {LendingMarketStorage as Storage, MarketOrder} from \\\"../../storages/LendingMarketStorage.sol\\\";\\n\\nlibrary OrderBookLogic {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n    using RoundingUint256 for uint256;\\n\\n    function getHighestLendingUnitPrice() public view returns (uint256) {\\n        return Storage.slot().lendOrders[Storage.slot().maturity].last();\\n    }\\n\\n    function getLowestBorrowingUnitPrice() public view returns (uint256) {\\n        uint256 unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].first();\\n        return unitPrice == 0 ? Constants.PRICE_DIGIT : unitPrice;\\n    }\\n\\n    function hasBorrowOrder(address _user) external view returns (bool) {\\n        return Storage.slot().activeBorrowOrderIds[_user].length != 0;\\n    }\\n\\n    function hasLendOrder(address _user) external view returns (bool) {\\n        return Storage.slot().activeLendOrderIds[_user].length != 0;\\n    }\\n\\n    function getLendOrderBook(uint256 _limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = Storage.slot().lendOrders[Storage.slot().maturity].last();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\\n            unitPrice\\n        );\\n        quantities[0] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeCount(unitPrice);\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = Storage.slot().lendOrders[Storage.slot().maturity].prev(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\\n                unitPrice\\n            );\\n            quantities[i] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeCount(\\n                unitPrice\\n            );\\n        }\\n    }\\n\\n    function getBorrowOrderBook(uint256 _limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].first();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeTotalAmount(\\n            unitPrice\\n        );\\n        quantities[0] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeCount(\\n            unitPrice\\n        );\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].next(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeTotalAmount(\\n                unitPrice\\n            );\\n            quantities[i] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeCount(\\n                unitPrice\\n            );\\n        }\\n    }\\n\\n    function getOrder(uint48 _orderId)\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        )\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n\\n        OrderItem memory orderItem;\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            orderItem = Storage.slot().lendOrders[marketOrder.maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n        } else {\\n            orderItem = Storage.slot().borrowOrders[marketOrder.maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n        }\\n\\n        if (orderItem.maker != address(0)) {\\n            return (\\n                marketOrder.side,\\n                marketOrder.unitPrice,\\n                marketOrder.maturity,\\n                orderItem.maker,\\n                orderItem.amount,\\n                orderItem.timestamp\\n            );\\n        }\\n    }\\n\\n    function getTotalAmountFromLendOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds) = getLendOrderIds(_user);\\n\\n        maturity = Storage.slot().userCurrentMaturities[_user];\\n\\n        for (uint256 i = 0; i < activeOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[activeOrderIds[i]];\\n            // Sum future values in the current maturity.\\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\\n            // as an order canceled in the past market.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .lendOrders[Storage.slot().maturity]\\n                .getOrderById(marketOrder.unitPrice, activeOrderIds[i]);\\n            activeAmount += orderItem.amount;\\n        }\\n\\n        for (uint256 i = 0; i < inActiveOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveOrderIds[i]];\\n            if (maturity == 0) {\\n                maturity = marketOrder.maturity;\\n            }\\n            // Sum future values in the maturity of orders\\n            // It will be the future value when the order is created, even if the market is rotated\\n            // and maturity is updated.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .lendOrders[marketOrder.maturity]\\n                .getOrderById(marketOrder.unitPrice, inActiveOrderIds[i]);\\n            inactiveAmount += orderItem.amount;\\n\\n            // Check if the order is filled by Itayose.\\n            // If the order is filled by Itayose, the opening unit price is used instead of the order's one.\\n            uint256 unitPrice = marketOrder.unitPrice;\\n            if (Storage.slot().isPreOrder[inActiveOrderIds[i]] == true) {\\n                uint256 openingUnitPrice = Storage.slot().openingUnitPrices[marketOrder.maturity];\\n                unitPrice = _getUnitPriceForPreLendOrder(openingUnitPrice, unitPrice);\\n            }\\n\\n            inactiveFutureValue += (orderItem.amount * Constants.PRICE_DIGIT).div(unitPrice);\\n        }\\n    }\\n\\n    function getTotalAmountFromBorrowOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds) = getBorrowOrderIds(\\n            _user\\n        );\\n\\n        for (uint256 i = 0; i < activeOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[activeOrderIds[i]];\\n            // Sum future values in the current maturity.\\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\\n            // as an order canceled in the past market.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .borrowOrders[Storage.slot().maturity]\\n                .getOrderById(marketOrder.unitPrice, activeOrderIds[i]);\\n            activeAmount += orderItem.amount;\\n        }\\n\\n        maturity = Storage.slot().userCurrentMaturities[_user];\\n\\n        for (uint256 i = 0; i < inActiveOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveOrderIds[i]];\\n            // Sum future values in the maturity of orders\\n            // It will be the future value when the order is created, even if the market is rotated\\n            // and maturity is updated.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .borrowOrders[marketOrder.maturity]\\n                .getOrderById(marketOrder.unitPrice, inActiveOrderIds[i]);\\n            inactiveAmount += orderItem.amount;\\n\\n            // Check if the order is filled by Itayose.\\n            // If the order is filled by Itayose, the opening unit price is used instead of the order's one.\\n            uint256 unitPrice = marketOrder.unitPrice;\\n            if (Storage.slot().isPreOrder[inActiveOrderIds[i]] == true) {\\n                uint256 openingUnitPrice = Storage.slot().openingUnitPrices[marketOrder.maturity];\\n                unitPrice = _getUnitPriceForPreBorrowOrder(openingUnitPrice, unitPrice);\\n            }\\n\\n            inactiveFutureValue += (orderItem.amount * Constants.PRICE_DIGIT).div(unitPrice);\\n        }\\n    }\\n\\n    function getLendOrderIds(address _user)\\n        public\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        bool isPastMaturity = Storage.slot().userCurrentMaturities[_user] !=\\n            Storage.slot().maturity;\\n\\n        activeOrderIds = new uint48[](\\n            isPastMaturity ? 0 : Storage.slot().activeLendOrderIds[_user].length\\n        );\\n        inActiveOrderIds = new uint48[](Storage.slot().activeLendOrderIds[_user].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().activeLendOrderIds[_user].length; i++) {\\n            uint48 orderId = Storage.slot().activeLendOrderIds[_user][i];\\n            MarketOrder memory marketOrder = Storage.slot().orders[orderId];\\n\\n            if (\\n                !Storage\\n                    .slot()\\n                    .lendOrders[Storage.slot().userCurrentMaturities[_user]]\\n                    .isActiveOrderId(marketOrder.unitPrice, orderId)\\n            ) {\\n                inActiveOrderCount += 1;\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                if (!isPastMaturity) {\\n                    activeOrderCount += 1;\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function getBorrowOrderIds(address _user)\\n        public\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        bool isPastMaturity = Storage.slot().userCurrentMaturities[_user] !=\\n            Storage.slot().maturity;\\n\\n        activeOrderIds = new uint48[](\\n            isPastMaturity ? 0 : Storage.slot().activeBorrowOrderIds[_user].length\\n        );\\n        inActiveOrderIds = new uint48[](Storage.slot().activeBorrowOrderIds[_user].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().activeBorrowOrderIds[_user].length; i++) {\\n            uint48 orderId = Storage.slot().activeBorrowOrderIds[_user][i];\\n            MarketOrder memory marketOrder = Storage.slot().orders[orderId];\\n\\n            if (\\n                !Storage\\n                    .slot()\\n                    .borrowOrders[Storage.slot().userCurrentMaturities[_user]]\\n                    .isActiveOrderId(marketOrder.unitPrice, orderId)\\n            ) {\\n                inActiveOrderCount += 1;\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                activeOrderCount += 1;\\n                if (!isPastMaturity) {\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function estimateFilledAmount(ProtocolTypes.Side _side, uint256 _futureValue)\\n        external\\n        view\\n        returns (uint256 amount)\\n    {\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            return\\n                Storage.slot().lendOrders[Storage.slot().maturity].estimateDroppedAmountFromRight(\\n                    _futureValue\\n                );\\n        } else {\\n            return\\n                Storage.slot().borrowOrders[Storage.slot().maturity].estimateDroppedAmountFromLeft(\\n                    _futureValue\\n                );\\n        }\\n    }\\n\\n    function insertOrder(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) external returns (uint48 orderId) {\\n        orderId = _nextOrderId();\\n        Storage.slot().orders[orderId] = MarketOrder(\\n            _side,\\n            _unitPrice,\\n            Storage.slot().maturity,\\n            block.timestamp\\n        );\\n\\n        if (_side == ProtocolTypes.Side.LEND) {\\n            Storage.slot().lendOrders[Storage.slot().maturity].insertOrder(\\n                _unitPrice,\\n                orderId,\\n                _user,\\n                _amount\\n            );\\n            Storage.slot().activeLendOrderIds[_user].push(orderId);\\n        } else if (_side == ProtocolTypes.Side.BORROW) {\\n            Storage.slot().borrowOrders[Storage.slot().maturity].insertOrder(\\n                _unitPrice,\\n                orderId,\\n                _user,\\n                _amount\\n            );\\n            Storage.slot().activeBorrowOrderIds[_user].push(orderId);\\n        }\\n    }\\n\\n    function dropOrders(\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _futureValue,\\n        uint256 _unitPrice\\n    )\\n        external\\n        returns (\\n            uint256 filledUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledFutureValue,\\n            uint48 partiallyFilledOrderId,\\n            address partiallyFilledMaker,\\n            uint256 partiallyFilledAmount,\\n            uint256 partiallyFilledFutureValue,\\n            uint256 remainingAmount\\n        )\\n    {\\n        PartiallyFilledOrder memory partiallyFilledOrder;\\n\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            (\\n                filledUnitPrice,\\n                filledAmount,\\n                filledFutureValue,\\n                remainingAmount,\\n                partiallyFilledOrder\\n            ) = Storage.slot().lendOrders[Storage.slot().maturity].dropRight(\\n                _amount,\\n                _unitPrice,\\n                _futureValue\\n            );\\n        } else if (_side == ProtocolTypes.Side.LEND) {\\n            (\\n                filledUnitPrice,\\n                filledAmount,\\n                filledFutureValue,\\n                remainingAmount,\\n                partiallyFilledOrder\\n            ) = Storage.slot().borrowOrders[Storage.slot().maturity].dropLeft(\\n                _amount,\\n                _unitPrice,\\n                _futureValue\\n            );\\n        }\\n\\n        partiallyFilledOrderId = partiallyFilledOrder.orderId;\\n        partiallyFilledMaker = partiallyFilledOrder.maker;\\n        partiallyFilledAmount = partiallyFilledOrder.amount;\\n        partiallyFilledFutureValue = partiallyFilledOrder.futureValue;\\n    }\\n\\n    function cleanLendOrders(address _user, uint256 _maturity)\\n        external\\n        returns (\\n            uint48[] memory orderIds,\\n            uint256 activeOrderCount,\\n            uint256 removedFutureValue,\\n            uint256 removedOrderAmount\\n        )\\n    {\\n        (\\n            uint48[] memory activeLendOrderIds,\\n            uint48[] memory inActiveLendOrderIds\\n        ) = getLendOrderIds(_user);\\n\\n        Storage.slot().activeLendOrderIds[_user] = activeLendOrderIds;\\n        activeOrderCount = activeLendOrderIds.length;\\n        uint256 inactiveOrderCount = inActiveLendOrderIds.length;\\n        orderIds = new uint48[](inactiveOrderCount);\\n        OrderStatisticsTreeLib.Tree storage orders = Storage.slot().lendOrders[_maturity];\\n        uint256 openingUnitPrice = Storage.slot().openingUnitPrices[_maturity];\\n\\n        for (uint256 i = 0; i < inactiveOrderCount; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveLendOrderIds[i]];\\n            uint256 unitPrice = Storage.slot().isPreOrder[inActiveLendOrderIds[i]] == true\\n                ? _getUnitPriceForPreLendOrder(openingUnitPrice, marketOrder.unitPrice)\\n                : marketOrder.unitPrice;\\n            OrderItem memory orderItem = orders.getOrderById(unitPrice, inActiveLendOrderIds[i]);\\n            removedFutureValue += orders.getFutureValue(unitPrice, inActiveLendOrderIds[i]);\\n            removedOrderAmount += orderItem.amount;\\n\\n            orderIds[i] = orderItem.orderId;\\n        }\\n    }\\n\\n    function cleanBorrowOrders(address _user, uint256 _maturity)\\n        external\\n        returns (\\n            uint48[] memory orderIds,\\n            uint256 activeOrderCount,\\n            uint256 removedFutureValue,\\n            uint256 removedOrderAmount\\n        )\\n    {\\n        (\\n            uint48[] memory activeBorrowOrderIds,\\n            uint48[] memory inActiveBorrowOrderIds\\n        ) = getBorrowOrderIds(_user);\\n\\n        Storage.slot().activeBorrowOrderIds[_user] = activeBorrowOrderIds;\\n        activeOrderCount = activeBorrowOrderIds.length;\\n        uint256 inactiveOrderCount = inActiveBorrowOrderIds.length;\\n        orderIds = new uint48[](inactiveOrderCount);\\n        OrderStatisticsTreeLib.Tree storage orders = Storage.slot().borrowOrders[_maturity];\\n        uint256 openingUnitPrice = Storage.slot().openingUnitPrices[_maturity];\\n\\n        for (uint256 i = 0; i < inactiveOrderCount; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveBorrowOrderIds[i]];\\n            uint256 unitPrice = Storage.slot().isPreOrder[inActiveBorrowOrderIds[i]] == true\\n                ? _getUnitPriceForPreBorrowOrder(openingUnitPrice, marketOrder.unitPrice)\\n                : marketOrder.unitPrice;\\n            OrderItem memory orderItem = orders.getOrderById(unitPrice, inActiveBorrowOrderIds[i]);\\n            removedFutureValue += orders.getFutureValue(unitPrice, inActiveBorrowOrderIds[i]);\\n\\n            removedOrderAmount += orderItem.amount;\\n\\n            orderIds[i] = orderItem.orderId;\\n        }\\n    }\\n\\n    function removeOrder(address _user, uint48 _orderId)\\n        external\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n        uint256 removedAmount;\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            removedAmount = Storage.slot().lendOrders[Storage.slot().maturity].removeOrder(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n            _removeOrderIdFromOrders(Storage.slot().activeLendOrderIds[_user], _orderId);\\n        } else if (marketOrder.side == ProtocolTypes.Side.BORROW) {\\n            removedAmount = Storage.slot().borrowOrders[Storage.slot().maturity].removeOrder(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n            _removeOrderIdFromOrders(Storage.slot().activeBorrowOrderIds[_user], _orderId);\\n        }\\n\\n        return (marketOrder.side, removedAmount, marketOrder.unitPrice);\\n    }\\n\\n    function getOpeningUnitPrice()\\n        external\\n        view\\n        returns (uint256 openingUnitPrice, uint256 totalOffsetAmount)\\n    {\\n        uint256 lendUnitPrice = getHighestLendingUnitPrice();\\n        uint256 borrowUnitPrice = getLowestBorrowingUnitPrice();\\n        uint256 lendAmount = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\\n            lendUnitPrice\\n        );\\n        uint256 borrowAmount = Storage\\n            .slot()\\n            .borrowOrders[Storage.slot().maturity]\\n            .getNodeTotalAmount(borrowUnitPrice);\\n\\n        OrderStatisticsTreeLib.Tree storage borrowOrders = Storage.slot().borrowOrders[\\n            Storage.slot().maturity\\n        ];\\n        OrderStatisticsTreeLib.Tree storage lendOrders = Storage.slot().lendOrders[\\n            Storage.slot().maturity\\n        ];\\n\\n        // return mid price when no lending and borrowing orders overwrap\\n        if (borrowUnitPrice > lendUnitPrice) {\\n            openingUnitPrice = (lendUnitPrice + borrowUnitPrice).div(2);\\n            return (openingUnitPrice, 0);\\n        }\\n\\n        while (borrowUnitPrice <= lendUnitPrice && borrowUnitPrice > 0 && lendUnitPrice > 0) {\\n            if (lendAmount > borrowAmount) {\\n                openingUnitPrice = lendUnitPrice;\\n                totalOffsetAmount += borrowAmount;\\n                lendAmount -= borrowAmount;\\n                borrowUnitPrice = borrowOrders.next(borrowUnitPrice);\\n                borrowAmount = borrowOrders.getNodeTotalAmount(borrowUnitPrice);\\n            } else if (lendAmount < borrowAmount) {\\n                openingUnitPrice = borrowUnitPrice;\\n                totalOffsetAmount += lendAmount;\\n                borrowAmount -= lendAmount;\\n                lendUnitPrice = lendOrders.prev(lendUnitPrice);\\n                lendAmount = lendOrders.getNodeTotalAmount(lendUnitPrice);\\n            } else {\\n                openingUnitPrice = (lendUnitPrice + borrowUnitPrice).div(2);\\n                totalOffsetAmount += lendAmount;\\n                lendUnitPrice = lendOrders.prev(lendUnitPrice);\\n                borrowUnitPrice = borrowOrders.next(borrowUnitPrice);\\n                lendAmount = lendOrders.getNodeTotalAmount(lendUnitPrice);\\n                borrowAmount = borrowOrders.getNodeTotalAmount(borrowUnitPrice);\\n            }\\n        }\\n    }\\n\\n    function checkCircuitBreakerThreshold(\\n        ProtocolTypes.Side _side,\\n        uint256 _unitPrice,\\n        uint256 _circuitBreakerLimitRange\\n    )\\n        external\\n        returns (\\n            bool isFilled,\\n            uint256 executedUnitPrice,\\n            bool ignoreRemainingAmount\\n        )\\n    {\\n        require(_circuitBreakerLimitRange < Constants.PCT_DIGIT, \\\"CB limit can not be so high\\\");\\n        uint256 cbThresholdUnitPrice = Storage.slot().circuitBreakerThresholdUnitPrices[\\n            block.number\\n        ][_side];\\n        bool isLend = _side == ProtocolTypes.Side.LEND;\\n        bool orderExists;\\n        uint256 bestUnitPrice;\\n\\n        if (isLend) {\\n            bestUnitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].first();\\n            orderExists = bestUnitPrice != 0;\\n\\n            if (orderExists && cbThresholdUnitPrice == 0) {\\n                cbThresholdUnitPrice = _getLendCircuitBreakerThreshold(\\n                    _circuitBreakerLimitRange,\\n                    bestUnitPrice\\n                );\\n                Storage.slot().circuitBreakerThresholdUnitPrices[block.number][\\n                        _side\\n                    ] = cbThresholdUnitPrice;\\n            }\\n        } else {\\n            bestUnitPrice = Storage.slot().lendOrders[Storage.slot().maturity].last();\\n            orderExists = bestUnitPrice != 0;\\n\\n            if (orderExists && cbThresholdUnitPrice == 0) {\\n                cbThresholdUnitPrice = _getBorrowCircuitBreakerThreshold(\\n                    _circuitBreakerLimitRange,\\n                    bestUnitPrice\\n                );\\n\\n                Storage.slot().circuitBreakerThresholdUnitPrices[block.number][\\n                        _side\\n                    ] = cbThresholdUnitPrice;\\n            }\\n        }\\n\\n        if (_unitPrice == 0 && !orderExists) revert(\\\"Order not found\\\");\\n\\n        if (\\n            _unitPrice == 0 ||\\n            (orderExists &&\\n                ((isLend && _unitPrice > cbThresholdUnitPrice) ||\\n                    (!isLend && _unitPrice < cbThresholdUnitPrice)))\\n        ) {\\n            executedUnitPrice = cbThresholdUnitPrice;\\n            ignoreRemainingAmount = true;\\n        } else {\\n            executedUnitPrice = _unitPrice;\\n            ignoreRemainingAmount = false;\\n        }\\n\\n        isFilled = isLend\\n            ? (bestUnitPrice == 0 ? Constants.PRICE_DIGIT : bestUnitPrice) <= executedUnitPrice\\n            : bestUnitPrice >= executedUnitPrice;\\n    }\\n\\n    function _getBorrowCircuitBreakerThreshold(\\n        uint256 _circuitBreakerLimitRange,\\n        uint256 _unitPrice\\n    ) internal pure returns (uint256 cbThresholdUnitPrice) {\\n        // NOTE: Formula of circuit breaker threshold for borrow orders:\\n        // cbThreshold = 100 / (1 + (100 / price - 1) * (1 + range))\\n        uint256 num = _unitPrice * Constants.PRICE_DIGIT * Constants.PCT_DIGIT;\\n        uint256 den = _unitPrice *\\n            Constants.PCT_DIGIT +\\n            (Constants.PRICE_DIGIT - _unitPrice) *\\n            (Constants.PCT_DIGIT + _circuitBreakerLimitRange);\\n        cbThresholdUnitPrice = num.div(den);\\n\\n        if (_unitPrice > cbThresholdUnitPrice + Constants.MAXIMUM_CIRCUIT_BREAKER_THRESHOLD) {\\n            cbThresholdUnitPrice = _unitPrice - Constants.MAXIMUM_CIRCUIT_BREAKER_THRESHOLD;\\n        } else if (\\n            _unitPrice < cbThresholdUnitPrice + Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n        ) {\\n            cbThresholdUnitPrice = _unitPrice > Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n                ? _unitPrice - Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n                : 1;\\n        }\\n    }\\n\\n    function _getLendCircuitBreakerThreshold(uint256 _circuitBreakerLimitRange, uint256 _unitPrice)\\n        internal\\n        pure\\n        returns (uint256 cbThresholdUnitPrice)\\n    {\\n        // NOTE: Formula of circuit breaker threshold for lend orders:\\n        // cbThreshold = 100 / (1 + (100 / price - 1) * (1 - range))\\n        uint256 num = _unitPrice * Constants.PRICE_DIGIT * Constants.PCT_DIGIT;\\n        uint256 den = _unitPrice *\\n            Constants.PCT_DIGIT +\\n            (Constants.PRICE_DIGIT - _unitPrice) *\\n            (Constants.PCT_DIGIT - _circuitBreakerLimitRange);\\n        cbThresholdUnitPrice = num.div(den);\\n\\n        if (cbThresholdUnitPrice > _unitPrice + Constants.MAXIMUM_CIRCUIT_BREAKER_THRESHOLD) {\\n            cbThresholdUnitPrice = _unitPrice + Constants.MAXIMUM_CIRCUIT_BREAKER_THRESHOLD;\\n        } else if (\\n            cbThresholdUnitPrice < _unitPrice + Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n        ) {\\n            cbThresholdUnitPrice = _unitPrice + Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD <=\\n                Constants.PRICE_DIGIT\\n                ? _unitPrice + Constants.MINIMUM_CIRCUIT_BREAKER_THRESHOLD\\n                : Constants.PRICE_DIGIT;\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases and returns id of last order in order book.\\n     * @return The new order id\\n     */\\n    function _nextOrderId() internal returns (uint48) {\\n        Storage.slot().lastOrderId++;\\n        return Storage.slot().lastOrderId;\\n    }\\n\\n    function _removeOrderIdFromOrders(uint48[] storage orders, uint256 orderId) internal {\\n        uint256 lastOrderIndex = orders.length - 1;\\n        for (uint256 i = 0; i <= lastOrderIndex; i++) {\\n            if (orders[i] == orderId) {\\n                if (i != lastOrderIndex) {\\n                    uint48 lastOrderId = orders[lastOrderIndex];\\n                    orders[i] = lastOrderId;\\n                }\\n\\n                orders.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _getUnitPriceForPreLendOrder(uint256 openingUnitPrice, uint256 unitPrice)\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        return openingUnitPrice < unitPrice ? openingUnitPrice : unitPrice;\\n    }\\n\\n    function _getUnitPriceForPreBorrowOrder(uint256 openingUnitPrice, uint256 unitPrice)\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        return openingUnitPrice > unitPrice ? openingUnitPrice : unitPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x153ba93784513de01ed440eda2dbcfaf0fc2e091940f3c2d8cc89a83096b6583\",\"license\":\"MIT\"},\"contracts/protocol/libraries/math/RoundingUint256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoundingUint256 {\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0);\\n\\n        if ((a * 10) / b - (a / b) * 10 < 5) {\\n            return a / b;\\n        } else {\\n            return (a / b) + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc360f39a82f1a9a7454726e3db802407d305b5e525aa8c3236fe49ca6ca534d\",\"license\":\"MIT\"},\"contracts/protocol/storages/LendingMarketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {OrderStatisticsTreeLib} from \\\"../libraries/OrderStatisticsTreeLib.sol\\\";\\n\\nstruct MarketOrder {\\n    ProtocolTypes.Side side;\\n    uint256 unitPrice; // in basis points\\n    uint256 maturity;\\n    uint256 timestamp;\\n}\\n\\nlibrary LendingMarketStorage {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarket\\\");\\n\\n    struct Storage {\\n        bytes32 ccy;\\n        uint48 lastOrderId;\\n        uint256 openingDate;\\n        uint256 maturity;\\n        // Mapping from maturity to opening unit price\\n        mapping(uint256 => uint256) openingUnitPrices;\\n        // Mapping from maturity to boolean if the market is ready or not\\n        mapping(uint256 => bool) isReady;\\n        // Mapping from user to active lend order ids\\n        mapping(address => uint48[]) activeLendOrderIds;\\n        // Mapping from user to active borrow order ids\\n        mapping(address => uint48[]) activeBorrowOrderIds;\\n        // Mapping from user to current maturity\\n        mapping(address => uint256) userCurrentMaturities;\\n        // Mapping from orderId to order\\n        mapping(uint256 => MarketOrder) orders;\\n        // Mapping from orderId to boolean for pre-order or not\\n        mapping(uint256 => bool) isPreOrder;\\n        // Mapping from maturity to lending orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) lendOrders;\\n        // Mapping from maturity to borrowing orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) borrowOrders;\\n        // Mapping from order side to threshold unit price of circuit breaker per block\\n        mapping(uint256 => mapping(ProtocolTypes.Side => uint256)) circuitBreakerThresholdUnitPrices;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b248489383f35251b60bf1d02c644912ae0271699f652343c9afe2f86cd031\",\"license\":\"MIT\"},\"contracts/protocol/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0x7b05f97661e6dfe1142eec9be3dcf86d1eec55ed4fb1dea4a5859f75a0c84c13\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061012b5760003560e01c80638152b173116100b7578063d866d3551161007b578063d866d35514610379578063e2afb0411461038c578063e3d904d814610394578063e7df768c146103c7578063fa6127aa146103da57600080fd5b80638152b173146102a7578063914551f1146102c8578063a117eff5146102e8578063bcc012ad14610353578063ceff498f1461036657600080fd5b8063614152b9116100fe578063614152b9146101fd5780636814ed84146102135780636a2c4274146102365780636c5db843146102535780637ce219aa1461028257600080fd5b806330318f1c1461013057806339ef2b0a1461016c5780634a53967b146101ab5780634bf62d16146101db575b600080fd5b81801561013c57600080fd5b5061015061014b36600461549e565b6103ed565b60405165ffffffffffff90911681526020015b60405180910390f35b81801561017857600080fd5b5061018c6101873660046154e0565b6105f4565b6040805193151584526020840192909252151590820152606001610163565b8180156101b757600080fd5b506101cb6101c6366004615513565b6108df565b6040516101639493929190615580565b6101ee6101e93660046155af565b610bae565b604051610163939291906155f8565b610205610e3e565b604051908152602001610163565b61022661022136600461563b565b610e64565b6040519015158152602001610163565b61023e610e92565b60408051928352602083019190915201610163565b81801561025f57600080fd5b5061027361026e36600461566c565b611088565b604051610163939291906156d7565b6102956102903660046156f6565b611226565b60405161016396959493929190615711565b6102ba6102b536600461563b565b6113b5565b604051610163929190615750565b8180156102d457600080fd5b506101cb6102e3366004615513565b611711565b8180156102f457600080fd5b5061030861030336600461577e565b6119a1565b6040805198895260208901979097529587019490945265ffffffffffff90921660608601526001600160a01b0316608085015260a084015260c083015260e082015261010001610163565b6102ba61036136600461563b565b611aaa565b61022661037436600461563b565b611db9565b6101ee6103873660046155af565b611de7565b610205612021565b6103a76103a236600461563b565b612033565b604080519485526020850193909352918301526060820152608001610163565b6103a76103d536600461563b565b61235a565b6102056103e83660046157b7565b612663565b60006103f76126fe565b905060405180608001604052808660018111156104165761041661569f565b815260200183815260200161042961275d565b6003015481526020014281525061043e61275d565b65ffffffffffff831660009081526009919091016020526040902081518154829060ff1916600183818111156104765761047661569f565b0217905550602082015160018201556040820151600282015560609091015160039091015560008560018111156104af576104af61569f565b1415610558576104f4828286866104c461275d565b600b0160006104d161275d565b60030154815260200190815260200160002061278190949392919063ffffffff16565b6104fc61275d565b6001600160a01b03851660009081526006918201602090815260408220805460018101825590835291206005808304909101805465ffffffffffff808716939094069094026101000a91820292909102199092161790556105ec565b600185600181111561056c5761056c61569f565b14156105ec5761058e8282868661058161275d565b600c0160006104d161275d565b61059661275d565b6001600160a01b03851660009081526007919091016020908152604082208054600181018255908352912060058083049091018054919092066006026101000a65ffffffffffff81810219909216918416021790555b949350505050565b6000806000612710841061064f5760405162461bcd60e51b815260206004820152601b60248201527f4342206c696d69742063616e206e6f7420626520736f2068696768000000000060448201526064015b60405180910390fd5b600061065961275d565b600d01600043815260200190815260200160002060008860018111156106815761068161569f565b60018111156106925761069261569f565b815260208101919091526040016000908120549150808860018111156106ba576106ba61569f565b1490506000808215610773576106f56106d161275d565b600c0160006106de61275d565b60030154815260200190815260200160002061282c565b905080600014159150818015610709575083155b1561076e576107188882612873565b93508361072361275d565b600d01600043815260200190815260200160002060008c600181111561074b5761074b61569f565b600181111561075c5761075c61569f565b81526020810191909152604001600020555b61081b565b6107a261077e61275d565b600b01600061078b61275d565b60030154815260200190815260200160002061293f565b9050806000141591508180156107b6575083155b1561081b576107c58882612981565b9350836107d061275d565b600d01600043815260200190815260200160002060008c60018111156107f8576107f861569f565b60018111156108095761080961569f565b81526020810191909152604001600020555b88158015610827575081155b156108665760405162461bcd60e51b815260206004820152600f60248201526e13dc99195c881b9bdd08199bdd5b99608a1b6044820152606401610646565b8815806108955750818015610895575082801561088257508389115b8061089557508215801561089557508389105b156108a657839550600194506108ae565b889550600094505b826108bc57858110156108d0565b8581156108c957816108cd565b6127105b11155b96505050505093509350939050565b606060008060008060006108f288611aaa565b91509150816108ff61275d565b60070160008a6001600160a01b03166001600160a01b031681526020019081526020016000209080519060200190610938929190615375565b50815181519095508067ffffffffffffffff811115610959576109596157d3565b604051908082528060200260200182016040528015610982578160200160208202803683370190505b509650600061098f61275d565b60008a8152600c919091016020526040812091506109ab61275d565b60008b8152600491909101602052604081205491505b83811015610b9f5760006109d361275d565b60090160008784815181106109ea576109ea6157e9565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff166001811115610a3757610a3761569f565b6001811115610a4857610a4861569f565b8152602001600182015481526020016002820154815260200160038201548152505090506000610a7661275d565b600a016000888581518110610a8d57610a8d6157e9565b60209081029190910181015165ffffffffffff1682528101919091526040016000205460ff161515600114610ac6578160200151610ad4565b610ad4848360200151612a2e565b90506000610b0682898681518110610aee57610aee6157e9565b602002602001015188612a469092919063ffffffff16565b9050610b3682898681518110610b1e57610b1e6157e9565b602002602001015188612b009092919063ffffffff16565b610b40908c615815565b9a508060a001518a610b529190615815565b995080600001518d8581518110610b6b57610b6b6157e9565b602002602001019065ffffffffffff16908165ffffffffffff16815250505050508080610b979061582d565b9150506109c1565b50505050505092959194509250565b60608060608367ffffffffffffffff811115610bcc57610bcc6157d3565b604051908082528060200260200182016040528015610bf5578160200160208202803683370190505b5092508367ffffffffffffffff811115610c1157610c116157d3565b604051908082528060200260200182016040528015610c3a578160200160208202803683370190505b5091508367ffffffffffffffff811115610c5657610c566157d3565b604051908082528060200260200182016040528015610c7f578160200160208202803683370190505b5090506000610c8f61077e61275d565b90508084600081518110610ca557610ca56157e9565b602002602001018181525050610cea81610cbd61275d565b600b016000610cca61275d565b600301548152602001908152602001600020612b3590919063ffffffff16565b83600081518110610cfd57610cfd6157e9565b602002602001018181525050610d4281610d1561275d565b600b016000610d2261275d565b600301548152602001908152602001600020612b4e90919063ffffffff16565b82600081518110610d5557610d556157e9565b602090810291909101015260015b8451811015610e355781610d7657610e35565b610daf82610d8261275d565b600b016000610d8f61275d565b600301548152602001908152602001600020612b6790919063ffffffff16565b915081858281518110610dc457610dc46157e9565b602002602001018181525050610ddc82610cbd61275d565b848281518110610dee57610dee6157e9565b602002602001018181525050610e0682610d1561275d565b838281518110610e1857610e186157e9565b602090810291909101015280610e2d8161582d565b915050610d63565b50509193909250565b600080610e4c6106d161275d565b90508015610e5a5780610e5e565b6127105b91505090565b6000610e6e61275d565b6001600160a01b039092166000908152600792909201602052506040902054151590565b6000806000610e9f612021565b90506000610eab610e3e565b90506000610ebb83610cbd61275d565b90506000610ed883610ecb61275d565b600c016000610cca61275d565b90506000610ee461275d565b600c016000610ef161275d565b60030154815260200190815260200160002090506000610f0f61275d565b600b016000610f1c61275d565b600301548152602001908152602001600020905085851115610f5c57610f4d6002610f478789615815565b90612c61565b98600098509650505050505050565b858511158015610f6c5750600085115b8015610f785750600086115b1561107e5782841115610fcb578597508287610f949190615815565b9650610fa08385615848565b9350610fac8286612ccb565b60008181526001840160205260409020600501549095505b9250610f5c565b82841015611018578497508387610fe29190615815565b9650610fee8484615848565b9250610ffa8187612b67565b60008181526001830160205260409020600501549096509350610f5c565b6110276002610f478789615815565b97506110338488615815565b965061103f8187612b67565b955061104b8286612ccb565b60008781526001830160205260409020600501549095506000868152600184016020526040902060050154909450610fc4565b5050505050509091565b60008060008061109661275d565b65ffffffffffff861660009081526009919091016020526040908190208151608081019092528054829060ff1660018111156110d4576110d461569f565b60018111156110e5576110e561569f565b8152600182015460208201526002820154604082015260039091015460609091015290506000808251600181111561111f5761111f61569f565b14156111a05761116482602001518761113661275d565b600b01600061114361275d565b600301548152602001908152602001600020612dc59092919063ffffffff16565b905061119b61117161275d565b6001600160a01b03891660009081526006919091016020526040902065ffffffffffff8816612dde565b611210565b6001825160018111156111b5576111b561569f565b1415611210576111d98260200151876111cc61275d565b600c01600061114361275d565b90506112106111e661275d565b6001600160a01b03891660009081526007919091016020526040902065ffffffffffff8816612dde565b8151602090920151919450925090509250925092565b600080600080600080600061123961275d565b65ffffffffffff891660009081526009919091016020526040908190208151608081019092528054829060ff1660018111156112775761127761569f565b60018111156112885761128861569f565b8152602001600182015481526020016002820154815260200160038201548152505090506112e46040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b6000825160018111156112f9576112f961569f565b14156113345761132d82602001518a61131061275d565b6040808701516000908152600b9290920160205290209190612a46565b9050611365565b61136282602001518a61134561275d565b6040808701516000908152600c9290920160205290209190612a46565b90505b60608101516001600160a01b0316156113a95781600001518260200151836040015183606001518460a00151856080015197509750975097509750975050506113ac565b50505b91939550919395565b60608060008060006113c561275d565b600301546113d161275d565b6001600160a01b038816600090815260089190910160205260409020541415905080611421576113ff61275d565b6001600160a01b03871660009081526006919091016020526040902054611424565b60005b67ffffffffffffffff81111561143c5761143c6157d3565b604051908082528060200260200182016040528015611465578160200160208202803683370190505b50945061147061275d565b6001600160a01b0387166000908152600691909101602052604090205467ffffffffffffffff8111156114a5576114a56157d3565b6040519080825280602002602001820160405280156114ce578160200160208202803683370190505b50935060005b6114dc61275d565b6001600160a01b0388166000908152600691909101602052604090205481101561170857600061150a61275d565b6001600160a01b038916600090815260069190910160205260409020805483908110611538576115386157e9565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff169050600061156c61275d565b65ffffffffffff831660009081526009919091016020526040908190208151608081019092528054829060ff1660018111156115aa576115aa61569f565b60018111156115bb576115bb61569f565b8152602001600182015481526020016002820154815260200160038201548152505090506116418160200151836115f061275d565b600b0160006115fd61275d565b60080160008f6001600160a01b03166001600160a01b03168152602001908152602001600020548152602001908152602001600020612f349092919063ffffffff16565b61169e57611650600186615815565b9450818761165e8886615848565b8151811061166e5761166e6157e9565b602002602001019065ffffffffffff16908165ffffffffffff16815250508361169957600188510388525b6116f3565b836116eb576116ae600187615815565b955081886116bc8786615848565b815181106116cc576116cc6157e9565b602002602001019065ffffffffffff16908165ffffffffffff16815250505b600187510387525b505080806117009061582d565b9150506114d4565b50505050915091565b60606000806000806000611724886113b5565b915091508161173161275d565b60060160008a6001600160a01b03166001600160a01b03168152602001908152602001600020908051906020019061176a929190615375565b50815181519095508067ffffffffffffffff81111561178b5761178b6157d3565b6040519080825280602002602001820160405280156117b4578160200160208202803683370190505b50965060006117c161275d565b60008a8152600b919091016020526040812091506117dd61275d565b60008b8152600491909101602052604081205491505b83811015610b9f57600061180561275d565b600901600087848151811061181c5761181c6157e9565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff1660018111156118695761186961569f565b600181111561187a5761187a61569f565b81526020016001820154815260200160028201548152602001600382015481525050905060006118a861275d565b600a0160008885815181106118bf576118bf6157e9565b60209081029190910181015165ffffffffffff1682528101919091526040016000205460ff1615156001146118f8578160200151611906565b611906848360200151612f52565b9050600061192082898681518110610aee57610aee6157e9565b905061193882898681518110610b1e57610b1e6157e9565b611942908c615815565b9a508060a001518a6119549190615815565b995080600001518d858151811061196d5761196d6157e9565b602002602001019065ffffffffffff16908165ffffffffffff168152505050505080806119999061582d565b9150506117f3565b6000806000806000806000806119b561542a565b60018d60018111156119c9576119c961569f565b1415611a1d57611a0c8c8b8d6119dd61275d565b600b0160006119ea61275d565b600301548152602001908152602001600020612f61909392919063ffffffff16565b939c50919a50985092509050611a81565b60008d6001811115611a3157611a3161569f565b1415611a8157611a748c8b8d611a4561275d565b600c016000611a5261275d565b60030154815260200190815260200160002061329f909392919063ffffffff16565b939c50919a509850925090505b8051602082015160408301516060909301519a9f999e50979c509a509598509496959350505050565b6060806000806000611aba61275d565b60030154611ac661275d565b6001600160a01b038816600090815260089190910160205260409020541415905080611b1657611af461275d565b6001600160a01b03871660009081526007919091016020526040902054611b19565b60005b67ffffffffffffffff811115611b3157611b316157d3565b604051908082528060200260200182016040528015611b5a578160200160208202803683370190505b509450611b6561275d565b6001600160a01b0387166000908152600791909101602052604090205467ffffffffffffffff811115611b9a57611b9a6157d3565b604051908082528060200260200182016040528015611bc3578160200160208202803683370190505b50935060005b611bd161275d565b6001600160a01b03881660009081526007919091016020526040902054811015611708576000611bff61275d565b6001600160a01b038916600090815260079190910160205260409020805483908110611c2d57611c2d6157e9565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1690506000611c6161275d565b65ffffffffffff831660009081526009919091016020526040908190208151608081019092528054829060ff166001811115611c9f57611c9f61569f565b6001811115611cb057611cb061569f565b815260200160018201548152602001600282015481526020016003820154815250509050611cf2816020015183611ce561275d565b600c0160006115fd61275d565b611d4f57611d01600186615815565b94508187611d0f8886615848565b81518110611d1f57611d1f6157e9565b602002602001019065ffffffffffff16908165ffffffffffff168152505083611d4a57600188510388525b611da4565b611d5a600187615815565b955083611d9c578188611d6d8786615848565b81518110611d7d57611d7d6157e9565b602002602001019065ffffffffffff16908165ffffffffffff16815250505b600187510387525b50508080611db19061582d565b915050611bc9565b6000611dc361275d565b6001600160a01b039092166000908152600692909201602052506040902054151590565b60608060608367ffffffffffffffff811115611e0557611e056157d3565b604051908082528060200260200182016040528015611e2e578160200160208202803683370190505b5092508367ffffffffffffffff811115611e4a57611e4a6157d3565b604051908082528060200260200182016040528015611e73578160200160208202803683370190505b5091508367ffffffffffffffff811115611e8f57611e8f6157d3565b604051908082528060200260200182016040528015611eb8578160200160208202803683370190505b5090506000611ec86106d161275d565b90508084600081518110611ede57611ede6157e9565b602002602001018181525050611ef681610ecb61275d565b83600081518110611f0957611f096157e9565b602002602001018181525050611f2e81611f2161275d565b600c016000610d2261275d565b82600081518110611f4157611f416157e9565b602090810291909101015260015b8451811015610e355781611f6257610e35565b611f9b82611f6e61275d565b600c016000611f7b61275d565b600301548152602001908152602001600020612ccb90919063ffffffff16565b915081858281518110611fb057611fb06157e9565b602002602001018181525050611fc882610ecb61275d565b848281518110611fda57611fda6157e9565b602002602001018181525050611ff282611f2161275d565b838281518110612004576120046157e9565b6020908102919091010152806120198161582d565b915050611f4f565b600061202e61077e61275d565b905090565b60008060008060008061204587611aaa565b9150915060005b825181101561217b57600061205f61275d565b6009016000858481518110612076576120766157e9565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff1660018111156120c3576120c361569f565b60018111156120d4576120d461569f565b81526020016001820154815260200160028201548152602001600382015481525050905060006121528260200151868581518110612114576121146157e9565b602002602001015161212461275d565b600c01600061213161275d565b600301548152602001908152602001600020612a469092919063ffffffff16565b90508060a00151896121649190615815565b9850505080806121739061582d565b91505061204c565b5061218461275d565b6001600160a01b0388166000908152600891909101602052604081205493505b81518110156123505760006121b761275d565b60090160008484815181106121ce576121ce6157e9565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16600181111561221b5761221b61569f565b600181111561222c5761222c61569f565b815260200160018201548152602001600282015481526020016003820154815250509050600061227c826020015185858151811061226c5761226c6157e9565b602002602001015161134561275d565b90508060a001518861228e9190615815565b602083015190985061229e61275d565b600a0160008686815181106122b5576122b56157e9565b60209081029190910181015165ffffffffffff1682528101919091526040016000205460ff161515600114156123185760006122ef61275d565b6004016000856040015181526020019081526020016000205490506123148183612a2e565b9150505b61232e816127108460a00151610f47919061585f565b6123389089615815565b975050505080806123489061582d565b9150506121a4565b5050509193509193565b60008060008060008061236c876113b5565b9150915061237861275d565b6001600160a01b0388166000908152600891909101602052604081205493505b82518110156124a65760006123ab61275d565b60090160008584815181106123c2576123c26157e9565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16600181111561240f5761240f61569f565b60018111156124205761242061569f565b815260200160018201548152602001600282015481526020016003820154815250509050600061247d8260200151868581518110612460576124606157e9565b602002602001015161247061275d565b600b01600061213161275d565b90508060a001518961248f9190615815565b98505050808061249e9061582d565b915050612398565b5060005b81518110156123505760006124bd61275d565b60090160008484815181106124d4576124d46157e9565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff1660018111156125215761252161569f565b60018111156125325761253261569f565b8152600182015460208201526002820154604082015260039091015460609091015290508461256357806040015194505b600061258f826020015185858151811061257f5761257f6157e9565b602002602001015161131061275d565b90508060a00151886125a19190615815565b60208301519098506125b161275d565b600a0160008686815181106125c8576125c86157e9565b60209081029190910181015165ffffffffffff1682528101919091526040016000205460ff1615156001141561262b57600061260261275d565b6004016000856040015181526020019081526020016000205490506126278183612f52565b9150505b612641816127108460a00151610f47919061585f565b61264b9089615815565b9750505050808061265b9061582d565b9150506124aa565b600060018360018111156126795761267961569f565b14156126bf576126b88261268b61275d565b600b01600061269861275d565b6003015481526020019081526020016000206135e190919063ffffffff16565b90506126f8565b6126b8826126cb61275d565b600c0160006126d861275d565b60030154815260200190815260200160002061369590919063ffffffff16565b92915050565b600061270861275d565b600101805465ffffffffffff169060006127218361587e565b91906101000a81548165ffffffffffff021916908365ffffffffffff1602179055505061274c61275d565b6001015465ffffffffffff16919050565b7ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0a90565b600081116127c75760405162461bcd60e51b8152602060048201526013602482015272125b9cdd59999a58da595b9d08185b5bdd5b9d606a1b6044820152606401610646565b61271084111561280e5760405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742076616c756560701b6044820152606401610646565b6128188585613749565b6128258585858585613912565b5050505050565b80548061283b57506000919050565b5b60008181526001808401602052604090912001541561286e57600090815260018083016020526040909120015461283c565b919050565b600080612710612883818561585f565b61288d919061585f565b9050600061289d85612710615848565b6128a985612710615848565b6128b3919061585f565b6128bf6127108661585f565b6128c99190615815565b90506128d58282612c61565b92506128e260c885615815565b8311156128fb576128f460c885615815565b9250612937565b612906600a85615815565b8310156129375761271061291b600a86615815565b111561292957612710612934565b612934600a85615815565b92505b505092915050565b80548061294e57506000919050565b5b60008181526001830160205260409020600201541561286e57600090815260018201602052604090206002015461294f565b600080612710612991818561585f565b61299b919061585f565b905060006129ab85612710615815565b6129b785612710615848565b6129c1919061585f565b6129cd6127108661585f565b6129d79190615815565b90506129e38282612c61565b92506129f060c884615815565b841115612a02576128f460c885615848565b612a0d600a84615815565b84101561293757600a8411612a23576001612934565b612934600a85615848565b6000818311612a3d5781612a3f565b825b9392505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915250600082815260018085016020908152604080842065ffffffffffff80871686526006909101835293819020815160c08101835281548087168252600160301b8104871694820194909452600160601b90930490941690820152908201546001600160a01b031660608201526002820154608082015260039091015460a08201529392505050565b6000828152600184016020908152604080832065ffffffffffff851684526006019091528120600301546105ec908490613992565b6000908152600191909101602052604090206005015490565b6000908152600191909101602052604090206004015490565b600081612bd75760405162461bcd60e51b815260206004820152603860248201527f4f7264657253746174697374696373547265652834303229202d205374617274604482015277696e672076616c75652063616e6e6f74206265207a65726f60401b6064820152608401610646565b600082815260018085016020526040909120015415612c0f5760008281526001808501602052604090912001546126b89084906139a4565b5060008181526001830160205260409020545b8015801590612c435750600081815260018085016020526040909120015482145b156126f8576000818152600184016020526040902054909150612c22565b6000808211612c6f57600080fd5b6005612c7b83856158a4565b612c8690600a61585f565b83612c9286600a61585f565b612c9c91906158a4565b612ca69190615848565b1015612cb6576126b882846158a4565b612cc082846158a4565b6126b8906001615815565b600081612d3b5760405162461bcd60e51b815260206004820152603860248201527f4f7264657253746174697374696373547265652834303129202d205374617274604482015277696e672076616c75652063616e6e6f74206265207a65726f60401b6064820152608401610646565b600082815260018401602052604090206002015415612d735760008281526001840160205260409020600201546126b89084906139e1565b5060008181526001830160205260409020545b8015801590612da75750600081815260018401602052604090206002015482145b156126f8576000818152600184016020526040902054909150612d86565b6000612dd2848484613a19565b9050612a3f8484613c85565b8154600090612def90600190615848565b905060005b818111612f2e5782848281548110612e0e57612e0e6157e9565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff161415612f1c57818114612ed5576000848381548110612e5f57612e5f6157e9565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff16905080858381548110612e9c57612e9c6157e9565b90600052602060002090600591828204019190066006026101000a81548165ffffffffffff021916908365ffffffffffff160217905550505b83805480612ee557612ee56158c6565b60019003818190600052602060002090600591828204019190066006026101000a81549065ffffffffffff02191690559055612f2e565b80612f268161582d565b915050612df4565b50505050565b6000612f41848484613f42565b80156105ec57506105ec848461408b565b6000818310612a3d5781612a3f565b600080600080612f6f61542a565b6000612f7a8a61293f565b90506000808983101580612f8c575089155b612fd35760405162461bcd60e51b8152602060048201526018602482015277496e73756666696369656e74206c696d69742076616c756560401b6044820152606401610646565b6000805b8c831080612fe357508c155b8015612ff657508a881080612ff657508a155b801561300157508415155b801561301557508b8510158061301557508b155b156130ce57600085815260018f016020526040902060050154935061303a8484615815565b92508499506130498585613992565b6130539089615815565b975061305f848a615815565b98508c8311801561306f57508c15155b156130915761307e8d84615848565b915061308a8583613992565b90506130bd565b8a8811801561309f57508a15155b156130bd576130ae8b89615848565b90506130ba8582614144565b91505b6130c78e86612b67565b9450612fd7565b81156130e1576130de828a615848565b98505b80156130f4576130f18189615848565b97505b82156131e757811561311e578994506131178e866131128588615848565b614156565b9550613143565b8015613143578994506131408e866131368885614144565b6131129088615848565b95505b600085815260018f016020526040812060028101919091555485156131e5575b80156131e557858110156131cf57808f600101600088815260200190815260200160002060000154146131cb57808f600101600088815260200190815260200160002060000181905550858f6001016000838152602001908152602001600020600201819055505b8095505b600090815260018f016020526040902054613163565b505b828d11156131fc576131f9838e615848565b96505b60006132078f61282c565b90508a8114801561323057508e6001016000828152602001908152602001600020600501546000145b1561323e5760008f55613285565b8e548b108061325857508e548b1480156132585750838a10155b1561328557858f6000018190555060008f6001016000888152602001908152602001600020600001819055505b61328e8f61448c565b505050505050945094509450945094565b6000806000806132ad61542a565b60006132b88a61282c565b905060008089831115806132ca575089155b6133115760405162461bcd60e51b8152602060048201526018602482015277496e73756666696369656e74206c696d69742076616c756560401b6044820152606401610646565b6000805b8c83108061332157508c155b801561333457508a88108061333457508a155b801561333f57508415155b801561335357508b8511158061335357508b155b1561340c57600085815260018f01602052604090206005015493506133788484615815565b92508499506133878585613992565b6133919089615815565b975061339d848a615815565b98508c831180156133ad57508c15155b156133cf576133bc8d84615848565b91506133c88583613992565b90506133fb565b8a881180156133dd57508a15155b156133fb576133ec8b89615848565b90506133f88582614144565b91505b6134058e86612ccb565b9450613315565b811561341f5761341c828a615848565b98505b80156134325761342f8189615848565b97505b821561353a578115613457578994506134508e866131128588615848565b9550613472565b80156134725789945061346f8e866131368885614144565b95505b60008e60010160008781526020019081526020016000206001018190555060008e600101600087815260200190815260200160002060000154905060008614613538575b8015613538578581111561352257808f6001016000888152602001908152602001600020600001541461351e57808f600101600088815260200190815260200160002060000181905550858f6001016000838152602001908152602001600020600101819055505b8095505b600090815260018f0160205260409020546134b6565b505b828d111561354f5761354c838e615848565b96505b600061355a8f61293f565b90508a8114801561358357508e6001016000828152602001908152602001600020600501546000145b156135915760008f556135d8565b8e548b11806135ab57508e548b1480156135ab5750838a10155b156135d857858f6000018190555060008f6001016000888152602001908152602001600020600001819055505b61328e8f61455b565b6000806135ed8461293f565b905060008092505b838110801561360357508115155b15612937576000828152600186016020526040812060050154906136278483613992565b90506136338184615815565b9250858311156136755760006136498785615848565b6136539083615848565b905061366382610f47838661585f565b61366d9087615815565b955050613682565b61367f8286615815565b94505b61368c8785612b67565b935050506135f5565b6000806136a18461282c565b905060008092505b83811080156136b757508115155b15612937576000828152600186016020526040812060050154906136db8483613992565b90506136e78184615815565b9250858311156137295760006136fd8785615848565b6137079083615848565b905061371782610f47838661585f565b6137219087615815565b955050613736565b6137338286615815565b94505b6137408785612ccb565b935050506136a9565b806137bc5760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303529202d2056616c756560448201527f20746f20696e736572742063616e6e6f74206265207a65726f000000000000006064820152608401610646565b81546000905b801561382057809150808310156137ec5760009081526001808501602052604090912001546137c2565b8083111561380d5760009081526001840160205260409020600201546137c2565b8083141561381b5750505050565b6137c2565b600083815260018501602052604090208454158061386f57506000838152600180870160205260409091200154841480159061386f575060008381526001860160205260409020600201548414155b1561389d576000600482018190556005820181905561389190869086906145ea565b61389d85856000614622565b82815560006001808301829055600283019190915560038201805460ff19169091179055826138ce57838555613908565b828410156138f15760008381526001808701602052604090912001849055613908565b600083815260018601602052604090206002018490555b6128258585614662565b600084815260018601602052604090206003810154610100900465ffffffffffff1661394a5761394586868686866148cd565b61398a565b6000613959878787878761493d565b905061397d87878460030160079054906101000a900465ffffffffffff1684614adc565b613988878783614622565b505b505050505050565b6000612a3f83610f476127108561585f565b60005b6000828152600184016020526040902060020154156139db57600091825260018301602052604090912060020154906139a7565b50919050565b60005b6000828152600180850160205260409091200154156139db5760009182526001808401602052604090922090910154906139e4565b6000613a26848484612f34565b613a425760405162461bcd60e51b8152600401610646906158dc565b50600082815260018085016020908152604080842065ffffffffffff80871680875260068301855295839020835160c08101855281548084168252600160301b8104841696820196909652600160601b909504821693850193909352938201546001600160a01b031660608401526002820154608084015260039182015460a084018190529181015491949093610100909204909116148015613afa5750600382015465ffffffffffff858116600160381b90920416145b15613b1c57613b0b868660006145ea565b613b1786866000614622565b613bee565b600382015465ffffffffffff858116610100909204161415613b7a57613b47868683602001516145ea565b60208082015165ffffffffffff1660009081526006840190915260409020805465ffffffffffff60601b19169055613bee565b600382015465ffffffffffff858116600160381b909204161415613bda57613ba786868360400151614622565b60408082015165ffffffffffff166000908152600684016020522080546bffffffffffff00000000000019169055613bee565b613bee868683604001518460200151614adc565b805165ffffffffffff1660009081526006830160205260408120805471ffffffffffffffffffffffffffffffffffff19168155600180820180546001600160a01b031916905560028201839055600390910182905560048401805491929091613c58908490615848565b909155505060a0810151600583018054600090613c76908490615848565b90915550929695505050505050565b80613cf85760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303729202d2056616c756560448201527f20746f2064656c6574652063616e6e6f74206265207a65726f000000000000006064820152608401610646565b60008181526001830160205260408120600481015490919081906128255760008481526001808701602052604090912001541580613d4757506000848152600186016020526040902060020154155b15613d53575082613d9b565b5060008381526001850160205260409020600201545b600081815260018087016020526040909120015415613d9b576000908152600180860160205260409091200154613d69565b600081815260018087016020526040909120015415613dcf5760008181526001808701602052604090912001549150613de6565b600081815260018601602052604090206002015491505b60008181526001860160205260408082205484835291208190558015613e57576000818152600180880160205260409091200154821415613e3c5760008181526001808801602052604090912001839055613e5b565b60008181526001870160205260409020600201839055613e5b565b8286555b600082815260018701602052604090206003015460ff1615858314613ee557613e85878488614b51565b60008681526001888101602052604080832080830154878552828520938401819055845281842087905560028082015490840181905584529083208690556003908101549286905201805460ff191660ff90921615159190911790559194915b8015613ef557613ef58785614bc8565b50506000818152600180870160205260408220828155908101829055600281018290556003810180546cffffffffffffffffffffffffff1916905560048101829055600501555050505050565b600082815260018085016020908152604080842065ffffffffffff808716808752600683018552838720845160c0810186528154808516808352600160301b8204861698830198909852600160601b900490931694830194909452948301546001600160a01b031660608201526002830154608082015260039092015460a08301528593909214613fd95760009350505050612a3f565b5b604081015165ffffffffffff161561406c5760409081015165ffffffffffff808216600090815260068501602090815290849020845160c08101865281548085168252600160301b8104851693820193909352600160601b9092049092169381019390935260018101546001600160a01b03166060840152600281015460808401526003015460a08301529250613fda565b5060030154610100900465ffffffffffff908116911614949350505050565b60008161409a575060006126f8565b82548214156140ab575060016126f8565b815b60008181526001850160205260409020541561413a57600081815260018086016020526040808320548084529220015482148015906140ff575060008181526001860160205260409020600201548214155b1561410f576000925050506126f8565b8454811415614123576001925050506126f8565b5060009081526001840160205260409020546140ad565b5060009392505050565b6000612a3f612710610f47858561585f565b61415e61542a565b6000838152600185016020526040902060058101548311156141e85760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834313029202d20416d6f756e60448201527f7420746f2066696c6c20697320696e73756666696369656e74000000000000006064820152608401610646565b60038082015465ffffffffffff61010090910481166000818152600685016020908152604091829020825160c08101845281548087168252600160301b8104871693820193909352600160601b9092049094169181019190915260018301546001600160a01b0316606082015260028301546080820152919092015460a082015284915b65ffffffffffff81161580159061428257508215155b156143e45765ffffffffffff8082166000908152600686016020908152604091829020825160c08101845281548086168252600160301b8104861693820193909352600160601b9092049093169181019190915260018201546001600160a01b031660608201526002820154608082015260039091015460a0820181905290925083106143265760a08201516143189084615848565b92508160200151905061426c565b6040518060800160405280836000015165ffffffffffff16815260200183606001516001600160a01b031681526020018481526020016143668986613992565b905260409283015165ffffffffffff908116600090815260068701602090815290859020855160c08101875281548085168252600160301b8104851693820193909352600160601b9092049092169481019490945260018101546001600160a01b03166060850152600281015460808501526003015460a084015294505b815165ffffffffffff16156144045761440288888460000151614fe2565b505b60408501511561448157604080860151600089815260018b016020908152838220895165ffffffffffff168352600601905291822060030180549192909161444d908490615848565b9091555050604080860151600089815260018b0160205291822060050180549192909161447b908490615848565b90915550505b505050509392505050565b805460009081526001820160205260409020600201541580156144c357508054600090815260018083016020526040909120015415155b1561451c5780546000908152600180830160205260408083209091015482529020600201541561450e578054600090815260018083016020526040909120015461450e9082906151c8565b61451c8182600001546152a0565b8054600090815260018201602052604090206003015460ff161561455857805460009081526001820160205260409020600301805460ff191690555b50565b8054600090815260018083016020526040909120015415801561459257508054600090815260018201602052604090206002015415155b1561451c5780546000908152600180830160205260408083206002015483529091200154156145dc57805460009081526001820160205260409020600201546145dc9082906152a0565b61451c8182600001546151c8565b6000918252600190920160205260409020600301805465ffffffffffff9092166101000266ffffffffffff0019909216919091179055565b6000918252600190920160205260409020600301805465ffffffffffff909216600160381b026cffffffffffff0000000000000019909216919091179055565b60005b8254821480159061468f5750600082815260018401602052604080822054825290206003015460ff165b156148ab5760008281526001808501602052604080832054808452818420548452922001548114156147b25760008181526001850160205260408082205482528082206002015480835291206003015490925060ff1615614738576000818152600180860160205260408083206003808201805460ff199081169091558786528386208201805482169055825486529285200180549092169092179055908290525492506148a5565b60008181526001850160205260409020600201548314156147605780925061476084846151c8565b50600082815260018085016020526040808320548084528184206003808201805460ff199081169091558254875293862001805490931690931790915591829052546147ad9085906152a0565b6148a5565b6000818152600180860160205260408083205483528083209091015480835291206003015490925060ff1615614830576000818152600180860160205260408083206003808201805460ff199081169091558786528386208201805482169055825486529285200180549092169092179055908290525492506148a5565b60008181526001808601602052604090912001548314156148585780925061485884846152a0565b50600082815260018085016020526040808320548084528184206003808201805460ff199081169091558254875293862001805490931690931790915591829052546148a59085906151c8565b50614665565b505080546000908152600190910160205260409020600301805460ff19169055565b60008481526001860160205260408120906148eb878787878761493d565b905061490f8787838560030160019054906101000a900465ffffffffffff16614adc565b61491a8787836145ea565b6003820154600160381b900465ffffffffffff1661398857613988878783614622565b6000848152600186016020908152604080832065ffffffffffff8716845260068101909252822060020154156149d05760405162461bcd60e51b815260206004820152603260248201527f4f7264657253746174697374696373547265652834303929202d204f726465726044820152711034b21030b63932b0b23c9032bc34b9ba1760711b6064820152608401610646565b60018160040160008282546149e59190615815565b9250508190555082816005016000828254614a009190615815565b90915550506040805160c08101825265ffffffffffff808816808352600060208085018281528587018381526001600160a01b03808d16606089019081524260808a0190815260a08a018e81529787526006909b019094529790932095518654915193518616600160601b0265ffffffffffff60601b19948716600160301b026bffffffffffffffffffffffff199093169682169690961791909117929092169390931784559151600184018054919095166001600160a01b031990911617909355925160028201559051600390910155905095945050505050565b60009283526001939093016020908152604080842065ffffffffffff938416808652600690910190925280842080546bffffffffffff0000000000001916600160301b9490961693840295909517909455908252919020805465ffffffffffff60601b1916600160601b909202919091179055565b600081815260018401602052604080822054848352912081905580614b7857828455612f2e565b6000818152600180860160205260409091200154821415614bae5760008181526001808601602052604090912001839055612f2e565b600090815260019390930160205250604090912060020155565b60005b82548214801590614bf05750600082815260018401602052604090206003015460ff16155b15614fc3576000828152600180850160205260408083205480845292200154831415614dec5760008181526001850160205260408082206002015480835291206003015490925060ff1615614c94576000828152600180860160205260408083206003908101805460ff19908116909155858552919093209092018054909216179055614c7d84826151c8565b600081815260018501602052604090206002015491505b60008281526001808601602052604080832090910154825290206003015460ff16158015614cdf5750600082815260018501602052604080822060020154825290206003015460ff16155b15614d0c57600082815260018581016020526040909120600301805460ff19169091179055915081614fbd565b600082815260018501602052604080822060020154825290206003015460ff16614d89576000828152600180860160205260408083208083015484529083206003908101805460ff1990811690915593869052018054909216179055614d7284836152a0565b600081815260018501602052604090206002015491505b600081815260018501602052604080822060039081018054868552838520808401805460ff909316151560ff199384161790558254821690925560029091015484529190922090910180549091169055614de384826151c8565b83549250614fbd565b6000818152600180860160205260408083209091015480835291206003015490925060ff1615614e6b576000828152600180860160205260408083206003908101805460ff19908116909155858552919093209092018054909216179055614e5484826152a0565b600081815260018086016020526040909120015491505b600082815260018501602052604080822060020154825290206003015460ff16158015614eb6575060008281526001808601602052604080832090910154825290206003015460ff16155b15614ee357600082815260018581016020526040909120600301805460ff19169091179055915081614fbd565b60008281526001808601602052604080832090910154825290206003015460ff16614f6257600082815260018086016020526040808320600281015484529083206003908101805460ff1990811690915593869052018054909216179055614f4b84836151c8565b600081815260018086016020526040909120015491505b60008181526001808601602052604080832060039081018054878652838620808401805460ff909316151560ff19938416179055825482169092559301548452922090910180549091169055614fb884826152a0565b835492505b50614bcb565b506000908152600190910160205260409020600301805460ff19169055565b6000614fef848484612f34565b61500b5760405162461bcd60e51b8152600401610646906158dc565b50600082815260018085016020908152604080842065ffffffffffff808716865260068201808552838720845160c08101865281548085168252600160301b8104851682890152600160601b9004841681870152818801546001600160a01b031660608201526002820154608082015260039182015460a08201819052828601546101009004909416808a529290965293909620909201549194909390915b8665ffffffffffff16831461510e57600092835260068501602052604090922054600160301b900465ffffffffffff1691816150e58161582d565b6000858152600688016020526040902060030154909350615107915082615815565b90506150aa565b600385015465ffffffffffff888116600160381b90920416141561514957615138898960006145ea565b61514489896000614622565b615187565b615158898986602001516145ea565b60208085015165ffffffffffff1660009081526006870190915260409020805465ffffffffffff60601b191690555b8185600401600082825461519b9190615848565b92505081905550808560050160008282546151b69190615848565b90915550959998505050505050505050565b60008181526001808401602052604080832060028101805491548286529285209093015493859052918390559091801561521057600081815260018601602052604090208490555b60008381526001860160205260409020829055816152305782855561527d565b6000828152600180870160205260409091200154841415615266576000828152600180870160205260409091200183905561527d565b600082815260018601602052604090206002018390555b505060008181526001938401602052604080822090940183905591825291902055565b600081815260018084016020526040808320918201805492548385529184206002015493859052839055909180156152e657600081815260018601602052604090208490555b600083815260018601602052604090208290558161530657828555615353565b600082815260018601602052604090206002015484141561533c5760008281526001860160205260409020600201839055615353565b600082815260018087016020526040909120018390555b5050600081815260019093016020526040808420600201839055918352912055565b8280548282559060005260206000209060040160059004810192821561541a5791602002820160005b838211156153e657835183826101000a81548165ffffffffffff021916908365ffffffffffff160217905550926020019260060160208160050104928301926001030261539e565b80156154185782816101000a81549065ffffffffffff02191690556006016020816005010492830192600103026153e6565b505b50615426929150615463565b5090565b6040518060800160405280600065ffffffffffff16815260200160006001600160a01b0316815260200160008152602001600081525090565b5b808211156154265760008155600101615464565b80356002811061286e57600080fd5b80356001600160a01b038116811461286e57600080fd5b600080600080608085870312156154b457600080fd5b6154bd85615478565b93506154cb60208601615487565b93969395505050506040820135916060013590565b6000806000606084860312156154f557600080fd5b6154fe84615478565b95602085013595506040909401359392505050565b6000806040838503121561552657600080fd5b61552f83615487565b946020939093013593505050565b600081518084526020808501945080840160005b8381101561557557815165ffffffffffff1687529582019590820190600101615551565b509495945050505050565b608081526000615593608083018761553d565b6020830195909552506040810192909252606090910152919050565b6000602082840312156155c157600080fd5b5035919050565b600081518084526020808501945080840160005b83811015615575578151875295820195908201906001016155dc565b60608152600061560b60608301866155c8565b828103602084015261561d81866155c8565b9050828103604084015261563181856155c8565b9695505050505050565b60006020828403121561564d57600080fd5b612a3f82615487565b803565ffffffffffff8116811461286e57600080fd5b6000806040838503121561567f57600080fd5b61568883615487565b915061569660208401615656565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b600281106156d357634e487b7160e01b600052602160045260246000fd5b9052565b606081016156e582866156b5565b602082019390935260400152919050565b60006020828403121561570857600080fd5b612a3f82615656565b60c0810161571f82896156b5565b602082019690965260408101949094526001600160a01b03929092166060840152608083015260a090910152919050565b604081526000615763604083018561553d565b8281036020840152615775818561553d565b95945050505050565b6000806000806080858703121561579457600080fd5b61579d85615478565b966020860135965060408601359560600135945092505050565b600080604083850312156157ca57600080fd5b61552f83615478565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115615828576158286157ff565b500190565b6000600019821415615841576158416157ff565b5060010190565b60008282101561585a5761585a6157ff565b500390565b6000816000190483118215151615615879576158796157ff565b500290565b600065ffffffffffff8083168181141561589a5761589a6157ff565b6001019392505050565b6000826158c157634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603160045260246000fd5b60208082526030908201527f4f7264657253746174697374696373547265652834313029202d204f7264657260408201526f103237b2b9903737ba1032bc34b9ba1760811b60608201526080019056fea2646970667358221220c4b7dc2216c207fd1cbf073dd92faa950b9361977998254e7000faaee1c2b88e64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}