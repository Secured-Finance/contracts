{
  "address": "0x06af1A7b49daBc09336C3c9c0442Da640da7F84A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "ProtocolTypes.Side"
        },
        {
          "internalType": "uint256",
          "name": "_futureValue",
          "type": "uint256"
        }
      ],
      "name": "estimateFilledAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getActiveBorrowOrderIds",
      "outputs": [
        {
          "internalType": "uint48[]",
          "name": "activeOrderIds",
          "type": "uint48[]"
        },
        {
          "internalType": "uint48[]",
          "name": "inActiveOrderIds",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getActiveLendOrderIds",
      "outputs": [
        {
          "internalType": "uint48[]",
          "name": "activeOrderIds",
          "type": "uint48[]"
        },
        {
          "internalType": "uint48[]",
          "name": "inActiveOrderIds",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getBorrowOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHighestLendingUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getLendOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "unitPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLowestBorrowingUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOpeningUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "openingUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalOffsetAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint48",
          "name": "_orderId",
          "type": "uint48"
        }
      ],
      "name": "getOrder",
      "outputs": [
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "side",
          "type": "ProtocolTypes.Side"
        },
        {
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalAmountFromBorrowOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalAmountFromLendOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactiveFutureValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x48b9a6e851e0044968664688368cf644517d8b9dd7a48d29d8cc24b6532badac",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x06af1A7b49daBc09336C3c9c0442Da640da7F84A",
    "transactionIndex": 26,
    "gasUsed": "4552182",
    "logsBloom": "0x
    "blockHash": "0xfae70a66f17469e956dcb56ce73b7d8cfd004655f0526d07241c6e7ce471b1ac",
    "transactionHash": "0x48b9a6e851e0044968664688368cf644517d8b9dd7a48d29d8cc24b6532badac",
    "logs": [],
    "blockNumber": 8621628,
    "cumulativeGasUsed": "9178871",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "be7ae38419e251d9723e8528f3b4905f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"ProtocolTypes.Side\"},{\"internalType\":\"uint256\",\"name\":\"_futureValue\",\"type\":\"uint256\"}],\"name\":\"estimateFilledAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getActiveBorrowOrderIds\",\"outputs\":[{\"internalType\":\"uint48[]\",\"name\":\"activeOrderIds\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48[]\",\"name\":\"inActiveOrderIds\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getActiveLendOrderIds\",\"outputs\":[{\"internalType\":\"uint48[]\",\"name\":\"activeOrderIds\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48[]\",\"name\":\"inActiveOrderIds\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getBorrowOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHighestLendingUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getLendOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLowestBorrowingUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpeningUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"openingUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOffsetAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_orderId\",\"type\":\"uint48\"}],\"name\":\"getOrder\",\"outputs\":[{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"ProtocolTypes.Side\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalAmountFromBorrowOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalAmountFromLendOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactiveFutureValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/logics/OrderBookLogic.sol\":\"OrderBookLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport {MarketOrder} from \\\"../storages/LendingMarketStorage.sol\\\";\\n\\ninterface ILendingMarket {\\n    event OrderCanceled(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event OrderMade(\\n        uint48 orderId,\\n        uint48 originalOrderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event OrdersTaken(\\n        address indexed taker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 filledAmount,\\n        uint256 unitPrice,\\n        uint256 filledFutureValue\\n    );\\n\\n    event OrdersCleaned(\\n        uint48[] orderIds,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 maturity\\n    );\\n\\n    event MarketOpened(uint256 maturity, uint256 prevMaturity);\\n\\n    event ItayoseExecuted(bytes32 ccy, uint256 maturity, uint256 openingPrice);\\n\\n    struct Market {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        uint256 openingDate;\\n        uint256 borrowUnitPrice;\\n        uint256 lendUnitPrice;\\n        uint256 midUnitPrice;\\n    }\\n\\n    function getMarket() external view returns (Market memory);\\n\\n    function getBorrowUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getLendUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getMidUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getBorrowOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturity() external view returns (uint256);\\n\\n    function getCurrency() external view returns (bytes32);\\n\\n    function getOpeningDate() external view returns (uint256);\\n\\n    function isItayosePeriod() external view returns (bool);\\n\\n    function getOpeningUnitPrice() external view returns (uint256);\\n\\n    function isMatured() external view returns (bool);\\n\\n    function isOpened() external view returns (bool);\\n\\n    function isPreOrderPeriod() external returns (bool);\\n\\n    function getOrder(uint48 _orderId)\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        );\\n\\n    function getTotalAmountFromLendOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getTotalAmountFromBorrowOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getActiveLendOrderIds(address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds);\\n\\n    function getActiveBorrowOrderIds(address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds);\\n\\n    function estimateFilledAmount(ProtocolTypes.Side _side, uint256 _futureValue)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function openMarket(uint256 maturity, uint256 openingDate) external returns (uint256);\\n\\n    function cancelOrder(address user, uint48 orderId)\\n        external\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        );\\n\\n    function createPreOrder(\\n        ProtocolTypes.Side side,\\n        address user,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external;\\n\\n    function executeItayoseCall() external;\\n\\n    function cleanOrders(address _user)\\n        external\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        );\\n\\n    function createOrder(\\n        ProtocolTypes.Side side,\\n        address account,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        bool ignoreRemainingAmount\\n    ) external returns (uint256 executedRate, uint256 remainingAmount);\\n\\n    function pauseMarket() external;\\n\\n    function unpauseMarket() external;\\n}\\n\",\"keccak256\":\"0x92deb0356b0bcba9757afd2e2a54c6fd86d27b7a09831052d34e54e6923291f1\",\"license\":\"MIT\"},\"contracts/libraries/OrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// types\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {RoundingUint256} from \\\"./math/RoundingUint256.sol\\\";\\n\\nstruct RemainingOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 unitPrice;\\n}\\n\\nstruct OrderItem {\\n    uint48 orderId;\\n    uint48 next;\\n    uint48 prev;\\n    address maker;\\n    uint256 timestamp;\\n    uint256 amount;\\n}\\n\\n/**\\n * @notice OrderStatisticsTreeLib is a Red-Black Tree binary search library\\n * based on the following library that is extended to manage order data.\\n *\\n * https://github.com/rob-Hitchens/OrderStatisticsTree\\n *\\n */\\nlibrary OrderStatisticsTreeLib {\\n    using RoundingUint256 for uint256;\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint48 head;\\n        uint48 tail;\\n        uint256 orderCounter;\\n        uint256 orderTotalAmount;\\n        mapping(uint256 => OrderItem) orders;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].right != EMPTY) {\\n            _value = self.nodes[_value].right;\\n        }\\n    }\\n\\n    function next(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(401) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].right != EMPTY) {\\n            _cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(402) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].left != EMPTY) {\\n            _cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint256 value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        // if (self.nodes[value].parent != EMPTY) return true;\\n        uint256 cursor = value;\\n        while (self.nodes[cursor].parent != EMPTY) {\\n            uint256 parent = self.nodes[cursor].parent;\\n            if (self.nodes[parent].left != cursor && self.nodes[parent].right != cursor) {\\n                return false;\\n            }\\n            if (parent == self.root) {\\n                return true;\\n            }\\n            cursor = self.nodes[cursor].parent;\\n        }\\n        return false;\\n    }\\n\\n    function isActiveOrderId(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        return orderIdExists(self, value, orderId) && exists(self, value);\\n    }\\n\\n    function getNode(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n        return (\\n            gn.parent,\\n            gn.left,\\n            gn.right,\\n            gn.red,\\n            gn.head,\\n            gn.tail,\\n            gn.orderCounter,\\n            gn.orderTotalAmount\\n        );\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function getNodeTotalAmount(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint256 totalAmount)\\n    {\\n        return self.nodes[value].orderTotalAmount;\\n    }\\n\\n    function getNodeOrderIds(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint48[] memory orderIds)\\n    {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[gn.head];\\n        orderIds = new uint48[](gn.orderCounter);\\n\\n        for (uint256 i = 0; i < gn.orderCounter; i++) {\\n            orderIds[i] = order.orderId;\\n            order = gn.orders[order.next];\\n        }\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256 _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(405) - Value to insert cannot be zero\\\");\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                return;\\n            }\\n        }\\n\\n        Node storage nValue = self.nodes[value];\\n        // Update order info as a new one if there is already an old node\\n        if (\\n            self.root == EMPTY ||\\n            (self.nodes[cursor].left != value && self.nodes[cursor].right != value)\\n        ) {\\n            nValue.orderCounter = 0;\\n            nValue.orderTotalAmount = 0;\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        }\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(407) - Value to delete cannot be zero\\\");\\n        Node storage nValue = self.nodes[value];\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint256 a,\\n        uint256 b\\n    ) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    function estimateDroppedAmountFromLeft(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = first(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV).div(\\n                    cursorNodeAmountInFV\\n                );\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n    }\\n\\n    function estimateDroppedAmountFromRight(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = last(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV).div(\\n                    cursorNodeAmountInFV\\n                );\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n    }\\n\\n    function dropLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            RemainingOrder memory remainingOrder\\n        )\\n    {\\n        require(amount != EMPTY, \\\"OrderStatisticsTree(408) - Amount to drop cannot be zero\\\");\\n        uint256 value;\\n        uint256 cursor = first(self);\\n        uint256 lastNode = last(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor <= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (\\n            totalAmount < amount && cursor != EMPTY && (limitValue == 0 || cursor <= limitValue)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            uint256 filledAmount = cursorNodeAmount -\\n                (totalAmount > amount ? totalAmount - amount : 0);\\n            filledFutureValue += _calculateFutureValue(cursor, filledAmount);\\n\\n            cursor = next(self, cursor);\\n        }\\n\\n        if (totalAmount >= amount || value == limitValue) {\\n            if (totalAmount > amount) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                uint256 filledNodeAmount = cursorNodeAmount - (totalAmount - amount);\\n                remainingOrder = fillOrders(self, cursor, filledNodeAmount);\\n            }\\n\\n            self.nodes[cursor].left = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            while (parent != EMPTY) {\\n                if (parent > cursor) {\\n                    // Relink the nodes\\n                    if (self.nodes[cursor].parent != parent) {\\n                        self.nodes[cursor].parent = parent;\\n                        self.nodes[parent].left = cursor;\\n                    }\\n\\n                    cursor = parent;\\n                }\\n\\n                parent = self.nodes[parent].parent;\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        if (lastNode == value && self.nodes[lastNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value > self.root || (value == self.root && amount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        if (self.nodes[self.root].left == 0 && self.nodes[self.root].right != 0) {\\n            if (self.nodes[self.nodes[self.root].right].left != 0) {\\n                rotateRight(self, self.nodes[self.root].right);\\n            }\\n            rotateLeft(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function dropRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            RemainingOrder memory remainingOrder\\n        )\\n    {\\n        require(amount != EMPTY, \\\"OrderStatisticsTree(408) - Amount to drop cannot be zero\\\");\\n        uint256 value;\\n        uint256 cursor = last(self);\\n        uint256 firstNode = first(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor >= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (\\n            totalAmount < amount && cursor != EMPTY && (limitValue == 0 || cursor >= limitValue)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            uint256 filledAmount = cursorNodeAmount -\\n                (totalAmount > amount ? totalAmount - amount : 0);\\n            filledFutureValue += _calculateFutureValue(cursor, filledAmount);\\n\\n            cursor = prev(self, cursor);\\n        }\\n\\n        if (totalAmount >= amount || value == limitValue) {\\n            if (totalAmount > amount) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                uint256 filledNodeAmount = cursorNodeAmount - (totalAmount - amount);\\n                remainingOrder = fillOrders(self, cursor, filledNodeAmount);\\n            }\\n\\n            self.nodes[cursor].right = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            while (parent != EMPTY) {\\n                if (parent < cursor) {\\n                    // Relink the nodes\\n                    if (self.nodes[cursor].parent != parent) {\\n                        self.nodes[cursor].parent = parent;\\n                        self.nodes[parent].right = cursor;\\n                    }\\n\\n                    cursor = parent;\\n                }\\n\\n                parent = self.nodes[parent].parent;\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        if (firstNode == value && self.nodes[firstNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value < self.root || (value == self.root && amount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        if (self.nodes[self.root].right == 0 && self.nodes[self.root].left != 0) {\\n            if (self.nodes[self.nodes[self.root].left].right != 0) {\\n                rotateLeft(self, self.nodes[self.root].left);\\n            }\\n            rotateRight(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function getFutureValue(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (uint256) {\\n        return _calculateFutureValue(value, self.nodes[value].orders[orderId].amount);\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (OrderItem memory) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orders[orderId];\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function orderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        uint48 cursor = orderId;\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[cursor];\\n\\n        if (order.orderId != cursor) {\\n            return false;\\n        }\\n\\n        while (order.prev != EMPTY) {\\n            cursor = order.prev;\\n            order = gn.orders[cursor];\\n        }\\n\\n        return cursor == gn.head;\\n    }\\n\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount,\\n        bool isInterruption\\n    ) internal {\\n        require(amount > 0, \\\"Insufficient amount\\\");\\n        require(value <= ProtocolTypes.PRICE_DIGIT, \\\"Insufficient value\\\");\\n        insert(self, value);\\n\\n        if (isInterruption) {\\n            addHead(self, value, orderId, user, amount);\\n        } else {\\n            addTail(self, value, orderId, user, amount);\\n        }\\n    }\\n\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        amount = _removeOrder(self, value, orderId);\\n        remove(self, value);\\n    }\\n\\n    /**\\n     * @dev Reduces order amount once market order taken.\\n     */\\n    function fillOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount\\n    ) internal returns (RemainingOrder memory remainingOrder) {\\n        Node storage gn = self.nodes[value];\\n\\n        require(\\n            gn.orderTotalAmount >= _amount,\\n            \\\"OrderStatisticsTree(410) - Amount to fill is insufficient\\\"\\n        );\\n\\n        uint256 remainingAmount = _amount;\\n        uint256 filledCount = 0;\\n        OrderItem memory currentOrder = gn.orders[gn.head];\\n        uint48 orderId = gn.head;\\n\\n        while (orderId != 0 && remainingAmount != 0) {\\n            currentOrder = gn.orders[orderId];\\n\\n            if (currentOrder.amount <= remainingAmount) {\\n                remainingAmount -= currentOrder.amount;\\n                orderId = currentOrder.next;\\n            } else {\\n                remainingOrder = RemainingOrder(\\n                    currentOrder.orderId,\\n                    currentOrder.maker,\\n                    currentOrder.amount - remainingAmount,\\n                    value\\n                );\\n                remainingAmount = 0;\\n            }\\n\\n            filledCount++;\\n        }\\n\\n        _dropOrders(self, value, currentOrder.orderId);\\n\\n        if (remainingOrder.amount > 0) {\\n            // NOTE: This order that the filled partially was dropped from a node, and the unfilled amount\\n            // will be inserted newly as a new orders.\\n            // However, that filled order amount is used when future value is calculated from inactive order.\\n            // For that calculation, this order amount needs to be updated by an actual filled amount at this point.\\n            OrderItem storage order = self.nodes[value].orders[currentOrder.orderId];\\n            order.amount -= remainingOrder.amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n        uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n        _link(self, _value, orderId, gn.head);\\n        _setHead(self, _value, orderId);\\n        if (gn.tail == 0) _setTail(self, _value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, _value, _orderId, _user, _amount);\\n        } else {\\n            uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n            _link(self, _value, gn.tail, orderId);\\n            _setTail(self, _value, orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint48) {\\n        Node storage gn = self.nodes[value];\\n        require(\\n            gn.orders[orderId].timestamp == 0,\\n            \\\"OrderStatisticsTree(409) - Order id already exist.\\\"\\n        );\\n\\n        gn.orderCounter += 1;\\n        gn.orderTotalAmount += amount;\\n        OrderItem memory order = OrderItem(orderId, 0, 0, user, block.timestamp, amount);\\n        gn.orders[orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the list.\\n     */\\n    function _removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n        gn.orderTotalAmount -= order.amount;\\n    }\\n\\n    /**\\n     * @dev Drop the OrderItems older than or equal `orderId` from the list\\n     */\\n    function _dropOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n        uint256 cursor = gn.head;\\n        uint256 removedCount = 1;\\n        uint256 removedAmount = gn.orders[cursor].amount;\\n\\n        while (cursor != orderId) {\\n            cursor = gn.orders[cursor].next;\\n            removedCount++;\\n            removedAmount += gn.orders[cursor].amount;\\n        }\\n\\n        if (gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        }\\n\\n        gn.orderCounter -= removedCount;\\n        gn.orderTotalAmount -= removedAmount;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 _prevId,\\n        uint48 _nextId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[_prevId].next = _nextId;\\n        gn.orders[_nextId].prev = _prevId;\\n    }\\n\\n    function _calculateFutureValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * ProtocolTypes.PRICE_DIGIT).div(unitPrice);\\n    }\\n}\\n\",\"keccak256\":\"0x7a08cb007884ddb53710d72865ace9b6c97325cdebaabc30a56e555d7bdd4b30\",\"license\":\"MIT\"},\"contracts/libraries/logics/OrderBookLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {OrderStatisticsTreeLib, RemainingOrder, OrderItem} from \\\"../OrderStatisticsTreeLib.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\nimport {ILendingMarket} from \\\"../../interfaces/ILendingMarket.sol\\\";\\nimport {ProtocolTypes} from \\\"../../types/ProtocolTypes.sol\\\";\\nimport {LendingMarketStorage as Storage, MarketOrder} from \\\"../../storages/LendingMarketStorage.sol\\\";\\n\\nlibrary OrderBookLogic {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n    using RoundingUint256 for uint256;\\n\\n    function getHighestLendingUnitPrice() public view returns (uint256) {\\n        return Storage.slot().lendOrders[Storage.slot().maturity].last();\\n    }\\n\\n    function getLowestBorrowingUnitPrice() public view returns (uint256) {\\n        uint256 unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].first();\\n        return unitPrice == 0 ? ProtocolTypes.PRICE_DIGIT : unitPrice;\\n    }\\n\\n    function getLendOrderBook(uint256 _limit)\\n        public\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = Storage.slot().lendOrders[Storage.slot().maturity].last();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\\n            unitPrice\\n        );\\n        quantities[0] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeCount(unitPrice);\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = Storage.slot().lendOrders[Storage.slot().maturity].prev(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\\n                unitPrice\\n            );\\n            quantities[i] = Storage.slot().lendOrders[Storage.slot().maturity].getNodeCount(\\n                unitPrice\\n            );\\n        }\\n    }\\n\\n    function getBorrowOrderBook(uint256 _limit)\\n        public\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].first();\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeTotalAmount(\\n            unitPrice\\n        );\\n        quantities[0] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeCount(\\n            unitPrice\\n        );\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = Storage.slot().borrowOrders[Storage.slot().maturity].next(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeTotalAmount(\\n                unitPrice\\n            );\\n            quantities[i] = Storage.slot().borrowOrders[Storage.slot().maturity].getNodeCount(\\n                unitPrice\\n            );\\n        }\\n    }\\n\\n    function getOrder(uint48 _orderId)\\n        public\\n        view\\n        returns (\\n            ProtocolTypes.Side side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        )\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n\\n        OrderItem memory orderItem;\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            orderItem = Storage.slot().lendOrders[marketOrder.maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n        } else {\\n            orderItem = Storage.slot().borrowOrders[marketOrder.maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n        }\\n\\n        if (orderItem.maker != address(0)) {\\n            return (\\n                marketOrder.side,\\n                marketOrder.unitPrice,\\n                marketOrder.maturity,\\n                orderItem.maker,\\n                orderItem.amount,\\n                orderItem.timestamp\\n            );\\n        }\\n    }\\n\\n    function getTotalAmountFromLendOrders(address _user)\\n        public\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds) = getActiveLendOrderIds(\\n            _user\\n        );\\n\\n        maturity = Storage.slot().userCurrentMaturities[_user];\\n\\n        for (uint256 i = 0; i < activeOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[activeOrderIds[i]];\\n            // Sum future values in the current maturity.\\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\\n            // as an order canceled in the past market.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .lendOrders[Storage.slot().maturity]\\n                .getOrderById(marketOrder.unitPrice, activeOrderIds[i]);\\n            activeAmount += orderItem.amount;\\n        }\\n\\n        for (uint256 i = 0; i < inActiveOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveOrderIds[i]];\\n            if (maturity == 0) {\\n                maturity = marketOrder.maturity;\\n            }\\n            // Sum future values in the maturity of orders\\n            // It will be the future value when the order is created, even if the market is rotated\\n            // and maturity is updated.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .lendOrders[marketOrder.maturity]\\n                .getOrderById(marketOrder.unitPrice, inActiveOrderIds[i]);\\n            inactiveAmount += orderItem.amount;\\n\\n            // Check if the order is filled by Itayose.\\n            // If the order is filled by Itayose, the opening unit price is used instead of the order's one.\\n            uint256 unitPrice = marketOrder.unitPrice;\\n            if (Storage.slot().isPreOrder[inActiveOrderIds[i]] == true) {\\n                uint256 openingUnitPrice = Storage.slot().openingUnitPrices[marketOrder.maturity];\\n                if (openingUnitPrice < unitPrice) {\\n                    unitPrice = openingUnitPrice;\\n                }\\n            }\\n\\n            inactiveFutureValue += (orderItem.amount * ProtocolTypes.PRICE_DIGIT).div(unitPrice);\\n        }\\n    }\\n\\n    function getTotalAmountFromBorrowOrders(address _user)\\n        public\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        )\\n    {\\n        (\\n            uint48[] memory activeOrderIds,\\n            uint48[] memory inActiveOrderIds\\n        ) = getActiveBorrowOrderIds(_user);\\n\\n        for (uint256 i = 0; i < activeOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[activeOrderIds[i]];\\n            // Sum future values in the current maturity.\\n            // If the market is rotated and maturity is updated, it will be 0 by treating it\\n            // as an order canceled in the past market.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .borrowOrders[Storage.slot().maturity]\\n                .getOrderById(marketOrder.unitPrice, activeOrderIds[i]);\\n            activeAmount += orderItem.amount;\\n        }\\n\\n        maturity = Storage.slot().userCurrentMaturities[_user];\\n\\n        for (uint256 i = 0; i < inActiveOrderIds.length; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveOrderIds[i]];\\n            // Sum future values in the maturity of orders\\n            // It will be the future value when the order is created, even if the market is rotated\\n            // and maturity is updated.\\n            OrderItem memory orderItem = Storage\\n                .slot()\\n                .borrowOrders[marketOrder.maturity]\\n                .getOrderById(marketOrder.unitPrice, inActiveOrderIds[i]);\\n            inactiveAmount += orderItem.amount;\\n\\n            // Check if the order is filled by Itayose.\\n            // If the order is filled by Itayose, the opening unit price is used instead of the order's one.\\n            uint256 unitPrice = marketOrder.unitPrice;\\n            if (Storage.slot().isPreOrder[inActiveOrderIds[i]] == true) {\\n                uint256 openingUnitPrice = Storage.slot().openingUnitPrices[marketOrder.maturity];\\n                if (openingUnitPrice > unitPrice) {\\n                    unitPrice = openingUnitPrice;\\n                }\\n            }\\n\\n            inactiveFutureValue += (orderItem.amount * ProtocolTypes.PRICE_DIGIT).div(unitPrice);\\n        }\\n    }\\n\\n    function getActiveLendOrderIds(address _user)\\n        public\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        bool isPastMaturity = Storage.slot().userCurrentMaturities[_user] !=\\n            Storage.slot().maturity;\\n\\n        activeOrderIds = new uint48[](\\n            isPastMaturity ? 0 : Storage.slot().activeLendOrderIds[_user].length\\n        );\\n        inActiveOrderIds = new uint48[](Storage.slot().activeLendOrderIds[_user].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().activeLendOrderIds[_user].length; i++) {\\n            uint48 orderId = Storage.slot().activeLendOrderIds[_user][i];\\n            MarketOrder memory marketOrder = Storage.slot().orders[orderId];\\n\\n            if (\\n                !Storage\\n                    .slot()\\n                    .lendOrders[Storage.slot().userCurrentMaturities[_user]]\\n                    .isActiveOrderId(marketOrder.unitPrice, orderId)\\n            ) {\\n                inActiveOrderCount += 1;\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                if (!isPastMaturity) {\\n                    activeOrderCount += 1;\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function getActiveBorrowOrderIds(address _user)\\n        public\\n        view\\n        returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds)\\n    {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        bool isPastMaturity = Storage.slot().userCurrentMaturities[_user] !=\\n            Storage.slot().maturity;\\n\\n        activeOrderIds = new uint48[](\\n            isPastMaturity ? 0 : Storage.slot().activeBorrowOrderIds[_user].length\\n        );\\n        inActiveOrderIds = new uint48[](Storage.slot().activeBorrowOrderIds[_user].length);\\n\\n        for (uint256 i = 0; i < Storage.slot().activeBorrowOrderIds[_user].length; i++) {\\n            uint48 orderId = Storage.slot().activeBorrowOrderIds[_user][i];\\n            MarketOrder memory marketOrder = Storage.slot().orders[orderId];\\n\\n            if (\\n                !Storage\\n                    .slot()\\n                    .borrowOrders[Storage.slot().userCurrentMaturities[_user]]\\n                    .isActiveOrderId(marketOrder.unitPrice, orderId)\\n            ) {\\n                inActiveOrderCount += 1;\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                activeOrderCount += 1;\\n                if (!isPastMaturity) {\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function estimateFilledAmount(ProtocolTypes.Side _side, uint256 _futureValue)\\n        public\\n        view\\n        returns (uint256 amount)\\n    {\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            return\\n                Storage.slot().lendOrders[Storage.slot().maturity].estimateDroppedAmountFromRight(\\n                    _futureValue\\n                );\\n        } else {\\n            return\\n                Storage.slot().borrowOrders[Storage.slot().maturity].estimateDroppedAmountFromLeft(\\n                    _futureValue\\n                );\\n        }\\n    }\\n\\n    function insertOrder(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice,\\n        bool _isInterruption\\n    ) public returns (uint48 orderId) {\\n        orderId = _nextOrderId();\\n        Storage.slot().orders[orderId] = MarketOrder(\\n            _side,\\n            _unitPrice,\\n            Storage.slot().maturity,\\n            block.timestamp\\n        );\\n\\n        if (_side == ProtocolTypes.Side.LEND) {\\n            Storage.slot().lendOrders[Storage.slot().maturity].insertOrder(\\n                _unitPrice,\\n                orderId,\\n                _user,\\n                _amount,\\n                _isInterruption\\n            );\\n            Storage.slot().activeLendOrderIds[_user].push(orderId);\\n        } else if (_side == ProtocolTypes.Side.BORROW) {\\n            Storage.slot().borrowOrders[Storage.slot().maturity].insertOrder(\\n                _unitPrice,\\n                orderId,\\n                _user,\\n                _amount,\\n                _isInterruption\\n            );\\n            Storage.slot().activeBorrowOrderIds[_user].push(orderId);\\n        }\\n    }\\n\\n    function dropOrders(\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    )\\n        public\\n        returns (\\n            RemainingOrder memory remainingOrder,\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount\\n        )\\n    {\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            (filledFutureValue, remainingAmount, remainingOrder) = Storage\\n                .slot()\\n                .lendOrders[Storage.slot().maturity]\\n                .dropRight(_amount, _unitPrice);\\n        } else if (_side == ProtocolTypes.Side.LEND) {\\n            (filledFutureValue, remainingAmount, remainingOrder) = Storage\\n                .slot()\\n                .borrowOrders[Storage.slot().maturity]\\n                .dropLeft(_amount, _unitPrice);\\n        }\\n    }\\n\\n    function cleanLendOrders(address _user, uint256 _maturity)\\n        public\\n        returns (\\n            uint48[] memory orderIds,\\n            uint256 activeOrderCount,\\n            uint256 removedFutureValue,\\n            uint256 removedOrderAmount\\n        )\\n    {\\n        (\\n            uint48[] memory activeLendOrderIds,\\n            uint48[] memory inActiveLendOrderIds\\n        ) = getActiveLendOrderIds(_user);\\n\\n        Storage.slot().activeLendOrderIds[_user] = activeLendOrderIds;\\n        activeOrderCount = activeLendOrderIds.length;\\n        uint256 inactiveOrderCount = inActiveLendOrderIds.length;\\n        orderIds = new uint48[](inactiveOrderCount);\\n\\n        for (uint256 i = 0; i < inactiveOrderCount; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveLendOrderIds[i]];\\n            OrderItem memory orderItem = Storage.slot().lendOrders[_maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                inActiveLendOrderIds[i]\\n            );\\n            removedFutureValue += Storage.slot().lendOrders[_maturity].getFutureValue(\\n                marketOrder.unitPrice,\\n                inActiveLendOrderIds[i]\\n            );\\n            removedOrderAmount += orderItem.amount;\\n\\n            orderIds[i] = orderItem.orderId;\\n        }\\n    }\\n\\n    function cleanBorrowOrders(address _user, uint256 _maturity)\\n        public\\n        returns (\\n            uint48[] memory orderIds,\\n            uint256 activeOrderCount,\\n            uint256 removedFutureValue,\\n            uint256 removedOrderAmount\\n        )\\n    {\\n        (\\n            uint48[] memory activeBorrowOrderIds,\\n            uint48[] memory inActiveBorrowOrderIds\\n        ) = getActiveBorrowOrderIds(_user);\\n\\n        Storage.slot().activeBorrowOrderIds[_user] = activeBorrowOrderIds;\\n        activeOrderCount = activeBorrowOrderIds.length;\\n        uint256 inactiveOrderCount = inActiveBorrowOrderIds.length;\\n        orderIds = new uint48[](inactiveOrderCount);\\n\\n        for (uint256 i = 0; i < inactiveOrderCount; i++) {\\n            MarketOrder memory marketOrder = Storage.slot().orders[inActiveBorrowOrderIds[i]];\\n            OrderItem memory orderItem = Storage.slot().borrowOrders[_maturity].getOrderById(\\n                marketOrder.unitPrice,\\n                inActiveBorrowOrderIds[i]\\n            );\\n            removedFutureValue += Storage.slot().borrowOrders[_maturity].getFutureValue(\\n                marketOrder.unitPrice,\\n                inActiveBorrowOrderIds[i]\\n            );\\n\\n            removedOrderAmount += orderItem.amount;\\n\\n            orderIds[i] = orderItem.orderId;\\n        }\\n    }\\n\\n    function removeOrder(address _user, uint48 _orderId)\\n        public\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        MarketOrder memory marketOrder = Storage.slot().orders[_orderId];\\n        uint256 removedAmount;\\n        if (marketOrder.side == ProtocolTypes.Side.LEND) {\\n            removedAmount = Storage.slot().lendOrders[Storage.slot().maturity].removeOrder(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n            _removeOrderIdFromOrders(Storage.slot().activeLendOrderIds[_user], _orderId);\\n        } else if (marketOrder.side == ProtocolTypes.Side.BORROW) {\\n            removedAmount = Storage.slot().borrowOrders[Storage.slot().maturity].removeOrder(\\n                marketOrder.unitPrice,\\n                _orderId\\n            );\\n            _removeOrderIdFromOrders(Storage.slot().activeBorrowOrderIds[_user], _orderId);\\n        }\\n\\n        return (marketOrder.side, removedAmount, marketOrder.unitPrice);\\n    }\\n\\n    function getOpeningUnitPrice()\\n        public\\n        view\\n        returns (uint256 openingUnitPrice, uint256 totalOffsetAmount)\\n    {\\n        uint256 lendUnitPrice = getHighestLendingUnitPrice();\\n        uint256 borrowUnitPrice = getLowestBorrowingUnitPrice();\\n        uint256 lendAmount = Storage.slot().lendOrders[Storage.slot().maturity].getNodeTotalAmount(\\n            lendUnitPrice\\n        );\\n        uint256 borrowAmount = Storage\\n            .slot()\\n            .borrowOrders[Storage.slot().maturity]\\n            .getNodeTotalAmount(borrowUnitPrice);\\n\\n        OrderStatisticsTreeLib.Tree storage borrowOrders = Storage.slot().borrowOrders[\\n            Storage.slot().maturity\\n        ];\\n        OrderStatisticsTreeLib.Tree storage lendOrders = Storage.slot().lendOrders[\\n            Storage.slot().maturity\\n        ];\\n\\n        while (borrowUnitPrice <= lendUnitPrice && borrowUnitPrice > 0 && lendUnitPrice > 0) {\\n            if (lendAmount > borrowAmount) {\\n                openingUnitPrice = lendUnitPrice;\\n                totalOffsetAmount += borrowAmount;\\n                lendAmount -= borrowAmount;\\n                borrowUnitPrice = borrowOrders.next(borrowUnitPrice);\\n                borrowAmount = borrowOrders.getNodeTotalAmount(borrowUnitPrice);\\n            } else if (lendAmount < borrowAmount) {\\n                openingUnitPrice = borrowUnitPrice;\\n                totalOffsetAmount += lendAmount;\\n                borrowAmount -= lendAmount;\\n                lendUnitPrice = lendOrders.prev(lendUnitPrice);\\n                lendAmount = lendOrders.getNodeTotalAmount(lendUnitPrice);\\n            } else {\\n                openingUnitPrice = (lendUnitPrice + borrowUnitPrice) / 2;\\n                totalOffsetAmount += lendAmount;\\n                lendUnitPrice = lendOrders.prev(lendUnitPrice);\\n                borrowUnitPrice = borrowOrders.next(borrowUnitPrice);\\n                lendAmount = lendOrders.getNodeTotalAmount(lendUnitPrice);\\n                borrowAmount = borrowOrders.getNodeTotalAmount(borrowUnitPrice);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases and returns id of last order in order book.\\n     * @return The new order id\\n     */\\n    function _nextOrderId() private returns (uint48) {\\n        Storage.slot().lastOrderId++;\\n        return Storage.slot().lastOrderId;\\n    }\\n\\n    function _removeOrderIdFromOrders(uint48[] storage orders, uint256 orderId) private {\\n        uint256 lastOrderIndex = orders.length - 1;\\n        for (uint256 i = 0; i <= lastOrderIndex; i++) {\\n            if (orders[i] == orderId) {\\n                if (i != lastOrderIndex) {\\n                    uint48 lastOrderId = orders[lastOrderIndex];\\n                    orders[i] = lastOrderId;\\n                }\\n\\n                orders.pop();\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9dca82bb5a34e18e4c9491e54f0cbe7c81a71864f60b3a1520f60b1638d290a8\",\"license\":\"MIT\"},\"contracts/libraries/math/RoundingUint256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoundingUint256 {\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0);\\n\\n        if ((a * 10) / b - (a / b) * 10 < 5) {\\n            return a / b;\\n        } else {\\n            return (a / b) + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc360f39a82f1a9a7454726e3db802407d305b5e525aa8c3236fe49ca6ca534d\",\"license\":\"MIT\"},\"contracts/storages/LendingMarketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport \\\"../libraries/OrderStatisticsTreeLib.sol\\\";\\n\\nstruct MarketOrder {\\n    ProtocolTypes.Side side;\\n    uint256 unitPrice; // in basis points\\n    uint256 maturity;\\n    uint256 timestamp;\\n}\\n\\nlibrary LendingMarketStorage {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarket\\\");\\n\\n    struct Storage {\\n        bytes32 ccy;\\n        uint48 lastOrderId;\\n        uint256 openingDate;\\n        uint256 maturity;\\n        // Mapping from maturity to opening unit price\\n        mapping(uint256 => uint256) openingUnitPrices;\\n        // Mapping from maturity to boolean if the market is ready or not\\n        mapping(uint256 => bool) isReady;\\n        // Mapping from user to active lend order ids\\n        mapping(address => uint48[]) activeLendOrderIds;\\n        // Mapping from user to active borrow order ids\\n        mapping(address => uint48[]) activeBorrowOrderIds;\\n        // Mapping from user to current maturity\\n        mapping(address => uint256) userCurrentMaturities;\\n        // Mapping from orderId to order\\n        mapping(uint256 => MarketOrder) orders;\\n        // Mapping from orderId to boolean for pre-order or not\\n        mapping(uint256 => bool) isPreOrder;\\n        // Mapping from maturity to lending orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) lendOrders;\\n        // Mapping from maturity to borrowing orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) borrowOrders;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4f83e32de550c47e0bf47d192f22fc445864a04ac0a3d922aeb911a4a9dd32d6\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant PRICE_DIGIT = 10000; // price digit in the basis (10000 -> 1)\\n    uint256 public constant PCT_DIGIT = 10000; // percentage digit in the basis (10000 -> 100%)\\n\\n    uint256 internal constant DAYS_IN_YEAR = 365;\\n    uint256 internal constant SECONDS_IN_MONTH = 2592000; // 60 * 60 * 24 * 30 * 12\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000; // 60 * 60 * 24 * 365\\n\\n    uint256 internal constant BASIS_TERM = 3;\\n    uint256 internal constant MAXIMUM_ORDER_COUNT = 20;\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0xcb43d4a2e7f1986226d3562402000a7e3766391cb1e350aa625e70952ed218b6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61516461003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061010a5760003560e01c8063914551f1116100a1578063e3d904d811610070578063e3d904d8146102f0578063e7df768c14610323578063eebc28f914610336578063fa6127aa1461034957600080fd5b8063914551f114610294578063a452c3f8146102b4578063d866d355146102d5578063e2afb041146102e857600080fd5b806363978ac8116100dd57806363978ac8146101b35780636a2c4274146102235780636c5db843146102405780637ce219aa1461026f57600080fd5b80633684d3ea1461010f5780634a53967b1461014b5780634bf62d161461017b578063614152b91461019d575b600080fd5b81801561011b57600080fd5b5061012f61012a366004614c67565b61035c565b60405165ffffffffffff90911681526020015b60405180910390f35b81801561015757600080fd5b5061016b610166366004614cc7565b610567565b6040516101429493929190614d34565b61018e610189366004614d63565b6107ba565b60405161014293929190614dac565b6101a5610a6e565b604051908152602001610142565b8180156101bf57600080fd5b506101d36101ce366004614def565b610ab8565b60408051845165ffffffffffff1681526020808601516001600160a01b031690820152848201519181019190915260609384015193810193909352608083019190915260a082015260c001610142565b61022b610b8a565b60408051928352602083019190915201610142565b81801561024c57600080fd5b5061026061025b366004614e38565b610d5c565b60405161014293929190614ea3565b61028261027d366004614ec2565b610efa565b60405161014296959493929190614edd565b8180156102a057600080fd5b5061016b6102af366004614cc7565b611089565b6102c76102c2366004614f1c565b6112cf565b604051610142929190614f37565b61018e6102e3366004614d63565b61162b565b6101a5611865565b6103036102fe366004614f1c565b611877565b604080519485526020850193909352918301526060820152608001610142565b610303610331366004614f1c565b611ba4565b6102c7610344366004614f1c565b611ead565b6101a5610357366004614f5c565b6121bc565b6000610366612257565b9050604051806080016040528087600181111561038557610385614e6b565b81526020018481526020016103986122b6565b600301548152602001428152506103ad6122b6565b65ffffffffffff831660009081526009919091016020526040902081518154829060ff1916600183818111156103e5576103e5614e6b565b02179055506020820151600182015560408201516002820155606090910151600390910155600086600181111561041e5761041e614e6b565b14156104c95761046583828787866104346122b6565b600b0160006104416122b6565b6003015481526020019081526020016000206122da9095949392919063ffffffff16565b61046d6122b6565b6001600160a01b03861660009081526006918201602090815260408220805460018101825590835291206005808304909101805465ffffffffffff808716939094069094026101000a918202929091021990921617905561055e565b60018660018111156104dd576104dd614e6b565b141561055e5761050083828787866104f36122b6565b600c0160006104416122b6565b6105086122b6565b6001600160a01b03861660009081526007919091016020908152604082208054600181018255908352912060058083049091018054919092066006026101000a65ffffffffffff81810219909216918416021790555b95945050505050565b6060600080600080600061057a88611ead565b91509150816105876122b6565b60070160008a6001600160a01b03166001600160a01b0316815260200190815260200160002090805190602001906105c0929190614b3e565b50815181519095508067ffffffffffffffff8111156105e1576105e1614f78565b60405190808252806020026020018201604052801561060a578160200160208202803683370190505b50965060005b818110156107ad5760006106226122b6565b600901600085848151811061063957610639614f8e565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16600181111561068657610686614e6b565b600181111561069757610697614e6b565b815260200160018201548152602001600282015481526020016003820154815250509050600061070082602001518685815181106106d7576106d7614f8e565b60200260200101516106e76122b6565b60008f8152600c919091016020526040902091906123a3565b9050610745826020015186858151811061071c5761071c614f8e565b602002602001015161072c6122b6565b60008f8152600c9190910160205260409020919061245e565b61074f9089614fba565b97508060a00151876107619190614fba565b965080600001518a848151811061077a5761077a614f8e565b602002602001019065ffffffffffff16908165ffffffffffff1681525050505080806107a590614fd2565b915050610610565b5050505092959194509250565b60608060608367ffffffffffffffff8111156107d8576107d8614f78565b604051908082528060200260200182016040528015610801578160200160208202803683370190505b5092508367ffffffffffffffff81111561081d5761081d614f78565b604051908082528060200260200182016040528015610846578160200160208202803683370190505b5091508367ffffffffffffffff81111561086257610862614f78565b60405190808252806020026020018201604052801561088b578160200160208202803683370190505b50905060006108bf61089b6122b6565b600b0160006108a86122b6565b60030154815260200190815260200160002061249b565b905080846000815181106108d5576108d5614f8e565b60200260200101818152505061091a816108ed6122b6565b600b0160006108fa6122b6565b6003015481526020019081526020016000206124e290919063ffffffff16565b8360008151811061092d5761092d614f8e565b602002602001018181525050610972816109456122b6565b600b0160006109526122b6565b6003015481526020019081526020016000206124fb90919063ffffffff16565b8260008151811061098557610985614f8e565b602090810291909101015260015b8451811015610a6557816109a657610a65565b6109df826109b26122b6565b600b0160006109bf6122b6565b60030154815260200190815260200160002061251490919063ffffffff16565b9150818582815181106109f4576109f4614f8e565b602002602001018181525050610a0c826108ed6122b6565b848281518110610a1e57610a1e614f8e565b602002602001018181525050610a36826109456122b6565b838281518110610a4857610a48614f8e565b602090810291909101015280610a5d81614fd2565b915050610993565b50509193909250565b600080610aa0610a7c6122b6565b600c016000610a896122b6565b60030154815260200190815260200160002061260e565b90508015610aae5780610ab2565b6127105b91505090565b610ac0614bf3565b6000806001866001811115610ad757610ad7614e6b565b1415610b2457610b188585610aea6122b6565b600b016000610af76122b6565b6003015481526020019081526020016000206126509092919063ffffffff16565b94509092509050610b81565b6000866001811115610b3857610b38614e6b565b1415610b8157610b798585610b4b6122b6565b600c016000610b586122b6565b6003015481526020019081526020016000206129959092919063ffffffff16565b945090925090505b93509350939050565b6000806000610b97611865565b90506000610ba3610a6e565b90506000610bb3836108ed6122b6565b90506000610bd083610bc36122b6565b600c0160006108fa6122b6565b90506000610bdc6122b6565b600c016000610be96122b6565b60030154815260200190815260200160002090506000610c076122b6565b600b016000610c146122b6565b60030154815260200190815260200160002090505b858511158015610c395750600085115b8015610c455750600086115b15610d525782841115610c98578597508287610c619190614fba565b9650610c6d8385614fed565b9350610c798286612c8f565b60008181526001840160205260409020600501549095505b9250610c29565b82841015610ce5578497508387610caf9190614fba565b9650610cbb8484614fed565b9250610cc78187612514565b60008181526001830160205260409020600501549096509350610c29565b6002610cf18688614fba565b610cfb9190615004565b9750610d078488614fba565b9650610d138187612514565b9550610d1f8286612c8f565b60008781526001830160205260409020600501549095506000868152600184016020526040902060050154909450610c91565b5050505050509091565b600080600080610d6a6122b6565b65ffffffffffff861660009081526009919091016020526040908190208151608081019092528054829060ff166001811115610da857610da8614e6b565b6001811115610db957610db9614e6b565b81526001820154602082015260028201546040820152600390910154606090910152905060008082516001811115610df357610df3614e6b565b1415610e7457610e38826020015187610e0a6122b6565b600b016000610e176122b6565b600301548152602001908152602001600020612d899092919063ffffffff16565b9050610e6f610e456122b6565b6001600160a01b03891660009081526006919091016020526040902065ffffffffffff8816612dc9565b610ee4565b600182516001811115610e8957610e89614e6b565b1415610ee457610ead826020015187610ea06122b6565b600c016000610e176122b6565b9050610ee4610eba6122b6565b6001600160a01b03891660009081526007919091016020526040902065ffffffffffff8816612dc9565b8151602090920151919450925090509250925092565b6000806000806000806000610f0d6122b6565b65ffffffffffff891660009081526009919091016020526040908190208151608081019092528054829060ff166001811115610f4b57610f4b614e6b565b6001811115610f5c57610f5c614e6b565b815260200160018201548152602001600282015481526020016003820154815250509050610fb86040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b600082516001811115610fcd57610fcd614e6b565b14156110085761100182602001518a610fe46122b6565b6040808701516000908152600b92909201602052902091906123a3565b9050611039565b61103682602001518a6110196122b6565b6040808701516000908152600c92909201602052902091906123a3565b90505b60608101516001600160a01b03161561107d5781600001518260200151836040015183606001518460a0015185608001519750975097509750975097505050611080565b50505b91939550919395565b6060600080600080600061109c886112cf565b91509150816110a96122b6565b60060160008a6001600160a01b03166001600160a01b0316815260200190815260200160002090805190602001906110e2929190614b3e565b50815181519095508067ffffffffffffffff81111561110357611103614f78565b60405190808252806020026020018201604052801561112c578160200160208202803683370190505b50965060005b818110156107ad5760006111446122b6565b600901600085848151811061115b5761115b614f8e565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff1660018111156111a8576111a8614e6b565b60018111156111b9576111b9614e6b565b815260200160018201548152602001600282015481526020016003820154815250509050600061122282602001518685815181106111f9576111f9614f8e565b60200260200101516112096122b6565b60008f8152600b919091016020526040902091906123a3565b9050611267826020015186858151811061123e5761123e614f8e565b602002602001015161124e6122b6565b60008f8152600b9190910160205260409020919061245e565b6112719089614fba565b97508060a00151876112839190614fba565b965080600001518a848151811061129c5761129c614f8e565b602002602001019065ffffffffffff16908165ffffffffffff1681525050505080806112c790614fd2565b915050611132565b60608060008060006112df6122b6565b600301546112eb6122b6565b6001600160a01b03881660009081526008919091016020526040902054141590508061133b576113196122b6565b6001600160a01b0387166000908152600691909101602052604090205461133e565b60005b67ffffffffffffffff81111561135657611356614f78565b60405190808252806020026020018201604052801561137f578160200160208202803683370190505b50945061138a6122b6565b6001600160a01b0387166000908152600691909101602052604090205467ffffffffffffffff8111156113bf576113bf614f78565b6040519080825280602002602001820160405280156113e8578160200160208202803683370190505b50935060005b6113f66122b6565b6001600160a01b038816600090815260069190910160205260409020548110156116225760006114246122b6565b6001600160a01b03891660009081526006919091016020526040902080548390811061145257611452614f8e565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff16905060006114866122b6565b65ffffffffffff831660009081526009919091016020526040908190208151608081019092528054829060ff1660018111156114c4576114c4614e6b565b60018111156114d5576114d5614e6b565b81526020016001820154815260200160028201548152602001600382015481525050905061155b81602001518361150a6122b6565b600b0160006115176122b6565b60080160008f6001600160a01b03166001600160a01b03168152602001908152602001600020548152602001908152602001600020612f1f9092919063ffffffff16565b6115b85761156a600186614fba565b945081876115788886614fed565b8151811061158857611588614f8e565b602002602001019065ffffffffffff16908165ffffffffffff1681525050836115b357600188510388525b61160d565b83611605576115c8600187614fba565b955081886115d68786614fed565b815181106115e6576115e6614f8e565b602002602001019065ffffffffffff16908165ffffffffffff16815250505b600187510387525b5050808061161a90614fd2565b9150506113ee565b50505050915091565b60608060608367ffffffffffffffff81111561164957611649614f78565b604051908082528060200260200182016040528015611672578160200160208202803683370190505b5092508367ffffffffffffffff81111561168e5761168e614f78565b6040519080825280602002602001820160405280156116b7578160200160208202803683370190505b5091508367ffffffffffffffff8111156116d3576116d3614f78565b6040519080825280602002602001820160405280156116fc578160200160208202803683370190505b509050600061170c610a7c6122b6565b9050808460008151811061172257611722614f8e565b60200260200101818152505061173a81610bc36122b6565b8360008151811061174d5761174d614f8e565b602002602001018181525050611772816117656122b6565b600c0160006109526122b6565b8260008151811061178557611785614f8e565b602090810291909101015260015b8451811015610a6557816117a657610a65565b6117df826117b26122b6565b600c0160006117bf6122b6565b600301548152602001908152602001600020612c8f90919063ffffffff16565b9150818582815181106117f4576117f4614f8e565b60200260200101818152505061180c82610bc36122b6565b84828151811061181e5761181e614f8e565b602002602001018181525050611836826117656122b6565b83828151811061184857611848614f8e565b60209081029190910101528061185d81614fd2565b915050611793565b600061187261089b6122b6565b905090565b60008060008060008061188987611ead565b9150915060005b82518110156119bf5760006118a36122b6565b60090160008584815181106118ba576118ba614f8e565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16600181111561190757611907614e6b565b600181111561191857611918614e6b565b8152602001600182015481526020016002820154815260200160038201548152505090506000611996826020015186858151811061195857611958614f8e565b60200260200101516119686122b6565b600c0160006119756122b6565b6003015481526020019081526020016000206123a39092919063ffffffff16565b90508060a00151896119a89190614fba565b9850505080806119b790614fd2565b915050611890565b506119c86122b6565b6001600160a01b0388166000908152600891909101602052604081205493505b8151811015611b9a5760006119fb6122b6565b6009016000848481518110611a1257611a12614f8e565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff166001811115611a5f57611a5f614e6b565b6001811115611a7057611a70614e6b565b8152602001600182015481526020016002820154815260200160038201548152505090506000611ac08260200151858581518110611ab057611ab0614f8e565b60200260200101516110196122b6565b90508060a0015188611ad29190614fba565b6020830151909850611ae26122b6565b600a016000868681518110611af957611af9614f8e565b60209081029190910181015165ffffffffffff1682528101919091526040016000205460ff16151560011415611b5c576000611b336122b6565b60040160008560400151815260200190815260200160002054905081811115611b5a578091505b505b611b78816127108460a00151611b729190615026565b90612f3d565b611b829089614fba565b97505050508080611b9290614fd2565b9150506119e8565b5050509193509193565b600080600080600080611bb6876112cf565b91509150611bc26122b6565b6001600160a01b0388166000908152600891909101602052604081205493505b8251811015611cf0576000611bf56122b6565b6009016000858481518110611c0c57611c0c614f8e565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff166001811115611c5957611c59614e6b565b6001811115611c6a57611c6a614e6b565b8152602001600182015481526020016002820154815260200160038201548152505090506000611cc78260200151868581518110611caa57611caa614f8e565b6020026020010151611cba6122b6565b600b0160006119756122b6565b90508060a0015189611cd99190614fba565b985050508080611ce890614fd2565b915050611be2565b5060005b8151811015611b9a576000611d076122b6565b6009016000848481518110611d1e57611d1e614f8e565b602002602001015165ffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff166001811115611d6b57611d6b614e6b565b6001811115611d7c57611d7c614e6b565b81526001820154602082015260028201546040820152600390910154606090910152905084611dad57806040015194505b6000611dd98260200151858581518110611dc957611dc9614f8e565b6020026020010151610fe46122b6565b90508060a0015188611deb9190614fba565b6020830151909850611dfb6122b6565b600a016000868681518110611e1257611e12614f8e565b60209081029190910181015165ffffffffffff1682528101919091526040016000205460ff16151560011415611e75576000611e4c6122b6565b60040160008560400151815260200190815260200160002054905081811015611e73578091505b505b611e8b816127108460a00151611b729190615026565b611e959089614fba565b97505050508080611ea590614fd2565b915050611cf4565b6060806000806000611ebd6122b6565b60030154611ec96122b6565b6001600160a01b038816600090815260089190910160205260409020541415905080611f1957611ef76122b6565b6001600160a01b03871660009081526007919091016020526040902054611f1c565b60005b67ffffffffffffffff811115611f3457611f34614f78565b604051908082528060200260200182016040528015611f5d578160200160208202803683370190505b509450611f686122b6565b6001600160a01b0387166000908152600791909101602052604090205467ffffffffffffffff811115611f9d57611f9d614f78565b604051908082528060200260200182016040528015611fc6578160200160208202803683370190505b50935060005b611fd46122b6565b6001600160a01b038816600090815260079190910160205260409020548110156116225760006120026122b6565b6001600160a01b03891660009081526007919091016020526040902080548390811061203057612030614f8e565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff16905060006120646122b6565b65ffffffffffff831660009081526009919091016020526040908190208151608081019092528054829060ff1660018111156120a2576120a2614e6b565b60018111156120b3576120b3614e6b565b8152602001600182015481526020016002820154815260200160038201548152505090506120f58160200151836120e86122b6565b600c0160006115176122b6565b61215257612104600186614fba565b945081876121128886614fed565b8151811061212257612122614f8e565b602002602001019065ffffffffffff16908165ffffffffffff16815250508361214d57600188510388525b6121a7565b61215d600187614fba565b95508361219f5781886121708786614fed565b8151811061218057612180614f8e565b602002602001019065ffffffffffff16908165ffffffffffff16815250505b600187510387525b505080806121b490614fd2565b915050611fcc565b600060018360018111156121d2576121d2614e6b565b141561221857612211826121e46122b6565b600b0160006121f16122b6565b600301548152602001908152602001600020612fa790919063ffffffff16565b9050612251565b612211826122246122b6565b600c0160006122316122b6565b60030154815260200190815260200160002061306390919063ffffffff16565b92915050565b60006122616122b6565b600101805465ffffffffffff1690600061227a83615045565b91906101000a81548165ffffffffffff021916908365ffffffffffff160217905550506122a56122b6565b6001015465ffffffffffff16919050565b7ffc2836757f9146445fc75bc3c897a210ec004e4ee60fc8627ef5cbf2842b3d0a90565b600082116123255760405162461bcd60e51b8152602060048201526013602482015272125b9cdd59999a58da595b9d08185b5bdd5b9d606a1b60448201526064015b60405180910390fd5b61271085111561236c5760405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742076616c756560701b604482015260640161231c565b6123768686613117565b801561238e5761238986868686866132e7565b61239b565b61239b8686868686613360565b505050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915250600082815260018085016020908152604080842065ffffffffffff80871686526006909101835293819020815160c08101835281548087168252600160301b8104871694820194909452600160601b90930490941690820152908201546001600160a01b031660608201526002820154608082015260039091015460a08201525b9392505050565b6000828152600184016020908152604080832065ffffffffffff851684526006019091528120600301546124939084906133d1565b949350505050565b8054806124aa57506000919050565b5b6000818152600183016020526040902060020154156124dd5760009081526001820160205260409020600201546124ab565b919050565b6000908152600191909101602052604090206005015490565b6000908152600191909101602052604090206004015490565b6000816125845760405162461bcd60e51b815260206004820152603860248201527f4f7264657253746174697374696373547265652834303229202d205374617274604482015277696e672076616c75652063616e6e6f74206265207a65726f60401b606482015260840161231c565b6000828152600180850160205260409091200154156125bc5760008281526001808501602052604090912001546122119084906133e3565b5060008181526001830160205260409020545b80158015906125f05750600081815260018085016020526040909120015482145b156122515760008181526001840160205260409020549091506125cf565b80548061261d57506000919050565b5b6000818152600180840160205260409091200154156124dd57600090815260018083016020526040909120015461261e565b60008061265b614bf3565b846126785760405162461bcd60e51b815260040161231c9061506b565b6000806126848861249b565b905060006126918961260e565b905060008088841015806126a3575088155b6126ea5760405162461bcd60e51b8152602060048201526018602482015277496e73756666696369656e74206c696d69742076616c756560401b604482015260640161231c565b89811080156126f857508315155b801561270c575088158061270c5750888410155b1561278457600084815260018c01602052604090206005015491506127318282614fba565b905083945060008a8211612746576000612750565b6127508b83614fed565b61275a9084614fed565b905061276685826133d1565b612770908a614fba565b985061277c8c86612514565b9450506126ea565b898110158061279257508885145b1561284457898111156127c95784935060006127ae8b83614fed565b6127b89084614fed565b90506127c58c8683613420565b9650505b600084815260018c01602052604081206002810191909155545b8015612842578481101561282c57600085815260018d016020526040902054811461282857600085815260018d01602052604080822083905582825290206002018590555b8094505b600090815260018c0160205260409020546127e3565b505b808a111561285957612856818b614fed565b96505b84831480156128795750600083815260018c016020526040902060050154155b156128875760008b556128bb565b8a548510806128a157508a54851480156128a15750808a10155b156128bb57838b55600084815260018c0160205260408120555b8a54600090815260018c0160205260409020600201541580156128f257508a5460009081526001808d016020526040909120015415155b1561294b578a5460009081526001808d0160205260408083209091015482529020600201541561293d578a5460009081526001808d016020526040909120015461293d908c906136c0565b61294b8b8c60000154613798565b8a54600090815260018c01602052604090206003015460ff1615612987578a54600090815260018c0160205260409020600301805460ff191690555b505050505093509350939050565b6000806129a0614bf3565b846129bd5760405162461bcd60e51b815260040161231c9061506b565b6000806129c98861260e565b905060006129d68961249b565b905060008088841115806129e8575088155b612a2f5760405162461bcd60e51b8152602060048201526018602482015277496e73756666696369656e74206c696d69742076616c756560401b604482015260640161231c565b8981108015612a3d57508315155b8015612a515750881580612a515750888411155b15612ac957600084815260018c0160205260409020600501549150612a768282614fba565b905083945060008a8211612a8b576000612a95565b612a958b83614fed565b612a9f9084614fed565b9050612aab85826133d1565b612ab5908a614fba565b9850612ac18c86612c8f565b945050612a2f565b8981101580612ad757508885145b15612b895789811115612b0e578493506000612af38b83614fed565b612afd9084614fed565b9050612b0a8c8683613420565b9650505b60008481526001808d016020526040822090810191909155545b8015612b875784811115612b7157600085815260018d0160205260409020548114612b6d5760008581526001808e016020526040808320849055838352909120018590555b8094505b600090815260018c016020526040902054612b28565b505b808a1115612b9e57612b9b818b614fed565b96505b8483148015612bbe5750600083815260018c016020526040902060050154155b15612bcc5760008b55612c00565b8a54851180612be657508a5485148015612be65750808a10155b15612c0057838b55600084815260018c0160205260408120555b8a5460009081526001808d0160205260409091200154158015612c3757508a54600090815260018c01602052604090206002015415155b1561294b578a5460009081526001808d016020526040808320600201548352909120015415612c81578a54600090815260018c016020526040902060020154612c81908c90613798565b61294b8b8c600001546136c0565b600081612cff5760405162461bcd60e51b815260206004820152603860248201527f4f7264657253746174697374696373547265652834303129202d205374617274604482015277696e672076616c75652063616e6e6f74206265207a65726f60401b606482015260840161231c565b600082815260018401602052604090206002015415612d3757600082815260018401602052604090206002015461221190849061386d565b5060008181526001830160205260409020545b8015801590612d6b5750600081815260018401602052604090206002015482145b15612251576000818152600184016020526040902054909150612d4a565b6000612d96848484612f1f565b612db25760405162461bcd60e51b815260040161231c906150c8565b612dbd8484846138a5565b90506124578484613b11565b8154600090612dda90600190614fed565b905060005b818111612f195782848281548110612df957612df9614f8e565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff161415612f0757818114612ec0576000848381548110612e4a57612e4a614f8e565b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff16905080858381548110612e8757612e87614f8e565b90600052602060002090600591828204019190066006026101000a81548165ffffffffffff021916908365ffffffffffff160217905550505b83805480612ed057612ed0615118565b60019003818190600052602060002090600591828204019190066006026101000a81549065ffffffffffff02191690559055612f19565b80612f1181614fd2565b915050612ddf565b50505050565b6000612f2c848484613dce565b801561249357506124938484613f17565b6000808211612f4b57600080fd5b6005612f578385615004565b612f6290600a615026565b83612f6e86600a615026565b612f789190615004565b612f829190614fed565b1015612f92576122118284615004565b612f9c8284615004565b612211906001614fba565b600080612fb38461249b565b905060008092505b8381108015612fc957508115155b1561305b57600082815260018601602052604081206005015490612fed84836133d1565b9050612ff98184614fba565b92508583111561303b57600061300f8785614fed565b6130199083614fed565b905061302982611b728386615026565b6130339087614fba565b955050613048565b6130458286614fba565b94505b6130528785612514565b93505050612fbb565b505092915050565b60008061306f8461260e565b905060008092505b838110801561308557508115155b1561305b576000828152600186016020526040812060050154906130a984836133d1565b90506130b58184614fba565b9250858311156130f75760006130cb8785614fed565b6130d59083614fed565b90506130e582611b728386615026565b6130ef9087614fba565b955050613104565b6131018286614fba565b94505b61310e8785612c8f565b93505050613077565b8061318a5760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303529202d2056616c756560448201527f20746f20696e736572742063616e6e6f74206265207a65726f00000000000000606482015260840161231c565b81546000905b80156131ee57809150808310156131ba576000908152600180850160205260409091200154613190565b808311156131db576000908152600184016020526040902060020154613190565b808314156131e95750505050565b613190565b600083815260018501602052604090208454158061323d57506000838152600180870160205260409091200154841480159061323d575060008381526001860160205260409020600201548414155b1561326b576000600482018190556005820181905561325f9086908690613fd0565b61326b85856000614008565b82815560006001808301829055600283019190915560038201805460ff191690911790558261329c578385556132d6565b828410156132bf57600083815260018087016020526040909120018490556132d6565b600083815260018601602052604090206002018490555b6132e08585614048565b5050505050565b600084815260018601602052604081209061330587878787876142b3565b90506133298787838560030160019054906101000a900465ffffffffffff16614452565b613334878783613fd0565b6003820154600160381b900465ffffffffffff1661335757613357878783614008565b50505050505050565b600084815260018601602052604090206003810154610100900465ffffffffffff166133935761238986868686866132e7565b60006133a287878787876142b3565b90506133c687878460030160079054906101000a900465ffffffffffff1684614452565b613357878783614008565b600061245783611b7261271085615026565b60005b60008281526001840160205260409020600201541561341a57600091825260018301602052604090912060020154906133e6565b50919050565b613428614bf3565b6000838152600185016020526040902060058101548311156134b25760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834313029202d20416d6f756e60448201527f7420746f2066696c6c20697320696e73756666696369656e7400000000000000606482015260840161231c565b60038082015465ffffffffffff610100909104811660008181526006850160209081526040808320815160c08101835281548088168252600160301b8104881694820194909452600160601b9093049095169082015260018401546001600160a01b0316606082015260028401546080820152929093015460a0830152859291905b65ffffffffffff81161580159061354a57508315155b1561364f5765ffffffffffff8082166000908152600687016020908152604091829020825160c08101845281548086168252600160301b8104861693820193909352600160601b9092049093169181019190915260018201546001600160a01b031660608201526002820154608082015260039091015460a0820181905290925084106135ee5760a08201516135e09085614fed565b93508160200151905061363d565b6040518060800160405280836000015165ffffffffffff16815260200183606001516001600160a01b03168152602001858460a0015161362e9190614fed565b81526020018990529550600093505b8261364781614fd2565b935050613534565b61365e898984600001516144c7565b506040860151156136b457600088815260018a0160209081526040808320855165ffffffffffff16845260060190915280822090880151600382018054929391929091906136ad908490614fed565b9091555050505b50505050509392505050565b60008181526001808401602052604080832060028101805491548286529285209093015493859052918390559091801561370857600081815260018601602052604090208490555b600083815260018601602052604090208290558161372857828555613775565b600082815260018087016020526040909120015484141561375e5760008281526001808701602052604090912001839055613775565b600082815260018601602052604090206002018390555b505060008181526001938401602052604080822090940183905591825291902055565b600081815260018084016020526040808320918201805492548385529184206002015493859052839055909180156137de57600081815260018601602052604090208490555b60008381526001860160205260409020829055816137fe5782855561384b565b6000828152600186016020526040902060020154841415613834576000828152600186016020526040902060020183905561384b565b600082815260018087016020526040909120018390555b5050600081815260019093016020526040808420600201839055918352912055565b60005b60008281526001808501602052604090912001541561341a576000918252600180840160205260409092209091015490613870565b60006138b2848484612f1f565b6138ce5760405162461bcd60e51b815260040161231c906150c8565b50600082815260018085016020908152604080842065ffffffffffff80871680875260068301855295839020835160c08101855281548084168252600160301b8104841696820196909652600160601b909504821693850193909352938201546001600160a01b031660608401526002820154608084015260039182015460a0840181905291810154919490936101009092049091161480156139865750600382015465ffffffffffff858116600160381b90920416145b156139a85761399786866000613fd0565b6139a386866000614008565b613a7a565b600382015465ffffffffffff858116610100909204161415613a06576139d386868360200151613fd0565b60208082015165ffffffffffff1660009081526006840190915260409020805465ffffffffffff60601b19169055613a7a565b600382015465ffffffffffff858116600160381b909204161415613a6657613a3386868360400151614008565b60408082015165ffffffffffff166000908152600684016020522080546bffffffffffff00000000000019169055613a7a565b613a7a868683604001518460200151614452565b805165ffffffffffff1660009081526006830160205260408120805471ffffffffffffffffffffffffffffffffffff19168155600180820180546001600160a01b031916905560028201839055600390910182905560048401805491929091613ae4908490614fed565b909155505060a0810151600583018054600090613b02908490614fed565b90915550929695505050505050565b80613b845760405162461bcd60e51b815260206004820152603960248201527f4f7264657253746174697374696373547265652834303729202d2056616c756560448201527f20746f2064656c6574652063616e6e6f74206265207a65726f00000000000000606482015260840161231c565b60008181526001830160205260408120600481015490919081906132e05760008481526001808701602052604090912001541580613bd357506000848152600186016020526040902060020154155b15613bdf575082613c27565b5060008381526001850160205260409020600201545b600081815260018087016020526040909120015415613c27576000908152600180860160205260409091200154613bf5565b600081815260018087016020526040909120015415613c5b5760008181526001808701602052604090912001549150613c72565b600081815260018601602052604090206002015491505b60008181526001860160205260408082205484835291208190558015613ce3576000818152600180880160205260409091200154821415613cc85760008181526001808801602052604090912001839055613ce7565b60008181526001870160205260409020600201839055613ce7565b8286555b600082815260018701602052604090206003015460ff1615858314613d7157613d118784886146ad565b60008681526001888101602052604080832080830154878552828520938401819055845281842087905560028082015490840181905584529083208690556003908101549286905201805460ff191660ff90921615159190911790559194915b8015613d8157613d818785614724565b50506000818152600180870160205260408220828155908101829055600281018290556003810180546cffffffffffffffffffffffffff1916905560048101829055600501555050505050565b600082815260018085016020908152604080842065ffffffffffff808716808752600683018552838720845160c0810186528154808516808352600160301b8204861698830198909852600160601b900490931694830194909452948301546001600160a01b031660608201526002830154608082015260039092015460a08301528593909214613e655760009350505050612457565b5b604081015165ffffffffffff1615613ef85760409081015165ffffffffffff808216600090815260068501602090815290849020845160c08101865281548085168252600160301b8104851693820193909352600160601b9092049092169381019390935260018101546001600160a01b03166060840152600281015460808401526003015460a08301529250613e66565b5060030154610100900465ffffffffffff908116911614949350505050565b600081613f2657506000612251565b8254821415613f3757506001612251565b815b600081815260018501602052604090205415613fc65760008181526001808601602052604080832054808452922001548214801590613f8b575060008181526001860160205260409020600201548214155b15613f9b57600092505050612251565b8454811415613faf57600192505050612251565b506000908152600184016020526040902054613f39565b5060009392505050565b6000918252600190920160205260409020600301805465ffffffffffff9092166101000266ffffffffffff0019909216919091179055565b6000918252600190920160205260409020600301805465ffffffffffff909216600160381b026cffffffffffff0000000000000019909216919091179055565b60005b825482148015906140755750600082815260018401602052604080822054825290206003015460ff165b156142915760008281526001808501602052604080832054808452818420548452922001548114156141985760008181526001850160205260408082205482528082206002015480835291206003015490925060ff161561411e576000818152600180860160205260408083206003808201805460ff1990811690915587865283862082018054821690558254865292852001805490921690921790559082905254925061428b565b60008181526001850160205260409020600201548314156141465780925061414684846136c0565b50600082815260018085016020526040808320548084528184206003808201805460ff19908116909155825487529386200180549093169093179091559182905254614193908590613798565b61428b565b6000818152600180860160205260408083205483528083209091015480835291206003015490925060ff1615614216576000818152600180860160205260408083206003808201805460ff1990811690915587865283862082018054821690558254865292852001805490921690921790559082905254925061428b565b600081815260018086016020526040909120015483141561423e5780925061423e8484613798565b50600082815260018085016020526040808320548084528184206003808201805460ff1990811690915582548752938620018054909316909317909155918290525461428b9085906136c0565b5061404b565b505080546000908152600190910160205260409020600301805460ff19169055565b6000848152600186016020908152604080832065ffffffffffff8716845260068101909252822060020154156143465760405162461bcd60e51b815260206004820152603260248201527f4f7264657253746174697374696373547265652834303929202d204f726465726044820152711034b21030b63932b0b23c9032bc34b9ba1760711b606482015260840161231c565b600181600401600082825461435b9190614fba565b92505081905550828160050160008282546143769190614fba565b90915550506040805160c08101825265ffffffffffff808816808352600060208085018281528587018381526001600160a01b03808d16606089019081524260808a0190815260a08a018e81529787526006909b019094529790932095518654915193518616600160601b0265ffffffffffff60601b19948716600160301b026bffffffffffffffffffffffff199093169682169690961791909117929092169390931784559151600184018054919095166001600160a01b031990911617909355925160028201559051600390910155905095945050505050565b60009283526001939093016020908152604080842065ffffffffffff938416808652600690910190925280842080546bffffffffffff0000000000001916600160301b9490961693840295909517909455908252919020805465ffffffffffff60601b1916600160601b909202919091179055565b60006144d4848484612f1f565b6144f05760405162461bcd60e51b815260040161231c906150c8565b50600082815260018085016020908152604080842065ffffffffffff808716865260068201808552838720845160c08101865281548085168252600160301b8104851682890152600160601b9004841681870152818801546001600160a01b031660608201526002820154608082015260039182015460a08201819052828601546101009004909416808a529290965293909620909201549194909390915b8665ffffffffffff1683146145f357600092835260068501602052604090922054600160301b900465ffffffffffff1691816145ca81614fd2565b60008581526006880160205260409020600301549093506145ec915082614fba565b905061458f565b600385015465ffffffffffff888116600160381b90920416141561462e5761461d89896000613fd0565b61462989896000614008565b61466c565b61463d89898660200151613fd0565b60208085015165ffffffffffff1660009081526006870190915260409020805465ffffffffffff60601b191690555b818560040160008282546146809190614fed565b925050819055508085600501600082825461469b9190614fed565b90915550959998505050505050505050565b6000818152600184016020526040808220548483529120819055806146d457828455612f19565b600081815260018086016020526040909120015482141561470a5760008181526001808601602052604090912001839055612f19565b600090815260019390930160205250604090912060020155565b60005b8254821480159061474c5750600082815260018401602052604090206003015460ff16155b15614b1f5760008281526001808501602052604080832054808452922001548314156149485760008181526001850160205260408082206002015480835291206003015490925060ff16156147f0576000828152600180860160205260408083206003908101805460ff199081169091558585529190932090920180549092161790556147d984826136c0565b600081815260018501602052604090206002015491505b60008281526001808601602052604080832090910154825290206003015460ff1615801561483b5750600082815260018501602052604080822060020154825290206003015460ff16155b1561486857600082815260018581016020526040909120600301805460ff19169091179055915081614b19565b600082815260018501602052604080822060020154825290206003015460ff166148e5576000828152600180860160205260408083208083015484529083206003908101805460ff19908116909155938690520180549092161790556148ce8483613798565b600081815260018501602052604090206002015491505b600081815260018501602052604080822060039081018054868552838520808401805460ff909316151560ff19938416179055825482169092556002909101548452919092209091018054909116905561493f84826136c0565b83549250614b19565b6000818152600180860160205260408083209091015480835291206003015490925060ff16156149c7576000828152600180860160205260408083206003908101805460ff199081169091558585529190932090920180549092161790556149b08482613798565b600081815260018086016020526040909120015491505b600082815260018501602052604080822060020154825290206003015460ff16158015614a12575060008281526001808601602052604080832090910154825290206003015460ff16155b15614a3f57600082815260018581016020526040909120600301805460ff19169091179055915081614b19565b60008281526001808601602052604080832090910154825290206003015460ff16614abe57600082815260018086016020526040808320600281015484529083206003908101805460ff1990811690915593869052018054909216179055614aa784836136c0565b600081815260018086016020526040909120015491505b60008181526001808601602052604080832060039081018054878652838620808401805460ff909316151560ff19938416179055825482169092559301548452922090910180549091169055614b148482613798565b835492505b50614727565b506000908152600190910160205260409020600301805460ff19169055565b82805482825590600052602060002090600401600590048101928215614be35791602002820160005b83821115614baf57835183826101000a81548165ffffffffffff021916908365ffffffffffff1602179055509260200192600601602081600501049283019260010302614b67565b8015614be15782816101000a81549065ffffffffffff0219169055600601602081600501049283019260010302614baf565b505b50614bef929150614c2c565b5090565b6040518060800160405280600065ffffffffffff16815260200160006001600160a01b0316815260200160008152602001600081525090565b5b80821115614bef5760008155600101614c2d565b8035600281106124dd57600080fd5b80356001600160a01b03811681146124dd57600080fd5b600080600080600060a08688031215614c7f57600080fd5b614c8886614c41565b9450614c9660208701614c50565b9350604086013592506060860135915060808601358015158114614cb957600080fd5b809150509295509295909350565b60008060408385031215614cda57600080fd5b614ce383614c50565b946020939093013593505050565b600081518084526020808501945080840160005b83811015614d2957815165ffffffffffff1687529582019590820190600101614d05565b509495945050505050565b608081526000614d476080830187614cf1565b6020830195909552506040810192909252606090910152919050565b600060208284031215614d7557600080fd5b5035919050565b600081518084526020808501945080840160005b83811015614d2957815187529582019590820190600101614d90565b606081526000614dbf6060830186614d7c565b8281036020840152614dd18186614d7c565b90508281036040840152614de58185614d7c565b9695505050505050565b600080600060608486031215614e0457600080fd5b614e0d84614c41565b95602085013595506040909401359392505050565b803565ffffffffffff811681146124dd57600080fd5b60008060408385031215614e4b57600080fd5b614e5483614c50565b9150614e6260208401614e22565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b60028110614e9f57634e487b7160e01b600052602160045260246000fd5b9052565b60608101614eb18286614e81565b602082019390935260400152919050565b600060208284031215614ed457600080fd5b61245782614e22565b60c08101614eeb8289614e81565b602082019690965260408101949094526001600160a01b03929092166060840152608083015260a090910152919050565b600060208284031215614f2e57600080fd5b61245782614c50565b604081526000614f4a6040830185614cf1565b828103602084015261055e8185614cf1565b60008060408385031215614f6f57600080fd5b614ce383614c41565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115614fcd57614fcd614fa4565b500190565b6000600019821415614fe657614fe6614fa4565b5060010190565b600082821015614fff57614fff614fa4565b500390565b60008261502157634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561504057615040614fa4565b500290565b600065ffffffffffff8083168181141561506157615061614fa4565b6001019392505050565b60208082526038908201527f4f7264657253746174697374696373547265652834303829202d20416d6f756e60408201527f7420746f2064726f702063616e6e6f74206265207a65726f0000000000000000606082015260800190565b60208082526030908201527f4f7264657253746174697374696373547265652834313029202d204f7264657260408201526f103237b2b9903737ba1032bc34b9ba1760811b606082015260800190565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220b67975814b41032b7c0beca4183ed7757c3d16da6fe3cb0c09d0a660de01ce4d64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}