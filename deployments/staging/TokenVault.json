{
  "address": "0xF5e96d0bF59304c9B0755e6A1e6a831b47Fd99e9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isCollateral",
          "type": "bool"
        }
      ],
      "name": "CurrencyRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isCollateral",
          "type": "bool"
        }
      ],
      "name": "CurrencyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addDepositAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralCurrencies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralParameters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationProtocolFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidatorFeeRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getCoverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "coverage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_liquidationCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationAmountMaximum",
          "type": "uint256"
        }
      ],
      "name": "getLiquidationAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidationAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidatorFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCollateralAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getTotalDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUnusedCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUsedCurrencies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getWithdrawableCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getWithdrawableCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationProtocolFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidatorFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_WETH9",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_ccys",
          "type": "bytes32[]"
        }
      ],
      "name": "isCollateral",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "isCollateralCurrencies",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "isCollateral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isCovered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_unsettledOrderCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_unsettledOrderAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_unsettledOrderSide",
          "type": "uint8"
        }
      ],
      "name": "isCovered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "isRegisteredCurrency",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isCollateral",
          "type": "bool"
        }
      ],
      "name": "registerCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeDepositAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "resetDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationProtocolFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidatorFeeRate",
          "type": "uint256"
        }
      ],
      "name": "setCollateralParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "untransferredAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_isCollateral",
          "type": "bool"
        }
      ],
      "name": "updateCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xcd48368981bece67dec92a3672fe8c8f174eab2cd8755e4bc54b4f83043ee9b1",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0xB6645Fbd7d3203b8870c391ac39F6532b0F0Af04",
    "transactionIndex": 13,
    "gasUsed": "2873155",
    "logsBloom": "0x
    "blockHash": "0x658da0da4fea07c72ec0bd7569b80c3a20c5df492253fec7c128af0aad1d0ac9",
    "transactionHash": "0xcd48368981bece67dec92a3672fe8c8f174eab2cd8755e4bc54b4f83043ee9b1",
    "logs": [],
    "blockNumber": 3731939,
    "cumulativeGasUsed": "4903119",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "b57600b51ef0b115c52371ee9eb0c58d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCollateral\",\"type\":\"bool\"}],\"name\":\"CurrencyRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCollateral\",\"type\":\"bool\"}],\"name\":\"CurrencyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralCurrencies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationProtocolFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidatorFeeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coverage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_liquidationCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationAmountMaximum\",\"type\":\"uint256\"}],\"name\":\"getLiquidationAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidatorFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateralAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getTotalDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUnusedCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUsedCurrencies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationProtocolFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidatorFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_WETH9\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_ccys\",\"type\":\"bytes32[]\"}],\"name\":\"isCollateral\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"isCollateralCurrencies\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"isCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isCovered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_unsettledOrderCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_unsettledOrderAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_unsettledOrderSide\",\"type\":\"uint8\"}],\"name\":\"isCovered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"isRegisteredCurrency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isCollateral\",\"type\":\"bool\"}],\"name\":\"registerCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"resetDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationProtocolFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidatorFeeRate\",\"type\":\"uint256\"}],\"name\":\"setCollateralParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"untransferredAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isCollateral\",\"type\":\"bool\"}],\"name\":\"updateCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptedContracts()\":{\"details\":\"The contact name listed in this method is also needed to be listed `requiredContracts` method.\"},\"addDepositAmount(address,bytes32,uint256)\":{\"details\":\"Adds deposit amount.\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"deposit(bytes32,uint256)\":{\"details\":\"Deposits funds by the caller into collateral.\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\"}},\"depositFrom(address,bytes32,uint256)\":{\"details\":\"Deposits funds by the `from` into collateral.\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\",\"_from\":\"user's address\"}},\"getCollateralCurrencies()\":{\"returns\":{\"_0\":\"Array of the currency accepted as collateral\"}},\"getCollateralParameters()\":{\"returns\":{\"liquidationProtocolFeeRate\":\"Liquidation fee rate received by protocol\",\"liquidationThresholdRate\":\"Auto liquidation threshold rate\",\"liquidatorFeeRate\":\"Liquidation fee rate received by liquidators\"}},\"getCoverage(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"coverage\":\"The rate of collateral used\"}},\"getDepositAmount(address,bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The deposited amount\"}},\"getLiquidationAmount(address,bytes32,uint256)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"liquidationAmount\":\"The the amount to be liquidated\"}},\"getTokenAddress(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The token contract address\"}},\"getTotalCollateralAmount(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"totalCollateralAmount\":\"The total collateral amount in ETH\"}},\"getTotalDepositAmount(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The total deposited amount\"}},\"getUnusedCollateral(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The total amount of unused collateral\"}},\"getUsedCurrencies(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The currency names in bytes32\"}},\"getWithdrawableCollateral(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"Maximum amount of ETH that can be withdrawn\"}},\"getWithdrawableCollateral(bytes32,address)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"Maximum amount of the selected currency that can be withdrawn\"}},\"initialize(address,address,uint256,uint256,uint256,address)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController.\",\"params\":{\"_WETH9\":\"The address of the wrapped token to use as base currency\",\"_liquidationProtocolFeeRate\":\"The liquidation fee rate received by protocol\",\"_liquidationThresholdRate\":\"The liquidation threshold rate\",\"_liquidatorFeeRate\":\"The liquidation fee rate received by liquidators\",\"_owner\":\"The address of the contract owner\",\"_resolver\":\"The address of the Address Resolver contract\"}},\"isCollateral(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The boolean if the currency has been registered or not\"}},\"isCollateral(bytes32[])\":{\"params\":{\"_ccys\":\"Currency name list in bytes32\"},\"returns\":{\"isCollateralCurrencies\":\"Array of the boolean if the currency has been registered or not\"}},\"isCovered(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The boolean if the collateral has sufficient coverage or not\"}},\"isCovered(address,bytes32,uint256,uint8)\":{\"params\":{\"_unsettledOrderAmount\":\"Additional unsettled order amount\",\"_unsettledOrderCcy\":\"Additional unsettled order currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The boolean if the collateral has sufficient coverage or not\"}},\"isRegisteredCurrency(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The boolean if the currency has been registered or not\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"registerCurrency(bytes32,address,bool)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_isCollateral\":\"Boolean if the selected currency is acceptable as collateral.\",\"_tokenAddress\":\"Token contract address of the selected currency\"}},\"removeDepositAmount(address,bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to withdraw.\",\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requiredContracts()\":{\"details\":\"The contract name list is in `./libraries/Contracts.sol`.\"},\"resetDepositAmount(address,bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"setCollateralParameters(uint256,uint256,uint256)\":{\"params\":{\"_liquidationProtocolFeeRate\":\"The liquidation fee rate received by protocol\",\"_liquidationThresholdRate\":\"The auto liquidation threshold rate\",\"_liquidatorFeeRate\":\"The liquidation fee rate received by liquidators\"}},\"transferFrom(bytes32,address,address,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to sent\",\"_ccy\":\"Currency name in bytes32\",\"_from\":\"Sender's address\",\"_to\":\"Receiver's address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCurrency(bytes32,bool)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_isCollateral\":\"Boolean if the selected currency is acceptable as collateral.\"}},\"withdraw(bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to withdraw.\",\"_ccy\":\"Currency name in bytes32\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptedContracts()\":{\"notice\":\"Returns contract names that can call this contract.\"},\"getCollateralCurrencies()\":{\"notice\":\"Gets the currencies accepted as collateral\"},\"getCollateralParameters()\":{\"notice\":\"Gets the collateral parameters\"},\"getCoverage(address)\":{\"notice\":\"Gets the rate of collateral used.\"},\"getDepositAmount(address,bytes32)\":{\"notice\":\"Gets the amount deposited in the user's collateral.\"},\"getLiquidationAmount(address,bytes32,uint256)\":{\"notice\":\"Gets the amount to be liquidated.\"},\"getTokenAddress(bytes32)\":{\"notice\":\"Gets the token contract address\"},\"getTotalCollateralAmount(address)\":{\"notice\":\"Gets the total collateral amount.\"},\"getTotalDepositAmount(bytes32)\":{\"notice\":\"Gets the total amount deposited of the selected currency\"},\"getUnusedCollateral(address)\":{\"notice\":\"Gets the total amount of the unused collateral\"},\"getUsedCurrencies(address)\":{\"notice\":\"Gets the currencies that the user used as collateral.\"},\"getWithdrawableCollateral(address)\":{\"notice\":\"Gets the maximum amount of ETH that can be withdrawn from user collateral.\"},\"getWithdrawableCollateral(bytes32,address)\":{\"notice\":\"Gets the maximum amount of the selected currency that can be withdrawn from user collateral.\"},\"initialize(address,address,uint256,uint256,uint256,address)\":{\"notice\":\"Initializes the contract.\"},\"isCollateral(bytes32)\":{\"notice\":\"Gets if the currency is acceptable as collateral\"},\"isCollateral(bytes32[])\":{\"notice\":\"Gets if the currencies are acceptable as collateral\"},\"isCovered(address)\":{\"notice\":\"Gets if the collateral has enough coverage.\"},\"isCovered(address,bytes32,uint256,uint8)\":{\"notice\":\"Gets if the collateral has enough coverage.\"},\"isRegisteredCurrency(bytes32)\":{\"notice\":\"Gets if the currency has been registered\"},\"pauseVault()\":{\"notice\":\"Pauses the token vault.\"},\"registerCurrency(bytes32,address,bool)\":{\"notice\":\"Registers new currency and sets if it is acceptable as collateral.\"},\"removeDepositAmount(address,bytes32,uint256)\":{\"notice\":\"Removes deposit amount.\"},\"requiredContracts()\":{\"notice\":\"Returns the contract names used in this contract.\"},\"resetDepositAmount(address,bytes32)\":{\"notice\":\"Resets deposit amount.\"},\"setCollateralParameters(uint256,uint256,uint256)\":{\"notice\":\"Sets main collateral parameters this function solves the issue of frontrunning during parameters tuning.Triggers only be contract owner\"},\"transferFrom(bytes32,address,address,uint256)\":{\"notice\":\"Transfers the token from sender to receiver.\"},\"unpauseVault()\":{\"notice\":\"Unpauses the token vault.\"},\"updateCurrency(bytes32,bool)\":{\"notice\":\"Updates the currency if it is acceptable as collateral.\"},\"withdraw(bytes32,uint256)\":{\"notice\":\"Withdraws funds by the caller from unused collateral.\"}},\"notice\":\"Implements the management of the token in each currency for users. This contract manages the following data related to tokens. - Deposited token amount as the collateral - Parameters related to the collateral   - Margin Call Threshold Rate   - Auto Liquidation Threshold Rate   - Liquidation Price Rate   - Min Collateral Rate To address a currency as collateral, it must be registered using `registerCurrency` method in this contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/TokenVault.sol\":\"TokenVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dependencies/chainlink/contracts/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Chainlink Contracts v0.4.0 (v0.8/interfaces/AggregatorV3Interface.sol)\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x81b0c18c07c8c031d5b34e4e41d2451b836355aad1b3c04c26578c92f73585f9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) ||\\n                (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(\\n            !_initializing && _initialized < version,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x47b358037bd02d2d68ae2f5685cf1f30af9d60de496258849b69a751a2ffdcde\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x21dc48f54af2ac9288ae3be6feb098ce4389a9392e52aa7056fab5f8b5a5e232\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/protocol/TokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n// libraries\\nimport {Contracts} from \\\"./libraries/Contracts.sol\\\";\\nimport {Constants} from \\\"./libraries/Constants.sol\\\";\\nimport {CollateralParametersHandler as Params} from \\\"./libraries/CollateralParametersHandler.sol\\\";\\nimport {ERC20Handler} from \\\"./libraries/ERC20Handler.sol\\\";\\nimport {DepositManagementLogic} from \\\"./libraries/logics/DepositManagementLogic.sol\\\";\\n// interfaces\\nimport {ITokenVault} from \\\"./interfaces/ITokenVault.sol\\\";\\n// mixins\\nimport {MixinAddressResolver} from \\\"./mixins/MixinAddressResolver.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"./types/ProtocolTypes.sol\\\";\\n// utils\\nimport {Ownable} from \\\"./utils/Ownable.sol\\\";\\nimport {Pausable} from \\\"./utils/Pausable.sol\\\";\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\n// storages\\nimport {TokenVaultStorage as Storage} from \\\"./storages/TokenVaultStorage.sol\\\";\\n\\n/**\\n * @notice Implements the management of the token in each currency for users.\\n *\\n * This contract manages the following data related to tokens.\\n * - Deposited token amount as the collateral\\n * - Parameters related to the collateral\\n *   - Margin Call Threshold Rate\\n *   - Auto Liquidation Threshold Rate\\n *   - Liquidation Price Rate\\n *   - Min Collateral Rate\\n *\\n * To address a currency as collateral, it must be registered using `registerCurrency` method in this contract.\\n */\\ncontract TokenVault is ITokenVault, MixinAddressResolver, Ownable, Pausable, Proxyable {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    /**\\n     * @notice Modifier to check if currency hasn't been registered yet\\n     * @param _ccy Currency name in bytes32\\n     */\\n    modifier onlyRegisteredCurrency(bytes32 _ccy) {\\n        require(isRegisteredCurrency(_ccy), \\\"Currency not registered\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\\n     * @param _owner The address of the contract owner\\n     * @param _resolver The address of the Address Resolver contract\\n     * @param _liquidationThresholdRate The liquidation threshold rate\\n     * @param _liquidationProtocolFeeRate The liquidation fee rate received by protocol\\n     * @param _liquidatorFeeRate The liquidation fee rate received by liquidators\\n     * @param _WETH9 The address of the wrapped token to use as base currency\\n     */\\n    function initialize(\\n        address _owner,\\n        address _resolver,\\n        uint256 _liquidationThresholdRate,\\n        uint256 _liquidationProtocolFeeRate,\\n        uint256 _liquidatorFeeRate,\\n        address _WETH9\\n    ) public initializer onlyProxy {\\n        _transferOwnership(_owner);\\n        registerAddressResolver(_resolver);\\n\\n        ERC20Handler.initialize(_WETH9);\\n        Params.setCollateralParameters(\\n            _liquidationThresholdRate,\\n            _liquidationProtocolFeeRate,\\n            _liquidatorFeeRate\\n        );\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](3);\\n        contracts[0] = Contracts.CURRENCY_CONTROLLER;\\n        contracts[1] = Contracts.LENDING_MARKET_CONTROLLER;\\n        contracts[2] = Contracts.RESERVE_FUND;\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](2);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n        contracts[1] = Contracts.RESERVE_FUND;\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == ERC20Handler.baseCurrency(), \\\"Not base currency\\\");\\n    }\\n\\n    /**\\n     * @notice Gets if the collateral has enough coverage.\\n     * @param _user User's address\\n     * @param _unsettledOrderCcy Additional unsettled order currency name in bytes32\\n     * @param _unsettledOrderAmount Additional unsettled order amount\\n     * @return The boolean if the collateral has sufficient coverage or not\\n     */\\n    function isCovered(\\n        address _user,\\n        bytes32 _unsettledOrderCcy,\\n        uint256 _unsettledOrderAmount,\\n        ProtocolTypes.Side _unsettledOrderSide\\n    ) external view override returns (bool) {\\n        return\\n            DepositManagementLogic.isCovered(\\n                _user,\\n                _unsettledOrderCcy,\\n                _unsettledOrderAmount,\\n                ProtocolTypes.Side.BORROW == _unsettledOrderSide\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets if the collateral has enough coverage.\\n     * @param _user User's address\\n     * @return The boolean if the collateral has sufficient coverage or not\\n     */\\n    function isCovered(address _user) public view override returns (bool) {\\n        return DepositManagementLogic.isCovered(_user, \\\"\\\", 0, false);\\n    }\\n\\n    /**\\n     * @notice Gets if the currency is acceptable as collateral\\n     * @param _ccy Currency name in bytes32\\n     * @return The boolean if the currency has been registered or not\\n     */\\n    function isCollateral(bytes32 _ccy) public view override returns (bool) {\\n        return Storage.slot().collateralCurrencies.contains(_ccy);\\n    }\\n\\n    /**\\n     * @notice Gets if the currencies are acceptable as collateral\\n     * @param _ccys Currency name list in bytes32\\n     * @return isCollateralCurrencies Array of the boolean if the currency has been registered or not\\n     */\\n    function isCollateral(bytes32[] calldata _ccys)\\n        external\\n        view\\n        override\\n        returns (bool[] memory isCollateralCurrencies)\\n    {\\n        isCollateralCurrencies = new bool[](_ccys.length);\\n        for (uint256 i = 0; i < _ccys.length; i++) {\\n            isCollateralCurrencies[i] = isCollateral(_ccys[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets if the currency has been registered\\n     * @param _ccy Currency name in bytes32\\n     * @return The boolean if the currency has been registered or not\\n     */\\n    function isRegisteredCurrency(bytes32 _ccy) public view override returns (bool) {\\n        return Storage.slot().tokenAddresses[_ccy] != address(0);\\n    }\\n\\n    /**\\n     * @notice Gets the token contract address\\n     * @param _ccy Currency name in bytes32\\n     * @return The token contract address\\n     */\\n    function getTokenAddress(bytes32 _ccy) public view override returns (address) {\\n        return Storage.slot().tokenAddresses[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the currencies accepted as collateral\\n     * @return Array of the currency accepted as collateral\\n     */\\n    function getCollateralCurrencies() external view override returns (bytes32[] memory) {\\n        return Storage.slot().collateralCurrencies.values();\\n    }\\n\\n    /**\\n     * @notice Gets the maximum amount of ETH that can be withdrawn from user collateral.\\n     * @param _user User's address\\n     * @return Maximum amount of ETH that can be withdrawn\\n     */\\n    function getWithdrawableCollateral(address _user) external view override returns (uint256) {\\n        return DepositManagementLogic.getWithdrawableCollateral(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the maximum amount of the selected currency that can be withdrawn from user collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _user User's address\\n     * @return Maximum amount of the selected currency that can be withdrawn\\n     */\\n    function getWithdrawableCollateral(bytes32 _ccy, address _user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return DepositManagementLogic.getWithdrawableCollateral(_ccy, _user);\\n    }\\n\\n    /**\\n     * @notice Gets the rate of collateral used.\\n     * @param _user User's address\\n     * @return coverage The rate of collateral used\\n     */\\n    function getCoverage(address _user) external view override returns (uint256 coverage) {\\n        (uint256 totalCollateral, uint256 totalUsedCollateral, ) = DepositManagementLogic\\n            .getCollateralAmount(_user);\\n\\n        if (totalCollateral == 0) {\\n            coverage = totalUsedCollateral == 0 ? 0 : type(uint256).max;\\n        } else {\\n            coverage = (totalUsedCollateral * Constants.PCT_DIGIT) / totalCollateral;\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the total amount of the unused collateral\\n     * @param _user User's address\\n     * @return The total amount of unused collateral\\n     */\\n    function getUnusedCollateral(address _user) external view override returns (uint256) {\\n        (uint256 totalCollateral, uint256 totalUsedCollateral, ) = DepositManagementLogic\\n            .getCollateralAmount(_user);\\n\\n        return totalCollateral > totalUsedCollateral ? totalCollateral - totalUsedCollateral : 0;\\n    }\\n\\n    /**\\n     * @notice Gets the total collateral amount.\\n     * @param _user User's address\\n     * @return totalCollateralAmount The total collateral amount in ETH\\n     */\\n    function getTotalCollateralAmount(address _user)\\n        public\\n        view\\n        override\\n        returns (uint256 totalCollateralAmount)\\n    {\\n        (totalCollateralAmount, , ) = DepositManagementLogic.getCollateralAmount(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the amount to be liquidated.\\n     * @param _user User's address\\n     * @return liquidationAmount The the amount to be liquidated\\n     */\\n    function getLiquidationAmount(\\n        address _user,\\n        bytes32 _liquidationCcy,\\n        uint256 _liquidationAmountMaximum\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 liquidationAmount,\\n            uint256 protocolFee,\\n            uint256 liquidatorFee\\n        )\\n    {\\n        return\\n            DepositManagementLogic.getLiquidationAmount(\\n                _user,\\n                _liquidationCcy,\\n                _liquidationAmountMaximum\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets the total amount deposited of the selected currency\\n     * @param _ccy Currency name in bytes32\\n     * @return The total deposited amount\\n     */\\n    function getTotalDepositAmount(bytes32 _ccy) external view override returns (uint256) {\\n        return Storage.slot().totalDepositAmount[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the amount deposited in the user's collateral.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @return The deposited amount\\n     */\\n    function getDepositAmount(address _user, bytes32 _ccy)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return DepositManagementLogic.getDepositAmount(_user, _ccy);\\n    }\\n\\n    /**\\n     * @notice Gets the currencies that the user used as collateral.\\n     * @param _user User's address\\n     * @return The currency names in bytes32\\n     */\\n    function getUsedCurrencies(address _user) public view override returns (bytes32[] memory) {\\n        return DepositManagementLogic.getUsedCurrencies(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the collateral parameters\\n     * @return liquidationThresholdRate Auto liquidation threshold rate\\n     * @return liquidationProtocolFeeRate Liquidation fee rate received by protocol\\n     * @return liquidatorFeeRate Liquidation fee rate received by liquidators\\n     */\\n    function getCollateralParameters()\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 liquidationThresholdRate,\\n            uint256 liquidationProtocolFeeRate,\\n            uint256 liquidatorFeeRate\\n        )\\n    {\\n        liquidationThresholdRate = Params.liquidationThresholdRate();\\n        liquidationProtocolFeeRate = Params.liquidationProtocolFeeRate();\\n        liquidatorFeeRate = Params.liquidatorFeeRate();\\n    }\\n\\n    /**\\n     * @notice Registers new currency and sets if it is acceptable as collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _tokenAddress Token contract address of the selected currency\\n     * @param _isCollateral Boolean if the selected currency is acceptable as collateral.\\n     */\\n    function registerCurrency(\\n        bytes32 _ccy,\\n        address _tokenAddress,\\n        bool _isCollateral\\n    ) external onlyOwner {\\n        require(currencyController().currencyExists(_ccy), \\\"Invalid currency\\\");\\n\\n        Storage.slot().tokenAddresses[_ccy] = _tokenAddress;\\n        if (_isCollateral) {\\n            Storage.slot().collateralCurrencies.add(_ccy);\\n        }\\n\\n        emit CurrencyRegistered(_ccy, _tokenAddress, _isCollateral);\\n    }\\n\\n    /**\\n     * @notice Updates the currency if it is acceptable as collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _isCollateral Boolean if the selected currency is acceptable as collateral.\\n     */\\n    function updateCurrency(bytes32 _ccy, bool _isCollateral)\\n        external\\n        onlyOwner\\n        onlyRegisteredCurrency(_ccy)\\n    {\\n        if (_isCollateral) {\\n            Storage.slot().collateralCurrencies.add(_ccy);\\n        } else {\\n            Storage.slot().collateralCurrencies.remove(_ccy);\\n        }\\n\\n        emit CurrencyUpdated(_ccy, _isCollateral);\\n    }\\n\\n    /**\\n     * @dev Deposits funds by the caller into collateral.\\n     * @param _amount Amount of funds to deposit\\n     * @param _ccy Currency name in bytes32\\n     */\\n    function deposit(bytes32 _ccy, uint256 _amount)\\n        external\\n        payable\\n        override\\n        whenNotPaused\\n        onlyRegisteredCurrency(_ccy)\\n    {\\n        _deposit(msg.sender, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @dev Deposits funds by the `from` into collateral.\\n     * @param _from user's address\\n     * @param _amount Amount of funds to deposit\\n     * @param _ccy Currency name in bytes32\\n     */\\n    function depositFrom(\\n        address _from,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external payable override whenNotPaused onlyAcceptedContracts {\\n        _deposit(_from, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws funds by the caller from unused collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to withdraw.\\n     */\\n    function withdraw(bytes32 _ccy, uint256 _amount)\\n        external\\n        override\\n        whenNotPaused\\n        onlyRegisteredCurrency(_ccy)\\n    {\\n        _withdraw(msg.sender, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @dev Adds deposit amount.\\n     * @param _user User's address\\n     * @param _amount Amount of funds to deposit\\n     * @param _ccy Currency name in bytes32\\n     */\\n    function addDepositAmount(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external override whenNotPaused onlyAcceptedContracts onlyRegisteredCurrency(_ccy) {\\n        DepositManagementLogic.addDepositAmount(_user, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Removes deposit amount.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to withdraw.\\n     */\\n    function removeDepositAmount(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external override whenNotPaused onlyAcceptedContracts onlyRegisteredCurrency(_ccy) {\\n        DepositManagementLogic.removeDepositAmount(_user, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Resets deposit amount.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     */\\n    function resetDepositAmount(address _user, bytes32 _ccy)\\n        external\\n        onlyAcceptedContracts\\n        onlyRegisteredCurrency(_ccy)\\n        returns (uint256)\\n    {\\n        return DepositManagementLogic.resetDepositAmount(_user, _ccy);\\n    }\\n\\n    /**\\n     * @notice Transfers the token from sender to receiver.\\n     * @param _ccy Currency name in bytes32\\n     * @param _from Sender's address\\n     * @param _to Receiver's address\\n     * @param _amount Amount of funds to sent\\n     */\\n    function transferFrom(\\n        bytes32 _ccy,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        onlyAcceptedContracts\\n        onlyRegisteredCurrency(_ccy)\\n        returns (uint256 untransferredAmount)\\n    {\\n        untransferredAmount = DepositManagementLogic.transferFrom(_ccy, _from, _to, _amount);\\n        emit Transfer(_ccy, _from, _to, _amount - untransferredAmount);\\n    }\\n\\n    /**\\n     * @notice Sets main collateral parameters this function\\n     * solves the issue of frontrunning during parameters tuning.\\n     *\\n     * @param _liquidationThresholdRate The auto liquidation threshold rate\\n     * @param _liquidationProtocolFeeRate The liquidation fee rate received by protocol\\n     * @param _liquidatorFeeRate The liquidation fee rate received by liquidators\\n     * @notice Triggers only be contract owner\\n     */\\n    function setCollateralParameters(\\n        uint256 _liquidationThresholdRate,\\n        uint256 _liquidationProtocolFeeRate,\\n        uint256 _liquidatorFeeRate\\n    ) external override onlyOwner {\\n        Params.setCollateralParameters(\\n            _liquidationThresholdRate,\\n            _liquidationProtocolFeeRate,\\n            _liquidatorFeeRate\\n        );\\n    }\\n\\n    /**\\n     * @notice Pauses the token vault.\\n     */\\n    function pauseVault() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses the token vault.\\n     */\\n    function unpauseVault() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    function _deposit(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n        require(\\n            Storage.slot().tokenAddresses[_ccy] != ERC20Handler.baseCurrency() ||\\n                _amount == msg.value,\\n            \\\"Invalid amount\\\"\\n        );\\n        require(!lendingMarketController().isTerminated(), \\\"Market terminated\\\");\\n\\n        DepositManagementLogic.deposit(_user, _ccy, _amount);\\n\\n        emit Deposit(_user, _ccy, _amount);\\n    }\\n\\n    function _withdraw(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n        require(!lendingMarketController().isRedemptionRequired(_user), \\\"Redemption is required\\\");\\n\\n        lendingMarketController().cleanUpFunds(_ccy, _user);\\n        uint256 withdrawableAmount = DepositManagementLogic.withdraw(_user, _ccy, _amount);\\n\\n        emit Withdraw(_user, _ccy, withdrawableAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xc33e6c730b08fe8263bdb5c101cf451261d28ebd34495b26000b4a8df3c022f8\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IBeaconProxyController {\\n    event BeaconProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function deployFutureValueVault() external returns (address futureValueVault);\\n\\n    function deployLendingMarket(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 openingDate\\n    ) external returns (address market);\\n}\\n\",\"keccak256\":\"0xcedc431629fa9537e673fc37ceae4cc645cf1f4ff9071b05396b9e3944ce6dd9\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Currency} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CurrencyAdded(bytes32 indexed ccy, uint256 haircut);\\n    event CurrencyRemoved(bytes32 indexed ccy);\\n\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n\\n    event PriceFeedUpdated(bytes32 ccy, uint256 decimals, address[] indexed priceFeeds);\\n    event PriceFeedRemoved(bytes32 ccy);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256 _amount\\n    ) external view returns (uint256 amount);\\n\\n    function convertFromBaseCurrency(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, uint256 _amount)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, int256 _amount)\\n        external\\n        view\\n        returns (int256 amount);\\n\\n    function convertToBaseCurrency(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getBaseCurrency() external view returns (bytes32);\\n\\n    function getDecimals(bytes32) external view returns (uint8);\\n\\n    function getCurrencies() external view returns (bytes32[] memory);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getLastPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function currencyExists(bytes32 _ccy) external view returns (bool);\\n\\n    function updatePriceFeed(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        address[] calldata _priceFeeds\\n    ) external;\\n\\n    function removePriceFeed(bytes32 _ccy) external;\\n\\n    function addCurrency(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        uint256 _haircut,\\n        address[] calldata _priceFeeds\\n    ) external;\\n\\n    function updateHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function removeCurrency(bytes32 _ccy) external;\\n}\\n\",\"keccak256\":\"0xabd4040d990a6af80ce27496a643e167de301ef11dea8f1281755a4936712b39\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AutoRollLog} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\\n    event AutoRollExecuted(\\n        bytes32 indexed ccy,\\n        uint256 lendingCompoundFactor,\\n        uint256 borrowingCompoundFactor,\\n        uint256 unitPrice,\\n        uint256 currentMaturity,\\n        uint256 previousMaturity\\n    );\\n\\n    function isInitialized(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getMaturityGenesisValue(bytes32 _ccy, uint256 _maturity)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getAutoRollLog(bytes32 ccy, uint256 maturity)\\n        external\\n        view\\n        returns (AutoRollLog memory);\\n\\n    function getLatestAutoRollLog(bytes32 _ccy) external view returns (AutoRollLog memory);\\n\\n    function getGenesisValueInFutureValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function calculateFVFromFV(\\n        bytes32 _ccy,\\n        uint256 _basisMaturity,\\n        uint256 _destinationMaturity,\\n        int256 _futureValue\\n    ) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function getBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function calculateBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        int256 balance,\\n        uint256 fromMaturity,\\n        uint256 toMaturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function initializeCurrencySetting(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor,\\n        uint256 maturity\\n    ) external;\\n\\n    function updateInitialCompoundFactor(bytes32 _ccy, uint256 _unitPrice) external;\\n\\n    function executeAutoRoll(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice,\\n        uint256 feeRate\\n    ) external;\\n\\n    function updateGenesisValueWithFutureValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 fvAmount\\n    ) external;\\n\\n    function updateGenesisValueWithResidualAmount(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity\\n    ) external;\\n\\n    function transferFrom(\\n        bytes32 _ccy,\\n        address _sender,\\n        address _receiver,\\n        int256 _amount\\n    ) external;\\n\\n    function cleanUpGenesisValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external;\\n\\n    function resetGenesisValue(bytes32 _ccy, address _user) external;\\n}\\n\",\"keccak256\":\"0xe7f448ce594b9503483dd8071d18c3123022a6add49ca9878bde17a8e71078df\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ILendingMarketController {\\n    struct Order {\\n        uint48 orderId;\\n        bytes32 ccy;\\n        uint256 maturity;\\n        ProtocolTypes.Side side;\\n        uint256 unitPrice;\\n        uint256 amount;\\n        uint256 timestamp;\\n    }\\n\\n    struct Position {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        int256 presentValue;\\n        int256 futureValue;\\n    }\\n\\n    function isTerminated() external view returns (bool);\\n\\n    function isRedemptionRequired(address _user) external view returns (bool);\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarkets(bytes32 ccy) external view returns (address[] memory);\\n\\n    function getLendingMarket(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getBorrowUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getLendUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getMidUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getBorrowOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInBaseCurrency(address user)\\n        external\\n        view\\n        returns (int256 totalPresentValue);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256 genesisValue);\\n\\n    function getOrders(bytes32[] memory ccys, address user)\\n        external\\n        view\\n        returns (Order[] memory activeOrders, Order[] memory inactiveOrders);\\n\\n    function getPosition(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) external view returns (int256 presentValue, int256 futureValue);\\n\\n    function getPositions(bytes32[] memory ccys, address user)\\n        external\\n        view\\n        returns (Position[] memory positions);\\n\\n    function calculateFunds(bytes32 ccy, address user)\\n        external\\n        view\\n        returns (\\n            uint256 workingLendOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 collateralAmount,\\n            uint256 lentAmount,\\n            uint256 workingBorrowOrdersAmount,\\n            uint256 debtAmount,\\n            uint256 borrowedAmount\\n        );\\n\\n    function calculateTotalFundsInBaseCurrency(\\n        address user,\\n        bytes32 depositCcy,\\n        uint256 depositAmount\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalWorkingLendOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalCollateralAmount,\\n            uint256 totalLentAmount,\\n            uint256 totalWorkingBorrowOrdersAmount,\\n            uint256 totalDebtAmount,\\n            uint256 totalBorrowedAmount,\\n            bool isEnoughDeposit\\n        );\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor,\\n        uint256 orderFeeRate,\\n        uint256 autoRollFeeRate,\\n        uint256 circuitBreakerLimitRange\\n    ) external;\\n\\n    function createLendingMarket(bytes32 ccy, uint256 marketOpeningDate) external;\\n\\n    function createOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndCreateOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function createPreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndCreatePreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function unwindPosition(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function executeItayoseCalls(bytes32[] memory currencies, uint256 maturity)\\n        external\\n        returns (bool);\\n\\n    function executeRedemption() external returns (bool);\\n\\n    function executeLiquidationCall(\\n        bytes32 collateralCcy,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        address user\\n    ) external returns (bool);\\n\\n    function cancelOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint48 orderId\\n    ) external returns (bool);\\n\\n    function rotateLendingMarkets(bytes32 ccy) external;\\n\\n    function executeEmergencyTermination() external;\\n\\n    function pauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function cleanUpAllFunds(address user) external returns (bool);\\n\\n    function cleanUpFunds(bytes32 ccy, address user) external returns (uint256 activeOrderCount);\\n}\\n\",\"keccak256\":\"0x7b60ff6d937724aabc6c190813ea595849a3cd56bc181b864e9408492eb87b57\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IReserveFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IReserveFund {\\n    event Pause(address account);\\n    event Unpause(address account);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function executeRedemption() external;\\n}\\n\",\"keccak256\":\"0x748fa412f6e9c1ac2b5556415a3b653dc6f7959bffcf4c375ad34d3eb7c3e85c\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ITokenVault {\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress, bool isCollateral);\\n    event CurrencyUpdated(bytes32 ccy, bool isCollateral);\\n\\n    function isCovered(\\n        address user,\\n        bytes32 ccy,\\n        uint256 unsettledExp,\\n        ProtocolTypes.Side unsettledOrderSide\\n    ) external view returns (bool);\\n\\n    function isCovered(address user) external view returns (bool);\\n\\n    function isCollateral(bytes32 ccy) external view returns (bool);\\n\\n    function isCollateral(bytes32[] calldata ccys)\\n        external\\n        view\\n        returns (bool[] memory isCollateralCurrencies);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getTokenAddress(bytes32 ccy) external view returns (address);\\n\\n    function getCollateralCurrencies() external view returns (bytes32[] memory);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256 maxWithdraw);\\n\\n    function getWithdrawableCollateral(bytes32 ccy, address user) external view returns (uint256);\\n\\n    function getCoverage(address user) external view returns (uint256 coverage);\\n\\n    function getUnusedCollateral(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address party) external view returns (uint256);\\n\\n    function getLiquidationAmount(\\n        address user,\\n        bytes32 liquidationCcy,\\n        uint256 liquidationAmountMaximum\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liquidationAmount,\\n            uint256 protocolFee,\\n            uint256 liquidatorFee\\n        );\\n\\n    function getTotalDepositAmount(bytes32 ccy) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getCollateralParameters()\\n        external\\n        view\\n        returns (\\n            uint256 liquidationThresholdRate,\\n            uint256 liquidationProtocolFeeRate,\\n            uint256 liquidatorFeeRate\\n        );\\n\\n    function setCollateralParameters(\\n        uint256 liquidationThresholdRate,\\n        uint256 liquidationProtocolFeeRate,\\n        uint256 liquidatorFeeRate\\n    ) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositFrom(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function removeDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function resetDepositAmount(address user, bytes32 ccy) external returns (uint256 removedAmount);\\n\\n    function transferFrom(\\n        bytes32 ccy,\\n        address sender,\\n        address receiver,\\n        uint256 amount\\n    ) external returns (uint256 untransferredAmount);\\n\\n    function pauseVault() external;\\n\\n    function unpauseVault() external;\\n}\\n\",\"keccak256\":\"0xb0540cf51feee3bf0b4aa0db9d4c9d6367018feb63b1a45ff32efc1dc7d247d0\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH9 is IERC20 {\\n    event Deposit(address user, uint256 amount);\\n    event Withdrawal(address user, uint256 amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x512b32f84e7449918dfdd6736dfca9270cf88f5c107d71c997d7f2f9d843c0ed\",\"license\":\"MIT\"},\"contracts/protocol/libraries/AddressResolverLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/MixinAddressResolverStorage.sol\\\";\\n\\nlibrary AddressResolverLib {\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return IReserveFund(getAddress(Contracts.RESERVE_FUND));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0x65d55399d6c8b753ddaa36c1370fae1c68dfbfb8b6b2d09b1717ba037b079998\",\"license\":\"MIT\"},\"contracts/protocol/libraries/CollateralParametersHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {CollateralParametersStorage as Storage} from \\\"../storages/CollateralParametersStorage.sol\\\";\\nimport {Constants} from \\\"../libraries/Constants.sol\\\";\\n\\n/**\\n * @notice CollateralParametersHandler is an library to handle the main collateral parameters.\\n */\\nlibrary CollateralParametersHandler {\\n    event AutoLiquidationThresholdRateUpdated(uint256 previousRate, uint256 ratio);\\n    event LiquidationProtocolFeeRateUpdated(uint256 previousRate, uint256 ratio);\\n    event LiquidatorFeeRateUpdated(uint256 previousRate, uint256 ratio);\\n\\n    /**\\n     * @dev Gets the liquidation threshold rate\\n     * @return The liquidation threshold rate\\n     */\\n    function liquidationThresholdRate() internal view returns (uint256) {\\n        return Storage.slot().liquidationThresholdRate;\\n    }\\n\\n    /**\\n     * @dev Gets the liquidation fee received by liquidators\\n     * @return The liquidation fee received by liquidators\\n     */\\n    function liquidatorFeeRate() internal view returns (uint256) {\\n        return Storage.slot().liquidatorFeeRate;\\n    }\\n\\n    /**\\n     * @dev Gets the liquidation protocol fee received by protocol\\n     * @return The liquidation protocol fee received by protocol\\n     */\\n    function liquidationProtocolFeeRate() internal view returns (uint256) {\\n        return Storage.slot().liquidationProtocolFeeRate;\\n    }\\n\\n    /**\\n     * @dev Sets main collateral parameters this function\\n     * solves the issue of frontrunning during parameters tuning\\n     * @param _liquidationThresholdRate The liquidation threshold rate\\n     * @param _liquidationProtocolFeeRate The liquidation fee rate received by protocol\\n     * @param _liquidatorFeeRate The liquidation fee rate received by liquidators\\n     * @notice Triggers only be contract owner\\n     */\\n    function setCollateralParameters(\\n        uint256 _liquidationThresholdRate,\\n        uint256 _liquidationProtocolFeeRate,\\n        uint256 _liquidatorFeeRate\\n    ) internal {\\n        require(_liquidationThresholdRate > 0, \\\"Invalid liquidation threshold rate\\\");\\n        require(\\n            _liquidationProtocolFeeRate <= Constants.PCT_DIGIT,\\n            \\\"Invalid liquidation protocol fee rate\\\"\\n        );\\n        require(_liquidatorFeeRate <= Constants.PCT_DIGIT, \\\"Invalid liquidator fee rate\\\");\\n\\n        if (_liquidationThresholdRate != Storage.slot().liquidationThresholdRate) {\\n            emit AutoLiquidationThresholdRateUpdated(\\n                Storage.slot().liquidationThresholdRate,\\n                _liquidationThresholdRate\\n            );\\n            Storage.slot().liquidationThresholdRate = _liquidationThresholdRate;\\n        }\\n\\n        if (_liquidationProtocolFeeRate != Storage.slot().liquidationProtocolFeeRate) {\\n            emit LiquidationProtocolFeeRateUpdated(\\n                Storage.slot().liquidationProtocolFeeRate,\\n                _liquidationProtocolFeeRate\\n            );\\n            Storage.slot().liquidationProtocolFeeRate = _liquidationProtocolFeeRate;\\n        }\\n\\n        if (_liquidatorFeeRate != Storage.slot().liquidatorFeeRate) {\\n            Storage.slot().liquidatorFeeRate = _liquidatorFeeRate;\\n            emit LiquidatorFeeRateUpdated(Storage.slot().liquidatorFeeRate, _liquidatorFeeRate);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x30f9c89f3a4cdd767035775b2632ce0770aa71305d5ac5510d905d855aa8758d\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Constants {\\n    /// @dev Used for price digits in the basis (10000 -> 1)\\n    uint256 public constant PRICE_DIGIT = 10000;\\n\\n    /// @dev Used for percentage digits in the basis (10000 -> 100%)\\n    uint256 public constant PCT_DIGIT = 10000;\\n\\n    /// @dev Used for seconds in year (60 * 60 * 24 * 365)\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000;\\n\\n    /// @dev Used for maximum order count per currency\\n    uint256 internal constant MAXIMUM_ORDER_COUNT = 20;\\n\\n    /// @dev Used for minimum threshold for circuit breaker unitprice threshold\\n    uint256 public constant MINIMUM_CIRCUIT_BREAKER_THRESHOLD = 10;\\n\\n    /// @dev Used for maximum threshold for circuit breaker unitprice threshold\\n    uint256 public constant MAXIMUM_CIRCUIT_BREAKER_THRESHOLD = 200;\\n}\\n\",\"keccak256\":\"0xf788305f2623b66237164c053a4c44ed2b97ea3a60d4500407b2eb56a08f65ba\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant RESERVE_FUND = \\\"ReserveFund\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE_VAULT = \\\"FutureValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0x8e73eead72efa03bcc03c1cdf72cdcebed0f7e6f5a58cda1fd74e0fc03f356e6\",\"license\":\"MIT\"},\"contracts/protocol/libraries/ERC20Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IWETH9} from \\\"../interfaces/IWETH9.sol\\\";\\nimport {ERC20HandlerStorage as Storage} from \\\"../storages/ERC20HandlerStorage.sol\\\";\\n\\nlibrary ERC20Handler {\\n    function initialize(address _baseCurrency) internal {\\n        require(Storage.slot().baseCurrency == address(0), \\\"Already initialized\\\");\\n        Storage.slot().baseCurrency = _baseCurrency;\\n    }\\n\\n    function baseCurrency() internal view returns (address) {\\n        return Storage.slot().baseCurrency;\\n    }\\n\\n    function depositAssets(\\n        address _token,\\n        address _payer,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == Storage.slot().baseCurrency) {\\n            convertToWrappedToken(_receiver, _amount);\\n        } else {\\n            safeTransferFrom(_token, _payer, _receiver, _amount);\\n        }\\n    }\\n\\n    function withdrawAssets(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == Storage.slot().baseCurrency) {\\n            convertFromWrappedToken(_receiver, _amount);\\n        } else {\\n            safeTransfer(_token, _receiver, _amount);\\n        }\\n    }\\n\\n    function convertToWrappedToken(address _receiver, uint256 _amount) internal {\\n        require(address(this).balance >= _amount, \\\"Insufficient balance\\\");\\n\\n        IWETH9(Storage.slot().baseCurrency).deposit{value: _amount}();\\n        IWETH9(Storage.slot().baseCurrency).transfer(_receiver, _amount);\\n    }\\n\\n    function convertFromWrappedToken(address _receiver, uint256 _amount) internal {\\n        uint256 balance = IWETH9(Storage.slot().baseCurrency).balanceOf(address(this));\\n        require(balance >= _amount, \\\"Insufficient balance\\\");\\n\\n        if (balance > 0) {\\n            IWETH9(Storage.slot().baseCurrency).withdraw(_amount);\\n            safeTransferETH(_receiver, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer helper from UniswapV2 Router\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    /**\\n     * There are many non-compliant ERC20 tokens... this can handle most, adapted from UniSwap V2\\n     * Im trying to make it a habit to put external calls last (reentrancy)\\n     * You can put this in an internal function if you like.\\n     */\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // 0xa9059cbb = bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n            abi.encodeWithSelector(0xa9059cbb, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        ); // ERC20 Transfer failed\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x7276a19ce65169e2b5266c0f2078925734dcf5a906457f28bf6eb9265844b3e3\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/DepositManagementLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"../../../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n// libraries\\nimport {AddressResolverLib} from \\\"../AddressResolverLib.sol\\\";\\nimport {CollateralParametersHandler as Params} from \\\"../CollateralParametersHandler.sol\\\";\\nimport {ERC20Handler} from \\\"../ERC20Handler.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\n// storages\\nimport {TokenVaultStorage as Storage} from \\\"../../storages/TokenVaultStorage.sol\\\";\\n\\nlibrary DepositManagementLogic {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using RoundingUint256 for uint256;\\n\\n    struct CalculatedFundVars {\\n        uint256 workingLendOrdersAmount;\\n        uint256 collateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n        bool isEnoughDeposit;\\n    }\\n\\n    function isCovered(\\n        address _user,\\n        bytes32 _unsettledOrderCcy,\\n        uint256 _unsettledOrderAmount,\\n        bool _isUnsettledBorrowOrder\\n    ) public view returns (bool) {\\n        (uint256 totalCollateral, uint256 totalUsedCollateral, ) = getCollateralAmount(\\n            _user,\\n            _unsettledOrderCcy,\\n            _unsettledOrderAmount,\\n            _isUnsettledBorrowOrder\\n        );\\n\\n        return\\n            totalUsedCollateral == 0 ||\\n            (totalCollateral * Constants.PCT_DIGIT >=\\n                totalUsedCollateral * Params.liquidationThresholdRate());\\n    }\\n\\n    function getUsedCurrencies(address _user) public view returns (bytes32[] memory) {\\n        EnumerableSet.Bytes32Set storage currencySet = Storage.slot().usedCurrencies[_user];\\n\\n        uint256 numCurrencies = currencySet.length();\\n        bytes32[] memory currencies = new bytes32[](numCurrencies);\\n\\n        for (uint256 i = 0; i < numCurrencies; i++) {\\n            bytes32 currency = currencySet.at(i);\\n            currencies[i] = currency;\\n        }\\n\\n        return currencies;\\n    }\\n\\n    function getDepositAmount(address _user, bytes32 _ccy) public view returns (uint256) {\\n        (\\n            uint256 workingLendOrdersAmount,\\n            ,\\n            ,\\n            uint256 lentAmount,\\n            ,\\n            ,\\n            uint256 borrowedAmount\\n        ) = AddressResolverLib.lendingMarketController().calculateFunds(_ccy, _user);\\n\\n        return\\n            Storage.slot().depositAmounts[_user][_ccy] +\\n            borrowedAmount -\\n            lentAmount -\\n            workingLendOrdersAmount;\\n    }\\n\\n    function getCollateralAmount(address _user)\\n        public\\n        view\\n        returns (\\n            uint256 totalCollateral,\\n            uint256 totalUsedCollateral,\\n            uint256 totalActualCollateral\\n        )\\n    {\\n        return getCollateralAmount(_user, \\\"\\\", 0, false);\\n    }\\n\\n    function getCollateralAmount(\\n        address _user,\\n        bytes32 _unsettledOrderCcy,\\n        uint256 _unsettledOrderAmount,\\n        bool _isUnsettledBorrowOrder\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 totalCollateral,\\n            uint256 totalUsedCollateral,\\n            uint256 totalActualCollateral\\n        )\\n    {\\n        CalculatedFundVars memory vars;\\n\\n        uint256 depositAmount = Storage.slot().depositAmounts[_user][_unsettledOrderCcy];\\n        uint256 unsettledBorrowOrdersAmountInBaseCurrency;\\n\\n        if (_unsettledOrderAmount > 0) {\\n            if (_isUnsettledBorrowOrder) {\\n                unsettledBorrowOrdersAmountInBaseCurrency = AddressResolverLib\\n                    .currencyController()\\n                    .convertToBaseCurrency(_unsettledOrderCcy, _unsettledOrderAmount);\\n            } else {\\n                require(\\n                    depositAmount >= _unsettledOrderAmount,\\n                    \\\"Not enough collateral in the selected currency\\\"\\n                );\\n                depositAmount -= _unsettledOrderAmount;\\n\\n                if (Storage.slot().collateralCurrencies.contains(_unsettledOrderCcy)) {\\n                    vars.workingLendOrdersAmount += AddressResolverLib\\n                        .currencyController()\\n                        .convertToBaseCurrency(_unsettledOrderCcy, _unsettledOrderAmount);\\n                }\\n            }\\n        }\\n\\n        (\\n            vars.workingLendOrdersAmount,\\n            ,\\n            vars.collateralAmount,\\n            vars.lentAmount,\\n            vars.workingBorrowOrdersAmount,\\n            vars.debtAmount,\\n            vars.borrowedAmount,\\n            vars.isEnoughDeposit\\n        ) = AddressResolverLib.lendingMarketController().calculateTotalFundsInBaseCurrency(\\n            _user,\\n            _unsettledOrderCcy,\\n            depositAmount\\n        );\\n\\n        require(\\n            vars.isEnoughDeposit || _isUnsettledBorrowOrder || _unsettledOrderAmount == 0,\\n            \\\"Not enough collateral in the selected currency\\\"\\n        );\\n\\n        uint256 totalInternalDepositAmount = _getTotalInternalDepositAmountInBaseCurrency(_user);\\n\\n        uint256 actualPlusCollateral = totalInternalDepositAmount + vars.borrowedAmount;\\n        uint256 minusCollateral = vars.workingLendOrdersAmount + vars.lentAmount;\\n        uint256 plusCollateral = actualPlusCollateral + vars.collateralAmount;\\n\\n        totalCollateral = plusCollateral >= minusCollateral ? plusCollateral - minusCollateral : 0;\\n        totalUsedCollateral =\\n            vars.workingBorrowOrdersAmount +\\n            vars.debtAmount +\\n            unsettledBorrowOrdersAmountInBaseCurrency;\\n        totalActualCollateral = actualPlusCollateral >= minusCollateral\\n            ? actualPlusCollateral - minusCollateral\\n            : 0;\\n    }\\n\\n    function getWithdrawableCollateral(address _user) public view returns (uint256) {\\n        (\\n            uint256 totalCollateral,\\n            uint256 totalUsedCollateral,\\n            uint256 totalActualCollateral\\n        ) = getCollateralAmount(_user);\\n\\n        if (totalUsedCollateral == 0) {\\n            return totalActualCollateral;\\n        } else if (\\n            totalCollateral * Constants.PRICE_DIGIT >\\n            totalUsedCollateral * Params.liquidationThresholdRate()\\n        ) {\\n            // NOTE: The formula is:\\n            // maxWithdraw = totalCollateral - ((totalUsedCollateral) * marginCallThresholdRate).\\n            uint256 maxWithdraw = (totalCollateral *\\n                Constants.PRICE_DIGIT -\\n                (totalUsedCollateral) *\\n                Params.liquidationThresholdRate()).div(Constants.PRICE_DIGIT);\\n            return maxWithdraw >= totalActualCollateral ? totalActualCollateral : maxWithdraw;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getWithdrawableCollateral(bytes32 _ccy, address _user)\\n        public\\n        view\\n        returns (uint256 withdrawableAmount)\\n    {\\n        uint256 depositAmount = Storage.slot().depositAmounts[_user][_ccy];\\n        if (Storage.slot().collateralCurrencies.contains(_ccy)) {\\n            uint256 maxWithdrawETH = getWithdrawableCollateral(_user);\\n            uint256 maxWithdraw = AddressResolverLib.currencyController().convertFromBaseCurrency(\\n                _ccy,\\n                maxWithdrawETH\\n            );\\n\\n            withdrawableAmount = depositAmount >= maxWithdraw ? maxWithdraw : depositAmount;\\n        } else {\\n            withdrawableAmount = getDepositAmount(_user, _ccy);\\n        }\\n    }\\n\\n    function addDepositAmount(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) public {\\n        Storage.slot().depositAmounts[_user][_ccy] += _amount;\\n        _updateUsedCurrencies(_user, _ccy);\\n    }\\n\\n    function removeDepositAmount(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) public {\\n        require(\\n            Storage.slot().depositAmounts[_user][_ccy] >= _amount,\\n            \\\"Not enough collateral in the selected currency\\\"\\n        );\\n\\n        Storage.slot().depositAmounts[_user][_ccy] -= _amount;\\n        _updateUsedCurrencies(_user, _ccy);\\n    }\\n\\n    function resetDepositAmount(address _user, bytes32 _ccy)\\n        external\\n        returns (uint256 removedAmount)\\n    {\\n        removedAmount = Storage.slot().depositAmounts[_user][_ccy];\\n        Storage.slot().depositAmounts[_user][_ccy] = 0;\\n\\n        Storage.slot().usedCurrencies[_user].remove(_ccy);\\n    }\\n\\n    function deposit(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) public {\\n        ERC20Handler.depositAssets(\\n            Storage.slot().tokenAddresses[_ccy],\\n            _user,\\n            address(this),\\n            _amount\\n        );\\n\\n        addDepositAmount(_user, _ccy, _amount);\\n        Storage.slot().totalDepositAmount[_ccy] += _amount;\\n    }\\n\\n    function withdraw(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) public returns (uint256 withdrawableAmount) {\\n        withdrawableAmount = getWithdrawableCollateral(_ccy, _user);\\n        withdrawableAmount = _amount > withdrawableAmount ? withdrawableAmount : _amount;\\n\\n        require(\\n            Storage.slot().totalDepositAmount[_ccy] >= withdrawableAmount,\\n            \\\"Protocol is insolvent\\\"\\n        );\\n\\n        Storage.slot().totalDepositAmount[_ccy] -= withdrawableAmount;\\n        removeDepositAmount(_user, _ccy, withdrawableAmount);\\n\\n        ERC20Handler.withdrawAssets(Storage.slot().tokenAddresses[_ccy], _user, withdrawableAmount);\\n\\n        return withdrawableAmount;\\n    }\\n\\n    function getLiquidationAmount(\\n        address _user,\\n        bytes32 _liquidationCcy,\\n        uint256 _liquidationAmountMaximum\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 liquidationAmount,\\n            uint256 protocolFee,\\n            uint256 liquidatorFee\\n        )\\n    {\\n        (uint256 totalCollateral, uint256 totalUsedCollateral, ) = getCollateralAmount(_user);\\n        uint256 liquidationAmountInBaseCurrency = totalCollateral * Constants.PCT_DIGIT >=\\n            totalUsedCollateral * Params.liquidationThresholdRate()\\n            ? 0\\n            : totalUsedCollateral.div(2);\\n        liquidationAmount = AddressResolverLib.currencyController().convertFromBaseCurrency(\\n            _liquidationCcy,\\n            liquidationAmountInBaseCurrency\\n        );\\n\\n        protocolFee = (liquidationAmount * Params.liquidationProtocolFeeRate()).div(\\n            Constants.PCT_DIGIT\\n        );\\n        liquidatorFee = (liquidationAmount * Params.liquidatorFeeRate()).div(Constants.PCT_DIGIT);\\n        uint256 liquidationTotalAmount = liquidationAmount + protocolFee + liquidatorFee;\\n\\n        if (liquidationTotalAmount > _liquidationAmountMaximum) {\\n            liquidationTotalAmount = _liquidationAmountMaximum;\\n            protocolFee = (liquidationTotalAmount * Params.liquidationProtocolFeeRate()).div(\\n                Constants.PCT_DIGIT +\\n                    Params.liquidatorFeeRate() +\\n                    Params.liquidationProtocolFeeRate()\\n            );\\n            liquidatorFee = (liquidationTotalAmount * Params.liquidatorFeeRate()).div(\\n                Constants.PCT_DIGIT +\\n                    Params.liquidatorFeeRate() +\\n                    Params.liquidationProtocolFeeRate()\\n            );\\n            liquidationAmount = liquidationTotalAmount - protocolFee - liquidatorFee;\\n        }\\n    }\\n\\n    function transferFrom(\\n        bytes32 _ccy,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (uint256 untransferredAmount) {\\n        uint256 depositAmount = Storage.slot().depositAmounts[_from][_ccy];\\n        uint256 amount = depositAmount >= _amount ? _amount : depositAmount;\\n        untransferredAmount = _amount - amount;\\n\\n        removeDepositAmount(_from, _ccy, amount);\\n        addDepositAmount(_to, _ccy, amount);\\n    }\\n\\n    /**\\n     * @notice Gets the total of amount deposited in the user's collateral of all currencies\\n     *  in this contract by converting it to ETH.\\n     * @param _user Address of collateral user\\n     * @return totalDepositAmount The total deposited amount in ETH\\n     */\\n    function _getTotalInternalDepositAmountInBaseCurrency(address _user)\\n        internal\\n        view\\n        returns (uint256 totalDepositAmount)\\n    {\\n        EnumerableSet.Bytes32Set storage currencies = Storage.slot().usedCurrencies[_user];\\n        uint256 len = currencies.length();\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            bytes32 ccy = currencies.at(i);\\n            if (Storage.slot().collateralCurrencies.contains(ccy)) {\\n                uint256 depositAmount = Storage.slot().depositAmounts[_user][ccy];\\n                totalDepositAmount += AddressResolverLib.currencyController().convertToBaseCurrency(\\n                        ccy,\\n                        depositAmount\\n                    );\\n            }\\n        }\\n\\n        return totalDepositAmount;\\n    }\\n\\n    function _updateUsedCurrencies(address _user, bytes32 _ccy) internal {\\n        if (Storage.slot().depositAmounts[_user][_ccy] > 0) {\\n            Storage.slot().usedCurrencies[_user].add(_ccy);\\n        } else {\\n            Storage.slot().usedCurrencies[_user].remove(_ccy);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb5f3e88f90570b902f1c9cc79baba32e7d73a659383c2c3ea898c41412d537cf\",\"license\":\"MIT\"},\"contracts/protocol/libraries/math/RoundingUint256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoundingUint256 {\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0);\\n\\n        if ((a * 10) / b - (a / b) * 10 < 5) {\\n            return a / b;\\n        } else {\\n            return (a / b) + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc360f39a82f1a9a7454726e3db802407d305b5e525aa8c3236fe49ca6ca534d\",\"license\":\"MIT\"},\"contracts/protocol/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AddressResolverLib} from \\\"../libraries/AddressResolverLib.sol\\\";\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/MixinAddressResolverStorage.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    modifier onlyAcceptedContracts() {\\n        require(isAcceptedContract(msg.sender), \\\"Only Accepted Contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the contract names used in this contract.\\n     * @dev The contract name list is in `./libraries/Contracts.sol`.\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @notice Returns contract names that can call this contract.\\n     * @dev The contact name listed in this method is also needed to be listed `requiredContracts` method.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = Storage.slot().resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            Storage.slot().addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n\\n        afterBuildCache();\\n    }\\n\\n    /**\\n     * @notice Executes after the cache is built.\\n     */\\n    function afterBuildCache() internal virtual {}\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                Storage.slot().resolver.getAddress(name) != Storage.slot().addressCache[name] ||\\n                Storage.slot().addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        require(address(Storage.slot().resolver) == address(0), \\\"Resolver registered already\\\");\\n        Storage.slot().resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        return AddressResolverLib.getAddress(name);\\n    }\\n\\n    function resolver() public view returns (IAddressResolver) {\\n        return Storage.slot().resolver;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return AddressResolverLib.beaconProxyController();\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return AddressResolverLib.currencyController();\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return AddressResolverLib.genesisValueVault();\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return AddressResolverLib.reserveFund();\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return AddressResolverLib.lendingMarketController();\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return AddressResolverLib.tokenVault();\\n    }\\n}\\n\",\"keccak256\":\"0x8e7734c2c048f8b8d1383f39c531316a78cf1c8736cab5b1fb7992261ec052ba\",\"license\":\"MIT\"},\"contracts/protocol/storages/CollateralParametersStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary CollateralParametersStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.collateralParameters\\\");\\n\\n    struct Storage {\\n        // Liquidation threshold rate (in basis point)\\n        uint256 liquidationThresholdRate;\\n        // Liquidation fee rate received by protocol (in basis point)\\n        uint256 liquidationProtocolFeeRate;\\n        // Liquidation fee rate received by liquidators (in basis point)\\n        uint256 liquidatorFeeRate;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe496d22587414628a72064137a916feb02678879395acbd921402839b1716e55\",\"license\":\"MIT\"},\"contracts/protocol/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../dependencies/chainlink/contracts/AggregatorV3Interface.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct Currency {\\n    bool isSupported;\\n    string name;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.currencyController\\\");\\n\\n    struct Storage {\\n        bytes32 baseCurrency;\\n        // Protocol currencies\\n        EnumerableSet.Bytes32Set currencies;\\n        mapping(bytes32 => uint256) haircuts;\\n        // Array of the price feeds\\n        mapping(bytes32 => AggregatorV3Interface[]) priceFeeds;\\n        // Total cached decimals of the price feeds\\n        mapping(bytes32 => uint8) decimalsCaches;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8bf03b6346d11a110e916796a9cc09c8a331b61dcf119d3fe929b393c0a701b6\",\"license\":\"MIT\"},\"contracts/protocol/storages/ERC20HandlerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary ERC20HandlerStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.erc20Handler\\\");\\n\\n    struct Storage {\\n        address baseCurrency;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xca33106d327519dafec84e1642be7029c9a25c04fa596c074a86d5d26cd9858c\",\"license\":\"MIT\"},\"contracts/protocol/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nstruct AutoRollLog {\\n    uint256 unitPrice;\\n    uint256 lendingCompoundFactor;\\n    uint256 borrowingCompoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.genesisValueVault\\\");\\n\\n    struct Storage {\\n        mapping(bytes32 => bool) isInitialized;\\n        mapping(bytes32 => uint256) initialCompoundFactors;\\n        mapping(bytes32 => uint256) lendingCompoundFactors;\\n        mapping(bytes32 => uint256) borrowingCompoundFactors;\\n        mapping(bytes32 => uint256) currentMaturity;\\n        mapping(bytes32 => uint8) decimals;\\n        // Mapping from user to balance per currency\\n        mapping(bytes32 => mapping(address => int256)) balances;\\n        mapping(bytes32 => uint256) totalLendingSupplies;\\n        mapping(bytes32 => uint256) totalBorrowingSupplies;\\n        // Mapping from maturity balance per currency\\n        mapping(bytes32 => mapping(uint256 => int256)) maturityBalances;\\n        // Mapping from maturity to auto-roll log per currency\\n        mapping(bytes32 => mapping(uint256 => AutoRollLog)) autoRollLogs;\\n        // Mapping from user to maturity per currency\\n        mapping(bytes32 => mapping(address => uint256)) userMaturities;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x887ce7f8c0dbbd8c7f6310e109fa6bf14b5520068d299fcf224faae13bd8de46\",\"license\":\"MIT\"},\"contracts/protocol/storages/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.mixinAddressResolver\\\");\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 => address) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x852b885b6264a58930a0945c68842717e19f954eaefc0137235e6f263e17fa9d\",\"license\":\"MIT\"},\"contracts/protocol/storages/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary OwnableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.ownable\\\");\\n\\n    struct Storage {\\n        address owner;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ef8bfa06947cdb63d47248ad074ac42a1b1ba828a2c97e42486a5dbb2c03e1d\",\"license\":\"MIT\"},\"contracts/protocol/storages/PausableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary PausableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.pausable\\\");\\n\\n    struct Storage {\\n        bool paused;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa32c444c8033da4a894a14b1a517f6d6943f74160bd1904c2f64e349f7aa37bd\",\"license\":\"MIT\"},\"contracts/protocol/storages/TokenVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"../../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary TokenVaultStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.tokenVault\\\");\\n\\n    struct Storage {\\n        // Currencies accepted as collateral\\n        EnumerableSet.Bytes32Set collateralCurrencies;\\n        // Mapping from currency name to token address\\n        mapping(bytes32 => address) tokenAddresses;\\n        // Mapping for used currency vaults per user.\\n        mapping(address => EnumerableSet.Bytes32Set) usedCurrencies;\\n        // Mapping from currency to total deposit amount\\n        mapping(bytes32 => uint256) totalDepositAmount;\\n        // Mapping for all deposits per users\\n        mapping(address => mapping(bytes32 => uint256)) depositAmounts;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4d758261f2271b54ed3281afbfa2ff457c2a30b7aca82c9a2ae83c5db69a539e\",\"license\":\"MIT\"},\"contracts/protocol/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0x7b05f97661e6dfe1142eec9be3dcf86d1eec55ed4fb1dea4a5859f75a0c84c13\",\"license\":\"MIT\"},\"contracts/protocol/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../storages/OwnableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return OwnableStorage.slot().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = OwnableStorage.slot().owner;\\n        OwnableStorage.slot().owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6c149a76f9655abe4739f7ce74a38eb6e7d01732264e0effc4b9a73c16b5a0a9\",\"license\":\"MIT\"},\"contracts/protocol/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../storages/PausableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return PausableStorage.slot().paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage.slot().paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage.slot().paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xc0576147780920e35decf05688bd0605b6b7ba292327c0f1610f5839317a48ae\",\"license\":\"MIT\"},\"contracts/protocol/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0xd3bbab5e43ade94e4791855dd4952527c5bfffcee4a088c7ecd69f97533b46f1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613301806100206000396000f3fe6080604052600436106102345760003560e01c806354821c211161012e57806396994e37116100ab578063d5e190d01161006f578063d5e190d014610728578063e09976591461073d578063f2fde38b14610752578063fb7bd3b414610772578063fc7008101461079257600080fd5b806396994e371461067d5780639e0879c214610690578063b12e4410146106a5578063b1a5d12d146106e8578063ca4230311461070857600080fd5b8063715018a6116100f2578063715018a6146105f35780637496d3fb146106085780638da5cb5b146106285780638e19aff31461063d578063948060dd1461065d57600080fd5b806354821c21146105595780635bffeb66146105795780635c975abb146105995780635d861505146105be5780635d95df8a146105d357600080fd5b806325e1f09f116101bc5780633f90a08e116101805780633f90a08e146104655780634ba0c9b5146104925780634c6aa99c146104b2578063500d2f6d146104fe5780635257ed671461051e57600080fd5b806325e1f09f146103d957806328ff7a42146103f957806329985e5a146104195780632af64bd31461042e5780633d03b9da1461044357600080fd5b80630b7562be116102035780630b7562be146103415780630cf7505d146103565780630cfe33fa146103865780630eadd244146103a65780631de26e16146103c657600080fd5b80630253cd7e146102a1578063040cf020146102d457806304f3bcec146102f4578063055d237a1461032157600080fd5b3661029c576102416107b2565b6001600160a01b0316336001600160a01b03161461029a5760405162461bcd60e51b81526020600482015260116024820152704e6f7420626173652063757272656e637960781b60448201526064015b60405180910390fd5b005b600080fd5b3480156102ad57600080fd5b506102c16102bc366004612b25565b6107e5565b6040519081526020015b60405180910390f35b3480156102e057600080fd5b5061029a6102ef366004612b51565b610884565b34801561030057600080fd5b506103096108c2565b6040516001600160a01b0390911681526020016102cb565b34801561032d57600080fd5b506102c161033c366004612b25565b6108d8565b34801561034d57600080fd5b5061029a6109c1565b34801561036257600080fd5b50610376610371366004612b73565b6109fa565b60405190151581526020016102cb565b34801561039257600080fd5b506102c16103a1366004612b8c565b610a24565b3480156103b257600080fd5b506102c16103c1366004612bb0565b610adb565b61029a6103d4366004612b51565b610b25565b3480156103e557600080fd5b506103766103f4366004612b8c565b610b5e565b34801561040557600080fd5b50610376610414366004612be0565b610c01565b34801561042557600080fd5b5061029a610cc8565b34801561043a57600080fd5b50610376610e76565b34801561044f57600080fd5b50610458610fdc565b6040516102cb9190612c2e565b34801561047157600080fd5b50610485610480366004612c72565b61109e565b6040516102cb9190612ce7565b34801561049e57600080fd5b5061029a6104ad366004612d21565b611145565b3480156104be57600080fd5b506102c16104cd366004612b73565b60009081527f53832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a831b602052604090205490565b34801561050a57600080fd5b506102c1610519366004612d56565b611209565b34801561052a57600080fd5b5061053e610539366004612d21565b611355565b604080519384526020840192909252908201526060016102cb565b34801561056557600080fd5b506102c1610574366004612b8c565b6113f4565b34801561058557600080fd5b5061029a610594366004612dac565b61148b565b3480156105a557600080fd5b5060008051602061326c8339815191525460ff16610376565b3480156105ca57600080fd5b5061053e611627565b3480156105df57600080fd5b506103766105ee366004612b73565b61169d565b3480156105ff57600080fd5b5061029a6116b7565b34801561061457600080fd5b5061029a610623366004612dee565b6116f0565b34801561063457600080fd5b5061030961172a565b34801561064957600080fd5b5061029a610658366004612e1a565b611752565b34801561066957600080fd5b506102c1610678366004612b8c565b61181c565b61029a61068b366004612d21565b6118aa565b34801561069c57600080fd5b5061029a6118e2565b3480156106b157600080fd5b506103096106c0366004612b73565b600090815260008051602061328c83398151915260205260409020546001600160a01b031690565b3480156106f457600080fd5b5061029a610703366004612e3f565b611919565b34801561071457600080fd5b506102c1610723366004612b8c565b611aba565b34801561073457600080fd5b50610458611b90565b34801561074957600080fd5b50610458611bae565b34801561075e57600080fd5b5061029a61076d366004612b8c565b611c2a565b34801561077e57600080fd5b5061029a61078d366004612d21565b611cc7565b34801561079e57600080fd5b506104586107ad366004612b8c565b611d55565b60007f3a2b81b27c095d6e2aecbb7be5d317f24d3f11a9eb2b6e2d16957fe4c0b4ddf35b546001600160a01b0316919050565b604051630129e6bf60e11b81526001600160a01b038316600482015260248101829052600090738CF64566963f383bF546C14Ab4cdfFbc59B1501d90630253cd7e906044015b60206040518083038186803b15801561084357600080fd5b505af4158015610857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087b9190612ea6565b90505b92915050565b61088c611de7565b81610896816109fa565b6108b25760405162461bcd60e51b815260040161029190612ebf565b6108bd338484611e3a565b505050565b600060008051602061324c8339815191526107d6565b60006108e33361208b565b6108ff5760405162461bcd60e51b815260040161029190612ef6565b81610909816109fa565b6109255760405162461bcd60e51b815260040161029190612ebf565b6040516302ae91bd60e11b81526001600160a01b038516600482015260248101849052738CF64566963f383bF546C14Ab4cdfFbc59B1501d9063055d237a9060440160206040518083038186803b15801561097f57600080fd5b505af4158015610993573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b79190612ea6565b91505b5092915050565b336109ca61172a565b6001600160a01b0316146109f05760405162461bcd60e51b815260040161029190612f2d565b6109f8612105565b565b600090815260008051602061328c83398151915260205260409020546001600160a01b0316151590565b60405163654c629560e01b81526001600160a01b038216600482015260009081908190738CF64566963f383bF546C14Ab4cdfFbc59B1501d9063654c62959060240160606040518083038186803b158015610a7e57600080fd5b505af4158015610a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab69190612f62565b5091509150808211610ac9576000610ad3565b610ad38183612fa6565b949350505050565b6040516303ab749160e21b8152600481018390526001600160a01b0382166024820152600090738CF64566963f383bF546C14Ab4cdfFbc59B1501d90630eadd2449060440161082b565b610b2d611de7565b81610b37816109fa565b610b535760405162461bcd60e51b815260040161029190612ebf565b6108bd338484612164565b60405163fd2117fb60e01b81526001600160a01b0382166004820152600060248201819052604482018190526064820181905290738CF64566963f383bF546C14Ab4cdfFbc59B1501d9063fd2117fb9060840160206040518083038186803b158015610bc957600080fd5b505af4158015610bdd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087e9190612fbd565b6000738CF64566963f383bF546C14Ab4cdfFbc59B1501d63fd2117fb868686866001811115610c3257610c32612fda565b60405160e086901b6001600160e01b03191681526001600160a01b0394909416600485015260248401929092526044830152600114606482015260840160206040518083038186803b158015610c8757600080fd5b505af4158015610c9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbf9190612fbd565b95945050505050565b6000610cd2610fdc565b905060005b8151811015610e71576000828281518110610cf457610cf4612ff0565b602002602001015190506000610d1560008051602061324c83398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd91610d8691869190605d01613053565b60206040518083038186803b158015610d9e57600080fd5b505afa158015610db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd6919061306c565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a150508080610e6990613089565b915050610cd7565b505b50565b600080610e81610fdc565b905060005b8151811015610fd3576000828281518110610ea357610ea3612ff0565b60200260200101519050610ec260008051602061324c83398151915290565b600082815260019190910160205260409020546001600160a01b031660008051602061324c833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b158015610f2f57600080fd5b505afa158015610f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f67919061306c565b6001600160a01b0316141580610fb1575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b15610fc0576000935050505090565b5080610fcb81613089565b915050610e86565b50600191505090565b604080516003808252608082019092526060916020820183803683370190505090507121bab93932b731bca1b7b73a3937b63632b960711b8160008151811061102757611027612ff0565b602002602001018181525050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b8160018151811061106157611061612ff0565b6020026020010181815250506a14995cd95c9d99519d5b9960aa1b8160028151811061108f5761108f612ff0565b60200260200101818152505090565b60608167ffffffffffffffff8111156110b9576110b96130a4565b6040519080825280602002602001820160405280156110e2578160200160208202803683370190505b50905060005b828110156109ba5761111184848381811061110557611105612ff0565b9050602002013561169d565b82828151811061112357611123612ff0565b911515602092830291909101909101528061113d81613089565b9150506110e8565b61114d611de7565b6111563361208b565b6111725760405162461bcd60e51b815260040161029190612ef6565b8161117c816109fa565b6111985760405162461bcd60e51b815260040161029190612ebf565b604051634ba0c9b560e01b8152738CF64566963f383bF546C14Ab4cdfFbc59B1501d90634ba0c9b5906111d3908790879087906004016130ba565b60006040518083038186803b1580156111eb57600080fd5b505af41580156111ff573d6000803e3d6000fd5b5050505050505050565b6000611213611de7565b61121c3361208b565b6112385760405162461bcd60e51b815260040161029190612ef6565b84611242816109fa565b61125e5760405162461bcd60e51b815260040161029190612ebf565b60405163500d2f6d60e01b8152600481018790526001600160a01b0380871660248301528516604482015260648101849052738CF64566963f383bF546C14Ab4cdfFbc59B1501d9063500d2f6d9060840160206040518083038186803b1580156112c757600080fd5b505af41580156112db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ff9190612ea6565b91506001600160a01b03808516908616877ff8ca259b4b82670be7501ff56ad1fc9c7cd199d3431e3c502f2c5f86884bc15061133b8688612fa6565b60405190815260200160405180910390a450949350505050565b6000806000738CF64566963f383bF546C14Ab4cdfFbc59B1501d635257ed678787876040518463ffffffff1660e01b8152600401611395939291906130ba565b60606040518083038186803b1580156113ad57600080fd5b505af41580156113c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e59190612f62565b92509250925093509350939050565b60405163654c629560e01b81526001600160a01b0382166004820152600090738CF64566963f383bF546C14Ab4cdfFbc59B1501d9063654c62959060240160606040518083038186803b15801561144a57600080fd5b505af415801561145e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114829190612f62565b50909392505050565b3361149461172a565b6001600160a01b0316146114ba5760405162461bcd60e51b815260040161029190612f2d565b6114c261234a565b6001600160a01b0316631eae0893846040518263ffffffff1660e01b81526004016114ef91815260200190565b60206040518083038186803b15801561150757600080fd5b505afa15801561151b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153f9190612fbd565b61157e5760405162461bcd60e51b815260206004820152601060248201526f496e76616c69642063757272656e637960801b6044820152606401610291565b600083815260008051602061328c8339815191526020526040902080546001600160a01b0319166001600160a01b03841617905580156115d4576115d2836000805160206132ac8339815191525b90612354565b505b604080518481526001600160a01b0384166020820152821515918101919091527ff776c30df345d55df252bb5181a0c2bb23d601166606790a6f1b938d7e158503906060015b60405180910390a1505050565b600080600061164260008051602061322c8339815191525490565b925061166c7f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d0535490565b91506116967f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d0545490565b9050909192565b600061087e6000805160206132ac83398151915283612360565b336116c061172a565b6001600160a01b0316146116e65760405162461bcd60e51b815260040161029190612f2d565b6109f86000612378565b336116f961172a565b6001600160a01b03161461171f5760405162461bcd60e51b815260040161029190612f2d565b6108bd8383836123e9565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa6107d6565b3361175b61172a565b6001600160a01b0316146117815760405162461bcd60e51b815260040161029190612f2d565b8161178b816109fa565b6117a75760405162461bcd60e51b815260040161029190612ebf565b81156117cb576117c5836000805160206132ac8339815191526115cc565b506117e5565b6117e36000805160206132ac83398151915284612680565b505b6040805184815283151560208201527f97caf2b3b2f0aa460ca08b20c07f7a43ccf688e2f3b7179f2cf9113fb892bf81910161161a565b60405163948060dd60e01b81526001600160a01b0382166004820152600090738CF64566963f383bF546C14Ab4cdfFbc59B1501d9063948060dd9060240160206040518083038186803b15801561187257600080fd5b505af4158015611886573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087e9190612ea6565b6118b2611de7565b6118bb3361208b565b6118d75760405162461bcd60e51b815260040161029190612ef6565b6108bd838383612164565b336118eb61172a565b6001600160a01b0316146119115760405162461bcd60e51b815260040161029190612f2d565b6109f861268c565b600054610100900460ff16158080156119395750600054600160ff909116105b806119535750303b158015611953575060005460ff166001145b6119b65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610291565b6000805460ff1916600117905580156119d9576000805461ff0019166101001790555b60006119e36126d5565b6001600160a01b03161415611a455760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b6064820152608401610291565b611a4e87612378565b611a57866126fd565b611a6082612795565b611a6b8585856123e9565b8015611ab1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b60405163654c629560e01b81526001600160a01b038216600482015260009081908190738CF64566963f383bF546C14Ab4cdfFbc59B1501d9063654c62959060240160606040518083038186803b158015611b1457600080fd5b505af4158015611b28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4c9190612f62565b50915091508160001415611b72578015611b6857600019611b6b565b60005b9250611b89565b81611b7f612710836130db565b610ad391906130fa565b5050919050565b6060611ba96000805160206132ac83398151915261282a565b905090565b6040805160028082526060808301845292602083019080368337019050509050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600081518110611bfc57611bfc612ff0565b6020026020010181815250506a14995cd95c9d99519d5b9960aa1b8160018151811061108f5761108f612ff0565b33611c3361172a565b6001600160a01b031614611c595760405162461bcd60e51b815260040161029190612f2d565b6001600160a01b038116611cbe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610291565b610e7381612378565b611ccf611de7565b611cd83361208b565b611cf45760405162461bcd60e51b815260040161029190612ef6565b81611cfe816109fa565b611d1a5760405162461bcd60e51b815260040161029190612ebf565b604051633edef4ed60e21b8152738CF64566963f383bF546C14Ab4cdfFbc59B1501d9063fb7bd3b4906111d3908790879087906004016130ba565b604051630fc7008160e41b81526001600160a01b0382166004820152606090738CF64566963f383bF546C14Ab4cdfFbc59B1501d9063fc7008109060240160006040518083038186803b158015611dab57600080fd5b505af4158015611dbf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261087e919081019061311c565b60008051602061326c8339815191525460ff16156109f85760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610291565b60008111611e5a5760405162461bcd60e51b8152600401610291906131da565b611e62612835565b60405163862fd6e560e01b81526001600160a01b038581166004830152919091169063862fd6e59060240160206040518083038186803b158015611ea557600080fd5b505afa158015611eb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edd9190612fbd565b15611f235760405162461bcd60e51b8152602060048201526016602482015275149959195b5c1d1a5bdb881a5cc81c995c5d5a5c995960521b6044820152606401610291565b611f2b612835565b604051639519832b60e01b8152600481018490526001600160a01b0385811660248301529190911690639519832b90604401602060405180830381600087803b158015611f7757600080fd5b505af1158015611f8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611faf9190612ea6565b5060405163148b8b9d60e11b8152600090738CF64566963f383bF546C14Ab4cdfFbc59B1501d90632917173a90611fee908790879087906004016130ba565b60206040518083038186803b15801561200657600080fd5b505af415801561201a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203e9190612ea6565b60408051858152602081018390529192506001600160a01b038616917fc3ded2be7db21b1af963f267d27750e4a15f174547d88b886b9bda43e2c6fa32910160405180910390a250505050565b600080612096611bae565b905060005b81518110156120fb576120c68282815181106120b9576120b9612ff0565b602002602001015161283f565b6001600160a01b0316846001600160a01b031614156120e9575060019392505050565b806120f381613089565b91505061209b565b5060009392505050565b61210d61284a565b60008051602061326c833981519152805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600081116121845760405162461bcd60e51b8152600401610291906131da565b61218c6107b2565b600083815260008051602061328c83398151915260205260409020546001600160a01b0390811691161415806121c157503481145b6121dd5760405162461bcd60e51b8152600401610291906131da565b6121e5612835565b6001600160a01b031663d1cc99766040518163ffffffff1660e01b815260040160206040518083038186803b15801561221d57600080fd5b505afa158015612231573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122559190612fbd565b156122965760405162461bcd60e51b815260206004820152601160248201527013585c9ad95d081d195c9b5a5b985d1959607a1b6044820152606401610291565b604051631d64487f60e31b8152738CF64566963f383bF546C14Ab4cdfFbc59B1501d9063eb2243f8906122d1908690869086906004016130ba565b60006040518083038186803b1580156122e957600080fd5b505af41580156122fd573d6000803e3d6000fd5b505060408051858152602081018590526001600160a01b03871693507f19dacbf83c5de6658e14cbf7bcae5c15eca2eedecf1c66fbca928e4d351bea0f92500160405180910390a2505050565b6000611ba96128a0565b600061087b83836128c0565b6000818152600183016020526040812054151561087b565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600083116124445760405162461bcd60e51b815260206004820152602260248201527f496e76616c6964206c69717569646174696f6e207468726573686f6c64207261604482015261746560f01b6064820152608401610291565b6127108211156124a45760405162461bcd60e51b815260206004820152602560248201527f496e76616c6964206c69717569646174696f6e2070726f746f636f6c20666565604482015264207261746560d81b6064820152608401610291565b6127108111156124f65760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206c697175696461746f7220666565207261746500000000006044820152606401610291565b60008051602061322c833981519152548314612566577fd3353684d64f1c80498433d8407c96e6bbeb1ec88b6200ec97d2c910fdbd0da460008051602061322c8339815191525460408051918252602082018690520160405180910390a18260008051602061322c833981519152555b7f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d0535482146125fe577f651b17c8e9402610e6210cfaa5b252d2186f8a16adf58c9c0fd5793bc4ea9b1f60008051602061322c8339815191526001015460408051918252602082018590520160405180910390a17f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d0538290555b7f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d0545481146108bd577f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d05481905560408051828152602081018390527f7e8f030f9238551b066874b952f0c6ba811ba426ab231ba4825421d5d8f5cd95910161161a565b600061087b838361290f565b612694611de7565b60008051602061326c833981519152805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833612147565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6107d6565b60008051602061324c833981519152546001600160a01b0316156127635760405162461bcd60e51b815260206004820152601b60248201527f5265736f6c766572207265676973746572656420616c726561647900000000006044820152606401610291565b8060008051602061324c8339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b7f3a2b81b27c095d6e2aecbb7be5d317f24d3f11a9eb2b6e2d16957fe4c0b4ddf3546001600160a01b0316156128035760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610291565b807f3a2b81b27c095d6e2aecbb7be5d317f24d3f11a9eb2b6e2d16957fe4c0b4ddf3612774565b606061087e82612a02565b6000611ba9612a5e565b600061087e82612a7f565b60008051602061326c8339815191525460ff166109f85760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610291565b6000611ba97121bab93932b731bca1b7b73a3937b63632b960711b612a7f565b60008181526001830160205260408120546129075750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561087e565b50600061087e565b600081815260018301602052604081205480156129f8576000612933600183612fa6565b855490915060009061294790600190612fa6565b90508181146129ac57600086600001828154811061296757612967612ff0565b906000526020600020015490508087600001848154811061298a5761298a612ff0565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806129bd576129bd613202565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061087e565b600091505061087e565b606081600001805480602002602001604051908101604052809291908181526020018280548015612a5257602002820191906000526020600020905b815481526020019060010190808311612a3e575b50505050509050919050565b6000611ba9762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b5b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b031690816109ba5760405162461bcd60e51b81526004016102919190613218565b6001600160a01b0381168114610e7357600080fd5b60008060408385031215612b3857600080fd5b8235612b4381612b10565b946020939093013593505050565b60008060408385031215612b6457600080fd5b50508035926020909101359150565b600060208284031215612b8557600080fd5b5035919050565b600060208284031215612b9e57600080fd5b8135612ba981612b10565b9392505050565b60008060408385031215612bc357600080fd5b823591506020830135612bd581612b10565b809150509250929050565b60008060008060808587031215612bf657600080fd5b8435612c0181612b10565b93506020850135925060408501359150606085013560028110612c2357600080fd5b939692955090935050565b6020808252825182820181905260009190848201906040850190845b81811015612c6657835183529284019291840191600101612c4a565b50909695505050505050565b60008060208385031215612c8557600080fd5b823567ffffffffffffffff80821115612c9d57600080fd5b818501915085601f830112612cb157600080fd5b813581811115612cc057600080fd5b8660208260051b8501011115612cd557600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015612c66578351151583529284019291840191600101612d03565b600080600060608486031215612d3657600080fd5b8335612d4181612b10565b95602085013595506040909401359392505050565b60008060008060808587031215612d6c57600080fd5b843593506020850135612d7e81612b10565b92506040850135612d8e81612b10565b9396929550929360600135925050565b8015158114610e7357600080fd5b600080600060608486031215612dc157600080fd5b833592506020840135612dd381612b10565b91506040840135612de381612d9e565b809150509250925092565b600080600060608486031215612e0357600080fd5b505081359360208301359350604090920135919050565b60008060408385031215612e2d57600080fd5b823591506020830135612bd581612d9e565b60008060008060008060c08789031215612e5857600080fd5b8635612e6381612b10565b95506020870135612e7381612b10565b945060408701359350606087013592506080870135915060a0870135612e9881612b10565b809150509295509295509295565b600060208284031215612eb857600080fd5b5051919050565b60208082526017908201527f43757272656e6379206e6f742072656769737465726564000000000000000000604082015260600190565b60208082526017908201527f4f6e6c7920416363657074656420436f6e747261637473000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600080600060608486031215612f7757600080fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b600052601160045260246000fd5b600082821015612fb857612fb8612f90565b500390565b600060208284031215612fcf57600080fd5b8151612ba981612d9e565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b8181101561302c57602081850181015186830182015201613010565b8181111561303e576000602083870101525b50601f01601f19169290920160200192915050565b828152604060208201526000610ad36040830184613006565b60006020828403121561307e57600080fd5b8151612ba981612b10565b600060001982141561309d5761309d612f90565b5060010190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b039390931683526020830191909152604082015260600190565b60008160001904831182151516156130f5576130f5612f90565b500290565b60008261311757634e487b7160e01b600052601260045260246000fd5b500490565b6000602080838503121561312f57600080fd5b825167ffffffffffffffff8082111561314757600080fd5b818501915085601f83011261315b57600080fd5b81518181111561316d5761316d6130a4565b8060051b604051601f19603f83011681018181108582111715613192576131926130a4565b6040529182528482019250838101850191888311156131b057600080fd5b938501935b828510156131ce578451845293850193928501926131b5565b98975050505050505050565b6020808252600e908201526d125b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b634e487b7160e01b600052603160045260246000fd5b60208152600061087b602083018461300656fe1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d0524abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240189c789132bdb3678132848a8dcd780bffd2b1abdce3984c522ac1d8aeb48f05f353832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a831953832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a8317a26469706673582212209285671924d27b5b469fb300e8be3c8a9c2d68a64750ec5ff85b940d2ad497c164736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102345760003560e01c806354821c211161012e57806396994e37116100ab578063d5e190d01161006f578063d5e190d014610728578063e09976591461073d578063f2fde38b14610752578063fb7bd3b414610772578063fc7008101461079257600080fd5b806396994e371461067d5780639e0879c214610690578063b12e4410146106a5578063b1a5d12d146106e8578063ca4230311461070857600080fd5b8063715018a6116100f2578063715018a6146105f35780637496d3fb146106085780638da5cb5b146106285780638e19aff31461063d578063948060dd1461065d57600080fd5b806354821c21146105595780635bffeb66146105795780635c975abb146105995780635d861505146105be5780635d95df8a146105d357600080fd5b806325e1f09f116101bc5780633f90a08e116101805780633f90a08e146104655780634ba0c9b5146104925780634c6aa99c146104b2578063500d2f6d146104fe5780635257ed671461051e57600080fd5b806325e1f09f146103d957806328ff7a42146103f957806329985e5a146104195780632af64bd31461042e5780633d03b9da1461044357600080fd5b80630b7562be116102035780630b7562be146103415780630cf7505d146103565780630cfe33fa146103865780630eadd244146103a65780631de26e16146103c657600080fd5b80630253cd7e146102a1578063040cf020146102d457806304f3bcec146102f4578063055d237a1461032157600080fd5b3661029c576102416107b2565b6001600160a01b0316336001600160a01b03161461029a5760405162461bcd60e51b81526020600482015260116024820152704e6f7420626173652063757272656e637960781b60448201526064015b60405180910390fd5b005b600080fd5b3480156102ad57600080fd5b506102c16102bc366004612b25565b6107e5565b6040519081526020015b60405180910390f35b3480156102e057600080fd5b5061029a6102ef366004612b51565b610884565b34801561030057600080fd5b506103096108c2565b6040516001600160a01b0390911681526020016102cb565b34801561032d57600080fd5b506102c161033c366004612b25565b6108d8565b34801561034d57600080fd5b5061029a6109c1565b34801561036257600080fd5b50610376610371366004612b73565b6109fa565b60405190151581526020016102cb565b34801561039257600080fd5b506102c16103a1366004612b8c565b610a24565b3480156103b257600080fd5b506102c16103c1366004612bb0565b610adb565b61029a6103d4366004612b51565b610b25565b3480156103e557600080fd5b506103766103f4366004612b8c565b610b5e565b34801561040557600080fd5b50610376610414366004612be0565b610c01565b34801561042557600080fd5b5061029a610cc8565b34801561043a57600080fd5b50610376610e76565b34801561044f57600080fd5b50610458610fdc565b6040516102cb9190612c2e565b34801561047157600080fd5b50610485610480366004612c72565b61109e565b6040516102cb9190612ce7565b34801561049e57600080fd5b5061029a6104ad366004612d21565b611145565b3480156104be57600080fd5b506102c16104cd366004612b73565b60009081527f53832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a831b602052604090205490565b34801561050a57600080fd5b506102c1610519366004612d56565b611209565b34801561052a57600080fd5b5061053e610539366004612d21565b611355565b604080519384526020840192909252908201526060016102cb565b34801561056557600080fd5b506102c1610574366004612b8c565b6113f4565b34801561058557600080fd5b5061029a610594366004612dac565b61148b565b3480156105a557600080fd5b5060008051602061326c8339815191525460ff16610376565b3480156105ca57600080fd5b5061053e611627565b3480156105df57600080fd5b506103766105ee366004612b73565b61169d565b3480156105ff57600080fd5b5061029a6116b7565b34801561061457600080fd5b5061029a610623366004612dee565b6116f0565b34801561063457600080fd5b5061030961172a565b34801561064957600080fd5b5061029a610658366004612e1a565b611752565b34801561066957600080fd5b506102c1610678366004612b8c565b61181c565b61029a61068b366004612d21565b6118aa565b34801561069c57600080fd5b5061029a6118e2565b3480156106b157600080fd5b506103096106c0366004612b73565b600090815260008051602061328c83398151915260205260409020546001600160a01b031690565b3480156106f457600080fd5b5061029a610703366004612e3f565b611919565b34801561071457600080fd5b506102c1610723366004612b8c565b611aba565b34801561073457600080fd5b50610458611b90565b34801561074957600080fd5b50610458611bae565b34801561075e57600080fd5b5061029a61076d366004612b8c565b611c2a565b34801561077e57600080fd5b5061029a61078d366004612d21565b611cc7565b34801561079e57600080fd5b506104586107ad366004612b8c565b611d55565b60007f3a2b81b27c095d6e2aecbb7be5d317f24d3f11a9eb2b6e2d16957fe4c0b4ddf35b546001600160a01b0316919050565b604051630129e6bf60e11b81526001600160a01b03831660048201526024810182905260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__90630253cd7e906044015b60206040518083038186803b15801561084357600080fd5b505af4158015610857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087b9190612ea6565b90505b92915050565b61088c611de7565b81610896816109fa565b6108b25760405162461bcd60e51b815260040161029190612ebf565b6108bd338484611e3a565b505050565b600060008051602061324c8339815191526107d6565b60006108e33361208b565b6108ff5760405162461bcd60e51b815260040161029190612ef6565b81610909816109fa565b6109255760405162461bcd60e51b815260040161029190612ebf565b6040516302ae91bd60e11b81526001600160a01b03851660048201526024810184905273__$e77f6d4722b46e0b0a57517726dbfd997e$__9063055d237a9060440160206040518083038186803b15801561097f57600080fd5b505af4158015610993573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b79190612ea6565b91505b5092915050565b336109ca61172a565b6001600160a01b0316146109f05760405162461bcd60e51b815260040161029190612f2d565b6109f8612105565b565b600090815260008051602061328c83398151915260205260409020546001600160a01b0316151590565b60405163654c629560e01b81526001600160a01b03821660048201526000908190819073__$e77f6d4722b46e0b0a57517726dbfd997e$__9063654c62959060240160606040518083038186803b158015610a7e57600080fd5b505af4158015610a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab69190612f62565b5091509150808211610ac9576000610ad3565b610ad38183612fa6565b949350505050565b6040516303ab749160e21b8152600481018390526001600160a01b038216602482015260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__90630eadd2449060440161082b565b610b2d611de7565b81610b37816109fa565b610b535760405162461bcd60e51b815260040161029190612ebf565b6108bd338484612164565b60405163fd2117fb60e01b81526001600160a01b038216600482015260006024820181905260448201819052606482018190529073__$e77f6d4722b46e0b0a57517726dbfd997e$__9063fd2117fb9060840160206040518083038186803b158015610bc957600080fd5b505af4158015610bdd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087e9190612fbd565b600073__$e77f6d4722b46e0b0a57517726dbfd997e$__63fd2117fb868686866001811115610c3257610c32612fda565b60405160e086901b6001600160e01b03191681526001600160a01b0394909416600485015260248401929092526044830152600114606482015260840160206040518083038186803b158015610c8757600080fd5b505af4158015610c9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbf9190612fbd565b95945050505050565b6000610cd2610fdc565b905060005b8151811015610e71576000828281518110610cf457610cf4612ff0565b602002602001015190506000610d1560008051602061324c83398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd91610d8691869190605d01613053565b60206040518083038186803b158015610d9e57600080fd5b505afa158015610db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd6919061306c565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a150508080610e6990613089565b915050610cd7565b505b50565b600080610e81610fdc565b905060005b8151811015610fd3576000828281518110610ea357610ea3612ff0565b60200260200101519050610ec260008051602061324c83398151915290565b600082815260019190910160205260409020546001600160a01b031660008051602061324c833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b158015610f2f57600080fd5b505afa158015610f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f67919061306c565b6001600160a01b0316141580610fb1575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b15610fc0576000935050505090565b5080610fcb81613089565b915050610e86565b50600191505090565b604080516003808252608082019092526060916020820183803683370190505090507121bab93932b731bca1b7b73a3937b63632b960711b8160008151811061102757611027612ff0565b602002602001018181525050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b8160018151811061106157611061612ff0565b6020026020010181815250506a14995cd95c9d99519d5b9960aa1b8160028151811061108f5761108f612ff0565b60200260200101818152505090565b60608167ffffffffffffffff8111156110b9576110b96130a4565b6040519080825280602002602001820160405280156110e2578160200160208202803683370190505b50905060005b828110156109ba5761111184848381811061110557611105612ff0565b9050602002013561169d565b82828151811061112357611123612ff0565b911515602092830291909101909101528061113d81613089565b9150506110e8565b61114d611de7565b6111563361208b565b6111725760405162461bcd60e51b815260040161029190612ef6565b8161117c816109fa565b6111985760405162461bcd60e51b815260040161029190612ebf565b604051634ba0c9b560e01b815273__$e77f6d4722b46e0b0a57517726dbfd997e$__90634ba0c9b5906111d3908790879087906004016130ba565b60006040518083038186803b1580156111eb57600080fd5b505af41580156111ff573d6000803e3d6000fd5b5050505050505050565b6000611213611de7565b61121c3361208b565b6112385760405162461bcd60e51b815260040161029190612ef6565b84611242816109fa565b61125e5760405162461bcd60e51b815260040161029190612ebf565b60405163500d2f6d60e01b8152600481018790526001600160a01b038087166024830152851660448201526064810184905273__$e77f6d4722b46e0b0a57517726dbfd997e$__9063500d2f6d9060840160206040518083038186803b1580156112c757600080fd5b505af41580156112db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ff9190612ea6565b91506001600160a01b03808516908616877ff8ca259b4b82670be7501ff56ad1fc9c7cd199d3431e3c502f2c5f86884bc15061133b8688612fa6565b60405190815260200160405180910390a450949350505050565b600080600073__$e77f6d4722b46e0b0a57517726dbfd997e$__635257ed678787876040518463ffffffff1660e01b8152600401611395939291906130ba565b60606040518083038186803b1580156113ad57600080fd5b505af41580156113c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e59190612f62565b92509250925093509350939050565b60405163654c629560e01b81526001600160a01b038216600482015260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__9063654c62959060240160606040518083038186803b15801561144a57600080fd5b505af415801561145e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114829190612f62565b50909392505050565b3361149461172a565b6001600160a01b0316146114ba5760405162461bcd60e51b815260040161029190612f2d565b6114c261234a565b6001600160a01b0316631eae0893846040518263ffffffff1660e01b81526004016114ef91815260200190565b60206040518083038186803b15801561150757600080fd5b505afa15801561151b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153f9190612fbd565b61157e5760405162461bcd60e51b815260206004820152601060248201526f496e76616c69642063757272656e637960801b6044820152606401610291565b600083815260008051602061328c8339815191526020526040902080546001600160a01b0319166001600160a01b03841617905580156115d4576115d2836000805160206132ac8339815191525b90612354565b505b604080518481526001600160a01b0384166020820152821515918101919091527ff776c30df345d55df252bb5181a0c2bb23d601166606790a6f1b938d7e158503906060015b60405180910390a1505050565b600080600061164260008051602061322c8339815191525490565b925061166c7f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d0535490565b91506116967f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d0545490565b9050909192565b600061087e6000805160206132ac83398151915283612360565b336116c061172a565b6001600160a01b0316146116e65760405162461bcd60e51b815260040161029190612f2d565b6109f86000612378565b336116f961172a565b6001600160a01b03161461171f5760405162461bcd60e51b815260040161029190612f2d565b6108bd8383836123e9565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa6107d6565b3361175b61172a565b6001600160a01b0316146117815760405162461bcd60e51b815260040161029190612f2d565b8161178b816109fa565b6117a75760405162461bcd60e51b815260040161029190612ebf565b81156117cb576117c5836000805160206132ac8339815191526115cc565b506117e5565b6117e36000805160206132ac83398151915284612680565b505b6040805184815283151560208201527f97caf2b3b2f0aa460ca08b20c07f7a43ccf688e2f3b7179f2cf9113fb892bf81910161161a565b60405163948060dd60e01b81526001600160a01b038216600482015260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__9063948060dd9060240160206040518083038186803b15801561187257600080fd5b505af4158015611886573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087e9190612ea6565b6118b2611de7565b6118bb3361208b565b6118d75760405162461bcd60e51b815260040161029190612ef6565b6108bd838383612164565b336118eb61172a565b6001600160a01b0316146119115760405162461bcd60e51b815260040161029190612f2d565b6109f861268c565b600054610100900460ff16158080156119395750600054600160ff909116105b806119535750303b158015611953575060005460ff166001145b6119b65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610291565b6000805460ff1916600117905580156119d9576000805461ff0019166101001790555b60006119e36126d5565b6001600160a01b03161415611a455760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b6064820152608401610291565b611a4e87612378565b611a57866126fd565b611a6082612795565b611a6b8585856123e9565b8015611ab1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b60405163654c629560e01b81526001600160a01b03821660048201526000908190819073__$e77f6d4722b46e0b0a57517726dbfd997e$__9063654c62959060240160606040518083038186803b158015611b1457600080fd5b505af4158015611b28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4c9190612f62565b50915091508160001415611b72578015611b6857600019611b6b565b60005b9250611b89565b81611b7f612710836130db565b610ad391906130fa565b5050919050565b6060611ba96000805160206132ac83398151915261282a565b905090565b6040805160028082526060808301845292602083019080368337019050509050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600081518110611bfc57611bfc612ff0565b6020026020010181815250506a14995cd95c9d99519d5b9960aa1b8160018151811061108f5761108f612ff0565b33611c3361172a565b6001600160a01b031614611c595760405162461bcd60e51b815260040161029190612f2d565b6001600160a01b038116611cbe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610291565b610e7381612378565b611ccf611de7565b611cd83361208b565b611cf45760405162461bcd60e51b815260040161029190612ef6565b81611cfe816109fa565b611d1a5760405162461bcd60e51b815260040161029190612ebf565b604051633edef4ed60e21b815273__$e77f6d4722b46e0b0a57517726dbfd997e$__9063fb7bd3b4906111d3908790879087906004016130ba565b604051630fc7008160e41b81526001600160a01b038216600482015260609073__$e77f6d4722b46e0b0a57517726dbfd997e$__9063fc7008109060240160006040518083038186803b158015611dab57600080fd5b505af4158015611dbf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261087e919081019061311c565b60008051602061326c8339815191525460ff16156109f85760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610291565b60008111611e5a5760405162461bcd60e51b8152600401610291906131da565b611e62612835565b60405163862fd6e560e01b81526001600160a01b038581166004830152919091169063862fd6e59060240160206040518083038186803b158015611ea557600080fd5b505afa158015611eb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edd9190612fbd565b15611f235760405162461bcd60e51b8152602060048201526016602482015275149959195b5c1d1a5bdb881a5cc81c995c5d5a5c995960521b6044820152606401610291565b611f2b612835565b604051639519832b60e01b8152600481018490526001600160a01b0385811660248301529190911690639519832b90604401602060405180830381600087803b158015611f7757600080fd5b505af1158015611f8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611faf9190612ea6565b5060405163148b8b9d60e11b815260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__90632917173a90611fee908790879087906004016130ba565b60206040518083038186803b15801561200657600080fd5b505af415801561201a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203e9190612ea6565b60408051858152602081018390529192506001600160a01b038616917fc3ded2be7db21b1af963f267d27750e4a15f174547d88b886b9bda43e2c6fa32910160405180910390a250505050565b600080612096611bae565b905060005b81518110156120fb576120c68282815181106120b9576120b9612ff0565b602002602001015161283f565b6001600160a01b0316846001600160a01b031614156120e9575060019392505050565b806120f381613089565b91505061209b565b5060009392505050565b61210d61284a565b60008051602061326c833981519152805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600081116121845760405162461bcd60e51b8152600401610291906131da565b61218c6107b2565b600083815260008051602061328c83398151915260205260409020546001600160a01b0390811691161415806121c157503481145b6121dd5760405162461bcd60e51b8152600401610291906131da565b6121e5612835565b6001600160a01b031663d1cc99766040518163ffffffff1660e01b815260040160206040518083038186803b15801561221d57600080fd5b505afa158015612231573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122559190612fbd565b156122965760405162461bcd60e51b815260206004820152601160248201527013585c9ad95d081d195c9b5a5b985d1959607a1b6044820152606401610291565b604051631d64487f60e31b815273__$e77f6d4722b46e0b0a57517726dbfd997e$",
  "libraries": {
    "DepositManagementLogic": "0x8CF64566963f383bF546C14Ab4cdfFbc59B1501d"
  },
  "implementation": "0xB6645Fbd7d3203b8870c391ac39F6532b0F0Af04",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptedContracts()": {
        "details": "The contact name listed in this method is also needed to be listed `requiredContracts` method."
      },
      "addDepositAmount(address,bytes32,uint256)": {
        "details": "Adds deposit amount.",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "deposit(bytes32,uint256)": {
        "details": "Deposits funds by the caller into collateral.",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32"
        }
      },
      "depositFrom(address,bytes32,uint256)": {
        "details": "Deposits funds by the `from` into collateral.",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32",
          "_from": "user's address"
        }
      },
      "getCollateralCurrencies()": {
        "returns": {
          "_0": "Array of the currency accepted as collateral"
        }
      },
      "getCollateralParameters()": {
        "returns": {
          "liquidationProtocolFeeRate": "Liquidation fee rate received by protocol",
          "liquidationThresholdRate": "Auto liquidation threshold rate",
          "liquidatorFeeRate": "Liquidation fee rate received by liquidators"
        }
      },
      "getCoverage(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "coverage": "The rate of collateral used"
        }
      },
      "getDepositAmount(address,bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "_0": "The deposited amount"
        }
      },
      "getLiquidationAmount(address,bytes32,uint256)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "liquidationAmount": "The the amount to be liquidated"
        }
      },
      "getTokenAddress(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The token contract address"
        }
      },
      "getTotalCollateralAmount(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "totalCollateralAmount": "The total collateral amount in ETH"
        }
      },
      "getTotalDepositAmount(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The total deposited amount"
        }
      },
      "getUnusedCollateral(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The total amount of unused collateral"
        }
      },
      "getUsedCurrencies(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The currency names in bytes32"
        }
      },
      "getWithdrawableCollateral(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "Maximum amount of ETH that can be withdrawn"
        }
      },
      "getWithdrawableCollateral(bytes32,address)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "_0": "Maximum amount of the selected currency that can be withdrawn"
        }
      },
      "initialize(address,address,uint256,uint256,uint256,address)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController.",
        "params": {
          "_WETH9": "The address of the wrapped token to use as base currency",
          "_liquidationProtocolFeeRate": "The liquidation fee rate received by protocol",
          "_liquidationThresholdRate": "The liquidation threshold rate",
          "_liquidatorFeeRate": "The liquidation fee rate received by liquidators",
          "_owner": "The address of the contract owner",
          "_resolver": "The address of the Address Resolver contract"
        }
      },
      "isCollateral(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The boolean if the currency has been registered or not"
        }
      },
      "isCollateral(bytes32[])": {
        "params": {
          "_ccys": "Currency name list in bytes32"
        },
        "returns": {
          "isCollateralCurrencies": "Array of the boolean if the currency has been registered or not"
        }
      },
      "isCovered(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The boolean if the collateral has sufficient coverage or not"
        }
      },
      "isCovered(address,bytes32,uint256,uint8)": {
        "params": {
          "_unsettledOrderAmount": "Additional unsettled order amount",
          "_unsettledOrderCcy": "Additional unsettled order currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "_0": "The boolean if the collateral has sufficient coverage or not"
        }
      },
      "isRegisteredCurrency(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The boolean if the currency has been registered or not"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "registerCurrency(bytes32,address,bool)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_isCollateral": "Boolean if the selected currency is acceptable as collateral.",
          "_tokenAddress": "Token contract address of the selected currency"
        }
      },
      "removeDepositAmount(address,bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to withdraw.",
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requiredContracts()": {
        "details": "The contract name list is in `./libraries/Contracts.sol`."
      },
      "resetDepositAmount(address,bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "setCollateralParameters(uint256,uint256,uint256)": {
        "params": {
          "_liquidationProtocolFeeRate": "The liquidation fee rate received by protocol",
          "_liquidationThresholdRate": "The auto liquidation threshold rate",
          "_liquidatorFeeRate": "The liquidation fee rate received by liquidators"
        }
      },
      "transferFrom(bytes32,address,address,uint256)": {
        "params": {
          "_amount": "Amount of funds to sent",
          "_ccy": "Currency name in bytes32",
          "_from": "Sender's address",
          "_to": "Receiver's address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCurrency(bytes32,bool)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_isCollateral": "Boolean if the selected currency is acceptable as collateral."
        }
      },
      "withdraw(bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to withdraw.",
          "_ccy": "Currency name in bytes32"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptedContracts()": {
        "notice": "Returns contract names that can call this contract."
      },
      "getCollateralCurrencies()": {
        "notice": "Gets the currencies accepted as collateral"
      },
      "getCollateralParameters()": {
        "notice": "Gets the collateral parameters"
      },
      "getCoverage(address)": {
        "notice": "Gets the rate of collateral used."
      },
      "getDepositAmount(address,bytes32)": {
        "notice": "Gets the amount deposited in the user's collateral."
      },
      "getLiquidationAmount(address,bytes32,uint256)": {
        "notice": "Gets the amount to be liquidated."
      },
      "getTokenAddress(bytes32)": {
        "notice": "Gets the token contract address"
      },
      "getTotalCollateralAmount(address)": {
        "notice": "Gets the total collateral amount."
      },
      "getTotalDepositAmount(bytes32)": {
        "notice": "Gets the total amount deposited of the selected currency"
      },
      "getUnusedCollateral(address)": {
        "notice": "Gets the total amount of the unused collateral"
      },
      "getUsedCurrencies(address)": {
        "notice": "Gets the currencies that the user used as collateral."
      },
      "getWithdrawableCollateral(address)": {
        "notice": "Gets the maximum amount of ETH that can be withdrawn from user collateral."
      },
      "getWithdrawableCollateral(bytes32,address)": {
        "notice": "Gets the maximum amount of the selected currency that can be withdrawn from user collateral."
      },
      "initialize(address,address,uint256,uint256,uint256,address)": {
        "notice": "Initializes the contract."
      },
      "isCollateral(bytes32)": {
        "notice": "Gets if the currency is acceptable as collateral"
      },
      "isCollateral(bytes32[])": {
        "notice": "Gets if the currencies are acceptable as collateral"
      },
      "isCovered(address)": {
        "notice": "Gets if the collateral has enough coverage."
      },
      "isCovered(address,bytes32,uint256,uint8)": {
        "notice": "Gets if the collateral has enough coverage."
      },
      "isRegisteredCurrency(bytes32)": {
        "notice": "Gets if the currency has been registered"
      },
      "pauseVault()": {
        "notice": "Pauses the token vault."
      },
      "registerCurrency(bytes32,address,bool)": {
        "notice": "Registers new currency and sets if it is acceptable as collateral."
      },
      "removeDepositAmount(address,bytes32,uint256)": {
        "notice": "Removes deposit amount."
      },
      "requiredContracts()": {
        "notice": "Returns the contract names used in this contract."
      },
      "resetDepositAmount(address,bytes32)": {
        "notice": "Resets deposit amount."
      },
      "setCollateralParameters(uint256,uint256,uint256)": {
        "notice": "Sets main collateral parameters this function solves the issue of frontrunning during parameters tuning.Triggers only be contract owner"
      },
      "transferFrom(bytes32,address,address,uint256)": {
        "notice": "Transfers the token from sender to receiver."
      },
      "unpauseVault()": {
        "notice": "Unpauses the token vault."
      },
      "updateCurrency(bytes32,bool)": {
        "notice": "Updates the currency if it is acceptable as collateral."
      },
      "withdraw(bytes32,uint256)": {
        "notice": "Withdraws funds by the caller from unused collateral."
      }
    },
    "notice": "Implements the management of the token in each currency for users. This contract manages the following data related to tokens. - Deposited token amount as the collateral - Parameters related to the collateral   - Margin Call Threshold Rate   - Auto Liquidation Threshold Rate   - Liquidation Price Rate   - Min Collateral Rate To address a currency as collateral, it must be registered using `registerCurrency` method in this contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 995,
        "contract": "contracts/protocol/TokenVault.sol:TokenVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 998,
        "contract": "contracts/protocol/TokenVault.sol:TokenVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}