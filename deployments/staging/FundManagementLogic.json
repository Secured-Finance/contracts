{
  "address": "0x05473e959588E3c0A7B173c550257EA794EF450A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateActualFunds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "presentValue",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "futureValue",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "workingLendingOrdersAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "workingBorrowingOrdersAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowedAmount",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "genesisValue",
              "type": "int256"
            }
          ],
          "internalType": "struct FundManagementLogic.ActualFunds",
          "name": "actualFunds",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "workingLendOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "workingBorrowOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_depositCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_depositAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateTotalFundsInETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalWorkingLendOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCollateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalWorkingBorrowOrdersAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDebtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrowedAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isEnoughDeposit",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUsedMaturities",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "maturities",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0fd9fe88125e480c0236408986fff0f2f04d7787d9fc0cad691ce00b086fbdb9",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x05473e959588E3c0A7B173c550257EA794EF450A",
    "transactionIndex": 25,
    "gasUsed": "3090330",
    "logsBloom": "0x
    "blockHash": "0x587637344119eb3ab47aa4917465514f013a055430bce882cd8495e263ca56e7",
    "transactionHash": "0x0fd9fe88125e480c0236408986fff0f2f04d7787d9fc0cad691ce00b086fbdb9",
    "logs": [],
    "blockNumber": 8690481,
    "cumulativeGasUsed": "6568627",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "a58832c4d44af4e2e79c8873b8be9904",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateActualFunds\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"presentValue\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"futureValue\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"workingLendingOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"workingBorrowingOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"genesisValue\",\"type\":\"int256\"}],\"internalType\":\"struct FundManagementLogic.ActualFunds\",\"name\":\"actualFunds\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"workingLendOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"workingBorrowOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_depositCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTotalFundsInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalWorkingLendOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWorkingBorrowOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnoughDeposit\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUsedMaturities\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"maturities\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"convertFutureValueToGenesisValue(bytes32,uint256,address)\":{\"params\":{\"_ccy\":\"Currency for pausing all lending markets\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"Current future value amount after update\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"convertFutureValueToGenesisValue(bytes32,uint256,address)\":{\"notice\":\"Converts the future value to the genesis value if there is balance in the past maturity.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/logics/FundManagementLogic.sol\":\"FundManagementLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IBeaconProxyController {\\n    event BeaconProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function deployFutureValueVault() external returns (address futureValueVault);\\n\\n    function deployLendingMarket(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 openingDate\\n    ) external returns (address market);\\n}\\n\",\"keccak256\":\"0xcedc431629fa9537e673fc37ceae4cc645cf1f4ff9071b05396b9e3944ce6dd9\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Currency} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CurrencyAdded(bytes32 indexed ccy, uint256 haircut);\\n    event CurrencyRemoved(bytes32 indexed ccy);\\n\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n\\n    event PriceFeedAdded(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n    event PriceFeedRemoved(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256 amount);\\n\\n    function convertToETH(bytes32 _ccy, int256 _amount) external view returns (int256 amount);\\n\\n    function convertToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getEthDecimals(bytes32) external view returns (uint8);\\n\\n    function getUsdDecimals(bytes32) external view returns (uint8);\\n\\n    function getCurrencies() external view returns (bytes32[] memory);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function currencyExists(bytes32 _ccy) external view returns (bool);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function addCurrency(\\n        bytes32 _ccy,\\n        address _ethPriceFeed,\\n        uint256 _haircut\\n    ) external;\\n\\n    function updateHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function removeCurrency(bytes32 _ccy) external;\\n}\\n\",\"keccak256\":\"0x9f2a9f700546079ae054a7904b66ff83a1fa9a5643a0cb7ae1766a0dc265ec50\",\"license\":\"MIT\"},\"contracts/interfaces/IFutureValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IFutureValueVault {\\n    event Transfer(address indexed from, address indexed to, int256 value);\\n\\n    function getTotalSupply(uint256 maturity) external view returns (uint256);\\n\\n    function getFutureValue(address user)\\n        external\\n        view\\n        returns (int256 futureValue, uint256 maturity);\\n\\n    function hasFutureValueInPastMaturity(address user, uint256 maturity)\\n        external\\n        view\\n        returns (bool);\\n\\n    function addLendFutureValue(\\n        address user,\\n        uint256 amount,\\n        uint256 maturity,\\n        bool isTaker\\n    ) external returns (bool);\\n\\n    function addBorrowFutureValue(\\n        address user,\\n        uint256 amount,\\n        uint256 maturity,\\n        bool isTaker\\n    ) external returns (bool);\\n\\n    function offsetFutureValue(\\n        address lender,\\n        address borrower,\\n        uint256 maximumFVAmount\\n    ) external returns (uint256 offsetAmount);\\n\\n    function removeFutureValue(address user, uint256 activeMaturity)\\n        external\\n        returns (\\n            int256 removedAmount,\\n            int256 currentAmount,\\n            uint256 maturity,\\n            bool removeFutureValue\\n        );\\n}\\n\",\"keccak256\":\"0x026b0cc678d22e00305b931c4cea0c1d63d162d4b8163fb6158b50f7961bece7\",\"license\":\"MIT\"},\"contracts/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AutoRollLog} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\\n    event AutoRollExecuted(\\n        bytes32 indexed ccy,\\n        uint256 lendingCompoundFactor,\\n        uint256 borrowingCompoundFactor,\\n        uint256 unitPrice,\\n        uint256 currentMaturity,\\n        uint256 previousMaturity\\n    );\\n\\n    function isInitialized(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getMaturityGenesisValue(bytes32 _ccy, uint256 _maturity)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getAutoRollLog(bytes32 ccy, uint256 maturity)\\n        external\\n        view\\n        returns (AutoRollLog memory);\\n\\n    function getLatestAutoRollLog(bytes32 _ccy) external view returns (AutoRollLog memory);\\n\\n    function getGenesisValueInFutureValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function calculateFVFromFV(\\n        bytes32 _ccy,\\n        uint256 _basisMaturity,\\n        uint256 _destinationMaturity,\\n        int256 _futureValue\\n    ) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function getBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function calculateBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        int256 balance,\\n        uint256 fromMaturity,\\n        uint256 toMaturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function initializeCurrencySetting(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor,\\n        uint256 maturity\\n    ) external;\\n\\n    function executeAutoRoll(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice,\\n        uint256 feeRate,\\n        uint256 totalFVAmount\\n    ) external;\\n\\n    function updateGenesisValueWithFutureValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 fvAmount\\n    ) external;\\n\\n    function updateGenesisValueWithResidualAmount(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity\\n    ) external;\\n\\n    function offsetGenesisValue(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        address lender,\\n        address borrower,\\n        int256 maximumGVAmount\\n    ) external returns (int256 offsetAmount);\\n\\n    function cleanUpGenesisValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbf859271c07954a70d3382d8c442c3edf03d51fb7c8a191a46b19758c80974f5\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport {MarketOrder} from \\\"../storages/LendingMarketStorage.sol\\\";\\n\\ninterface ILendingMarket {\\n    event OrderCanceled(\\n        uint48 orderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event OrderMade(\\n        uint48 orderId,\\n        uint48 originalOrderId,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event OrdersTaken(\\n        address indexed taker,\\n        ProtocolTypes.Side side,\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 filledAmount,\\n        uint256 unitPrice,\\n        uint256 filledFutureValue\\n    );\\n\\n    event OrdersCleaned(\\n        uint48[] orderIds,\\n        address indexed maker,\\n        ProtocolTypes.Side side,\\n        bytes32 indexed ccy,\\n        uint256 maturity\\n    );\\n\\n    event MarketOpened(uint256 maturity, uint256 prevMaturity);\\n\\n    event ItayoseExecuted(bytes32 ccy, uint256 maturity, uint256 openingPrice);\\n\\n    struct Market {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        uint256 openingDate;\\n        uint256 borrowUnitPrice;\\n        uint256 lendUnitPrice;\\n        uint256 midUnitPrice;\\n    }\\n\\n    function getMarket() external view returns (Market memory);\\n\\n    function getBorrowUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getLendUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getMidUnitPrice() external view returns (uint256 unitPrice);\\n\\n    function getBorrowOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturity() external view returns (uint256);\\n\\n    function getCurrency() external view returns (bytes32);\\n\\n    function getOpeningDate() external view returns (uint256);\\n\\n    function isItayosePeriod() external view returns (bool);\\n\\n    function getOpeningUnitPrice() external view returns (uint256);\\n\\n    function isMatured() external view returns (bool);\\n\\n    function isOpened() external view returns (bool);\\n\\n    function isPreOrderPeriod() external returns (bool);\\n\\n    function getOrder(uint48 _orderId)\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp\\n        );\\n\\n    function getTotalAmountFromLendOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getTotalAmountFromBorrowOrders(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getActiveLendOrderIds(address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds);\\n\\n    function getActiveBorrowOrderIds(address _user)\\n        external\\n        view\\n        returns (uint48[] memory activeOrderIds);\\n\\n    function estimateFilledAmount(ProtocolTypes.Side _side, uint256 _futureValue)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function openMarket(uint256 maturity, uint256 openingDate) external returns (uint256);\\n\\n    function cancelOrder(address user, uint48 orderId)\\n        external\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256,\\n            uint256\\n        );\\n\\n    function createPreOrder(\\n        ProtocolTypes.Side side,\\n        address user,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external;\\n\\n    function unwindOrder(\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _futureValue\\n    )\\n        external\\n        returns (\\n            uint256 filledUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledFutureValue\\n        );\\n\\n    function executeItayoseCall() external returns (uint256 openingUnitPrice);\\n\\n    function cleanOrders(address _user)\\n        external\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        );\\n\\n    function createOrder(\\n        ProtocolTypes.Side side,\\n        address account,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        bool ignoreRemainingAmount\\n    )\\n        external\\n        returns (\\n            uint256 filledUnitPrice,\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount\\n        );\\n\\n    function pauseMarket() external;\\n\\n    function unpauseMarket() external;\\n}\\n\",\"keccak256\":\"0x29b07c3c9c347622717cda1e394fa400f606b272b004362f8c45ab0f6ce1b0b9\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ILendingMarketController {\\n    event LendingMarketCreated(\\n        bytes32 indexed ccy,\\n        address indexed marketAddr,\\n        address futureValueVault,\\n        uint256 index,\\n        uint256 openingDate,\\n        uint256 maturity\\n    );\\n    event LendingMarketsRotated(bytes32 ccy, uint256 oldMaturity, uint256 newMaturity);\\n    event OrderFilled(\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        uint256 filledFutureValue\\n    );\\n    event OrdersFilledInAsync(\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 filledFutureValue\\n    );\\n    event OrderCanceled(\\n        uint48 orderId,\\n        address indexed maker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 unitPrice\\n    );\\n    event LiquidationExecuted(\\n        address indexed user,\\n        bytes32 collateralCcy,\\n        bytes32 indexed debtCcy,\\n        uint256 indexed debtMaturity,\\n        uint256 amount\\n    );\\n\\n    function isLiquidator(address user) external view returns (bool);\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarkets(bytes32 ccy) external view returns (address[] memory);\\n\\n    function getLendingMarket(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getBorrowUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getLendUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getMidUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getBorrowOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getFutureValue(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        address user\\n    ) external view returns (int256 futureValue);\\n\\n    function getPresentValue(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        address user\\n    ) external view returns (int256 presentValue);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInETH(address user)\\n        external\\n        view\\n        returns (int256 totalPresentValue);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256 genesisValue);\\n\\n    function calculateFunds(bytes32 ccy, address user)\\n        external\\n        view\\n        returns (\\n            uint256 workingLendOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 collateralAmount,\\n            uint256 lentAmount,\\n            uint256 workingBorrowOrdersAmount,\\n            uint256 debtAmount,\\n            uint256 borrowedAmount\\n        );\\n\\n    function calculateTotalFundsInETH(\\n        address user,\\n        bytes32 depositCcy,\\n        uint256 depositAmount\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalWorkingLendOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalCollateralAmount,\\n            uint256 totalLentAmount,\\n            uint256 totalWorkingBorrowOrdersAmount,\\n            uint256 totalDebtAmount,\\n            uint256 totalBorrowedAmount,\\n            bool isEnoughDeposit\\n        );\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor,\\n        uint256 orderFeeRate,\\n        uint256 autoRollFeeRate\\n    ) external;\\n\\n    function createLendingMarket(bytes32 ccy, uint256 marketOpeningDate) external;\\n\\n    function createOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndCreateOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function createPreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndCreatePreOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) external payable returns (bool);\\n\\n    function unwindOrder(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeMultiItayoseCall(bytes32[] memory currencies, uint256 maturity)\\n        external\\n        returns (bool);\\n\\n    function executeLiquidationCall(\\n        bytes32 collateralCcy,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        address user,\\n        uint24 poolFee\\n    ) external returns (bool);\\n\\n    function registerLiquidator(bool isLiquidator) external;\\n\\n    function cancelOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint48 orderId\\n    ) external returns (bool);\\n\\n    function rotateLendingMarkets(bytes32 ccy) external;\\n\\n    function pauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function cleanAllOrders(address user) external;\\n\\n    function cleanOrders(bytes32 ccy, address user) external returns (uint256 activeOrderCount);\\n}\\n\",\"keccak256\":\"0xc2e1f8ce5159ac73e427f591e3a8d3bb1b666115c0377995c43d4a1e66222c40\",\"license\":\"MIT\"},\"contracts/interfaces/IReserveFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IReserveFund {\\n    event Pause(address account);\\n    event Unpause(address account);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xa2a6df7a095ca8f8874d26672f75fe1f09c45caf041cb27d5e265bcb974a9754\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ITokenVault {\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress, bool isCollateral);\\n    event CurrencyUpdated(bytes32 ccy, bool isCollateral);\\n    event Swap(\\n        address indexed user,\\n        bytes32 ccyIn,\\n        bytes32 ccyOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        uint256 liquidatorFee,\\n        uint256 protocolFee\\n    );\\n\\n    function isCovered(\\n        address user,\\n        bytes32 ccy,\\n        uint256 unsettledExp,\\n        ProtocolTypes.Side unsettledOrderSide\\n    ) external view returns (bool);\\n\\n    function isCovered(address user) external view returns (bool);\\n\\n    function isCollateral(bytes32 _ccy) external view returns (bool);\\n\\n    function isCollateral(bytes32[] calldata _ccys)\\n        external\\n        view\\n        returns (bool[] memory isCollateralCurrencies);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getTokenAddress(bytes32 ccy) external view returns (address);\\n\\n    function getCollateralCurrencies() external view returns (bytes32[] memory);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256 maxWithdraw);\\n\\n    function getCoverage(address user) external view returns (uint256 coverage);\\n\\n    function getUnusedCollateral(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address party) external view returns (uint256);\\n\\n    function getLiquidationAmount(address user) external view returns (uint256 liquidationAmount);\\n\\n    function getTotalDepositAmount(bytes32 _ccy) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getCollateralParameters()\\n        external\\n        view\\n        returns (\\n            uint256 liquidationThresholdRate,\\n            uint256 liquidationProtocolFeeRate,\\n            uint256 liquidatorFeeRate,\\n            address uniswapRouter,\\n            address uniswapQuoter\\n        );\\n\\n    function setCollateralParameters(\\n        uint256 liquidationThresholdRate,\\n        uint256 liquidationProtocolFeeRate,\\n        uint256 liquidatorFeeRate,\\n        address uniswapRouter,\\n        address uniswapQuoter\\n    ) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositFrom(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function removeDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function swapDepositAmounts(\\n        address liquidator,\\n        address user,\\n        bytes32 ccyFrom,\\n        bytes32 ccyTo,\\n        uint256 amountOut,\\n        uint24 poolFee,\\n        uint256 offsetAmount\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x4aeca00b083b242247a0df9cc2f0de7a669314058729ac8830f73f6a5d28f520\",\"license\":\"MIT\"},\"contracts/libraries/AddressResolverLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/MixinAddressResolverStorage.sol\\\";\\n\\nlibrary AddressResolverLib {\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return IReserveFund(getAddress(Contracts.RESERVE_FUND));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0x65d55399d6c8b753ddaa36c1370fae1c68dfbfb8b6b2d09b1717ba037b079998\",\"license\":\"MIT\"},\"contracts/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant RESERVE_FUND = \\\"ReserveFund\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE_VAULT = \\\"FutureValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0x8e73eead72efa03bcc03c1cdf72cdcebed0f7e6f5a58cda1fd74e0fc03f356e6\",\"license\":\"MIT\"},\"contracts/libraries/OrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// types\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {RoundingUint256} from \\\"./math/RoundingUint256.sol\\\";\\n\\nstruct RemainingOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 unitPrice;\\n}\\n\\nstruct OrderItem {\\n    uint48 orderId;\\n    uint48 next;\\n    uint48 prev;\\n    address maker;\\n    uint256 timestamp;\\n    uint256 amount;\\n}\\n\\n/**\\n * @notice OrderStatisticsTreeLib is a Red-Black Tree binary search library\\n * based on the following library that is extended to manage order data.\\n *\\n * https://github.com/rob-Hitchens/OrderStatisticsTree\\n *\\n */\\nlibrary OrderStatisticsTreeLib {\\n    using RoundingUint256 for uint256;\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint48 head;\\n        uint48 tail;\\n        uint256 orderCounter;\\n        uint256 orderTotalAmount;\\n        mapping(uint256 => OrderItem) orders;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].left != EMPTY) {\\n            _value = self.nodes[_value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 _value) {\\n        _value = self.root;\\n        if (_value == EMPTY) return 0;\\n        while (self.nodes[_value].right != EMPTY) {\\n            _value = self.nodes[_value].right;\\n        }\\n    }\\n\\n    function next(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(401) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].right != EMPTY) {\\n            _cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].right) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 _cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(402) - Starting value cannot be zero\\\");\\n        if (self.nodes[value].left != EMPTY) {\\n            _cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            _cursor = self.nodes[value].parent;\\n            while (_cursor != EMPTY && value == self.nodes[_cursor].left) {\\n                value = _cursor;\\n                _cursor = self.nodes[_cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function exists(Tree storage self, uint256 value) internal view returns (bool _exists) {\\n        if (value == EMPTY) return false;\\n        if (value == self.root) return true;\\n        // if (self.nodes[value].parent != EMPTY) return true;\\n        uint256 cursor = value;\\n        while (self.nodes[cursor].parent != EMPTY) {\\n            uint256 parent = self.nodes[cursor].parent;\\n            if (self.nodes[parent].left != cursor && self.nodes[parent].right != cursor) {\\n                return false;\\n            }\\n            if (parent == self.root) {\\n                return true;\\n            }\\n            cursor = self.nodes[cursor].parent;\\n        }\\n        return false;\\n    }\\n\\n    function isActiveOrderId(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        return orderIdExists(self, value, orderId) && exists(self, value);\\n    }\\n\\n    function getNode(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(exists(self, value), \\\"OrderStatisticsTree(403) - Value does not exist.\\\");\\n        Node storage gn = self.nodes[value];\\n        return (\\n            gn.parent,\\n            gn.left,\\n            gn.right,\\n            gn.red,\\n            gn.head,\\n            gn.tail,\\n            gn.orderCounter,\\n            gn.orderTotalAmount\\n        );\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function getNodeTotalAmount(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint256 totalAmount)\\n    {\\n        return self.nodes[value].orderTotalAmount;\\n    }\\n\\n    function getNodeOrderIds(Tree storage self, uint256 value)\\n        internal\\n        view\\n        returns (uint48[] memory orderIds)\\n    {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[gn.head];\\n        orderIds = new uint48[](gn.orderCounter);\\n\\n        for (uint256 i = 0; i < gn.orderCounter; i++) {\\n            orderIds[i] = order.orderId;\\n            order = gn.orders[order.next];\\n        }\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256 _count) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(405) - Value to insert cannot be zero\\\");\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                return;\\n            }\\n        }\\n\\n        Node storage nValue = self.nodes[value];\\n        // Update order info as a new one if there is already an old node\\n        if (\\n            self.root == EMPTY ||\\n            (self.nodes[cursor].left != value && self.nodes[cursor].right != value)\\n        ) {\\n            nValue.orderCounter = 0;\\n            nValue.orderTotalAmount = 0;\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        }\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTree(407) - Value to delete cannot be zero\\\");\\n        Node storage nValue = self.nodes[value];\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(\\n        Tree storage self,\\n        uint256 a,\\n        uint256 b\\n    ) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    function estimateDroppedAmountFromLeft(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = first(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV).div(\\n                    cursorNodeAmountInFV\\n                );\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n    }\\n\\n    function estimateDroppedAmountFromRight(Tree storage self, uint256 targetFutureValue)\\n        internal\\n        view\\n        returns (uint256 droppedAmount)\\n    {\\n        uint256 cursor = last(self);\\n        uint256 totalDroppedAmountInFV = 0;\\n        droppedAmount = 0;\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        while (totalDroppedAmountInFV < targetFutureValue && cursor != EMPTY) {\\n            uint256 cursorNodeAmountInPV = self.nodes[cursor].orderTotalAmount;\\n\\n            uint256 cursorNodeAmountInFV = _calculateFutureValue(cursor, cursorNodeAmountInPV);\\n            totalDroppedAmountInFV += cursorNodeAmountInFV;\\n\\n            if (totalDroppedAmountInFV > targetFutureValue) {\\n                uint256 filledAmountInFV = cursorNodeAmountInFV -\\n                    (totalDroppedAmountInFV - targetFutureValue);\\n                droppedAmount += (cursorNodeAmountInPV * filledAmountInFV).div(\\n                    cursorNodeAmountInFV\\n                );\\n            } else {\\n                droppedAmount += cursorNodeAmountInPV;\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n    }\\n\\n    function dropLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue,\\n        uint256 limitFutureValue\\n    )\\n        internal\\n        returns (\\n            uint256 value,\\n            uint256 totalFilledAmount,\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            RemainingOrder memory remainingOrder\\n        )\\n    {\\n        uint256 cursor = first(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor <= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        uint256 amountDiff;\\n        uint256 futureValueDiff;\\n        while (\\n            (totalAmount < amount || amount == EMPTY) &&\\n            (filledFutureValue < limitFutureValue || limitFutureValue == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor <= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            filledFutureValue += _calculateFutureValue(cursor, cursorNodeAmount);\\n            totalFilledAmount += cursorNodeAmount;\\n\\n            if (totalAmount > amount && amount != EMPTY) {\\n                amountDiff = totalAmount - amount;\\n                futureValueDiff = _calculateFutureValue(cursor, amountDiff);\\n            } else if (filledFutureValue > limitFutureValue && limitFutureValue != EMPTY) {\\n                futureValueDiff = filledFutureValue - limitFutureValue;\\n                amountDiff = _calculatePresentValue(cursor, futureValueDiff);\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n\\n        if (amountDiff > 0) {\\n            totalFilledAmount -= amountDiff;\\n        }\\n        if (futureValueDiff > 0) {\\n            filledFutureValue -= futureValueDiff;\\n        }\\n\\n        if (totalAmount > 0) {\\n            if (amountDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                remainingOrder = fillOrders(self, cursor, cursorNodeAmount - amountDiff);\\n            } else if (futureValueDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                remainingOrder = fillOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, futureValueDiff)\\n                );\\n            }\\n\\n            self.nodes[cursor].left = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent > cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].left = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        uint256 lastNode = last(self);\\n\\n        if (lastNode == value && self.nodes[lastNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value > self.root || (value == self.root && totalFilledAmount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToLeft(self);\\n    }\\n\\n    function dropRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 limitValue,\\n        uint256 limitFutureValue\\n    )\\n        internal\\n        returns (\\n            uint256 value,\\n            uint256 totalFilledAmount,\\n            uint256 filledFutureValue,\\n            uint256 remainingAmount,\\n            RemainingOrder memory remainingOrder\\n        )\\n    {\\n        uint256 cursor = last(self);\\n        uint256 cursorNodeAmount = 0;\\n        uint256 totalAmount = 0;\\n\\n        require(cursor >= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        // Find a node whose total amount is over the amount of the argument.\\n        uint256 amountDiff;\\n        uint256 futureValueDiff;\\n        while (\\n            (totalAmount < amount || amount == EMPTY) &&\\n            (filledFutureValue < limitFutureValue || limitFutureValue == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor >= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            totalAmount += cursorNodeAmount;\\n            value = cursor;\\n\\n            filledFutureValue += _calculateFutureValue(cursor, cursorNodeAmount);\\n            totalFilledAmount += cursorNodeAmount;\\n\\n            if (totalAmount > amount && amount != EMPTY) {\\n                amountDiff = totalAmount - amount;\\n                futureValueDiff = _calculateFutureValue(cursor, amountDiff);\\n            } else if (filledFutureValue > limitFutureValue && limitFutureValue != EMPTY) {\\n                futureValueDiff = filledFutureValue - limitFutureValue;\\n                amountDiff = _calculatePresentValue(cursor, futureValueDiff);\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n\\n        if (amountDiff > 0) {\\n            totalFilledAmount -= amountDiff;\\n        }\\n        if (futureValueDiff > 0) {\\n            filledFutureValue -= futureValueDiff;\\n        }\\n\\n        if (totalAmount > 0) {\\n            if (amountDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                remainingOrder = fillOrders(self, cursor, cursorNodeAmount - amountDiff);\\n            } else if (futureValueDiff > 0) {\\n                cursor = value;\\n                // Update order ids in the node.\\n                remainingOrder = fillOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, futureValueDiff)\\n                );\\n            }\\n\\n            self.nodes[cursor].right = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent < cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].right = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalAmount) {\\n            remainingAmount = amount - totalAmount;\\n        }\\n\\n        uint256 firstNode = first(self);\\n\\n        if (firstNode == value && self.nodes[firstNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (value < self.root || (value == self.root && totalFilledAmount >= totalAmount)) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToRight(self);\\n    }\\n\\n    function rotateTreeToLeft(Tree storage self) internal {\\n        if (self.nodes[self.root].left == 0 && self.nodes[self.root].right != 0) {\\n            if (self.nodes[self.nodes[self.root].right].left != 0) {\\n                rotateRight(self, self.nodes[self.root].right);\\n            }\\n            rotateLeft(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function rotateTreeToRight(Tree storage self) internal {\\n        if (self.nodes[self.root].right == 0 && self.nodes[self.root].left != 0) {\\n            if (self.nodes[self.nodes[self.root].left].right != 0) {\\n                rotateLeft(self, self.nodes[self.root].left);\\n            }\\n            rotateRight(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function getFutureValue(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (uint256) {\\n        return _calculateFutureValue(value, self.nodes[value].orders[orderId].amount);\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (OrderItem memory) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orders[orderId];\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function orderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        uint48 cursor = orderId;\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[cursor];\\n\\n        if (order.orderId != cursor) {\\n            return false;\\n        }\\n\\n        while (order.prev != EMPTY) {\\n            cursor = order.prev;\\n            order = gn.orders[cursor];\\n        }\\n\\n        return cursor == gn.head;\\n    }\\n\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount,\\n        bool isInterruption\\n    ) internal {\\n        require(amount > 0, \\\"Insufficient amount\\\");\\n        require(value <= ProtocolTypes.PRICE_DIGIT, \\\"Insufficient value\\\");\\n        insert(self, value);\\n\\n        if (isInterruption) {\\n            addHead(self, value, orderId, user, amount);\\n        } else {\\n            addTail(self, value, orderId, user, amount);\\n        }\\n    }\\n\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        amount = _removeOrder(self, value, orderId);\\n        remove(self, value);\\n    }\\n\\n    /**\\n     * @dev Reduces order amount once market order taken.\\n     */\\n    function fillOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount\\n    ) internal returns (RemainingOrder memory remainingOrder) {\\n        Node storage gn = self.nodes[value];\\n\\n        require(\\n            gn.orderTotalAmount >= _amount,\\n            \\\"OrderStatisticsTree(410) - Amount to fill is insufficient\\\"\\n        );\\n\\n        uint256 remainingAmount = _amount;\\n        uint256 filledCount = 0;\\n        OrderItem memory currentOrder = gn.orders[gn.head];\\n        uint48 orderId = gn.head;\\n\\n        while (orderId != 0 && remainingAmount != 0) {\\n            currentOrder = gn.orders[orderId];\\n\\n            if (currentOrder.amount <= remainingAmount) {\\n                remainingAmount -= currentOrder.amount;\\n                orderId = currentOrder.next;\\n            } else {\\n                remainingOrder = RemainingOrder(\\n                    currentOrder.orderId,\\n                    currentOrder.maker,\\n                    currentOrder.amount - remainingAmount,\\n                    value\\n                );\\n                remainingAmount = 0;\\n            }\\n\\n            filledCount++;\\n        }\\n\\n        _dropOrders(self, value, currentOrder.orderId);\\n\\n        if (remainingOrder.amount > 0) {\\n            // NOTE: This order that the filled partially was dropped from a node, and the unfilled amount\\n            // will be inserted newly as a new orders.\\n            // However, that filled order amount is used when future value is calculated from inactive order.\\n            // For that calculation, this order amount needs to be updated by an actual filled amount at this point.\\n            OrderItem storage order = self.nodes[value].orders[currentOrder.orderId];\\n            order.amount -= remainingOrder.amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n        uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n        _link(self, _value, orderId, gn.head);\\n        _setHead(self, _value, orderId);\\n        if (gn.tail == 0) _setTail(self, _value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, _value, _orderId, _user, _amount);\\n        } else {\\n            uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n            _link(self, _value, gn.tail, orderId);\\n            _setTail(self, _value, orderId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint48) {\\n        Node storage gn = self.nodes[value];\\n        require(\\n            gn.orders[orderId].timestamp == 0,\\n            \\\"OrderStatisticsTree(409) - Order id already exist.\\\"\\n        );\\n\\n        gn.orderCounter += 1;\\n        gn.orderTotalAmount += amount;\\n        OrderItem memory order = OrderItem(orderId, 0, 0, user, block.timestamp, amount);\\n        gn.orders[orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the list.\\n     */\\n    function _removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n        gn.orderTotalAmount -= order.amount;\\n    }\\n\\n    /**\\n     * @dev Drop the OrderItems older than or equal `orderId` from the list\\n     */\\n    function _dropOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTree(410) - Order does not exist.\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n        uint256 cursor = gn.head;\\n        uint256 removedCount = 1;\\n        uint256 removedAmount = gn.orders[cursor].amount;\\n\\n        while (cursor != orderId) {\\n            cursor = gn.orders[cursor].next;\\n            removedCount++;\\n            removedAmount += gn.orders[cursor].amount;\\n        }\\n\\n        if (gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        }\\n\\n        gn.orderCounter -= removedCount;\\n        gn.orderTotalAmount -= removedAmount;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 _prevId,\\n        uint48 _nextId\\n    ) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[_prevId].next = _nextId;\\n        gn.orders[_nextId].prev = _prevId;\\n    }\\n\\n    function _calculateFutureValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * ProtocolTypes.PRICE_DIGIT).div(unitPrice);\\n    }\\n\\n    function _calculatePresentValue(uint256 unitPrice, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * unitPrice).div(ProtocolTypes.PRICE_DIGIT);\\n    }\\n}\\n\",\"keccak256\":\"0xba28049b7345f07e3277943232c1c9b408e89b26ec4b6fd3710363ee59a5cdcf\",\"license\":\"MIT\"},\"contracts/libraries/QuickSort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary QuickSort {\\n    function sort(uint256[] memory data) public pure returns (uint256[] memory) {\\n        quickSort(data, int256(0), int256(data.length - 1));\\n        return data;\\n    }\\n\\n    function quickSort(\\n        uint256[] memory arr,\\n        int256 left,\\n        int256 right\\n    ) internal pure {\\n        int256 i = left;\\n        int256 j = right;\\n        if (i == j) return;\\n        uint256 pivot = arr[uint256(left + (right - left) / 2)];\\n        while (i <= j) {\\n            while (arr[uint256(i)] < pivot) i++;\\n            while (pivot < arr[uint256(j)]) j--;\\n            if (i <= j) {\\n                (arr[uint256(i)], arr[uint256(j)]) = (arr[uint256(j)], arr[uint256(i)]);\\n                i++;\\n                j--;\\n            }\\n        }\\n        if (left < j) quickSort(arr, left, j);\\n        if (i < right) quickSort(arr, i, right);\\n    }\\n}\\n\",\"keccak256\":\"0x2cce94db4f423d70543c79888f77ed57fad6e6638e6a1d1399daabb99676643a\",\"license\":\"MIT\"},\"contracts/libraries/logics/FundManagementLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n// interfaces\\nimport {ILendingMarket} from \\\"../../interfaces/ILendingMarket.sol\\\";\\nimport {IFutureValueVault} from \\\"../../interfaces/IFutureValueVault.sol\\\";\\n// libraries\\nimport {AddressResolverLib} from \\\"../AddressResolverLib.sol\\\";\\nimport {QuickSort} from \\\"../QuickSort.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\nimport {RoundingInt256} from \\\"../math/RoundingInt256.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"../../types/ProtocolTypes.sol\\\";\\n// storages\\nimport {LendingMarketControllerStorage as Storage} from \\\"../../storages/LendingMarketControllerStorage.sol\\\";\\n\\nlibrary FundManagementLogic {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using RoundingUint256 for uint256;\\n    using RoundingInt256 for int256;\\n\\n    struct CalculatedAmountVars {\\n        address debtMarket;\\n        uint256 debtFVAmount;\\n        uint256 debtPVAmount;\\n        int256 futureValueAmount;\\n        uint256 estimatedLiquidationPVAmount;\\n        uint256 liquidationPVAmountInETH;\\n        uint256 liquidationFVAmount;\\n        int256 offsetGVAmount;\\n        uint256 offsetFVAmount;\\n    }\\n\\n    struct CalculatedTotalFundInETHVars {\\n        bool[] isCollateral;\\n        bytes32 ccy;\\n        uint256[] amounts;\\n        uint256[] amountsInETH;\\n        uint256 plusDepositAmount;\\n        uint256 minusDepositAmount;\\n    }\\n\\n    struct ActualFunds {\\n        int256 presentValue;\\n        int256 futureValue;\\n        uint256 workingLendingOrdersAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowingOrdersAmount;\\n        uint256 borrowedAmount;\\n        int256 genesisValue;\\n    }\\n\\n    struct CalculateActualFundsVars {\\n        bool isTotal;\\n        address market;\\n        uint256 maturity;\\n        bool isDefaultMarket;\\n        uint256[] maturities;\\n    }\\n\\n    struct FutureValueVaultFunds {\\n        int256 genesisValue;\\n        int256 presentValue;\\n        int256 futureValue;\\n    }\\n\\n    struct InactiveBorrowingOrdersFunds {\\n        int256 genesisValue;\\n        int256 presentValue;\\n        int256 futureValue;\\n        uint256 workingBorrowingOrdersAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct InactiveLendingOrdersFunds {\\n        int256 genesisValue;\\n        int256 presentValue;\\n        int256 futureValue;\\n        uint256 workingLendingOrdersAmount;\\n        uint256 lentAmount;\\n    }\\n\\n    /**\\n     * @notice Converts the future value to the genesis value if there is balance in the past maturity.\\n     * @param _ccy Currency for pausing all lending markets\\n     * @param _user User's address\\n     * @return Current future value amount after update\\n     */\\n    function convertFutureValueToGenesisValue(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) external returns (int256) {\\n        address futureValueVault = Storage.slot().futureValueVaults[_ccy][\\n            Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n        ];\\n        (\\n            int256 removedAmount,\\n            int256 currentAmount,\\n            uint256 basisMaturity,\\n            bool isAllRemoved\\n        ) = IFutureValueVault(futureValueVault).removeFutureValue(_user, _maturity);\\n\\n        if (removedAmount != 0) {\\n            // Overwrite the `removedAmount` with the unsettled amount left of the Genesis Value\\n            // to handle the fractional amount generated by the lazy evaluation.\\n            if (isAllRemoved) {\\n                AddressResolverLib.genesisValueVault().updateGenesisValueWithResidualAmount(\\n                    _ccy,\\n                    _user,\\n                    basisMaturity\\n                );\\n            } else {\\n                AddressResolverLib.genesisValueVault().updateGenesisValueWithFutureValue(\\n                    _ccy,\\n                    _user,\\n                    basisMaturity,\\n                    removedAmount\\n                );\\n            }\\n        }\\n\\n        return currentAmount;\\n    }\\n\\n    function convertToLiquidationAmountFromCollateral(\\n        address _liquidator,\\n        address _user,\\n        bytes32 _collateralCcy,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity,\\n        uint24 _poolFee\\n    ) external returns (uint256 liquidationPVAmount, uint256 offsetPVAmount) {\\n        CalculatedAmountVars memory vars;\\n\\n        vars.liquidationPVAmountInETH = AddressResolverLib.tokenVault().getLiquidationAmount(_user);\\n        require(vars.liquidationPVAmountInETH != 0, \\\"User has enough collateral\\\");\\n\\n        vars.futureValueAmount = calculateActualFunds(_debtCcy, _debtMaturity, _user).futureValue;\\n        require(vars.futureValueAmount < 0, \\\"No debt in the selected maturity\\\");\\n\\n        vars.debtMarket = Storage.slot().maturityLendingMarkets[_debtCcy][_debtMaturity];\\n        vars.debtFVAmount = (-vars.futureValueAmount).toUint256();\\n        vars.debtPVAmount = _calculatePVFromFVInMaturity(\\n            _debtCcy,\\n            _debtMaturity,\\n            -vars.futureValueAmount,\\n            vars.debtMarket\\n        ).toUint256();\\n\\n        vars.liquidationFVAmount = _calculateFVFromPV(\\n            _debtCcy,\\n            _debtMaturity,\\n            AddressResolverLib.currencyController().convertFromETH(\\n                _debtCcy,\\n                vars.liquidationPVAmountInETH\\n            )\\n        );\\n\\n        // If the debt amount is less than the liquidation amount, the debt amount is used as the liquidation amount.\\n        // In that case, the actual liquidation ratio is under the liquidation threshold ratio.\\n        if (vars.liquidationFVAmount > vars.debtFVAmount) {\\n            vars.liquidationFVAmount = vars.debtFVAmount;\\n        }\\n\\n        if (!AddressResolverLib.reserveFund().isPaused()) {\\n            // Offset the user's debt using the future value amount and the genesis value amount hold by the reserve fund contract.\\n            // Before this step, the target user's order must be cleaned up by `LendingMarketController#cleanOrders` function.\\n            // If the target market is the nearest market(default market), the genesis value is used for the offset.\\n            bool isDefaultMarket = Storage.slot().maturityLendingMarkets[_debtCcy][_debtMaturity] ==\\n                Storage.slot().lendingMarkets[_debtCcy][0];\\n\\n            if (isDefaultMarket) {\\n                vars.offsetGVAmount = AddressResolverLib.genesisValueVault().offsetGenesisValue(\\n                    _debtCcy,\\n                    _debtMaturity,\\n                    address(AddressResolverLib.reserveFund()),\\n                    _user,\\n                    AddressResolverLib.genesisValueVault().calculateGVFromFV(\\n                        _debtCcy,\\n                        _debtMaturity,\\n                        vars.liquidationFVAmount.toInt256()\\n                    )\\n                );\\n\\n                if (vars.offsetGVAmount > 0) {\\n                    offsetPVAmount = _calculatePVFromFVInMaturity(\\n                        _debtCcy,\\n                        _debtMaturity,\\n                        AddressResolverLib.genesisValueVault().calculateFVFromGV(\\n                            _debtCcy,\\n                            _debtMaturity,\\n                            vars.offsetGVAmount\\n                        ),\\n                        vars.debtMarket\\n                    ).toUint256();\\n                }\\n            }\\n\\n            vars.offsetFVAmount = _offsetFutureValue(\\n                _debtCcy,\\n                _debtMaturity,\\n                address(AddressResolverLib.reserveFund()),\\n                _user,\\n                vars.liquidationFVAmount -\\n                    _calculateFVFromPV(_debtCcy, _debtMaturity, offsetPVAmount)\\n            );\\n\\n            if (vars.offsetFVAmount > 0) {\\n                offsetPVAmount += _calculatePVFromFVInMaturity(\\n                    _debtCcy,\\n                    _debtMaturity,\\n                    vars.offsetFVAmount.toInt256(),\\n                    vars.debtMarket\\n                ).toUint256();\\n            }\\n        }\\n\\n        // Estimate the filled amount from actual orders in the order book using the future value of user debt.\\n        // If the estimated amount is less than the liquidation amount, the estimated amount is used as\\n        // the liquidation amount.\\n        vars.estimatedLiquidationPVAmount = ILendingMarket(\\n            Storage.slot().maturityLendingMarkets[_debtCcy][_debtMaturity]\\n        ).estimateFilledAmount(\\n                ProtocolTypes.Side.LEND,\\n                vars.liquidationFVAmount -\\n                    _calculateFVFromPV(_debtCcy, _debtMaturity, offsetPVAmount)\\n            );\\n\\n        // Swap collateral from deposited currency to debt currency using Uniswap.\\n        // This swapped collateral is used to unwind the debt.\\n        liquidationPVAmount = AddressResolverLib.tokenVault().swapDepositAmounts(\\n            _liquidator,\\n            _user,\\n            _collateralCcy,\\n            _debtCcy,\\n            vars.estimatedLiquidationPVAmount + offsetPVAmount,\\n            _poolFee,\\n            offsetPVAmount\\n        );\\n    }\\n\\n    function updateDepositAmount(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        ProtocolTypes.Side _side,\\n        uint256 _filledFutureValue,\\n        uint256 _filledAmount,\\n        uint256 _feeFutureValue\\n    ) external {\\n        address futureValueVault = Storage.slot().futureValueVaults[_ccy][\\n            Storage.slot().maturityLendingMarkets[_ccy][_maturity]\\n        ];\\n\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            AddressResolverLib.tokenVault().addDepositAmount(_user, _ccy, _filledAmount);\\n            IFutureValueVault(futureValueVault).addBorrowFutureValue(\\n                _user,\\n                _filledFutureValue + _feeFutureValue,\\n                _maturity,\\n                true\\n            );\\n        } else {\\n            AddressResolverLib.tokenVault().removeDepositAmount(_user, _ccy, _filledAmount);\\n            IFutureValueVault(futureValueVault).addLendFutureValue(\\n                _user,\\n                _filledFutureValue - _feeFutureValue,\\n                _maturity,\\n                true\\n            );\\n        }\\n\\n        if (_feeFutureValue > 0) {\\n            address reserveFundAddr = address(AddressResolverLib.reserveFund());\\n            IFutureValueVault(futureValueVault).addLendFutureValue(\\n                reserveFundAddr,\\n                _feeFutureValue,\\n                _maturity,\\n                _side == ProtocolTypes.Side.LEND\\n            );\\n\\n            if (!Storage.slot().usedMaturities[_ccy][reserveFundAddr].contains(_maturity)) {\\n                Storage.slot().usedMaturities[_ccy][reserveFundAddr].add(_maturity);\\n            }\\n        }\\n    }\\n\\n    function calculateActualFunds(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) public view returns (ActualFunds memory actualFunds) {\\n        CalculateActualFundsVars memory vars;\\n\\n        if (_maturity == 0) {\\n            vars.isTotal = true;\\n            vars.market = Storage.slot().lendingMarkets[_ccy][0];\\n        } else {\\n            vars.isTotal = false;\\n            vars.market = Storage.slot().maturityLendingMarkets[_ccy][_maturity];\\n            vars.isDefaultMarket = vars.market == Storage.slot().lendingMarkets[_ccy][0];\\n            vars.maturity = _maturity;\\n        }\\n        actualFunds.genesisValue = AddressResolverLib.genesisValueVault().getGenesisValue(\\n            _ccy,\\n            _user\\n        );\\n\\n        vars.maturities = getUsedMaturities(_ccy, _user);\\n\\n        for (uint256 i = 0; i < vars.maturities.length; i++) {\\n            address currentMarket = Storage.slot().maturityLendingMarkets[_ccy][vars.maturities[i]];\\n            uint256 currentMaturity = ILendingMarket(currentMarket).getMaturity();\\n            bool isDefaultMarket = currentMarket == Storage.slot().lendingMarkets[_ccy][0];\\n\\n            if (vars.isTotal || vars.isDefaultMarket || currentMarket == vars.market) {\\n                // Get PV from Future Value Vault\\n                FutureValueVaultFunds memory futureValueVaultFunds = _getFundsFromFutureValueVault(\\n                    _ccy,\\n                    _user,\\n                    vars,\\n                    currentMaturity,\\n                    currentMarket,\\n                    isDefaultMarket\\n                );\\n                actualFunds.genesisValue += futureValueVaultFunds.genesisValue;\\n                actualFunds.presentValue += futureValueVaultFunds.presentValue;\\n                actualFunds.futureValue += futureValueVaultFunds.futureValue;\\n\\n                // Get PV from inactive borrow orders\\n                InactiveBorrowingOrdersFunds\\n                    memory inactiveBorrowingOrdersFunds = _getFundsFromInactiveBorrowingOrders(\\n                        _ccy,\\n                        _user,\\n                        vars,\\n                        currentMaturity,\\n                        currentMarket,\\n                        isDefaultMarket\\n                    );\\n                actualFunds.workingBorrowingOrdersAmount += inactiveBorrowingOrdersFunds\\n                    .workingBorrowingOrdersAmount;\\n                actualFunds.borrowedAmount += inactiveBorrowingOrdersFunds.borrowedAmount;\\n                actualFunds.genesisValue -= inactiveBorrowingOrdersFunds.genesisValue;\\n                actualFunds.presentValue -= inactiveBorrowingOrdersFunds.presentValue;\\n                actualFunds.futureValue -= inactiveBorrowingOrdersFunds.futureValue;\\n\\n                // Get PV from inactive lend orders\\n                InactiveLendingOrdersFunds\\n                    memory inactiveLendingOrdersFunds = _getFundsFromInactiveLendingOrders(\\n                        _ccy,\\n                        _user,\\n                        vars,\\n                        currentMaturity,\\n                        currentMarket,\\n                        isDefaultMarket\\n                    );\\n                actualFunds.workingLendingOrdersAmount += inactiveLendingOrdersFunds\\n                    .workingLendingOrdersAmount;\\n                actualFunds.lentAmount += inactiveLendingOrdersFunds.lentAmount;\\n                actualFunds.genesisValue += inactiveLendingOrdersFunds.genesisValue;\\n                actualFunds.presentValue += inactiveLendingOrdersFunds.presentValue;\\n                actualFunds.futureValue += inactiveLendingOrdersFunds.futureValue;\\n\\n                // Get balance fluctuation amount by auto-rolls\\n                if (actualFunds.genesisValue < 0) {\\n                    int256 fluctuation = AddressResolverLib\\n                        .genesisValueVault()\\n                        .calculateBalanceFluctuationByAutoRolls(\\n                            _ccy,\\n                            actualFunds.genesisValue,\\n                            vars.maturities[i],\\n                            i == vars.maturities.length - 1 ? 0 : vars.maturities[i + 1]\\n                        );\\n\\n                    actualFunds.genesisValue += fluctuation;\\n                }\\n            }\\n        }\\n\\n        // Add PV from Genesis Value Vault if the market is that the lending position is rolled to.\\n        if ((vars.isTotal || vars.isDefaultMarket) && actualFunds.genesisValue != 0) {\\n            int256 futureValue = AddressResolverLib.genesisValueVault().calculateFVFromGV(\\n                _ccy,\\n                0,\\n                actualFunds.genesisValue\\n            );\\n            actualFunds.presentValue += _calculatePVFromFV(\\n                futureValue,\\n                ILendingMarket(Storage.slot().lendingMarkets[_ccy][0]).getMidUnitPrice()\\n            );\\n            actualFunds.futureValue += futureValue;\\n        }\\n    }\\n\\n    function calculateFunds(bytes32 _ccy, address _user)\\n        public\\n        view\\n        returns (\\n            uint256 workingLendOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 collateralAmount,\\n            uint256 lentAmount,\\n            uint256 workingBorrowOrdersAmount,\\n            uint256 debtAmount,\\n            uint256 borrowedAmount\\n        )\\n    {\\n        ActualFunds memory funds = calculateActualFunds(_ccy, 0, _user);\\n        workingLendOrdersAmount = funds.workingLendingOrdersAmount;\\n        lentAmount = funds.lentAmount;\\n        workingBorrowOrdersAmount = funds.workingBorrowingOrdersAmount;\\n        borrowedAmount = funds.borrowedAmount;\\n\\n        if (funds.presentValue > 0) {\\n            claimableAmount = (funds.presentValue).toUint256();\\n            uint256 haircut = AddressResolverLib.currencyController().getHaircut(_ccy);\\n            collateralAmount = (claimableAmount * haircut).div(ProtocolTypes.PCT_DIGIT);\\n        } else if (funds.presentValue < 0) {\\n            debtAmount = (-funds.presentValue).toUint256();\\n        }\\n    }\\n\\n    function calculateTotalFundsInETH(\\n        address _user,\\n        bytes32 _depositCcy,\\n        uint256 _depositAmount\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalWorkingLendOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalCollateralAmount,\\n            uint256 totalLentAmount,\\n            uint256 totalWorkingBorrowOrdersAmount,\\n            uint256 totalDebtAmount,\\n            uint256 totalBorrowedAmount,\\n            bool isEnoughDeposit\\n        )\\n    {\\n        EnumerableSet.Bytes32Set storage currencySet = Storage.slot().usedCurrencies[_user];\\n        CalculatedTotalFundInETHVars memory vars;\\n\\n        vars.isCollateral = AddressResolverLib.tokenVault().isCollateral(currencySet.values());\\n        vars.plusDepositAmount = _depositAmount;\\n\\n        // Calculate total funds from the user's order list\\n        for (uint256 i = 0; i < currencySet.length(); i++) {\\n            vars.ccy = currencySet.at(i);\\n            vars.amounts = new uint256[](7);\\n\\n            // 0: workingLendOrdersAmount\\n            // 1: claimableAmount\\n            // 2: collateralAmount\\n            // 3: lentAmount\\n            // 4: workingBorrowOrdersAmount\\n            // 5: debtAmount\\n            // 6: borrowedAmount\\n            (\\n                vars.amounts[0],\\n                vars.amounts[1],\\n                vars.amounts[2],\\n                vars.amounts[3],\\n                vars.amounts[4],\\n                vars.amounts[5],\\n                vars.amounts[6]\\n            ) = calculateFunds(vars.ccy, _user);\\n\\n            if (vars.ccy == _depositCcy) {\\n                // plusDepositAmount: depositAmount + borrowedAmount\\n                // minusDepositAmount: workingLendOrdersAmount + lentAmount\\n                vars.plusDepositAmount += vars.amounts[6];\\n                vars.minusDepositAmount += vars.amounts[0] + vars.amounts[3];\\n            }\\n\\n            vars.amountsInETH = AddressResolverLib.currencyController().convertToETH(\\n                vars.ccy,\\n                vars.amounts\\n            );\\n\\n            totalClaimableAmount += vars.amountsInETH[1];\\n            totalCollateralAmount += vars.amountsInETH[2];\\n            totalWorkingBorrowOrdersAmount += vars.amountsInETH[4];\\n            totalDebtAmount += vars.amountsInETH[5];\\n\\n            // NOTE: Lent amount and working lend orders amount are excluded here as they are not used\\n            // for the collateral calculation.\\n            // Those amounts need only to check whether there is enough deposit amount in the selected currency.\\n            if (vars.isCollateral[i]) {\\n                totalWorkingLendOrdersAmount += vars.amountsInETH[0];\\n                totalLentAmount += vars.amountsInETH[3];\\n                totalBorrowedAmount += vars.amountsInETH[6];\\n            }\\n        }\\n\\n        // Check if the user has enough collateral in the selected currency.\\n        isEnoughDeposit = vars.plusDepositAmount >= vars.minusDepositAmount;\\n    }\\n\\n    function getUsedMaturities(bytes32 _ccy, address _user)\\n        public\\n        view\\n        returns (uint256[] memory maturities)\\n    {\\n        maturities = Storage.slot().usedMaturities[_ccy][_user].values();\\n        if (maturities.length > 0) {\\n            maturities = QuickSort.sort(maturities);\\n        }\\n    }\\n\\n    function _getFundsFromFutureValueVault(\\n        bytes32 _ccy,\\n        address _user,\\n        CalculateActualFundsVars memory vars,\\n        uint256 currentMaturity,\\n        address currentMarket,\\n        bool isDefaultMarket\\n    ) internal view returns (FutureValueVaultFunds memory funds) {\\n        (int256 futureValueInMaturity, uint256 fvMaturity) = IFutureValueVault(\\n            Storage.slot().futureValueVaults[_ccy][currentMarket]\\n        ).getFutureValue(_user);\\n\\n        if (futureValueInMaturity != 0) {\\n            if (currentMaturity != fvMaturity) {\\n                if (vars.isTotal || vars.isDefaultMarket) {\\n                    // genesis value\\n                    funds.genesisValue = AddressResolverLib.genesisValueVault().calculateGVFromFV(\\n                        _ccy,\\n                        fvMaturity,\\n                        futureValueInMaturity\\n                    );\\n                }\\n            } else if (currentMaturity == fvMaturity) {\\n                if (\\n                    vars.isTotal ||\\n                    (vars.isDefaultMarket && isDefaultMarket) ||\\n                    !vars.isDefaultMarket\\n                ) {\\n                    (funds.presentValue, funds.futureValue) = _calculatePVandFVFromFVInMaturity(\\n                        _ccy,\\n                        fvMaturity,\\n                        vars.maturity,\\n                        futureValueInMaturity\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getFundsFromInactiveBorrowingOrders(\\n        bytes32 _ccy,\\n        address _user,\\n        CalculateActualFundsVars memory vars,\\n        uint256 currentMaturity,\\n        address currentMarket,\\n        bool isDefaultMarket\\n    ) internal view returns (InactiveBorrowingOrdersFunds memory funds) {\\n        uint256 borrowFVInMaturity;\\n        uint256 borrowOrdersMaturity;\\n        (\\n            funds.workingBorrowingOrdersAmount,\\n            funds.borrowedAmount,\\n            borrowFVInMaturity,\\n            borrowOrdersMaturity\\n        ) = ILendingMarket(currentMarket).getTotalAmountFromBorrowOrders(_user);\\n\\n        if (borrowFVInMaturity != 0) {\\n            if (currentMaturity != borrowOrdersMaturity) {\\n                if (vars.isTotal || vars.isDefaultMarket) {\\n                    funds.genesisValue = AddressResolverLib.genesisValueVault().calculateGVFromFV(\\n                        _ccy,\\n                        borrowOrdersMaturity,\\n                        borrowFVInMaturity.toInt256()\\n                    );\\n                }\\n            } else if (currentMaturity == borrowOrdersMaturity) {\\n                if (\\n                    vars.isTotal ||\\n                    (vars.isDefaultMarket && isDefaultMarket) ||\\n                    !vars.isDefaultMarket\\n                ) {\\n                    (funds.presentValue, funds.futureValue) = _calculatePVandFVFromFVInMaturity(\\n                        _ccy,\\n                        borrowOrdersMaturity,\\n                        vars.maturity,\\n                        borrowFVInMaturity.toInt256()\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getFundsFromInactiveLendingOrders(\\n        bytes32 _ccy,\\n        address _user,\\n        CalculateActualFundsVars memory vars,\\n        uint256 currentMaturity,\\n        address currentMarket,\\n        bool isDefaultMarket\\n    ) internal view returns (InactiveLendingOrdersFunds memory funds) {\\n        uint256 lendFVInMaturity;\\n        uint256 lendOrdersMaturity;\\n        (\\n            funds.workingLendingOrdersAmount,\\n            funds.lentAmount,\\n            lendFVInMaturity,\\n            lendOrdersMaturity\\n        ) = ILendingMarket(currentMarket).getTotalAmountFromLendOrders(_user);\\n\\n        if (lendFVInMaturity != 0) {\\n            if (currentMaturity != lendOrdersMaturity) {\\n                if (vars.isTotal || vars.isDefaultMarket) {\\n                    funds.genesisValue += AddressResolverLib.genesisValueVault().calculateGVFromFV(\\n                        _ccy,\\n                        lendOrdersMaturity,\\n                        lendFVInMaturity.toInt256()\\n                    );\\n                }\\n            } else if (currentMaturity == lendOrdersMaturity) {\\n                if (\\n                    vars.isTotal ||\\n                    (vars.isDefaultMarket && isDefaultMarket) ||\\n                    !vars.isDefaultMarket\\n                ) {\\n                    (funds.presentValue, funds.futureValue) = _calculatePVandFVFromFVInMaturity(\\n                        _ccy,\\n                        lendOrdersMaturity,\\n                        vars.maturity,\\n                        lendFVInMaturity.toInt256()\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function _calculatePVandFVFromFVInMaturity(\\n        bytes32 _ccy,\\n        uint256 _basisMaturity,\\n        uint256 _destinationMaturity,\\n        int256 _futureValueInBasisMaturity\\n    ) internal view returns (int256 presetValue, int256 futureValue) {\\n        require(_basisMaturity >= _destinationMaturity, \\\"Invalid destination maturity\\\");\\n\\n        address destinationMarket = _destinationMaturity == 0\\n            ? Storage.slot().lendingMarkets[_ccy][0]\\n            : Storage.slot().maturityLendingMarkets[_ccy][_destinationMaturity];\\n        uint256 unitPriceInDestinationMaturity = ILendingMarket(destinationMarket)\\n            .getMidUnitPrice();\\n\\n        if (\\n            AddressResolverLib\\n                .genesisValueVault()\\n                .getAutoRollLog(_ccy, _destinationMaturity)\\n                .unitPrice == 0\\n        ) {\\n            uint256 unitPriceInBasisMaturity = ILendingMarket(\\n                Storage.slot().maturityLendingMarkets[_ccy][_basisMaturity]\\n            ).getMidUnitPrice();\\n            presetValue = _calculatePVFromFV(_futureValueInBasisMaturity, unitPriceInBasisMaturity);\\n            futureValue = (presetValue * ProtocolTypes.PRICE_DIGIT.toInt256()).div(\\n                unitPriceInDestinationMaturity.toInt256()\\n            );\\n        } else {\\n            futureValue = AddressResolverLib.genesisValueVault().calculateFVFromFV(\\n                _ccy,\\n                _basisMaturity,\\n                _destinationMaturity,\\n                _futureValueInBasisMaturity\\n            );\\n            presetValue = _calculatePVFromFV(futureValue, unitPriceInDestinationMaturity);\\n        }\\n    }\\n\\n    function _calculateFVFromPV(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _presentValue\\n    ) internal view returns (uint256) {\\n        uint256 unitPrice = ILendingMarket(Storage.slot().maturityLendingMarkets[_ccy][_maturity])\\n            .getMidUnitPrice();\\n\\n        // NOTE: The formula is: futureValue = presentValue / unitPrice.\\n        return (_presentValue * ProtocolTypes.PRICE_DIGIT).div(unitPrice);\\n    }\\n\\n    function _calculatePVFromFVInMaturity(\\n        bytes32 _ccy,\\n        uint256 maturity,\\n        int256 futureValueInMaturity,\\n        address lendingMarketInMaturity\\n    ) internal view returns (int256 totalPresentValue) {\\n        uint256 unitPriceInMaturity = AddressResolverLib\\n            .genesisValueVault()\\n            .getAutoRollLog(_ccy, maturity)\\n            .unitPrice;\\n        int256 futureValue;\\n        uint256 unitPrice;\\n\\n        if (unitPriceInMaturity == 0) {\\n            futureValue = futureValueInMaturity;\\n            unitPrice = ILendingMarket(lendingMarketInMaturity).getMidUnitPrice();\\n        } else {\\n            futureValue = AddressResolverLib.genesisValueVault().calculateFVFromFV(\\n                _ccy,\\n                maturity,\\n                0,\\n                futureValueInMaturity\\n            );\\n            unitPrice = ILendingMarket(Storage.slot().lendingMarkets[_ccy][0]).getMidUnitPrice();\\n        }\\n\\n        return _calculatePVFromFV(futureValue, unitPrice);\\n    }\\n\\n    function _calculatePVFromFV(int256 _futureValue, uint256 _unitPrice)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        // NOTE: The formula is: presentValue = futureValue * unitPrice.\\n        return (_futureValue * _unitPrice.toInt256()).div(ProtocolTypes.PRICE_DIGIT.toInt256());\\n    }\\n\\n    function _offsetFutureValue(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _lender,\\n        address _borrower,\\n        uint256 _maximumFVAmount\\n    ) internal returns (uint256 offsetAmount) {\\n        address market = Storage.slot().maturityLendingMarkets[_ccy][_maturity];\\n        address futureValueVault = Storage.slot().futureValueVaults[_ccy][market];\\n\\n        offsetAmount = IFutureValueVault(futureValueVault).offsetFutureValue(\\n            _lender,\\n            _borrower,\\n            _maximumFVAmount\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x1d8bf5fa9bfdf5255399acaf8827fef48b00eeebbb7526402dd462872dc43783\",\"license\":\"MIT\"},\"contracts/libraries/math/RoundingInt256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoundingInt256 {\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0);\\n\\n        int256 diff = (a * 10) / b - (a / b) * 10;\\n        if (diff >= 5) {\\n            return (a / b) + 1;\\n        } else if (diff <= -5) {\\n            return (a / b) - 1;\\n        } else {\\n            return a / b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7ab7168f709ecb8d28c017b8c074fe83ae88de347d3aed6ce13f2188d854cb9\",\"license\":\"MIT\"},\"contracts/libraries/math/RoundingUint256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoundingUint256 {\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0);\\n\\n        if ((a * 10) / b - (a / b) * 10 < 5) {\\n            return a / b;\\n        } else {\\n            return (a / b) + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc360f39a82f1a9a7454726e3db802407d305b5e525aa8c3236fe49ca6ca534d\",\"license\":\"MIT\"},\"contracts/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct Currency {\\n    bool isSupported;\\n    string name;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.currencyController\\\");\\n\\n    struct Storage {\\n        // Protocol currencies\\n        EnumerableSet.Bytes32Set currencies;\\n        mapping(bytes32 => uint256) haircuts;\\n        // PriceFeed\\n        mapping(bytes32 => AggregatorV3Interface) usdPriceFeeds;\\n        mapping(bytes32 => AggregatorV3Interface) ethPriceFeeds;\\n        mapping(bytes32 => uint8) usdDecimals;\\n        mapping(bytes32 => uint8) ethDecimals;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x318293c6e7a2b9129e4c4e05a873c772e3a0cc4a92b40cc88749586f716c6643\",\"license\":\"MIT\"},\"contracts/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nstruct AutoRollLog {\\n    uint256 unitPrice;\\n    uint256 lendingCompoundFactor;\\n    uint256 borrowingCompoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.genesisValueVault\\\");\\n\\n    struct Storage {\\n        mapping(bytes32 => bool) isInitialized;\\n        mapping(bytes32 => uint256) initialCompoundFactors;\\n        mapping(bytes32 => uint256) lendingCompoundFactors;\\n        mapping(bytes32 => uint256) borrowingCompoundFactors;\\n        mapping(bytes32 => uint256) currentMaturity;\\n        mapping(bytes32 => uint8) decimals;\\n        // Mapping from user to balance per currency\\n        mapping(bytes32 => mapping(address => int256)) balances;\\n        mapping(bytes32 => uint256) totalLendingSupplies;\\n        mapping(bytes32 => uint256) totalBorrowingSupplies;\\n        // Mapping from maturity balance per currency\\n        mapping(bytes32 => mapping(uint256 => int256)) maturityBalances;\\n        // Mapping from maturity to auto-roll log per currency\\n        mapping(bytes32 => mapping(uint256 => AutoRollLog)) autoRollLogs;\\n        // Mapping from user to maturity per currency\\n        mapping(bytes32 => mapping(address => uint256)) userMaturities;\\n        // Mapping from maturity to maximum total supply per currency\\n        mapping(bytes32 => mapping(uint256 => uint256)) maximumTotalSupply;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa3bdb289513fa796d60fa49b83af011113a693377e1466ab4088cb5fd11a2917\",\"license\":\"MIT\"},\"contracts/storages/LendingMarketControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct ObservationPeriodLog {\\n    uint256 totalAmount;\\n    uint256 totalFutureValue;\\n}\\n\\nlibrary LendingMarketControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarketController\\\");\\n\\n    struct Storage {\\n        // Mapping from currency to lending market contract addresses\\n        mapping(bytes32 => address[]) lendingMarkets;\\n        // Mapping from lending market contract address to future value vault contract address per currency\\n        mapping(bytes32 => mapping(address => address)) futureValueVaults;\\n        // Mapping from maturity to lending market contract address per currency\\n        mapping(bytes32 => mapping(uint256 => address)) maturityLendingMarkets;\\n        // Mapping from currency to genesis date in the lending market\\n        mapping(bytes32 => uint256) genesisDates;\\n        // Mapping from user to used currency\\n        mapping(address => EnumerableSet.Bytes32Set) usedCurrencies;\\n        // Mapping from user to used market maturity per currency\\n        mapping(bytes32 => mapping(address => EnumerableSet.UintSet)) usedMaturities;\\n        // Mapping from user to active order existence per currency and maturity\\n        mapping(address => mapping(bytes32 => mapping(uint256 => bool))) activeOrderExistences;\\n        // Mapping from maturity to observation period log per currency\\n        mapping(bytes32 => mapping(uint256 => ObservationPeriodLog)) observationPeriodLogs;\\n        // Mapping from maturity to latest estimated auto roll unit price per currency\\n        mapping(bytes32 => mapping(uint256 => uint256)) estimatedAutoRollUnitPrice;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a5cc0b59b0c54b05c8c8d00bddf58fb60652e7d987422d90d86c012ec0b5a9f\",\"license\":\"MIT\"},\"contracts/storages/LendingMarketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport \\\"../libraries/OrderStatisticsTreeLib.sol\\\";\\n\\nstruct MarketOrder {\\n    ProtocolTypes.Side side;\\n    uint256 unitPrice; // in basis points\\n    uint256 maturity;\\n    uint256 timestamp;\\n}\\n\\nlibrary LendingMarketStorage {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.lendingMarket\\\");\\n\\n    struct Storage {\\n        bytes32 ccy;\\n        uint48 lastOrderId;\\n        uint256 openingDate;\\n        uint256 maturity;\\n        // Mapping from maturity to opening unit price\\n        mapping(uint256 => uint256) openingUnitPrices;\\n        // Mapping from maturity to boolean if the market is ready or not\\n        mapping(uint256 => bool) isReady;\\n        // Mapping from user to active lend order ids\\n        mapping(address => uint48[]) activeLendOrderIds;\\n        // Mapping from user to active borrow order ids\\n        mapping(address => uint48[]) activeBorrowOrderIds;\\n        // Mapping from user to current maturity\\n        mapping(address => uint256) userCurrentMaturities;\\n        // Mapping from orderId to order\\n        mapping(uint256 => MarketOrder) orders;\\n        // Mapping from orderId to boolean for pre-order or not\\n        mapping(uint256 => bool) isPreOrder;\\n        // Mapping from maturity to lending orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) lendOrders;\\n        // Mapping from maturity to borrowing orders\\n        mapping(uint256 => OrderStatisticsTreeLib.Tree) borrowOrders;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4f83e32de550c47e0bf47d192f22fc445864a04ac0a3d922aeb911a4a9dd32d6\",\"license\":\"MIT\"},\"contracts/storages/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.mixinAddressResolver\\\");\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 => address) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x852b885b6264a58930a0945c68842717e19f954eaefc0137235e6f263e17fa9d\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant PRICE_DIGIT = 10000; // price digit in the basis (10000 -> 1)\\n    uint256 public constant PCT_DIGIT = 10000; // percentage digit in the basis (10000 -> 100%)\\n\\n    uint256 internal constant DAYS_IN_YEAR = 365;\\n    uint256 internal constant SECONDS_IN_MONTH = 2592000; // 60 * 60 * 24 * 30 * 12\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000; // 60 * 60 * 24 * 365\\n\\n    uint256 internal constant BASIS_TERM = 3;\\n    uint256 internal constant MAXIMUM_ORDER_COUNT = 20;\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0xcb43d4a2e7f1986226d3562402000a7e3766391cb1e350aa625e70952ed218b6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6136f061003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100875760003560e01c80634ad23880116100655780634ad23880146101315780635c3477651461019a5780639c599f8b146101e2578063b61ef55a1461021757600080fd5b80630312b5281461008c578063300074c9146100e15780633df3a2371461010f575b600080fd5b61009f61009a366004612f26565b610237565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c0830152151560e0820152610100015b60405180910390f35b8180156100ed57600080fd5b506101016100fc366004612f59565b610746565b6040519081526020016100d8565b81801561011b57600080fd5b5061012f61012a366004612f8e565b61093f565b005b61014461013f366004612f59565b610cf6565b6040516100d89190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b6101ad6101a8366004612ff5565b6114a7565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016100d8565b8180156101ee57600080fd5b506102026101fd366004613021565b6115cc565b604080519283526020830191909152016100d8565b61022a610225366004612ff5565b611d8d565b6040516100d8919061308c565b600080600080600080600080600061024d611e63565b60040160008d6001600160a01b03166001600160a01b0316815260200190815260200160002090506102b16040518060c001604052806060815260200160008019168152602001606081526020016060815260200160008152602001600081525090565b6102b9611e87565b6001600160a01b0316633f90a08e6102d084611ea4565b6040518263ffffffff1660e01b81526004016102ec919061308c565b60006040518083038186803b15801561030457600080fd5b505afa158015610318573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610340919081019061314b565b8152608081018b905260005b61035583611eaf565b811015610728576103668382611eb9565b6020830152604080516007808252610100820190925290816020016020820280368337505050604083015260208201516103a0908f6114a7565b88604001516000815181106103b7576103b76131e8565b6020026020010189604001516001815181106103d5576103d56131e8565b602002602001018a604001516002815181106103f3576103f36131e8565b602002602001018b60400151600381518110610411576104116131e8565b602002602001018c6040015160048151811061042f5761042f6131e8565b602002602001018d6040015160058151811061044d5761044d6131e8565b602002602001018e6040015160068151811061046b5761046b6131e8565b6020908102919091018101979097529690965295909452949093529390529290529190528201518d141561052a5781604001516006815181106104b0576104b06131e8565b6020026020010151826080018181516104c99190613214565b9052506040820151805160039081106104e4576104e46131e8565b60200260200101518260400151600081518110610503576105036131e8565b60200260200101516105159190613214565b8260a0018181516105269190613214565b9052505b610532611ec5565b6001600160a01b031663939fe622836020015184604001516040518363ffffffff1660e01b815260040161056792919061322c565b60006040518083038186803b15801561057f57600080fd5b505afa158015610593573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105bb919081019061326d565b60608301819052805160019081106105d5576105d56131e8565b60200260200101518a6105e89190613214565b99508160600151600281518110610601576106016131e8565b6020026020010151896106149190613214565b9850816060015160048151811061062d5761062d6131e8565b6020026020010151876106409190613214565b96508160600151600581518110610659576106596131e8565b60200260200101518661066c9190613214565b955081600001518181518110610684576106846131e8565b6020026020010151156107165781606001516000815181106106a8576106a86131e8565b60200260200101518b6106bb9190613214565b9a5081606001516003815181106106d4576106d46131e8565b6020026020010151886106e79190613214565b97508160600151600681518110610700576107006131e8565b6020026020010151856107139190613214565b94505b80610720816132f3565b91505061034c565b508060a0015181608001511015925050509397509397509397509397565b600080610751611e63565b6000868152600191909101602052604081209061076c611e63565b6000888152600291909101602090815260408083208984528252808320546001600160a01b03908116855291840194909452918301812054925163ae100e6d60e01b815286831660048201526024810188905292909116925090819081908190859063ae100e6d90604401608060405180830381600087803b1580156107f157600080fd5b505af1158015610805573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610829919061330e565b9350935093509350836000146109325780156108b757610847611ee5565b60405163312c474560e01b8152600481018b90526001600160a01b03898116602483015260448201859052919091169063312c474590606401600060405180830381600087803b15801561089a57600080fd5b505af11580156108ae573d6000803e3d6000fd5b50505050610932565b6108bf611ee5565b6040516360e3f72960e11b8152600481018b90526001600160a01b0389811660248301526044820185905260648201879052919091169063c1c7ee5290608401600060405180830381600087803b15801561091957600080fd5b505af115801561092d573d6000803e3d6000fd5b505050505b5090979650505050505050565b6000610949611e63565b60008981526001919091016020526040812090610964611e63565b60008b8152600291909101602090815260408083208c84528252808320546001600160a01b03908116855291840194909452919092019091205416905060018560018111156109b5576109b561334d565b1415610ac4576109c3611e87565b604051634ba0c9b560e01b81526001600160a01b038881166004830152602482018b9052604482018690529190911690634ba0c9b590606401600060405180830381600087803b158015610a1657600080fd5b505af1158015610a2a573d6000803e3d6000fd5b50505050806001600160a01b0316635b0b2930878487610a4a9190613214565b8a60016040518563ffffffff1660e01b8152600401610a6c9493929190613363565b602060405180830381600087803b158015610a8657600080fd5b505af1158015610a9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abe919061338b565b50610bc9565b610acc611e87565b604051633edef4ed60e21b81526001600160a01b038881166004830152602482018b905260448201869052919091169063fb7bd3b490606401600060405180830381600087803b158015610b1f57600080fd5b505af1158015610b33573d6000803e3d6000fd5b50505050806001600160a01b0316639e8d3d55878487610b5391906133a6565b8a60016040518563ffffffff1660e01b8152600401610b759493929190613363565b602060405180830381600087803b158015610b8f57600080fd5b505af1158015610ba3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc7919061338b565b505b8115610cec576000610bd9611f04565b90506001600160a01b038216639e8d3d5582858b60008b6001811115610c0157610c0161334d565b146040518563ffffffff1660e01b8152600401610c219493929190613363565b602060405180830381600087803b158015610c3b57600080fd5b505af1158015610c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c73919061338b565b50610cac88610c80611e63565b60008c8152600591909101602090815260408083206001600160a01b0387168452909152902090611f1d565b610cea57610ce888610cbc611e63565b60008c8152600591909101602090815260408083206001600160a01b0387168452909152902090611f35565b505b505b5050505050505050565b610d366040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b610d756040518060a0016040528060001515815260200160006001600160a01b0316815260200160008152602001600015158152602001606081525090565b83610dc55760018152610d86611e63565b6000868152602091909152604081208054909190610da657610da66131e8565b600091825260209182902001546001600160a01b031690820152610e50565b60008152610dd1611e63565b6000868152600291909101602090815260408083208784528252909120546001600160a01b031690820152610e04611e63565b6000868152602091909152604081208054909190610e2457610e246131e8565b60009182526020918290200154908201516001600160a01b039081169116146060820152604081018490525b610e58611ee5565b60405163386320d360e11b8152600481018790526001600160a01b03858116602483015291909116906370c641a69060440160206040518083038186803b158015610ea257600080fd5b505afa158015610eb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eda91906133bd565b60c0830152610ee98584611d8d565b608082015260005b816080015151811015611305576000610f08611e63565b6002016000888152602001908152602001600020600084608001518481518110610f3457610f346131e8565b6020026020010151815260200190815260200160002060009054906101000a90046001600160a01b031690506000816001600160a01b031663e16695b56040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9b57600080fd5b505afa158015610faf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd391906133bd565b90506000610fdf611e63565b60008a8152602091909152604081208054909190610fff57610fff6131e8565b60009182526020909120015485516001600160a01b0385811692169190911491508061102c575084606001515b8061104c575084602001516001600160a01b0316836001600160a01b0316145b156112ef5760006110618a8988868887611f41565b905080600001518760c00181815161107991906133d6565b9052506020810151875188906110909083906133d6565b90525060408101516020880180516110a99083906133d6565b90525060006110bc8b8a8987898861211e565b90508060600151886080018181516110d49190613214565b905250608081015160a0890180516110ed908390613214565b905250805160c089018051611103908390613417565b90525060208101518851899061111a908390613417565b9052506040810151602089018051611133908390613417565b90525060006111468c8b8a888a8961229d565b905080606001518960400181815161115e9190613214565b905250608081015160608a018051611177908390613214565b905250805160c08a01805161118d9083906133d6565b905250602081015189518a906111a49083906133d6565b905250604081015160208a0180516111bd9083906133d6565b90525060c0890151600013156112eb5760006111d7611ee5565b6001600160a01b031663aee1311e8e8c60c001518c608001518c81518110611201576112016131e8565b602002602001015160018e608001515161121b91906133a6565b8d1461124e5760808e01516112318e6001613214565b81518110611241576112416131e8565b6020026020010151611251565b60005b6040516001600160e01b031960e087901b168152600481019490945260248401929092526044830152606482015260840160206040518083038186803b15801561129a57600080fd5b505afa1580156112ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d291906133bd565b9050808a60c0018181516112e691906133d6565b905250505b5050505b50505080806112fd906132f3565b915050610ef1565b50805180611314575080606001515b8015611323575060c082015115155b1561149f576000611332611ee5565b60c0840151604051637636e94160e01b8152600481018990526000602482015260448101919091526001600160a01b039190911690637636e9419060640160206040518083038186803b15801561138857600080fd5b505afa15801561139c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c091906133bd565b9050611474816113ce611e63565b60008981526020919091526040812080549091906113ee576113ee6131e8565b60009182526020918290200154604080516371613c2d60e01b815290516001600160a01b03909216926371613c2d92600480840193829003018186803b15801561143757600080fd5b505afa15801561144b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146f91906133bd565b612436565b835184906114839083906133d6565b90525060208301805182919061149a9083906133d6565b905250505b509392505050565b6000806000806000806000806114bf8a60008b610cf6565b90508060400151975080606001519450806080015193508060a00151915060008160000151131561159e5780516114f59061245f565b96506000611501611ec5565b6001600160a01b0316639abdb38a8c6040518263ffffffff1660e01b815260040161152e91815260200190565b60206040518083038186803b15801561154657600080fd5b505afa15801561155a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157e91906133bd565b9050611596612710611590838b613456565b906124b5565b9650506115bf565b8051600013156115bf5780516115bc906115b790613475565b61245f565b92505b5092959891949750929550565b60008061162760405180610120016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61162f611e87565b60405163afe8efcf60e01b81526001600160a01b038a81166004830152919091169063afe8efcf9060240160206040518083038186803b15801561167257600080fd5b505afa158015611686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116aa91906133bd565b60a082018190526117025760405162461bcd60e51b815260206004820152601a60248201527f557365722068617320656e6f75676820636f6c6c61746572616c00000000000060448201526064015b60405180910390fd5b61170d86868a610cf6565b60200151606082018190526000136117675760405162461bcd60e51b815260206004820181905260248201527f4e6f206465627420696e207468652073656c6563746564206d6174757269747960448201526064016116f9565b61176f611e63565b6000878152600291909101602090815260408083208884529091529020546001600160a01b0316815260608101516117aa906115b790613475565b8160200181815250506117d06115b7878784606001516117c990613475565b8551612526565b604082015261187186866117e2611ec5565b6001600160a01b03166306d062ad8a8660a001516040518363ffffffff1660e01b815260040161181c929190918252602082015260400190565b60206040518083038186803b15801561183457600080fd5b505afa158015611848573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186c91906133bd565b612793565b60c082018190526020820151101561188e57602081015160c08201525b611896611f04565b6001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b1580156118ce57600080fd5b505afa1580156118e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611906919061338b565b611bed576000611914611e63565b6000888152602091909152604081208054909190611934576119346131e8565b6000918252602090912001546001600160a01b0316611951611e63565b6000898152600291909101602090815260408083208a84529091529020546001600160a01b03161490508015611b8e57611989611ee5565b6001600160a01b03166388c0520e88886119a1611f04565b8d6119aa611ee5565b6001600160a01b03166318612e328e8e6119c78c60c0015161284c565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b158015611a0b57600080fd5b505afa158015611a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4391906133bd565b6040516001600160e01b031960e088901b168152600481019590955260248501939093526001600160a01b039182166044850152166064830152608482015260a401602060405180830381600087803b158015611a9f57600080fd5b505af1158015611ab3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad791906133bd565b60e0830181905260001215611b8e57611b8b6115b78888611af6611ee5565b60e0870151604051637636e94160e01b8152600481018e9052602481018d905260448101919091526001600160a01b039190911690637636e9419060640160206040518083038186803b158015611b4c57600080fd5b505afa158015611b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8491906133bd565b8651612526565b92505b611bbb8787611b9b611f04565b8c611ba78c8c8a612793565b8760c00151611bb691906133a6565b6128b6565b610100830181905215611beb57611bde6115b78888611b8486610100015161284c565b611be89084613214565b92505b505b611bf5611e63565b6000878152600291909101602090815260408083208884529091528120546001600160a01b031690631e007d1d90611c2e898987612793565b8460c00151611c3d91906133a6565b6040518363ffffffff1660e01b8152600401611c5a929190613492565b60206040518083038186803b158015611c7257600080fd5b505afa158015611c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611caa91906133bd565b6080820152611cb7611e87565b6001600160a01b031663ab2a07778a8a8a8a878760800151611cd99190613214565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015260448401919091526064830152608482015262ffffff871660a482015260c4810185905260e401602060405180830381600087803b158015611d4757600080fd5b505af1158015611d5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7f91906133bd565b925050965096945050505050565b6060611dc5611d9a611e63565b6000858152600591909101602090815260408083206001600160a01b0387168452909152902061299f565b805190915015611e5d57604051634f64581360e11b815273A9CCE7edDa661E2D10571f19A2AF0b31CaF23cD090639ec8b02690611e0690849060040161308c565b60006040518083038186803b158015611e1e57600080fd5b505af4158015611e32573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e5a919081019061326d565b90505b92915050565b7f8041b8421ebd495cc61f38c788c9eb100daccf9bd36aa0bb920b7a15b2e0496590565b6000611e9f69151bdad95b95985d5b1d60b21b6129b3565b905090565b6060611e5d82612a4b565b6000611e5d825490565b6000611e5a8383612aa7565b6000611e9f7121bab93932b731bca1b7b73a3937b63632b960711b6129b3565b6000611e9f7011d95b995cda5cd5985b1d5955985d5b1d607a1b6129b3565b6000611e9f6a14995cd95c9d99519d5b9960aa1b6129b3565b60008181526001830160205260408120541515611e5a565b6000611e5a8383612ad1565b611f6560405180606001604052806000815260200160008152602001600081525090565b600080611f70611e63565b60008a8152600191909101602090815260408083206001600160a01b03898116855292529182902054915163070da1af60e11b81528a82166004820152911690630e1b435e90602401604080518083038186803b158015611fd057600080fd5b505afa158015611fe4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200891906134be565b9150915081600014612112578086146120c757865180612029575086606001515b156120c257612036611ee5565b604051630c30971960e11b8152600481018b905260248101839052604481018490526001600160a01b0391909116906318612e32906064015b60206040518083038186803b15801561208757600080fd5b505afa15801561209b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120bf91906133bd565b83525b612112565b80861415612112578651806120e55750866060015180156120e55750835b806120f257508660600151155b15612112576121078982896040015185612b20565b604085015260208401525b50509695505050505050565b6121506040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b604051631c7b209b60e31b81526001600160a01b038781166004830152600091829186169063e3d904d89060240160806040518083038186803b15801561219657600080fd5b505afa1580156121aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ce91906134e2565b608087019290925260608601929092529092509050811561211257808614612255578651806121fe575086606001515b156120c25761220b611ee5565b6001600160a01b03166318612e328a836122248661284c565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640161206f565b80861415612112578651806122735750866060015180156122735750835b8061228057508660600151155b1561211257612107898289604001516122988661284c565b612b20565b6122cf6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040516339f7dda360e21b81526001600160a01b038781166004830152600091829186169063e7df768c9060240160806040518083038186803b15801561231557600080fd5b505afa158015612329573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234d91906134e2565b6080870192909252606086019290925290925090508115612112578086146122555786518061237d575086606001515b156120c25761238a611ee5565b6001600160a01b03166318612e328a836123a38661284c565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b1580156123e757600080fd5b505afa1580156123fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241f91906133bd565b8351849061242e9083906133d6565b905250612112565b6000611e5a61244661271061284c565b61244f8461284c565b6124599086613518565b90612e77565b6000808212156124b15760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f73697469766560448201526064016116f9565b5090565b60008082116124c357600080fd5b60056124cf83856135b3565b6124da90600a613456565b836124e686600a613456565b6124f091906135b3565b6124fa91906133a6565b10156125115761250a82846135b3565b9050611e5d565b61251b82846135b3565b61250a906001613214565b600080612531611ee5565b60405163474611f160e01b815260048101889052602481018790526001600160a01b03919091169063474611f19060440160a06040518083038186803b15801561257a57600080fd5b505afa15801561258e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b291906135c7565b5190506000808261263857859150846001600160a01b03166371613c2d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156125f957600080fd5b505afa15801561260d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061263191906133bd565b905061277d565b612640611ee5565b604051631b736f6760e31b8152600481018a90526024810189905260006044820152606481018890526001600160a01b03919091169063db9b7b389060840160206040518083038186803b15801561269757600080fd5b505afa1580156126ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126cf91906133bd565b91506126d9611e63565b60008981526020919091526040812080549091906126f9576126f96131e8565b60009182526020918290200154604080516371613c2d60e01b815290516001600160a01b03909216926371613c2d92600480840193829003018186803b15801561274257600080fd5b505afa158015612756573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277a91906133bd565b90505b6127878282612436565b98975050505050505050565b60008061279e611e63565b6000868152600291909101602090815260408083208784528252918290205482516371613c2d60e01b815292516001600160a01b03909116926371613c2d926004808301939192829003018186803b1580156127f957600080fd5b505afa15801561280d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283191906133bd565b90506128438161159061271086613456565b95945050505050565b60006001600160ff1b038211156124b15760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016116f9565b6000806128c1611e63565b6000888152600291909101602090815260408083208984529091528120546001600160a01b031691506128f2611e63565b6000898152600191909101602090815260408083206001600160a01b038681168552925291829020549151632900b99560e01b81528882166004820152878216602482015260448101879052911691508190632900b99590606401602060405180830381600087803b15801561296757600080fd5b505af115801561297b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061278791906133bd565b606060006129ac83612a4b565b9392505050565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b03169081612a445760405162461bcd60e51b81526004016116f99190613637565b5092915050565b606081600001805480602002602001604051908101604052809291908181526020018280548015612a9b57602002820191906000526020600020905b815481526020019060010190808311612a87575b50505050509050919050565b6000826000018281548110612abe57612abe6131e8565b9060005260206000200154905092915050565b6000818152600183016020526040812054612b1857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611e5d565b506000611e5d565b60008083851015612b735760405162461bcd60e51b815260206004820152601c60248201527f496e76616c69642064657374696e6174696f6e206d617475726974790000000060448201526064016116f9565b60008415612baf57612b83611e63565b6000888152600291909101602090815260408083208884529091529020546001600160a01b0316612bed565b612bb7611e63565b6000888152602091909152604081208054909190612bd757612bd76131e8565b6000918252602090912001546001600160a01b03165b90506000816001600160a01b03166371613c2d6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c2a57600080fd5b505afa158015612c3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6291906133bd565b9050612c6c611ee5565b60405163474611f160e01b8152600481018a9052602481018890526001600160a01b03919091169063474611f19060440160a06040518083038186803b158015612cb557600080fd5b505afa158015612cc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ced91906135c7565b51612dc6576000612cfc611e63565b60008a8152600291909101602090815260408083208b84528252918290205482516371613c2d60e01b815292516001600160a01b03909116926371613c2d926004808301939192829003018186803b158015612d5757600080fd5b505afa158015612d6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d8f91906133bd565b9050612d9b8682612436565b9450612dbe612da98361284c565b612db461271061284c565b6124599088613518565b935050612e6c565b612dce611ee5565b604051631b736f6760e31b8152600481018a90526024810189905260448101889052606481018790526001600160a01b03919091169063db9b7b389060840160206040518083038186803b158015612e2557600080fd5b505afa158015612e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5d91906133bd565b9250612e698382612436565b93505b505094509492505050565b600081612e8357600080fd5b6000612e8f838561368c565b612e9a90600a613518565b83612ea686600a613518565b612eb0919061368c565b612eba9190613417565b905060058112612ee157612ece838561368c565b612ed99060016133d6565b915050611e5d565b6004198113612f00576001612ef6848661368c565b612ed99190613417565b612ed9838561368c565b80356001600160a01b0381168114612f2157600080fd5b919050565b600080600060608486031215612f3b57600080fd5b612f4484612f0a565b95602085013595506040909401359392505050565b600080600060608486031215612f6e57600080fd5b8335925060208401359150612f8560408501612f0a565b90509250925092565b600080600080600080600060e0888a031215612fa957600080fd5b8735965060208801359550612fc060408901612f0a565b9450606088013560028110612fd457600080fd5b9699959850939660808101359560a0820135955060c0909101359350915050565b6000806040838503121561300857600080fd5b8235915061301860208401612f0a565b90509250929050565b60008060008060008060c0878903121561303a57600080fd5b61304387612f0a565b955061305160208801612f0a565b945060408701359350606087013592506080870135915060a087013562ffffff8116811461307e57600080fd5b809150509295509295509295565b6020808252825182820181905260009190848201906040850190845b818110156130c4578351835292840192918401916001016130a8565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561310f5761310f6130d0565b604052919050565b600067ffffffffffffffff821115613131576131316130d0565b5060051b60200190565b80518015158114612f2157600080fd5b6000602080838503121561315e57600080fd5b825167ffffffffffffffff81111561317557600080fd5b8301601f8101851361318657600080fd5b805161319961319482613117565b6130e6565b81815260059190911b820183019083810190878311156131b857600080fd5b928401925b828410156131dd576131ce8461313b565b825292840192908401906131bd565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115613227576132276131fe565b500190565b6000604082018483526020604081850152818551808452606086019150828701935060005b8181101561093257845183529383019391830191600101613251565b6000602080838503121561328057600080fd5b825167ffffffffffffffff81111561329757600080fd5b8301601f810185136132a857600080fd5b80516132b661319482613117565b81815260059190911b820183019083810190878311156132d557600080fd5b928401925b828410156131dd578351825292840192908401906132da565b6000600019821415613307576133076131fe565b5060010190565b6000806000806080858703121561332457600080fd5b8451935060208501519250604085015191506133426060860161313b565b905092959194509250565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b03949094168452602084019290925260408301521515606082015260800190565b60006020828403121561339d57600080fd5b611e5a8261313b565b6000828210156133b8576133b86131fe565b500390565b6000602082840312156133cf57600080fd5b5051919050565b600080821280156001600160ff1b03849003851316156133f8576133f86131fe565b600160ff1b8390038412811615613411576134116131fe565b50500190565b60008083128015600160ff1b850184121615613435576134356131fe565b6001600160ff1b0384018313811615613450576134506131fe565b50500390565b6000816000190483118215151615613470576134706131fe565b500290565b6000600160ff1b82141561348b5761348b6131fe565b5060000390565b60408101600284106134b457634e487b7160e01b600052602160045260246000fd5b9281526020015290565b600080604083850312156134d157600080fd5b505080516020909101519092909150565b600080600080608085870312156134f857600080fd5b505082516020840151604085015160609095015191969095509092509050565b60006001600160ff1b038184138284138082168684048611161561353e5761353e6131fe565b600160ff1b600087128281168783058912161561355d5761355d6131fe565b60008712925087820587128484161615613579576135796131fe565b8785058712818416161561358f5761358f6131fe565b505050929093029392505050565b634e487b7160e01b600052601260045260246000fd5b6000826135c2576135c261359d565b500490565b600060a082840312156135d957600080fd5b60405160a0810181811067ffffffffffffffff821117156135fc576135fc6130d0565b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b600060208083528351808285015260005b8181101561366457858101830151858201604001528201613648565b81811115613676576000604083870101525b50601f01601f1916929092016040019392505050565b60008261369b5761369b61359d565b600160ff1b8214600019841416156136b5576136b56131fe565b50059056fea2646970667358221220a24b70879361eefd310de8f60c539cbcb134aa94217f34f537c331a9a6eddad364736f6c63430008090033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100875760003560e01c80634ad23880116100655780634ad23880146101315780635c3477651461019a5780639c599f8b146101e2578063b61ef55a1461021757600080fd5b80630312b5281461008c578063300074c9146100e15780633df3a2371461010f575b600080fd5b61009f61009a366004612f26565b610237565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c0830152151560e0820152610100015b60405180910390f35b8180156100ed57600080fd5b506101016100fc366004612f59565b610746565b6040519081526020016100d8565b81801561011b57600080fd5b5061012f61012a366004612f8e565b61093f565b005b61014461013f366004612f59565b610cf6565b6040516100d89190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b6101ad6101a8366004612ff5565b6114a7565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016100d8565b8180156101ee57600080fd5b506102026101fd366004613021565b6115cc565b604080519283526020830191909152016100d8565b61022a610225366004612ff5565b611d8d565b6040516100d8919061308c565b600080600080600080600080600061024d611e63565b60040160008d6001600160a01b03166001600160a01b0316815260200190815260200160002090506102b16040518060c001604052806060815260200160008019168152602001606081526020016060815260200160008152602001600081525090565b6102b9611e87565b6001600160a01b0316633f90a08e6102d084611ea4565b6040518263ffffffff1660e01b81526004016102ec919061308c565b60006040518083038186803b15801561030457600080fd5b505afa158015610318573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610340919081019061314b565b8152608081018b905260005b61035583611eaf565b811015610728576103668382611eb9565b6020830152604080516007808252610100820190925290816020016020820280368337505050604083015260208201516103a0908f6114a7565b88604001516000815181106103b7576103b76131e8565b6020026020010189604001516001815181106103d5576103d56131e8565b602002602001018a604001516002815181106103f3576103f36131e8565b602002602001018b60400151600381518110610411576104116131e8565b602002602001018c6040015160048151811061042f5761042f6131e8565b602002602001018d6040015160058151811061044d5761044d6131e8565b602002602001018e6040015160068151811061046b5761046b6131e8565b6020908102919091018101979097529690965295909452949093529390529290529190528201518d141561052a5781604001516006815181106104b0576104b06131e8565b6020026020010151826080018181516104c99190613214565b9052506040820151805160039081106104e4576104e46131e8565b60200260200101518260400151600081518110610503576105036131e8565b60200260200101516105159190613214565b8260a0018181516105269190613214565b9052505b610532611ec5565b6001600160a01b031663939fe622836020015184604001516040518363ffffffff1660e01b815260040161056792919061322c565b60006040518083038186803b15801561057f57600080fd5b505afa158015610593573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105bb919081019061326d565b60608301819052805160019081106105d5576105d56131e8565b60200260200101518a6105e89190613214565b99508160600151600281518110610601576106016131e8565b6020026020010151896106149190613214565b9850816060015160048151811061062d5761062d6131e8565b6020026020010151876106409190613214565b96508160600151600581518110610659576106596131e8565b60200260200101518661066c9190613214565b955081600001518181518110610684576106846131e8565b6020026020010151156107165781606001516000815181106106a8576106a86131e8565b60200260200101518b6106bb9190613214565b9a5081606001516003815181106106d4576106d46131e8565b6020026020010151886106e79190613214565b97508160600151600681518110610700576107006131e8565b6020026020010151856107139190613214565b94505b80610720816132f3565b91505061034c565b508060a0015181608001511015925050509397509397509397509397565b600080610751611e63565b6000868152600191909101602052604081209061076c611e63565b6000888152600291909101602090815260408083208984528252808320546001600160a01b03908116855291840194909452918301812054925163ae100e6d60e01b815286831660048201526024810188905292909116925090819081908190859063ae100e6d90604401608060405180830381600087803b1580156107f157600080fd5b505af1158015610805573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610829919061330e565b9350935093509350836000146109325780156108b757610847611ee5565b60405163312c474560e01b8152600481018b90526001600160a01b03898116602483015260448201859052919091169063312c474590606401600060405180830381600087803b15801561089a57600080fd5b505af11580156108ae573d6000803e3d6000fd5b50505050610932565b6108bf611ee5565b6040516360e3f72960e11b8152600481018b90526001600160a01b0389811660248301526044820185905260648201879052919091169063c1c7ee5290608401600060405180830381600087803b15801561091957600080fd5b505af115801561092d573d6000803e3d6000fd5b505050505b5090979650505050505050565b6000610949611e63565b60008981526001919091016020526040812090610964611e63565b60008b8152600291909101602090815260408083208c84528252808320546001600160a01b03908116855291840194909452919092019091205416905060018560018111156109b5576109b561334d565b1415610ac4576109c3611e87565b604051634ba0c9b560e01b81526001600160a01b038881166004830152602482018b9052604482018690529190911690634ba0c9b590606401600060405180830381600087803b158015610a1657600080fd5b505af1158015610a2a573d6000803e3d6000fd5b50505050806001600160a01b0316635b0b2930878487610a4a9190613214565b8a60016040518563ffffffff1660e01b8152600401610a6c9493929190613363565b602060405180830381600087803b158015610a8657600080fd5b505af1158015610a9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abe919061338b565b50610bc9565b610acc611e87565b604051633edef4ed60e21b81526001600160a01b038881166004830152602482018b905260448201869052919091169063fb7bd3b490606401600060405180830381600087803b158015610b1f57600080fd5b505af1158015610b33573d6000803e3d6000fd5b50505050806001600160a01b0316639e8d3d55878487610b5391906133a6565b8a60016040518563ffffffff1660e01b8152600401610b759493929190613363565b602060405180830381600087803b158015610b8f57600080fd5b505af1158015610ba3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc7919061338b565b505b8115610cec576000610bd9611f04565b90506001600160a01b038216639e8d3d5582858b60008b6001811115610c0157610c0161334d565b146040518563ffffffff1660e01b8152600401610c219493929190613363565b602060405180830381600087803b158015610c3b57600080fd5b505af1158015610c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c73919061338b565b50610cac88610c80611e63565b60008c8152600591909101602090815260408083206001600160a01b0387168452909152902090611f1d565b610cea57610ce888610cbc611e63565b60008c8152600591909101602090815260408083206001600160a01b0387168452909152902090611f35565b505b505b5050505050505050565b610d366040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b610d756040518060a0016040528060001515815260200160006001600160a01b0316815260200160008152602001600015158152602001606081525090565b83610dc55760018152610d86611e63565b6000868152602091909152604081208054909190610da657610da66131e8565b600091825260209182902001546001600160a01b031690820152610e50565b60008152610dd1611e63565b6000868152600291909101602090815260408083208784528252909120546001600160a01b031690820152610e04611e63565b6000868152602091909152604081208054909190610e2457610e246131e8565b60009182526020918290200154908201516001600160a01b039081169116146060820152604081018490525b610e58611ee5565b60405163386320d360e11b8152600481018790526001600160a01b03858116602483015291909116906370c641a69060440160206040518083038186803b158015610ea257600080fd5b505afa158015610eb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eda91906133bd565b60c0830152610ee98584611d8d565b608082015260005b816080015151811015611305576000610f08611e63565b6002016000888152602001908152602001600020600084608001518481518110610f3457610f346131e8565b6020026020010151815260200190815260200160002060009054906101000a90046001600160a01b031690506000816001600160a01b031663e16695b56040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9b57600080fd5b505afa158015610faf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd391906133bd565b90506000610fdf611e63565b60008a8152602091909152604081208054909190610fff57610fff6131e8565b60009182526020909120015485516001600160a01b0385811692169190911491508061102c575084606001515b8061104c575084602001516001600160a01b0316836001600160a01b0316145b156112ef5760006110618a8988868887611f41565b905080600001518760c00181815161107991906133d6565b9052506020810151875188906110909083906133d6565b90525060408101516020880180516110a99083906133d6565b90525060006110bc8b8a8987898861211e565b90508060600151886080018181516110d49190613214565b905250608081015160a0890180516110ed908390613214565b905250805160c089018051611103908390613417565b90525060208101518851899061111a908390613417565b9052506040810151602089018051611133908390613417565b90525060006111468c8b8a888a8961229d565b905080606001518960400181815161115e9190613214565b905250608081015160608a018051611177908390613214565b905250805160c08a01805161118d9083906133d6565b905250602081015189518a906111a49083906133d6565b905250604081015160208a0180516111bd9083906133d6565b90525060c0890151600013156112eb5760006111d7611ee5565b6001600160a01b031663aee1311e8e8c60c001518c608001518c81518110611201576112016131e8565b602002602001015160018e608001515161121b91906133a6565b8d1461124e5760808e01516112318e6001613214565b81518110611241576112416131e8565b6020026020010151611251565b60005b6040516001600160e01b031960e087901b168152600481019490945260248401929092526044830152606482015260840160206040518083038186803b15801561129a57600080fd5b505afa1580156112ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d291906133bd565b9050808a60c0018181516112e691906133d6565b905250505b5050505b50505080806112fd906132f3565b915050610ef1565b50805180611314575080606001515b8015611323575060c082015115155b1561149f576000611332611ee5565b60c0840151604051637636e94160e01b8152600481018990526000602482015260448101919091526001600160a01b039190911690637636e9419060640160206040518083038186803b15801561138857600080fd5b505afa15801561139c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c091906133bd565b9050611474816113ce611e63565b60008981526020919091526040812080549091906113ee576113ee6131e8565b60009182526020918290200154604080516371613c2d60e01b815290516001600160a01b03909216926371613c2d92600480840193829003018186803b15801561143757600080fd5b505afa15801561144b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146f91906133bd565b612436565b835184906114839083906133d6565b90525060208301805182919061149a9083906133d6565b905250505b509392505050565b6000806000806000806000806114bf8a60008b610cf6565b90508060400151975080606001519450806080015193508060a00151915060008160000151131561159e5780516114f59061245f565b96506000611501611ec5565b6001600160a01b0316639abdb38a8c6040518263ffffffff1660e01b815260040161152e91815260200190565b60206040518083038186803b15801561154657600080fd5b505afa15801561155a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157e91906133bd565b9050611596612710611590838b613456565b906124b5565b9650506115bf565b8051600013156115bf5780516115bc906115b790613475565b61245f565b92505b5092959891949750929550565b60008061162760405180610120016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61162f611e87565b60405163afe8efcf60e01b81526001600160a01b038a81166004830152919091169063afe8efcf9060240160206040518083038186803b15801561167257600080fd5b505afa158015611686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116aa91906133bd565b60a082018190526117025760405162461bcd60e51b815260206004820152601a60248201527f557365722068617320656e6f75676820636f6c6c61746572616c00000000000060448201526064015b60405180910390fd5b61170d86868a610cf6565b60200151606082018190526000136117675760405162461bcd60e51b815260206004820181905260248201527f4e6f206465627420696e207468652073656c6563746564206d6174757269747960448201526064016116f9565b61176f611e63565b6000878152600291909101602090815260408083208884529091529020546001600160a01b0316815260608101516117aa906115b790613475565b8160200181815250506117d06115b7878784606001516117c990613475565b8551612526565b604082015261187186866117e2611ec5565b6001600160a01b03166306d062ad8a8660a001516040518363ffffffff1660e01b815260040161181c929190918252602082015260400190565b60206040518083038186803b15801561183457600080fd5b505afa158015611848573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186c91906133bd565b612793565b60c082018190526020820151101561188e57602081015160c08201525b611896611f04565b6001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b1580156118ce57600080fd5b505afa1580156118e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611906919061338b565b611bed576000611914611e63565b6000888152602091909152604081208054909190611934576119346131e8565b6000918252602090912001546001600160a01b0316611951611e63565b6000898152600291909101602090815260408083208a84529091529020546001600160a01b03161490508015611b8e57611989611ee5565b6001600160a01b03166388c0520e88886119a1611f04565b8d6119aa611ee5565b6001600160a01b03166318612e328e8e6119c78c60c0015161284c565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b158015611a0b57600080fd5b505afa158015611a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4391906133bd565b6040516001600160e01b031960e088901b168152600481019590955260248501939093526001600160a01b039182166044850152166064830152608482015260a401602060405180830381600087803b158015611a9f57600080fd5b505af1158015611ab3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad791906133bd565b60e0830181905260001215611b8e57611b8b6115b78888611af6611ee5565b60e0870151604051637636e94160e01b8152600481018e9052602481018d905260448101919091526001600160a01b039190911690637636e9419060640160206040518083038186803b158015611b4c57600080fd5b505afa158015611b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8491906133bd565b8651612526565b92505b611bbb8787611b9b611f04565b8c611ba78c8c8a612793565b8760c00151611bb691906133a6565b6128b6565b610100830181905215611beb57611bde6115b78888611b8486610100015161284c565b611be89084613214565b92505b505b611bf5611e63565b6000878152600291909101602090815260408083208884529091528120546001600160a01b031690631e007d1d90611c2e898987612793565b8460c00151611c3d91906133a6565b6040518363ffffffff1660e01b8152600401611c5a929190613492565b60206040518083038186803b158015611c7257600080fd5b505afa158015611c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611caa91906133bd565b6080820152611cb7611e87565b6001600160a01b031663ab2a07778a8a8a8a878760800151611cd99190613214565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015260448401919091526064830152608482015262ffffff871660a482015260c4810185905260e401602060405180830381600087803b158015611d4757600080fd5b505af1158015611d5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7f91906133bd565b925050965096945050505050565b6060611dc5611d9a611e63565b6000858152600591909101602090815260408083206001600160a01b0387168452909152902061299f565b805190915015611e5d57604051634f64581360e11b815273__$69df8f3ef0941d5dac5ad52c193381be4b$__90639ec8b02690611e0690849060040161308c565b60006040518083038186803b158015611e1e57600080fd5b505af4158015611e32573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e5a919081019061326d565b90505b92915050565b7f8041b8421ebd495cc61f38c788c9eb100daccf9bd36aa0bb920b7a15b2e0496590565b6000611e9f69151bdad95b95985d5b1d60b21b6129b3565b905090565b6060611e5d82612a4b565b6000611e5d825490565b6000611e5a8383612aa7565b6000611e9f7121bab93932b731bca1b7b73a3937b63632b960711b6129b3565b6000611e9f7011d95b995cda5cd5985b1d5955985d5b1d607a1b6129b3565b6000611e9f6a14995cd95c9d99519d5b9960aa1b6129b3565b60008181526001830160205260408120541515611e5a565b6000611e5a8383612ad1565b611f6560405180606001604052806000815260200160008152602001600081525090565b600080611f70611e63565b60008a8152600191909101602090815260408083206001600160a01b03898116855292529182902054915163070da1af60e11b81528a82166004820152911690630e1b435e90602401604080518083038186803b158015611fd057600080fd5b505afa158015611fe4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200891906134be565b9150915081600014612112578086146120c757865180612029575086606001515b156120c257612036611ee5565b604051630c30971960e11b8152600481018b905260248101839052604481018490526001600160a01b0391909116906318612e32906064015b60206040518083038186803b15801561208757600080fd5b505afa15801561209b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120bf91906133bd565b83525b612112565b80861415612112578651806120e55750866060015180156120e55750835b806120f257508660600151155b15612112576121078982896040015185612b20565b604085015260208401525b50509695505050505050565b6121506040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b604051631c7b209b60e31b81526001600160a01b038781166004830152600091829186169063e3d904d89060240160806040518083038186803b15801561219657600080fd5b505afa1580156121aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ce91906134e2565b608087019290925260608601929092529092509050811561211257808614612255578651806121fe575086606001515b156120c25761220b611ee5565b6001600160a01b03166318612e328a836122248661284c565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640161206f565b80861415612112578651806122735750866060015180156122735750835b8061228057508660600151155b1561211257612107898289604001516122988661284c565b612b20565b6122cf6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040516339f7dda360e21b81526001600160a01b038781166004830152600091829186169063e7df768c9060240160806040518083038186803b15801561231557600080fd5b505afa158015612329573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234d91906134e2565b6080870192909252606086019290925290925090508115612112578086146122555786518061237d575086606001515b156120c25761238a611ee5565b6001600160a01b03166318612e328a836123a38661284c565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b1580156123e757600080fd5b505afa1580156123fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241f91906133bd565b8351849061242e9083906133d6565b905250612112565b6000611e5a61244661271061284c565b61244f8461284c565b6124599086613518565b90612e77565b6000808212156124b15760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f73697469766560448201526064016116f9565b5090565b60008082116124c357600080fd5b60056124cf83856135b3565b6124da90600a613456565b836124e686600a613456565b6124f091906135b3565b6124fa91906133a6565b10156125115761250a82846135b3565b9050611e5d565b61251b82846135b3565b61250a906001613214565b600080612531611ee5565b60405163474611f160e01b815260048101889052602481018790526001600160a01b03919091169063474611f19060440160a06040518083038186803b15801561257a57600080fd5b505afa15801561258e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b291906135c7565b5190506000808261263857859150846001600160a01b03166371613c2d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156125f957600080fd5b505afa15801561260d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061263191906133bd565b905061277d565b612640611ee5565b604051631b736f6760e31b8152600481018a90526024810189905260006044820152606481018890526001600160a01b03919091169063db9b7b389060840160206040518083038186803b15801561269757600080fd5b505afa1580156126ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126cf91906133bd565b91506126d9611e63565b60008981526020919091526040812080549091906126f9576126f96131e8565b60009182526020918290200154604080516371613c2d60e01b815290516001600160a01b03909216926371613c2d92600480840193829003018186803b15801561274257600080fd5b505afa158015612756573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277a91906133bd565b90505b6127878282612436565b98975050505050505050565b60008061279e611e63565b6000868152600291909101602090815260408083208784528252918290205482516371613c2d60e01b815292516001600160a01b03909116926371613c2d926004808301939192829003018186803b1580156127f957600080fd5b505afa15801561280d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283191906133bd565b90506128438161159061271086613456565b95945050505050565b60006001600160ff1b038211156124b15760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016116f9565b6000806128c1611e63565b6000888152600291909101602090815260408083208984529091528120546001600160a01b031691506128f2611e63565b6000898152600191909101602090815260408083206001600160a01b038681168552925291829020549151632900b99560e01b81528882166004820152878216602482015260448101879052911691508190632900b99590606401602060405180830381600087803b15801561296757600080fd5b505af115801561297b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061278791906133bd565b606060006129ac83612a4b565b9392505050565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b03169081612a445760405162461bcd60e51b81526004016116f99190613637565b5092915050565b606081600001805480602002602001604051908101604052809291908181526020018280548015612a9b57602002820191906000526020600020905b815481526020019060010190808311612a87575b50505050509050919050565b6000826000018281548110612abe57612abe6131e8565b9060005260206000200154905092915050565b6000818152600183016020526040812054612b1857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611e5d565b506000611e5d565b60008083851015612b735760405162461bcd60e51b815260206004820152601c60248201527f496e76616c69642064657374696e6174696f6e206d617475726974790000000060448201526064016116f9565b60008415612baf57612b83611e63565b6000888152600291909101602090815260408083208884529091529020546001600160a01b0316612bed565b612bb7611e63565b6000888152602091909152604081208054909190612bd757612bd76131e8565b6000918252602090912001546001600160a01b03165b90506000816001600160a01b03166371613c2d6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c2a57600080fd5b505afa158015612c3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6291906133bd565b9050612c6c611ee5565b60405163474611f160e01b8152600481018a9052602481018890526001600160a01b03919091169063474611f19060440160a06040518083038186803b158015612cb557600080fd5b505afa158015612cc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ced91906135c7565b51612dc6576000612cfc611e63565b60008a8152600291909101602090815260408083208b84528252918290205482516371613c2d60e01b815292516001600160a01b03909116926371613c2d926004808301939192829003018186803b158015612d5757600080fd5b505afa158015612d6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d8f91906133bd565b9050612d9b8682612436565b9450612dbe612da98361284c565b612db461271061284c565b6124599088613518565b935050612e6c565b612dce611ee5565b604051631b736f6760e31b8152600481018a90526024810189905260448101889052606481018790526001600160a01b03919091169063db9b7b389060840160206040518083038186803b158015612e2557600080fd5b505afa158015612e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5d91906133bd565b9250612e698382612436565b93505b505094509492505050565b600081612e8357600080fd5b6000612e8f838561368c565b612e9a90600a613518565b83612ea686600a613518565b612eb0919061368c565b612eba9190613417565b905060058112612ee157612ece838561368c565b612ed99060016133d6565b915050611e5d565b6004198113612f00576001612ef6848661368c565b612ed99190613417565b612ed9838561368c565b80356001600160a01b0381168114612f2157600080fd5b919050565b600080600060608486031215612f3b57600080fd5b612f4484612f0a565b95602085013595506040909401359392505050565b600080600060608486031215612f6e57600080fd5b8335925060208401359150612f8560408501612f0a565b90509250925092565b600080600080600080600060e0888a031215612fa957600080fd5b8735965060208801359550612fc060408901612f0a565b9450606088013560028110612fd457600080fd5b9699959850939660808101359560a0820135955060c0909101359350915050565b6000806040838503121561300857600080fd5b8235915061301860208401612f0a565b90509250929050565b60008060008060008060c0878903121561303a57600080fd5b61304387612f0a565b955061305160208801612f0a565b945060408701359350606087013592506080870135915060a087013562ffffff8116811461307e57600080fd5b809150509295509295509295565b6020808252825182820181905260009190848201906040850190845b818110156130c4578351835292840192918401916001016130a8565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561310f5761310f6130d0565b604052919050565b600067ffffffffffffffff821115613131576131316130d0565b5060051b60200190565b80518015158114612f2157600080fd5b6000602080838503121561315e57600080fd5b825167ffffffffffffffff81111561317557600080fd5b8301601f8101851361318657600080fd5b805161319961319482613117565b6130e6565b81815260059190911b820183019083810190878311156131b857600080fd5b928401925b828410156131dd576131ce8461313b565b825292840192908401906131bd565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115613227576132276131fe565b500190565b6000604082018483526020604081850152818551808452606086019150828701935060005b8181101561093257845183529383019391830191600101613251565b6000602080838503121561328057600080fd5b825167ffffffffffffffff81111561329757600080fd5b8301601f810185136132a857600080fd5b80516132b661319482613117565b81815260059190911b820183019083810190878311156132d557600080fd5b928401925b828410156131dd578351825292840192908401906132da565b6000600019821415613307576133076131fe565b5060010190565b6000806000806080858703121561332457600080fd5b8451935060208501519250604085015191506133426060860161313b565b905092959194509250565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b03949094168452602084019290925260408301521515606082015260800190565b60006020828403121561339d57600080fd5b611e5a8261313b565b6000828210156133b8576133b86131fe565b500390565b6000602082840312156133cf57600080fd5b5051919050565b600080821280156001600160ff1b03849003851316156133f8576133f86131fe565b600160ff1b8390038412811615613411576134116131fe565b50500190565b60008083128015600160ff1b850184121615613435576134356131fe565b6001600160ff1b0384018313811615613450576134506131fe565b50500390565b6000816000190483118215151615613470576134706131fe565b500290565b6000600160ff1b82141561348b5761348b6131fe565b5060000390565b60408101600284106134b457634e487b7160e01b600052602160045260246000fd5b9281526020015290565b600080604083850312156134d157600080fd5b505080516020909101519092909150565b600080600080608085870312156134f857600080fd5b505082516020840151604085015160609095015191969095509092509050565b60006001600160ff1b038184138284138082168684048611161561353e5761353e6131fe565b600160ff1b600087128281168783058912161561355d5761355d6131fe565b60008712925087820587128484161615613579576135796131fe565b8785058712818416161561358f5761358f6131fe565b505050929093029392505050565b634e487b7160e01b600052601260045260246000fd5b6000826135c2576135c261359d565b500490565b600060a082840312156135d957600080fd5b60405160a0810181811067ffffffffffffffff821117156135fc576135fc6130d0565b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b600060208083528351808285015260005b8181101561366457858101830151858201604001528201613648565b81811115613676576000604083870101525b50601f01601f1916929092016040019392505050565b60008261369b5761369b61359d565b600160ff1b8214600019841416156136b5576136b56131fe565b50059056fea2646970667358221220a24b70879361eefd310de8f60c539cbcb134aa94217f34f537c331a9a6eddad364736f6c63430008090033",
  "libraries": {
    "QuickSort": "0xA9CCE7edDa661E2D10571f19A2AF0b31CaF23cD0"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "convertFutureValueToGenesisValue(bytes32,uint256,address)": {
        "params": {
          "_ccy": "Currency for pausing all lending markets",
          "_user": "User's address"
        },
        "returns": {
          "_0": "Current future value amount after update"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "convertFutureValueToGenesisValue(bytes32,uint256,address)": {
        "notice": "Converts the future value to the genesis value if there is balance in the past maturity."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}