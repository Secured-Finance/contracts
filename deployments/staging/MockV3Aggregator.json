{
  "address": "0xeb83857b498a882Ef996b768E534306A1633fcc6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "int256",
          "name": "_initialAnswer",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "int256",
          "name": "current",
          "type": "int256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        }
      ],
      "name": "AnswerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "startedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        }
      ],
      "name": "NewRound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedCcy",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_answer",
          "type": "int256"
        }
      ],
      "name": "updateAnswer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "_answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startedAt",
          "type": "uint256"
        }
      ],
      "name": "updateRoundData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc8b8d1548489aea81d1c77d99bcc27ef4fac305c38304048b6cda2c5cc205422",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0xeb83857b498a882Ef996b768E534306A1633fcc6",
    "transactionIndex": 68,
    "gasUsed": "659121",
    "logsBloom": "0x
    "blockHash": "0x1128cd04dd7b41929643002a1c3ad5a0b9abd1ecf0d32ee5e612de5d7c2a7f74",
    "transactionHash": "0xc8b8d1548489aea81d1c77d99bcc27ef4fac305c38304048b6cda2c5cc205422",
    "logs": [
      {
        "transactionIndex": 68,
        "blockNumber": 3968510,
        "transactionHash": "0xc8b8d1548489aea81d1c77d99bcc27ef4fac305c38304048b6cda2c5cc205422",
        "address": "0xeb83857b498a882Ef996b768E534306A1633fcc6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dba767f3dff3835bef5de1edee91a9901402ab21"
        ],
        "data": "0x",
        "logIndex": 106,
        "blockHash": "0x1128cd04dd7b41929643002a1c3ad5a0b9abd1ecf0d32ee5e612de5d7c2a7f74"
      }
    ],
    "blockNumber": 3968510,
    "cumulativeGasUsed": "16205308",
    "status": 1,
    "byzantium": true
  },
  "args": [
    18,
    "0x5742544300000000000000000000000000000000000000000000000000000000",
    "13087292239235700000"
  ],
  "numDeployments": 4,
  "solcInputHash": "249e6e37f83243cf49e94545085c5438",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"_initialAnswer\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedCcy\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"}],\"name\":\"updateAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startedAt\",\"type\":\"uint256\"}],\"name\":\"updateRoundData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"MockV3Aggregator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Based on the FluxAggregator contractUse this contract when you need to test other contract's ability to read data from an aggregator contract, but how the aggregator got its answer is unimportant\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/MockV3Aggregator.sol\":\"MockV3Aggregator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dependencies/chainlink/contracts/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Chainlink Contracts v0.4.0 (v0.8/interfaces/AggregatorInterface.sol)\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function latestRound() external view returns (uint256);\\n\\n    function getAnswer(uint256 roundId) external view returns (int256);\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n    event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n    event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xbb2b4659b80693d9cd9ad70461fc60a3feefda606d689ec07103dfdcd45aa9b1\",\"license\":\"MIT\"},\"contracts/dependencies/chainlink/contracts/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Chainlink Contracts v0.4.0 (v0.8/interfaces/AggregatorV2V3Interface.sol)\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xffe9988b76235bc1bfc9a791b7942bec59db005318909880d2ed2c84a8557ad5\",\"license\":\"MIT\"},\"contracts/dependencies/chainlink/contracts/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Chainlink Contracts v0.4.0 (v0.8/interfaces/AggregatorV3Interface.sol)\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x81b0c18c07c8c031d5b34e4e41d2451b836355aad1b3c04c26578c92f73585f9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/mocks/MockV3Aggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../dependencies/chainlink/contracts/AggregatorV2V3Interface.sol\\\";\\nimport \\\"../protocol/utils/Ownable.sol\\\";\\n\\n/**\\n * @title MockV3Aggregator\\n * @notice Based on the FluxAggregator contract\\n * @notice Use this contract when you need to test\\n * other contract's ability to read data from an\\n * aggregator contract, but how the aggregator got\\n * its answer is unimportant\\n */\\ncontract MockV3Aggregator is AggregatorV2V3Interface, Ownable {\\n    uint256 public constant override version = 0;\\n\\n    bytes32 public priceFeedCcy;\\n    uint8 public override decimals;\\n    int256 public override latestAnswer;\\n    uint256 public override latestTimestamp;\\n    uint256 public override latestRound;\\n\\n    mapping(uint256 => int256) public override getAnswer;\\n    mapping(uint256 => uint256) public override getTimestamp;\\n    mapping(uint256 => uint256) private getStartedAt;\\n\\n    constructor(\\n        uint8 _decimals,\\n        bytes32 _ccy,\\n        int256 _initialAnswer\\n    ) {\\n        _transferOwnership(msg.sender);\\n        priceFeedCcy = _ccy;\\n        decimals = _decimals;\\n        updateAnswer(_initialAnswer);\\n    }\\n\\n    function updateAnswer(int256 _answer) public onlyOwner {\\n        latestAnswer = _answer;\\n        latestTimestamp = block.timestamp;\\n        latestRound++;\\n        getAnswer[latestRound] = _answer;\\n        getTimestamp[latestRound] = block.timestamp;\\n        getStartedAt[latestRound] = block.timestamp;\\n    }\\n\\n    function updateRoundData(\\n        uint80 _roundId,\\n        int256 _answer,\\n        uint256 _timestamp,\\n        uint256 _startedAt\\n    ) public onlyOwner {\\n        latestRound = _roundId;\\n        latestAnswer = _answer;\\n        latestTimestamp = _timestamp;\\n        getAnswer[latestRound] = _answer;\\n        getTimestamp[latestRound] = _timestamp;\\n        getStartedAt[latestRound] = _startedAt;\\n    }\\n\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        override\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        return (\\n            _roundId,\\n            getAnswer[_roundId],\\n            getStartedAt[_roundId],\\n            getTimestamp[_roundId],\\n            _roundId\\n        );\\n    }\\n\\n    function latestRoundData()\\n        external\\n        view\\n        override\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        return (\\n            uint80(latestRound),\\n            getAnswer[latestRound],\\n            getStartedAt[latestRound],\\n            getTimestamp[latestRound],\\n            uint80(latestRound)\\n        );\\n    }\\n\\n    function description() external pure override returns (string memory) {\\n        return \\\"v0.7/tests/MockV3Aggregator.sol\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x72001ac895bdb110c9a3ab5c0ebca73897aa8afb101c2d8c531b03120ab81e5b\",\"license\":\"MIT\"},\"contracts/protocol/storages/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary OwnableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.ownable\\\");\\n\\n    struct Storage {\\n        address owner;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ef8bfa06947cdb63d47248ad074ac42a1b1ba828a2c97e42486a5dbb2c03e1d\",\"license\":\"MIT\"},\"contracts/protocol/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../storages/OwnableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return OwnableStorage.slot().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = OwnableStorage.slot().owner;\\n        OwnableStorage.slot().owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6c149a76f9655abe4739f7ce74a38eb6e7d01732264e0effc4b9a73c16b5a0a9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161097638038061097683398101604081905261002f916101df565b6100383361005d565b60008290556001805460ff191660ff8516179055610055816100df565b505050610245565b600061007161019860201b6104ec1760201c565b546001600160a01b0316905081610091610198602090811b6104ec17901c565b80546001600160a01b0319166001600160a01b03928316179055604051838216918316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b336100e86101bc565b6001600160a01b0316146101425760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b6002819055426003556004805490600061015b8361021c565b9091555050600480546000908152600560209081526040808320949094558254825260068152838220429081905592548252600790529190912055565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa90565b60006101d061019860201b6104ec1760201c565b546001600160a01b0316919050565b6000806000606084860312156101f457600080fd5b835160ff8116811461020557600080fd5b602085015160409095015190969495509392505050565b600060001982141561023e57634e487b7160e01b600052601160045260246000fd5b5060010190565b610722806102546000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063b633620c11610066578063b633620c14610287578063c5c291cc146102a7578063f2fde38b146102b0578063feaf968c146102c357600080fd5b80638da5cb5b146101b65780639a6fc8f5146101d6578063a87a20ce14610254578063b5ab58dc1461026757600080fd5b8063668a0f02116100d3578063668a0f021461015d578063715018a6146101665780637284e4161461016e5780638205bf6a146101ad57600080fd5b8063313ce567146101055780634aa2011f1461012957806350d25bcd1461013e57806354fd4d5014610155575b600080fd5b6001546101129060ff1681565b60405160ff90911681526020015b60405180910390f35b61013c61013736600461059c565b6102ee565b005b61014760025481565b604051908152602001610120565b610147600081565b61014760045481565b61013c610373565b604080518082018252601f81527f76302e372f74657374732f4d6f636b563341676772656761746f722e736f6c006020820152905161012091906105d5565b61014760035481565b6101be6103ae565b6040516001600160a01b039091168152602001610120565b61021d6101e436600461062a565b69ffffffffffffffffffff8116600090815260056020908152604080832054600783528184205460069093529220549293919290918490565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a001610120565b61013c61026236600461064c565b6103c7565b61014761027536600461064c565b60056020526000908152604090205481565b61014761029536600461064c565b60066020526000908152604090205481565b61014760005481565b61013c6102be366004610665565b61044c565b600454600081815260056020908152604080832054600783528184205460069093529220548361021d565b336102f76103ae565b6001600160a01b0316146103265760405162461bcd60e51b815260040161031d9061068e565b60405180910390fd5b69ffffffffffffffffffff90931660048181556002849055600383905560009182526005602090815260408084209590955581548352600681528483209390935554815260079091522055565b3361037c6103ae565b6001600160a01b0316146103a25760405162461bcd60e51b815260040161031d9061068e565b6103ac6000610510565b565b60006103b86104ec565b546001600160a01b0316919050565b336103d06103ae565b6001600160a01b0316146103f65760405162461bcd60e51b815260040161031d9061068e565b6002819055426003556004805490600061040f836106c3565b9091555050600480546000908152600560209081526040808320949094558254825260068152838220429081905592548252600790529190912055565b336104556103ae565b6001600160a01b03161461047b5760405162461bcd60e51b815260040161031d9061068e565b6001600160a01b0381166104e05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161031d565b6104e981610510565b50565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa90565b600061051a6104ec565b546001600160a01b031690508161052f6104ec565b80546001600160a01b0319166001600160a01b03928316179055604051838216918316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b803569ffffffffffffffffffff8116811461059757600080fd5b919050565b600080600080608085870312156105b257600080fd5b6105bb8561057d565b966020860135965060408601359560600135945092505050565b600060208083528351808285015260005b81811015610602578581018301518582016040015282016105e6565b81811115610614576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561063c57600080fd5b6106458261057d565b9392505050565b60006020828403121561065e57600080fd5b5035919050565b60006020828403121561067757600080fd5b81356001600160a01b038116811461064557600080fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006000198214156106e557634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220b1cb024688ac39af604c04acba1a904c26ee789b8426b5aca7a8045a4725994f64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063b633620c11610066578063b633620c14610287578063c5c291cc146102a7578063f2fde38b146102b0578063feaf968c146102c357600080fd5b80638da5cb5b146101b65780639a6fc8f5146101d6578063a87a20ce14610254578063b5ab58dc1461026757600080fd5b8063668a0f02116100d3578063668a0f021461015d578063715018a6146101665780637284e4161461016e5780638205bf6a146101ad57600080fd5b8063313ce567146101055780634aa2011f1461012957806350d25bcd1461013e57806354fd4d5014610155575b600080fd5b6001546101129060ff1681565b60405160ff90911681526020015b60405180910390f35b61013c61013736600461059c565b6102ee565b005b61014760025481565b604051908152602001610120565b610147600081565b61014760045481565b61013c610373565b604080518082018252601f81527f76302e372f74657374732f4d6f636b563341676772656761746f722e736f6c006020820152905161012091906105d5565b61014760035481565b6101be6103ae565b6040516001600160a01b039091168152602001610120565b61021d6101e436600461062a565b69ffffffffffffffffffff8116600090815260056020908152604080832054600783528184205460069093529220549293919290918490565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a001610120565b61013c61026236600461064c565b6103c7565b61014761027536600461064c565b60056020526000908152604090205481565b61014761029536600461064c565b60066020526000908152604090205481565b61014760005481565b61013c6102be366004610665565b61044c565b600454600081815260056020908152604080832054600783528184205460069093529220548361021d565b336102f76103ae565b6001600160a01b0316146103265760405162461bcd60e51b815260040161031d9061068e565b60405180910390fd5b69ffffffffffffffffffff90931660048181556002849055600383905560009182526005602090815260408084209590955581548352600681528483209390935554815260079091522055565b3361037c6103ae565b6001600160a01b0316146103a25760405162461bcd60e51b815260040161031d9061068e565b6103ac6000610510565b565b60006103b86104ec565b546001600160a01b0316919050565b336103d06103ae565b6001600160a01b0316146103f65760405162461bcd60e51b815260040161031d9061068e565b6002819055426003556004805490600061040f836106c3565b9091555050600480546000908152600560209081526040808320949094558254825260068152838220429081905592548252600790529190912055565b336104556103ae565b6001600160a01b03161461047b5760405162461bcd60e51b815260040161031d9061068e565b6001600160a01b0381166104e05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161031d565b6104e981610510565b50565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa90565b600061051a6104ec565b546001600160a01b031690508161052f6104ec565b80546001600160a01b0319166001600160a01b03928316179055604051838216918316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b803569ffffffffffffffffffff8116811461059757600080fd5b919050565b600080600080608085870312156105b257600080fd5b6105bb8561057d565b966020860135965060408601359560600135945092505050565b600060208083528351808285015260005b81811015610602578581018301518582016040015282016105e6565b81811115610614576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561063c57600080fd5b6106458261057d565b9392505050565b60006020828403121561065e57600080fd5b5035919050565b60006020828403121561067757600080fd5b81356001600160a01b038116811461064557600080fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006000198214156106e557634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220b1cb024688ac39af604c04acba1a904c26ee789b8426b5aca7a8045a4725994f64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "MockV3Aggregator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Based on the FluxAggregator contractUse this contract when you need to test other contract's ability to read data from an aggregator contract, but how the aggregator got its answer is unimportant",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7139,
        "contract": "contracts/mocks/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "priceFeedCcy",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      },
      {
        "astId": 7142,
        "contract": "contracts/mocks/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "decimals",
        "offset": 0,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 7145,
        "contract": "contracts/mocks/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "latestAnswer",
        "offset": 0,
        "slot": "2",
        "type": "t_int256"
      },
      {
        "astId": 7148,
        "contract": "contracts/mocks/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "latestTimestamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7151,
        "contract": "contracts/mocks/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "latestRound",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7156,
        "contract": "contracts/mocks/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "getAnswer",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 7161,
        "contract": "contracts/mocks/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "getTimestamp",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7165,
        "contract": "contracts/mocks/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "getStartedAt",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}