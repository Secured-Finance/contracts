{
  "address": "0x01fA284E47403A47ec6C836b41db33a849a437FE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_nativeToken",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_lendingMarketController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CallerNotOperator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInputs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOperationExecution",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "NotAllowedAccess",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "values",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "TransactionFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receivedAmount",
          "type": "uint256"
        }
      ],
      "name": "OperationExecuteForCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "collateralCcy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receivedCollateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "debtCcy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtMaturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receivedDebtAmount",
          "type": "uint256"
        }
      ],
      "name": "OperationExecuteForDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "TransactionExecuted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collateralMaturities",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_collateralCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "_collateralMaturities",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32",
          "name": "_debtCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_debtMaturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "_poolFee",
          "type": "uint24"
        }
      ],
      "name": "executeForcedRepayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_collateralCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "_collateralMaturities",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32",
          "name": "_debtCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_debtMaturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "_poolFee",
          "type": "uint24"
        }
      ],
      "name": "executeLiquidationCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_collateralCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_receivedCollateralAmount",
          "type": "uint256"
        }
      ],
      "name": "executeOperationForCollateral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_collateralCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_receivedCollateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_debtCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_debtMaturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_receivedDebtAmount",
          "type": "uint256"
        }
      ],
      "name": "executeOperationForDebt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "executeTransaction",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_data",
          "type": "bytes[]"
        }
      ],
      "name": "executeTransactions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingMarketController",
      "outputs": [
        {
          "internalType": "contract ILendingMarketController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeToken",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFee",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "removeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenVault",
      "outputs": [
        {
          "internalType": "contract ITokenVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        }
      ],
      "name": "updateUniswapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc0b17d589ea3dfdd19e9d1577bf96477b282a1f1d4176d614d7e940c18ef8fe9",
  "receipt": {
    "to": null,
    "from": "0x4F122d7FCE7971E38801aF5d96fcD4ed83EFD654",
    "contractAddress": "0x01fA284E47403A47ec6C836b41db33a849a437FE",
    "transactionIndex": 0,
    "gasUsed": "2367266",
    "logsBloom": "0x
    "blockHash": "0x5edd22efdee9cdac788ac620b3967c4c9efb36872562f17c0fed45e5ee6408d2",
    "transactionHash": "0xc0b17d589ea3dfdd19e9d1577bf96477b282a1f1d4176d614d7e940c18ef8fe9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4873250,
        "transactionHash": "0xc0b17d589ea3dfdd19e9d1577bf96477b282a1f1d4176d614d7e940c18ef8fe9",
        "address": "0x01fA284E47403A47ec6C836b41db33a849a437FE",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004f122d7fce7971e38801af5d96fcd4ed83efd654",
          "0x0000000000000000000000004f122d7fce7971e38801af5d96fcd4ed83efd654"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5edd22efdee9cdac788ac620b3967c4c9efb36872562f17c0fed45e5ee6408d2"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4873250,
        "transactionHash": "0xc0b17d589ea3dfdd19e9d1577bf96477b282a1f1d4176d614d7e940c18ef8fe9",
        "address": "0x01fA284E47403A47ec6C836b41db33a849a437FE",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
          "0x0000000000000000000000004f122d7fce7971e38801af5d96fcd4ed83efd654",
          "0x0000000000000000000000004f122d7fce7971e38801af5d96fcd4ed83efd654"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x5edd22efdee9cdac788ac620b3967c4c9efb36872562f17c0fed45e5ee6408d2"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4873250,
        "transactionHash": "0xc0b17d589ea3dfdd19e9d1577bf96477b282a1f1d4176d614d7e940c18ef8fe9",
        "address": "0x01fA284E47403A47ec6C836b41db33a849a437FE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004f122d7fce7971e38801af5d96fcd4ed83efd654"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x5edd22efdee9cdac788ac620b3967c4c9efb36872562f17c0fed45e5ee6408d2"
      }
    ],
    "blockNumber": 4873250,
    "cumulativeGasUsed": "2367266",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4554480000000000000000000000000000000000000000000000000000000000",
    "0x35e9D8e0223A75E51a67aa731127C91Ea0779Fe2",
    "0xB74749b2213916b1dA3b869E41c7c57f1db69393",
    "0xE592427A0AEce92De3Edee1F18E0157C05861564"
  ],
  "numDeployments": 1,
  "solcInputHash": "dad4e1216a8d2c3f34c83959f43d65c6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_nativeToken\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_lendingMarketController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerNotOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInputs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOperationExecution\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotAllowedAccess\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"values\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TransactionFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"}],\"name\":\"OperationExecuteForCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralCcy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedCollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"debtCcy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtMaturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedDebtAmount\",\"type\":\"uint256\"}],\"name\":\"OperationExecuteForDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TransactionExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralMaturities\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_collateralCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"_collateralMaturities\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"_debtCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_debtMaturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_poolFee\",\"type\":\"uint24\"}],\"name\":\"executeForcedRepayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_collateralCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"_collateralMaturities\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"_debtCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_debtMaturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_poolFee\",\"type\":\"uint24\"}],\"name\":\"executeLiquidationCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_collateralCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_receivedCollateralAmount\",\"type\":\"uint256\"}],\"name\":\"executeOperationForCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_collateralCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_receivedCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_debtCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_debtMaturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_receivedDebtAmount\",\"type\":\"uint256\"}],\"name\":\"executeOperationForDebt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"executeTransactions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingMarketController\",\"outputs\":[{\"internalType\":\"contract ILendingMarketController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenVault\",\"outputs\":[{\"internalType\":\"contract ITokenVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"name\":\"updateUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addOperator(address)\":{\"params\":{\"admin\":\"The address of the new admin\"}},\"deposit(bytes32,uint256)\":{\"details\":\"Deposits funds by the caller into the token vault.\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\"}},\"executeTransaction(address,bytes)\":{\"details\":\"Executes an arbitrary transaction.\",\"params\":{\"_data\":\"Encoded function data to be executed\",\"_target\":\"Address to be called\"}},\"executeTransactions(address[],uint256[],bytes[])\":{\"details\":\"Executes arbitrary transactions.\",\"params\":{\"_data\":\"Encoded function data to be executed\",\"_targets\":\"Array of Addresses to be called\",\"_values\":\"Array of values to be sent to _targets addresses\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeOperator(address)\":{\"params\":{\"admin\":\"The address of the admin to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"params\":{\"account\":\"The address of the account to revoke the role from\",\"role\":\"The role to be revoked\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`.\",\"params\":{\"account\":\"The address of the account to revoke the role from\",\"role\":\"The role to be revoked\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(bytes32,uint256)\":{\"details\":\"Withdraws funds by the caller from the token vault.\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addOperator(address)\":{\"notice\":\"Adds a new admin as Operator\"},\"removeOperator(address)\":{\"notice\":\"Removes an admin as Operator\"},\"renounceRole(bytes32,address)\":{\"notice\":\"Revokes `role` from the calling account. This function is disabled by overriding it with a revert.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/Liquidator.sol\":\"Liquidator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dependencies/openzeppelin/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xbc9ec150e13091594dfd8b1cd6016c962f3b1c681072f3c3fa989fdfa587d42f\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x00c839ff53d07d19db2e7cfa1e5133f9ee90a8d64b0e2e57f50446a2d1a3a0e0\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/dependencies/uniswap/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Uniswap Contracts 4.0.1-alpha (v3-periphery/contracts/interfaces/ISwapRouter.sol)\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"./IUniswapV3SwapCallback.sol\\\";\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(\\n        ExactInputSingleParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(\\n        ExactInputParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(\\n        ExactOutputSingleParams calldata params\\n    ) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(\\n        ExactOutputParams calldata params\\n    ) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0xc6701a8a8a7a5fedd14ab4801a31682402637a2832d2ff6e80c371ba803e5fd1\",\"license\":\"GPL-2.0-or-later\"},\"contracts/dependencies/uniswap/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Uniswap Contracts 4.0.1-alpha (v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol)\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf47fa4fc112f6531afd8c7e2e80fa8f8c3291265dfe5582669fcaea4582f2daa\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/Liquidator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {ISwapRouter} from \\\"../dependencies/uniswap/ISwapRouter.sol\\\";\\nimport {IERC20} from \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n// libraries\\nimport {TransferHelper} from \\\"../protocol/libraries/TransferHelper.sol\\\";\\n// interfaces\\nimport {ILendingMarketController} from \\\"../protocol/interfaces/ILendingMarketController.sol\\\";\\nimport {ITokenVault} from \\\"../protocol/interfaces/ITokenVault.sol\\\";\\nimport {ILiquidationReceiver} from \\\"../protocol/interfaces/ILiquidationReceiver.sol\\\";\\n// mixins\\nimport {MixinAccessControl} from \\\"../protocol/mixins/MixinAccessControl.sol\\\";\\nimport {MixinWallet} from \\\"../protocol/mixins/MixinWallet.sol\\\";\\n\\ncontract Liquidator is ILiquidationReceiver, MixinAccessControl, MixinWallet {\\n    bytes32 public immutable nativeToken;\\n    ILendingMarketController public immutable lendingMarketController;\\n    ITokenVault public immutable tokenVault;\\n    ISwapRouter public uniswapRouter;\\n    uint24 public poolFee;\\n    uint256[] public collateralMaturities;\\n\\n    modifier onlyLendingMarketController() {\\n        require(_msgSender() == address(lendingMarketController), \\\"Invalid caller\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        bytes32 _nativeToken,\\n        address _lendingMarketController,\\n        address _tokenVault,\\n        address _uniswapRouter\\n    ) {\\n        nativeToken = _nativeToken;\\n        lendingMarketController = ILendingMarketController(_lendingMarketController);\\n        tokenVault = ITokenVault(_tokenVault);\\n        uniswapRouter = ISwapRouter(_uniswapRouter);\\n        MixinAccessControl._setupInitialRoles(msg.sender);\\n        MixinWallet._initialize(msg.sender, tokenVault.getTokenAddress(_nativeToken));\\n    }\\n\\n    receive() external payable {}\\n\\n    function updateUniswapRouter(address _uniswapRouter) external onlyOperator {\\n        uniswapRouter = ISwapRouter(_uniswapRouter);\\n    }\\n\\n    function executeLiquidationCall(\\n        bytes32 _collateralCcy,\\n        uint256[] calldata _collateralMaturities,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity,\\n        address _user,\\n        uint24 _poolFee\\n    ) external onlyOperator {\\n        collateralMaturities = _collateralMaturities;\\n        poolFee = _poolFee;\\n        lendingMarketController.executeLiquidationCall(\\n            _collateralCcy,\\n            _debtCcy,\\n            _debtMaturity,\\n            _user\\n        );\\n    }\\n\\n    function executeForcedRepayment(\\n        bytes32 _collateralCcy,\\n        uint256[] calldata _collateralMaturities,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity,\\n        address _user,\\n        uint24 _poolFee\\n    ) external onlyOperator {\\n        collateralMaturities = _collateralMaturities;\\n        poolFee = _poolFee;\\n        lendingMarketController.executeForcedRepayment(\\n            _collateralCcy,\\n            _debtCcy,\\n            _debtMaturity,\\n            _user\\n        );\\n    }\\n\\n    function executeOperationForCollateral(\\n        address _liquidator,\\n        address _user,\\n        bytes32 _collateralCcy,\\n        uint256 _receivedCollateralAmount\\n    ) external override onlyLendingMarketController returns (bool) {\\n        for (uint256 i; i < collateralMaturities.length; i++) {\\n            (, int256 fvAmount) = lendingMarketController.getPosition(\\n                _collateralCcy,\\n                collateralMaturities[i],\\n                address(this)\\n            );\\n\\n            if (fvAmount > 0) {\\n                lendingMarketController.unwindPosition(_collateralCcy, collateralMaturities[i]);\\n            }\\n        }\\n\\n        tokenVault.withdraw(_collateralCcy, _receivedCollateralAmount);\\n\\n        emit OperationExecuteForCollateral(\\n            _liquidator,\\n            _user,\\n            _collateralCcy,\\n            _receivedCollateralAmount\\n        );\\n\\n        return true;\\n    }\\n\\n    function executeOperationForDebt(\\n        address _liquidator,\\n        address _user,\\n        bytes32 _collateralCcy,\\n        uint256 _receivedCollateralAmount,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity,\\n        uint256 _receivedDebtAmount\\n    ) external override onlyLendingMarketController returns (bool) {\\n        address collateralCcyAddr = tokenVault.getTokenAddress(_collateralCcy);\\n        address debtCcyAddr = tokenVault.getTokenAddress(_debtCcy);\\n        bool isNativeCurrency = _collateralCcy == nativeToken;\\n\\n        uint256 collateralTokenBalance = isNativeCurrency\\n            ? address(this).balance\\n            : IERC20(collateralCcyAddr).balanceOf(address(this));\\n\\n        if (_receivedDebtAmount > 0 && collateralTokenBalance != 0) {\\n            _executeSwap(\\n                collateralCcyAddr,\\n                debtCcyAddr,\\n                collateralTokenBalance,\\n                0,\\n                poolFee,\\n                isNativeCurrency\\n            );\\n        }\\n\\n        uint256 debtTokenBalance;\\n\\n        if (_debtCcy == nativeToken) {\\n            debtTokenBalance = address(this).balance;\\n        } else {\\n            debtTokenBalance = IERC20(debtCcyAddr).balanceOf(address(this));\\n            TransferHelper.safeApprove(debtCcyAddr, address(tokenVault), debtTokenBalance);\\n        }\\n\\n        if (debtTokenBalance != 0) {\\n            tokenVault.deposit(_debtCcy, debtTokenBalance);\\n\\n            // If debt is expired, it is under the repayment phase. In this case, we don't need to unwind the position.\\n            // Instead, repayment will be executed on the protocol side using the liquidator's deposit.\\n            if (_debtMaturity >= block.timestamp) {\\n                lendingMarketController.unwindPosition(_debtCcy, _debtMaturity);\\n            }\\n        }\\n\\n        emit OperationExecuteForDebt(\\n            _liquidator,\\n            _user,\\n            _collateralCcy,\\n            _receivedCollateralAmount,\\n            _debtCcy,\\n            _debtMaturity,\\n            _receivedDebtAmount\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Deposits funds by the caller into the token vault.\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to deposit\\n     */\\n    function deposit(bytes32 _ccy, uint256 _amount) external payable onlyOwner {\\n        _deposit(tokenVault, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @dev Withdraws funds by the caller from the token vault.\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to deposit\\n     */\\n    function withdraw(bytes32 _ccy, uint256 _amount) external onlyOwner {\\n        _withdraw(tokenVault, _ccy, _amount);\\n    }\\n\\n    function _executeSwap(\\n        address _ccyFrom,\\n        address _ccyTo,\\n        uint256 _amountIn,\\n        uint256 _amountOutMinimum,\\n        uint24 _poolFee,\\n        bool _isNativeCurrency\\n    ) internal returns (uint256) {\\n        uint256 ethAmount;\\n        if (_isNativeCurrency) {\\n            ethAmount = _amountIn;\\n        } else {\\n            TransferHelper.safeApprove(_ccyFrom, address(uniswapRouter), _amountIn);\\n        }\\n\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n            tokenIn: _ccyFrom,\\n            tokenOut: _ccyTo,\\n            fee: _poolFee,\\n            recipient: address(this),\\n            deadline: block.timestamp,\\n            amountIn: _amountIn,\\n            amountOutMinimum: _amountOutMinimum,\\n            sqrtPriceLimitX96: 0\\n        });\\n\\n        return uniswapRouter.exactInputSingle{value: ethAmount}(params);\\n    }\\n}\\n\",\"keccak256\":\"0xba847b47ebda498bcf7cd4518d86cf29b4208e8e48ce37d95426b7677128eb57\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {TerminationCurrencyCache} from \\\"../storages/LendingMarketControllerStorage.sol\\\";\\n\\ninterface ILendingMarketController {\\n    error InvalidMaturity();\\n    error InvalidCurrency();\\n    error AlreadyTerminated();\\n    error NotTerminated();\\n    error AlreadyInitialized();\\n\\n    struct AdditionalFunds {\\n        bytes32 ccy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 lentAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct CalculatedTotalFunds {\\n        uint256 plusDepositAmountInAdditionalFundsCcy;\\n        uint256 minusDepositAmountInAdditionalFundsCcy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 collateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct CalculatedFunds {\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 collateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct GetOrderEstimationParams {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        address user;\\n        ProtocolTypes.Side side;\\n        uint256 amount;\\n        uint256 unitPrice;\\n        uint256 additionalDepositAmount;\\n        bool ignoreBorrowedAmount;\\n    }\\n\\n    function isTerminated() external view returns (bool);\\n\\n    function isRedemptionRequired(address _user) external view returns (bool);\\n\\n    function getMarketBasePeriod() external view returns (uint256);\\n\\n    function getTerminationDate() external view returns (uint256);\\n\\n    function getTerminationCurrencyCache(\\n        bytes32 _ccy\\n    ) external view returns (TerminationCurrencyCache memory);\\n\\n    function getTerminationCollateralRatio(bytes32 _ccy) external view returns (uint256);\\n\\n    function getMinDebtUnitPrice(bytes32 _ccy) external view returns (uint256);\\n\\n    function getCurrentMinDebtUnitPrice(\\n        bytes32 _ccy,\\n        uint256 _maturity\\n    ) external view returns (uint256);\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarket(bytes32 ccy) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy) external view returns (address);\\n\\n    function getOrderBookId(bytes32 _ccy, uint256 _maturity) external view returns (uint8);\\n\\n    function getPendingOrderAmount(bytes32 _ccy, uint256 _maturity) external view returns (uint256);\\n\\n    function getOrderEstimation(\\n        GetOrderEstimationParams calldata params\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV,\\n            uint256 orderFeeInFV,\\n            uint256 placedAmount,\\n            uint256 coverage,\\n            bool isInsufficientDepositAmount\\n        );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getOrderBookIds(bytes32 ccy) external view returns (uint8[] memory);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInBaseCurrency(\\n        address user\\n    ) external view returns (int256 totalPresentValue);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256 genesisValue);\\n\\n    function getPosition(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) external view returns (int256 presentValue, int256 futureValue);\\n\\n    function calculateFunds(\\n        bytes32 ccy,\\n        address user,\\n        uint256 liquidationThresholdRate\\n    ) external view returns (CalculatedFunds memory funds);\\n\\n    function calculateTotalFundsInBaseCurrency(\\n        address user,\\n        AdditionalFunds calldata _additionalFunds,\\n        uint256 liquidationThresholdRate\\n    ) external view returns (CalculatedTotalFunds memory calculatedFunds);\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor,\\n        uint256 orderFeeRate,\\n        uint256 circuitBreakerLimitRange,\\n        uint256 minDebtUnitPrice\\n    ) external;\\n\\n    function createOrderBook(bytes32 ccy, uint256 openingDate, uint256 preOpeningDate) external;\\n\\n    function executeOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecuteOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function executePreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecutesPreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function unwindPosition(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function executeItayoseCall(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function executeRedemption(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeRepayment(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeEmergencySettlement() external returns (bool);\\n\\n    function executeLiquidationCall(\\n        bytes32 collateralCcy,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        address user\\n    ) external returns (bool);\\n\\n    function executeForcedRepayment(\\n        bytes32 _collateralCcy,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity,\\n        address _user\\n    ) external returns (bool);\\n\\n    function cancelOrder(bytes32 ccy, uint256 maturity, uint48 orderId) external returns (bool);\\n\\n    function rotateOrderBooks(bytes32 ccy) external;\\n\\n    function executeEmergencyTermination() external;\\n\\n    function pauseLendingMarket(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarket(bytes32 ccy) external returns (bool);\\n\\n    function cleanUpAllFunds(address user) external returns (bool);\\n\\n    function cleanUpFunds(bytes32 ccy, address user) external returns (uint256 activeOrderCount);\\n\\n    function updateMinDebtUnitPrice(bytes32 _ccy, uint256 _minDebtUnitPrice) external;\\n}\\n\",\"keccak256\":\"0x515f82e072b1f3eb7b1e58669af0926331bba401c07898dd148ac569d6274061\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/ILiquidationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface ILiquidationReceiver {\\n    error InvalidOperationExecution();\\n\\n    event OperationExecuteForCollateral(\\n        address liquidator,\\n        address user,\\n        bytes32 ccy,\\n        uint256 receivedAmount\\n    );\\n    event OperationExecuteForDebt(\\n        address liquidator,\\n        address user,\\n        bytes32 collateralCcy,\\n        uint256 receivedCollateralAmount,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        uint256 receivedDebtAmount\\n    );\\n\\n    function executeOperationForCollateral(\\n        address liquidator,\\n        address user,\\n        bytes32 ccy,\\n        uint256 receivedAmount\\n    ) external returns (bool);\\n\\n    function executeOperationForDebt(\\n        address liquidator,\\n        address user,\\n        bytes32 collateralCcy,\\n        uint256 receivedCollateralAmount,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        uint256 receivedDebtAmount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x182c08b2fa683f981fd1a5e77b720670d3c1766c24bac51bfee3c9d7e925603c\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/INativeToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface INativeToken is IERC20 {\\n    event Deposit(address user, uint256 amount);\\n    event Withdrawal(address user, uint256 amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x421a18a404723799ac6878c4f710de9e71b2f90877d027a18c8bc42950796b70\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\n\\ninterface ITokenVault {\\n    error UnregisteredCurrency();\\n    error InvalidCurrency();\\n    error InvalidToken();\\n    error InvalidAmount(bytes32 ccy, uint256 amount, uint256 msgValue);\\n    error AmountIsZero();\\n    error CallerNotBaseCurrency(address caller);\\n    error MarketTerminated();\\n    error RedemptionIsRequired();\\n\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress, bool isCollateral);\\n    event CurrencyUpdated(bytes32 ccy, bool isCollateral);\\n\\n    function isCovered(address user) external view returns (bool);\\n\\n    function isCollateral(bytes32 ccy) external view returns (bool);\\n\\n    function isCollateral(bytes32[] calldata ccys) external view returns (bool[] memory);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getTokenAddress(bytes32 ccy) external view returns (address);\\n\\n    function getCollateralCurrencies() external view returns (bytes32[] memory);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256);\\n\\n    function getWithdrawableCollateral(bytes32 ccy, address user) external view returns (uint256);\\n\\n    function getCoverage(address user) external view returns (uint256);\\n\\n    function getTotalUnusedCollateralAmount(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address user) external view returns (uint256);\\n\\n    function getCollateralAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowableAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getLiquidationAmount(\\n        address user,\\n        bytes32 liquidationCcy,\\n        uint256 liquidationAmountMaximum\\n    ) external view returns (uint256 liquidationAmount, uint256 protocolFee, uint256 liquidatorFee);\\n\\n    function getTotalDepositAmount(bytes32 ccy) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function calculateCoverage(\\n        address user,\\n        ILendingMarketController.AdditionalFunds memory funds\\n    ) external view returns (uint256 coverage, bool isInsufficientDepositAmount);\\n\\n    function calculateLiquidationFees(\\n        uint256 liquidationAmount\\n    ) external view returns (uint256 protocolFee, uint256 liquidatorFee);\\n\\n    function registerCurrency(bytes32 ccy, address tokenAddress, bool isCollateral) external;\\n\\n    function updateCurrency(bytes32 ccy, bool isCollateral) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositFrom(address user, bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addDepositAmount(address user, bytes32 ccy, uint256 amount) external;\\n\\n    function removeDepositAmount(address user, bytes32 ccy, uint256 amount) external;\\n\\n    function executeForcedReset(address user, bytes32 ccy) external returns (uint256 removedAmount);\\n\\n    function transferFrom(\\n        bytes32 ccy,\\n        address sender,\\n        address receiver,\\n        uint256 amount\\n    ) external returns (uint256 untransferredAmount);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xeef9402aabe39ca70cd4d4d74e8f1c826c272df1782933f1431648161f06c5bb\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {INativeToken} from \\\"../interfaces/INativeToken.sol\\\";\\nimport {TransferHelperStorage as Storage} from \\\"../storages/libraries/TransferHelperStorage.sol\\\";\\n\\nlibrary TransferHelper {\\n    function initialize(address _nativeToken) internal {\\n        require(Storage.slot().nativeToken == address(0), \\\"TransferHelper: Already initialized\\\");\\n        Storage.slot().nativeToken = _nativeToken;\\n    }\\n\\n    function nativeToken() internal view returns (address) {\\n        return Storage.slot().nativeToken;\\n    }\\n\\n    function isNative(address _token) internal view returns (bool) {\\n        return _token == Storage.slot().nativeToken;\\n    }\\n\\n    function depositAssets(\\n        address _token,\\n        address _payer,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == Storage.slot().nativeToken) {\\n            convertToWrappedToken(_receiver, _amount);\\n        } else {\\n            safeTransferFrom(_token, _payer, _receiver, _amount);\\n        }\\n    }\\n\\n    function withdrawAssets(address _token, address _receiver, uint256 _amount) internal {\\n        if (address(_token) == Storage.slot().nativeToken) {\\n            convertFromWrappedToken(_receiver, _amount);\\n        } else {\\n            safeTransfer(_token, _receiver, _amount);\\n        }\\n    }\\n\\n    function convertToWrappedToken(address _receiver, uint256 _amount) internal {\\n        require(address(this).balance >= _amount, \\\"TransferHelper: Insufficient balance\\\");\\n\\n        INativeToken(Storage.slot().nativeToken).deposit{value: _amount}();\\n        safeTransfer(Storage.slot().nativeToken, _receiver, _amount);\\n    }\\n\\n    function convertFromWrappedToken(address _receiver, uint256 _amount) internal {\\n        uint256 balance = INativeToken(Storage.slot().nativeToken).balanceOf(address(this));\\n        require(balance >= _amount, \\\"TransferHelper: Insufficient balance\\\");\\n\\n        if (balance > 0) {\\n            INativeToken(Storage.slot().nativeToken).withdraw(_amount);\\n            safeTransferETH(_receiver, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer helper from UniswapV2 Router\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    /**\\n     * There are many non-compliant ERC20 tokens... this can handle most, adapted from UniSwap V2\\n     * Im trying to make it a habit to put external calls last (reentrancy)\\n     * You can put this in an internal function if you like.\\n     */\\n    function safeTransfer(address token, address to, uint256 amount) internal {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // 0xa9059cbb = bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n            abi.encodeWithSelector(0xa9059cbb, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FAILED\\\"\\n        ); // ERC20 Transfer failed\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x97dfaed51a29cfeea6deb451a2f7d66adfa16ac2574c7fdafc79a3f002812cdd\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/mixins/MixinAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {AccessControl} from \\\"../utils/AccessControl.sol\\\";\\n\\n/**\\n * @notice Implements functions to add  role-based access control mechanisms.\\n */\\ncontract MixinAccessControl is AccessControl {\\n    error CallerNotOperator();\\n    error NotAllowedAccess(bytes32 role, address account);\\n\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    /**\\n     * @dev Throws if called by any account other than the admin.\\n     */\\n    modifier onlyOperator() {\\n        if (!hasRole(OPERATOR_ROLE, msg.sender)) revert CallerNotOperator();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the roles.\\n     * @param _admin The address of the admin role\\n     */\\n    function _setupInitialRoles(address _admin) internal {\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _grantRole(OPERATOR_ROLE, _admin);\\n    }\\n\\n    /**\\n     * @notice Adds a new admin as Operator\\n     * @param admin The address of the new admin\\n     */\\n    function addOperator(address admin) external {\\n        super.grantRole(OPERATOR_ROLE, admin);\\n    }\\n\\n    /**\\n     * @notice Removes an admin as Operator\\n     * @param admin The address of the admin to remove\\n     */\\n    function removeOperator(address admin) external {\\n        revokeRole(OPERATOR_ROLE, admin);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     * @param role The role to be revoked\\n     * @param account The address of the account to revoke the role from\\n     */\\n    function revokeRole(bytes32 role, address account) public override {\\n        if (account == msg.sender) revert NotAllowedAccess(role, account);\\n\\n        super.revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Revokes `role` from the calling account. This function is disabled by overriding it with a revert.\\n     * @param role The role to be revoked\\n     * @param account The address of the account to revoke the role from\\n     */\\n    function renounceRole(bytes32 role, address account) public pure override {\\n        revert NotAllowedAccess(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x3f53b204b9e2c8cb571fce0f537f8663a4952efbf19ce237a63d007acc6421ff\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/mixins/MixinWallet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// interfaces\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\n// libraries\\nimport {TransferHelper} from \\\"../libraries/TransferHelper.sol\\\";\\n// utils\\nimport {Ownable} from \\\"../utils/Ownable.sol\\\";\\n\\n/**\\n * @notice Implements functions to make a contract a wallet, i.e. withdraw and deposit funds.\\n *\\n * The _initialize function of this contract is expected to be called in an inheriting contract's intializer or constructor.\\n *\\n */\\nabstract contract MixinWallet is Ownable {\\n    error TransactionFailed(address target, uint256 values, bytes data);\\n    error InvalidInputs();\\n\\n    event TransactionExecuted(address from, address target, uint256 value, bytes data);\\n\\n    function _initialize(address _owner, address _nativeToken) internal {\\n        _transferOwnership(_owner);\\n        TransferHelper.initialize(_nativeToken);\\n    }\\n\\n    /**\\n     * @dev Executes an arbitrary transaction.\\n     * @param _target Address to be called\\n     * @param _data Encoded function data to be executed\\n     */\\n    function executeTransaction(address _target, bytes calldata _data) public payable onlyOwner {\\n        _executeTransaction(_target, msg.value, _data);\\n    }\\n\\n    /**\\n     * @dev Executes arbitrary transactions.\\n     * @param _targets Array of Addresses to be called\\n     * @param _values Array of values to be sent to _targets addresses\\n     * @param _data Encoded function data to be executed\\n     */\\n    function executeTransactions(\\n        address[] calldata _targets,\\n        uint256[] calldata _values,\\n        bytes[] calldata _data\\n    ) external onlyOwner {\\n        if (\\n            _targets.length == 0 ||\\n            _targets.length != _data.length ||\\n            _targets.length != _values.length\\n        ) {\\n            revert InvalidInputs();\\n        }\\n\\n        for (uint256 i; i < _targets.length; i++) {\\n            _executeTransaction(_targets[i], _values[i], _data[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Executes an arbitrary transaction.\\n     * Internal function without access restriction.\\n     * @param _target Address to be called\\n     * @param _value Value to be sent to _targets address\\n     * @param _data Encoded function data to be executed\\n     */\\n    function _executeTransaction(address _target, uint256 _value, bytes memory _data) internal {\\n        (bool success, ) = _target.call{value: _value}(_data);\\n        if (!success) revert TransactionFailed(_target, _value, _data);\\n\\n        emit TransactionExecuted(msg.sender, _target, _value, _data);\\n    }\\n\\n    /**\\n     * @dev Deposits funds by the caller into the token vault.\\n     * Internal function without access restriction.\\n     * @param _tokenVault TokenVault contract instance\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to deposit\\n     */\\n    function _deposit(ITokenVault _tokenVault, bytes32 _ccy, uint256 _amount) internal {\\n        address tokenAddress = _tokenVault.getTokenAddress(_ccy);\\n        if (!TransferHelper.isNative(tokenAddress)) {\\n            TransferHelper.safeTransferFrom(tokenAddress, msg.sender, address(this), _amount);\\n            TransferHelper.safeApprove(tokenAddress, address(_tokenVault), _amount);\\n        }\\n        _tokenVault.deposit{value: msg.value}(_ccy, _amount);\\n    }\\n\\n    /**\\n     * @dev Withdraws funds by the caller from the token vault.\\n     * Internal function without access restriction.\\n     * @param _tokenVault TokenVault contract instance\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to deposit\\n     */\\n    function _withdraw(ITokenVault _tokenVault, bytes32 _ccy, uint256 _amount) internal {\\n        _tokenVault.withdraw(_ccy, _amount);\\n\\n        address tokenAddress = _tokenVault.getTokenAddress(_ccy);\\n        if (TransferHelper.isNative(tokenAddress)) {\\n            TransferHelper.safeTransferETH(msg.sender, _amount);\\n        } else {\\n            TransferHelper.safeTransfer(tokenAddress, msg.sender, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ea6f9aacd16eb52b5b095d838ea5d2e8e8a3e38b29be33882a94cd794ad08c4\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/LendingMarketControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct ObservationPeriodLog {\\n    uint256 totalAmount;\\n    uint256 totalFutureValue;\\n}\\n\\nstruct TerminationCurrencyCache {\\n    int256 price;\\n    uint8 decimals;\\n}\\n\\nlibrary LendingMarketControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.lendingMarketController\\\")) - 1);\\n\\n    struct Storage {\\n        uint256 marketBasePeriod;\\n        uint256 terminationDate;\\n        mapping(bytes32 ccy => TerminationCurrencyCache currency) terminationCurrencyCaches;\\n        mapping(bytes32 ccy => uint256 ratio) terminationCollateralRatios;\\n        mapping(bytes32 ccy => uint8[] orderBookIds) orderBookIdLists;\\n        mapping(bytes32 ccy => address lendingMarket) lendingMarkets;\\n        mapping(bytes32 ccy => address futureValueVault) futureValueVaults;\\n        mapping(bytes32 ccy => uint256 unitPrice) minDebtUnitPrices;\\n        mapping(bytes32 ccy => uint256 genesisDate) genesisDates;\\n        mapping(bytes32 ccy => mapping(uint256 maturity => uint256 amount)) pendingOrderAmounts;\\n        // Order book id history to get order book id from maturity\\n        mapping(bytes32 ccy => mapping(uint256 maturity => uint8 orderBookIds)) maturityOrderBookIds;\\n        // List of maturity that the user has open orders or positions\\n        mapping(bytes32 ccy => mapping(address user => EnumerableSet.UintSet maturities)) usedMaturities;\\n        // Observation period logs that is used for auto-rolls\\n        mapping(bytes32 ccy => mapping(uint256 maturity => ObservationPeriodLog log)) observationPeriodLogs;\\n        // List of currency that the user has open orders or positions\\n        mapping(address user => EnumerableSet.Bytes32Set currency) usedCurrencies;\\n        mapping(address user => bool isRedeemed) isRedeemed;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c17d741d07b65f548ee237fa5ae57c559f5b96c500a10a907560b40f3d74eb7\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/libraries/TransferHelperStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary TransferHelperStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.transferHelper\\\")) - 1);\\n\\n    struct Storage {\\n        address nativeToken;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8b1860e468280ebdccca0a4276fd31b58e0a84addb320f5d62372d644173f72\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/utils/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nstruct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n}\\n\\nlibrary AccessControlStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.accessControl\\\")) - 1);\\n\\n    struct Storage {\\n        mapping(bytes32 role => RoleData roleData) roles;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x08de1e22d35fffead0a9c9cc6a1ef53441513d5ba080a5361dd48e5cc5d794c0\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/utils/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary OwnableStorage {\\n    bytes32 internal constant STORAGE_SLOT = bytes32(uint256(keccak256(\\\"sf.storage.ownable\\\")) - 1);\\n\\n    struct Storage {\\n        address owner;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98130c4c3d0014744b194e179bd65b8b7e73cac9cd33a470d194072e1a06b94e\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0x409169980b48b1bd32af609ac7b90f5c29e064cbec3d83d81767d72192ba07a2\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/utils/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../dependencies/openzeppelin/access/IAccessControl.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/Context.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/Strings.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/introspection/ERC165.sol\\\";\\nimport \\\"../storages/utils/AccessControlStorage.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return AccessControlStorage.slot().roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return AccessControlStorage.slot().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(\\n        bytes32 role,\\n        address account\\n    ) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(\\n        bytes32 role,\\n        address account\\n    ) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        AccessControlStorage.slot().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            AccessControlStorage.slot().roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            AccessControlStorage.slot().roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac33e516f59b08a69d11a73b73ce2dd13856dee8b9bf969069f513d072da130\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/Context.sol\\\";\\nimport \\\"../storages/utils/OwnableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return OwnableStorage.slot().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = OwnableStorage.slot().owner;\\n        OwnableStorage.slot().owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd735ea20ce4e86d574ab372eb79a46510c7be3b12b62f3948bb68dd2bea710ff\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101bb5760003560e01c8063713a670c116100ec578063a217fddf1161008a578063d547741f11610064578063d547741f14610508578063e1758bd814610528578063f2fde38b1461055c578063f5b541a61461057c57600080fd5b8063a217fddf1461049f578063ac8a584a146104b4578063b0ab6f9b146104d457600080fd5b80638da5cb5b116100c65780638da5cb5b1461042a578063908bb2ae1461043f57806391d148541461045f5780639870d7fe1461047f57600080fd5b8063713a670c146103d5578063715018a6146103f5578063735de9f71461040a57600080fd5b8063248a9ca31161015957806340f8e9ef1161013357806340f8e9ef1461033657806348e568d8146103565780635bc789d9146103765780636ca0f814146103c257600080fd5b8063248a9ca3146102c85780632f2ff15d146102f657806336568abe1461031657600080fd5b806312e8eaef1161019557806312e8eaef146102555780631de26e16146102755780631f47d9c21461028857806322d50a7c146102a857600080fd5b806301ffc9a7146101c7578063040cf020146101fc578063089fe6aa1461021e57600080fd5b366101c257005b600080fd5b3480156101d357600080fd5b506101e76101e23660046120d7565b61059e565b60405190151581526020015b60405180910390f35b34801561020857600080fd5b5061021c610217366004612101565b6105d5565b005b34801561022a57600080fd5b5060005461024190600160a01b900462ffffff1681565b60405162ffffff90911681526020016101f3565b34801561026157600080fd5b5061021c61027036600461216f565b61063c565b61021c610283366004612101565b610768565b34801561029457600080fd5b506101e76102a336600461221e565b6107c2565b3480156102b457600080fd5b5061021c6102c3366004612264565b610aac565b3480156102d457600080fd5b506102e86102e33660046122f3565b610bb6565b6040519081526020016101f3565b34801561030257600080fd5b5061021c61031136600461230c565b610bd4565b34801561032257600080fd5b5061021c61033136600461230c565b610bf5565b34801561034257600080fd5b5061021c610351366004612264565b610c20565b34801561036257600080fd5b506101e761037136600461233c565b610ce1565b34801561038257600080fd5b506103aa7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101f3565b61021c6103d036600461239e565b6111af565b3480156103e157600080fd5b506102e86103f03660046122f3565b61121f565b34801561040157600080fd5b5061021c611240565b34801561041657600080fd5b506000546103aa906001600160a01b031681565b34801561043657600080fd5b506103aa61127b565b34801561044b57600080fd5b5061021c61045a366004612423565b611294565b34801561046b57600080fd5b506101e761047a36600461230c565b6112eb565b34801561048b57600080fd5b5061021c61049a366004612423565b61131f565b3480156104ab57600080fd5b506102e8600081565b3480156104c057600080fd5b5061021c6104cf366004612423565b61133a565b3480156104e057600080fd5b506103aa7f000000000000000000000000000000000000000000000000000000000000000081565b34801561051457600080fd5b5061021c61052336600461230c565b61134e565b34801561053457600080fd5b506102e87f000000000000000000000000000000000000000000000000000000000000000081565b34801561056857600080fd5b5061021c610577366004612423565b611393565b34801561058857600080fd5b506102e860008051602061274983398151915281565b60006001600160e01b03198216637965db0b60e01b14806105cf57506301ffc9a760e01b6001600160e01b03198316145b92915050565b336105de61127b565b6001600160a01b03161461060d5760405162461bcd60e51b815260040161060490612440565b60405180910390fd5b6106387f00000000000000000000000000000000000000000000000000000000000000008383611430565b5050565b3361064561127b565b6001600160a01b03161461066b5760405162461bcd60e51b815260040161060490612440565b8415806106785750848114155b806106835750848314155b156106a1576040516379a67d5b60e11b815260040160405180910390fd5b60005b8581101561075f5761074d8787838181106106c1576106c1612475565b90506020020160208101906106d69190612423565b8686848181106106e8576106e8612475565b9050602002013585858581811061070157610701612475565b9050602002810190610713919061248b565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061152c92505050565b80610757816124e8565b9150506106a4565b50505050505050565b3361077161127b565b6001600160a01b0316146107975760405162461bcd60e51b815260040161060490612440565b6106387f000000000000000000000000000000000000000000000000000000000000000083836115f4565b6000337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461082d5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21031b0b63632b960911b6044820152606401610604565b60005b6001548110156109cd5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663062ea294866001858154811061087f5761087f612475565b6000918252602090912001546040516001600160e01b031960e085901b168152600481019290925260248201523060448201526064016040805180830381865afa1580156108d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f59190612501565b91505060008113156109ba577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166301cf2235866001858154811061094457610944612475565b90600052602060002001546040518363ffffffff1660e01b8152600401610975929190918252602082015260400190565b6020604051808303816000875af1158015610994573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b89190612525565b505b50806109c5816124e8565b915050610830565b506040516220678160e51b815260048101849052602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063040cf02090604401600060405180830381600087803b158015610a3657600080fd5b505af1158015610a4a573d6000803e3d6000fd5b5050604080516001600160a01b03808a16825288166020820152908101869052606081018590527f920143480d6d619178c021ba207b55dd95f0516faec09146dac8ab44acdeaab39250608001905060405180910390a1506001949350505050565b610ac4600080516020612749833981519152336112eb565b610ae15760405163a5523ee560e01b815260040160405180910390fd5b610aed60018787612077565b506000805462ffffff60a01b1916600160a01b62ffffff841602179055604051638469973f60e01b81526004810188905260248101859052604481018490526001600160a01b0383811660648301527f00000000000000000000000000000000000000000000000000000000000000001690638469973f906084015b6020604051808303816000875af1158015610b88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bac9190612525565b5050505050505050565b6000610bc06116ef565b600092835260205250604090206001015490565b610bdd82610bb6565b610be68161171d565b610bf08383611727565b505050565b604051631eb5512b60e31b8152600481018390526001600160a01b0382166024820152604401610604565b610c38600080516020612749833981519152336112eb565b610c555760405163a5523ee560e01b815260040160405180910390fd5b610c6160018787612077565b506000805462ffffff60a01b1916600160a01b62ffffff84160217905560405163c11333b160e01b81526004810188905260248101859052604481018490526001600160a01b0383811660648301527f0000000000000000000000000000000000000000000000000000000000000000169063c11333b190608401610b69565b6000337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610d4c5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21031b0b63632b960911b6044820152606401610604565b604051630b12e44160e41b8152600481018790526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b12e441090602401602060405180830381865afa158015610db4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd89190612547565b604051630b12e44160e41b8152600481018790529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b12e441090602401602060405180830381865afa158015610e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e679190612547565b90507f00000000000000000000000000000000000000000000000000000000000000008814600081610f00576040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015610ed7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efb9190612564565b610f02565b475b9050600086118015610f1357508015155b15610f3957610f3784848360008060149054906101000a900462ffffff168761179e565b505b60007f00000000000000000000000000000000000000000000000000000000000000008903610f69575047610ffe565b6040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015610fad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd19190612564565b9050610ffe847f0000000000000000000000000000000000000000000000000000000000000000836118ca565b801561112057604051630ef1370b60e11b8152600481018a9052602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631de26e1690604401600060405180830381600087803b15801561106d57600080fd5b505af1158015611081573d6000803e3d6000fd5b50505050428810611120576040516301cf223560e01b8152600481018a9052602481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906301cf2235906044016020604051808303816000875af11580156110fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111e9190612525565b505b7feb1a490f30116662c782ae6a8256a6864e8697875d95dd18c9b4bfd068af34c18d8d8d8d8d8d8d60405161119497969594939291906001600160a01b03978816815295909616602086015260408501939093526060840191909152608083015260a082015260c081019190915260e00190565b60405180910390a15060019c9b505050505050505050505050565b336111b861127b565b6001600160a01b0316146111de5760405162461bcd60e51b815260040161060490612440565b610bf0833484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061152c92505050565b6001818154811061122f57600080fd5b600091825260209091200154905081565b3361124961127b565b6001600160a01b03161461126f5760405162461bcd60e51b815260040161060490612440565b61127960006119e5565b565b6000611285611a52565b546001600160a01b0316919050565b6112ac600080516020612749833981519152336112eb565b6112c95760405163a5523ee560e01b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006112f56116ef565b6000938452602090815260408085206001600160a01b039490941685529290525090205460ff1690565b61133760008051602061274983398151915282610bd4565b50565b611337600080516020612749833981519152825b336001600160a01b0382160361138957604051631eb5512b60e31b8152600481018390526001600160a01b0382166024820152604401610604565b6106388282611a80565b3361139c61127b565b6001600160a01b0316146113c25760405162461bcd60e51b815260040161060490612440565b6001600160a01b0381166114275760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610604565b611337816119e5565b6040516220678160e51b815260048101839052602481018290526001600160a01b0384169063040cf02090604401600060405180830381600087803b15801561147857600080fd5b505af115801561148c573d6000803e3d6000fd5b5050604051630b12e44160e41b815260048101859052600092506001600160a01b038616915063b12e441090602401602060405180830381865afa1580156114d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fc9190612547565b905061150781611a9c565b1561151b576115163383611abd565b611526565b611526813384611b86565b50505050565b6000836001600160a01b0316838360405161154791906125a1565b60006040518083038185875af1925050503d8060008114611584576040519150601f19603f3d011682016040523d82523d6000602084013e611589565b606091505b50509050806115b157838383604051634048f65560e11b8152600401610604939291906125e9565b7f9b9454e35c96c025dbfe5fc6ac29b7e4595138f5bd9b8a84c26ef3b16660e0a0338585856040516115e69493929190612619565b60405180910390a150505050565b604051630b12e44160e41b8152600481018390526000906001600160a01b0385169063b12e441090602401602060405180830381865afa15801561163c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116609190612547565b905061166b81611a9c565b6116865761167b81333085611c9a565b6116868185846118ca565b604051630ef1370b60e11b815260048101849052602481018390526001600160a01b03851690631de26e169034906044016000604051808303818588803b1580156116d057600080fd5b505af11580156116e4573d6000803e3d6000fd5b505050505050505050565b6000806105cf60017f35e4a72724550e3953b041d501f29ff9ff417812c2917a203d9c4833b9d1d6f9612656565b6113378133611dca565b61173182826112eb565b61063857600161173f6116ef565b6000848152602091825260408082206001600160a01b0386168084529352808220805460ff1916941515949094179093559151339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60008082156117ae5750846117c6565b6000546117c69089906001600160a01b0316886118ca565b60408051610100810182526001600160a01b038a811682528981166020830190815262ffffff8881168486019081523060608601908152426080870190815260a087018e815260c088018e8152600060e08a0181815290549a5163414bf38960e01b81528a518a166004820152975189166024890152945190951660448701529151861660648601525160848501525160a4840152905160c483015251821660e48201529192169063414bf3899084906101040160206040518083038185885af1158015611898573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906118bd9190612564565b9998505050505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b179052915160009283929087169161192691906125a1565b6000604051808303816000865af19150503d8060008114611963576040519150601f19603f3d011682016040523d82523d6000602084013e611968565b606091505b50915091508180156119925750805115806119925750808060200190518101906119929190612525565b6119de5760405162461bcd60e51b815260206004820152601e60248201527f5472616e7366657248656c7065723a20415050524f56455f4641494c454400006044820152606401610604565b5050505050565b60006119ef611a52565b546001600160a01b0316905081611a04611a52565b80546001600160a01b0319166001600160a01b03928316179055604051838216918316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806105cf60017f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa612656565b611a8982610bb6565b611a928161171d565b610bf08383611e2e565b6000611aa6611ea6565b546001600160a01b03928316921691909114919050565b604080516000808252602082019092526001600160a01b038416908390604051611ae791906125a1565b60006040518083038185875af1925050503d8060008114611b24576040519150601f19603f3d011682016040523d82523d6000602084013e611b29565b606091505b5050905080610bf05760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b6064820152608401610604565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691611be291906125a1565b6000604051808303816000865af19150503d8060008114611c1f576040519150601f19603f3d011682016040523d82523d6000602084013e611c24565b606091505b5091509150818015611c4e575080511580611c4e575080806020019051810190611c4e9190612525565b6119de5760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c4544006044820152606401610604565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691611cfe91906125a1565b6000604051808303816000865af19150503d8060008114611d3b576040519150601f19603f3d011682016040523d82523d6000602084013e611d40565b606091505b5091509150818015611d6a575080511580611d6a575080806020019051810190611d6a9190612525565b611dc25760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416044820152631253115160e21b6064820152608401610604565b505050505050565b611dd482826112eb565b61063857611dec816001600160a01b03166014611ed4565b611df7836020611ed4565b604051602001611e0892919061267f565b60408051601f198184030181529082905262461bcd60e51b8252610604916004016126f4565b611e3882826112eb565b15610638576000611e476116ef565b6000848152602091825260408082206001600160a01b0386168084529352808220805460ff1916941515949094179093559151339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000806105cf60017f6f969d660e14559aec53d066903ba87981d0679d31bf1d3793a220e70e02808b612656565b60606000611ee3836002612707565b611eee90600261271e565b67ffffffffffffffff811115611f0657611f06612669565b6040519080825280601f01601f191660200182016040528015611f30576020820181803683370190505b509050600360fc1b81600081518110611f4b57611f4b612475565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f7a57611f7a612475565b60200101906001600160f81b031916908160001a9053506000611f9e846002612707565b611fa990600161271e565b90505b6001811115612021576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611fdd57611fdd612475565b1a60f81b828281518110611ff357611ff3612475565b60200101906001600160f81b031916908160001a90535060049490941c9361201a81612731565b9050611fac565b5083156120705760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610604565b9392505050565b8280548282559060005260206000209081019282156120b2579160200282015b828111156120b2578235825591602001919060010190612097565b506120be9291506120c2565b5090565b5b808211156120be57600081556001016120c3565b6000602082840312156120e957600080fd5b81356001600160e01b03198116811461207057600080fd5b6000806040838503121561211457600080fd5b50508035926020909101359150565b60008083601f84011261213557600080fd5b50813567ffffffffffffffff81111561214d57600080fd5b6020830191508360208260051b850101111561216857600080fd5b9250929050565b6000806000806000806060878903121561218857600080fd5b863567ffffffffffffffff808211156121a057600080fd5b6121ac8a838b01612123565b909850965060208901359150808211156121c557600080fd5b6121d18a838b01612123565b909650945060408901359150808211156121ea57600080fd5b506121f789828a01612123565b979a9699509497509295939492505050565b6001600160a01b038116811461133757600080fd5b6000806000806080858703121561223457600080fd5b843561223f81612209565b9350602085013561224f81612209565b93969395505050506040820135916060013590565b600080600080600080600060c0888a03121561227f57600080fd5b87359650602088013567ffffffffffffffff81111561229d57600080fd5b6122a98a828b01612123565b909750955050604088013593506060880135925060808801356122cb81612209565b915060a088013562ffffff811681146122e357600080fd5b8091505092959891949750929550565b60006020828403121561230557600080fd5b5035919050565b6000806040838503121561231f57600080fd5b82359150602083013561233181612209565b809150509250929050565b600080600080600080600060e0888a03121561235757600080fd5b873561236281612209565b9650602088013561237281612209565b96999698505050506040850135946060810135946080820135945060a0820135935060c0909101359150565b6000806000604084860312156123b357600080fd5b83356123be81612209565b9250602084013567ffffffffffffffff808211156123db57600080fd5b818601915086601f8301126123ef57600080fd5b8135818111156123fe57600080fd5b87602082850101111561241057600080fd5b6020830194508093505050509250925092565b60006020828403121561243557600080fd5b813561207081612209565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126124a257600080fd5b83018035915067ffffffffffffffff8211156124bd57600080fd5b60200191503681900382131561216857600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016124fa576124fa6124d2565b5060010190565b6000806040838503121561251457600080fd5b505080516020909101519092909150565b60006020828403121561253757600080fd5b8151801515811461207057600080fd5b60006020828403121561255957600080fd5b815161207081612209565b60006020828403121561257657600080fd5b5051919050565b60005b83811015612598578181015183820152602001612580565b50506000910152565b600082516125b381846020870161257d565b9190910192915050565b600081518084526125d581602086016020860161257d565b601f01601f19169290920160200192915050565b60018060a01b038416815282602082015260606040820152600061261060608301846125bd565b95945050505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061264c908301846125bd565b9695505050505050565b818103818111156105cf576105cf6124d2565b634e487b7160e01b600052604160045260246000fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516126b781601785016020880161257d565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516126e881602884016020880161257d565b01602801949350505050565b60208152600061207060208301846125bd565b80820281158282048414176105cf576105cf6124d2565b808201808211156105cf576105cf6124d2565b600081612740576127406124d2565b50600019019056fe97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929a2646970667358221220fc8e229131591681ac9b11093758de3375cf0766e84158fafbf1324654de520564736f6c63430008130033",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addOperator(address)": {
        "params": {
          "admin": "The address of the new admin"
        }
      },
      "deposit(bytes32,uint256)": {
        "details": "Deposits funds by the caller into the token vault.",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32"
        }
      },
      "executeTransaction(address,bytes)": {
        "details": "Executes an arbitrary transaction.",
        "params": {
          "_data": "Encoded function data to be executed",
          "_target": "Address to be called"
        }
      },
      "executeTransactions(address[],uint256[],bytes[])": {
        "details": "Executes arbitrary transactions.",
        "params": {
          "_data": "Encoded function data to be executed",
          "_targets": "Array of Addresses to be called",
          "_values": "Array of values to be sent to _targets addresses"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeOperator(address)": {
        "params": {
          "admin": "The address of the admin to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "params": {
          "account": "The address of the account to revoke the role from",
          "role": "The role to be revoked"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`.",
        "params": {
          "account": "The address of the account to revoke the role from",
          "role": "The role to be revoked"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(bytes32,uint256)": {
        "details": "Withdraws funds by the caller from the token vault.",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addOperator(address)": {
        "notice": "Adds a new admin as Operator"
      },
      "removeOperator(address)": {
        "notice": "Removes an admin as Operator"
      },
      "renounceRole(bytes32,address)": {
        "notice": "Revokes `role` from the calling account. This function is disabled by overriding it with a revert."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7000,
        "contract": "contracts/external/Liquidator.sol:Liquidator",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ISwapRouter)5616"
      },
      {
        "astId": 7002,
        "contract": "contracts/external/Liquidator.sol:Liquidator",
        "label": "poolFee",
        "offset": 20,
        "slot": "0",
        "type": "t_uint24"
      },
      {
        "astId": 7005,
        "contract": "contracts/external/Liquidator.sol:Liquidator",
        "label": "collateralMaturities",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(ISwapRouter)5616": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}