{
  "address": "0xa2700D5feDB13b86Bba3228008C7a0d464a07f2b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentMaturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextMaturity",
          "type": "uint256"
        }
      ],
      "name": "AutoRollLogAlreadyUpdated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CompoundFactorIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CurrencyAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitialCompoundFactorAlreadyFinalized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMaturity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOrderFeeRate",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "MissingAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "name": "NoCompoundFactorExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "OnlyAcceptedContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ResidualAmountIsNotZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ResolverAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnitPriceIsZero",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lendingCompoundFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowingCompoundFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentMaturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMaturity",
          "type": "uint256"
        }
      ],
      "name": "AutoRollExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "int256",
          "name": "_balance",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_fromMaturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toMaturity",
          "type": "uint256"
        }
      ],
      "name": "calculateBalanceFluctuationByAutoRolls",
      "outputs": [
        {
          "internalType": "int256",
          "name": "fluctuation",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_basisMaturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_destinationMaturity",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_futureValue",
          "type": "int256"
        }
      ],
      "name": "calculateFVFromFV",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_basisMaturity",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_genesisValue",
          "type": "int256"
        }
      ],
      "name": "calculateFVFromGV",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_basisMaturity",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_futureValue",
          "type": "int256"
        }
      ],
      "name": "calculateGVFromFV",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "cleanUpBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nextMaturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_orderFeeRate",
          "type": "uint256"
        }
      ],
      "name": "executeAutoRoll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "_amountInFV",
          "type": "int256"
        }
      ],
      "name": "executeForcedReset",
      "outputs": [
        {
          "internalType": "int256",
          "name": "removedAmountInFV",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "balance",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "executeForcedReset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getAutoRollLog",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "unitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lendingCompoundFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowingCompoundFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "next",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "prev",
              "type": "uint256"
            }
          ],
          "internalType": "struct AutoRollLog",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getBalanceFluctuationByAutoRolls",
      "outputs": [
        {
          "internalType": "int256",
          "name": "fluctuation",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getBalanceInFutureValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getBorrowingCompoundFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getCurrentMaturity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getLatestAutoRollLog",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "unitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lendingCompoundFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowingCompoundFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "next",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "prev",
              "type": "uint256"
            }
          ],
          "internalType": "struct AutoRollLog",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getLendingCompoundFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getMaturityGenesisValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRevision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getTotalBorrowingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getTotalLendingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_compoundFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "initializeCurrencySetting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "_amount",
          "type": "int256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_basisMaturity",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_fvAmount",
          "type": "int256"
        }
      ],
      "name": "updateGenesisValueWithFutureValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_basisMaturity",
          "type": "uint256"
        }
      ],
      "name": "updateGenesisValueWithResidualAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        }
      ],
      "name": "updateInitialCompoundFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1d71adad5aa7dd7950d67955928dfe4960e00a0ee49edc8786c643602a8cfc39",
  "receipt": {
    "to": null,
    "from": "0x4F122d7FCE7971E38801aF5d96fcD4ed83EFD654",
    "contractAddress": "0xBBD1797Aa0ee9cD65B62Aa1Bc63cF5F22b414bb4",
    "transactionIndex": 73,
    "gasUsed": "2574645",
    "logsBloom": "0x
    "blockHash": "0x1f50c9a93319584c81d58302023385a8b44dd37e8e399ed9334e4a47e6f6d729",
    "transactionHash": "0x1d71adad5aa7dd7950d67955928dfe4960e00a0ee49edc8786c643602a8cfc39",
    "logs": [],
    "blockNumber": 5189200,
    "cumulativeGasUsed": "11683040",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "3f36eff6b272d47f9a9fd9117b40f48f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentMaturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextMaturity\",\"type\":\"uint256\"}],\"name\":\"AutoRollLogAlreadyUpdated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CompoundFactorIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CurrencyAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitialCompoundFactorAlreadyFinalized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMaturity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOrderFeeRate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"MissingAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"name\":\"NoCompoundFactorExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"OnlyAcceptedContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ResidualAmountIsNotZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ResolverAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnitPriceIsZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lendingCompoundFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowingCompoundFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentMaturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMaturity\",\"type\":\"uint256\"}],\"name\":\"AutoRollExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"_balance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_fromMaturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toMaturity\",\"type\":\"uint256\"}],\"name\":\"calculateBalanceFluctuationByAutoRolls\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"fluctuation\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_basisMaturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_destinationMaturity\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_futureValue\",\"type\":\"int256\"}],\"name\":\"calculateFVFromFV\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_basisMaturity\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_genesisValue\",\"type\":\"int256\"}],\"name\":\"calculateFVFromGV\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_basisMaturity\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_futureValue\",\"type\":\"int256\"}],\"name\":\"calculateGVFromFV\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"cleanUpBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextMaturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderFeeRate\",\"type\":\"uint256\"}],\"name\":\"executeAutoRoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amountInFV\",\"type\":\"int256\"}],\"name\":\"executeForcedReset\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"removedAmountInFV\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"balance\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"executeForcedReset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getAutoRollLog\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendingCompoundFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowingCompoundFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prev\",\"type\":\"uint256\"}],\"internalType\":\"struct AutoRollLog\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getBalanceFluctuationByAutoRolls\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"fluctuation\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBalanceInFutureValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getBorrowingCompoundFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getCurrentMaturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getLatestAutoRollLog\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendingCompoundFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowingCompoundFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prev\",\"type\":\"uint256\"}],\"internalType\":\"struct AutoRollLog\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getLendingCompoundFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getMaturityGenesisValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRevision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getTotalBorrowingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getTotalLendingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_compoundFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"initializeCurrencySetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_basisMaturity\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_fvAmount\",\"type\":\"int256\"}],\"name\":\"updateGenesisValueWithFutureValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_basisMaturity\",\"type\":\"uint256\"}],\"name\":\"updateGenesisValueWithResidualAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"updateInitialCompoundFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"calculateBalanceFluctuationByAutoRolls(bytes32,int256,uint256,uint256)\":{\"params\":{\"_balance\":\"User's balance\",\"_ccy\":\"Currency name in bytes32\",\"_fromMaturity\":\"The maturity at start\",\"_toMaturity\":\"The maturity at end\"}},\"calculateFVFromFV(bytes32,uint256,uint256,int256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The future value at the destination maturity\"}},\"calculateFVFromGV(bytes32,uint256,int256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The future value\"}},\"calculateGVFromFV(bytes32,uint256,int256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The genesis value\"}},\"cleanUpBalance(bytes32,address,uint256)\":{\"details\":\"The genesis value of borrowing fluctuates when it is auto-rolled, but it is not updated in real-time. This function removes the fluctuation amount calculated by lazy evaluation to reduce gas costs.\",\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_maturity\":\"The maturity\",\"_user\":\"User's address\"}},\"decimals(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The decimals of the genesis value.\"}},\"executeAutoRoll(bytes32,uint256,uint256,uint256,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_maturity\":\"Current maturity\",\"_nextMaturity\":\"Next maturity to be rolled\",\"_orderFeeRate\":\"Order fee rate used to calculate the auto-roll fee\",\"_unitPrice\":\"Unit price of auto-roll\"}},\"executeForcedReset(bytes32,address)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"executeForcedReset(bytes32,uint256,address,int256)\":{\"params\":{\"_amountInFV\":\"The amount in the future value to reset\",\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"getAutoRollLog(bytes32,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_maturity\":\"The maturity\"},\"returns\":{\"_0\":\"The auto-roll log\"}},\"getBalance(bytes32,address)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The user balance\"}},\"getBalanceFluctuationByAutoRolls(bytes32,address,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_maturity\":\"The maturity\",\"_user\":\"User's address\"}},\"getBalanceInFutureValue(bytes32,address)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The future value of the user balance\"}},\"getBorrowingCompoundFactor(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The lending compound factor\"}},\"getCurrentMaturity(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The current maturity\"}},\"getLatestAutoRollLog(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The auto-roll log\"}},\"getLendingCompoundFactor(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The lending compound factor\"}},\"getMaturityGenesisValue(bytes32,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_maturity\":\"The maturity\"},\"returns\":{\"_0\":\"The current total supply\"}},\"getTotalBorrowingSupply(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The total supply of borrowing\"}},\"getTotalLendingSupply(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The total supply of lending\"}},\"initialize(address)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController.\",\"params\":{\"_resolver\":\"The address of the Address Resolver contract\"}},\"initializeCurrencySetting(bytes32,uint8,uint256,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_compoundFactor\":\"Initial compound factor\",\"_decimals\":\"Compound factor decimals\",\"_maturity\":\"Initial maturity\"}},\"isInitialized(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The boolean if the currency is initialized or not\"}},\"requiredContracts()\":{\"details\":\"The contract name list is in `./libraries/Contracts.sol`.\"},\"transferFrom(bytes32,address,address,int256)\":{\"params\":{\"_amount\":\"Amount of funds to sent\",\"_ccy\":\"Currency name in bytes32\",\"_receiver\":\"Receiver's address\",\"_sender\":\"Sender's address\"}},\"updateGenesisValueWithFutureValue(bytes32,address,uint256,int256)\":{\"params\":{\"_basisMaturity\":\"The basis maturity\",\"_ccy\":\"Currency name in bytes32\",\"_fvAmount\":\"The amount in the future value\",\"_user\":\"User's address\"}},\"updateGenesisValueWithResidualAmount(bytes32,address,uint256)\":{\"details\":\"This function is used only in the case that the user is the last person who updates the genesis value at maturity, and called only one time per maturity.\",\"params\":{\"_basisMaturity\":\"The basis maturity\",\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"updateInitialCompoundFactor(bytes32,uint256)\":{\"details\":\"This function is allowed to be called only before the initial compound factor is finalized.\",\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_unitPrice\":\"The unit price used to calculate the compound factor\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateBalanceFluctuationByAutoRolls(bytes32,int256,uint256,uint256)\":{\"notice\":\"Calculates the fluctuation amount of genesis value caused by auto-rolls at a certain maturity\"},\"calculateFVFromFV(bytes32,uint256,uint256,int256)\":{\"notice\":\"Calculates the future value from the basis maturity to the destination maturity using the compound factor.\"},\"calculateFVFromGV(bytes32,uint256,int256)\":{\"notice\":\"Calculates the future value at the basis maturity from the genesis value using the compound factor.\"},\"calculateGVFromFV(bytes32,uint256,int256)\":{\"notice\":\"Calculates the genesis value from the future value at the basis maturity using the compound factor.\"},\"cleanUpBalance(bytes32,address,uint256)\":{\"notice\":\"Clean up balance of the user per maturity.\"},\"decimals(bytes32)\":{\"notice\":\"Gets if the decimals of the genesis value.\"},\"executeAutoRoll(bytes32,uint256,uint256,uint256,uint256)\":{\"notice\":\"Executes the auto-roll.\"},\"executeForcedReset(bytes32,address)\":{\"notice\":\"Forces a reset of the user's genesis value.\"},\"executeForcedReset(bytes32,uint256,address,int256)\":{\"notice\":\"Forces a reset of the user's genesis value.\"},\"getAutoRollLog(bytes32,uint256)\":{\"notice\":\"Gets the auto-roll log\"},\"getBalance(bytes32,address)\":{\"notice\":\"Gets the user balance.\"},\"getBalanceFluctuationByAutoRolls(bytes32,address,uint256)\":{\"notice\":\"Gets the fluctuation amount of genesis value caused by auto-rolls.\"},\"getBalanceInFutureValue(bytes32,address)\":{\"notice\":\"Gets the future value of the user balance.\"},\"getBorrowingCompoundFactor(bytes32)\":{\"notice\":\"Gets the borrowing compound factor\"},\"getCurrentMaturity(bytes32)\":{\"notice\":\"Gets the current maturity\"},\"getLatestAutoRollLog(bytes32)\":{\"notice\":\"Gets the latest auto-roll log\"},\"getLendingCompoundFactor(bytes32)\":{\"notice\":\"Gets the lending compound factor\"},\"getMaturityGenesisValue(bytes32,uint256)\":{\"notice\":\"Gets the current total supply per maturity\"},\"getTotalBorrowingSupply(bytes32)\":{\"notice\":\"Gets the total supply of borrowing\"},\"getTotalLendingSupply(bytes32)\":{\"notice\":\"Gets the total supply of lending\"},\"initialize(address)\":{\"notice\":\"Initializes the contract.\"},\"initializeCurrencySetting(bytes32,uint8,uint256,uint256)\":{\"notice\":\"Initializes the currency setting.\"},\"isInitialized(bytes32)\":{\"notice\":\"Gets if the currency is initialized.\"},\"requiredContracts()\":{\"notice\":\"Returns the contract names used in this contract.\"},\"transferFrom(bytes32,address,address,int256)\":{\"notice\":\"Transfers the genesis value from sender to receiver.\"},\"updateGenesisValueWithFutureValue(bytes32,address,uint256,int256)\":{\"notice\":\"Updates the user's balance of the genesis value with the input future value.\"},\"updateGenesisValueWithResidualAmount(bytes32,address,uint256)\":{\"notice\":\"Updates the user's balance of the genesis value without the input future value.\"},\"updateInitialCompoundFactor(bytes32,uint256)\":{\"notice\":\"Update the currency setting.\"}},\"notice\":\"Implements the management of the genesis value as an amount for Lending positions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/GenesisValueVault.sol\":\"GenesisValueVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dependencies/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Chainlink Contracts v0.4.0 (v0.8/interfaces/AggregatorV3Interface.sol)\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x4e6b3af251ee2ee848acb86147bb94d4a0845f65d2143545b7b6853297f81b82\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) ||\\n                (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(\\n            !_initializing && _initialized < version,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x47b358037bd02d2d68ae2f5685cf1f30af9d60de496258849b69a751a2ffdcde\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data\\n    ) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabb801935035554c7c588f7c1f296adfd23afd3e2a2a84705ba1a407f14d1de4\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(\\n            value >= type(int248).min && value <= type(int248).max,\\n            \\\"SafeCast: value doesn't fit in 248 bits\\\"\\n        );\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(\\n            value >= type(int240).min && value <= type(int240).max,\\n            \\\"SafeCast: value doesn't fit in 240 bits\\\"\\n        );\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(\\n            value >= type(int232).min && value <= type(int232).max,\\n            \\\"SafeCast: value doesn't fit in 232 bits\\\"\\n        );\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(\\n            value >= type(int224).min && value <= type(int224).max,\\n            \\\"SafeCast: value doesn't fit in 224 bits\\\"\\n        );\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(\\n            value >= type(int216).min && value <= type(int216).max,\\n            \\\"SafeCast: value doesn't fit in 216 bits\\\"\\n        );\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(\\n            value >= type(int208).min && value <= type(int208).max,\\n            \\\"SafeCast: value doesn't fit in 208 bits\\\"\\n        );\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(\\n            value >= type(int200).min && value <= type(int200).max,\\n            \\\"SafeCast: value doesn't fit in 200 bits\\\"\\n        );\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(\\n            value >= type(int192).min && value <= type(int192).max,\\n            \\\"SafeCast: value doesn't fit in 192 bits\\\"\\n        );\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(\\n            value >= type(int184).min && value <= type(int184).max,\\n            \\\"SafeCast: value doesn't fit in 184 bits\\\"\\n        );\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(\\n            value >= type(int176).min && value <= type(int176).max,\\n            \\\"SafeCast: value doesn't fit in 176 bits\\\"\\n        );\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(\\n            value >= type(int168).min && value <= type(int168).max,\\n            \\\"SafeCast: value doesn't fit in 168 bits\\\"\\n        );\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(\\n            value >= type(int160).min && value <= type(int160).max,\\n            \\\"SafeCast: value doesn't fit in 160 bits\\\"\\n        );\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(\\n            value >= type(int152).min && value <= type(int152).max,\\n            \\\"SafeCast: value doesn't fit in 152 bits\\\"\\n        );\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(\\n            value >= type(int144).min && value <= type(int144).max,\\n            \\\"SafeCast: value doesn't fit in 144 bits\\\"\\n        );\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(\\n            value >= type(int136).min && value <= type(int136).max,\\n            \\\"SafeCast: value doesn't fit in 136 bits\\\"\\n        );\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(\\n            value >= type(int128).min && value <= type(int128).max,\\n            \\\"SafeCast: value doesn't fit in 128 bits\\\"\\n        );\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(\\n            value >= type(int120).min && value <= type(int120).max,\\n            \\\"SafeCast: value doesn't fit in 120 bits\\\"\\n        );\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(\\n            value >= type(int112).min && value <= type(int112).max,\\n            \\\"SafeCast: value doesn't fit in 112 bits\\\"\\n        );\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(\\n            value >= type(int104).min && value <= type(int104).max,\\n            \\\"SafeCast: value doesn't fit in 104 bits\\\"\\n        );\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(\\n            value >= type(int96).min && value <= type(int96).max,\\n            \\\"SafeCast: value doesn't fit in 96 bits\\\"\\n        );\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(\\n            value >= type(int88).min && value <= type(int88).max,\\n            \\\"SafeCast: value doesn't fit in 88 bits\\\"\\n        );\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(\\n            value >= type(int80).min && value <= type(int80).max,\\n            \\\"SafeCast: value doesn't fit in 80 bits\\\"\\n        );\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(\\n            value >= type(int72).min && value <= type(int72).max,\\n            \\\"SafeCast: value doesn't fit in 72 bits\\\"\\n        );\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(\\n            value >= type(int64).min && value <= type(int64).max,\\n            \\\"SafeCast: value doesn't fit in 64 bits\\\"\\n        );\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(\\n            value >= type(int56).min && value <= type(int56).max,\\n            \\\"SafeCast: value doesn't fit in 56 bits\\\"\\n        );\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(\\n            value >= type(int48).min && value <= type(int48).max,\\n            \\\"SafeCast: value doesn't fit in 48 bits\\\"\\n        );\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(\\n            value >= type(int40).min && value <= type(int40).max,\\n            \\\"SafeCast: value doesn't fit in 40 bits\\\"\\n        );\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(\\n            value >= type(int32).min && value <= type(int32).max,\\n            \\\"SafeCast: value doesn't fit in 32 bits\\\"\\n        );\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(\\n            value >= type(int24).min && value <= type(int24).max,\\n            \\\"SafeCast: value doesn't fit in 24 bits\\\"\\n        );\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(\\n            value >= type(int16).min && value <= type(int16).max,\\n            \\\"SafeCast: value doesn't fit in 16 bits\\\"\\n        );\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(\\n            value >= type(int8).min && value <= type(int8).max,\\n            \\\"SafeCast: value doesn't fit in 8 bits\\\"\\n        );\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xb26db2e7d4c8d73ceda86a482ab8b3302b6a5f222f4a333361ca9b57a209fc0c\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/protocol/GenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// dependencies\\nimport {Math} from \\\"../dependencies/openzeppelin/utils/math/Math.sol\\\";\\nimport {SafeCast} from \\\"../dependencies/openzeppelin/utils/math/SafeCast.sol\\\";\\n// interfaces\\nimport {IGenesisValueVault} from \\\"./interfaces/IGenesisValueVault.sol\\\";\\n// libraries\\nimport {Contracts} from \\\"./libraries/Contracts.sol\\\";\\nimport {Constants} from \\\"./libraries/Constants.sol\\\";\\nimport {RoundingUint256} from \\\"./libraries/math/RoundingUint256.sol\\\";\\nimport {RoundingInt256} from \\\"./libraries/math/RoundingInt256.sol\\\";\\n// mixins\\nimport {MixinAddressResolver} from \\\"./mixins/MixinAddressResolver.sol\\\";\\n// utils\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\n// storages\\nimport {GenesisValueVaultStorage as Storage, AutoRollLog} from \\\"./storages/GenesisValueVaultStorage.sol\\\";\\n\\n/**\\n * @notice Implements the management of the genesis value as an amount for Lending positions.\\n */\\ncontract GenesisValueVault is IGenesisValueVault, MixinAddressResolver, Proxyable {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using RoundingUint256 for uint256;\\n    using RoundingInt256 for int256;\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function initialize(address _resolver) public initializer onlyProxy {\\n        registerAddressResolver(_resolver);\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](2);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n        contracts[1] = Contracts.RESERVE_FUND;\\n    }\\n\\n    /**\\n     * @notice Gets if the currency is initialized.\\n     * @param _ccy Currency name in bytes32\\n     * @return The boolean if the currency is initialized or not\\n     */\\n    function isInitialized(bytes32 _ccy) public view override returns (bool) {\\n        return Storage.slot().isInitialized[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets if the decimals of the genesis value.\\n     * @param _ccy Currency name in bytes32\\n     * @return The decimals of the genesis value.\\n     */\\n    function decimals(bytes32 _ccy) public view override returns (uint8) {\\n        return Storage.slot().decimals[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the total supply of lending\\n     * @param _ccy Currency name in bytes32\\n     * @return The total supply of lending\\n     */\\n    function getTotalLendingSupply(bytes32 _ccy) external view override returns (uint256) {\\n        return Storage.slot().totalLendingSupplies[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the total supply of borrowing\\n     * @param _ccy Currency name in bytes32\\n     * @return The total supply of borrowing\\n     */\\n    function getTotalBorrowingSupply(bytes32 _ccy) external view override returns (uint256) {\\n        return Storage.slot().totalBorrowingSupplies[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the user balance.\\n     * @param _ccy Currency name in bytes32\\n     * @param _user User's address\\n     * @return The user balance\\n     */\\n    function getBalance(bytes32 _ccy, address _user) public view override returns (int256) {\\n        (int256 balance, int256 fluctuation) = _getActualBalance(\\n            _ccy,\\n            _user,\\n            getCurrentMaturity(_ccy)\\n        );\\n        return balance + fluctuation;\\n    }\\n\\n    /**\\n     * @notice Gets the future value of the user balance.\\n     * @param _ccy Currency name in bytes32\\n     * @param _user User's address\\n     * @return The future value of the user balance\\n     */\\n    function getBalanceInFutureValue(\\n        bytes32 _ccy,\\n        address _user\\n    ) external view override returns (int256) {\\n        // NOTE: The formula is:\\n        // futureValue = genesisValue * currentCompoundFactor.\\n        return\\n            (getBalance(_ccy, _user) * getLendingCompoundFactor(_ccy).toInt256()).div(\\n                (10 ** decimals(_ccy)).toInt256()\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets the current total supply per maturity\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity\\n     * @return The current total supply\\n     */\\n    function getMaturityGenesisValue(\\n        bytes32 _ccy,\\n        uint256 _maturity\\n    ) external view override returns (int256) {\\n        return Storage.slot().maturityBalances[_ccy][_maturity];\\n    }\\n\\n    /**\\n     * @notice Gets the current maturity\\n     * @param _ccy Currency name in bytes32\\n     * @return The current maturity\\n     */\\n    function getCurrentMaturity(bytes32 _ccy) public view override returns (uint256) {\\n        return Storage.slot().currentMaturity[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the lending compound factor\\n     * @param _ccy Currency name in bytes32\\n     * @return The lending compound factor\\n     */\\n    function getLendingCompoundFactor(bytes32 _ccy) public view override returns (uint256) {\\n        return Storage.slot().lendingCompoundFactors[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the borrowing compound factor\\n     * @param _ccy Currency name in bytes32\\n     * @return The lending compound factor\\n     */\\n    function getBorrowingCompoundFactor(bytes32 _ccy) public view override returns (uint256) {\\n        return Storage.slot().borrowingCompoundFactors[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the auto-roll log\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity\\n     * @return The auto-roll log\\n     */\\n    function getAutoRollLog(\\n        bytes32 _ccy,\\n        uint256 _maturity\\n    ) external view override returns (AutoRollLog memory) {\\n        return Storage.slot().autoRollLogs[_ccy][_maturity];\\n    }\\n\\n    /**\\n     * @notice Gets the latest auto-roll log\\n     * @param _ccy Currency name in bytes32\\n     * @return The auto-roll log\\n     */\\n    function getLatestAutoRollLog(\\n        bytes32 _ccy\\n    ) external view override returns (AutoRollLog memory) {\\n        return Storage.slot().autoRollLogs[_ccy][Storage.slot().currentMaturity[_ccy]];\\n    }\\n\\n    /**\\n     * @notice Calculates the future value from the basis maturity to the destination maturity using the compound factor.\\n     * @param _ccy Currency name in bytes32\\n     * @return The future value at the destination maturity\\n     */\\n    function calculateFVFromFV(\\n        bytes32 _ccy,\\n        uint256 _basisMaturity,\\n        uint256 _destinationMaturity,\\n        int256 _futureValue\\n    ) external view override returns (int256) {\\n        if (_futureValue == 0) {\\n            return 0;\\n        } else if (_basisMaturity == _destinationMaturity) {\\n            return _futureValue;\\n        } else {\\n            // NOTE: These calculation steps \\\"FV -> GV -> FV\\\" are needed to match the actual conversion step.\\n            // Otherwise, Solidity's truncation specification creates a difference in the calculated values.\\n            // The formula is:\\n            // genesisValue = featureValueInMaturity / compoundFactorInMaturity.\\n            // currentFeatureValue = genesisValue * currentCompoundFactor\\n            int256 genesisValue = calculateGVFromFV(_ccy, _basisMaturity, _futureValue);\\n            return calculateFVFromGV(_ccy, _destinationMaturity, genesisValue);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the genesis value from the future value at the basis maturity using the compound factor.\\n     * @param _ccy Currency name in bytes32\\n     * @return The genesis value\\n     */\\n    function calculateGVFromFV(\\n        bytes32 _ccy,\\n        uint256 _basisMaturity,\\n        int256 _futureValue\\n    ) public view override returns (int256) {\\n        uint256 compoundFactor = _basisMaturity == 0 ||\\n            _basisMaturity == Storage.slot().currentMaturity[_ccy]\\n            ? getLendingCompoundFactor(_ccy)\\n            : Storage.slot().autoRollLogs[_ccy][_basisMaturity].lendingCompoundFactor;\\n\\n        if (compoundFactor == 0) revert NoCompoundFactorExists({maturity: _basisMaturity});\\n\\n        // NOTE: The formula is: genesisValue = featureValue / compoundFactor.\\n        bool isPlus = _futureValue > 0;\\n        uint256 absFv = (isPlus ? _futureValue : -_futureValue).toUint256();\\n        uint256 absGv = (absFv * 10 ** decimals(_ccy)).div(compoundFactor);\\n        return isPlus ? absGv.toInt256() : -(absGv.toInt256());\\n    }\\n\\n    /**\\n     * @notice Calculates the future value at the basis maturity from the genesis value using the compound factor.\\n     * @param _ccy Currency name in bytes32\\n     * @return The future value\\n     */\\n    function calculateFVFromGV(\\n        bytes32 _ccy,\\n        uint256 _basisMaturity,\\n        int256 _genesisValue\\n    ) public view override returns (int256) {\\n        uint256 compoundFactor = _basisMaturity == 0 ||\\n            _basisMaturity == Storage.slot().currentMaturity[_ccy]\\n            ? getLendingCompoundFactor(_ccy)\\n            : Storage.slot().autoRollLogs[_ccy][_basisMaturity].lendingCompoundFactor;\\n\\n        if (compoundFactor == 0) revert NoCompoundFactorExists({maturity: _basisMaturity});\\n\\n        bool isPlus = _genesisValue > 0;\\n        uint256 absGv = (isPlus ? _genesisValue : -_genesisValue).toUint256();\\n        uint256 absFv = (absGv * compoundFactor).div(10 ** decimals(_ccy));\\n\\n        return isPlus ? absFv.toInt256() : -(absFv.toInt256());\\n    }\\n\\n    /**\\n     * @notice Initializes the currency setting.\\n     * @param _ccy Currency name in bytes32\\n     * @param _decimals Compound factor decimals\\n     * @param _compoundFactor Initial compound factor\\n     * @param _maturity Initial maturity\\n     */\\n    function initializeCurrencySetting(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        uint256 _compoundFactor,\\n        uint256 _maturity\\n    ) external override onlyLendingMarketController {\\n        if (_compoundFactor == 0) revert CompoundFactorIsZero();\\n        if (isInitialized(_ccy)) revert CurrencyAlreadyInitialized();\\n\\n        Storage.slot().isInitialized[_ccy] = true;\\n        Storage.slot().decimals[_ccy] = _decimals;\\n        Storage.slot().initialCompoundFactors[_ccy] = _compoundFactor;\\n        Storage.slot().lendingCompoundFactors[_ccy] = _compoundFactor;\\n        Storage.slot().borrowingCompoundFactors[_ccy] = _compoundFactor;\\n        Storage.slot().currentMaturity[_ccy] = _maturity;\\n\\n        // Update autoRollLogs by initial compound factor.\\n        // These values are updated by the first Itayose call of the nearest maturity market\\n        // if it is executed.\\n        Storage.slot().autoRollLogs[_ccy][_maturity] = AutoRollLog({\\n            unitPrice: Constants.PRICE_DIGIT,\\n            lendingCompoundFactor: _compoundFactor,\\n            borrowingCompoundFactor: _compoundFactor,\\n            prev: 0,\\n            next: 0\\n        });\\n    }\\n\\n    /**\\n     * @notice Update the currency setting.\\n     * @dev This function is allowed to be called only before the initial compound factor is finalized.\\n     * @param _ccy Currency name in bytes32\\n     * @param _unitPrice The unit price used to calculate the compound factor\\n     */\\n    function updateInitialCompoundFactor(\\n        bytes32 _ccy,\\n        uint256 _unitPrice\\n    ) external override onlyLendingMarketController {\\n        uint256 maturity = Storage.slot().currentMaturity[_ccy];\\n\\n        if (Storage.slot().autoRollLogs[_ccy][maturity].prev != 0) {\\n            revert InitialCompoundFactorAlreadyFinalized();\\n        }\\n\\n        _updateCompoundFactor(_ccy, _unitPrice, 0, 0);\\n        Storage.slot().autoRollLogs[_ccy][maturity] = AutoRollLog({\\n            unitPrice: _unitPrice,\\n            lendingCompoundFactor: Storage.slot().lendingCompoundFactors[_ccy],\\n            borrowingCompoundFactor: Storage.slot().borrowingCompoundFactors[_ccy],\\n            prev: 0,\\n            next: 0\\n        });\\n    }\\n\\n    /**\\n     * @notice Executes the auto-roll.\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity Current maturity\\n     * @param _nextMaturity Next maturity to be rolled\\n     * @param _unitPrice Unit price of auto-roll\\n     * @param _orderFeeRate Order fee rate used to calculate the auto-roll fee\\n     */\\n    function executeAutoRoll(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _nextMaturity,\\n        uint256 _unitPrice,\\n        uint256 _orderFeeRate\\n    ) external override onlyLendingMarketController {\\n        if (_unitPrice == 0) revert UnitPriceIsZero();\\n        if (_nextMaturity <= _maturity) revert InvalidMaturity();\\n\\n        _updateCompoundFactor(_ccy, _unitPrice, _orderFeeRate, _nextMaturity - _maturity);\\n        _updateAutoRollLogs(_ccy, _maturity, _nextMaturity, _unitPrice);\\n\\n        emit AutoRollExecuted(\\n            _ccy,\\n            Storage.slot().lendingCompoundFactors[_ccy],\\n            Storage.slot().borrowingCompoundFactors[_ccy],\\n            _unitPrice,\\n            _nextMaturity,\\n            _maturity\\n        );\\n    }\\n\\n    function _updateAutoRollLogs(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _nextMaturity,\\n        uint256 _unitPrice\\n    ) private {\\n        AutoRollLog memory currentLog = Storage.slot().autoRollLogs[_ccy][_maturity];\\n        AutoRollLog memory nextLog = Storage.slot().autoRollLogs[_ccy][_nextMaturity];\\n\\n        if (\\n            currentLog.next != 0 ||\\n            currentLog.lendingCompoundFactor == 0 ||\\n            currentLog.borrowingCompoundFactor == 0 ||\\n            nextLog.lendingCompoundFactor != 0\\n        ) {\\n            revert AutoRollLogAlreadyUpdated({\\n                currentMaturity: _maturity,\\n                nextMaturity: _nextMaturity\\n            });\\n        }\\n\\n        Storage.slot().currentMaturity[_ccy] = _nextMaturity;\\n        Storage.slot().autoRollLogs[_ccy][_maturity].next = _nextMaturity;\\n        Storage.slot().autoRollLogs[_ccy][_nextMaturity] = AutoRollLog({\\n            unitPrice: _unitPrice,\\n            lendingCompoundFactor: Storage.slot().lendingCompoundFactors[_ccy],\\n            borrowingCompoundFactor: Storage.slot().borrowingCompoundFactors[_ccy],\\n            prev: _maturity,\\n            next: 0\\n        });\\n    }\\n\\n    /**\\n     * @notice Updates the user's balance of the genesis value with the input future value.\\n     * @param _ccy Currency name in bytes32\\n     * @param _user User's address\\n     * @param _basisMaturity The basis maturity\\n     * @param _fvAmount The amount in the future value\\n     */\\n    function updateGenesisValueWithFutureValue(\\n        bytes32 _ccy,\\n        address _user,\\n        uint256 _basisMaturity,\\n        int256 _fvAmount\\n    ) external override onlyLendingMarketController {\\n        int256 amount = calculateGVFromFV(_ccy, _basisMaturity, _fvAmount);\\n\\n        _updateBalance(_ccy, _user, _basisMaturity, amount);\\n    }\\n\\n    /**\\n     * @notice Updates the user's balance of the genesis value without the input future value.\\n     * @dev This function is used only in the case that the user is the last person who updates the genesis value at maturity,\\n     * and called only one time per maturity.\\n     * @param _ccy Currency name in bytes32\\n     * @param _user User's address\\n     * @param _basisMaturity The basis maturity\\n     */\\n    function updateGenesisValueWithResidualAmount(\\n        bytes32 _ccy,\\n        address _user,\\n        uint256 _basisMaturity\\n    ) external override onlyLendingMarketController {\\n        int256 residualGVAmount = Storage.slot().maturityBalances[_ccy][_basisMaturity];\\n\\n        _updateBalance(_ccy, _user, _basisMaturity, -residualGVAmount);\\n\\n        if (Storage.slot().maturityBalances[_ccy][_basisMaturity] != 0) {\\n            revert ResidualAmountIsNotZero();\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers the genesis value from sender to receiver.\\n     * @param _ccy Currency name in bytes32\\n     * @param _sender Sender's address\\n     * @param _receiver Receiver's address\\n     * @param _amount Amount of funds to sent\\n     */\\n    function transferFrom(\\n        bytes32 _ccy,\\n        address _sender,\\n        address _receiver,\\n        int256 _amount\\n    ) external override onlyLendingMarketController {\\n        Storage.slot().balances[_ccy][_sender] -= _amount;\\n        Storage.slot().balances[_ccy][_receiver] += _amount;\\n\\n        emit Transfer(_ccy, _sender, _receiver, _amount);\\n    }\\n\\n    /**\\n     * @notice Clean up balance of the user per maturity.\\n     * @dev The genesis value of borrowing fluctuates when it is auto-rolled, but it is not updated in real-time.\\n     * This function removes the fluctuation amount calculated by lazy evaluation to reduce gas costs.\\n     * @param _ccy Currency name in bytes32\\n     * @param _user User's address\\n     * @param _maturity The maturity\\n     */\\n    function cleanUpBalance(\\n        bytes32 _ccy,\\n        address _user,\\n        uint256 _maturity\\n    ) external override onlyLendingMarketController {\\n        uint256 maturity = _maturity == 0 ? getCurrentMaturity(_ccy) : _maturity;\\n        int256 fluctuation = _getBalanceFluctuationByAutoRolls(_ccy, _user, maturity);\\n\\n        if (fluctuation < 0) {\\n            address reserveFundAddr = address(reserveFund());\\n\\n            _updateTotalSupply(_ccy, fluctuation, Storage.slot().balances[_ccy][_user]);\\n            _updateTotalSupply(_ccy, -fluctuation, Storage.slot().balances[_ccy][reserveFundAddr]);\\n\\n            Storage.slot().userMaturities[_ccy][_user] = maturity;\\n            Storage.slot().balances[_ccy][_user] += fluctuation;\\n            Storage.slot().balances[_ccy][reserveFundAddr] += -fluctuation;\\n\\n            emit Transfer(_ccy, _user, reserveFundAddr, -fluctuation);\\n        }\\n    }\\n\\n    /**\\n     * @notice Forces a reset of the user's genesis value.\\n     * @param _ccy Currency name in bytes32\\n     * @param _user User's address\\n     */\\n    function executeForcedReset(\\n        bytes32 _ccy,\\n        address _user\\n    ) external override onlyLendingMarketController {\\n        int256 removedAmount = Storage.slot().balances[_ccy][_user];\\n\\n        if (removedAmount != 0) {\\n            Storage.slot().balances[_ccy][_user] = 0;\\n            emit Transfer(_ccy, _user, address(0), removedAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Forces a reset of the user's genesis value.\\n     * @param _ccy Currency name in bytes32\\n     * @param _user User's address\\n     * @param _amountInFV The amount in the future value to reset\\n     */\\n    function executeForcedReset(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        int256 _amountInFV\\n    )\\n        external\\n        override\\n        onlyLendingMarketController\\n        returns (int256 removedAmountInFV, int256 balance)\\n    {\\n        int256 _amount = calculateGVFromFV(_ccy, _maturity, _amountInFV);\\n        int256 removedAmount = Storage.slot().balances[_ccy][_user];\\n\\n        if ((_amount > 0 && removedAmount < 0) || (_amount < 0 && removedAmount > 0)) {\\n            revert InvalidAmount();\\n        }\\n\\n        if ((_amount > 0 && _amount < removedAmount) || (_amount < 0 && _amount > removedAmount)) {\\n            removedAmount = _amount;\\n        }\\n\\n        if (removedAmount != 0) {\\n            Storage.slot().balances[_ccy][_user] -= removedAmount;\\n            emit Transfer(_ccy, _user, address(0), removedAmount);\\n        }\\n\\n        removedAmountInFV = calculateFVFromGV(_ccy, _maturity, removedAmount);\\n        balance = Storage.slot().balances[_ccy][_user];\\n    }\\n\\n    /**\\n     * @notice Gets the fluctuation amount of genesis value caused by auto-rolls.\\n     * @param _ccy Currency name in bytes32\\n     * @param _user User's address\\n     * @param _maturity The maturity\\n     */\\n    function getBalanceFluctuationByAutoRolls(\\n        bytes32 _ccy,\\n        address _user,\\n        uint256 _maturity\\n    ) external view override returns (int256 fluctuation) {\\n        uint256 maturity = _maturity == 0 ? getCurrentMaturity(_ccy) : _maturity;\\n        fluctuation = _getBalanceFluctuationByAutoRolls(_ccy, _user, maturity);\\n    }\\n\\n    /**\\n     * @notice Calculates the fluctuation amount of genesis value caused by auto-rolls at a certain maturity\\n     * @param _ccy Currency name in bytes32\\n     * @param _balance User's balance\\n     * @param _fromMaturity The maturity at start\\n     * @param _toMaturity The maturity at end\\n     */\\n    function calculateBalanceFluctuationByAutoRolls(\\n        bytes32 _ccy,\\n        int256 _balance,\\n        uint256 _fromMaturity,\\n        uint256 _toMaturity\\n    ) external view override returns (int256 fluctuation) {\\n        uint256 toMaturity = _toMaturity == 0 ? getCurrentMaturity(_ccy) : _toMaturity;\\n        fluctuation = _calculateBalanceFluctuationByAutoRolls(\\n            _ccy,\\n            _balance,\\n            _fromMaturity,\\n            toMaturity\\n        );\\n    }\\n\\n    function _updateBalance(\\n        bytes32 _ccy,\\n        address _user,\\n        uint256 _maturity,\\n        int256 _amount\\n    ) private {\\n        (int256 balance, int256 fluctuation) = _getActualBalance(_ccy, _user, _maturity);\\n        int256 totalAmount = _amount;\\n\\n        // Note: `fluctuation` is always 0 or less because the genesis value fluctuates\\n        // only when it is negative.\\n        // Here, only the opposite amount of the fluctuation is added to the reserve fund as a fee.\\n        if (fluctuation < 0) {\\n            totalAmount += fluctuation;\\n            address reserveFundAddr = address(reserveFund());\\n\\n            _updateTotalSupply(_ccy, -fluctuation, Storage.slot().balances[_ccy][reserveFundAddr]);\\n\\n            Storage.slot().balances[_ccy][reserveFundAddr] += -fluctuation;\\n\\n            emit Transfer(_ccy, _user, reserveFundAddr, -fluctuation);\\n        }\\n\\n        _updateTotalSupply(_ccy, totalAmount, balance);\\n\\n        Storage.slot().userMaturities[_ccy][_user] = _maturity;\\n        Storage.slot().balances[_ccy][_user] += totalAmount;\\n        Storage.slot().maturityBalances[_ccy][_maturity] += _amount;\\n\\n        emit Transfer(_ccy, address(0), _user, _amount);\\n    }\\n\\n    function _updateTotalSupply(bytes32 _ccy, int256 _amount, int256 _balance) private {\\n        if (_amount >= 0) {\\n            uint256 absAmount = _amount.toUint256();\\n            if (_balance >= 0) {\\n                Storage.slot().totalLendingSupplies[_ccy] += absAmount;\\n            } else {\\n                int256 diff = _amount + _balance;\\n                if (diff >= 0) {\\n                    Storage.slot().totalLendingSupplies[_ccy] += diff.toUint256();\\n                    Storage.slot().totalBorrowingSupplies[_ccy] -= (-_balance).toUint256();\\n                } else {\\n                    Storage.slot().totalBorrowingSupplies[_ccy] -= absAmount;\\n                }\\n            }\\n        } else {\\n            uint256 absAmount = (-_amount).toUint256();\\n            if (_balance <= 0) {\\n                Storage.slot().totalBorrowingSupplies[_ccy] += absAmount;\\n            } else {\\n                int256 diff = _amount + _balance;\\n                if (diff <= 0) {\\n                    Storage.slot().totalBorrowingSupplies[_ccy] += (-diff).toUint256();\\n                    Storage.slot().totalLendingSupplies[_ccy] -= _balance.toUint256();\\n                } else {\\n                    Storage.slot().totalLendingSupplies[_ccy] -= absAmount;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getActualBalance(\\n        bytes32 _ccy,\\n        address _user,\\n        uint256 _maturity\\n    ) private view returns (int256 balance, int256 fluctuation) {\\n        fluctuation = _getBalanceFluctuationByAutoRolls(_ccy, _user, _maturity);\\n        balance = Storage.slot().balances[_ccy][_user];\\n    }\\n\\n    /**\\n     * @notice Calculates the fluctuation amount of genesis value caused by auto-rolls.\\n     * @dev The genesis value means the present value of the lending position at the time\\n     * when the initial market is opened, so the genesis value amount will fluctuate\\n     * by the fee rate due to auto-rolls if it is negative (equals to the borrowing position).\\n     * @param _ccy Currency for pausing all lending markets\\n     * @param _user User's address\\n     * @return fluctuation The fluctuated genesis value amount\\n     */\\n    function _getBalanceFluctuationByAutoRolls(\\n        bytes32 _ccy,\\n        address _user,\\n        uint256 _maturity\\n    ) private view returns (int256 fluctuation) {\\n        int256 balance = Storage.slot().balances[_ccy][_user];\\n        uint256 userMaturity = Storage.slot().userMaturities[_ccy][_user];\\n\\n        fluctuation = _calculateBalanceFluctuationByAutoRolls(\\n            _ccy,\\n            balance,\\n            userMaturity,\\n            _maturity\\n        );\\n    }\\n\\n    function _calculateBalanceFluctuationByAutoRolls(\\n        bytes32 _ccy,\\n        int256 _balance,\\n        uint256 _fromMaturity,\\n        uint256 _toMaturity\\n    ) private view returns (int256 fluctuation) {\\n        if (_balance >= 0 || _toMaturity <= _fromMaturity || _fromMaturity == 0) {\\n            return 0;\\n        }\\n\\n        AutoRollLog memory autoRollLog = Storage.slot().autoRollLogs[_ccy][_fromMaturity];\\n\\n        uint256 destinationBorrowingCF;\\n        uint256 destinationLendingCF;\\n        uint256 currentMaturity = getCurrentMaturity(_ccy);\\n\\n        if (_toMaturity > currentMaturity) {\\n            return 0;\\n        } else if (_toMaturity == currentMaturity) {\\n            destinationBorrowingCF = Storage.slot().borrowingCompoundFactors[_ccy];\\n            destinationLendingCF = Storage.slot().lendingCompoundFactors[_ccy];\\n        } else {\\n            AutoRollLog memory destinationAutoRollLog = Storage.slot().autoRollLogs[_ccy][\\n                _toMaturity\\n            ];\\n            destinationBorrowingCF = destinationAutoRollLog.borrowingCompoundFactor;\\n            destinationLendingCF = destinationAutoRollLog.lendingCompoundFactor;\\n        }\\n\\n        // Note: The formula is:\\n        // fluctuation = currentBalance * ((currentBCF / userBCF) * (userLCF / currentLCF) - 1)\\n        fluctuation =\\n            -Math\\n                .mulDiv(\\n                    Math.mulDiv(\\n                        (-_balance).toUint256(),\\n                        destinationBorrowingCF,\\n                        autoRollLog.borrowingCompoundFactor\\n                    ),\\n                    autoRollLog.lendingCompoundFactor,\\n                    destinationLendingCF\\n                )\\n                .toInt256() -\\n            _balance;\\n    }\\n\\n    function _updateCompoundFactor(\\n        bytes32 _ccy,\\n        uint256 _unitPrice,\\n        uint256 _orderFeeRate,\\n        uint256 _duration\\n    ) private {\\n        if (_orderFeeRate > Constants.PCT_DIGIT) revert InvalidOrderFeeRate();\\n\\n        // Save actual compound factor here due to calculating the genesis value from future value.\\n        // NOTE: The formula is:\\n        // autoRollRate = 1 / unitPrice\\n        // rollFeeRate = orderFeeRate * (duration / SECONDS_IN_YEAR)\\n        // newLendingCompoundFactor = currentLendingCompoundFactor * (autoRollRate - rollFeeRate)\\n        // newBorrowingCompoundFactor = currentBorrowingCompoundFactor * (autoRollRate + rollFeeRate)\\n        uint256 denominator = (Constants.PCT_DIGIT * Constants.SECONDS_IN_YEAR * _unitPrice);\\n\\n        Storage.slot().lendingCompoundFactors[_ccy] = (Storage.slot().lendingCompoundFactors[_ccy] *\\n            ((Constants.PRICE_DIGIT * Constants.PCT_DIGIT * Constants.SECONDS_IN_YEAR) -\\n                (_orderFeeRate * _duration * _unitPrice))).div(denominator);\\n\\n        Storage.slot().borrowingCompoundFactors[_ccy] = (Storage.slot().borrowingCompoundFactors[\\n            _ccy\\n        ] *\\n            ((Constants.PRICE_DIGIT * Constants.PCT_DIGIT * Constants.SECONDS_IN_YEAR) +\\n                (_orderFeeRate * _duration * _unitPrice))).div(denominator);\\n    }\\n}\\n\",\"keccak256\":\"0xf9ce8ecf0be8bc6797a52f2e1a5f9e81f7fa531ee07baaf97cdeba738424f762\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IAddressResolver {\\n    error UnmatchedInputs();\\n\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n\\n    function getNames() external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0x902589cadb08c09a44c5cdbe7ed8ba57a93f7e2700681177ef57c47c40e2e161\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IBeaconProxyController {\\n    error NoBeaconProxyContract();\\n    error InvalidProxyContract();\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function deployFutureValueVault() external returns (address futureValueVault);\\n\\n    function deployLendingMarket(\\n        bytes32 ccy,\\n        uint256 orderFeeRate,\\n        uint256 cbLimitRange\\n    ) external returns (address market);\\n}\\n\",\"keccak256\":\"0x2db0a0648146028f60c149ca03dd4a523a125ce59c40e84974069adc241f5a49\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {PriceFeed} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    error InvalidCurrency();\\n    error InvalidHaircut();\\n    error InvalidPriceFeed();\\n    error InvalidDecimals(address priceFeed, uint8 decimals);\\n    error InvalidPriceFeedInputs();\\n    error StalePriceFeed(\\n        address priceFeed,\\n        uint256 heartbeat,\\n        uint256 updatedAt,\\n        uint256 blockTimestamp\\n    );\\n\\n    event CurrencyAdded(bytes32 indexed ccy, uint256 haircut);\\n    event CurrencyRemoved(bytes32 indexed ccy);\\n\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n\\n    event PriceFeedUpdated(bytes32 ccy, uint256 decimals, address[] indexed priceFeeds);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256 _amount\\n    ) external view returns (uint256 amount);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256[] calldata _amounts\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function convertToBaseCurrency(\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external view returns (uint256 amount);\\n\\n    function convertToBaseCurrency(\\n        bytes32 _ccy,\\n        int256 _amount\\n    ) external view returns (int256 amount);\\n\\n    function convertToBaseCurrency(\\n        bytes32 _ccy,\\n        uint256[] calldata _amounts\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function convertFromBaseCurrency(\\n        bytes32 _ccy,\\n        uint256 _amountETH\\n    ) external view returns (uint256 amount);\\n\\n    function convertFromBaseCurrency(\\n        bytes32 _ccy,\\n        uint256[] calldata _amounts\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getDecimals(bytes32) external view returns (uint8);\\n\\n    function getCurrencies() external view returns (bytes32[] memory);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getPriceFeed(bytes32 _ccy) external view returns (PriceFeed memory);\\n\\n    function getLastPrice(bytes32 _ccy) external view returns (int256 price);\\n\\n    function getAggregatedLastPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function currencyExists(bytes32 _ccy) external view returns (bool);\\n\\n    function updatePriceFeed(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        address[] calldata _priceFeeds,\\n        uint256[] calldata _heartbeats\\n    ) external;\\n\\n    function addCurrency(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        uint256 _haircut,\\n        address[] calldata _priceFeeds,\\n        uint256[] calldata _heartbeats\\n    ) external;\\n\\n    function updateHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function removeCurrency(bytes32 _ccy) external;\\n}\\n\",\"keccak256\":\"0x2d1e477a53ca03307d2f2ec206028963e99ff4dcf1e719e3b59845f6acb3ee93\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {AutoRollLog} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    error NoCompoundFactorExists(uint256 maturity);\\n    error CompoundFactorIsZero();\\n    error ResidualAmountIsNotZero();\\n    error UnitPriceIsZero();\\n    error InvalidMaturity();\\n    error InvalidAmount();\\n    error InvalidOrderFeeRate();\\n    error CurrencyAlreadyInitialized();\\n    error InitialCompoundFactorAlreadyFinalized();\\n    error AutoRollLogAlreadyUpdated(uint256 currentMaturity, uint256 nextMaturity);\\n\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\\n    event AutoRollExecuted(\\n        bytes32 indexed ccy,\\n        uint256 lendingCompoundFactor,\\n        uint256 borrowingCompoundFactor,\\n        uint256 unitPrice,\\n        uint256 currentMaturity,\\n        uint256 previousMaturity\\n    );\\n\\n    function isInitialized(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getBalance(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getBalanceInFutureValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getMaturityGenesisValue(bytes32 ccy, uint256 maturity) external view returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getAutoRollLog(\\n        bytes32 ccy,\\n        uint256 maturity\\n    ) external view returns (AutoRollLog memory);\\n\\n    function getLatestAutoRollLog(bytes32 ccy) external view returns (AutoRollLog memory);\\n\\n    function calculateFVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        uint256 destinationMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function getBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function calculateBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        int256 balance,\\n        uint256 fromMaturity,\\n        uint256 toMaturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function initializeCurrencySetting(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor,\\n        uint256 maturity\\n    ) external;\\n\\n    function updateInitialCompoundFactor(bytes32 ccy, uint256 unitPrice) external;\\n\\n    function executeAutoRoll(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice,\\n        uint256 orderFeeRate\\n    ) external;\\n\\n    function updateGenesisValueWithFutureValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 fvAmount\\n    ) external;\\n\\n    function updateGenesisValueWithResidualAmount(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity\\n    ) external;\\n\\n    function transferFrom(bytes32 ccy, address sender, address receiver, int256 amount) external;\\n\\n    function cleanUpBalance(bytes32 ccy, address user, uint256 maturity) external;\\n\\n    function executeForcedReset(bytes32 _ccy, address _user) external;\\n\\n    function executeForcedReset(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        int256 _amountInFV\\n    ) external returns (int256 removedAmount, int256 balance);\\n}\\n\",\"keccak256\":\"0x2758fda57de5d16be3c2d6a485d75bc4a956ae0b530409f8aad73bc5f09d364a\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {TerminationCurrencyCache} from \\\"../storages/LendingMarketControllerStorage.sol\\\";\\n\\ninterface ILendingMarketController {\\n    error InvalidMaturity();\\n    error InvalidCurrency();\\n    error AlreadyTerminated();\\n    error NotTerminated();\\n    error AlreadyInitialized();\\n\\n    struct AdditionalFunds {\\n        bytes32 ccy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 lentAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct CalculatedTotalFunds {\\n        uint256 plusDepositAmountInAdditionalFundsCcy;\\n        uint256 minusDepositAmountInAdditionalFundsCcy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 collateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct CalculatedFunds {\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 collateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct GetOrderEstimationParams {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        address user;\\n        ProtocolTypes.Side side;\\n        uint256 amount;\\n        uint256 unitPrice;\\n        uint256 additionalDepositAmount;\\n        bool ignoreBorrowedAmount;\\n    }\\n\\n    function isTerminated() external view returns (bool);\\n\\n    function isRedemptionRequired(address _user) external view returns (bool);\\n\\n    function getMarketBasePeriod() external view returns (uint256);\\n\\n    function getTerminationDate() external view returns (uint256);\\n\\n    function getTerminationCurrencyCache(\\n        bytes32 _ccy\\n    ) external view returns (TerminationCurrencyCache memory);\\n\\n    function getTerminationCollateralRatio(bytes32 _ccy) external view returns (uint256);\\n\\n    function getMinDebtUnitPrice(bytes32 _ccy) external view returns (uint256);\\n\\n    function getCurrentMinDebtUnitPrice(\\n        bytes32 _ccy,\\n        uint256 _maturity\\n    ) external view returns (uint256);\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarket(bytes32 ccy) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy) external view returns (address);\\n\\n    function getOrderBookId(bytes32 _ccy, uint256 _maturity) external view returns (uint8);\\n\\n    function getPendingOrderAmount(bytes32 _ccy, uint256 _maturity) external view returns (uint256);\\n\\n    function getOrderEstimation(\\n        GetOrderEstimationParams calldata params\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV,\\n            uint256 orderFeeInFV,\\n            uint256 placedAmount,\\n            uint256 coverage,\\n            bool isInsufficientDepositAmount\\n        );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getOrderBookIds(bytes32 ccy) external view returns (uint8[] memory);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInBaseCurrency(\\n        address user\\n    ) external view returns (int256 totalPresentValue);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256 genesisValue);\\n\\n    function getPosition(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) external view returns (int256 presentValue, int256 futureValue);\\n\\n    function calculateFunds(\\n        bytes32 ccy,\\n        address user,\\n        uint256 liquidationThresholdRate\\n    ) external view returns (CalculatedFunds memory funds);\\n\\n    function calculateTotalFundsInBaseCurrency(\\n        address user,\\n        AdditionalFunds calldata _additionalFunds,\\n        uint256 liquidationThresholdRate\\n    ) external view returns (CalculatedTotalFunds memory calculatedFunds);\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor,\\n        uint256 orderFeeRate,\\n        uint256 circuitBreakerLimitRange,\\n        uint256 minDebtUnitPrice\\n    ) external;\\n\\n    function createOrderBook(bytes32 ccy, uint256 openingDate, uint256 preOpeningDate) external;\\n\\n    function executeOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecuteOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function executePreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecutesPreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function unwindPosition(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function executeItayoseCall(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function executeRedemption(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeRepayment(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeEmergencySettlement() external returns (bool);\\n\\n    function executeLiquidationCall(\\n        bytes32 collateralCcy,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        address user\\n    ) external returns (bool);\\n\\n    function executeForcedRepayment(\\n        bytes32 _collateralCcy,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity,\\n        address _user\\n    ) external returns (bool);\\n\\n    function cancelOrder(bytes32 ccy, uint256 maturity, uint48 orderId) external returns (bool);\\n\\n    function rotateOrderBooks(bytes32 ccy) external;\\n\\n    function executeEmergencyTermination() external;\\n\\n    function pauseLendingMarket(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarket(bytes32 ccy) external returns (bool);\\n\\n    function cleanUpAllFunds(address user) external returns (bool);\\n\\n    function cleanUpFunds(bytes32 ccy, address user) external returns (uint256 activeOrderCount);\\n\\n    function updateMinDebtUnitPrice(bytes32 _ccy, uint256 _minDebtUnitPrice) external;\\n}\\n\",\"keccak256\":\"0x515f82e072b1f3eb7b1e58669af0926331bba401c07898dd148ac569d6274061\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IReserveFund.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IReserveFund {\\n    event Pause(address account);\\n    event Unpause(address account);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xf201bba61d7527343057038ab254ba2e9b70e355ccfb71143f96068727bece48\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\n\\ninterface ITokenVault {\\n    error UnregisteredCurrency();\\n    error InvalidCurrency();\\n    error InvalidToken();\\n    error InvalidAmount(bytes32 ccy, uint256 amount, uint256 msgValue);\\n    error AmountIsZero();\\n    error CallerNotBaseCurrency(address caller);\\n    error MarketTerminated();\\n    error RedemptionIsRequired();\\n\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress, bool isCollateral);\\n    event CurrencyUpdated(bytes32 ccy, bool isCollateral);\\n\\n    function isCovered(\\n        address user,\\n        bytes32 ccy\\n    ) external view returns (bool isEnoughCollateral, bool isEnoughDepositInOrderCcy);\\n\\n    function isCollateral(bytes32 ccy) external view returns (bool);\\n\\n    function isCollateral(bytes32[] calldata ccys) external view returns (bool[] memory);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getTokenAddress(bytes32 ccy) external view returns (address);\\n\\n    function getCollateralCurrencies() external view returns (bytes32[] memory);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256);\\n\\n    function getWithdrawableCollateral(bytes32 ccy, address user) external view returns (uint256);\\n\\n    function getCoverage(address user) external view returns (uint256);\\n\\n    function getTotalUnusedCollateralAmount(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address user) external view returns (uint256);\\n\\n    function getCollateralAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowableAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getLiquidationAmount(\\n        address user,\\n        bytes32 liquidationCcy,\\n        uint256 liquidationAmountMaximum\\n    ) external view returns (uint256 liquidationAmount, uint256 protocolFee, uint256 liquidatorFee);\\n\\n    function getTotalDepositAmount(bytes32 ccy) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function calculateCoverage(\\n        address user,\\n        ILendingMarketController.AdditionalFunds memory funds\\n    ) external view returns (uint256 coverage, bool isInsufficientDepositAmount);\\n\\n    function calculateLiquidationFees(\\n        uint256 liquidationAmount\\n    ) external view returns (uint256 protocolFee, uint256 liquidatorFee);\\n\\n    function registerCurrency(bytes32 ccy, address tokenAddress, bool isCollateral) external;\\n\\n    function updateCurrency(bytes32 ccy, bool isCollateral) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositFrom(address user, bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addDepositAmount(address user, bytes32 ccy, uint256 amount) external;\\n\\n    function removeDepositAmount(address user, bytes32 ccy, uint256 amount) external;\\n\\n    function cleanUpUsedCurrencies(address user, bytes32 ccy) external;\\n\\n    function executeForcedReset(address user, bytes32 ccy) external returns (uint256 removedAmount);\\n\\n    function transferFrom(\\n        bytes32 ccy,\\n        address sender,\\n        address receiver,\\n        uint256 amount\\n    ) external returns (uint256 untransferredAmount);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xdb31c289733442bc3897bbdae2ef40cce4c88da015e5384de626991a726c4824\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/AddressResolverLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/mixins/MixinAddressResolverStorage.sol\\\";\\n\\nlibrary AddressResolverLib {\\n    error MissingAddress(string name);\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        if (_foundAddress == address(0)) revert MissingAddress(string(abi.encodePacked(name)));\\n        return _foundAddress;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return IReserveFund(getAddress(Contracts.RESERVE_FUND));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0x5cfce5841b4784484d127b5292c3ca0caa167257522e358570d5955656b7a71f\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary Constants {\\n    /// @dev Used for price digits in the basis (10000 -> 1)\\n    uint256 internal constant PRICE_DIGIT = 10000;\\n\\n    /// @dev Used for percentage digits in the basis (10000 -> 100%)\\n    uint256 internal constant PCT_DIGIT = 10000;\\n\\n    /// @dev Used for seconds in year (60 * 60 * 24 * 365)\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000;\\n\\n    /// @dev Used for maximum order count per currency\\n    uint256 internal constant MAXIMUM_ORDER_COUNT = 20;\\n}\\n\",\"keccak256\":\"0x21443c5b15f48894fc2ab2f1ea266a01d59e7808f50c569bf5556f6bb298f5d6\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant RESERVE_FUND = \\\"ReserveFund\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE_VAULT = \\\"FutureValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0x68a230a9c45ce36ef6526ba6cd52815dc12ca97622c43ed43b132c53b01a08b1\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/math/RoundingInt256.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary RoundingInt256 {\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0);\\n\\n        int256 diff = (a * 10) / b - (a / b) * 10;\\n        if (diff >= 5) {\\n            return (a / b) + 1;\\n        } else if (diff <= -5) {\\n            return (a / b) - 1;\\n        } else {\\n            return a / b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd1e09736aa5f45e183fa07818694edc6b838f19f87748803f8b7e81afe5b3019\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/math/RoundingUint256.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary RoundingUint256 {\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0);\\n\\n        if ((a * 10) / b - (a / b) * 10 < 5) {\\n            return a / b;\\n        } else {\\n            return (a / b) + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb063c0e8aa8a0bfc9303bd5a1c1d9f54b19cb85d8859aa505ba4162769fc7306\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {AddressResolverLib} from \\\"../libraries/AddressResolverLib.sol\\\";\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/mixins/MixinAddressResolverStorage.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    error OnlyAcceptedContract(string name);\\n    error ResolverAlreadyRegistered();\\n\\n    modifier onlyLendingMarketController() {\\n        if (msg.sender != address(AddressResolverLib.lendingMarketController()))\\n            revert OnlyAcceptedContract(\\\"LendingMarketController\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the contract names used in this contract.\\n     * @dev The contract name list is in `./libraries/Contracts.sol`.\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = Storage.slot().resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            Storage.slot().addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                Storage.slot().resolver.getAddress(name) != Storage.slot().addressCache[name] ||\\n                Storage.slot().addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        if (address(Storage.slot().resolver) != address(0)) revert ResolverAlreadyRegistered();\\n        Storage.slot().resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        return AddressResolverLib.getAddress(name);\\n    }\\n\\n    function resolver() public view returns (IAddressResolver) {\\n        return Storage.slot().resolver;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return AddressResolverLib.beaconProxyController();\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return AddressResolverLib.currencyController();\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return AddressResolverLib.genesisValueVault();\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return AddressResolverLib.reserveFund();\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return AddressResolverLib.lendingMarketController();\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return AddressResolverLib.tokenVault();\\n    }\\n}\\n\",\"keccak256\":\"0xd2f09d4b47a54d196ce23a9df1ece821097a9dba7933bbc7c1c05c05e33a660e\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/chainlink/AggregatorV3Interface.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct PriceFeed {\\n    AggregatorV3Interface[] instances;\\n    uint256[] heartbeats;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.currencyController\\\")) - 1);\\n\\n    struct Storage {\\n        // Protocol currencies\\n        EnumerableSet.Bytes32Set currencies;\\n        mapping(bytes32 ccy => uint256 haircut) haircuts;\\n        // Total cached decimals of the price feeds\\n        mapping(bytes32 ccy => uint8 decimals) decimalsCaches;\\n        mapping(bytes32 ccy => PriceFeed priceFeed) priceFeeds;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5485fa8fc79ac418525aed23300dd0111ecb5403121104ad6bb09d196c8e82f5\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nstruct AutoRollLog {\\n    uint256 unitPrice;\\n    uint256 lendingCompoundFactor;\\n    uint256 borrowingCompoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.genesisValueVault\\\")) - 1);\\n\\n    struct Storage {\\n        mapping(bytes32 ccy => bool isInitialized) isInitialized;\\n        mapping(bytes32 ccy => uint256 compoundFactor) initialCompoundFactors;\\n        mapping(bytes32 ccy => uint256 compoundFactor) lendingCompoundFactors;\\n        mapping(bytes32 ccy => uint256 compoundFactor) borrowingCompoundFactors;\\n        mapping(bytes32 ccy => uint256 maturity) currentMaturity;\\n        mapping(bytes32 ccy => uint8 decimals) decimals;\\n        mapping(bytes32 ccy => mapping(address user => int256 balance)) balances;\\n        mapping(bytes32 ccy => uint256 amount) totalLendingSupplies;\\n        mapping(bytes32 ccy => uint256 amount) totalBorrowingSupplies;\\n        // Total amount supplied per maturity\\n        mapping(bytes32 ccy => mapping(uint256 maturity => int256 balance)) maturityBalances;\\n        mapping(bytes32 ccy => mapping(uint256 maturity => AutoRollLog log)) autoRollLogs;\\n        // Maturity when the user receives the balance on the target currency\\n        mapping(bytes32 ccy => mapping(address user => uint256 maturity)) userMaturities;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4b8a216678af814784e430a3e75d90f560e642589c2dc1f31b52e71a8dd978cf\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/LendingMarketControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct ObservationPeriodLog {\\n    uint256 totalAmount;\\n    uint256 totalFutureValue;\\n}\\n\\nstruct TerminationCurrencyCache {\\n    int256 price;\\n    uint8 decimals;\\n}\\n\\nlibrary LendingMarketControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.lendingMarketController\\\")) - 1);\\n\\n    struct Storage {\\n        uint256 marketBasePeriod;\\n        uint256 terminationDate;\\n        mapping(bytes32 ccy => TerminationCurrencyCache currency) terminationCurrencyCaches;\\n        mapping(bytes32 ccy => uint256 ratio) terminationCollateralRatios;\\n        mapping(bytes32 ccy => uint8[] orderBookIds) orderBookIdLists;\\n        mapping(bytes32 ccy => address lendingMarket) lendingMarkets;\\n        mapping(bytes32 ccy => address futureValueVault) futureValueVaults;\\n        mapping(bytes32 ccy => uint256 unitPrice) minDebtUnitPrices;\\n        mapping(bytes32 ccy => uint256 genesisDate) genesisDates;\\n        mapping(bytes32 ccy => mapping(uint256 maturity => uint256 amount)) pendingOrderAmounts;\\n        // Order book id history to get order book id from maturity\\n        mapping(bytes32 ccy => mapping(uint256 maturity => uint8 orderBookIds)) maturityOrderBookIds;\\n        // List of maturity that the user has open orders or positions\\n        mapping(bytes32 ccy => mapping(address user => EnumerableSet.UintSet maturities)) usedMaturities;\\n        // Observation period logs that is used for auto-rolls\\n        mapping(bytes32 ccy => mapping(uint256 maturity => ObservationPeriodLog log)) observationPeriodLogs;\\n        // List of currency that the user has open orders or positions\\n        mapping(address user => EnumerableSet.Bytes32Set currency) usedCurrencies;\\n        mapping(address user => bool isRedeemed) isRedeemed;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c17d741d07b65f548ee237fa5ae57c559f5b96c500a10a907560b40f3d74eb7\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/mixins/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {IAddressResolver} from \\\"../../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.mixinAddressResolver\\\")) - 1);\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 contractName => address contractAddress) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5663ed356830b742d6f13379afdd7d041ae71e13ad2ea64d8d63ca9e6ef8ab75\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0x409169980b48b1bd32af609ac7b90f5c29e064cbec3d83d81767d72192ba07a2\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/StorageSlot.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    function getRevision() external pure virtual returns (uint256) {\\n        return 0x1;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0x47557dd0d5021327b0afc0ff8a0686b6acbff69d0f2e89f0b610d87cf4904512\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "implementation": "0xBBD1797Aa0ee9cD65B62Aa1Bc63cF5F22b414bb4",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "calculateBalanceFluctuationByAutoRolls(bytes32,int256,uint256,uint256)": {
        "params": {
          "_balance": "User's balance",
          "_ccy": "Currency name in bytes32",
          "_fromMaturity": "The maturity at start",
          "_toMaturity": "The maturity at end"
        }
      },
      "calculateFVFromFV(bytes32,uint256,uint256,int256)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The future value at the destination maturity"
        }
      },
      "calculateFVFromGV(bytes32,uint256,int256)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The future value"
        }
      },
      "calculateGVFromFV(bytes32,uint256,int256)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The genesis value"
        }
      },
      "cleanUpBalance(bytes32,address,uint256)": {
        "details": "The genesis value of borrowing fluctuates when it is auto-rolled, but it is not updated in real-time. This function removes the fluctuation amount calculated by lazy evaluation to reduce gas costs.",
        "params": {
          "_ccy": "Currency name in bytes32",
          "_maturity": "The maturity",
          "_user": "User's address"
        }
      },
      "decimals(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The decimals of the genesis value."
        }
      },
      "executeAutoRoll(bytes32,uint256,uint256,uint256,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_maturity": "Current maturity",
          "_nextMaturity": "Next maturity to be rolled",
          "_orderFeeRate": "Order fee rate used to calculate the auto-roll fee",
          "_unitPrice": "Unit price of auto-roll"
        }
      },
      "executeForcedReset(bytes32,address)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "executeForcedReset(bytes32,uint256,address,int256)": {
        "params": {
          "_amountInFV": "The amount in the future value to reset",
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "getAutoRollLog(bytes32,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_maturity": "The maturity"
        },
        "returns": {
          "_0": "The auto-roll log"
        }
      },
      "getBalance(bytes32,address)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "_0": "The user balance"
        }
      },
      "getBalanceFluctuationByAutoRolls(bytes32,address,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_maturity": "The maturity",
          "_user": "User's address"
        }
      },
      "getBalanceInFutureValue(bytes32,address)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "_0": "The future value of the user balance"
        }
      },
      "getBorrowingCompoundFactor(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The lending compound factor"
        }
      },
      "getCurrentMaturity(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The current maturity"
        }
      },
      "getLatestAutoRollLog(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The auto-roll log"
        }
      },
      "getLendingCompoundFactor(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The lending compound factor"
        }
      },
      "getMaturityGenesisValue(bytes32,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_maturity": "The maturity"
        },
        "returns": {
          "_0": "The current total supply"
        }
      },
      "getTotalBorrowingSupply(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The total supply of borrowing"
        }
      },
      "getTotalLendingSupply(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The total supply of lending"
        }
      },
      "initialize(address)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController.",
        "params": {
          "_resolver": "The address of the Address Resolver contract"
        }
      },
      "initializeCurrencySetting(bytes32,uint8,uint256,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_compoundFactor": "Initial compound factor",
          "_decimals": "Compound factor decimals",
          "_maturity": "Initial maturity"
        }
      },
      "isInitialized(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The boolean if the currency is initialized or not"
        }
      },
      "requiredContracts()": {
        "details": "The contract name list is in `./libraries/Contracts.sol`."
      },
      "transferFrom(bytes32,address,address,int256)": {
        "params": {
          "_amount": "Amount of funds to sent",
          "_ccy": "Currency name in bytes32",
          "_receiver": "Receiver's address",
          "_sender": "Sender's address"
        }
      },
      "updateGenesisValueWithFutureValue(bytes32,address,uint256,int256)": {
        "params": {
          "_basisMaturity": "The basis maturity",
          "_ccy": "Currency name in bytes32",
          "_fvAmount": "The amount in the future value",
          "_user": "User's address"
        }
      },
      "updateGenesisValueWithResidualAmount(bytes32,address,uint256)": {
        "details": "This function is used only in the case that the user is the last person who updates the genesis value at maturity, and called only one time per maturity.",
        "params": {
          "_basisMaturity": "The basis maturity",
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "updateInitialCompoundFactor(bytes32,uint256)": {
        "details": "This function is allowed to be called only before the initial compound factor is finalized.",
        "params": {
          "_ccy": "Currency name in bytes32",
          "_unitPrice": "The unit price used to calculate the compound factor"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateBalanceFluctuationByAutoRolls(bytes32,int256,uint256,uint256)": {
        "notice": "Calculates the fluctuation amount of genesis value caused by auto-rolls at a certain maturity"
      },
      "calculateFVFromFV(bytes32,uint256,uint256,int256)": {
        "notice": "Calculates the future value from the basis maturity to the destination maturity using the compound factor."
      },
      "calculateFVFromGV(bytes32,uint256,int256)": {
        "notice": "Calculates the future value at the basis maturity from the genesis value using the compound factor."
      },
      "calculateGVFromFV(bytes32,uint256,int256)": {
        "notice": "Calculates the genesis value from the future value at the basis maturity using the compound factor."
      },
      "cleanUpBalance(bytes32,address,uint256)": {
        "notice": "Clean up balance of the user per maturity."
      },
      "decimals(bytes32)": {
        "notice": "Gets if the decimals of the genesis value."
      },
      "executeAutoRoll(bytes32,uint256,uint256,uint256,uint256)": {
        "notice": "Executes the auto-roll."
      },
      "executeForcedReset(bytes32,address)": {
        "notice": "Forces a reset of the user's genesis value."
      },
      "executeForcedReset(bytes32,uint256,address,int256)": {
        "notice": "Forces a reset of the user's genesis value."
      },
      "getAutoRollLog(bytes32,uint256)": {
        "notice": "Gets the auto-roll log"
      },
      "getBalance(bytes32,address)": {
        "notice": "Gets the user balance."
      },
      "getBalanceFluctuationByAutoRolls(bytes32,address,uint256)": {
        "notice": "Gets the fluctuation amount of genesis value caused by auto-rolls."
      },
      "getBalanceInFutureValue(bytes32,address)": {
        "notice": "Gets the future value of the user balance."
      },
      "getBorrowingCompoundFactor(bytes32)": {
        "notice": "Gets the borrowing compound factor"
      },
      "getCurrentMaturity(bytes32)": {
        "notice": "Gets the current maturity"
      },
      "getLatestAutoRollLog(bytes32)": {
        "notice": "Gets the latest auto-roll log"
      },
      "getLendingCompoundFactor(bytes32)": {
        "notice": "Gets the lending compound factor"
      },
      "getMaturityGenesisValue(bytes32,uint256)": {
        "notice": "Gets the current total supply per maturity"
      },
      "getTotalBorrowingSupply(bytes32)": {
        "notice": "Gets the total supply of borrowing"
      },
      "getTotalLendingSupply(bytes32)": {
        "notice": "Gets the total supply of lending"
      },
      "initialize(address)": {
        "notice": "Initializes the contract."
      },
      "initializeCurrencySetting(bytes32,uint8,uint256,uint256)": {
        "notice": "Initializes the currency setting."
      },
      "isInitialized(bytes32)": {
        "notice": "Gets if the currency is initialized."
      },
      "requiredContracts()": {
        "notice": "Returns the contract names used in this contract."
      },
      "transferFrom(bytes32,address,address,int256)": {
        "notice": "Transfers the genesis value from sender to receiver."
      },
      "updateGenesisValueWithFutureValue(bytes32,address,uint256,int256)": {
        "notice": "Updates the user's balance of the genesis value with the input future value."
      },
      "updateGenesisValueWithResidualAmount(bytes32,address,uint256)": {
        "notice": "Updates the user's balance of the genesis value without the input future value."
      },
      "updateInitialCompoundFactor(bytes32,uint256)": {
        "notice": "Update the currency setting."
      }
    },
    "notice": "Implements the management of the genesis value as an amount for Lending positions.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 995,
        "contract": "contracts/protocol/GenesisValueVault.sol:GenesisValueVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 998,
        "contract": "contracts/protocol/GenesisValueVault.sol:GenesisValueVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}