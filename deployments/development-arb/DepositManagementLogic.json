{
  "address": "0xeC23fDe60F6C1a160ad928716D5BB141d9BAE0c1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "MissingAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        }
      ],
      "name": "NotEnoughDeposit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        }
      ],
      "name": "ProtocolIsInsolvent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "ccy",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "workingLendOrdersAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "workingBorrowOrdersAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILendingMarketController.AdditionalFunds",
          "name": "_additionalFunds",
          "type": "tuple"
        }
      ],
      "name": "calculateCoverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "coverage",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isInsufficientDepositAmount",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateLiquidationFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidatorFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getBorrowableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalUsedCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDeposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getCoverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "coverage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_liquidationCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationAmountMaximum",
          "type": "uint256"
        }
      ],
      "name": "getLiquidationAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidationAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidatorFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalUsedCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDeposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalUnusedCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUsedCurrencies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getWithdrawableCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "withdrawableAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getWithdrawableCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_orderCcy",
          "type": "bytes32"
        }
      ],
      "name": "isCovered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isEnoughCollateral",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isEnoughDepositInOrderCcy",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5360e32acf883973a87e8cc9ca431ad2160989de83fb604fb50e16f76a672cdf",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0xeC23fDe60F6C1a160ad928716D5BB141d9BAE0c1",
    "transactionIndex": 4,
    "gasUsed": "2101416",
    "logsBloom": "0x
    "blockHash": "0x3f8916c7fe629e99e582a1b19407fa2390e6283c48bdef124e987ff70a6db0f0",
    "transactionHash": "0x5360e32acf883973a87e8cc9ca431ad2160989de83fb604fb50e16f76a672cdf",
    "logs": [],
    "blockNumber": 192740155,
    "cumulativeGasUsed": "2585852",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "73110a1d619bc32510b17543e7136645",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"MissingAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"}],\"name\":\"NotEnoughDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"}],\"name\":\"ProtocolIsInsolvent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"workingLendOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"workingBorrowOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendingMarketController.AdditionalFunds\",\"name\":\"_additionalFunds\",\"type\":\"tuple\"}],\"name\":\"calculateCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coverage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInsufficientDepositAmount\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateLiquidationFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidatorFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getBorrowableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUsedCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coverage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_liquidationCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationAmountMaximum\",\"type\":\"uint256\"}],\"name\":\"getLiquidationAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidatorFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUsedCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalUnusedCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUsedCurrencies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_orderCcy\",\"type\":\"bytes32\"}],\"name\":\"isCovered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isEnoughCollateral\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnoughDepositInOrderCcy\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/libraries/logics/DepositManagementLogic.sol\":\"DepositManagementLogic\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dependencies/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Chainlink Contracts v0.4.0 (v0.8/interfaces/AggregatorV3Interface.sol)\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x4e6b3af251ee2ee848acb86147bb94d4a0845f65d2143545b7b6853297f81b82\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IAddressResolver {\\n    error UnmatchedInputs();\\n\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n\\n    function getNames() external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0x902589cadb08c09a44c5cdbe7ed8ba57a93f7e2700681177ef57c47c40e2e161\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IBeaconProxyController {\\n    error NoBeaconProxyContract();\\n    error InvalidProxyContract();\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function setZCTokenImpl(address newImpl) external;\\n\\n    function deployFutureValueVault() external returns (address futureValueVault);\\n\\n    function deployLendingMarket(\\n        bytes32 ccy,\\n        uint256 orderFeeRate,\\n        uint256 cbLimitRange\\n    ) external returns (address market);\\n\\n    function deployZCToken(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        address asset,\\n        uint256 maturity\\n    ) external returns (address futureValueToken);\\n}\\n\",\"keccak256\":\"0xec921fdea2288f812ed78ec9439e53f6bf751a582719618fa8fc8cd88d0b6920\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {PriceFeed} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    error InvalidCurrency();\\n    error InvalidHaircut();\\n    error InvalidPriceFeed();\\n    error InvalidDecimals(address priceFeed, uint8 decimals);\\n    error InvalidPriceFeedInputs();\\n    error StalePriceFeed(\\n        address priceFeed,\\n        uint256 heartbeat,\\n        uint256 updatedAt,\\n        uint256 blockTimestamp\\n    );\\n\\n    event CurrencyAdded(bytes32 indexed ccy, uint256 haircut);\\n    event CurrencyRemoved(bytes32 indexed ccy);\\n\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n\\n    event PriceFeedUpdated(bytes32 ccy, uint256 decimals, address[] indexed priceFeeds);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256 _amount\\n    ) external view returns (uint256 amount);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256[] calldata _amounts\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function convertToBaseCurrency(\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external view returns (uint256 amount);\\n\\n    function convertToBaseCurrency(\\n        bytes32 _ccy,\\n        int256 _amount\\n    ) external view returns (int256 amount);\\n\\n    function convertToBaseCurrency(\\n        bytes32 _ccy,\\n        uint256[] calldata _amounts\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function convertFromBaseCurrency(\\n        bytes32 _ccy,\\n        uint256 _amountETH\\n    ) external view returns (uint256 amount);\\n\\n    function convertFromBaseCurrency(\\n        bytes32 _ccy,\\n        uint256[] calldata _amounts\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getDecimals(bytes32) external view returns (uint8);\\n\\n    function getCurrencies() external view returns (bytes32[] memory);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getPriceFeed(bytes32 _ccy) external view returns (PriceFeed memory);\\n\\n    function getLastPrice(bytes32 _ccy) external view returns (int256 price);\\n\\n    function getAggregatedLastPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function currencyExists(bytes32 _ccy) external view returns (bool);\\n\\n    function updatePriceFeed(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        address[] calldata _priceFeeds,\\n        uint256[] calldata _heartbeats\\n    ) external;\\n\\n    function addCurrency(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        uint256 _haircut,\\n        address[] calldata _priceFeeds,\\n        uint256[] calldata _heartbeats\\n    ) external;\\n\\n    function updateHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function removeCurrency(bytes32 _ccy) external;\\n}\\n\",\"keccak256\":\"0x2d1e477a53ca03307d2f2ec206028963e99ff4dcf1e719e3b59845f6acb3ee93\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {AutoRollLog} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    error NoCompoundFactorExists(uint256 maturity);\\n    error CompoundFactorIsZero();\\n    error ResidualAmountIsNotZero();\\n    error UnitPriceIsZero();\\n    error InvalidMaturity();\\n    error InvalidAmount();\\n    error InvalidOrderFeeRate();\\n    error CurrencyAlreadyInitialized();\\n    error InitialCompoundFactorAlreadyFinalized();\\n    error AutoRollLogAlreadyUpdated(uint256 currentMaturity, uint256 nextMaturity);\\n    error InsufficientBalance();\\n    error InsufficientLockedBalance();\\n\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\\n    event AutoRollExecuted(\\n        bytes32 indexed ccy,\\n        uint256 lendingCompoundFactor,\\n        uint256 borrowingCompoundFactor,\\n        uint256 unitPrice,\\n        uint256 currentMaturity,\\n        uint256 previousMaturity\\n    );\\n    event BalanceLocked(bytes32 indexed ccy, address indexed user, uint256 value);\\n    event BalanceUnlocked(bytes32 indexed ccy, address indexed user, uint256 value);\\n\\n    function isAutoRolled(bytes32 _ccy, uint256 _maturity) external view returns (bool);\\n\\n    function isInitialized(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getBalance(bytes32 ccy, address user, uint256 maturity) external view returns (int256);\\n\\n    function getMaturityGenesisValue(bytes32 ccy, uint256 maturity) external view returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getAutoRollLog(\\n        bytes32 ccy,\\n        uint256 maturity\\n    ) external view returns (AutoRollLog memory);\\n\\n    function getLatestAutoRollLog(bytes32 ccy) external view returns (AutoRollLog memory);\\n\\n    function getTotalLockedBalance(bytes32 ccy) external view returns (uint256);\\n\\n    function calculateFVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        uint256 destinationMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function getBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function calculateBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        int256 balance,\\n        uint256 fromMaturity,\\n        uint256 toMaturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function initializeCurrencySetting(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor,\\n        uint256 maturity\\n    ) external;\\n\\n    function updateInitialCompoundFactor(bytes32 ccy, uint256 unitPrice) external;\\n\\n    function updateDecimals(bytes32 _ccy, uint8 _decimals) external;\\n\\n    function executeAutoRoll(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice,\\n        uint256 orderFeeRate\\n    ) external;\\n\\n    function updateGenesisValueWithFutureValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 fvAmount\\n    ) external;\\n\\n    function updateGenesisValueWithResidualAmount(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity\\n    ) external;\\n\\n    function lock(\\n        bytes32 ccy,\\n        address user,\\n        uint256 amount\\n    ) external returns (uint256 lockedAmount);\\n\\n    function unlock(bytes32 ccy, address user, uint256 amount) external;\\n\\n    function transferFrom(bytes32 ccy, address sender, address receiver, int256 amount) external;\\n\\n    function cleanUpBalance(bytes32 ccy, address user, uint256 maturity) external;\\n\\n    function executeForcedReset(bytes32 _ccy, address _user) external;\\n\\n    function executeForcedReset(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        int256 _amountInFV\\n    ) external returns (int256 removedAmount, int256 balance);\\n}\\n\",\"keccak256\":\"0xfd1673a34386b847d75edc51873437f19f71a01017cb730824959b2b2c85ed34\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {ZCTokenInfo, TerminationCurrencyCache} from \\\"../storages/LendingMarketControllerStorage.sol\\\";\\n\\ninterface ILendingMarketController {\\n    error InvalidMaturity();\\n    error InvalidCurrency();\\n    error MarketTerminated();\\n    error NotTerminated();\\n    error AlreadyInitialized();\\n\\n    struct AdditionalFunds {\\n        bytes32 ccy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 lentAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct CalculatedTotalFunds {\\n        uint256 plusDepositAmountInAdditionalFundsCcy;\\n        uint256 minusDepositAmountInAdditionalFundsCcy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 collateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct CalculatedFunds {\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 collateralAmount;\\n        uint256 unallocatedCollateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct GetOrderEstimationParams {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        address user;\\n        ProtocolTypes.Side side;\\n        uint256 amount;\\n        uint256 unitPrice;\\n        uint256 additionalDepositAmount;\\n        bool ignoreBorrowedAmount;\\n    }\\n\\n    struct GetOrderEstimationFromFVParams {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        address user;\\n        ProtocolTypes.Side side;\\n        uint256 amountInFV;\\n        uint256 additionalDepositAmount;\\n        bool ignoreBorrowedAmount;\\n    }\\n\\n    function isValidMaturity(bytes32 _ccy, uint256 _maturity) external view returns (bool);\\n\\n    function isTerminated() external view returns (bool);\\n\\n    function isRedemptionRequired(address _user) external view returns (bool);\\n\\n    function getMarketBasePeriod() external view returns (uint256);\\n\\n    function getTerminationDate() external view returns (uint256);\\n\\n    function getTerminationCurrencyCache(\\n        bytes32 _ccy\\n    ) external view returns (TerminationCurrencyCache memory);\\n\\n    function getTerminationCollateralRatio(bytes32 _ccy) external view returns (uint256);\\n\\n    function getMinDebtUnitPrice(bytes32 _ccy) external view returns (uint256);\\n\\n    function getCurrentMinDebtUnitPrice(\\n        bytes32 _ccy,\\n        uint256 _maturity\\n    ) external view returns (uint256);\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarket(bytes32 ccy) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy) external view returns (address);\\n\\n    function getOrderBookId(bytes32 _ccy, uint256 _maturity) external view returns (uint8);\\n\\n    function getPendingOrderAmount(bytes32 _ccy, uint256 _maturity) external view returns (uint256);\\n\\n    function getOrderEstimation(\\n        GetOrderEstimationParams calldata params\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV,\\n            uint256 orderFeeInFV,\\n            uint256 placedAmount,\\n            uint256 coverage,\\n            bool isInsufficientDepositAmount\\n        );\\n\\n    // function getOrderEstimationFromFV(\\n    //     GetOrderEstimationFromFVParams calldata _params\\n    // )\\n    //     external\\n    //     view\\n    //     returns (\\n    //         uint256 lastUnitPrice,\\n    //         uint256 filledAmount,\\n    //         uint256 filledAmountInFV,\\n    //         uint256 orderFeeInFV,\\n    //         uint256 coverage,\\n    //         bool isInsufficientDepositAmount\\n    //     );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getOrderBookIds(bytes32 ccy) external view returns (uint8[] memory);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInBaseCurrency(\\n        address user\\n    ) external view returns (int256 totalPresentValue);\\n\\n    function getGenesisValue(\\n        bytes32 ccy,\\n        address user\\n    ) external view returns (int256 amount, int256 amountInPV, int256 amountInFV);\\n\\n    function getPosition(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) external view returns (int256 presentValue, int256 futureValue);\\n\\n    function getZCToken(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getZCTokenInfo(address zcToken) external view returns (ZCTokenInfo memory);\\n\\n    function getWithdrawableZCTokenAmount(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        address user\\n    ) external view returns (uint256 amount);\\n\\n    function calculateFunds(\\n        bytes32 ccy,\\n        address user,\\n        uint256 liquidationThresholdRate\\n    ) external view returns (CalculatedFunds memory funds);\\n\\n    function calculateTotalFundsInBaseCurrency(\\n        address user,\\n        AdditionalFunds calldata _additionalFunds,\\n        uint256 liquidationThresholdRate\\n    ) external view returns (CalculatedTotalFunds memory calculatedFunds);\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor,\\n        uint256 orderFeeRate,\\n        uint256 circuitBreakerLimitRange,\\n        uint256 minDebtUnitPrice\\n    ) external;\\n\\n    function createOrderBook(bytes32 ccy, uint256 openingDate, uint256 preOpeningDate) external;\\n\\n    function executeOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecuteOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function depositWithPermitAndExecuteOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external returns (bool);\\n\\n    function executePreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecutesPreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function depositWithPermitAndExecutePreOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice,\\n        uint256 _deadline,\\n        uint8 _permitV,\\n        bytes32 _permitR,\\n        bytes32 _permitS\\n    ) external returns (bool);\\n\\n    function unwindPosition(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function unwindPositionWithCap(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 maxFutureValue\\n    ) external returns (uint256 filledAmount, uint256 filledAmountInFV, uint256 feeInFV);\\n\\n    function executeItayoseCall(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function executeRedemption(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeRepayment(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeEmergencySettlement() external returns (bool);\\n\\n    function executeLiquidationCall(\\n        bytes32 collateralCcy,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        address user\\n    ) external returns (bool);\\n\\n    function executeForcedRepayment(\\n        bytes32 _collateralCcy,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity,\\n        address _user\\n    ) external returns (bool);\\n\\n    function cancelOrder(bytes32 ccy, uint256 maturity, uint48 orderId) external returns (bool);\\n\\n    function rotateOrderBooks(bytes32 ccy) external;\\n\\n    function executeEmergencyTermination() external;\\n\\n    function pauseLendingMarket(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarket(bytes32 ccy) external returns (bool);\\n\\n    function cleanUpAllFunds(address user) external returns (bool);\\n\\n    function cleanUpFunds(bytes32 ccy, address user) external returns (uint256 activeOrderCount);\\n\\n    function updateMinDebtUnitPrice(bytes32 _ccy, uint256 _minDebtUnitPrice) external;\\n\\n    function withdrawZCToken(bytes32 _ccy, uint256 _maturity, uint256 _amount) external;\\n\\n    function depositZCToken(bytes32 _ccy, uint256 _maturity, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x896d2ffbec09fc0e4a51b40030a1e5f364cb97ec926206ed789c8aa9b5941b27\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/INativeToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface INativeToken is IERC20 {\\n    event Deposit(address user, uint256 amount);\\n    event Withdrawal(address user, uint256 amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x421a18a404723799ac6878c4f710de9e71b2f90877d027a18c8bc42950796b70\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IReserveFund.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IReserveFund {\\n    event Pause(address account);\\n    event Unpause(address account);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xf201bba61d7527343057038ab254ba2e9b70e355ccfb71143f96068727bece48\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\n\\ninterface ITokenVault {\\n    error UnregisteredCurrency();\\n    error InvalidCurrency();\\n    error InvalidToken();\\n    error InvalidAmount(bytes32 ccy, uint256 amount, uint256 msgValue);\\n    error AmountIsZero();\\n    error CallerNotBaseCurrency(address caller);\\n    error MarketTerminated();\\n    error RedemptionIsRequired();\\n\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount, address caller);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress, bool isCollateral);\\n    event CurrencyUpdated(bytes32 ccy, bool isCollateral);\\n\\n    function isCovered(\\n        address user,\\n        bytes32 ccy\\n    ) external view returns (bool isEnoughCollateral, bool isEnoughDepositInOrderCcy);\\n\\n    function isCollateral(bytes32 ccy) external view returns (bool);\\n\\n    function isCollateral(bytes32[] calldata ccys) external view returns (bool[] memory);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getTokenAddress(bytes32 ccy) external view returns (address);\\n\\n    function getCollateralCurrencies() external view returns (bytes32[] memory);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256);\\n\\n    function getWithdrawableCollateral(bytes32 ccy, address user) external view returns (uint256);\\n\\n    function getCoverage(address user) external view returns (uint256);\\n\\n    function getTotalUnusedCollateralAmount(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address user) external view returns (uint256);\\n\\n    function getCollateralDetail(\\n        address user\\n    )\\n        external\\n        view\\n        returns (uint256 totalCollateral, uint256 totalUsedCollateral, uint256 totalDeposit);\\n\\n    function getCollateralAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowableAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getLiquidationAmount(\\n        address user,\\n        bytes32 liquidationCcy,\\n        uint256 liquidationAmountMaximum\\n    ) external view returns (uint256 liquidationAmount, uint256 protocolFee, uint256 liquidatorFee);\\n\\n    function getTotalDepositAmount(bytes32 ccy) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function calculateCoverage(\\n        address user,\\n        ILendingMarketController.AdditionalFunds memory funds\\n    ) external view returns (uint256 coverage, bool isInsufficientDepositAmount);\\n\\n    function calculateLiquidationFees(\\n        uint256 liquidationAmount\\n    ) external view returns (uint256 protocolFee, uint256 liquidatorFee);\\n\\n    function registerCurrency(bytes32 ccy, address tokenAddress, bool isCollateral) external;\\n\\n    function updateCurrency(bytes32 ccy, bool isCollateral) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositTo(bytes32 ccy, uint256 amount, address onBehalfOf) external payable;\\n\\n    function depositFrom(address user, bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositWithPermitTo(\\n        bytes32 ccy,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    function depositWithPermitFrom(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addDepositAmount(address user, bytes32 ccy, uint256 amount) external;\\n\\n    function removeDepositAmount(address user, bytes32 ccy, uint256 amount) external;\\n\\n    function cleanUpUsedCurrencies(address user, bytes32 ccy) external;\\n\\n    function executeForcedReset(address user, bytes32 ccy) external returns (uint256 removedAmount);\\n\\n    function transferFrom(\\n        bytes32 ccy,\\n        address sender,\\n        address receiver,\\n        uint256 amount\\n    ) external returns (uint256 untransferredAmount);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function getLiquidationThresholdRate() external view returns (uint256 rate);\\n}\\n\",\"keccak256\":\"0x0d46845175ea03d23c7c2b614483e8c8d26f54f817666ee5e40136737dea490d\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/AddressResolverLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/mixins/MixinAddressResolverStorage.sol\\\";\\n\\nlibrary AddressResolverLib {\\n    error MissingAddress(string name);\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        if (_foundAddress == address(0)) revert MissingAddress(string(abi.encodePacked(name)));\\n        return _foundAddress;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return IReserveFund(getAddress(Contracts.RESERVE_FUND));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0x5cfce5841b4784484d127b5292c3ca0caa167257522e358570d5955656b7a71f\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary Constants {\\n    /// @dev Used for price digits in the basis (10000 -> 1)\\n    uint256 internal constant PRICE_DIGIT = 10000;\\n\\n    /// @dev Used for percentage digits in the basis (10000 -> 100%)\\n    uint256 internal constant PCT_DIGIT = 10000;\\n\\n    /// @dev Used for seconds in year (60 * 60 * 24 * 365)\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000;\\n\\n    /// @dev Used for maximum order count per currency\\n    uint256 internal constant MAXIMUM_ORDER_COUNT = 20;\\n}\\n\",\"keccak256\":\"0x21443c5b15f48894fc2ab2f1ea266a01d59e7808f50c569bf5556f6bb298f5d6\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant RESERVE_FUND = \\\"ReserveFund\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE_VAULT = \\\"FutureValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n    bytes32 internal constant ZC_TOKEN = \\\"ZCToken\\\";\\n}\\n\",\"keccak256\":\"0x0e5ed5826808f2caca98c73eb744d0c5774392b9451cf468652938721d210d7c\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {INativeToken} from \\\"../interfaces/INativeToken.sol\\\";\\nimport {TransferHelperStorage as Storage} from \\\"../storages/libraries/TransferHelperStorage.sol\\\";\\n\\nlibrary TransferHelper {\\n    function initialize(address _nativeToken) internal {\\n        require(Storage.slot().nativeToken == address(0), \\\"TransferHelper: Already initialized\\\");\\n        Storage.slot().nativeToken = _nativeToken;\\n    }\\n\\n    function nativeToken() internal view returns (address) {\\n        return Storage.slot().nativeToken;\\n    }\\n\\n    function isNative(address _token) internal view returns (bool) {\\n        return _token == Storage.slot().nativeToken;\\n    }\\n\\n    function depositAssets(\\n        address _token,\\n        address _payer,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == Storage.slot().nativeToken) {\\n            convertToWrappedToken(_receiver, _amount);\\n        } else {\\n            safeTransferFrom(_token, _payer, _receiver, _amount);\\n        }\\n    }\\n\\n    function withdrawAssets(address _token, address _receiver, uint256 _amount) internal {\\n        if (address(_token) == Storage.slot().nativeToken) {\\n            convertFromWrappedToken(_receiver, _amount);\\n        } else {\\n            safeTransfer(_token, _receiver, _amount);\\n        }\\n    }\\n\\n    function convertToWrappedToken(address _receiver, uint256 _amount) internal {\\n        require(address(this).balance >= _amount, \\\"TransferHelper: Insufficient balance\\\");\\n\\n        INativeToken(Storage.slot().nativeToken).deposit{value: _amount}();\\n        safeTransfer(Storage.slot().nativeToken, _receiver, _amount);\\n    }\\n\\n    function convertFromWrappedToken(address _receiver, uint256 _amount) internal {\\n        uint256 balance = INativeToken(Storage.slot().nativeToken).balanceOf(address(this));\\n        require(balance >= _amount, \\\"TransferHelper: Insufficient balance\\\");\\n\\n        if (balance > 0) {\\n            INativeToken(Storage.slot().nativeToken).withdraw(_amount);\\n            safeTransferETH(_receiver, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer helper from UniswapV2 Router\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    /**\\n     * There are many non-compliant ERC20 tokens... this can handle most, adapted from UniSwap V2\\n     * Im trying to make it a habit to put external calls last (reentrancy)\\n     * You can put this in an internal function if you like.\\n     */\\n    function safeTransfer(address token, address to, uint256 amount) internal {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // 0xa9059cbb = bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n            abi.encodeWithSelector(0xa9059cbb, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FAILED\\\"\\n        ); // ERC20 Transfer failed\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x97dfaed51a29cfeea6deb451a2f7d66adfa16ac2574c7fdafc79a3f002812cdd\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/logics/DepositManagementLogic.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// dependencies\\nimport {EnumerableSet} from \\\"../../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n// interfaces\\nimport {ILendingMarketController} from \\\"../../interfaces/ILendingMarketController.sol\\\";\\n// libraries\\nimport {AddressResolverLib} from \\\"../AddressResolverLib.sol\\\";\\nimport {TransferHelper} from \\\"../TransferHelper.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\n// storages\\nimport {TokenVaultStorage as Storage} from \\\"../../storages/TokenVaultStorage.sol\\\";\\n\\nlibrary DepositManagementLogic {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using RoundingUint256 for uint256;\\n\\n    error NotEnoughDeposit(bytes32 ccy);\\n    error ProtocolIsInsolvent(bytes32 ccy);\\n\\n    struct CalculatedFundVars {\\n        uint256 plusDepositAmountInAdditionalFundsCcy;\\n        uint256 minusDepositAmountInAdditionalFundsCcy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 collateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    function isCovered(\\n        address _user,\\n        bytes32 _orderCcy\\n    ) public view returns (bool isEnoughCollateral, bool isEnoughDepositInOrderCcy) {\\n        ILendingMarketController.AdditionalFunds memory _funds;\\n        _funds.ccy = _orderCcy;\\n\\n        (\\n            uint256 totalCollateral,\\n            uint256 totalUsedCollateral,\\n            ,\\n            bool isInsufficientDepositAmount\\n        ) = _calculateCollateral(_user, _funds);\\n\\n        isEnoughDepositInOrderCcy = !isInsufficientDepositAmount;\\n        isEnoughCollateral =\\n            totalUsedCollateral == 0 ||\\n            (totalCollateral * Constants.PCT_DIGIT >=\\n                totalUsedCollateral * Storage.slot().liquidationThresholdRate);\\n    }\\n\\n    function getUsedCurrencies(address _user) public view returns (bytes32[] memory) {\\n        return Storage.slot().usedCurrencies[_user].values();\\n    }\\n\\n    function getDepositAmount(address _user, bytes32 _ccy) public view returns (uint256) {\\n        ILendingMarketController.CalculatedFunds memory funds = AddressResolverLib\\n            .lendingMarketController()\\n            .calculateFunds(_ccy, _user, Storage.slot().liquidationThresholdRate);\\n\\n        return\\n            Storage.slot().depositAmounts[_user][_ccy] +\\n            funds.borrowedAmount -\\n            funds.lentAmount -\\n            funds.workingLendOrdersAmount;\\n    }\\n\\n    function getTotalCollateralAmount(\\n        address _user\\n    )\\n        public\\n        view\\n        returns (uint256 totalCollateral, uint256 totalUsedCollateral, uint256 totalDeposit)\\n    {\\n        ILendingMarketController.AdditionalFunds memory _funds;\\n        (totalCollateral, totalUsedCollateral, totalDeposit, ) = _calculateCollateral(\\n            _user,\\n            _funds\\n        );\\n    }\\n\\n    function getCollateralAmount(\\n        address _user,\\n        bytes32 _ccy\\n    )\\n        public\\n        view\\n        returns (uint256 totalCollateral, uint256 totalUsedCollateral, uint256 totalDeposit)\\n    {\\n        ILendingMarketController.CalculatedFunds memory funds = AddressResolverLib\\n            .lendingMarketController()\\n            .calculateFunds(_ccy, _user, Storage.slot().liquidationThresholdRate);\\n\\n        uint256 plusDeposit = Storage.slot().depositAmounts[_user][_ccy] + funds.borrowedAmount;\\n        uint256 minusDeposit = funds.workingLendOrdersAmount + funds.lentAmount;\\n        uint256 plusCollateral = plusDeposit + funds.collateralAmount;\\n\\n        totalCollateral = plusCollateral >= minusDeposit ? plusCollateral - minusDeposit : 0;\\n        totalUsedCollateral = funds.workingBorrowOrdersAmount + funds.debtAmount;\\n        totalDeposit = plusDeposit >= minusDeposit ? plusDeposit - minusDeposit : 0;\\n    }\\n\\n    function getCoverage(address _user) external view returns (uint256 coverage) {\\n        ILendingMarketController.AdditionalFunds memory _emptyAdditionalFunds;\\n        (coverage, ) = calculateCoverage(_user, _emptyAdditionalFunds);\\n    }\\n\\n    function getTotalUnusedCollateralAmount(address _user) public view returns (uint256) {\\n        (uint256 totalCollateral, uint256 totalUsedCollateral, ) = getTotalCollateralAmount(_user);\\n\\n        return totalCollateral > totalUsedCollateral ? totalCollateral - totalUsedCollateral : 0;\\n    }\\n\\n    function getBorrowableAmount(address _user, bytes32 _ccy) external view returns (uint256) {\\n        uint256[] memory amounts = new uint256[](2);\\n        (amounts[0], amounts[1], ) = getTotalCollateralAmount(_user);\\n        amounts = AddressResolverLib.currencyController().convertFromBaseCurrency(_ccy, amounts);\\n\\n        uint256 totalCollateralAmount = amounts[0];\\n        uint256 totalUsedCollateral = amounts[1];\\n        uint256 liquidationThresholdRate = Storage.slot().liquidationThresholdRate;\\n\\n        ILendingMarketController.CalculatedFunds memory funds = AddressResolverLib\\n            .lendingMarketController()\\n            .calculateFunds(_ccy, _user, liquidationThresholdRate);\\n\\n        uint256 unusedCollateralAmount = funds.claimableAmount > funds.collateralAmount\\n            ? funds.claimableAmount - funds.collateralAmount\\n            : 0;\\n\\n        uint256 borrowableAmount = ((totalCollateralAmount + unusedCollateralAmount) *\\n            Constants.PCT_DIGIT).div(liquidationThresholdRate);\\n\\n        return borrowableAmount > totalUsedCollateral ? borrowableAmount - totalUsedCollateral : 0;\\n    }\\n\\n    function calculateCoverage(\\n        address _user,\\n        ILendingMarketController.AdditionalFunds memory _additionalFunds\\n    ) public view returns (uint256 coverage, bool isInsufficientDepositAmount) {\\n        uint256 totalCollateral;\\n        uint256 totalUsedCollateral;\\n\\n        (\\n            totalCollateral,\\n            totalUsedCollateral,\\n            ,\\n            isInsufficientDepositAmount\\n        ) = _calculateCollateral(_user, _additionalFunds);\\n\\n        if (totalCollateral == 0) {\\n            coverage = totalUsedCollateral == 0 ? 0 : type(uint256).max;\\n        } else {\\n            coverage = (totalUsedCollateral * Constants.PCT_DIGIT) / totalCollateral;\\n        }\\n    }\\n\\n    function _calculateCollateral(\\n        address _user,\\n        ILendingMarketController.AdditionalFunds memory _funds\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 totalCollateral,\\n            uint256 totalUsedCollateral,\\n            uint256 totalDeposit,\\n            bool isInsufficientDepositAmount\\n        )\\n    {\\n        CalculatedFundVars memory vars;\\n\\n        ILendingMarketController.CalculatedTotalFunds memory funds = AddressResolverLib\\n            .lendingMarketController()\\n            .calculateTotalFundsInBaseCurrency(\\n                _user,\\n                _funds,\\n                Storage.slot().liquidationThresholdRate\\n            );\\n\\n        vars.plusDepositAmountInAdditionalFundsCcy = funds.plusDepositAmountInAdditionalFundsCcy;\\n        vars.minusDepositAmountInAdditionalFundsCcy = funds.minusDepositAmountInAdditionalFundsCcy;\\n        vars.workingLendOrdersAmount = funds.workingLendOrdersAmount;\\n        vars.collateralAmount = funds.collateralAmount;\\n        vars.lentAmount = funds.lentAmount;\\n        vars.workingBorrowOrdersAmount = funds.workingBorrowOrdersAmount;\\n        vars.debtAmount = funds.debtAmount;\\n        vars.borrowedAmount = funds.borrowedAmount;\\n\\n        // Check if the user has enough deposit amount in the selected currency.\\n        if (\\n            vars.plusDepositAmountInAdditionalFundsCcy +\\n                Storage.slot().depositAmounts[_user][_funds.ccy] <\\n            vars.minusDepositAmountInAdditionalFundsCcy\\n        ) {\\n            isInsufficientDepositAmount = true;\\n        }\\n\\n        uint256 totalInternalDepositAmount = _getTotalInternalDepositAmountInBaseCurrency(_user);\\n\\n        uint256 plusDeposit = totalInternalDepositAmount + vars.borrowedAmount;\\n        uint256 minusDeposit = vars.workingLendOrdersAmount + vars.lentAmount;\\n        uint256 plusCollateral = plusDeposit + vars.collateralAmount;\\n\\n        totalCollateral = plusCollateral >= minusDeposit ? plusCollateral - minusDeposit : 0;\\n        totalUsedCollateral = vars.workingBorrowOrdersAmount + vars.debtAmount;\\n        totalDeposit = plusDeposit >= minusDeposit ? plusDeposit - minusDeposit : 0;\\n    }\\n\\n    function getWithdrawableCollateral(address _user) public view returns (uint256) {\\n        (\\n            uint256 totalCollateral,\\n            uint256 totalUsedCollateral,\\n            uint256 totalDeposit\\n        ) = getTotalCollateralAmount(_user);\\n\\n        if (totalUsedCollateral == 0) {\\n            return totalDeposit;\\n        } else if (\\n            totalCollateral * Constants.PCT_DIGIT >\\n            totalUsedCollateral * Storage.slot().liquidationThresholdRate\\n        ) {\\n            // NOTE: The formula is:\\n            // maxWithdraw = totalCollateral - (totalUsedCollateral * liquidationThresholdRate)\\n            uint256 maxWithdraw = (totalCollateral *\\n                Constants.PCT_DIGIT -\\n                totalUsedCollateral *\\n                Storage.slot().liquidationThresholdRate).div(Constants.PCT_DIGIT);\\n\\n            return maxWithdraw >= totalDeposit ? totalDeposit : maxWithdraw;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getWithdrawableCollateral(\\n        bytes32 _ccy,\\n        address _user\\n    ) public view returns (uint256 withdrawableAmount) {\\n        uint256 depositAmount = getDepositAmount(_user, _ccy);\\n        if (Storage.slot().collateralCurrencies.contains(_ccy)) {\\n            uint256 maxWithdrawInBaseCurrency = getWithdrawableCollateral(_user);\\n            uint256 maxWithdraw = AddressResolverLib.currencyController().convertFromBaseCurrency(\\n                _ccy,\\n                maxWithdrawInBaseCurrency\\n            );\\n\\n            withdrawableAmount = depositAmount >= maxWithdraw ? maxWithdraw : depositAmount;\\n        } else {\\n            withdrawableAmount = depositAmount;\\n        }\\n    }\\n\\n    function addDepositAmount(address _user, bytes32 _ccy, uint256 _amount) public {\\n        Storage.slot().depositAmounts[_user][_ccy] += _amount;\\n        Storage.slot().usedCurrencies[_user].add(_ccy);\\n    }\\n\\n    function removeDepositAmount(address _user, bytes32 _ccy, uint256 _amount) public {\\n        if (Storage.slot().depositAmounts[_user][_ccy] < _amount) {\\n            revert NotEnoughDeposit({ccy: _ccy});\\n        }\\n\\n        Storage.slot().depositAmounts[_user][_ccy] -= _amount;\\n    }\\n\\n    function executeForcedReset(\\n        address _user,\\n        bytes32 _ccy\\n    ) external returns (uint256 removedAmount) {\\n        removedAmount = Storage.slot().depositAmounts[_user][_ccy];\\n        Storage.slot().depositAmounts[_user][_ccy] = 0;\\n\\n        Storage.slot().usedCurrencies[_user].remove(_ccy);\\n    }\\n\\n    function deposit(address _caller, bytes32 _ccy, uint256 _amount, address _onBehalfOf) public {\\n        TransferHelper.depositAssets(\\n            Storage.slot().tokenAddresses[_ccy],\\n            _caller,\\n            address(this),\\n            _amount\\n        );\\n\\n        addDepositAmount(_onBehalfOf, _ccy, _amount);\\n        Storage.slot().totalDepositAmount[_ccy] += _amount;\\n    }\\n\\n    function withdraw(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) public returns (uint256 withdrawableAmount) {\\n        withdrawableAmount = getWithdrawableCollateral(_ccy, _user);\\n        withdrawableAmount = _amount > withdrawableAmount ? withdrawableAmount : _amount;\\n\\n        if (Storage.slot().totalDepositAmount[_ccy] < withdrawableAmount) {\\n            revert ProtocolIsInsolvent({ccy: _ccy});\\n        }\\n\\n        Storage.slot().totalDepositAmount[_ccy] -= withdrawableAmount;\\n        removeDepositAmount(_user, _ccy, withdrawableAmount);\\n\\n        TransferHelper.withdrawAssets(\\n            Storage.slot().tokenAddresses[_ccy],\\n            _user,\\n            withdrawableAmount\\n        );\\n\\n        return withdrawableAmount;\\n    }\\n\\n    function getLiquidationAmount(\\n        address _user,\\n        bytes32 _liquidationCcy,\\n        uint256 _liquidationAmountMaximum\\n    ) public view returns (uint256 liquidationAmount, uint256 protocolFee, uint256 liquidatorFee) {\\n        (\\n            uint256 totalCollateralInBaseCcy,\\n            uint256 totalUsedCollateralInBaseCcy,\\n\\n        ) = getTotalCollateralAmount(_user);\\n\\n        if (totalUsedCollateralInBaseCcy == 0) {\\n            return (0, 0, 0);\\n        }\\n\\n        (uint256 collateralAmount, , ) = getCollateralAmount(_user, _liquidationCcy);\\n\\n        if (collateralAmount == 0) {\\n            return (0, 0, 0);\\n        }\\n\\n        uint256 liquidationAmountInBaseCcy = 0;\\n        uint256 coveredRatio = (totalCollateralInBaseCcy * Constants.PCT_DIGIT).div(\\n            totalUsedCollateralInBaseCcy\\n        );\\n\\n        if (coveredRatio < Storage.slot().fullLiquidationThresholdRate) {\\n            liquidationAmountInBaseCcy = totalUsedCollateralInBaseCcy;\\n        } else if (coveredRatio < Storage.slot().liquidationThresholdRate) {\\n            liquidationAmountInBaseCcy = totalUsedCollateralInBaseCcy.div(2);\\n        }\\n\\n        uint256[] memory amountsInBaseCcy = new uint256[](2);\\n        amountsInBaseCcy[0] = liquidationAmountInBaseCcy;\\n        amountsInBaseCcy[1] = totalCollateralInBaseCcy;\\n\\n        uint256[] memory amounts = AddressResolverLib.currencyController().convertFromBaseCurrency(\\n            _liquidationCcy,\\n            amountsInBaseCcy\\n        );\\n\\n        liquidationAmount = amounts[0];\\n        uint256 totalCollateralAmount = amounts[1];\\n\\n        if (liquidationAmount > _liquidationAmountMaximum) {\\n            liquidationAmount = _liquidationAmountMaximum;\\n        }\\n\\n        (protocolFee, liquidatorFee) = calculateLiquidationFees(liquidationAmount);\\n\\n        uint256 liquidationTotalAmount = liquidationAmount + protocolFee + liquidatorFee;\\n\\n        // NOTE: If `totalCollateralAmount > collateralAmount` is true, it means that a user has collateral in other currencies\\n        // In this case, this liquidation is not covered by the reserve fund.\\n        // Therefore, we need to keep the total liquidation amount within the maximum amount.\\n        if (liquidationTotalAmount > collateralAmount && totalCollateralAmount > collateralAmount) {\\n            liquidationTotalAmount = collateralAmount;\\n            uint256 liquidatorFeeRate = Storage.slot().liquidatorFeeRate;\\n            uint256 liquidationProtocolFeeRate = Storage.slot().liquidationProtocolFeeRate;\\n\\n            protocolFee = (liquidationTotalAmount * liquidationProtocolFeeRate).div(\\n                Constants.PCT_DIGIT + liquidatorFeeRate + liquidationProtocolFeeRate\\n            );\\n            liquidatorFee = (liquidationTotalAmount * liquidatorFeeRate).div(\\n                Constants.PCT_DIGIT + liquidatorFeeRate + liquidationProtocolFeeRate\\n            );\\n            liquidationAmount = liquidationTotalAmount - protocolFee - liquidatorFee;\\n        }\\n    }\\n\\n    function calculateLiquidationFees(\\n        uint256 _amount\\n    ) public view returns (uint256 protocolFee, uint256 liquidatorFee) {\\n        protocolFee = (_amount * Storage.slot().liquidationProtocolFeeRate).div(\\n            Constants.PCT_DIGIT\\n        );\\n        liquidatorFee = (_amount * Storage.slot().liquidatorFeeRate).div(Constants.PCT_DIGIT);\\n    }\\n\\n    function transferFrom(\\n        bytes32 _ccy,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (uint256 untransferredAmount) {\\n        uint256 depositAmount = getDepositAmount(_from, _ccy);\\n        uint256 amount = depositAmount >= _amount ? _amount : depositAmount;\\n        untransferredAmount = _amount - amount;\\n\\n        removeDepositAmount(_from, _ccy, amount);\\n        addDepositAmount(_to, _ccy, amount);\\n    }\\n\\n    function cleanUpUsedCurrencies(address _user, bytes32 _ccy) external {\\n        if (Storage.slot().depositAmounts[_user][_ccy] == 0) {\\n            Storage.slot().usedCurrencies[_user].remove(_ccy);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the total of amount deposited in the user's collateral of all currencies\\n     *  in this contract by converting it to ETH.\\n     * @param _user Address of collateral user\\n     * @return totalDepositAmount The total deposited amount in the base currency\\n     */\\n    function _getTotalInternalDepositAmountInBaseCurrency(\\n        address _user\\n    ) internal view returns (uint256 totalDepositAmount) {\\n        EnumerableSet.Bytes32Set storage currencies = Storage.slot().usedCurrencies[_user];\\n        uint256 length = currencies.length();\\n\\n        for (uint256 i; i < length; i++) {\\n            bytes32 ccy = currencies.at(i);\\n            if (Storage.slot().collateralCurrencies.contains(ccy)) {\\n                uint256 depositAmount = Storage.slot().depositAmounts[_user][ccy];\\n                totalDepositAmount += AddressResolverLib.currencyController().convertToBaseCurrency(\\n                    ccy,\\n                    depositAmount\\n                );\\n            }\\n        }\\n\\n        return totalDepositAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x701c88db974e2bce11ca0a85ef9b5cd6d1f39fa5de6e90b736626d055aeae265\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/math/RoundingUint256.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary RoundingUint256 {\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0);\\n\\n        if ((a * 10) / b - (a / b) * 10 < 5) {\\n            return a / b;\\n        } else {\\n            return (a / b) + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb063c0e8aa8a0bfc9303bd5a1c1d9f54b19cb85d8859aa505ba4162769fc7306\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/chainlink/AggregatorV3Interface.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct PriceFeed {\\n    AggregatorV3Interface[] instances;\\n    uint256[] heartbeats;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.currencyController\\\")) - 1);\\n\\n    struct Storage {\\n        // Protocol currencies\\n        EnumerableSet.Bytes32Set currencies;\\n        mapping(bytes32 ccy => uint256 haircut) haircuts;\\n        // Total cached decimals of the price feeds\\n        mapping(bytes32 ccy => uint8 decimals) decimalsCaches;\\n        mapping(bytes32 ccy => PriceFeed priceFeed) priceFeeds;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5485fa8fc79ac418525aed23300dd0111ecb5403121104ad6bb09d196c8e82f5\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nstruct AutoRollLog {\\n    uint256 unitPrice;\\n    uint256 lendingCompoundFactor;\\n    uint256 borrowingCompoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.genesisValueVault\\\")) - 1);\\n\\n    struct Storage {\\n        mapping(bytes32 ccy => bool isInitialized) isInitialized;\\n        mapping(bytes32 ccy => uint256 compoundFactor) initialCompoundFactors;\\n        mapping(bytes32 ccy => uint256 compoundFactor) lendingCompoundFactors;\\n        mapping(bytes32 ccy => uint256 compoundFactor) borrowingCompoundFactors;\\n        mapping(bytes32 ccy => uint256 maturity) currentMaturity;\\n        mapping(bytes32 ccy => uint8 decimals) decimals;\\n        mapping(bytes32 ccy => mapping(address user => int256 balance)) balances;\\n        mapping(bytes32 ccy => uint256 amount) totalLendingSupplies;\\n        mapping(bytes32 ccy => uint256 amount) totalBorrowingSupplies;\\n        // Total amount supplied per maturity\\n        mapping(bytes32 ccy => mapping(uint256 maturity => int256 balance)) maturityBalances;\\n        mapping(bytes32 ccy => mapping(uint256 maturity => AutoRollLog log)) autoRollLogs;\\n        // Maturity when the user receives the balance on the target currency\\n        mapping(bytes32 ccy => mapping(address user => uint256 maturity)) userMaturities;\\n        mapping(bytes32 ccy => uint256 balance) totalLockedBalances;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xda77d523b56fbba23ad00d3583a83a829bd715c710f197ba62712fb60ee1dac2\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/LendingMarketControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct ObservationPeriodLog {\\n    uint256 totalAmount;\\n    uint256 totalFutureValue;\\n}\\n\\nstruct TerminationCurrencyCache {\\n    int256 price;\\n    uint8 decimals;\\n}\\n\\nstruct ZCTokenInfo {\\n    bytes32 ccy;\\n    uint256 maturity;\\n}\\n\\nlibrary LendingMarketControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.lendingMarketController\\\")) - 1);\\n\\n    struct Storage {\\n        uint256 marketBasePeriod;\\n        uint256 terminationDate;\\n        mapping(bytes32 ccy => TerminationCurrencyCache currency) terminationCurrencyCaches;\\n        mapping(bytes32 ccy => uint256 ratio) terminationCollateralRatios;\\n        mapping(bytes32 ccy => uint8[] orderBookIds) orderBookIdLists;\\n        mapping(bytes32 ccy => address lendingMarket) lendingMarkets;\\n        mapping(bytes32 ccy => address futureValueVault) futureValueVaults;\\n        mapping(bytes32 ccy => uint256 unitPrice) minDebtUnitPrices;\\n        mapping(bytes32 ccy => uint256 genesisDate) genesisDates;\\n        mapping(bytes32 ccy => mapping(uint256 maturity => uint256 amount)) pendingOrderAmounts;\\n        // Order book id history to get order book id from maturity\\n        mapping(bytes32 ccy => mapping(uint256 maturity => uint8 orderBookIds)) maturityOrderBookIds;\\n        // List of maturity that the user has open orders or positions\\n        mapping(bytes32 ccy => mapping(address user => EnumerableSet.UintSet maturities)) usedMaturities;\\n        // Observation period logs that is used for auto-rolls\\n        mapping(bytes32 ccy => mapping(uint256 maturity => ObservationPeriodLog log)) observationPeriodLogs;\\n        // List of currency that the user has open orders or positions\\n        mapping(address user => EnumerableSet.Bytes32Set currency) usedCurrencies;\\n        mapping(address user => bool isRedeemed) isRedeemed;\\n        mapping(bytes32 ccy => mapping(uint256 maturity => address token)) zcTokens;\\n        mapping(address token => ZCTokenInfo) zcTokenInfo;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8811a19e2f51e3fc813292c1ff80d2f24e7951c3c377da84c5f005a8197b07f\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/TokenVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {EnumerableSet} from \\\"../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary TokenVaultStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.tokenVault\\\")) - 1);\\n\\n    struct Storage {\\n        // Liquidation threshold rate (in basis point)\\n        uint256 liquidationThresholdRate;\\n        // Liquidation fee rate received by protocol (in basis point)\\n        uint256 liquidationProtocolFeeRate;\\n        // Liquidation fee rate received by liquidators (in basis point)\\n        uint256 liquidatorFeeRate;\\n        // Currencies accepted as collateral\\n        EnumerableSet.Bytes32Set collateralCurrencies;\\n        mapping(bytes32 ccy => address tokenAddress) tokenAddresses;\\n        // List of currency that the user has deposit amounts\\n        mapping(address user => EnumerableSet.Bytes32Set currency) usedCurrencies;\\n        mapping(bytes32 ccy => uint256 totalDepositAmount) totalDepositAmount;\\n        mapping(address user => mapping(bytes32 currency => uint256 depositAmount)) depositAmounts;\\n        // Full liquidation threshold rate (in basis point)\\n        uint256 fullLiquidationThresholdRate;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae5d4aa31af9ac4d98d384aa3203a88356fdda8e61e9958bd06e5ac1112dc607\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/libraries/TransferHelperStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary TransferHelperStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.transferHelper\\\")) - 1);\\n\\n    struct Storage {\\n        address nativeToken;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8b1860e468280ebdccca0a4276fd31b58e0a84addb320f5d62372d644173f72\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/mixins/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {IAddressResolver} from \\\"../../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.mixinAddressResolver\\\")) - 1);\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 contractName => address contractAddress) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5663ed356830b742d6f13379afdd7d041ae71e13ad2ea64d8d63ca9e6ef8ab75\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0x409169980b48b1bd32af609ac7b90f5c29e064cbec3d83d81767d72192ba07a2\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101355760003560e01c806354821c21116100b7578063aa5974d31161007b578063aa5974d3146102f2578063ca42303114610312578063f7ef28d414610325578063fb7bd3b41461034f578063fc7008101461036f57600080fd5b806354821c21146102865780635575fba7146102995780637d044b43146102ac5780637d44828e146102cc578063948060dd146102df57600080fd5b80632917173a116100fe5780632917173a146101d6578063392d4301146101f65780634ba0c9b514610218578063500d2f6d146102385780635257ed671461025857600080fd5b8062fcf2621461013a5780630253cd7e146101675780630eadd2441461018857806325a890321461019b5780632910ae9d146101ae575b600080fd5b61014d610148366004611e68565b61038f565b604080519283526020830191909152015b60405180910390f35b61017a610175366004611e9d565b6103d9565b60405190815260200161015e565b61017a610196366004611ec7565b6104dc565b61017a6101a9366004611ef3565b6105b4565b6101c16101bc366004611fa2565b6105e7565b6040805192835290151560208301520161015e565b8180156101e257600080fd5b5061017a6101f136600461202b565b610643565b81801561020257600080fd5b50610216610211366004611e9d565b610717565b005b81801561022457600080fd5b5061021661023336600461202b565b610781565b81801561024457600080fd5b5061017a61025336600461205e565b6107fb565b61026b61026636600461202b565b61084a565b6040805193845260208401929092529082015260600161015e565b61026b610294366004611ef3565b610aef565b61017a6102a7366004611e9d565b610b15565b8180156102b857600080fd5b5061017a6102c7366004611e9d565b610d41565b61026b6102da366004611e9d565b610dd3565b61017a6102ed366004611ef3565b610f38565b8180156102fe57600080fd5b5061021661030d3660046120a2565b610fe2565b61017a610320366004611ef3565b611053565b610338610333366004611e9d565b61106f565b60408051921515835290151560208301520161015e565b81801561035b57600080fd5b5061021661036a36600461202b565b6110cf565b61038261037d366004611ef3565b61116c565b60405161015e91906120e8565b6000806103b46127106103a061119a565b600101546103ae9086612142565b906111c8565b91506103d26127106103c461119a565b600201546103ae9086612142565b9050915091565b6000806103e4611239565b6001600160a01b03166324e4ae0584866103fc61119a565b5460405160e085901b6001600160e01b031916815260048101939093526001600160a01b039091166024830152604482015260640161010060405180830381865afa15801561044f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104739190612159565b9050806000015181608001518260e0015161048c61119a565b6001600160a01b0388166000908152600891909101602090815260408083208984529091529020546104be91906121e9565b6104c891906121fc565b6104d291906121fc565b9150505b92915050565b6000806104e983856103d9565b9050610500846104f761119a565b60030190611269565b156105a957600061051084610f38565b9050600061051c611281565b604051630718de8160e21b815260048101889052602481018490526001600160a01b039190911690631c637a0490604401602060405180830381865afa15801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e919061220f565b90508083101561059e57826105a0565b805b935050506105ad565b8091505b5092915050565b60008060006105c284610aef565b50915091508082116105d55760006105df565b6105df81836121fc565b949350505050565b6000806000806105f786866112a1565b9550919350915050600082900361062057801561061657600019610619565b60005b935061063a565b8161062d61271083612142565b6106379190612228565b93505b50509250929050565b600061064f83856104dc565b905080821161065e5781610660565b805b90508061066b61119a565b6000858152600791909101602052604090205410156106a5576040516334b7c99360e11b8152600481018490526024015b60405180910390fd5b806106ae61119a565b600701600085815260200190815260200160002060008282546106d191906121fc565b909155506106e290508484836110cf565b6107106106ed61119a565b600085815260059190910160205260409020546001600160a01b0316858361150e565b9392505050565b61071f61119a565b6001600160a01b038316600090815260089190910160209081526040808320848452909152812054900361077d5761077b8161075961119a565b6001600160a01b03851660009081526006919091016020526040902090611544565b505b5050565b8061078a61119a565b6001600160a01b038516600090815260089190910160209081526040808320868452909152812080549091906107c19084906121e9565b909155506107f59050826107d361119a565b6001600160a01b03861660009081526006919091016020526040902090611550565b50505050565b60008061080885876103d9565b905060008382101561081a578161081c565b835b905061082881856121fc565b92506108358688836110cf565b610840858883610781565b5050949350505050565b600080600080600061085b88610aef565b50915091508060000361087a5760008060009450945094505050610ae6565b60006108868989610dd3565b50509050806000036108a5576000806000955095509550505050610ae6565b6000806108b8846103ae61271088612142565b90506108c261119a565b600901548110156108d5578391506108f3565b6108dd61119a565b548110156108f3576108f08460026111c8565b91505b60408051600280825260608201835260009260208301908036833701905050905082816000815181106109285761092861224a565b60200260200101818152505085816001815181106109485761094861224a565b602002602001018181525050600061095e611281565b6001600160a01b031663fa4571908d846040518363ffffffff1660e01b815260040161098b929190612260565b600060405180830381865afa1580156109a8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109d091908101906122ae565b9050806000815181106109e5576109e561224a565b60200260200101519950600081600181518110610a0457610a0461224a565b602002602001015190508b8b1115610a1a578b9a505b610a238b61038f565b909a509850600089610a358c8e6121e9565b610a3f91906121e9565b90508681118015610a4f57508682115b15610adc5750856000610a6061119a565b6002015490506000610a7061119a565b600101549050610a9a81610a86846127106121e9565b610a9091906121e9565b6103ae8386612142565b9c50610ac081610aac846127106121e9565b610ab691906121e9565b6103ae8486612142565b9b508b610acd8e856121fc565b610ad791906121fc565b9d5050505b5050505050505050505b93509350939050565b6000806000610afc611e28565b610b0685826112a1565b50919790965090945092505050565b60408051600280825260608201835260009283929190602083019080368337019050509050610b4384610aef565b5082600081518110610b5757610b5761224a565b6020026020010183600181518110610b7157610b7161224a565b602090810291909101019190915252610b88611281565b6001600160a01b031663fa45719084836040518363ffffffff1660e01b8152600401610bb5929190612260565b600060405180830381865afa158015610bd2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bfa91908101906122ae565b9050600081600081518110610c1157610c1161224a565b60200260200101519050600082600181518110610c3057610c3061224a565b602002602001015190506000610c4461119a565b5490506000610c51611239565b6040516324e4ae0560e01b8152600481018990526001600160a01b038a811660248301526044820185905291909116906324e4ae059060640161010060405180830381865afa158015610ca8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccc9190612159565b905060008160400151826020015111610ce6576000610cfa565b81604001518260200151610cfa91906121fc565b90506000610d1984612710610d0f858a6121e9565b6103ae9190612142565b9050848111610d29576000610d33565b610d3385826121fc565b9a9950505050505050505050565b6000610d4b61119a565b6001600160a01b0384166000908152600891909101602090815260408083208584529091528120549150610d7d61119a565b6001600160a01b0385166000908152600891909101602090815260408083208684529091529020556105ad82610db161119a565b6001600160a01b03861660009081526006919091016020526040902090611544565b600080600080610de1611239565b6001600160a01b03166324e4ae058688610df961119a565b5460405160e085901b6001600160e01b031916815260048101939093526001600160a01b039091166024830152604482015260640161010060405180830381865afa158015610e4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e709190612159565b905060008160e00151610e8161119a565b6001600160a01b0389166000908152600891909101602090815260408083208a8452909152902054610eb391906121e9565b9050600082608001518360000151610ecb91906121e9565b90506000836040015183610edf91906121e9565b905081811015610ef0576000610efa565b610efa82826121fc565b96508360c001518460a00151610f1091906121e9565b955081831015610f21576000610f2b565b610f2b82846121fc565b9450505050509250925092565b600080600080610f4785610aef565b92509250925081600003610f5d57949350505050565b610f6561119a565b54610f709083612142565b610f7c61271085612142565b1115610fcf576000610fb3612710610f9261119a565b54610f9d9086612142565b610fa961271088612142565b6103ae91906121fc565b905081811015610fc35780610fc5565b815b9695505050505050565b506000949350505050565b505050919050565b611011610fed61119a565b600085815260059190910160205260409020546001600160a01b031685308561155c565b61101c818484610781565b8161102561119a565b6007016000858152602001908152602001600020600082825461104891906121e9565b909155505050505050565b600061105d611e28565b61106783826105e7565b509392505050565b60008061107a611e28565b8381526000808061108b88856112a1565b935050925092508015945081600014806110c257506110a861119a565b546110b39083612142565b6110bf61271085612142565b10155b9550505050509250929050565b806110d861119a565b6001600160a01b0385166000908152600891909101602090815260408083208684529091529020541015611122576040516337597dbd60e11b81526004810183905260240161069c565b8061112b61119a565b6001600160a01b038516600090815260089190910160209081526040808320868452909152812080549091906111629084906121fc565b9091555050505050565b60606104d661117961119a565b6001600160a01b038416600090815260069190910160205260409020611593565b6000806104d660017f53832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a83176121fc565b60008082116111d657600080fd5b60056111e28385612228565b6111ed90600a612142565b836111f986600a612142565b6112039190612228565b61120d91906121fc565b10156112245761121d8284612228565b90506104d6565b61122e8284612228565b61121d9060016121e9565b60006112647f4c656e64696e674d61726b6574436f6e74726f6c6c65720000000000000000006115a0565b905090565b60008181526001830160205260408120541515610710565b60006112647121bab93932b731bca1b7b73a3937b63632b960711b6115a0565b6000806000806112ef60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006112f9611239565b6001600160a01b0316639e0998b2898961131161119a565b546040805160e086901b6001600160e01b03191681526001600160a01b0390941660048501528251602485015260208301516044850152820151606484015260608201516084840152608082015160a484015260a082015160c484015260c09091015160e48301526101048201526101240161012060405180830381865afa1580156113a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c59190612354565b8051835260208082015190840181905260408083015190850152608080830151606086015260a0808401519186019190915260c0808401519186019190915260e080840151918601919091526101008301519085015290915061142661119a565b6001600160a01b038a166000908152600891909101602090815260408083208b518452909152902054835161145b91906121e9565b101561146657600192505b600061147189611601565b905060008360e001518261148591906121e9565b905060008460800151856040015161149d91906121e9565b905060008560600151836114b191906121e9565b9050818110156114c25760006114cc565b6114cc82826121fc565b99508560c001518660a001516114e291906121e9565b9850818310156114f35760006114fd565b6114fd82846121fc565b975050505050505092959194509250565b61151661172e565b546001600160a01b039081169084160361153957611534828261175c565b61077b565b61077b838383611866565b60006107108383611981565b60006107108383611a74565b61156461172e565b546001600160a01b0390811690851603611587576115828282611ac3565b6107f5565b6107f584848484611b65565b6060600061071083611c95565b6000806115ab611cf1565b600084815260019190910160205260409020546001600160a01b03169050806104d65760408051602081018590520160408051601f19818403018152908290526346e2ec9360e01b825261069c916004016123f3565b60008061160c61119a565b6001600160a01b038416600090815260069190910160205260408120915061163382611d1f565b905060005b81811015610fda57600061164c8483611d29565b905061165a816104f761119a565b1561171b57600061166961119a565b6001600160a01b038816600090815260089190910160209081526040808320858452909152902054905061169b611281565b604051636ed2f1db60e01b815260048101849052602481018390526001600160a01b039190911690636ed2f1db90604401602060405180830381865afa1580156116e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170d919061220f565b61171790876121e9565b9550505b508061172681612426565b915050611638565b6000806104d660017f6f969d660e14559aec53d066903ba87981d0679d31bf1d3793a220e70e02808b6121fc565b600061176661172e565b546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156117ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d0919061220f565b9050818110156117f25760405162461bcd60e51b815260040161069c9061243f565b801561077b5761180061172e565b54604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561184457600080fd5b505af1158015611858573d6000803e3d6000fd5b5050505061077b8383611d35565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916118c29190612483565b6000604051808303816000865af19150503d80600081146118ff576040519150601f19603f3d011682016040523d82523d6000602084013e611904565b606091505b509150915081801561192e57508051158061192e57508080602001905181019061192e919061249f565b61197a5760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015260640161069c565b5050505050565b60008181526001830160205260408120548015611a6a5760006119a56001836121fc565b85549091506000906119b9906001906121fc565b9050818114611a1e5760008660000182815481106119d9576119d961224a565b90600052602060002001549050808760000184815481106119fc576119fc61224a565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611a2f57611a2f6124c1565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104d6565b60009150506104d6565b6000818152600183016020526040812054611abb575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104d6565b5060006104d6565b80471015611ae35760405162461bcd60e51b815260040161069c9061243f565b611aeb61172e565b5460408051630d0e30db60e41b815290516001600160a01b039092169163d0e30db0918491600480830192600092919082900301818588803b158015611b3057600080fd5b505af1158015611b44573d6000803e3d6000fd5b505050505061077d611b5461172e565b546001600160a01b03168383611866565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691611bc99190612483565b6000604051808303816000865af19150503d8060008114611c06576040519150601f19603f3d011682016040523d82523d6000602084013e611c0b565b606091505b5091509150818015611c35575080511580611c35575080806020019051810190611c35919061249f565b611c8d5760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416044820152631253115160e21b606482015260840161069c565b505050505050565b606081600001805480602002602001604051908101604052809291908181526020018280548015611ce557602002820191906000526020600020905b815481526020019060010190808311611cd1575b50505050509050919050565b6000806104d660017f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240186121fc565b60006104d6825490565b60006107108383611dfe565b604080516000808252602082019092526001600160a01b038416908390604051611d5f9190612483565b60006040518083038185875af1925050503d8060008114611d9c576040519150601f19603f3d011682016040523d82523d6000602084013e611da1565b606091505b505090508061077b5760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b606482015260840161069c565b6000826000018281548110611e1557611e1561224a565b9060005260206000200154905092915050565b6040518060e00160405280600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600060208284031215611e7a57600080fd5b5035919050565b80356001600160a01b0381168114611e9857600080fd5b919050565b60008060408385031215611eb057600080fd5b611eb983611e81565b946020939093013593505050565b60008060408385031215611eda57600080fd5b82359150611eea60208401611e81565b90509250929050565b600060208284031215611f0557600080fd5b61071082611e81565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715611f4757611f47611f0e565b60405290565b604051610120810167ffffffffffffffff81118282101715611f4757611f47611f0e565b604051601f8201601f1916810167ffffffffffffffff81118282101715611f9a57611f9a611f0e565b604052919050565b600080828403610100811215611fb757600080fd5b611fc084611e81565b925060e0601f1982011215611fd457600080fd5b50611fdd611f24565b6020840135815260408401356020820152606084013560408201526080840135606082015260a0840135608082015260c084013560a082015260e084013560c0820152809150509250929050565b60008060006060848603121561204057600080fd5b61204984611e81565b95602085013595506040909401359392505050565b6000806000806080858703121561207457600080fd5b8435935061208460208601611e81565b925061209260408601611e81565b9396929550929360600135925050565b600080600080608085870312156120b857600080fd5b6120c185611e81565b935060208501359250604085013591506120dd60608601611e81565b905092959194509250565b6020808252825182820181905260009190848201906040850190845b8181101561212057835183529284019291840191600101612104565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176104d6576104d661212c565b600061010080838503121561216d57600080fd5b6040519081019067ffffffffffffffff8211818310171561219057612190611f0e565b81604052835181526020840151602082015260408401516040820152606084015160608201526080840151608082015260a084015160a082015260c084015160c082015260e084015160e0820152809250505092915050565b808201808211156104d6576104d661212c565b818103818111156104d6576104d661212c565b60006020828403121561222157600080fd5b5051919050565b60008261224557634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6000604082018483526020604081850152818551808452606086019150828701935060005b818110156122a157845183529383019391830191600101612285565b5090979650505050505050565b600060208083850312156122c157600080fd5b825167ffffffffffffffff808211156122d957600080fd5b818501915085601f8301126122ed57600080fd5b8151818111156122ff576122ff611f0e565b8060051b9150612310848301611f71565b818152918301840191848101908884111561232a57600080fd5b938501935b838510156123485784518252938501939085019061232f565b98975050505050505050565b6000610120828403121561236757600080fd5b61236f611f4d565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152508091505092915050565b60005b838110156123ea5781810151838201526020016123d2565b50506000910152565b60208152600082518060208401526124128160408501602087016123cf565b601f01601f19169190910160400192915050565b6000600182016124385761243861212c565b5060010190565b60208082526024908201527f5472616e7366657248656c7065723a20496e73756666696369656e742062616c604082015263616e636560e01b606082015260800190565b600082516124958184602087016123cf565b9190910192915050565b6000602082840312156124b157600080fd5b815180151581146105a957600080fd5b634e487b7160e01b600052603160045260246000fdfea264697066735822122068b66f140c443ef18fe890d8a097866c5e7992ac2cd8cf324cd42182fa279beb64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}